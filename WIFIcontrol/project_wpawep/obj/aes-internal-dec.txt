; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\aes-internal-dec.o --depend=.\obj\aes-internal-dec.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\aes-internal-dec.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\aes-internal-dec.c]
                          THUMB

                          AREA ||i.aes_decrypt||, CODE, READONLY, ALIGN=1

                  aes_decrypt PROC
;;;140    
;;;141    void aes_decrypt(void *ctx, const u8 *crypt, u8 *plain)
000000  b570              PUSH     {r4-r6,lr}
;;;142    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;143    	rijndaelDecrypt(ctx, crypt, plain);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       rijndaelDecrypt
;;;144    }
000012  bd70              POP      {r4-r6,pc}
;;;145    
                          ENDP


                          AREA ||i.aes_decrypt_deinit||, CODE, READONLY, ALIGN=1

                  aes_decrypt_deinit PROC
;;;146    
;;;147    void aes_decrypt_deinit(void *ctx)
000000  b510              PUSH     {r4,lr}
;;;148    {
000002  4604              MOV      r4,r0
;;;149    	os_memset(ctx, 0, AES_PRIV_SIZE);
000004  22b0              MOVS     r2,#0xb0
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       os_memset
;;;150    	os_free(ctx);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       os_free
;;;151    }
000014  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.aes_decrypt_init||, CODE, READONLY, ALIGN=1

                  aes_decrypt_init PROC
;;;61     
;;;62     void * aes_decrypt_init(const u8 *key, size_t len)
000000  b570              PUSH     {r4-r6,lr}
;;;63     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;64     	u32 *rk;
;;;65     	if (len != 16)
000006  2e10              CMP      r6,#0x10
000008  d001              BEQ      |L3.14|
;;;66     		return NULL;
00000a  2000              MOVS     r0,#0
                  |L3.12|
;;;67     	rk = os_malloc(AES_PRIV_SIZE);
;;;68     	if (rk == NULL)
;;;69     		return NULL;
;;;70     	rijndaelKeySetupDec(rk, key);
;;;71     	return rk;
;;;72     }
00000c  bd70              POP      {r4-r6,pc}
                  |L3.14|
00000e  20b0              MOVS     r0,#0xb0              ;67
000010  f7fffffe          BL       os_malloc
000014  4604              MOV      r4,r0                 ;67
000016  b90c              CBNZ     r4,|L3.28|
000018  2000              MOVS     r0,#0                 ;69
00001a  e7f7              B        |L3.12|
                  |L3.28|
00001c  4629              MOV      r1,r5                 ;70
00001e  4620              MOV      r0,r4                 ;70
000020  f7fffffe          BL       rijndaelKeySetupDec
000024  4620              MOV      r0,r4                 ;71
000026  e7f1              B        |L3.12|
;;;73     
                          ENDP


                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L5.30|
00001a  2001              MOVS     r0,#1
                  |L5.28|
;;;495    }
00001c  4770              BX       lr
                  |L5.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L5.28|
;;;496    
                          ENDP


                          AREA ||i.rijndaelDecrypt||, CODE, READONLY, ALIGN=2

                  rijndaelDecrypt PROC
;;;73     
;;;74     static void rijndaelDecrypt(const u32 rk[/*44*/], const u8 ct[16], u8 pt[16])
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;75     {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
;;;76     	u32 s0, s1, s2, s3, t0, t1, t2, t3;
;;;77     	const int Nr = 10;
00000c  200a              MOVS     r0,#0xa
00000e  9002              STR      r0,[sp,#8]
;;;78     #ifndef FULL_UNROLL
;;;79     	int r;
;;;80     #endif /* ?FULL_UNROLL */
;;;81     
;;;82     	/*
;;;83     	 * map byte array block to cipher state
;;;84     	 * and add initial round key:
;;;85     	 */
;;;86     	s0 = GETU32(ct     ) ^ rk[0];
000010  7828              LDRB     r0,[r5,#0]
000012  0600              LSLS     r0,r0,#24
000014  7869              LDRB     r1,[r5,#1]
000016  ea804001          EOR      r0,r0,r1,LSL #16
00001a  78a9              LDRB     r1,[r5,#2]
00001c  ea802001          EOR      r0,r0,r1,LSL #8
000020  78e9              LDRB     r1,[r5,#3]
000022  4048              EORS     r0,r0,r1
000024  6821              LDR      r1,[r4,#0]
000026  4048              EORS     r0,r0,r1
000028  9006              STR      r0,[sp,#0x18]
;;;87     	s1 = GETU32(ct +  4) ^ rk[1];
00002a  7928              LDRB     r0,[r5,#4]
00002c  0601              LSLS     r1,r0,#24
00002e  7968              LDRB     r0,[r5,#5]
000030  ea814100          EOR      r1,r1,r0,LSL #16
000034  79a8              LDRB     r0,[r5,#6]
000036  ea812000          EOR      r0,r1,r0,LSL #8
00003a  79e9              LDRB     r1,[r5,#7]
00003c  4048              EORS     r0,r0,r1
00003e  6861              LDR      r1,[r4,#4]
000040  4048              EORS     r0,r0,r1
000042  9005              STR      r0,[sp,#0x14]
;;;88     	s2 = GETU32(ct +  8) ^ rk[2];
000044  7a28              LDRB     r0,[r5,#8]
000046  0601              LSLS     r1,r0,#24
000048  7a68              LDRB     r0,[r5,#9]
00004a  ea814100          EOR      r1,r1,r0,LSL #16
00004e  7aa8              LDRB     r0,[r5,#0xa]
000050  ea812000          EOR      r0,r1,r0,LSL #8
000054  7ae9              LDRB     r1,[r5,#0xb]
000056  4048              EORS     r0,r0,r1
000058  68a1              LDR      r1,[r4,#8]
00005a  4048              EORS     r0,r0,r1
00005c  9004              STR      r0,[sp,#0x10]
;;;89     	s3 = GETU32(ct + 12) ^ rk[3];
00005e  7b28              LDRB     r0,[r5,#0xc]
000060  0601              LSLS     r1,r0,#24
000062  7b68              LDRB     r0,[r5,#0xd]
000064  ea814100          EOR      r1,r1,r0,LSL #16
000068  7ba8              LDRB     r0,[r5,#0xe]
00006a  ea812000          EOR      r0,r1,r0,LSL #8
00006e  7be9              LDRB     r1,[r5,#0xf]
000070  4048              EORS     r0,r0,r1
000072  68e1              LDR      r1,[r4,#0xc]
000074  4048              EORS     r0,r0,r1
000076  9003              STR      r0,[sp,#0xc]
;;;90     
;;;91     #define ROUND(i,d,s) \
;;;92     d##0 = TD0(s##0) ^ TD1(s##3) ^ TD2(s##2) ^ TD3(s##1) ^ rk[4 * i]; \
;;;93     d##1 = TD0(s##1) ^ TD1(s##0) ^ TD2(s##3) ^ TD3(s##2) ^ rk[4 * i + 1]; \
;;;94     d##2 = TD0(s##2) ^ TD1(s##1) ^ TD2(s##0) ^ TD3(s##3) ^ rk[4 * i + 2]; \
;;;95     d##3 = TD0(s##3) ^ TD1(s##2) ^ TD2(s##1) ^ TD3(s##0) ^ rk[4 * i + 3]
;;;96     
;;;97     #ifdef FULL_UNROLL
;;;98     
;;;99     	ROUND(1,t,s);
;;;100    	ROUND(2,s,t);
;;;101    	ROUND(3,t,s);
;;;102    	ROUND(4,s,t);
;;;103    	ROUND(5,t,s);
;;;104    	ROUND(6,s,t);
;;;105    	ROUND(7,t,s);
;;;106    	ROUND(8,s,t);
;;;107    	ROUND(9,t,s);
;;;108    
;;;109    	rk += Nr << 2;
;;;110    
;;;111    #else  /* !FULL_UNROLL */
;;;112    
;;;113    	/* Nr - 1 full rounds: */
;;;114    	r = Nr >> 1;
000078  200a              MOVS     r0,#0xa
00007a  1040              ASRS     r0,r0,#1
00007c  9001              STR      r0,[sp,#4]
;;;115    	for (;;) {
00007e  bf00              NOP      
                  |L6.128|
;;;116    		ROUND(1,t,s);
000080  9903              LDR      r1,[sp,#0xc]
000082  f3c14107          UBFX     r1,r1,#16,#8
000086  4ae4              LDR      r2,|L6.1048|
000088  f8520021          LDR      r0,[r2,r1,LSL #2]
00008c  2108              MOVS     r1,#8
00008e  f7fffffe          BL       rotr
000092  9906              LDR      r1,[sp,#0x18]
000094  0e09              LSRS     r1,r1,#24
000096  4ae0              LDR      r2,|L6.1048|
000098  f8521021          LDR      r1,[r2,r1,LSL #2]
00009c  ea800b01          EOR      r11,r0,r1
0000a0  9904              LDR      r1,[sp,#0x10]
0000a2  f3c12107          UBFX     r1,r1,#8,#8
0000a6  f8520021          LDR      r0,[r2,r1,LSL #2]
0000aa  2110              MOVS     r1,#0x10
0000ac  f7fffffe          BL       rotr
0000b0  ea8b0b00          EOR      r11,r11,r0
0000b4  9905              LDR      r1,[sp,#0x14]
0000b6  b2c9              UXTB     r1,r1
0000b8  4ad7              LDR      r2,|L6.1048|
0000ba  f8520021          LDR      r0,[r2,r1,LSL #2]
0000be  2118              MOVS     r1,#0x18
0000c0  f7fffffe          BL       rotr
0000c4  ea8b0b00          EOR      r11,r11,r0
0000c8  6920              LDR      r0,[r4,#0x10]
0000ca  ea8b0700          EOR      r7,r11,r0
0000ce  9906              LDR      r1,[sp,#0x18]
0000d0  f3c14107          UBFX     r1,r1,#16,#8
0000d4  4ad0              LDR      r2,|L6.1048|
0000d6  f8520021          LDR      r0,[r2,r1,LSL #2]
0000da  2108              MOVS     r1,#8
0000dc  f7fffffe          BL       rotr
0000e0  9905              LDR      r1,[sp,#0x14]
0000e2  0e09              LSRS     r1,r1,#24
0000e4  4acc              LDR      r2,|L6.1048|
0000e6  f8521021          LDR      r1,[r2,r1,LSL #2]
0000ea  ea800b01          EOR      r11,r0,r1
0000ee  9903              LDR      r1,[sp,#0xc]
0000f0  f3c12107          UBFX     r1,r1,#8,#8
0000f4  f8520021          LDR      r0,[r2,r1,LSL #2]
0000f8  2110              MOVS     r1,#0x10
0000fa  f7fffffe          BL       rotr
0000fe  ea8b0b00          EOR      r11,r11,r0
000102  9904              LDR      r1,[sp,#0x10]
000104  b2c9              UXTB     r1,r1
000106  4ac4              LDR      r2,|L6.1048|
000108  f8520021          LDR      r0,[r2,r1,LSL #2]
00010c  2118              MOVS     r1,#0x18
00010e  f7fffffe          BL       rotr
000112  ea8b0b00          EOR      r11,r11,r0
000116  6960              LDR      r0,[r4,#0x14]
000118  ea8b0800          EOR      r8,r11,r0
00011c  9905              LDR      r1,[sp,#0x14]
00011e  f3c14107          UBFX     r1,r1,#16,#8
000122  4abd              LDR      r2,|L6.1048|
000124  f8520021          LDR      r0,[r2,r1,LSL #2]
000128  2108              MOVS     r1,#8
00012a  f7fffffe          BL       rotr
00012e  9904              LDR      r1,[sp,#0x10]
000130  0e09              LSRS     r1,r1,#24
000132  4ab9              LDR      r2,|L6.1048|
000134  f8521021          LDR      r1,[r2,r1,LSL #2]
000138  ea800b01          EOR      r11,r0,r1
00013c  9906              LDR      r1,[sp,#0x18]
00013e  f3c12107          UBFX     r1,r1,#8,#8
000142  f8520021          LDR      r0,[r2,r1,LSL #2]
000146  2110              MOVS     r1,#0x10
000148  f7fffffe          BL       rotr
00014c  ea8b0b00          EOR      r11,r11,r0
000150  9903              LDR      r1,[sp,#0xc]
000152  b2c9              UXTB     r1,r1
000154  4ab0              LDR      r2,|L6.1048|
000156  f8520021          LDR      r0,[r2,r1,LSL #2]
00015a  2118              MOVS     r1,#0x18
00015c  f7fffffe          BL       rotr
000160  ea8b0b00          EOR      r11,r11,r0
000164  69a0              LDR      r0,[r4,#0x18]
000166  ea8b0900          EOR      r9,r11,r0
00016a  9904              LDR      r1,[sp,#0x10]
00016c  f3c14107          UBFX     r1,r1,#16,#8
000170  4aa9              LDR      r2,|L6.1048|
000172  f8520021          LDR      r0,[r2,r1,LSL #2]
000176  2108              MOVS     r1,#8
000178  f7fffffe          BL       rotr
00017c  9903              LDR      r1,[sp,#0xc]
00017e  0e09              LSRS     r1,r1,#24
000180  4aa5              LDR      r2,|L6.1048|
000182  f8521021          LDR      r1,[r2,r1,LSL #2]
000186  ea800b01          EOR      r11,r0,r1
00018a  9905              LDR      r1,[sp,#0x14]
00018c  f3c12107          UBFX     r1,r1,#8,#8
000190  f8520021          LDR      r0,[r2,r1,LSL #2]
000194  2110              MOVS     r1,#0x10
000196  f7fffffe          BL       rotr
00019a  ea8b0b00          EOR      r11,r11,r0
00019e  9906              LDR      r1,[sp,#0x18]
0001a0  b2c9              UXTB     r1,r1
0001a2  4a9d              LDR      r2,|L6.1048|
0001a4  f8520021          LDR      r0,[r2,r1,LSL #2]
0001a8  2118              MOVS     r1,#0x18
0001aa  f7fffffe          BL       rotr
0001ae  ea8b0b00          EOR      r11,r11,r0
0001b2  69e0              LDR      r0,[r4,#0x1c]
0001b4  ea8b0a00          EOR      r10,r11,r0
;;;117    		rk += 8;
0001b8  3420              ADDS     r4,r4,#0x20
;;;118    		if (--r == 0)
0001ba  9801              LDR      r0,[sp,#4]
0001bc  1e40              SUBS     r0,r0,#1
0001be  9001              STR      r0,[sp,#4]
0001c0  d100              BNE      |L6.452|
;;;119    			break;
0001c2  e09a              B        |L6.762|
                  |L6.452|
;;;120    		ROUND(0,s,t);
0001c4  f3ca4107          UBFX     r1,r10,#16,#8
0001c8  4a93              LDR      r2,|L6.1048|
0001ca  f8520021          LDR      r0,[r2,r1,LSL #2]
0001ce  2108              MOVS     r1,#8
0001d0  f7fffffe          BL       rotr
0001d4  0e39              LSRS     r1,r7,#24
0001d6  4a90              LDR      r2,|L6.1048|
0001d8  f8521021          LDR      r1,[r2,r1,LSL #2]
0001dc  ea800b01          EOR      r11,r0,r1
0001e0  f3c92107          UBFX     r1,r9,#8,#8
0001e4  f8520021          LDR      r0,[r2,r1,LSL #2]
0001e8  2110              MOVS     r1,#0x10
0001ea  f7fffffe          BL       rotr
0001ee  ea8b0b00          EOR      r11,r11,r0
0001f2  f00801ff          AND      r1,r8,#0xff
0001f6  4a88              LDR      r2,|L6.1048|
0001f8  f8520021          LDR      r0,[r2,r1,LSL #2]
0001fc  2118              MOVS     r1,#0x18
0001fe  f7fffffe          BL       rotr
000202  ea8b0b00          EOR      r11,r11,r0
000206  6820              LDR      r0,[r4,#0]
000208  ea8b0b00          EOR      r11,r11,r0
00020c  f8cdb018          STR      r11,[sp,#0x18]
000210  f3c74107          UBFX     r1,r7,#16,#8
000214  4a80              LDR      r2,|L6.1048|
000216  f8520021          LDR      r0,[r2,r1,LSL #2]
00021a  2108              MOVS     r1,#8
00021c  f7fffffe          BL       rotr
000220  ea4f6118          LSR      r1,r8,#24
000224  4a7c              LDR      r2,|L6.1048|
000226  f8521021          LDR      r1,[r2,r1,LSL #2]
00022a  ea800b01          EOR      r11,r0,r1
00022e  f3ca2107          UBFX     r1,r10,#8,#8
000232  f8520021          LDR      r0,[r2,r1,LSL #2]
000236  2110              MOVS     r1,#0x10
000238  f7fffffe          BL       rotr
00023c  ea8b0b00          EOR      r11,r11,r0
000240  f00901ff          AND      r1,r9,#0xff
000244  4a74              LDR      r2,|L6.1048|
000246  f8520021          LDR      r0,[r2,r1,LSL #2]
00024a  2118              MOVS     r1,#0x18
00024c  f7fffffe          BL       rotr
000250  ea8b0b00          EOR      r11,r11,r0
000254  6860              LDR      r0,[r4,#4]
000256  ea8b0b00          EOR      r11,r11,r0
00025a  f8cdb014          STR      r11,[sp,#0x14]
00025e  f3c84107          UBFX     r1,r8,#16,#8
000262  4a6d              LDR      r2,|L6.1048|
000264  f8520021          LDR      r0,[r2,r1,LSL #2]
000268  2108              MOVS     r1,#8
00026a  f7fffffe          BL       rotr
00026e  ea4f6119          LSR      r1,r9,#24
000272  4a69              LDR      r2,|L6.1048|
000274  f8521021          LDR      r1,[r2,r1,LSL #2]
000278  ea800b01          EOR      r11,r0,r1
00027c  f3c72107          UBFX     r1,r7,#8,#8
000280  f8520021          LDR      r0,[r2,r1,LSL #2]
000284  2110              MOVS     r1,#0x10
000286  f7fffffe          BL       rotr
00028a  ea8b0b00          EOR      r11,r11,r0
00028e  f00a01ff          AND      r1,r10,#0xff
000292  4a61              LDR      r2,|L6.1048|
000294  f8520021          LDR      r0,[r2,r1,LSL #2]
000298  2118              MOVS     r1,#0x18
00029a  f7fffffe          BL       rotr
00029e  ea8b0b00          EOR      r11,r11,r0
0002a2  68a0              LDR      r0,[r4,#8]
0002a4  ea8b0b00          EOR      r11,r11,r0
0002a8  f8cdb010          STR      r11,[sp,#0x10]
0002ac  f3c94107          UBFX     r1,r9,#16,#8
0002b0  4a59              LDR      r2,|L6.1048|
0002b2  f8520021          LDR      r0,[r2,r1,LSL #2]
0002b6  2108              MOVS     r1,#8
0002b8  f7fffffe          BL       rotr
0002bc  ea4f611a          LSR      r1,r10,#24
0002c0  4a55              LDR      r2,|L6.1048|
0002c2  f8521021          LDR      r1,[r2,r1,LSL #2]
0002c6  ea800b01          EOR      r11,r0,r1
0002ca  f3c82107          UBFX     r1,r8,#8,#8
0002ce  f8520021          LDR      r0,[r2,r1,LSL #2]
0002d2  2110              MOVS     r1,#0x10
0002d4  f7fffffe          BL       rotr
0002d8  ea8b0b00          EOR      r11,r11,r0
0002dc  b2f9              UXTB     r1,r7
0002de  4a4e              LDR      r2,|L6.1048|
0002e0  f8520021          LDR      r0,[r2,r1,LSL #2]
0002e4  2118              MOVS     r1,#0x18
0002e6  f7fffffe          BL       rotr
0002ea  ea8b0b00          EOR      r11,r11,r0
0002ee  68e0              LDR      r0,[r4,#0xc]
0002f0  ea8b0b00          EOR      r11,r11,r0
0002f4  f8cdb00c          STR      r11,[sp,#0xc]
0002f8  e6c2              B        |L6.128|
                  |L6.762|
0002fa  bf00              NOP                            ;119
;;;121    	}
;;;122    
;;;123    #endif /* ?FULL_UNROLL */
;;;124    
;;;125    #undef ROUND
;;;126    
;;;127    	/*
;;;128    	 * apply last round and
;;;129    	 * map cipher state to byte array block:
;;;130    	 */
;;;131    	s0 = TD41(t0) ^ TD42(t3) ^ TD43(t2) ^ TD44(t1) ^ rk[0];
0002fc  0e38              LSRS     r0,r7,#24
0002fe  4947              LDR      r1,|L6.1052|
000300  5c08              LDRB     r0,[r1,r0]
000302  0600              LSLS     r0,r0,#24
000304  f3ca4207          UBFX     r2,r10,#16,#8
000308  5c89              LDRB     r1,[r1,r2]
00030a  ea804001          EOR      r0,r0,r1,LSL #16
00030e  4943              LDR      r1,|L6.1052|
000310  f3c92207          UBFX     r2,r9,#8,#8
000314  5c89              LDRB     r1,[r1,r2]
000316  ea802001          EOR      r0,r0,r1,LSL #8
00031a  f00801ff          AND      r1,r8,#0xff
00031e  4a3f              LDR      r2,|L6.1052|
000320  5c51              LDRB     r1,[r2,r1]
000322  4048              EORS     r0,r0,r1
000324  6821              LDR      r1,[r4,#0]
000326  4048              EORS     r0,r0,r1
000328  9006              STR      r0,[sp,#0x18]
;;;132    	PUTU32(pt     , s0);
00032a  9806              LDR      r0,[sp,#0x18]
00032c  0e00              LSRS     r0,r0,#24
00032e  7030              STRB     r0,[r6,#0]
000330  9806              LDR      r0,[sp,#0x18]
000332  0c00              LSRS     r0,r0,#16
000334  7070              STRB     r0,[r6,#1]
000336  9806              LDR      r0,[sp,#0x18]
000338  0a00              LSRS     r0,r0,#8
00033a  70b0              STRB     r0,[r6,#2]
00033c  9806              LDR      r0,[sp,#0x18]
00033e  70f0              STRB     r0,[r6,#3]
;;;133    	s1 = TD41(t1) ^ TD42(t0) ^ TD43(t3) ^ TD44(t2) ^ rk[1];
000340  ea4f6018          LSR      r0,r8,#24
000344  4611              MOV      r1,r2
000346  5c08              LDRB     r0,[r1,r0]
000348  0600              LSLS     r0,r0,#24
00034a  f3c74207          UBFX     r2,r7,#16,#8
00034e  5c89              LDRB     r1,[r1,r2]
000350  ea804001          EOR      r0,r0,r1,LSL #16
000354  4931              LDR      r1,|L6.1052|
000356  f3ca2207          UBFX     r2,r10,#8,#8
00035a  5c89              LDRB     r1,[r1,r2]
00035c  ea802001          EOR      r0,r0,r1,LSL #8
000360  f00901ff          AND      r1,r9,#0xff
000364  4a2d              LDR      r2,|L6.1052|
000366  5c51              LDRB     r1,[r2,r1]
000368  4048              EORS     r0,r0,r1
00036a  6861              LDR      r1,[r4,#4]
00036c  4048              EORS     r0,r0,r1
00036e  9005              STR      r0,[sp,#0x14]
;;;134    	PUTU32(pt +  4, s1);
000370  9805              LDR      r0,[sp,#0x14]
000372  0e00              LSRS     r0,r0,#24
000374  7130              STRB     r0,[r6,#4]
000376  9805              LDR      r0,[sp,#0x14]
000378  0c01              LSRS     r1,r0,#16
00037a  7171              STRB     r1,[r6,#5]
00037c  9805              LDR      r0,[sp,#0x14]
00037e  0a01              LSRS     r1,r0,#8
000380  71b1              STRB     r1,[r6,#6]
000382  9805              LDR      r0,[sp,#0x14]
000384  71f0              STRB     r0,[r6,#7]
;;;135    	s2 = TD41(t2) ^ TD42(t1) ^ TD43(t0) ^ TD44(t3) ^ rk[2];
000386  ea4f6019          LSR      r0,r9,#24
00038a  4611              MOV      r1,r2
00038c  5c08              LDRB     r0,[r1,r0]
00038e  0600              LSLS     r0,r0,#24
000390  f3c84207          UBFX     r2,r8,#16,#8
000394  5c89              LDRB     r1,[r1,r2]
000396  ea804101          EOR      r1,r0,r1,LSL #16
00039a  4820              LDR      r0,|L6.1052|
00039c  f3c72207          UBFX     r2,r7,#8,#8
0003a0  5c80              LDRB     r0,[r0,r2]
0003a2  ea812000          EOR      r0,r1,r0,LSL #8
0003a6  f00a01ff          AND      r1,r10,#0xff
0003aa  4a1c              LDR      r2,|L6.1052|
0003ac  5c51              LDRB     r1,[r2,r1]
0003ae  4048              EORS     r0,r0,r1
0003b0  68a1              LDR      r1,[r4,#8]
0003b2  4048              EORS     r0,r0,r1
0003b4  9004              STR      r0,[sp,#0x10]
;;;136    	PUTU32(pt +  8, s2);
0003b6  9804              LDR      r0,[sp,#0x10]
0003b8  0e00              LSRS     r0,r0,#24
0003ba  7230              STRB     r0,[r6,#8]
0003bc  9804              LDR      r0,[sp,#0x10]
0003be  0c01              LSRS     r1,r0,#16
0003c0  7271              STRB     r1,[r6,#9]
0003c2  9804              LDR      r0,[sp,#0x10]
0003c4  0a01              LSRS     r1,r0,#8
0003c6  72b1              STRB     r1,[r6,#0xa]
0003c8  9804              LDR      r0,[sp,#0x10]
0003ca  72f0              STRB     r0,[r6,#0xb]
;;;137    	s3 = TD41(t3) ^ TD42(t2) ^ TD43(t1) ^ TD44(t0) ^ rk[3];
0003cc  ea4f601a          LSR      r0,r10,#24
0003d0  4611              MOV      r1,r2
0003d2  5c08              LDRB     r0,[r1,r0]
0003d4  0601              LSLS     r1,r0,#24
0003d6  4610              MOV      r0,r2
0003d8  f3c94207          UBFX     r2,r9,#16,#8
0003dc  5c80              LDRB     r0,[r0,r2]
0003de  ea814000          EOR      r0,r1,r0,LSL #16
0003e2  490e              LDR      r1,|L6.1052|
0003e4  f3c82207          UBFX     r2,r8,#8,#8
0003e8  5c89              LDRB     r1,[r1,r2]
0003ea  ea802001          EOR      r0,r0,r1,LSL #8
0003ee  b2f9              UXTB     r1,r7
0003f0  4a0a              LDR      r2,|L6.1052|
0003f2  5c51              LDRB     r1,[r2,r1]
0003f4  4048              EORS     r0,r0,r1
0003f6  68e1              LDR      r1,[r4,#0xc]
0003f8  4048              EORS     r0,r0,r1
0003fa  9003              STR      r0,[sp,#0xc]
;;;138    	PUTU32(pt + 12, s3);
0003fc  9803              LDR      r0,[sp,#0xc]
0003fe  0e00              LSRS     r0,r0,#24
000400  7330              STRB     r0,[r6,#0xc]
000402  9803              LDR      r0,[sp,#0xc]
000404  0c01              LSRS     r1,r0,#16
000406  7371              STRB     r1,[r6,#0xd]
000408  9803              LDR      r0,[sp,#0xc]
00040a  0a01              LSRS     r1,r0,#8
00040c  73b1              STRB     r1,[r6,#0xe]
00040e  9803              LDR      r0,[sp,#0xc]
000410  73f0              STRB     r0,[r6,#0xf]
;;;139    }
000412  b007              ADD      sp,sp,#0x1c
000414  e8bd8ff0          POP      {r4-r11,pc}
;;;140    
                          ENDP

                  |L6.1048|
                          DCD      Td0
                  |L6.1052|
                          DCD      Td4s

                          AREA ||i.rijndaelKeySetupDec||, CODE, READONLY, ALIGN=2

                  rijndaelKeySetupDec PROC
;;;34      */
;;;35     void rijndaelKeySetupDec(u32 rk[/*44*/], const u8 cipherKey[])
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;36     {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;37     	int Nr = 10, i, j;
000008  f04f080a          MOV      r8,#0xa
;;;38     	u32 temp;
;;;39     
;;;40     	/* expand the cipher key: */
;;;41     	rijndaelKeySetupEnc(rk, cipherKey);
00000c  4649              MOV      r1,r9
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       rijndaelKeySetupEnc
;;;42     	/* invert the order of the round keys: */
;;;43     	for (i = 0, j = 4*Nr; i < j; i += 4, j -= 4) {
000014  2600              MOVS     r6,#0
000016  ea4f0588          LSL      r5,r8,#2
00001a  e02d              B        |L7.120|
                  |L7.28|
;;;44     		temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
00001c  f8547026          LDR      r7,[r4,r6,LSL #2]
000020  f8540025          LDR      r0,[r4,r5,LSL #2]
000024  f8440026          STR      r0,[r4,r6,LSL #2]
000028  f8447025          STR      r7,[r4,r5,LSL #2]
;;;45     		temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
00002c  1c70              ADDS     r0,r6,#1
00002e  f8547020          LDR      r7,[r4,r0,LSL #2]
000032  1c68              ADDS     r0,r5,#1
000034  f8541020          LDR      r1,[r4,r0,LSL #2]
000038  1c70              ADDS     r0,r6,#1
00003a  f8441020          STR      r1,[r4,r0,LSL #2]
00003e  1c68              ADDS     r0,r5,#1
000040  f8447020          STR      r7,[r4,r0,LSL #2]
;;;46     		temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
000044  1cb0              ADDS     r0,r6,#2
000046  f8547020          LDR      r7,[r4,r0,LSL #2]
00004a  1ca8              ADDS     r0,r5,#2
00004c  f8541020          LDR      r1,[r4,r0,LSL #2]
000050  1cb0              ADDS     r0,r6,#2
000052  f8441020          STR      r1,[r4,r0,LSL #2]
000056  1ca8              ADDS     r0,r5,#2
000058  f8447020          STR      r7,[r4,r0,LSL #2]
;;;47     		temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
00005c  1cf0              ADDS     r0,r6,#3
00005e  f8547020          LDR      r7,[r4,r0,LSL #2]
000062  1ce8              ADDS     r0,r5,#3
000064  f8541020          LDR      r1,[r4,r0,LSL #2]
000068  1cf0              ADDS     r0,r6,#3
00006a  f8441020          STR      r1,[r4,r0,LSL #2]
00006e  1ce8              ADDS     r0,r5,#3
000070  f8447020          STR      r7,[r4,r0,LSL #2]
000074  1d36              ADDS     r6,r6,#4              ;43
000076  1f2d              SUBS     r5,r5,#4              ;43
                  |L7.120|
000078  42ae              CMP      r6,r5                 ;43
00007a  dbcf              BLT      |L7.28|
;;;48     	}
;;;49     	/* apply the inverse MixColumn transform to all round keys but the
;;;50     	 * first and the last: */
;;;51     	for (i = 1; i < Nr; i++) {
00007c  2601              MOVS     r6,#1
00007e  e045              B        |L7.268|
                  |L7.128|
;;;52     		rk += 4;
000080  3410              ADDS     r4,r4,#0x10
;;;53     		for (j = 0; j < 4; j++) {
000082  2500              MOVS     r5,#0
000084  e03f              B        |L7.262|
                  |L7.134|
;;;54     			rk[j] = TD0_(TE4((rk[j] >> 24)       )) ^
000086  f8541025          LDR      r1,[r4,r5,LSL #2]
00008a  f3c14107          UBFX     r1,r1,#16,#8
00008e  4a21              LDR      r2,|L7.276|
000090  f8521021          LDR      r1,[r2,r1,LSL #2]
000094  f3c12107          UBFX     r1,r1,#8,#8
000098  4a1f              LDR      r2,|L7.280|
00009a  f8520021          LDR      r0,[r2,r1,LSL #2]
00009e  2108              MOVS     r1,#8
0000a0  f7fffffe          BL       rotr
0000a4  f8541025          LDR      r1,[r4,r5,LSL #2]
0000a8  0e09              LSRS     r1,r1,#24
0000aa  4a1a              LDR      r2,|L7.276|
0000ac  f8521021          LDR      r1,[r2,r1,LSL #2]
0000b0  f3c12107          UBFX     r1,r1,#8,#8
0000b4  4a18              LDR      r2,|L7.280|
0000b6  f8521021          LDR      r1,[r2,r1,LSL #2]
0000ba  ea800a01          EOR      r10,r0,r1
0000be  f8541025          LDR      r1,[r4,r5,LSL #2]
0000c2  f3c12107          UBFX     r1,r1,#8,#8
0000c6  4a13              LDR      r2,|L7.276|
0000c8  f8521021          LDR      r1,[r2,r1,LSL #2]
0000cc  f3c12107          UBFX     r1,r1,#8,#8
0000d0  4a11              LDR      r2,|L7.280|
0000d2  f8520021          LDR      r0,[r2,r1,LSL #2]
0000d6  2110              MOVS     r1,#0x10
0000d8  f7fffffe          BL       rotr
0000dc  ea8a0a00          EOR      r10,r10,r0
0000e0  f8541025          LDR      r1,[r4,r5,LSL #2]
0000e4  b2c9              UXTB     r1,r1
0000e6  4a0b              LDR      r2,|L7.276|
0000e8  f8521021          LDR      r1,[r2,r1,LSL #2]
0000ec  f3c12107          UBFX     r1,r1,#8,#8
0000f0  4a09              LDR      r2,|L7.280|
0000f2  f8520021          LDR      r0,[r2,r1,LSL #2]
0000f6  2118              MOVS     r1,#0x18
0000f8  f7fffffe          BL       rotr
0000fc  ea8a0a00          EOR      r10,r10,r0
000100  f844a025          STR      r10,[r4,r5,LSL #2]
000104  1c6d              ADDS     r5,r5,#1              ;53
                  |L7.262|
000106  2d04              CMP      r5,#4                 ;53
000108  dbbd              BLT      |L7.134|
00010a  1c76              ADDS     r6,r6,#1              ;51
                  |L7.268|
00010c  4546              CMP      r6,r8                 ;51
00010e  dbb7              BLT      |L7.128|
;;;55     				TD1_(TE4((rk[j] >> 16) & 0xff)) ^
;;;56     				TD2_(TE4((rk[j] >>  8) & 0xff)) ^
;;;57     				TD3_(TE4((rk[j]      ) & 0xff));
;;;58     		}
;;;59     	}
;;;60     }
000110  e8bd87f0          POP      {r4-r10,pc}
;;;61     
                          ENDP

                  |L7.276|
                          DCD      Te0
                  |L7.280|
                          DCD      Td0

                          AREA ||i.rotr||, CODE, READONLY, ALIGN=1

                  rotr PROC
;;;71     
;;;72     static inline u32 rotr(u32 val, int bits)
000000  4602              MOV      r2,r0
;;;73     {
;;;74     	return (val >> bits) | (val << (32 - bits));
000002  fa22f001          LSR      r0,r2,r1
000006  f1c10320          RSB      r3,r1,#0x20
00000a  fa02f303          LSL      r3,r2,r3
00000e  4318              ORRS     r0,r0,r3
;;;75     }
000010  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L13.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L13.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L13.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L13.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L16.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L16.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L16.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L16.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L22.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L22.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

