; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\md4-internal.o --depend=.\obj\md4-internal.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\md4-internal.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\md4-internal.c]
                          THUMB

                          AREA ||i.MD4Final||, CODE, READONLY, ALIGN=1

                  MD4Final PROC
;;;170     */
;;;171    static void MD4Final(unsigned char digest[MD4_DIGEST_LENGTH], MD4_CTX *ctx)
000000  b570              PUSH     {r4-r6,lr}
;;;172    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;173    	int i;
;;;174    
;;;175    	MD4Pad(ctx);
000006  4630              MOV      r0,r6
000008  f7fffffe          BL       MD4Pad
;;;176    	if (digest != NULL) {
00000c  b30d              CBZ      r5,|L1.82|
;;;177    		for (i = 0; i < 4; i++)
00000e  2400              MOVS     r4,#0
000010  e018              B        |L1.68|
                  |L1.18|
;;;178    			PUT_32BIT_LE(digest + i * 4, ctx->state[i]);
000012  bf00              NOP      
000014  f8560024          LDR      r0,[r6,r4,LSL #2]
000018  0e00              LSRS     r0,r0,#24
00001a  eb050184          ADD      r1,r5,r4,LSL #2
00001e  70c8              STRB     r0,[r1,#3]
000020  f8560024          LDR      r0,[r6,r4,LSL #2]
000024  0c00              LSRS     r0,r0,#16
000026  eb050184          ADD      r1,r5,r4,LSL #2
00002a  7088              STRB     r0,[r1,#2]
00002c  f8560024          LDR      r0,[r6,r4,LSL #2]
000030  0a00              LSRS     r0,r0,#8
000032  eb050184          ADD      r1,r5,r4,LSL #2
000036  7048              STRB     r0,[r1,#1]
000038  f8560024          LDR      r0,[r6,r4,LSL #2]
00003c  f8050024          STRB     r0,[r5,r4,LSL #2]
000040  bf00              NOP      
000042  1c64              ADDS     r4,r4,#1              ;177
                  |L1.68|
000044  2c04              CMP      r4,#4                 ;177
000046  dbe4              BLT      |L1.18|
;;;179    		os_memset(ctx, 0, sizeof(*ctx));
000048  2254              MOVS     r2,#0x54
00004a  2100              MOVS     r1,#0
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       os_memset
                  |L1.82|
;;;180    	}
;;;181    }
000052  bd70              POP      {r4-r6,pc}
;;;182    
                          ENDP


                          AREA ||i.MD4Init||, CODE, READONLY, ALIGN=2

                  MD4Init PROC
;;;100     */
;;;101    static void MD4Init(MD4_CTX *ctx)
000000  2100              MOVS     r1,#0
;;;102    {
;;;103    	ctx->count = 0;
000002  6101              STR      r1,[r0,#0x10]
;;;104    	ctx->state[0] = 0x67452301;
000004  4905              LDR      r1,|L2.28|
000006  6001              STR      r1,[r0,#0]
;;;105    	ctx->state[1] = 0xefcdab89;
000008  4905              LDR      r1,|L2.32|
00000a  6041              STR      r1,[r0,#4]
;;;106    	ctx->state[2] = 0x98badcfe;
00000c  4903              LDR      r1,|L2.28|
00000e  43c9              MVNS     r1,r1
000010  6081              STR      r1,[r0,#8]
;;;107    	ctx->state[3] = 0x10325476;
000012  4903              LDR      r1,|L2.32|
000014  43c9              MVNS     r1,r1
000016  60c1              STR      r1,[r0,#0xc]
;;;108    }
000018  4770              BX       lr
;;;109    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x67452301
                  |L2.32|
                          DCD      0xefcdab89

                          AREA ||i.MD4Pad||, CODE, READONLY, ALIGN=2

                  MD4Pad PROC
;;;150     */
;;;151    static void MD4Pad(MD4_CTX *ctx)
000000  b57c              PUSH     {r2-r6,lr}
;;;152    {
000002  4604              MOV      r4,r0
;;;153    	u8 count[8];
;;;154    	size_t padlen;
;;;155    
;;;156    	/* Convert count to 8 bytes in little endian order. */
;;;157    	PUT_64BIT_LE(count, ctx->count);
000004  bf00              NOP      
000006  2000              MOVS     r0,#0
000008  f88d0007          STRB     r0,[sp,#7]
00000c  f88d0006          STRB     r0,[sp,#6]
000010  f88d0005          STRB     r0,[sp,#5]
000014  f88d0004          STRB     r0,[sp,#4]
000018  6920              LDR      r0,[r4,#0x10]
00001a  0e00              LSRS     r0,r0,#24
00001c  f88d0003          STRB     r0,[sp,#3]
000020  6920              LDR      r0,[r4,#0x10]
000022  0c00              LSRS     r0,r0,#16
000024  f88d0002          STRB     r0,[sp,#2]
000028  6920              LDR      r0,[r4,#0x10]
00002a  0a00              LSRS     r0,r0,#8
00002c  f88d0001          STRB     r0,[sp,#1]
000030  6920              LDR      r0,[r4,#0x10]
000032  b2c0              UXTB     r0,r0
000034  f88d0000          STRB     r0,[sp,#0]
000038  bf00              NOP      
;;;158    
;;;159    	/* Pad out to 56 mod 64. */
;;;160    	padlen = MD4_BLOCK_LENGTH -
00003a  6920              LDR      r0,[r4,#0x10]
00003c  f3c000c5          UBFX     r0,r0,#3,#6
000040  f1c00540          RSB      r5,r0,#0x40
;;;161    	    ((ctx->count >> 3) & (MD4_BLOCK_LENGTH - 1));
;;;162    	if (padlen < 1 + 8)
000044  2d09              CMP      r5,#9
000046  d200              BCS      |L3.74|
;;;163    		padlen += MD4_BLOCK_LENGTH;
000048  3540              ADDS     r5,r5,#0x40
                  |L3.74|
;;;164    	MD4Update(ctx, PADDING, padlen - 8);		/* padlen - 8 <= 64 */
00004a  f1a50208          SUB      r2,r5,#8
00004e  4905              LDR      r1,|L3.100|
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       MD4Update
;;;165    	MD4Update(ctx, count, 8);
000056  2208              MOVS     r2,#8
000058  4669              MOV      r1,sp
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       MD4Update
;;;166    }
000060  bd7c              POP      {r2-r6,pc}
;;;167    
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      PADDING

                          AREA ||i.MD4Transform||, CODE, READONLY, ALIGN=2

                  MD4Transform PROC
;;;200    static void
;;;201    MD4Transform(u32 state[4], const u8 block[MD4_BLOCK_LENGTH])
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;202    {
000004  b091              SUB      sp,sp,#0x44
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
;;;203    	u32 a, b, c, d, in[MD4_BLOCK_LENGTH / 4];
;;;204    
;;;205    #if BYTE_ORDER == LITTLE_ENDIAN
;;;206    	os_memcpy(in, block, sizeof(in));
00000a  2240              MOVS     r2,#0x40
00000c  4649              MOV      r1,r9
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       os_memcpy
;;;207    #else
;;;208    	for (a = 0; a < MD4_BLOCK_LENGTH / 4; a++) {
;;;209    		in[a] = (u32)(
;;;210    		    (u32)(block[a * 4 + 0]) |
;;;211    		    (u32)(block[a * 4 + 1]) <<  8 |
;;;212    		    (u32)(block[a * 4 + 2]) << 16 |
;;;213    		    (u32)(block[a * 4 + 3]) << 24);
;;;214    	}
;;;215    #endif
;;;216    
;;;217    	a = state[0];
000014  f8d84000          LDR      r4,[r8,#0]
;;;218    	b = state[1];
000018  f8d85004          LDR      r5,[r8,#4]
;;;219    	c = state[2];
00001c  f8d86008          LDR      r6,[r8,#8]
;;;220    	d = state[3];
000020  f8d8700c          LDR      r7,[r8,#0xc]
;;;221    
;;;222    	MD4STEP(F1, a, b, c, d, in[ 0],  3);
000024  ea860007          EOR      r0,r6,r7
000028  4028              ANDS     r0,r0,r5
00002a  4078              EORS     r0,r0,r7
00002c  9901              LDR      r1,[sp,#4]
00002e  4408              ADD      r0,r0,r1
000030  4404              ADD      r4,r4,r0
000032  00e0              LSLS     r0,r4,#3
000034  ea407454          ORR      r4,r0,r4,LSR #29
;;;223    	MD4STEP(F1, d, a, b, c, in[ 1],  7);
000038  ea850006          EOR      r0,r5,r6
00003c  4020              ANDS     r0,r0,r4
00003e  4070              EORS     r0,r0,r6
000040  9902              LDR      r1,[sp,#8]
000042  4408              ADD      r0,r0,r1
000044  4407              ADD      r7,r7,r0
000046  01f8              LSLS     r0,r7,#7
000048  ea406757          ORR      r7,r0,r7,LSR #25
;;;224    	MD4STEP(F1, c, d, a, b, in[ 2], 11);
00004c  ea840005          EOR      r0,r4,r5
000050  4038              ANDS     r0,r0,r7
000052  4068              EORS     r0,r0,r5
000054  9903              LDR      r1,[sp,#0xc]
000056  4408              ADD      r0,r0,r1
000058  4406              ADD      r6,r6,r0
00005a  02f0              LSLS     r0,r6,#11
00005c  ea405656          ORR      r6,r0,r6,LSR #21
;;;225    	MD4STEP(F1, b, c, d, a, in[ 3], 19);
000060  ea870004          EOR      r0,r7,r4
000064  4030              ANDS     r0,r0,r6
000066  4060              EORS     r0,r0,r4
000068  9904              LDR      r1,[sp,#0x10]
00006a  4408              ADD      r0,r0,r1
00006c  4405              ADD      r5,r5,r0
00006e  04e8              LSLS     r0,r5,#19
000070  ea403555          ORR      r5,r0,r5,LSR #13
;;;226    	MD4STEP(F1, a, b, c, d, in[ 4],  3);
000074  ea860007          EOR      r0,r6,r7
000078  4028              ANDS     r0,r0,r5
00007a  4078              EORS     r0,r0,r7
00007c  9905              LDR      r1,[sp,#0x14]
00007e  4408              ADD      r0,r0,r1
000080  4404              ADD      r4,r4,r0
000082  00e0              LSLS     r0,r4,#3
000084  ea407454          ORR      r4,r0,r4,LSR #29
;;;227    	MD4STEP(F1, d, a, b, c, in[ 5],  7);
000088  ea850006          EOR      r0,r5,r6
00008c  4020              ANDS     r0,r0,r4
00008e  4070              EORS     r0,r0,r6
000090  9906              LDR      r1,[sp,#0x18]
000092  4408              ADD      r0,r0,r1
000094  4407              ADD      r7,r7,r0
000096  01f8              LSLS     r0,r7,#7
000098  ea406757          ORR      r7,r0,r7,LSR #25
;;;228    	MD4STEP(F1, c, d, a, b, in[ 6], 11);
00009c  ea840005          EOR      r0,r4,r5
0000a0  4038              ANDS     r0,r0,r7
0000a2  4068              EORS     r0,r0,r5
0000a4  9907              LDR      r1,[sp,#0x1c]
0000a6  4408              ADD      r0,r0,r1
0000a8  4406              ADD      r6,r6,r0
0000aa  02f0              LSLS     r0,r6,#11
0000ac  ea405656          ORR      r6,r0,r6,LSR #21
;;;229    	MD4STEP(F1, b, c, d, a, in[ 7], 19);
0000b0  ea870004          EOR      r0,r7,r4
0000b4  4030              ANDS     r0,r0,r6
0000b6  4060              EORS     r0,r0,r4
0000b8  9908              LDR      r1,[sp,#0x20]
0000ba  4408              ADD      r0,r0,r1
0000bc  4405              ADD      r5,r5,r0
0000be  04e8              LSLS     r0,r5,#19
0000c0  ea403555          ORR      r5,r0,r5,LSR #13
;;;230    	MD4STEP(F1, a, b, c, d, in[ 8],  3);
0000c4  ea860007          EOR      r0,r6,r7
0000c8  4028              ANDS     r0,r0,r5
0000ca  4078              EORS     r0,r0,r7
0000cc  9909              LDR      r1,[sp,#0x24]
0000ce  4408              ADD      r0,r0,r1
0000d0  4404              ADD      r4,r4,r0
0000d2  00e0              LSLS     r0,r4,#3
0000d4  ea407454          ORR      r4,r0,r4,LSR #29
;;;231    	MD4STEP(F1, d, a, b, c, in[ 9],  7);
0000d8  ea850006          EOR      r0,r5,r6
0000dc  4020              ANDS     r0,r0,r4
0000de  4070              EORS     r0,r0,r6
0000e0  990a              LDR      r1,[sp,#0x28]
0000e2  4408              ADD      r0,r0,r1
0000e4  4407              ADD      r7,r7,r0
0000e6  01f8              LSLS     r0,r7,#7
0000e8  ea406757          ORR      r7,r0,r7,LSR #25
;;;232    	MD4STEP(F1, c, d, a, b, in[10], 11);
0000ec  ea840005          EOR      r0,r4,r5
0000f0  4038              ANDS     r0,r0,r7
0000f2  4068              EORS     r0,r0,r5
0000f4  990b              LDR      r1,[sp,#0x2c]
0000f6  4408              ADD      r0,r0,r1
0000f8  4406              ADD      r6,r6,r0
0000fa  02f0              LSLS     r0,r6,#11
0000fc  ea405656          ORR      r6,r0,r6,LSR #21
;;;233    	MD4STEP(F1, b, c, d, a, in[11], 19);
000100  ea870004          EOR      r0,r7,r4
000104  4030              ANDS     r0,r0,r6
000106  4060              EORS     r0,r0,r4
000108  990c              LDR      r1,[sp,#0x30]
00010a  4408              ADD      r0,r0,r1
00010c  4405              ADD      r5,r5,r0
00010e  04e8              LSLS     r0,r5,#19
000110  ea403555          ORR      r5,r0,r5,LSR #13
;;;234    	MD4STEP(F1, a, b, c, d, in[12],  3);
000114  ea860007          EOR      r0,r6,r7
000118  4028              ANDS     r0,r0,r5
00011a  4078              EORS     r0,r0,r7
00011c  990d              LDR      r1,[sp,#0x34]
00011e  4408              ADD      r0,r0,r1
000120  4404              ADD      r4,r4,r0
000122  00e0              LSLS     r0,r4,#3
000124  ea407454          ORR      r4,r0,r4,LSR #29
;;;235    	MD4STEP(F1, d, a, b, c, in[13],  7);
000128  ea850006          EOR      r0,r5,r6
00012c  4020              ANDS     r0,r0,r4
00012e  4070              EORS     r0,r0,r6
000130  990e              LDR      r1,[sp,#0x38]
000132  4408              ADD      r0,r0,r1
000134  4407              ADD      r7,r7,r0
000136  01f8              LSLS     r0,r7,#7
000138  ea406757          ORR      r7,r0,r7,LSR #25
;;;236    	MD4STEP(F1, c, d, a, b, in[14], 11);
00013c  ea840005          EOR      r0,r4,r5
000140  4038              ANDS     r0,r0,r7
000142  4068              EORS     r0,r0,r5
000144  990f              LDR      r1,[sp,#0x3c]
000146  4408              ADD      r0,r0,r1
000148  4406              ADD      r6,r6,r0
00014a  02f0              LSLS     r0,r6,#11
00014c  ea405656          ORR      r6,r0,r6,LSR #21
;;;237    	MD4STEP(F1, b, c, d, a, in[15], 19);
000150  ea870004          EOR      r0,r7,r4
000154  4030              ANDS     r0,r0,r6
000156  4060              EORS     r0,r0,r4
000158  9910              LDR      r1,[sp,#0x40]
00015a  4408              ADD      r0,r0,r1
00015c  4405              ADD      r5,r5,r0
00015e  04e8              LSLS     r0,r5,#19
000160  ea403555          ORR      r5,r0,r5,LSR #13
;;;238    
;;;239    	MD4STEP(F2, a, b, c, d, in[ 0] + 0x5a827999,  3);
000164  ea050006          AND      r0,r5,r6
000168  ea050107          AND      r1,r5,r7
00016c  4308              ORRS     r0,r0,r1
00016e  ea060107          AND      r1,r6,r7
000172  4308              ORRS     r0,r0,r1
000174  9901              LDR      r1,[sp,#4]
000176  4408              ADD      r0,r0,r1
000178  49de              LDR      r1,|L4.1268|
00017a  4408              ADD      r0,r0,r1
00017c  4404              ADD      r4,r4,r0
00017e  00e0              LSLS     r0,r4,#3
000180  ea407454          ORR      r4,r0,r4,LSR #29
;;;240    	MD4STEP(F2, d, a, b, c, in[ 4] + 0x5a827999,  5);
000184  ea040005          AND      r0,r4,r5
000188  ea040106          AND      r1,r4,r6
00018c  4308              ORRS     r0,r0,r1
00018e  ea050106          AND      r1,r5,r6
000192  4308              ORRS     r0,r0,r1
000194  9905              LDR      r1,[sp,#0x14]
000196  4408              ADD      r0,r0,r1
000198  49d6              LDR      r1,|L4.1268|
00019a  4408              ADD      r0,r0,r1
00019c  4407              ADD      r7,r7,r0
00019e  0178              LSLS     r0,r7,#5
0001a0  ea4067d7          ORR      r7,r0,r7,LSR #27
;;;241    	MD4STEP(F2, c, d, a, b, in[ 8] + 0x5a827999,  9);
0001a4  ea070004          AND      r0,r7,r4
0001a8  ea070105          AND      r1,r7,r5
0001ac  4308              ORRS     r0,r0,r1
0001ae  ea040105          AND      r1,r4,r5
0001b2  4308              ORRS     r0,r0,r1
0001b4  9909              LDR      r1,[sp,#0x24]
0001b6  4408              ADD      r0,r0,r1
0001b8  49ce              LDR      r1,|L4.1268|
0001ba  4408              ADD      r0,r0,r1
0001bc  4406              ADD      r6,r6,r0
0001be  0270              LSLS     r0,r6,#9
0001c0  ea4056d6          ORR      r6,r0,r6,LSR #23
;;;242    	MD4STEP(F2, b, c, d, a, in[12] + 0x5a827999, 13);
0001c4  ea060007          AND      r0,r6,r7
0001c8  ea060104          AND      r1,r6,r4
0001cc  4308              ORRS     r0,r0,r1
0001ce  ea070104          AND      r1,r7,r4
0001d2  4308              ORRS     r0,r0,r1
0001d4  990d              LDR      r1,[sp,#0x34]
0001d6  4408              ADD      r0,r0,r1
0001d8  49c6              LDR      r1,|L4.1268|
0001da  4408              ADD      r0,r0,r1
0001dc  4405              ADD      r5,r5,r0
0001de  0368              LSLS     r0,r5,#13
0001e0  ea4045d5          ORR      r5,r0,r5,LSR #19
;;;243    	MD4STEP(F2, a, b, c, d, in[ 1] + 0x5a827999,  3);
0001e4  ea050006          AND      r0,r5,r6
0001e8  ea050107          AND      r1,r5,r7
0001ec  4308              ORRS     r0,r0,r1
0001ee  ea060107          AND      r1,r6,r7
0001f2  4308              ORRS     r0,r0,r1
0001f4  9902              LDR      r1,[sp,#8]
0001f6  4408              ADD      r0,r0,r1
0001f8  49be              LDR      r1,|L4.1268|
0001fa  4408              ADD      r0,r0,r1
0001fc  4404              ADD      r4,r4,r0
0001fe  00e0              LSLS     r0,r4,#3
000200  ea407454          ORR      r4,r0,r4,LSR #29
;;;244    	MD4STEP(F2, d, a, b, c, in[ 5] + 0x5a827999,  5);
000204  ea040005          AND      r0,r4,r5
000208  ea040106          AND      r1,r4,r6
00020c  4308              ORRS     r0,r0,r1
00020e  ea050106          AND      r1,r5,r6
000212  4308              ORRS     r0,r0,r1
000214  9906              LDR      r1,[sp,#0x18]
000216  4408              ADD      r0,r0,r1
000218  49b6              LDR      r1,|L4.1268|
00021a  4408              ADD      r0,r0,r1
00021c  4407              ADD      r7,r7,r0
00021e  0178              LSLS     r0,r7,#5
000220  ea4067d7          ORR      r7,r0,r7,LSR #27
;;;245    	MD4STEP(F2, c, d, a, b, in[ 9] + 0x5a827999,  9);
000224  ea070004          AND      r0,r7,r4
000228  ea070105          AND      r1,r7,r5
00022c  4308              ORRS     r0,r0,r1
00022e  ea040105          AND      r1,r4,r5
000232  4308              ORRS     r0,r0,r1
000234  990a              LDR      r1,[sp,#0x28]
000236  4408              ADD      r0,r0,r1
000238  49ae              LDR      r1,|L4.1268|
00023a  4408              ADD      r0,r0,r1
00023c  4406              ADD      r6,r6,r0
00023e  0270              LSLS     r0,r6,#9
000240  ea4056d6          ORR      r6,r0,r6,LSR #23
;;;246    	MD4STEP(F2, b, c, d, a, in[13] + 0x5a827999, 13);
000244  ea060007          AND      r0,r6,r7
000248  ea060104          AND      r1,r6,r4
00024c  4308              ORRS     r0,r0,r1
00024e  ea070104          AND      r1,r7,r4
000252  4308              ORRS     r0,r0,r1
000254  990e              LDR      r1,[sp,#0x38]
000256  4408              ADD      r0,r0,r1
000258  49a6              LDR      r1,|L4.1268|
00025a  4408              ADD      r0,r0,r1
00025c  4405              ADD      r5,r5,r0
00025e  0368              LSLS     r0,r5,#13
000260  ea4045d5          ORR      r5,r0,r5,LSR #19
;;;247    	MD4STEP(F2, a, b, c, d, in[ 2] + 0x5a827999,  3);
000264  ea050006          AND      r0,r5,r6
000268  ea050107          AND      r1,r5,r7
00026c  4308              ORRS     r0,r0,r1
00026e  ea060107          AND      r1,r6,r7
000272  4308              ORRS     r0,r0,r1
000274  9903              LDR      r1,[sp,#0xc]
000276  4408              ADD      r0,r0,r1
000278  499e              LDR      r1,|L4.1268|
00027a  4408              ADD      r0,r0,r1
00027c  4404              ADD      r4,r4,r0
00027e  00e0              LSLS     r0,r4,#3
000280  ea407454          ORR      r4,r0,r4,LSR #29
;;;248    	MD4STEP(F2, d, a, b, c, in[ 6] + 0x5a827999,  5);
000284  ea040005          AND      r0,r4,r5
000288  ea040106          AND      r1,r4,r6
00028c  4308              ORRS     r0,r0,r1
00028e  ea050106          AND      r1,r5,r6
000292  4308              ORRS     r0,r0,r1
000294  9907              LDR      r1,[sp,#0x1c]
000296  4408              ADD      r0,r0,r1
000298  4996              LDR      r1,|L4.1268|
00029a  4408              ADD      r0,r0,r1
00029c  4407              ADD      r7,r7,r0
00029e  0178              LSLS     r0,r7,#5
0002a0  ea4067d7          ORR      r7,r0,r7,LSR #27
;;;249    	MD4STEP(F2, c, d, a, b, in[10] + 0x5a827999,  9);
0002a4  ea070004          AND      r0,r7,r4
0002a8  ea070105          AND      r1,r7,r5
0002ac  4308              ORRS     r0,r0,r1
0002ae  ea040105          AND      r1,r4,r5
0002b2  4308              ORRS     r0,r0,r1
0002b4  990b              LDR      r1,[sp,#0x2c]
0002b6  4408              ADD      r0,r0,r1
0002b8  498e              LDR      r1,|L4.1268|
0002ba  4408              ADD      r0,r0,r1
0002bc  4406              ADD      r6,r6,r0
0002be  0270              LSLS     r0,r6,#9
0002c0  ea4056d6          ORR      r6,r0,r6,LSR #23
;;;250    	MD4STEP(F2, b, c, d, a, in[14] + 0x5a827999, 13);
0002c4  ea060007          AND      r0,r6,r7
0002c8  ea060104          AND      r1,r6,r4
0002cc  4308              ORRS     r0,r0,r1
0002ce  ea070104          AND      r1,r7,r4
0002d2  4308              ORRS     r0,r0,r1
0002d4  990f              LDR      r1,[sp,#0x3c]
0002d6  4408              ADD      r0,r0,r1
0002d8  4986              LDR      r1,|L4.1268|
0002da  4408              ADD      r0,r0,r1
0002dc  4405              ADD      r5,r5,r0
0002de  0368              LSLS     r0,r5,#13
0002e0  ea4045d5          ORR      r5,r0,r5,LSR #19
;;;251    	MD4STEP(F2, a, b, c, d, in[ 3] + 0x5a827999,  3);
0002e4  ea050006          AND      r0,r5,r6
0002e8  ea050107          AND      r1,r5,r7
0002ec  4308              ORRS     r0,r0,r1
0002ee  ea060107          AND      r1,r6,r7
0002f2  4308              ORRS     r0,r0,r1
0002f4  9904              LDR      r1,[sp,#0x10]
0002f6  4408              ADD      r0,r0,r1
0002f8  497e              LDR      r1,|L4.1268|
0002fa  4408              ADD      r0,r0,r1
0002fc  4404              ADD      r4,r4,r0
0002fe  00e0              LSLS     r0,r4,#3
000300  ea407454          ORR      r4,r0,r4,LSR #29
;;;252    	MD4STEP(F2, d, a, b, c, in[ 7] + 0x5a827999,  5);
000304  ea040005          AND      r0,r4,r5
000308  ea040106          AND      r1,r4,r6
00030c  4308              ORRS     r0,r0,r1
00030e  ea050106          AND      r1,r5,r6
000312  4308              ORRS     r0,r0,r1
000314  9908              LDR      r1,[sp,#0x20]
000316  4408              ADD      r0,r0,r1
000318  4976              LDR      r1,|L4.1268|
00031a  4408              ADD      r0,r0,r1
00031c  4407              ADD      r7,r7,r0
00031e  0178              LSLS     r0,r7,#5
000320  ea4067d7          ORR      r7,r0,r7,LSR #27
;;;253    	MD4STEP(F2, c, d, a, b, in[11] + 0x5a827999,  9);
000324  ea070004          AND      r0,r7,r4
000328  ea070105          AND      r1,r7,r5
00032c  4308              ORRS     r0,r0,r1
00032e  ea040105          AND      r1,r4,r5
000332  4308              ORRS     r0,r0,r1
000334  990c              LDR      r1,[sp,#0x30]
000336  4408              ADD      r0,r0,r1
000338  496e              LDR      r1,|L4.1268|
00033a  4408              ADD      r0,r0,r1
00033c  4406              ADD      r6,r6,r0
00033e  0270              LSLS     r0,r6,#9
000340  ea4056d6          ORR      r6,r0,r6,LSR #23
;;;254    	MD4STEP(F2, b, c, d, a, in[15] + 0x5a827999, 13);
000344  ea060007          AND      r0,r6,r7
000348  ea060104          AND      r1,r6,r4
00034c  4308              ORRS     r0,r0,r1
00034e  ea070104          AND      r1,r7,r4
000352  4308              ORRS     r0,r0,r1
000354  9910              LDR      r1,[sp,#0x40]
000356  4408              ADD      r0,r0,r1
000358  4966              LDR      r1,|L4.1268|
00035a  4408              ADD      r0,r0,r1
00035c  4405              ADD      r5,r5,r0
00035e  0368              LSLS     r0,r5,#13
000360  ea4045d5          ORR      r5,r0,r5,LSR #19
;;;255    
;;;256    	MD4STEP(F3, a, b, c, d, in[ 0] + 0x6ed9eba1,  3);
000364  ea850006          EOR      r0,r5,r6
000368  4078              EORS     r0,r0,r7
00036a  9901              LDR      r1,[sp,#4]
00036c  4408              ADD      r0,r0,r1
00036e  4962              LDR      r1,|L4.1272|
000370  4408              ADD      r0,r0,r1
000372  4404              ADD      r4,r4,r0
000374  00e0              LSLS     r0,r4,#3
000376  ea407454          ORR      r4,r0,r4,LSR #29
;;;257    	MD4STEP(F3, d, a, b, c, in[ 8] + 0x6ed9eba1,  9);
00037a  ea840005          EOR      r0,r4,r5
00037e  4070              EORS     r0,r0,r6
000380  9909              LDR      r1,[sp,#0x24]
000382  4408              ADD      r0,r0,r1
000384  495c              LDR      r1,|L4.1272|
000386  4408              ADD      r0,r0,r1
000388  4407              ADD      r7,r7,r0
00038a  0278              LSLS     r0,r7,#9
00038c  ea4057d7          ORR      r7,r0,r7,LSR #23
;;;258    	MD4STEP(F3, c, d, a, b, in[ 4] + 0x6ed9eba1, 11);
000390  ea870004          EOR      r0,r7,r4
000394  4068              EORS     r0,r0,r5
000396  9905              LDR      r1,[sp,#0x14]
000398  4408              ADD      r0,r0,r1
00039a  4957              LDR      r1,|L4.1272|
00039c  4408              ADD      r0,r0,r1
00039e  4406              ADD      r6,r6,r0
0003a0  02f0              LSLS     r0,r6,#11
0003a2  ea405656          ORR      r6,r0,r6,LSR #21
;;;259    	MD4STEP(F3, b, c, d, a, in[12] + 0x6ed9eba1, 15);
0003a6  ea860007          EOR      r0,r6,r7
0003aa  4060              EORS     r0,r0,r4
0003ac  990d              LDR      r1,[sp,#0x34]
0003ae  4408              ADD      r0,r0,r1
0003b0  4951              LDR      r1,|L4.1272|
0003b2  4408              ADD      r0,r0,r1
0003b4  4405              ADD      r5,r5,r0
0003b6  03e8              LSLS     r0,r5,#15
0003b8  ea404555          ORR      r5,r0,r5,LSR #17
;;;260    	MD4STEP(F3, a, b, c, d, in[ 2] + 0x6ed9eba1,  3);
0003bc  ea850006          EOR      r0,r5,r6
0003c0  4078              EORS     r0,r0,r7
0003c2  9903              LDR      r1,[sp,#0xc]
0003c4  4408              ADD      r0,r0,r1
0003c6  494c              LDR      r1,|L4.1272|
0003c8  4408              ADD      r0,r0,r1
0003ca  4404              ADD      r4,r4,r0
0003cc  00e0              LSLS     r0,r4,#3
0003ce  ea407454          ORR      r4,r0,r4,LSR #29
;;;261    	MD4STEP(F3, d, a, b, c, in[10] + 0x6ed9eba1,  9);
0003d2  ea840005          EOR      r0,r4,r5
0003d6  4070              EORS     r0,r0,r6
0003d8  990b              LDR      r1,[sp,#0x2c]
0003da  4408              ADD      r0,r0,r1
0003dc  4946              LDR      r1,|L4.1272|
0003de  4408              ADD      r0,r0,r1
0003e0  4407              ADD      r7,r7,r0
0003e2  0278              LSLS     r0,r7,#9
0003e4  ea4057d7          ORR      r7,r0,r7,LSR #23
;;;262    	MD4STEP(F3, c, d, a, b, in[ 6] + 0x6ed9eba1, 11);
0003e8  ea870004          EOR      r0,r7,r4
0003ec  4068              EORS     r0,r0,r5
0003ee  9907              LDR      r1,[sp,#0x1c]
0003f0  4408              ADD      r0,r0,r1
0003f2  4941              LDR      r1,|L4.1272|
0003f4  4408              ADD      r0,r0,r1
0003f6  4406              ADD      r6,r6,r0
0003f8  02f0              LSLS     r0,r6,#11
0003fa  ea405656          ORR      r6,r0,r6,LSR #21
;;;263    	MD4STEP(F3, b, c, d, a, in[14] + 0x6ed9eba1, 15);
0003fe  ea860007          EOR      r0,r6,r7
000402  4060              EORS     r0,r0,r4
000404  990f              LDR      r1,[sp,#0x3c]
000406  4408              ADD      r0,r0,r1
000408  493b              LDR      r1,|L4.1272|
00040a  4408              ADD      r0,r0,r1
00040c  4405              ADD      r5,r5,r0
00040e  03e8              LSLS     r0,r5,#15
000410  ea404555          ORR      r5,r0,r5,LSR #17
;;;264    	MD4STEP(F3, a, b, c, d, in[ 1] + 0x6ed9eba1,  3);
000414  ea850006          EOR      r0,r5,r6
000418  4078              EORS     r0,r0,r7
00041a  9902              LDR      r1,[sp,#8]
00041c  4408              ADD      r0,r0,r1
00041e  4936              LDR      r1,|L4.1272|
000420  4408              ADD      r0,r0,r1
000422  4404              ADD      r4,r4,r0
000424  00e0              LSLS     r0,r4,#3
000426  ea407454          ORR      r4,r0,r4,LSR #29
;;;265    	MD4STEP(F3, d, a, b, c, in[ 9] + 0x6ed9eba1,  9);
00042a  ea840005          EOR      r0,r4,r5
00042e  4070              EORS     r0,r0,r6
000430  990a              LDR      r1,[sp,#0x28]
000432  4408              ADD      r0,r0,r1
000434  4930              LDR      r1,|L4.1272|
000436  4408              ADD      r0,r0,r1
000438  4407              ADD      r7,r7,r0
00043a  0278              LSLS     r0,r7,#9
00043c  ea4057d7          ORR      r7,r0,r7,LSR #23
;;;266    	MD4STEP(F3, c, d, a, b, in[ 5] + 0x6ed9eba1, 11);
000440  ea870004          EOR      r0,r7,r4
000444  4068              EORS     r0,r0,r5
000446  9906              LDR      r1,[sp,#0x18]
000448  4408              ADD      r0,r0,r1
00044a  492b              LDR      r1,|L4.1272|
00044c  4408              ADD      r0,r0,r1
00044e  4406              ADD      r6,r6,r0
000450  02f0              LSLS     r0,r6,#11
000452  ea405656          ORR      r6,r0,r6,LSR #21
;;;267    	MD4STEP(F3, b, c, d, a, in[13] + 0x6ed9eba1, 15);
000456  ea860007          EOR      r0,r6,r7
00045a  4060              EORS     r0,r0,r4
00045c  990e              LDR      r1,[sp,#0x38]
00045e  4408              ADD      r0,r0,r1
000460  4925              LDR      r1,|L4.1272|
000462  4408              ADD      r0,r0,r1
000464  4405              ADD      r5,r5,r0
000466  03e8              LSLS     r0,r5,#15
000468  ea404555          ORR      r5,r0,r5,LSR #17
;;;268    	MD4STEP(F3, a, b, c, d, in[ 3] + 0x6ed9eba1,  3);
00046c  ea850006          EOR      r0,r5,r6
000470  4078              EORS     r0,r0,r7
000472  9904              LDR      r1,[sp,#0x10]
000474  4408              ADD      r0,r0,r1
000476  4920              LDR      r1,|L4.1272|
000478  4408              ADD      r0,r0,r1
00047a  4404              ADD      r4,r4,r0
00047c  00e0              LSLS     r0,r4,#3
00047e  ea407454          ORR      r4,r0,r4,LSR #29
;;;269    	MD4STEP(F3, d, a, b, c, in[11] + 0x6ed9eba1,  9);
000482  ea840005          EOR      r0,r4,r5
000486  4070              EORS     r0,r0,r6
000488  990c              LDR      r1,[sp,#0x30]
00048a  4408              ADD      r0,r0,r1
00048c  491a              LDR      r1,|L4.1272|
00048e  4408              ADD      r0,r0,r1
000490  4407              ADD      r7,r7,r0
000492  0278              LSLS     r0,r7,#9
000494  ea4057d7          ORR      r7,r0,r7,LSR #23
;;;270    	MD4STEP(F3, c, d, a, b, in[ 7] + 0x6ed9eba1, 11);
000498  ea870004          EOR      r0,r7,r4
00049c  4068              EORS     r0,r0,r5
00049e  9908              LDR      r1,[sp,#0x20]
0004a0  4408              ADD      r0,r0,r1
0004a2  4915              LDR      r1,|L4.1272|
0004a4  4408              ADD      r0,r0,r1
0004a6  4406              ADD      r6,r6,r0
0004a8  02f0              LSLS     r0,r6,#11
0004aa  ea405656          ORR      r6,r0,r6,LSR #21
;;;271    	MD4STEP(F3, b, c, d, a, in[15] + 0x6ed9eba1, 15);
0004ae  ea860007          EOR      r0,r6,r7
0004b2  4060              EORS     r0,r0,r4
0004b4  9910              LDR      r1,[sp,#0x40]
0004b6  4408              ADD      r0,r0,r1
0004b8  490f              LDR      r1,|L4.1272|
0004ba  4408              ADD      r0,r0,r1
0004bc  4405              ADD      r5,r5,r0
0004be  03e8              LSLS     r0,r5,#15
0004c0  ea404555          ORR      r5,r0,r5,LSR #17
;;;272    
;;;273    	state[0] += a;
0004c4  f8d80000          LDR      r0,[r8,#0]
0004c8  4420              ADD      r0,r0,r4
0004ca  f8c80000          STR      r0,[r8,#0]
;;;274    	state[1] += b;
0004ce  f8d80004          LDR      r0,[r8,#4]
0004d2  4428              ADD      r0,r0,r5
0004d4  f8c80004          STR      r0,[r8,#4]
;;;275    	state[2] += c;
0004d8  f8d80008          LDR      r0,[r8,#8]
0004dc  4430              ADD      r0,r0,r6
0004de  f8c80008          STR      r0,[r8,#8]
;;;276    	state[3] += d;
0004e2  f8d8000c          LDR      r0,[r8,#0xc]
0004e6  4438              ADD      r0,r0,r7
0004e8  f8c8000c          STR      r0,[r8,#0xc]
;;;277    }
0004ec  b011              ADD      sp,sp,#0x44
0004ee  e8bd83f0          POP      {r4-r9,pc}
;;;278    /* ===== end - public domain MD4 implementation ===== */
                          ENDP

0004f2  0000              DCW      0x0000
                  |L4.1268|
                          DCD      0x5a827999
                  |L4.1272|
                          DCD      0x6ed9eba1

                          AREA ||i.MD4Update||, CODE, READONLY, ALIGN=1

                  MD4Update PROC
;;;113     */
;;;114    static void MD4Update(MD4_CTX *ctx, const unsigned char *input, size_t len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;115    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;116    	size_t have, need;
;;;117    
;;;118    	/* Check how many bytes we already have and how many more we need. */
;;;119    	have = (size_t)((ctx->count >> 3) & (MD4_BLOCK_LENGTH - 1));
00000a  6920              LDR      r0,[r4,#0x10]
00000c  f3c006c5          UBFX     r6,r0,#3,#6
;;;120    	need = MD4_BLOCK_LENGTH - have;
000010  f1c60740          RSB      r7,r6,#0x40
;;;121    
;;;122    	/* Update bitcount */
;;;123    	ctx->count += (u64)len << 3;
000014  6920              LDR      r0,[r4,#0x10]
000016  eb0000c5          ADD      r0,r0,r5,LSL #3
00001a  6120              STR      r0,[r4,#0x10]
;;;124    
;;;125    	if (len >= need) {
00001c  42bd              CMP      r5,r7
00001e  d319              BCC      |L5.84|
;;;126    		if (have != 0) {
000020  b176              CBZ      r6,|L5.64|
;;;127    			os_memcpy(ctx->buffer + have, input, need);
000022  f1040114          ADD      r1,r4,#0x14
000026  1988              ADDS     r0,r1,r6
000028  463a              MOV      r2,r7
00002a  4641              MOV      r1,r8
00002c  f7fffffe          BL       os_memcpy
;;;128    			MD4Transform(ctx->state, ctx->buffer);
000030  f1040114          ADD      r1,r4,#0x14
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       MD4Transform
;;;129    			input += need;
00003a  44b8              ADD      r8,r8,r7
;;;130    			len -= need;
00003c  1bed              SUBS     r5,r5,r7
;;;131    			have = 0;
00003e  2600              MOVS     r6,#0
                  |L5.64|
;;;132    		}
;;;133    
;;;134    		/* Process data in MD4_BLOCK_LENGTH-byte chunks. */
;;;135    		while (len >= MD4_BLOCK_LENGTH) {
000040  e006              B        |L5.80|
                  |L5.66|
;;;136    			MD4Transform(ctx->state, input);
000042  4641              MOV      r1,r8
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       MD4Transform
;;;137    			input += MD4_BLOCK_LENGTH;
00004a  f1080840          ADD      r8,r8,#0x40
;;;138    			len -= MD4_BLOCK_LENGTH;
00004e  3d40              SUBS     r5,r5,#0x40
                  |L5.80|
000050  2d40              CMP      r5,#0x40              ;135
000052  d2f6              BCS      |L5.66|
                  |L5.84|
;;;139    		}
;;;140    	}
;;;141    
;;;142    	/* Handle any remaining bytes of data. */
;;;143    	if (len != 0)
000054  b135              CBZ      r5,|L5.100|
;;;144    		os_memcpy(ctx->buffer + have, input, len);
000056  f1040114          ADD      r1,r4,#0x14
00005a  1988              ADDS     r0,r1,r6
00005c  462a              MOV      r2,r5
00005e  4641              MOV      r1,r8
000060  f7fffffe          BL       os_memcpy
                  |L5.100|
;;;145    }
000064  e8bd81f0          POP      {r4-r8,pc}
;;;146    
                          ENDP


                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L7.30|
00001a  2001              MOVS     r0,#1
                  |L7.28|
;;;495    }
00001c  4770              BX       lr
                  |L7.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L7.28|
;;;496    
                          ENDP


                          AREA ||i.md4_vector||, CODE, READONLY, ALIGN=1

                  md4_vector PROC
;;;34     
;;;35     int md4_vector(size_t num_elem, const u8 *addr[], const size_t *len, u8 *mac)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;36     {
000004  b096              SUB      sp,sp,#0x58
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
;;;37     	MD4_CTX ctx;
;;;38     	size_t i;
;;;39     
;;;40     	MD4Init(&ctx);
00000e  a801              ADD      r0,sp,#4
000010  f7fffffe          BL       MD4Init
;;;41     	for (i = 0; i < num_elem; i++)
000014  2400              MOVS     r4,#0
000016  e007              B        |L8.40|
                  |L8.24|
;;;42     		MD4Update(&ctx, addr[i], len[i]);
000018  f8572024          LDR      r2,[r7,r4,LSL #2]
00001c  f8561024          LDR      r1,[r6,r4,LSL #2]
000020  a801              ADD      r0,sp,#4
000022  f7fffffe          BL       MD4Update
000026  1c64              ADDS     r4,r4,#1              ;41
                  |L8.40|
000028  42ac              CMP      r4,r5                 ;41
00002a  d3f5              BCC      |L8.24|
;;;43     	MD4Final(mac, &ctx);
00002c  a901              ADD      r1,sp,#4
00002e  4640              MOV      r0,r8
000030  f7fffffe          BL       MD4Final
;;;44     	return 0;
000034  2000              MOVS     r0,#0
;;;45     }
000036  b016              ADD      sp,sp,#0x58
000038  e8bd81f0          POP      {r4-r8,pc}
;;;46     
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L13.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L13.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L13.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L13.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L16.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L16.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L16.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L16.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L22.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L22.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  PADDING
000000  80000000          DCB      0x80,0x00,0x00,0x00
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  00000000          DCB      0x00,0x00,0x00,0x00
000014  00000000          DCB      0x00,0x00,0x00,0x00
000018  00000000          DCB      0x00,0x00,0x00,0x00
00001c  00000000          DCB      0x00,0x00,0x00,0x00
000020  00000000          DCB      0x00,0x00,0x00,0x00
000024  00000000          DCB      0x00,0x00,0x00,0x00
000028  00000000          DCB      0x00,0x00,0x00,0x00
00002c  00000000          DCB      0x00,0x00,0x00,0x00
000030  00000000          DCB      0x00,0x00,0x00,0x00
000034  00000000          DCB      0x00,0x00,0x00,0x00
000038  00000000          DCB      0x00,0x00,0x00,0x00
00003c  00000000          DCB      0x00,0x00,0x00,0x00
