; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\sdio_cis.o --depend=.\obj\sdio_cis.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\sdio_cis.crf ..\sdio\src\sdio_cis.c]
                          THUMB

                          AREA ||i.cistpl_funce||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  cistpl_funce PROC
;;;170    
;;;171    static int cistpl_funce(struct mmc_card *card, struct sdio_func *func,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;172    			const unsigned char *buf, unsigned size)
;;;173    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;174        int ret;
;;;175    
;;;176        /*
;;;177    	 * There should be two versions of the CISTPL_FUNCE tuple,
;;;178    	 * one for the common CIS (function 0) and a version used by
;;;179    	 * the individual function's CIS (1-7). Yet, the later has a
;;;180    	 * different length depending on the SDIO spec version.
;;;181    	 */
;;;182        if (func)
00000c  b135              CBZ      r5,|L1.28|
;;;183            ret = cistpl_funce_func(func, buf, size);
00000e  463a              MOV      r2,r7
000010  4631              MOV      r1,r6
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       cistpl_funce_func
000018  4604              MOV      r4,r0
00001a  e005              B        |L1.40|
                  |L1.28|
;;;184        else
;;;185            ret = cistpl_funce_common(card, buf, size);
00001c  463a              MOV      r2,r7
00001e  4631              MOV      r1,r6
000020  4640              MOV      r0,r8
000022  f7fffffe          BL       cistpl_funce_common
000026  4604              MOV      r4,r0
                  |L1.40|
;;;186    
;;;187        if (ret && ret != -EILSEQ) {
000028  b144              CBZ      r4,|L1.60|
00002a  f1140024          ADDS     r0,r4,#0x24
00002e  d005              BEQ      |L1.60|
;;;188            printk(KERN_ERR "%s: bad CISTPL_FUNCE size %u "
000030  7833              LDRB     r3,[r6,#0]
000032  463a              MOV      r2,r7
000034  a103              ADR      r1,|L1.68|
000036  a005              ADR      r0,|L1.76|
000038  f7fffffe          BL       __2printf
                  |L1.60|
;;;189                   "type %u\n", mmc_hostname(card->host), size, buf[0]);
;;;190        }
;;;191    
;;;192        return ret;
00003c  4620              MOV      r0,r4
;;;193    }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;194    
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
000044  77696669          DCB      "wifi",0
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L1.76|
00004c  25733a20          DCB      "%s: bad CISTPL_FUNCE size %u type %u\n",0
000050  62616420
000054  43495354
000058  504c5f46
00005c  554e4345
000060  2073697a
000064  65202575
000068  20747970
00006c  65202575
000070  0a00    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.cistpl_funce_common||, CODE, READONLY, ALIGN=2

                  cistpl_funce_common PROC
;;;126    
;;;127    static int cistpl_funce_common(struct mmc_card *card,
000000  b530              PUSH     {r4,r5,lr}
;;;128    			       const unsigned char *buf, unsigned size)
;;;129    {
000002  4603              MOV      r3,r0
;;;130        if (size < 0x04 || buf[0] != 0)
000004  2a04              CMP      r2,#4
000006  d301              BCC      |L2.12|
000008  7808              LDRB     r0,[r1,#0]
00000a  b110              CBZ      r0,|L2.18|
                  |L2.12|
;;;131            return -EINVAL;
00000c  f06f0015          MVN      r0,#0x15
                  |L2.16|
;;;132    
;;;133        /* TPLFE_FN0_BLK_SIZE */
;;;134        card->cis.blksize = buf[1] | (buf[2] << 8);
;;;135    
;;;136        /* TPLFE_MAX_TRAN_SPEED */
;;;137        card->cis.max_dtr = speed_val[(buf[3] >> 3) & 15] *
;;;138                            speed_unit[buf[3] & 7];
;;;139    
;;;140        return 0;
;;;141    }
000010  bd30              POP      {r4,r5,pc}
                  |L2.18|
000012  7848              LDRB     r0,[r1,#1]            ;134
000014  788c              LDRB     r4,[r1,#2]            ;134
000016  ea402004          ORR      r0,r0,r4,LSL #8       ;134
00001a  24a4              MOVS     r4,#0xa4              ;134
00001c  52e0              STRH     r0,[r4,r3]            ;134
00001e  78c8              LDRB     r0,[r1,#3]            ;137
000020  f3c000c3          UBFX     r0,r0,#3,#4           ;137
000024  4c06              LDR      r4,|L2.64|
000026  5c20              LDRB     r0,[r4,r0]            ;137
000028  78cc              LDRB     r4,[r1,#3]            ;137
00002a  f0040407          AND      r4,r4,#7              ;137
00002e  4d05              LDR      r5,|L2.68|
000030  f8554024          LDR      r4,[r5,r4,LSL #2]     ;137
000034  4360              MULS     r0,r4,r0              ;137
000036  24a8              MOVS     r4,#0xa8              ;137
000038  50e0              STR      r0,[r4,r3]            ;137
00003a  2000              MOVS     r0,#0                 ;140
00003c  e7e8              B        |L2.16|
;;;142    
                          ENDP

00003e  0000              DCW      0x0000
                  |L2.64|
                          DCD      speed_val
                  |L2.68|
                          DCD      speed_unit

                          AREA ||i.cistpl_funce_func||, CODE, READONLY, ALIGN=1

                  cistpl_funce_func PROC
;;;142    
;;;143    static int cistpl_funce_func(struct sdio_func *func,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;144    			     const unsigned char *buf, unsigned size)
;;;145    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;146        unsigned vsn;
;;;147        unsigned min_size;
;;;148    
;;;149        /* let SDIO drivers take care of whitelisted FUNCE tuples */
;;;150        if (cistpl_funce_whitelisted(buf[0]))
00000a  7820              LDRB     r0,[r4,#0]
00000c  f7fffffe          BL       cistpl_funce_whitelisted
000010  b118              CBZ      r0,|L3.26|
;;;151            return -EILSEQ;
000012  f06f0023          MVN      r0,#0x23
                  |L3.22|
;;;152    
;;;153        vsn = func->card->cccr.sdio_vsn;
;;;154        min_size = (vsn == SDIO_SDIO_REV_1_00) ? 28 : 42;
;;;155    
;;;156        if (size < min_size || buf[0] != 1)
;;;157            return -EINVAL;
;;;158    
;;;159        /* TPLFE_MAX_BLK_SIZE */
;;;160        func->max_blksize = buf[12] | (buf[13] << 8);//最大的块尺寸
;;;161    
;;;162        /* TPLFE_ENABLE_TIMEOUT_VAL, present in ver 1.1 and above */
;;;163        if (vsn > SDIO_SDIO_REV_1_00)
;;;164            func->enable_timeout = (buf[28] | (buf[29] << 8)) * 10;
;;;165        else
;;;166            func->enable_timeout = 1000;//默认是1s
;;;167    
;;;168        return 0;
;;;169    }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L3.26|
00001a  6828              LDR      r0,[r5,#0]            ;153
00001c  f8d06094          LDR      r6,[r0,#0x94]         ;153
000020  b90e              CBNZ     r6,|L3.38|
000022  201c              MOVS     r0,#0x1c              ;154
000024  e000              B        |L3.40|
                  |L3.38|
000026  202a              MOVS     r0,#0x2a              ;154
                  |L3.40|
000028  4680              MOV      r8,r0                 ;154
00002a  4547              CMP      r7,r8                 ;156
00002c  d302              BCC      |L3.52|
00002e  7820              LDRB     r0,[r4,#0]            ;156
000030  2801              CMP      r0,#1                 ;156
000032  d002              BEQ      |L3.58|
                  |L3.52|
000034  f06f0015          MVN      r0,#0x15              ;157
000038  e7ed              B        |L3.22|
                  |L3.58|
00003a  7b20              LDRB     r0,[r4,#0xc]          ;160
00003c  7b61              LDRB     r1,[r4,#0xd]          ;160
00003e  ea402001          ORR      r0,r0,r1,LSL #8       ;160
000042  61a8              STR      r0,[r5,#0x18]         ;160
000044  b146              CBZ      r6,|L3.88|
000046  7f20              LDRB     r0,[r4,#0x1c]         ;164
000048  7f61              LDRB     r1,[r4,#0x1d]         ;164
00004a  ea402001          ORR      r0,r0,r1,LSL #8       ;164
00004e  eb000080          ADD      r0,r0,r0,LSL #2       ;164
000052  0040              LSLS     r0,r0,#1              ;164
000054  6228              STR      r0,[r5,#0x20]         ;164
000056  e002              B        |L3.94|
                  |L3.88|
000058  f44f707a          MOV      r0,#0x3e8             ;166
00005c  6228              STR      r0,[r5,#0x20]         ;166
                  |L3.94|
00005e  2000              MOVS     r0,#0                 ;168
000060  e7d9              B        |L3.22|
;;;170    
                          ENDP


                          AREA ||i.cistpl_funce_whitelisted||, CODE, READONLY, ALIGN=2

                  cistpl_funce_whitelisted PROC
;;;115    
;;;116    static int cistpl_funce_whitelisted(unsigned char type)
000000  4602              MOV      r2,r0
;;;117    {
;;;118        int i;
;;;119    
;;;120        for (i = 0; i < 1; i++) {
000002  2100              MOVS     r1,#0
000004  e006              B        |L4.20|
                  |L4.6|
;;;121            if (funce_type_whitelist[i] == type)
000006  4805              LDR      r0,|L4.28|
000008  5c40              LDRB     r0,[r0,r1]
00000a  4290              CMP      r0,r2
00000c  d101              BNE      |L4.18|
;;;122                return 1;
00000e  2001              MOVS     r0,#1
                  |L4.16|
;;;123        }
;;;124        return 0;
;;;125    }
000010  4770              BX       lr
                  |L4.18|
000012  1c49              ADDS     r1,r1,#1              ;120
                  |L4.20|
000014  2901              CMP      r1,#1                 ;120
000016  dbf6              BLT      |L4.6|
000018  2000              MOVS     r0,#0                 ;124
00001a  e7f9              B        |L4.16|
;;;126    
                          ENDP

                  |L4.28|
                          DCD      funce_type_whitelist

                          AREA ||i.cistpl_manfid||, CODE, READONLY, ALIGN=1

                  cistpl_manfid PROC
;;;83     func->device = device;这些ID了*/
;;;84     static int cistpl_manfid(struct mmc_card *card, struct sdio_func *func,
000000  b5f0              PUSH     {r4-r7,lr}
;;;85     			 const unsigned char *buf, unsigned size)
;;;86     {
000002  4604              MOV      r4,r0
000004  461e              MOV      r6,r3
;;;87         unsigned int vendor, device;
;;;88     
;;;89         /* TPLMID_MANF */
;;;90         vendor = buf[0] | (buf[1] << 8);
000006  7810              LDRB     r0,[r2,#0]
000008  7857              LDRB     r7,[r2,#1]
00000a  ea402307          ORR      r3,r0,r7,LSL #8
;;;91     
;;;92         /* TPLMID_CARD */
;;;93         device = buf[2] | (buf[3] << 8);
00000e  7890              LDRB     r0,[r2,#2]
000010  78d7              LDRB     r7,[r2,#3]
000012  ea402507          ORR      r5,r0,r7,LSL #8
;;;94     
;;;95         if (func) {
000016  b111              CBZ      r1,|L5.30|
;;;96             func->vendor = vendor;
000018  824b              STRH     r3,[r1,#0x12]
;;;97             func->device = device;
00001a  828d              STRH     r5,[r1,#0x14]
00001c  e003              B        |L5.38|
                  |L5.30|
;;;98         } else {
;;;99             card->cis.vendor = vendor;
00001e  f8a430a0          STRH     r3,[r4,#0xa0]
;;;100            card->cis.device = device;
000022  20a2              MOVS     r0,#0xa2
000024  5305              STRH     r5,[r0,r4]
                  |L5.38|
;;;101        }
;;;102    
;;;103        return 0;
000026  2000              MOVS     r0,#0
;;;104    }
000028  bdf0              POP      {r4-r7,pc}
;;;105    
                          ENDP


                          AREA ||i.cistpl_vers_1||, CODE, READONLY, ALIGN=2

                  cistpl_vers_1 PROC
;;;25     
;;;26     static int cistpl_vers_1(struct mmc_card *card, struct sdio_func *func,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;27     			 const unsigned char *buf, unsigned size)
;;;28     {
000004  4682              MOV      r10,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  469b              MOV      r11,r3
;;;29         static char gvers_buffer[100];
;;;30         unsigned i, nr_strings;
;;;31         char **buffer, *string;
;;;32     
;;;33         /* Find all null-terminated (including zero length) strings in
;;;34     	   the TPLLV1_INFO field. Trailing garbage is ignored. */
;;;35         buf += 2;
00000c  1cad              ADDS     r5,r5,#2
;;;36         size -= 2;
00000e  f1ab0b02          SUB      r11,r11,#2
;;;37     
;;;38         nr_strings = 0;
000012  2600              MOVS     r6,#0
;;;39         for (i = 0; i < size; i++) {
000014  2400              MOVS     r4,#0
000016  e007              B        |L6.40|
                  |L6.24|
;;;40             if (buf[i] == 0xff)
000018  5d28              LDRB     r0,[r5,r4]
00001a  28ff              CMP      r0,#0xff
00001c  d100              BNE      |L6.32|
;;;41                 break;
00001e  e005              B        |L6.44|
                  |L6.32|
;;;42             if (buf[i] == 0)
000020  5d28              LDRB     r0,[r5,r4]
000022  b900              CBNZ     r0,|L6.38|
;;;43                 nr_strings++;// 00 xx xx 00  00  xx xx xx 0xff
000024  1c76              ADDS     r6,r6,#1
                  |L6.38|
000026  1c64              ADDS     r4,r4,#1              ;39
                  |L6.40|
000028  455c              CMP      r4,r11                ;39
00002a  d3f5              BCC      |L6.24|
                  |L6.44|
00002c  bf00              NOP                            ;41
;;;44         }
;;;45         if (nr_strings == 0)
00002e  b916              CBNZ     r6,|L6.54|
;;;46             return 0;
000030  2000              MOVS     r0,#0
                  |L6.50|
;;;47     
;;;48         size = i;
;;;49     
;;;50         /*buffer = kzalloc(sizeof(char*) * nr_strings + size, GFP_KERNEL);
;;;51     	if (!buffer)
;;;52     		return -ENOMEM;*/
;;;53         buffer=(char **)&gvers_buffer;
;;;54         memset(buffer,0,sizeof(buffer));
;;;55         string = (char*)(buffer + nr_strings);//存放字符串的地方,这里是移动nr_strings指针个单位
;;;56     
;;;57         for (i = 0; i < nr_strings; i++) {
;;;58             buffer[i] = string;
;;;59             strcpy(string, (const char *)buf);
;;;60             if(func)
;;;61                 pr_debug("function infomation string(%d):%s \n",i,string);
;;;62             else
;;;63                 pr_debug("card infomation string(%d):%s \n",i,string);
;;;64     
;;;65             string += strlen(string) + 1;
;;;66             buf += strlen((const char *)buf) + 1;
;;;67         }
;;;68     
;;;69         if (func) {
;;;70             func->num_info = nr_strings;
;;;71             func->info = (const char**)buffer;
;;;72         } else {
;;;73             card->num_info = nr_strings;
;;;74             card->info = (const char**)buffer;
;;;75     
;;;76     
;;;77         }
;;;78         return 0;
;;;79     }
000032  e8bd9ff0          POP      {r4-r12,pc}
                  |L6.54|
000036  46a3              MOV      r11,r4                ;48
000038  4f13              LDR      r7,|L6.136|
00003a  2000              MOVS     r0,#0                 ;54
00003c  6038              STR      r0,[r7,#0]            ;54
00003e  eb070986          ADD      r9,r7,r6,LSL #2       ;55
000042  2400              MOVS     r4,#0                 ;57
000044  e010              B        |L6.104|
                  |L6.70|
000046  f8479024          STR      r9,[r7,r4,LSL #2]     ;58
00004a  4629              MOV      r1,r5                 ;59
00004c  4648              MOV      r0,r9                 ;59
00004e  f7fffffe          BL       strcpy
000052  4648              MOV      r0,r9                 ;65
000054  f7fffffe          BL       strlen
000058  1c40              ADDS     r0,r0,#1              ;65
00005a  4481              ADD      r9,r9,r0              ;65
00005c  4628              MOV      r0,r5                 ;66
00005e  f7fffffe          BL       strlen
000062  1c40              ADDS     r0,r0,#1              ;66
000064  4405              ADD      r5,r5,r0              ;66
000066  1c64              ADDS     r4,r4,#1              ;57
                  |L6.104|
000068  42b4              CMP      r4,r6                 ;57
00006a  d3ec              BCC      |L6.70|
00006c  f1b80f00          CMP      r8,#0                 ;69
000070  d004              BEQ      |L6.124|
000072  f8c8602c          STR      r6,[r8,#0x2c]         ;70
000076  f8c87030          STR      r7,[r8,#0x30]         ;71
00007a  e003              B        |L6.132|
                  |L6.124|
00007c  f8ca60c8          STR      r6,[r10,#0xc8]        ;73
000080  f8ca70cc          STR      r7,[r10,#0xcc]        ;74
                  |L6.132|
000084  2000              MOVS     r0,#0                 ;78
000086  e7d4              B        |L6.50|
;;;80     
                          ENDP

                  |L6.136|
                          DCD      gvers_buffer

                          AREA ||i.mmc_signal_sdio_irq||, CODE, READONLY, ALIGN=1

                  mmc_signal_sdio_irq PROC
;;;220    } */
;;;221    static void mmc_signal_sdio_irq(struct mmc_host *host)
000000  b510              PUSH     {r4,lr}
;;;222    {
000002  4604              MOV      r4,r0
;;;223    	host->ops->enable_sdio_irq(host, 0);
000004  6860              LDR      r0,[r4,#4]
000006  2100              MOVS     r1,#0
000008  6982              LDR      r2,[r0,#0x18]
00000a  4620              MOV      r0,r4
00000c  4790              BLX      r2
;;;224    	sdio_irq_thread(host);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       sdio_irq_thread
;;;225    }
000014  bd10              POP      {r4,pc}
;;;226    
                          ENDP


                          AREA ||i.sdio_read_cis||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_u
                          REQUIRE _printf_x
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  sdio_read_cis PROC
;;;212    
;;;213    static int sdio_read_cis(struct mmc_card *card, struct sdio_func *func)
000000  e92d4ff3          PUSH     {r0,r1,r4-r11,lr}
;;;214    {
000004  b087              SUB      sp,sp,#0x1c
000006  460f              MOV      r7,r1
;;;215        static  struct sdio_func_tuple marvel_gtpl[5];
;;;216        int ret;
;;;217        struct sdio_func_tuple *this, **prev;
;;;218        unsigned long i, ptr = 0;
000008  f04f0800          MOV      r8,#0
;;;219        unsigned char x, fn;
;;;220        unsigned char tpl_code, tpl_link;
;;;221        unsigned char tpl_cnt=0;
00000c  46c3              MOV      r11,r8
;;;222        const struct cis_tpl *tpl;
;;;223        /*
;;;224    	 * Note that this works for the common CIS (function number 0) as
;;;225    	 * well as a function's CIS * since SDIO_CCCR_CIS and SDIO_FBR_CIS
;;;226    	 * have the same offset.
;;;227    	 */
;;;228        for (i = 0; i < 3; i++) {
00000e  2400              MOVS     r4,#0
000010  e020              B        |L8.84|
                  |L8.18|
;;;229            if (func)
000012  b11f              CBZ      r7,|L8.28|
;;;230                fn = func->num;//这里如果是读取功能的CIS，直接取功能号，然后求出寄存器偏移地址
000014  68f8              LDR      r0,[r7,#0xc]
000016  b2c0              UXTB     r0,r0
000018  9005              STR      r0,[sp,#0x14]
00001a  e001              B        |L8.32|
                  |L8.28|
;;;231            else
;;;232                fn = 0;
00001c  2000              MOVS     r0,#0
00001e  9005              STR      r0,[sp,#0x14]
                  |L8.32|
;;;233    
;;;234            ret = mmc_io_rw_direct(card, 0, 0,
000020  ab06              ADD      r3,sp,#0x18
000022  2200              MOVS     r2,#0
000024  e9cd2300          STRD     r2,r3,[sp,#0]
000028  2109              MOVS     r1,#9
00002a  9805              LDR      r0,[sp,#0x14]
00002c  eb012000          ADD      r0,r1,r0,LSL #8
000030  1903              ADDS     r3,r0,r4
000032  4611              MOV      r1,r2
000034  9807              LDR      r0,[sp,#0x1c]
000036  f7fffffe          BL       mmc_io_rw_direct
00003a  4605              MOV      r5,r0
;;;235                                   SDIO_FBR_BASE(fn) + SDIO_FBR_CIS + i, 0, &x);
;;;236            if (ret)
00003c  b11d              CBZ      r5,|L8.70|
;;;237                return ret;
00003e  4628              MOV      r0,r5
                  |L8.64|
;;;238            ptr |= x << (i * 8);//24bit
;;;239        }
;;;240    
;;;241        if (func)
;;;242            prev = &func->tuples;
;;;243        else
;;;244            prev = &card->tuples;
;;;245    
;;;246        //BUG_ON(*prev);
;;;247    
;;;248        do {
;;;249    
;;;250            ret = mmc_io_rw_direct(card, 0, 0, ptr++, 0, &tpl_code);
;;;251            if (ret)
;;;252                break;
;;;253    
;;;254            /* 0xff means we're done */
;;;255            if (tpl_code == 0xff)
;;;256                break;
;;;257    
;;;258            /* null entries have no link field or data */
;;;259            if (tpl_code == 0x00)
;;;260                continue;
;;;261    
;;;262            ret = mmc_io_rw_direct(card, 0, 0, ptr++, 0, &tpl_link);
;;;263            if (ret)
;;;264                break;
;;;265    
;;;266            /* a size of 0xff also means we're done */
;;;267            if (tpl_link == 0xff)
;;;268                break;
;;;269    
;;;270            /*this = kmalloc(sizeof(*this) + tpl_link, GFP_KERNEL);
;;;271    		if (!this)
;;;272    			return -ENOMEM;*/
;;;273            if(tpl_cnt==5)
;;;274                return -ENOMEM;
;;;275            else
;;;276                this=&marvel_gtpl[tpl_cnt++];//malloc
;;;277    
;;;278            for (i = 0; i < tpl_link; i++) {//read tpl data
;;;279                ret = mmc_io_rw_direct(card, 0, 0,
;;;280                                       ptr + i, 0, &this->data[i]);
;;;281                if (ret)
;;;282                    break;
;;;283            }
;;;284            if (ret) {
;;;285                //kfree(this);
;;;286                tpl_cnt--;
;;;287                break;
;;;288            }
;;;289    
;;;290            for (i = 0; i < ARRAY_SIZE(cis_tpl_list); i++)
;;;291                if (cis_tpl_list[i].code == tpl_code)
;;;292                    break;
;;;293            if (i < ARRAY_SIZE(cis_tpl_list)) {
;;;294                tpl = cis_tpl_list + i;
;;;295                if (tpl_link < tpl->min_size) {
;;;296                    printk(KERN_ERR
;;;297                           "%s: bad CIS tuple 0x%02x"
;;;298                           " (length = %u, expected >= %u)\n",
;;;299                           mmc_hostname(card->host),
;;;300                           tpl_code, tpl_link, tpl->min_size);
;;;301                    ret = -EINVAL;
;;;302                } else if (tpl->parse) {//根据cis的具体内容解析
;;;303                    ret = tpl->parse(card, func,
;;;304                                     this->data, tpl_link);
;;;305                }
;;;306                /*
;;;307    			 * We don't need the tuple anymore if it was
;;;308    			 * successfully parsed by the SDIO core or if it is
;;;309    			 * not going to be parsed by SDIO drivers.
;;;310    			 */
;;;311                if (!ret || ret != -EILSEQ){
;;;312                    //kfree(this);
;;;313                    tpl_cnt--;
;;;314                    //printk("error......\n");
;;;315                }
;;;316            } else {
;;;317                /* unknown tuple */
;;;318                ret = -EILSEQ;
;;;319            }
;;;320    
;;;321            if (ret == -EILSEQ) {
;;;322                /* this tuple is unknown to the core or whitelisted */
;;;323                this->next = NULL;
;;;324                this->code = tpl_code;
;;;325                this->size = tpl_link;
;;;326                *prev = this;
;;;327                prev = &this->next;//对于不清楚的tpl建立链表，一辈子只有一次，所以直接链入
;;;328                printk(KERN_DEBUG
;;;329                       "%s: queuing CIS tuple 0x%02x length %u\n",
;;;330                       mmc_hostname(card->host), tpl_code, tpl_link);
;;;331                /* keep on analyzing tuples */
;;;332                ret = 0;
;;;333            }
;;;334            ptr += tpl_link;
;;;335        } while (!ret);
;;;336    
;;;337        /*
;;;338    	 * Link in all unknown tuples found in the common CIS so that
;;;339    	 * drivers don't have to go digging in two places.
;;;340    	 */
;;;341        if (func)
;;;342            *prev = card->tuples;//将卡的tpl链入到尾部
;;;343    
;;;344        return ret;
;;;345    }
000040  b009              ADD      sp,sp,#0x24
000042  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.70|
000046  00e1              LSLS     r1,r4,#3              ;238
000048  f89d0018          LDRB     r0,[sp,#0x18]         ;238
00004c  4088              LSLS     r0,r0,r1              ;238
00004e  ea400808          ORR      r8,r0,r8              ;238
000052  1c64              ADDS     r4,r4,#1              ;228
                  |L8.84|
000054  2c03              CMP      r4,#3                 ;228
000056  d3dc              BCC      |L8.18|
000058  b117              CBZ      r7,|L8.96|
00005a  f1070a34          ADD      r10,r7,#0x34          ;242
00005e  e002              B        |L8.102|
                  |L8.96|
000060  9807              LDR      r0,[sp,#0x1c]         ;244
000062  f1000ad0          ADD      r10,r0,#0xd0          ;244
                  |L8.102|
000066  bf00              NOP                            ;248
                  |L8.104|
000068  ab04              ADD      r3,sp,#0x10           ;250
00006a  2200              MOVS     r2,#0                 ;250
00006c  e9cd2300          STRD     r2,r3,[sp,#0]         ;250
000070  4643              MOV      r3,r8                 ;250
000072  f1080801          ADD      r8,r8,#1              ;250
000076  4611              MOV      r1,r2                 ;250
000078  9807              LDR      r0,[sp,#0x1c]         ;250
00007a  f7fffffe          BL       mmc_io_rw_direct
00007e  4605              MOV      r5,r0                 ;250
000080  b105              CBZ      r5,|L8.132|
000082  e0a1              B        |L8.456|
                  |L8.132|
000084  f89d0010          LDRB     r0,[sp,#0x10]         ;255
000088  28ff              CMP      r0,#0xff              ;255
00008a  d100              BNE      |L8.142|
00008c  e09c              B        |L8.456|
                  |L8.142|
00008e  f89d0010          LDRB     r0,[sp,#0x10]         ;259
000092  b900              CBNZ     r0,|L8.150|
000094  e095              B        |L8.450|
                  |L8.150|
000096  ab03              ADD      r3,sp,#0xc            ;262
000098  2200              MOVS     r2,#0                 ;262
00009a  e9cd2300          STRD     r2,r3,[sp,#0]         ;262
00009e  4643              MOV      r3,r8                 ;262
0000a0  f1080801          ADD      r8,r8,#1              ;262
0000a4  4611              MOV      r1,r2                 ;262
0000a6  9807              LDR      r0,[sp,#0x1c]         ;262
0000a8  f7fffffe          BL       mmc_io_rw_direct
0000ac  4605              MOV      r5,r0                 ;262
0000ae  b105              CBZ      r5,|L8.178|
0000b0  e08a              B        |L8.456|
                  |L8.178|
0000b2  f89d000c          LDRB     r0,[sp,#0xc]          ;267
0000b6  28ff              CMP      r0,#0xff              ;267
0000b8  d100              BNE      |L8.188|
0000ba  e085              B        |L8.456|
                  |L8.188|
0000bc  f1bb0f05          CMP      r11,#5                ;273
0000c0  d102              BNE      |L8.200|
0000c2  f06f000b          MVN      r0,#0xb               ;274
0000c6  e7bb              B        |L8.64|
                  |L8.200|
0000c8  4658              MOV      r0,r11                ;276
0000ca  1c41              ADDS     r1,r0,#1              ;276
0000cc  f0010bff          AND      r11,r1,#0xff          ;276
0000d0  eb001040          ADD      r0,r0,r0,LSL #5       ;276
0000d4  4941              LDR      r1,|L8.476|
0000d6  eb0106c0          ADD      r6,r1,r0,LSL #3       ;276
0000da  2400              MOVS     r4,#0                 ;278
0000dc  e00e              B        |L8.252|
                  |L8.222|
0000de  1db0              ADDS     r0,r6,#6              ;279
0000e0  1903              ADDS     r3,r0,r4              ;279
0000e2  2200              MOVS     r2,#0                 ;279
0000e4  e9cd2300          STRD     r2,r3,[sp,#0]         ;279
0000e8  eb080304          ADD      r3,r8,r4              ;279
0000ec  4611              MOV      r1,r2                 ;279
0000ee  9807              LDR      r0,[sp,#0x1c]         ;279
0000f0  f7fffffe          BL       mmc_io_rw_direct
0000f4  4605              MOV      r5,r0                 ;279
0000f6  b105              CBZ      r5,|L8.250|
0000f8  e004              B        |L8.260|
                  |L8.250|
0000fa  1c64              ADDS     r4,r4,#1              ;278
                  |L8.252|
0000fc  f89d000c          LDRB     r0,[sp,#0xc]          ;278
000100  4284              CMP      r4,r0                 ;278
000102  d3ec              BCC      |L8.222|
                  |L8.260|
000104  bf00              NOP                            ;282
000106  b125              CBZ      r5,|L8.274|
000108  f1ab0001          SUB      r0,r11,#1             ;286
00010c  f0000bff          AND      r11,r0,#0xff          ;286
000110  e05a              B        |L8.456|
                  |L8.274|
000112  2400              MOVS     r4,#0                 ;290
000114  e008              B        |L8.296|
                  |L8.278|
000116  4832              LDR      r0,|L8.480|
000118  f8100034          LDRB     r0,[r0,r4,LSL #3]     ;291
00011c  f89d1010          LDRB     r1,[sp,#0x10]         ;291
000120  4288              CMP      r0,r1                 ;291
000122  d100              BNE      |L8.294|
000124  e002              B        |L8.300|
                  |L8.294|
000126  1c64              ADDS     r4,r4,#1              ;290
                  |L8.296|
000128  2c04              CMP      r4,#4                 ;290
00012a  d3f4              BCC      |L8.278|
                  |L8.300|
00012c  bf00              NOP                            ;292
00012e  2c04              CMP      r4,#4                 ;293
000130  d22b              BCS      |L8.394|
000132  482b              LDR      r0,|L8.480|
000134  eb0009c4          ADD      r9,r0,r4,LSL #3       ;294
000138  f8990001          LDRB     r0,[r9,#1]            ;295
00013c  f89d100c          LDRB     r1,[sp,#0xc]          ;295
000140  4288              CMP      r0,r1                 ;295
000142  dd0d              BLE      |L8.352|
000144  f8993001          LDRB     r3,[r9,#1]            ;296
000148  9300              STR      r3,[sp,#0]            ;296
00014a  f89d300c          LDRB     r3,[sp,#0xc]          ;296
00014e  f89d2010          LDRB     r2,[sp,#0x10]         ;296
000152  a124              ADR      r1,|L8.484|
000154  a025              ADR      r0,|L8.492|
000156  f7fffffe          BL       __2printf
00015a  f06f0515          MVN      r5,#0x15              ;301
00015e  e00b              B        |L8.376|
                  |L8.352|
000160  f8d90004          LDR      r0,[r9,#4]            ;302
000164  b140              CBZ      r0,|L8.376|
000166  f89d300c          LDRB     r3,[sp,#0xc]          ;303
00016a  1db2              ADDS     r2,r6,#6              ;303
00016c  4639              MOV      r1,r7                 ;303
00016e  f8d9c004          LDR      r12,[r9,#4]           ;303
000172  9807              LDR      r0,[sp,#0x1c]         ;303
000174  47e0              BLX      r12                   ;303
000176  4605              MOV      r5,r0                 ;303
                  |L8.376|
000178  b115              CBZ      r5,|L8.384|
00017a  f1150024          ADDS     r0,r5,#0x24           ;311
00017e  d006              BEQ      |L8.398|
                  |L8.384|
000180  f1ab0001          SUB      r0,r11,#1             ;313
000184  f0000bff          AND      r11,r0,#0xff          ;313
000188  e001              B        |L8.398|
                  |L8.394|
00018a  f06f0523          MVN      r5,#0x23              ;318
                  |L8.398|
00018e  f1150024          ADDS     r0,r5,#0x24           ;321
000192  d112              BNE      |L8.442|
000194  6030              STR      r0,[r6,#0]            ;323
000196  f89d0010          LDRB     r0,[sp,#0x10]         ;324
00019a  7130              STRB     r0,[r6,#4]            ;324
00019c  f89d000c          LDRB     r0,[sp,#0xc]          ;325
0001a0  7170              STRB     r0,[r6,#5]            ;325
0001a2  f8ca6000          STR      r6,[r10,#0]           ;326
0001a6  46b2              MOV      r10,r6                ;327
0001a8  f89d300c          LDRB     r3,[sp,#0xc]          ;328
0001ac  f89d2010          LDRB     r2,[sp,#0x10]         ;328
0001b0  a10c              ADR      r1,|L8.484|
0001b2  a01c              ADR      r0,|L8.548|
0001b4  f7fffffe          BL       __2printf
0001b8  2500              MOVS     r5,#0                 ;332
                  |L8.442|
0001ba  f89d000c          LDRB     r0,[sp,#0xc]          ;334
0001be  4480              ADD      r8,r8,r0              ;334
0001c0  bf00              NOP                            ;260
                  |L8.450|
0001c2  2d00              CMP      r5,#0                 ;335
0001c4  f43faf50          BEQ      |L8.104|
                  |L8.456|
0001c8  bf00              NOP                            ;252
0001ca  b127              CBZ      r7,|L8.470|
0001cc  9807              LDR      r0,[sp,#0x1c]         ;342
0001ce  f8d000d0          LDR      r0,[r0,#0xd0]         ;342
0001d2  f8ca0000          STR      r0,[r10,#0]           ;342
                  |L8.470|
0001d6  4628              MOV      r0,r5                 ;344
0001d8  e732              B        |L8.64|
;;;346    
                          ENDP

0001da  0000              DCW      0x0000
                  |L8.476|
                          DCD      marvel_gtpl
                  |L8.480|
                          DCD      cis_tpl_list
                  |L8.484|
0001e4  77696669          DCB      "wifi",0
0001e8  00      
0001e9  00                DCB      0
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L8.492|
0001ec  25733a20          DCB      "%s: bad CIS tuple 0x%02x (length = %u, expected >= %u)\n"
0001f0  62616420
0001f4  43495320
0001f8  7475706c
0001fc  65203078
000200  25303278
000204  20286c65
000208  6e677468
00020c  203d2025
000210  752c2065
000214  78706563
000218  74656420
00021c  3e3d2025
000220  75290a  
000223  00                DCB      0
                  |L8.548|
000224  25733a20          DCB      "%s: queuing CIS tuple 0x%02x length %u\n",0
000228  71756575
00022c  696e6720
000230  43495320
000234  7475706c
000238  65203078
00023c  25303278
000240  206c656e
000244  67746820
000248  25750a00

                          AREA ||i.sdio_read_common_cis||, CODE, READONLY, ALIGN=1

                  sdio_read_common_cis PROC
;;;348    
;;;349    int sdio_read_common_cis(struct mmc_card *card)
000000  b510              PUSH     {r4,lr}
;;;350    {
000002  4604              MOV      r4,r0
;;;351        return sdio_read_cis(card, NULL);
000004  2100              MOVS     r1,#0
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       sdio_read_cis
;;;352    }
00000c  bd10              POP      {r4,pc}
;;;353    
                          ENDP


                          AREA ||i.sdio_read_func_cis||, CODE, READONLY, ALIGN=1

                  sdio_read_func_cis PROC
;;;354    
;;;355    int sdio_read_func_cis(struct sdio_func *func)
000000  b570              PUSH     {r4-r6,lr}
;;;356    {
000002  4604              MOV      r4,r0
;;;357        int ret;
;;;358    
;;;359        ret = sdio_read_cis(func->card, func);
000004  4621              MOV      r1,r4
000006  6820              LDR      r0,[r4,#0]
000008  f7fffffe          BL       sdio_read_cis
00000c  4605              MOV      r5,r0
;;;360        if (ret)
00000e  b10d              CBZ      r5,|L10.20|
;;;361            return ret;
000010  4628              MOV      r0,r5
                  |L10.18|
;;;362    
;;;363        /*
;;;364    	 * Since we've linked to tuples in the card structure,
;;;365    	 * we must make sure we have a reference to it.
;;;366    	 */
;;;367        //	get_device(&func->card->dev);
;;;368    
;;;369        /*
;;;370    	 * Vendor/device id is optional for function CIS, so
;;;371    	 * copy it from the card structure as needed.
;;;372    	 */
;;;373        //识别的主要结构
;;;374        if (func->vendor == 0) {
;;;375            func->vendor = func->card->cis.vendor;
;;;376            func->device = func->card->cis.device;
;;;377        }
;;;378    
;;;379        return 0;
;;;380    }
000012  bd70              POP      {r4-r6,pc}
                  |L10.20|
000014  8a60              LDRH     r0,[r4,#0x12]         ;374
000016  b938              CBNZ     r0,|L10.40|
000018  6820              LDR      r0,[r4,#0]            ;375
00001a  f8b000a0          LDRH     r0,[r0,#0xa0]         ;375
00001e  8260              STRH     r0,[r4,#0x12]         ;375
000020  6820              LDR      r0,[r4,#0]            ;376
000022  f8b000a2          LDRH     r0,[r0,#0xa2]         ;376
000026  82a0              STRH     r0,[r4,#0x14]         ;376
                  |L10.40|
000028  2000              MOVS     r0,#0                 ;379
00002a  e7f2              B        |L10.18|
;;;381    
                          ENDP


                          AREA ||i.xdbug_buf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  xdbug_buf PROC
;;;147    #define RUN_TEST printk("RUN_TEST >>> LINE:%d ,,, FUNCTION:%s ,,, FILE:%s \r\n",__LINE__,__FUNCTION__,__FILE__);
;;;148    static void xdbug_buf(const char * name , const unsigned char * buf , const int len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;150    	int i = 0;
00000a  2400              MOVS     r4,#0
;;;151    	printf("dbug buf [%s]\n",name);
00000c  4629              MOV      r1,r5
00000e  a008              ADR      r0,|L11.48|
000010  f7fffffe          BL       __2printf
;;;152    	for(;i<len;i++)
000014  e004              B        |L11.32|
                  |L11.22|
;;;153    	{
;;;154    		printf("0x%02x,",buf[i]);
000016  5d31              LDRB     r1,[r6,r4]
000018  a009              ADR      r0,|L11.64|
00001a  f7fffffe          BL       __2printf
00001e  1c64              ADDS     r4,r4,#1              ;152
                  |L11.32|
000020  42bc              CMP      r4,r7                 ;152
000022  dbf8              BLT      |L11.22|
;;;155    	}
;;;156    	printf("\n");
000024  a008              ADR      r0,|L11.72|
000026  f7fffffe          BL       __2printf
;;;157    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;158    #define DEBUG_PARAM_SDIO
                          ENDP

00002e  0000              DCW      0x0000
                  |L11.48|
000030  64627567          DCB      "dbug buf [%s]\n",0
000034  20627566
000038  205b2573
00003c  5d0a00  
00003f  00                DCB      0
                  |L11.64|
000040  30782530          DCB      "0x%02x,",0
000044  32782c00
                  |L11.72|
000048  0a00              DCB      "\n",0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  gvers_buffer
                          %        100
                  marvel_gtpl
                          %        1320

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  speed_val
000000  000a0c0d          DCB      0x00,0x0a,0x0c,0x0d
000004  0f14191e          DCB      0x0f,0x14,0x19,0x1e
000008  23282d32          DCB      0x23,0x28,0x2d,0x32
00000c  373c4650          DCB      0x37,0x3c,0x46,0x50
                  speed_unit
                          DCD      0x00002710
                          DCD      0x000186a0
                          DCD      0x000f4240
                          DCD      0x00989680
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                  funce_type_whitelist
000030  04000000          DCB      0x04,0x00,0x00,0x00
                  cis_tpl_list
000034  15030000          DCB      0x15,0x03,0x00,0x00
                          DCD      cistpl_vers_1
00003c  20040000          DCB      0x20,0x04,0x00,0x00
                          DCD      cistpl_manfid
000044  21020000          DCB      0x21,0x02,0x00,0x00
                          DCD      0x00000000
00004c  22000000          DCB      0x22,0x00,0x00,0x00
                          DCD      cistpl_funce
