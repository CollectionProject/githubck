; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\tcp_in.o --depend=.\obj\tcp_in.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\tcp_in.crf ..\lwIP\src\core\tcp_in.c]
                          THUMB

                          AREA ||i.tcp_input||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_flags
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  tcp_input PROC
;;;92     void
;;;93     tcp_input(struct pbuf *p, struct netif *inp)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;94     {
000004  4606              MOV      r6,r0
000006  468a              MOV      r10,r1
;;;95       struct tcp_pcb *pcb, *prev;
;;;96       struct tcp_pcb_listen *lpcb;
;;;97       u8_t hdrlen;
;;;98       err_t err;
;;;99     
;;;100      PERF_START;
;;;101    
;;;102      TCP_STATS_INC(tcp.recv);
;;;103      snmp_inc_tcpinsegs();
;;;104    
;;;105      iphdr = p->payload;
000008  49fa              LDR      r1,|L1.1012|
00000a  6870              LDR      r0,[r6,#4]
00000c  6008              STR      r0,[r1,#0]  ; iphdr
;;;106      tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
00000e  6809              LDR      r1,[r1,#0]  ; iphdr
000010  8808              LDRH     r0,[r1,#0]
000012  f7fffffe          BL       ntohs
000016  f3c02003          UBFX     r0,r0,#8,#4
00001a  6871              LDR      r1,[r6,#4]
00001c  eb010080          ADD      r0,r1,r0,LSL #2
000020  49f5              LDR      r1,|L1.1016|
000022  6008              STR      r0,[r1,#0]  ; tcphdr
;;;107    
;;;108    #if TCP_INPUT_DEBUG
;;;109      tcp_debug_print(tcphdr);
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]  ; tcphdr
000028  f7fffffe          BL       tcp_debug_print
;;;110    #endif
;;;111    
;;;112      /* remove header from payload */
;;;113      if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
00002c  49f1              LDR      r1,|L1.1012|
00002e  6809              LDR      r1,[r1,#0]  ; iphdr
000030  8808              LDRH     r0,[r1,#0]
000032  f7fffffe          BL       ntohs
000036  f3c02003          UBFX     r0,r0,#8,#4
00003a  0080              LSLS     r0,r0,#2
00003c  f1c00b00          RSB      r11,r0,#0
000040  4659              MOV      r1,r11
000042  4630              MOV      r0,r6
000044  f7fffffe          BL       pbuf_header
000048  b910              CBNZ     r0,|L1.80|
00004a  8930              LDRH     r0,[r6,#8]
00004c  2814              CMP      r0,#0x14
00004e  d20c              BCS      |L1.106|
                  |L1.80|
;;;114        /* drop short packets */
;;;115        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
000050  bf00              NOP      
000052  bf00              NOP      
000054  8931              LDRH     r1,[r6,#8]
000056  a0e9              ADR      r0,|L1.1020|
000058  f7fffffe          BL       __2printf
00005c  bf00              NOP      
00005e  bf00              NOP      
;;;116        TCP_STATS_INC(tcp.lenerr);
;;;117        TCP_STATS_INC(tcp.drop);
;;;118        snmp_inc_tcpinerrs();
;;;119        pbuf_free(p);
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       pbuf_free
                  |L1.102|
;;;120        return;
;;;121      }
;;;122    
;;;123      /* Don't even process incoming broadcasts/multicasts. */
;;;124      if (ip_addr_isbroadcast(&(iphdr->dest), inp) ||
;;;125          ip_addr_ismulticast(&(iphdr->dest))) {
;;;126        TCP_STATS_INC(tcp.proterr);
;;;127        TCP_STATS_INC(tcp.drop);
;;;128        snmp_inc_tcpinerrs();
;;;129        pbuf_free(p);
;;;130        return;
;;;131      }
;;;132    
;;;133    #if CHECKSUM_CHECK_TCP
;;;134      /* Verify TCP checksum. */
;;;135      if (inet_chksum_pseudo(p, (struct ip_addr *)&(iphdr->src),
;;;136          (struct ip_addr *)&(iphdr->dest),
;;;137          IP_PROTO_TCP, p->tot_len) != 0) {
;;;138          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_F"\n",
;;;139            inet_chksum_pseudo(p, (struct ip_addr *)&(iphdr->src), (struct ip_addr *)&(iphdr->dest),
;;;140          IP_PROTO_TCP, p->tot_len)));
;;;141    #if TCP_DEBUG
;;;142        tcp_debug_print(tcphdr);
;;;143    #endif /* TCP_DEBUG */
;;;144        TCP_STATS_INC(tcp.chkerr);
;;;145        TCP_STATS_INC(tcp.drop);
;;;146        snmp_inc_tcpinerrs();
;;;147        pbuf_free(p);
;;;148        return;
;;;149      }
;;;150    #endif
;;;151    
;;;152      /* Move the payload pointer in the pbuf so that it points to the
;;;153         TCP data instead of the TCP header. */
;;;154      hdrlen = TCPH_HDRLEN(tcphdr);
;;;155      if(pbuf_header(p, -(hdrlen * 4))){
;;;156        /* drop short packets */
;;;157        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
;;;158        TCP_STATS_INC(tcp.lenerr);
;;;159        TCP_STATS_INC(tcp.drop);
;;;160        snmp_inc_tcpinerrs();
;;;161        pbuf_free(p);
;;;162        return;
;;;163      }
;;;164    
;;;165      /* Convert fields in TCP header to host byte order. */
;;;166      tcphdr->src = ntohs(tcphdr->src);
;;;167      tcphdr->dest = ntohs(tcphdr->dest);
;;;168      seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
;;;169      ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
;;;170      tcphdr->wnd = ntohs(tcphdr->wnd);
;;;171    
;;;172      flags = TCPH_FLAGS(tcphdr);
;;;173      tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
;;;174    
;;;175      /* Demultiplex an incoming segment. First, we check if it is destined
;;;176         for an active connection. */
;;;177      prev = NULL;
;;;178    
;;;179      
;;;180      for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
;;;181        LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
;;;182        LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
;;;183        LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
;;;184        if (pcb->remote_port == tcphdr->src &&
;;;185           pcb->local_port == tcphdr->dest &&
;;;186           ip_addr_cmp(&(pcb->remote_ip), &(iphdr->src)) &&
;;;187           ip_addr_cmp(&(pcb->local_ip), &(iphdr->dest))) {
;;;188    
;;;189          /* Move this PCB to the front of the list so that subsequent
;;;190             lookups will be faster (we exploit locality in TCP segment
;;;191             arrivals). */
;;;192          LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
;;;193          if (prev != NULL) {
;;;194            prev->next = pcb->next;
;;;195            pcb->next = tcp_active_pcbs;
;;;196            tcp_active_pcbs = pcb;
;;;197          }
;;;198          LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
;;;199          break;
;;;200        }
;;;201        prev = pcb;
;;;202      }
;;;203    
;;;204      if (pcb == NULL) {
;;;205        /* If it did not go to an active connection, we check the connections
;;;206           in the TIME-WAIT state. */
;;;207        for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
;;;208          LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
;;;209          if (pcb->remote_port == tcphdr->src &&
;;;210             pcb->local_port == tcphdr->dest &&
;;;211             ip_addr_cmp(&(pcb->remote_ip), &(iphdr->src)) &&
;;;212             ip_addr_cmp(&(pcb->local_ip), &(iphdr->dest))) {
;;;213            /* We don't really care enough to move this PCB to the front
;;;214               of the list since we are not very likely to receive that
;;;215               many segments for connections in TIME-WAIT. */
;;;216            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
;;;217            tcp_timewait_input(pcb);
;;;218            pbuf_free(p);
;;;219            return;
;;;220          }
;;;221        }
;;;222    
;;;223      /* Finally, if we still did not get a match, we check all PCBs that
;;;224         are LISTENing for incoming connections. */
;;;225        prev = NULL;
;;;226        for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
;;;227          if ((ip_addr_isany(&(lpcb->local_ip)) ||
;;;228            ip_addr_cmp(&(lpcb->local_ip), &(iphdr->dest))) &&
;;;229            lpcb->local_port == tcphdr->dest) {
;;;230            /* Move this PCB to the front of the list so that subsequent
;;;231               lookups will be faster (we exploit locality in TCP segment
;;;232               arrivals). */
;;;233            if (prev != NULL) {
;;;234              ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
;;;235                    /* our successor is the remainder of the listening list */
;;;236              lpcb->next = tcp_listen_pcbs.listen_pcbs;
;;;237                    /* put this listening pcb at the head of the listening list */
;;;238              tcp_listen_pcbs.listen_pcbs = lpcb;
;;;239            }
;;;240          
;;;241            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
;;;242            tcp_listen_input(lpcb);
;;;243            pbuf_free(p);
;;;244            return;
;;;245          }
;;;246          prev = (struct tcp_pcb *)lpcb;
;;;247        }
;;;248      }
;;;249    
;;;250    #if TCP_INPUT_DEBUG
;;;251      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags "));
;;;252      tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
;;;253      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
;;;254    #endif /* TCP_INPUT_DEBUG */
;;;255    
;;;256    
;;;257      if (pcb != NULL) {
;;;258        /* The incoming segment belongs to a connection. */
;;;259    #if TCP_INPUT_DEBUG
;;;260    #if TCP_DEBUG
;;;261        tcp_debug_print_state(pcb->state);
;;;262    #endif /* TCP_DEBUG */
;;;263    #endif /* TCP_INPUT_DEBUG */
;;;264    
;;;265        /* Set up a tcp_seg structure. */
;;;266        inseg.next = NULL;
;;;267        inseg.len = p->tot_len;
;;;268        inseg.dataptr = p->payload;
;;;269        inseg.p = p;
;;;270        inseg.tcphdr = tcphdr;
;;;271    
;;;272        recv_data = NULL;
;;;273        recv_flags = 0;
;;;274    
;;;275        /* If there is data which was previously "refused" by upper layer */
;;;276        if (pcb->refused_data != NULL) {
;;;277          /* Notify again application with data previously received. */
;;;278          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
;;;279          TCP_EVENT_RECV(pcb, pcb->refused_data, ERR_OK, err);
;;;280          if (err == ERR_OK) {
;;;281            pcb->refused_data = NULL;
;;;282          } else {
;;;283            /* drop incoming packets, because pcb is "full" */
;;;284            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
;;;285            TCP_STATS_INC(tcp.drop);
;;;286            snmp_inc_tcpinerrs();
;;;287            pbuf_free(p);
;;;288            return;
;;;289          }
;;;290        }
;;;291    
;;;292        tcp_input_pcb = pcb;
;;;293        err = tcp_process(pcb);
;;;294        tcp_input_pcb = NULL;
;;;295        /* A return value of ERR_ABRT means that tcp_abort() was called
;;;296           and that the pcb has been freed. If so, we don't do anything. */
;;;297        if (err != ERR_ABRT) {
;;;298          if (recv_flags & TF_RESET) {
;;;299            /* TF_RESET means that the connection was reset by the other
;;;300               end. We then call the error callback to inform the
;;;301               application that the connection is dead before we
;;;302               deallocate the PCB. */
;;;303            TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
;;;304            tcp_pcb_remove(&tcp_active_pcbs, pcb);
;;;305            memp_free(MEMP_TCP_PCB, pcb);
;;;306          } else if (recv_flags & TF_CLOSED) {
;;;307            /* The connection has been closed and we will deallocate the
;;;308               PCB. */
;;;309            tcp_pcb_remove(&tcp_active_pcbs, pcb);
;;;310            memp_free(MEMP_TCP_PCB, pcb);
;;;311          } else {
;;;312            err = ERR_OK;
;;;313            /* If the application has registered a "sent" function to be
;;;314               called when new send buffer space is available, we call it
;;;315               now. */
;;;316            if (pcb->acked > 0) {
;;;317              TCP_EVENT_SENT(pcb, pcb->acked, err);
;;;318            }
;;;319          
;;;320            if (recv_data != NULL) {
;;;321              if(flags & TCP_PSH) {
;;;322                recv_data->flags |= PBUF_FLAG_PUSH;
;;;323              }
;;;324    
;;;325              /* Notify application that data has been received. */
;;;326              TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
;;;327    
;;;328              /* If the upper layer can't receive this data, store it */
;;;329              if (err != ERR_OK) {
;;;330                pcb->refused_data = recv_data;
;;;331                LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: keep incoming packet, because pcb is \"full\"\n"));
;;;332              }
;;;333            }
;;;334    
;;;335            /* If a FIN segment was received, we call the callback
;;;336               function with a NULL buffer to indicate EOF. */
;;;337            if (recv_flags & TF_GOT_FIN) {
;;;338              TCP_EVENT_RECV(pcb, NULL, ERR_OK, err);
;;;339            }
;;;340    
;;;341            /* If there were no errors, we try to send something out. */
;;;342            if (err == ERR_OK) {
;;;343              tcp_output(pcb);
;;;344            }
;;;345          }
;;;346        }
;;;347    
;;;348    
;;;349        /* give up our reference to inseg.p */
;;;350        if (inseg.p != NULL)
;;;351        {
;;;352          pbuf_free(inseg.p);
;;;353          inseg.p = NULL;
;;;354        }
;;;355    #if TCP_INPUT_DEBUG
;;;356    #if TCP_DEBUG
;;;357        tcp_debug_print_state(pcb->state);
;;;358    #endif /* TCP_DEBUG */
;;;359    #endif /* TCP_INPUT_DEBUG */
;;;360          
;;;361      } else {
;;;362    
;;;363        /* If no matching PCB was found, send a TCP RST (reset) to the
;;;364           sender. */
;;;365        LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
;;;366        if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
;;;367          TCP_STATS_INC(tcp.proterr);
;;;368          TCP_STATS_INC(tcp.drop);
;;;369          tcp_rst(ackno, seqno + tcplen,
;;;370            &(iphdr->dest), &(iphdr->src),
;;;371            tcphdr->dest, tcphdr->src);
;;;372        }
;;;373        pbuf_free(p);
;;;374      }
;;;375    
;;;376      LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
;;;377      PERF_STOP("tcp_input");
;;;378    }
000066  e8bd9ffc          POP      {r2-r12,pc}
                  |L1.106|
00006a  4651              MOV      r1,r10                ;124
00006c  48e1              LDR      r0,|L1.1012|
00006e  6800              LDR      r0,[r0,#0]            ;124  ; iphdr
000070  3010              ADDS     r0,r0,#0x10           ;124
000072  f7fffffe          BL       ip_addr_isbroadcast
000076  b970              CBNZ     r0,|L1.150|
000078  f04f4070          MOV      r0,#0xf0000000        ;125
00007c  f7fffffe          BL       ntohl
000080  49dc              LDR      r1,|L1.1012|
000082  6809              LDR      r1,[r1,#0]            ;125  ; iphdr
000084  6909              LDR      r1,[r1,#0x10]         ;125
000086  ea000b01          AND      r11,r0,r1             ;125
00008a  f04f4060          MOV      r0,#0xe0000000        ;125
00008e  f7fffffe          BL       ntohl
000092  4583              CMP      r11,r0                ;125
000094  d103              BNE      |L1.158|
                  |L1.150|
000096  4630              MOV      r0,r6                 ;129
000098  f7fffffe          BL       pbuf_free
00009c  e7e3              B        |L1.102|
                  |L1.158|
00009e  8933              LDRH     r3,[r6,#8]            ;135
0000a0  9300              STR      r3,[sp,#0]            ;135
0000a2  2306              MOVS     r3,#6                 ;135
0000a4  48d3              LDR      r0,|L1.1012|
0000a6  6802              LDR      r2,[r0,#0]            ;135  ; iphdr
0000a8  3210              ADDS     r2,r2,#0x10           ;135
0000aa  6801              LDR      r1,[r0,#0]            ;135  ; iphdr
0000ac  310c              ADDS     r1,r1,#0xc            ;135
0000ae  4630              MOV      r0,r6                 ;135
0000b0  f7fffffe          BL       inet_chksum_pseudo
0000b4  b1d8              CBZ      r0,|L1.238|
0000b6  bf00              NOP                            ;138
0000b8  bf00              NOP                            ;138
0000ba  8933              LDRH     r3,[r6,#8]            ;138
0000bc  9300              STR      r3,[sp,#0]            ;138
0000be  2306              MOVS     r3,#6                 ;138
0000c0  48cc              LDR      r0,|L1.1012|
0000c2  6802              LDR      r2,[r0,#0]            ;138  ; iphdr
0000c4  3210              ADDS     r2,r2,#0x10           ;138
0000c6  6801              LDR      r1,[r0,#0]            ;138  ; iphdr
0000c8  310c              ADDS     r1,r1,#0xc            ;138
0000ca  4630              MOV      r0,r6                 ;138
0000cc  f7fffffe          BL       inet_chksum_pseudo
0000d0  4683              MOV      r11,r0                ;138
0000d2  4601              MOV      r1,r0                 ;138
0000d4  a0d5              ADR      r0,|L1.1068|
0000d6  f7fffffe          BL       __2printf
0000da  bf00              NOP                            ;138
0000dc  bf00              NOP                            ;138
0000de  48c6              LDR      r0,|L1.1016|
0000e0  6800              LDR      r0,[r0,#0]            ;142  ; tcphdr
0000e2  f7fffffe          BL       tcp_debug_print
0000e6  4630              MOV      r0,r6                 ;147
0000e8  f7fffffe          BL       pbuf_free
0000ec  e7bb              B        |L1.102|
                  |L1.238|
0000ee  49c2              LDR      r1,|L1.1016|
0000f0  6809              LDR      r1,[r1,#0]            ;154  ; tcphdr
0000f2  8988              LDRH     r0,[r1,#0xc]          ;154
0000f4  f7fffffe          BL       ntohs
0000f8  ea4f3920          ASR      r9,r0,#12             ;154
0000fc  ea4f0089          LSL      r0,r9,#2              ;155
000100  4241              RSBS     r1,r0,#0              ;155
000102  4630              MOV      r0,r6                 ;155
000104  f7fffffe          BL       pbuf_header
000108  b150              CBZ      r0,|L1.288|
00010a  bf00              NOP                            ;157
00010c  bf00              NOP                            ;157
00010e  a0d7              ADR      r0,|L1.1132|
000110  f7fffffe          BL       __2printf
000114  bf00              NOP                            ;157
000116  bf00              NOP                            ;157
000118  4630              MOV      r0,r6                 ;161
00011a  f7fffffe          BL       pbuf_free
00011e  e7a2              B        |L1.102|
                  |L1.288|
000120  49b5              LDR      r1,|L1.1016|
000122  6809              LDR      r1,[r1,#0]            ;166  ; tcphdr
000124  8808              LDRH     r0,[r1,#0]            ;166
000126  f7fffffe          BL       ntohs
00012a  49b3              LDR      r1,|L1.1016|
00012c  6809              LDR      r1,[r1,#0]            ;166  ; tcphdr
00012e  8008              STRH     r0,[r1,#0]            ;166
000130  49b1              LDR      r1,|L1.1016|
000132  6809              LDR      r1,[r1,#0]            ;167  ; tcphdr
000134  8848              LDRH     r0,[r1,#2]            ;167
000136  f7fffffe          BL       ntohs
00013a  49af              LDR      r1,|L1.1016|
00013c  6809              LDR      r1,[r1,#0]            ;167  ; tcphdr
00013e  8048              STRH     r0,[r1,#2]            ;167
000140  49ad              LDR      r1,|L1.1016|
000142  6809              LDR      r1,[r1,#0]            ;168  ; tcphdr
000144  6848              LDR      r0,[r1,#4]            ;168
000146  f7fffffe          BL       ntohl
00014a  49ab              LDR      r1,|L1.1016|
00014c  6809              LDR      r1,[r1,#0]            ;168  ; tcphdr
00014e  6048              STR      r0,[r1,#4]            ;168
000150  49cd              LDR      r1,|L1.1160|
000152  6008              STR      r0,[r1,#0]            ;168  ; seqno
000154  49a8              LDR      r1,|L1.1016|
000156  6809              LDR      r1,[r1,#0]            ;169  ; tcphdr
000158  6888              LDR      r0,[r1,#8]            ;169
00015a  f7fffffe          BL       ntohl
00015e  49a6              LDR      r1,|L1.1016|
000160  6809              LDR      r1,[r1,#0]            ;169  ; tcphdr
000162  6088              STR      r0,[r1,#8]            ;169
000164  49c9              LDR      r1,|L1.1164|
000166  6008              STR      r0,[r1,#0]            ;169  ; ackno
000168  49a3              LDR      r1,|L1.1016|
00016a  6809              LDR      r1,[r1,#0]            ;170  ; tcphdr
00016c  89c8              LDRH     r0,[r1,#0xe]          ;170
00016e  f7fffffe          BL       ntohs
000172  49a1              LDR      r1,|L1.1016|
000174  6809              LDR      r1,[r1,#0]            ;170  ; tcphdr
000176  81c8              STRH     r0,[r1,#0xe]          ;170
000178  499f              LDR      r1,|L1.1016|
00017a  6809              LDR      r1,[r1,#0]            ;172  ; tcphdr
00017c  8988              LDRH     r0,[r1,#0xc]          ;172
00017e  f7fffffe          BL       ntohs
000182  f000003f          AND      r0,r0,#0x3f           ;172
000186  49c2              LDR      r1,|L1.1168|
000188  7008              STRB     r0,[r1,#0]            ;172
00018a  8930              LDRH     r0,[r6,#8]            ;173
00018c  7809              LDRB     r1,[r1,#0]            ;173  ; flags
00018e  f0110f03          TST      r1,#3                 ;173
000192  d001              BEQ      |L1.408|
000194  2101              MOVS     r1,#1                 ;173
000196  e000              B        |L1.410|
                  |L1.408|
000198  2100              MOVS     r1,#0                 ;173
                  |L1.410|
00019a  4408              ADD      r0,r0,r1              ;173
00019c  49bd              LDR      r1,|L1.1172|
00019e  8008              STRH     r0,[r1,#0]            ;173
0001a0  2700              MOVS     r7,#0                 ;177
0001a2  48bd              LDR      r0,|L1.1176|
0001a4  6804              LDR      r4,[r0,#0]            ;180  ; tcp_active_pcbs
0001a6  e022              B        |L1.494|
                  |L1.424|
0001a8  8c20              LDRH     r0,[r4,#0x20]         ;184
0001aa  4993              LDR      r1,|L1.1016|
0001ac  6809              LDR      r1,[r1,#0]            ;184  ; tcphdr
0001ae  8809              LDRH     r1,[r1,#0]            ;184
0001b0  4288              CMP      r0,r1                 ;184
0001b2  d11a              BNE      |L1.490|
0001b4  8b20              LDRH     r0,[r4,#0x18]         ;185
0001b6  4990              LDR      r1,|L1.1016|
0001b8  6809              LDR      r1,[r1,#0]            ;185  ; tcphdr
0001ba  8849              LDRH     r1,[r1,#2]            ;185
0001bc  4288              CMP      r0,r1                 ;185
0001be  d114              BNE      |L1.490|
0001c0  498c              LDR      r1,|L1.1012|
0001c2  6860              LDR      r0,[r4,#4]            ;186
0001c4  6809              LDR      r1,[r1,#0]            ;186  ; iphdr
0001c6  68c9              LDR      r1,[r1,#0xc]          ;186
0001c8  4288              CMP      r0,r1                 ;186
0001ca  d10e              BNE      |L1.490|
0001cc  4989              LDR      r1,|L1.1012|
0001ce  6820              LDR      r0,[r4,#0]            ;187
0001d0  6809              LDR      r1,[r1,#0]            ;187  ; iphdr
0001d2  6909              LDR      r1,[r1,#0x10]         ;187
0001d4  4288              CMP      r0,r1                 ;187
0001d6  d108              BNE      |L1.490|
0001d8  b137              CBZ      r7,|L1.488|
0001da  68e0              LDR      r0,[r4,#0xc]          ;194
0001dc  60f8              STR      r0,[r7,#0xc]          ;194
0001de  48ae              LDR      r0,|L1.1176|
0001e0  6800              LDR      r0,[r0,#0]            ;195  ; tcp_active_pcbs
0001e2  60e0              STR      r0,[r4,#0xc]          ;195
0001e4  48ac              LDR      r0,|L1.1176|
0001e6  6004              STR      r4,[r0,#0]            ;196  ; tcp_active_pcbs
                  |L1.488|
0001e8  e003              B        |L1.498|
                  |L1.490|
0001ea  4627              MOV      r7,r4                 ;201
0001ec  68e4              LDR      r4,[r4,#0xc]          ;180
                  |L1.494|
0001ee  2c00              CMP      r4,#0                 ;180
0001f0  d1da              BNE      |L1.424|
                  |L1.498|
0001f2  bf00              NOP                            ;199
0001f4  bb7c              CBNZ     r4,|L1.598|
0001f6  48a9              LDR      r0,|L1.1180|
0001f8  6804              LDR      r4,[r0,#0]            ;207  ; tcp_tw_pcbs
0001fa  e026              B        |L1.586|
                  |L1.508|
0001fc  8c20              LDRH     r0,[r4,#0x20]         ;209
0001fe  497e              LDR      r1,|L1.1016|
000200  6809              LDR      r1,[r1,#0]            ;209  ; tcphdr
000202  8809              LDRH     r1,[r1,#0]            ;209
000204  4288              CMP      r0,r1                 ;209
000206  d11f              BNE      |L1.584|
000208  8b20              LDRH     r0,[r4,#0x18]         ;210
00020a  497b              LDR      r1,|L1.1016|
00020c  6809              LDR      r1,[r1,#0]            ;210  ; tcphdr
00020e  8849              LDRH     r1,[r1,#2]            ;210
000210  4288              CMP      r0,r1                 ;210
000212  d119              BNE      |L1.584|
000214  4977              LDR      r1,|L1.1012|
000216  6860              LDR      r0,[r4,#4]            ;211
000218  6809              LDR      r1,[r1,#0]            ;211  ; iphdr
00021a  68c9              LDR      r1,[r1,#0xc]          ;211
00021c  4288              CMP      r0,r1                 ;211
00021e  d113              BNE      |L1.584|
000220  4974              LDR      r1,|L1.1012|
000222  6820              LDR      r0,[r4,#0]            ;212
000224  6809              LDR      r1,[r1,#0]            ;212  ; iphdr
000226  6909              LDR      r1,[r1,#0x10]         ;212
000228  4288              CMP      r0,r1                 ;212
00022a  d10d              BNE      |L1.584|
00022c  bf00              NOP                            ;216
00022e  bf00              NOP                            ;216
000230  a09b              ADR      r0,|L1.1184|
000232  f7fffffe          BL       __2printf
000236  bf00              NOP                            ;216
000238  bf00              NOP                            ;216
00023a  4620              MOV      r0,r4                 ;217
00023c  f7fffffe          BL       tcp_timewait_input
000240  4630              MOV      r0,r6                 ;218
000242  f7fffffe          BL       pbuf_free
000246  e70e              B        |L1.102|
                  |L1.584|
000248  68e4              LDR      r4,[r4,#0xc]          ;207
                  |L1.586|
00024a  2c00              CMP      r4,#0                 ;207
00024c  d1d6              BNE      |L1.508|
00024e  2700              MOVS     r7,#0                 ;225
000250  489f              LDR      r0,|L1.1232|
000252  6805              LDR      r5,[r0,#0]            ;226  ; tcp_listen_pcbs
000254  e027              B        |L1.678|
                  |L1.598|
000256  e028              B        |L1.682|
                  |L1.600|
000258  b13d              CBZ      r5,|L1.618|
00025a  6828              LDR      r0,[r5,#0]            ;227
00025c  b128              CBZ      r0,|L1.618|
00025e  4965              LDR      r1,|L1.1012|
000260  6828              LDR      r0,[r5,#0]            ;228
000262  6809              LDR      r1,[r1,#0]            ;228  ; iphdr
000264  6909              LDR      r1,[r1,#0x10]         ;228
000266  4288              CMP      r0,r1                 ;228
000268  d11b              BNE      |L1.674|
                  |L1.618|
00026a  8b28              LDRH     r0,[r5,#0x18]         ;229
00026c  4962              LDR      r1,|L1.1016|
00026e  6809              LDR      r1,[r1,#0]            ;229  ; tcphdr
000270  8849              LDRH     r1,[r1,#2]            ;229
000272  4288              CMP      r0,r1                 ;229
000274  d115              BNE      |L1.674|
000276  b137              CBZ      r7,|L1.646|
000278  68e8              LDR      r0,[r5,#0xc]          ;234
00027a  60f8              STR      r0,[r7,#0xc]          ;234
00027c  4894              LDR      r0,|L1.1232|
00027e  6800              LDR      r0,[r0,#0]            ;236  ; tcp_listen_pcbs
000280  60e8              STR      r0,[r5,#0xc]          ;236
000282  4893              LDR      r0,|L1.1232|
000284  6005              STR      r5,[r0,#0]            ;238  ; tcp_listen_pcbs
                  |L1.646|
000286  bf00              NOP                            ;241
000288  bf00              NOP                            ;241
00028a  a092              ADR      r0,|L1.1236|
00028c  f7fffffe          BL       __2printf
000290  bf00              NOP                            ;241
000292  bf00              NOP                            ;241
000294  4628              MOV      r0,r5                 ;242
000296  f7fffffe          BL       tcp_listen_input
00029a  4630              MOV      r0,r6                 ;243
00029c  f7fffffe          BL       pbuf_free
0002a0  e6e1              B        |L1.102|
                  |L1.674|
0002a2  462f              MOV      r7,r5                 ;246
0002a4  68ed              LDR      r5,[r5,#0xc]          ;226
                  |L1.678|
0002a6  2d00              CMP      r5,#0                 ;226
0002a8  d1d6              BNE      |L1.600|
                  |L1.682|
0002aa  bf00              NOP                            ;251
0002ac  bf00              NOP                            ;251
0002ae  a095              ADR      r0,|L1.1284|
0002b0  f7fffffe          BL       __2printf
0002b4  bf00              NOP                            ;251
0002b6  bf00              NOP                            ;251
0002b8  494f              LDR      r1,|L1.1016|
0002ba  6809              LDR      r1,[r1,#0]            ;252  ; tcphdr
0002bc  8988              LDRH     r0,[r1,#0xc]          ;252
0002be  f7fffffe          BL       ntohs
0002c2  f0000b3f          AND      r11,r0,#0x3f          ;252
0002c6  4658              MOV      r0,r11                ;252
0002c8  f7fffffe          BL       tcp_debug_print_flags
0002cc  bf00              NOP                            ;253
0002ce  bf00              NOP                            ;253
0002d0  a098              ADR      r0,|L1.1332|
0002d2  f7fffffe          BL       __2printf
0002d6  bf00              NOP                            ;253
0002d8  bf00              NOP                            ;253
0002da  b3bc              CBZ      r4,|L1.844|
0002dc  7c20              LDRB     r0,[r4,#0x10]         ;261
0002de  f7fffffe          BL       tcp_debug_print_state
0002e2  2000              MOVS     r0,#0                 ;266
0002e4  499b              LDR      r1,|L1.1364|
0002e6  6008              STR      r0,[r1,#0]            ;266  ; inseg
0002e8  8930              LDRH     r0,[r6,#8]            ;267
0002ea  8188              STRH     r0,[r1,#0xc]          ;267
0002ec  6870              LDR      r0,[r6,#4]            ;268
0002ee  6088              STR      r0,[r1,#8]            ;268  ; inseg
0002f0  4608              MOV      r0,r1                 ;269
0002f2  6046              STR      r6,[r0,#4]            ;269  ; inseg
0002f4  4840              LDR      r0,|L1.1016|
0002f6  6800              LDR      r0,[r0,#0]            ;270  ; tcphdr
0002f8  6108              STR      r0,[r1,#0x10]         ;270  ; inseg
0002fa  2000              MOVS     r0,#0                 ;272
0002fc  4996              LDR      r1,|L1.1368|
0002fe  6008              STR      r0,[r1,#0]            ;272  ; recv_data
000300  4996              LDR      r1,|L1.1372|
000302  7008              STRB     r0,[r1,#0]            ;273
000304  6fe0              LDR      r0,[r4,#0x7c]         ;276
000306  b300              CBZ      r0,|L1.842|
000308  bf00              NOP                            ;278
00030a  bf00              NOP                            ;278
00030c  a094              ADR      r0,|L1.1376|
00030e  f7fffffe          BL       __2printf
000312  bf00              NOP                            ;278
000314  bf00              NOP                            ;278
000316  bf00              NOP                            ;279
000318  f8d40084          LDR      r0,[r4,#0x84]         ;279
00031c  b140              CBZ      r0,|L1.816|
00031e  2300              MOVS     r3,#0                 ;279
000320  4621              MOV      r1,r4                 ;279
000322  f8d4c084          LDR      r12,[r4,#0x84]        ;279
000326  6fe2              LDR      r2,[r4,#0x7c]         ;279
000328  6960              LDR      r0,[r4,#0x14]         ;279
00032a  47e0              BLX      r12                   ;279
00032c  4680              MOV      r8,r0                 ;279
00032e  e006              B        |L1.830|
                  |L1.816|
000330  f04f0800          MOV      r8,#0                 ;279
000334  6fe0              LDR      r0,[r4,#0x7c]         ;279
000336  b110              CBZ      r0,|L1.830|
000338  6fe0              LDR      r0,[r4,#0x7c]         ;279
00033a  f7fffffe          BL       pbuf_free
                  |L1.830|
00033e  bf00              NOP                            ;279
000340  f1b80f00          CMP      r8,#0                 ;280
000344  d103              BNE      |L1.846|
000346  2000              MOVS     r0,#0                 ;281
000348  67e0              STR      r0,[r4,#0x7c]         ;281
                  |L1.842|
00034a  e00b              B        |L1.868|
                  |L1.844|
00034c  e199              B        |L1.1666|
                  |L1.846|
00034e  bf00              NOP                            ;284
000350  bf00              NOP                            ;284
000352  a08b              ADR      r0,|L1.1408|
000354  f7fffffe          BL       __2printf
000358  bf00              NOP                            ;284
00035a  bf00              NOP                            ;284
00035c  4630              MOV      r0,r6                 ;287
00035e  f7fffffe          BL       pbuf_free
000362  e680              B        |L1.102|
                  |L1.868|
000364  4895              LDR      r0,|L1.1468|
000366  6004              STR      r4,[r0,#0]            ;292  ; tcp_input_pcb
000368  4620              MOV      r0,r4                 ;293
00036a  f7fffffe          BL       tcp_process
00036e  4680              MOV      r8,r0                 ;293
000370  2000              MOVS     r0,#0                 ;294
000372  4992              LDR      r1,|L1.1468|
000374  6008              STR      r0,[r1,#0]            ;294  ; tcp_input_pcb
000376  f1180005          ADDS     r0,r8,#5              ;297
00037a  d017              BEQ      |L1.940|
00037c  4877              LDR      r0,|L1.1372|
00037e  7800              LDRB     r0,[r0,#0]            ;298  ; recv_flags
000380  f0100f08          TST      r0,#8                 ;298
000384  d013              BEQ      |L1.942|
000386  bf00              NOP                            ;303
000388  f8d40090          LDR      r0,[r4,#0x90]         ;303
00038c  b128              CBZ      r0,|L1.922|
00038e  f06f0105          MVN      r1,#5                 ;303
000392  f8d42090          LDR      r2,[r4,#0x90]         ;303
000396  6960              LDR      r0,[r4,#0x14]         ;303
000398  4790              BLX      r2                    ;303
                  |L1.922|
00039a  bf00              NOP                            ;303
00039c  4621              MOV      r1,r4                 ;304
00039e  483e              LDR      r0,|L1.1176|
0003a0  f7fffffe          BL       tcp_pcb_remove
0003a4  4621              MOV      r1,r4                 ;305
0003a6  2002              MOVS     r0,#2                 ;305
0003a8  f7fffffe          BL       memp_free
                  |L1.940|
0003ac  e15b              B        |L1.1638|
                  |L1.942|
0003ae  486b              LDR      r0,|L1.1372|
0003b0  7800              LDRB     r0,[r0,#0]            ;306  ; recv_flags
0003b2  f0100f10          TST      r0,#0x10              ;306
0003b6  d008              BEQ      |L1.970|
0003b8  4621              MOV      r1,r4                 ;309
0003ba  4837              LDR      r0,|L1.1176|
0003bc  f7fffffe          BL       tcp_pcb_remove
0003c0  4621              MOV      r1,r4                 ;310
0003c2  2002              MOVS     r0,#2                 ;310
0003c4  f7fffffe          BL       memp_free
0003c8  e14d              B        |L1.1638|
                  |L1.970|
0003ca  f04f0800          MOV      r8,#0                 ;312
0003ce  f8b4006c          LDRH     r0,[r4,#0x6c]         ;316
0003d2  2800              CMP      r0,#0                 ;316
0003d4  dd0d              BLE      |L1.1010|
0003d6  bf00              NOP                            ;317
0003d8  f8d40080          LDR      r0,[r4,#0x80]         ;317
0003dc  b140              CBZ      r0,|L1.1008|
0003de  f8b4206c          LDRH     r2,[r4,#0x6c]         ;317
0003e2  4621              MOV      r1,r4                 ;317
0003e4  f8d43080          LDR      r3,[r4,#0x80]         ;317
0003e8  6960              LDR      r0,[r4,#0x14]         ;317
0003ea  4798              BLX      r3                    ;317
0003ec  4680              MOV      r8,r0                 ;317
0003ee  e0e9              B        |L1.1476|
                  |L1.1008|
0003f0  e0e6              B        |L1.1472|
                  |L1.1010|
0003f2  e0e8              B        |L1.1478|
                  |L1.1012|
                          DCD      iphdr
                  |L1.1016|
                          DCD      tcphdr
                  |L1.1020|
0003fc  7463705f          DCB      "tcp_input: short packet (%4d bytes) discarded\n",0
000400  696e7075
000404  743a2073
000408  686f7274
00040c  20706163
000410  6b657420
000414  28253464
000418  20627974
00041c  65732920
000420  64697363
000424  61726465
000428  640a00  
00042b  00                DCB      0
                  |L1.1068|
00042c  7463705f          DCB      "tcp_input: packet discarded due to failing checksum 0x%"
000430  696e7075
000434  743a2070
000438  61636b65
00043c  74206469
000440  73636172
000444  64656420
000448  64756520
00044c  746f2066
000450  61696c69
000454  6e672063
000458  6865636b
00045c  73756d20
000460  307825  
000463  30343478          DCB      "044x\n",0
000467  0a00    
000469  00                DCB      0
00046a  00                DCB      0
00046b  00                DCB      0
                  |L1.1132|
00046c  7463705f          DCB      "tcp_input: short packet\n",0
000470  696e7075
000474  743a2073
000478  686f7274
00047c  20706163
000480  6b65740a
000484  00      
000485  00                DCB      0
000486  00                DCB      0
000487  00                DCB      0
                  |L1.1160|
                          DCD      seqno
                  |L1.1164|
                          DCD      ackno
                  |L1.1168|
                          DCD      flags
                  |L1.1172|
                          DCD      tcplen
                  |L1.1176|
                          DCD      tcp_active_pcbs
                  |L1.1180|
                          DCD      tcp_tw_pcbs
                  |L1.1184|
0004a0  7463705f          DCB      "tcp_input: packed for TIME_WAITing connection.\n",0
0004a4  696e7075
0004a8  743a2070
0004ac  61636b65
0004b0  6420666f
0004b4  72205449
0004b8  4d455f57
0004bc  41495469
0004c0  6e672063
0004c4  6f6e6e65
0004c8  6374696f
0004cc  6e2e0a00
                  |L1.1232|
                          DCD      tcp_listen_pcbs
                  |L1.1236|
0004d4  7463705f          DCB      "tcp_input: packed for LISTENing connection.\n",0
0004d8  696e7075
0004dc  743a2070
0004e0  61636b65
0004e4  6420666f
0004e8  72204c49
0004ec  5354454e
0004f0  696e6720
0004f4  636f6e6e
0004f8  65637469
0004fc  6f6e2e0a
000500  00      
000501  00                DCB      0
000502  00                DCB      0
000503  00                DCB      0
                  |L1.1284|
000504  2b2d2b2d          DCB      "+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags ",0
000508  2b2d2b2d
00050c  2b2d2b2d
000510  2b2d2b2d
000514  2b2d2b2d
000518  2b2d2b2d
00051c  2b2d2b2d
000520  20746370
000524  5f696e70
000528  75743a20
00052c  666c6167
000530  732000  
000533  00                DCB      0
                  |L1.1332|
000534  2d2b2d2b          DCB      "-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n",0
000538  2d2b2d2b
00053c  2d2b2d2b
000540  2d2b2d2b
000544  2d2b2d2b
000548  2d2b2d2b
00054c  2d2b2d2b
000550  0a00    
000552  00                DCB      0
000553  00                DCB      0
                  |L1.1364|
                          DCD      inseg
                  |L1.1368|
                          DCD      recv_data
                  |L1.1372|
                          DCD      recv_flags
                  |L1.1376|
000560  7463705f          DCB      "tcp_input: notify kept packet\n",0
000564  696e7075
000568  743a206e
00056c  6f746966
000570  79206b65
000574  70742070
000578  61636b65
00057c  740a00  
00057f  00                DCB      0
                  |L1.1408|
000580  7463705f          DCB      "tcp_input: drop incoming packets, because pcb is ""full"
000584  696e7075
000588  743a2064
00058c  726f7020
000590  696e636f
000594  6d696e67
000598  20706163
00059c  6b657473
0005a0  2c206265
0005a4  63617573
0005a8  65207063
0005ac  62206973
0005b0  20226675
0005b4  6c6c    
0005b6  220a00            DCB      """\n",0
0005b9  00                DCB      0
0005ba  00                DCB      0
0005bb  00                DCB      0
                  |L1.1468|
                          DCD      tcp_input_pcb
                  |L1.1472|
0005c0  f04f0800          MOV      r8,#0                 ;317
                  |L1.1476|
0005c4  bf00              NOP                            ;317
                  |L1.1478|
0005c6  4844              LDR      r0,|L1.1752|
0005c8  6800              LDR      r0,[r0,#0]            ;320  ; recv_data
0005ca  b388              CBZ      r0,|L1.1584|
0005cc  4843              LDR      r0,|L1.1756|
0005ce  7800              LDRB     r0,[r0,#0]            ;321  ; flags
0005d0  f0100f08          TST      r0,#8                 ;321
0005d4  d007              BEQ      |L1.1510|
0005d6  4840              LDR      r0,|L1.1752|
0005d8  6800              LDR      r0,[r0,#0]            ;322  ; recv_data
0005da  7b40              LDRB     r0,[r0,#0xd]          ;322
0005dc  f0400001          ORR      r0,r0,#1              ;322
0005e0  493d              LDR      r1,|L1.1752|
0005e2  6809              LDR      r1,[r1,#0]            ;322  ; recv_data
0005e4  7348              STRB     r0,[r1,#0xd]          ;322
                  |L1.1510|
0005e6  bf00              NOP                            ;326
0005e8  f8d40084          LDR      r0,[r4,#0x84]         ;326
0005ec  b148              CBZ      r0,|L1.1538|
0005ee  2300              MOVS     r3,#0                 ;326
0005f0  4939              LDR      r1,|L1.1752|
0005f2  f8d4c084          LDR      r12,[r4,#0x84]        ;326
0005f6  6960              LDR      r0,[r4,#0x14]         ;326
0005f8  680a              LDR      r2,[r1,#0]            ;326  ; recv_data
0005fa  4621              MOV      r1,r4                 ;326
0005fc  47e0              BLX      r12                   ;326
0005fe  4680              MOV      r8,r0                 ;326
000600  e008              B        |L1.1556|
                  |L1.1538|
000602  f04f0800          MOV      r8,#0                 ;326
000606  4834              LDR      r0,|L1.1752|
000608  6800              LDR      r0,[r0,#0]            ;326  ; recv_data
00060a  b118              CBZ      r0,|L1.1556|
00060c  4832              LDR      r0,|L1.1752|
00060e  6800              LDR      r0,[r0,#0]            ;326  ; recv_data
000610  f7fffffe          BL       pbuf_free
                  |L1.1556|
000614  bf00              NOP                            ;326
000616  f1b80f00          CMP      r8,#0                 ;329
00061a  d009              BEQ      |L1.1584|
00061c  482e              LDR      r0,|L1.1752|
00061e  6800              LDR      r0,[r0,#0]            ;330  ; recv_data
000620  67e0              STR      r0,[r4,#0x7c]         ;330
000622  bf00              NOP                            ;331
000624  bf00              NOP                            ;331
000626  a02e              ADR      r0,|L1.1760|
000628  f7fffffe          BL       __2printf
00062c  bf00              NOP                            ;331
00062e  bf00              NOP                            ;331
                  |L1.1584|
000630  4839              LDR      r0,|L1.1816|
000632  7800              LDRB     r0,[r0,#0]            ;337  ; recv_flags
000634  f0100f20          TST      r0,#0x20              ;337
000638  d00f              BEQ      |L1.1626|
00063a  bf00              NOP                            ;338
00063c  f8d40084          LDR      r0,[r4,#0x84]         ;338
000640  b140              CBZ      r0,|L1.1620|
000642  2300              MOVS     r3,#0                 ;338
000644  461a              MOV      r2,r3                 ;338
000646  4621              MOV      r1,r4                 ;338
000648  f8d4c084          LDR      r12,[r4,#0x84]        ;338
00064c  6960              LDR      r0,[r4,#0x14]         ;338
00064e  47e0              BLX      r12                   ;338
000650  4680              MOV      r8,r0                 ;338
000652  e001              B        |L1.1624|
                  |L1.1620|
000654  f04f0800          MOV      r8,#0                 ;338
                  |L1.1624|
000658  bf00              NOP                            ;338
                  |L1.1626|
00065a  f1b80f00          CMP      r8,#0                 ;342
00065e  d102              BNE      |L1.1638|
000660  4620              MOV      r0,r4                 ;343
000662  f7fffffe          BL       tcp_output
                  |L1.1638|
000666  482d              LDR      r0,|L1.1820|
000668  6840              LDR      r0,[r0,#4]            ;350  ; inseg
00066a  b130              CBZ      r0,|L1.1658|
00066c  492b              LDR      r1,|L1.1820|
00066e  6848              LDR      r0,[r1,#4]            ;352  ; inseg
000670  f7fffffe          BL       pbuf_free
000674  2000              MOVS     r0,#0                 ;353
000676  4929              LDR      r1,|L1.1820|
000678  6048              STR      r0,[r1,#4]            ;353  ; inseg
                  |L1.1658|
00067a  7c20              LDRB     r0,[r4,#0x10]         ;357
00067c  f7fffffe          BL       tcp_debug_print_state
000680  e027              B        |L1.1746|
                  |L1.1666|
000682  bf00              NOP                            ;365
000684  bf00              NOP                            ;365
000686  a026              ADR      r0,|L1.1824|
000688  f7fffffe          BL       __2printf
00068c  bf00              NOP                            ;365
00068e  bf00              NOP                            ;365
000690  492e              LDR      r1,|L1.1868|
000692  6809              LDR      r1,[r1,#0]            ;366  ; tcphdr
000694  8988              LDRH     r0,[r1,#0xc]          ;366
000696  f7fffffe          BL       ntohs
00069a  f0100f04          TST      r0,#4                 ;366
00069e  d115              BNE      |L1.1740|
0006a0  482a              LDR      r0,|L1.1868|
0006a2  6800              LDR      r0,[r0,#0]            ;369  ; tcphdr
0006a4  8803              LDRH     r3,[r0,#0]            ;369
0006a6  4829              LDR      r0,|L1.1868|
0006a8  6800              LDR      r0,[r0,#0]            ;369  ; tcphdr
0006aa  8842              LDRH     r2,[r0,#2]            ;369
0006ac  4828              LDR      r0,|L1.1872|
0006ae  e9cd2300          STRD     r2,r3,[sp,#0]         ;369
0006b2  6800              LDR      r0,[r0,#0]            ;369  ; seqno
0006b4  4a27              LDR      r2,|L1.1876|
0006b6  8812              LDRH     r2,[r2,#0]            ;369  ; tcplen
0006b8  1881              ADDS     r1,r0,r2              ;369
0006ba  4827              LDR      r0,|L1.1880|
0006bc  6803              LDR      r3,[r0,#0]            ;369  ; iphdr
0006be  330c              ADDS     r3,r3,#0xc            ;369
0006c0  6802              LDR      r2,[r0,#0]            ;369  ; iphdr
0006c2  3210              ADDS     r2,r2,#0x10           ;369
0006c4  4825              LDR      r0,|L1.1884|
0006c6  6800              LDR      r0,[r0,#0]            ;369  ; ackno
0006c8  f7fffffe          BL       tcp_rst
                  |L1.1740|
0006cc  4630              MOV      r0,r6                 ;373
0006ce  f7fffffe          BL       pbuf_free
                  |L1.1746|
0006d2  bf00              NOP      
0006d4  e4c7              B        |L1.102|
;;;379    
                          ENDP

0006d6  0000              DCW      0x0000
                  |L1.1752|
                          DCD      recv_data
                  |L1.1756|
                          DCD      flags
                  |L1.1760|
0006e0  7463705f          DCB      "tcp_input: keep incoming packet, because pcb is ""full"""
0006e4  696e7075
0006e8  743a206b
0006ec  65657020
0006f0  696e636f
0006f4  6d696e67
0006f8  20706163
0006fc  6b65742c
000700  20626563
000704  61757365
000708  20706362
00070c  20697320
000710  2266756c
000714  6c22    
000716  0a00              DCB      "\n",0
                  |L1.1816|
                          DCD      recv_flags
                  |L1.1820|
                          DCD      inseg
                  |L1.1824|
000720  7463705f          DCB      "tcp_input: no PCB match found, resetting.\n",0
000724  696e7075
000728  743a206e
00072c  6f205043
000730  42206d61
000734  74636820
000738  666f756e
00073c  642c2072
000740  65736574
000744  74696e67
000748  2e0a00  
00074b  00                DCB      0
                  |L1.1868|
                          DCD      tcphdr
                  |L1.1872|
                          DCD      seqno
                  |L1.1876|
                          DCD      tcplen
                  |L1.1880|
                          DCD      iphdr
                  |L1.1884|
                          DCD      ackno

                          AREA ||i.tcp_listen_input||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  tcp_listen_input PROC
;;;392    static err_t
;;;393    tcp_listen_input(struct tcp_pcb_listen *pcb)
000000  b57c              PUSH     {r2-r6,lr}
;;;394    {
000002  4605              MOV      r5,r0
;;;395      struct tcp_pcb *npcb;
;;;396      err_t rc;
;;;397    
;;;398      /* In the LISTEN state, we check for incoming SYN segments,
;;;399         creates a new PCB, and responds with a SYN|ACK. */
;;;400      if (flags & TCP_ACK) {
000004  4861              LDR      r0,|L2.396|
000006  7800              LDRB     r0,[r0,#0]  ; flags
000008  f0100f10          TST      r0,#0x10
00000c  d01e              BEQ      |L2.76|
;;;401        /* For incoming segments with the ACK flag set, respond with a
;;;402           RST. */
;;;403        LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
00000e  bf00              NOP      
000010  bf00              NOP      
000012  a05f              ADR      r0,|L2.400|
000014  f7fffffe          BL       __2printf
000018  bf00              NOP      
00001a  bf00              NOP      
;;;404        tcp_rst(ackno + 1, seqno + tcplen,
00001c  4868              LDR      r0,|L2.448|
00001e  6800              LDR      r0,[r0,#0]  ; tcphdr
000020  8803              LDRH     r3,[r0,#0]
000022  4867              LDR      r0,|L2.448|
000024  6800              LDR      r0,[r0,#0]  ; tcphdr
000026  8842              LDRH     r2,[r0,#2]
000028  4866              LDR      r0,|L2.452|
00002a  e9cd2300          STRD     r2,r3,[sp,#0]
00002e  6800              LDR      r0,[r0,#0]  ; seqno
000030  4a65              LDR      r2,|L2.456|
000032  8812              LDRH     r2,[r2,#0]  ; tcplen
000034  1881              ADDS     r1,r0,r2
000036  4865              LDR      r0,|L2.460|
000038  6803              LDR      r3,[r0,#0]  ; iphdr
00003a  330c              ADDS     r3,r3,#0xc
00003c  6802              LDR      r2,[r0,#0]  ; iphdr
00003e  3210              ADDS     r2,r2,#0x10
000040  4863              LDR      r0,|L2.464|
000042  6800              LDR      r0,[r0,#0]  ; ackno
000044  1c40              ADDS     r0,r0,#1
000046  f7fffffe          BL       tcp_rst
00004a  e09d              B        |L2.392|
                  |L2.76|
;;;405          &(iphdr->dest), &(iphdr->src),
;;;406          tcphdr->dest, tcphdr->src);
;;;407      } else if (flags & TCP_SYN) {
00004c  484f              LDR      r0,|L2.396|
00004e  7800              LDRB     r0,[r0,#0]  ; flags
000050  f0100f02          TST      r0,#2
000054  d07e              BEQ      |L2.340|
;;;408        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
000056  bf00              NOP      
000058  bf00              NOP      
00005a  4859              LDR      r0,|L2.448|
00005c  6800              LDR      r0,[r0,#0]  ; tcphdr
00005e  8842              LDRH     r2,[r0,#2]
000060  4857              LDR      r0,|L2.448|
000062  6800              LDR      r0,[r0,#0]  ; tcphdr
000064  8801              LDRH     r1,[r0,#0]
000066  a05b              ADR      r0,|L2.468|
000068  f7fffffe          BL       __2printf
00006c  bf00              NOP      
00006e  bf00              NOP      
;;;409    #if TCP_LISTEN_BACKLOG
;;;410        if (pcb->accepts_pending >= pcb->backlog) {
000070  f8950021          LDRB     r0,[r5,#0x21]
000074  f8951020          LDRB     r1,[r5,#0x20]
000078  4288              CMP      r0,r1
00007a  db0c              BLT      |L2.150|
;;;411          LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcphdr->dest));
00007c  bf00              NOP      
00007e  bf00              NOP      
000080  484f              LDR      r0,|L2.448|
000082  6800              LDR      r0,[r0,#0]  ; tcphdr
000084  8841              LDRH     r1,[r0,#2]
000086  a05c              ADR      r0,|L2.504|
000088  f7fffffe          BL       __2printf
00008c  bf00              NOP      
00008e  bf00              NOP      
;;;412    	  
;;;413          return ERR_ABRT;
000090  f06f0004          MVN      r0,#4
                  |L2.148|
;;;414        }
;;;415    #endif /* TCP_LISTEN_BACKLOG */
;;;416        npcb = tcp_alloc(pcb->prio);
;;;417        /* If a new PCB could not be created (probably due to lack of memory),
;;;418           we don't do anything, but rely on the sender will retransmit the
;;;419           SYN at a time when we have more memory available. */
;;;420        if (npcb == NULL) {
;;;421          LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
;;;422          TCP_STATS_INC(tcp.memerr);
;;;423          return ERR_MEM;
;;;424        }
;;;425    #if TCP_LISTEN_BACKLOG
;;;426        pcb->accepts_pending++;
;;;427    	LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: pcb->accepts_pending++ %"U16_F"\n", pcb->accepts_pending));
;;;428    #endif /* TCP_LISTEN_BACKLOG */
;;;429        /* Set up the new PCB. */
;;;430        ip_addr_set(&(npcb->local_ip), &(iphdr->dest));
;;;431        npcb->local_port = pcb->local_port;
;;;432        ip_addr_set(&(npcb->remote_ip), &(iphdr->src));
;;;433        npcb->remote_port = tcphdr->src;
;;;434        npcb->state = SYN_RCVD;
;;;435        npcb->rcv_nxt = seqno + 1;
;;;436        npcb->rcv_ann_right_edge = npcb->rcv_nxt;
;;;437        npcb->snd_wnd = tcphdr->wnd;
;;;438        npcb->ssthresh = npcb->snd_wnd;
;;;439        npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
;;;440        npcb->callback_arg = pcb->callback_arg;
;;;441    #if LWIP_CALLBACK_API
;;;442        npcb->accept = pcb->accept;
;;;443    #endif /* LWIP_CALLBACK_API */
;;;444        /* inherit socket options */
;;;445        npcb->so_options = pcb->so_options & (SOF_DEBUG|SOF_DONTROUTE|SOF_KEEPALIVE|SOF_OOBINLINE|SOF_LINGER);
;;;446        /* Register the new PCB so that we can begin receiving segments
;;;447           for it. */
;;;448        TCP_REG(&tcp_active_pcbs, npcb);
;;;449    
;;;450        /* Parse any options in the SYN. */
;;;451        tcp_parseopt(npcb);
;;;452    #if TCP_CALCULATE_EFF_SEND_MSS
;;;453        npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
;;;454    #endif /* TCP_CALCULATE_EFF_SEND_MSS */
;;;455    
;;;456        snmp_inc_tcppassiveopens();
;;;457    
;;;458        /* Send a SYN|ACK together with the MSS option. */
;;;459        rc = tcp_enqueue(npcb, NULL, 0, TCP_SYN | TCP_ACK, 0, TF_SEG_OPTS_MSS
;;;460    #if LWIP_TCP_TIMESTAMPS
;;;461          /* and maybe include the TIMESTAMP option */
;;;462         | (npcb->flags & TF_TIMESTAMP ? TF_SEG_OPTS_TS : 0)
;;;463    #endif
;;;464          );
;;;465        if (rc != ERR_OK) {
;;;466          tcp_abandon(npcb, 0);
;;;467          return rc;
;;;468        }
;;;469        return tcp_output(npcb);
;;;470      }
;;;471      return ERR_OK;
;;;472    }
000094  bd7c              POP      {r2-r6,pc}
                  |L2.150|
000096  7c68              LDRB     r0,[r5,#0x11]         ;416
000098  f7fffffe          BL       tcp_alloc
00009c  4604              MOV      r4,r0                 ;416
00009e  b94c              CBNZ     r4,|L2.180|
0000a0  bf00              NOP                            ;421
0000a2  bf00              NOP                            ;421
0000a4  a062              ADR      r0,|L2.560|
0000a6  f7fffffe          BL       __2printf
0000aa  bf00              NOP                            ;421
0000ac  bf00              NOP                            ;421
0000ae  f04f30ff          MOV      r0,#0xffffffff        ;423
0000b2  e7ef              B        |L2.148|
                  |L2.180|
0000b4  f8950021          LDRB     r0,[r5,#0x21]         ;426
0000b8  1c40              ADDS     r0,r0,#1              ;426
0000ba  f8850021          STRB     r0,[r5,#0x21]         ;426
0000be  bf00              NOP                            ;427
0000c0  bf00              NOP                            ;427
0000c2  f8951021          LDRB     r1,[r5,#0x21]         ;427
0000c6  a065              ADR      r0,|L2.604|
0000c8  f7fffffe          BL       __2printf
0000cc  bf00              NOP                            ;427
0000ce  bf00              NOP                            ;427
0000d0  483e              LDR      r0,|L2.460|
0000d2  6800              LDR      r0,[r0,#0]            ;430  ; iphdr
0000d4  3010              ADDS     r0,r0,#0x10           ;430
0000d6  d100              BNE      |L2.218|
0000d8  e002              B        |L2.224|
                  |L2.218|
0000da  483c              LDR      r0,|L2.460|
0000dc  6800              LDR      r0,[r0,#0]            ;430  ; iphdr
0000de  6900              LDR      r0,[r0,#0x10]         ;430
                  |L2.224|
0000e0  6020              STR      r0,[r4,#0]            ;430
0000e2  8b28              LDRH     r0,[r5,#0x18]         ;431
0000e4  8320              STRH     r0,[r4,#0x18]         ;431
0000e6  4839              LDR      r0,|L2.460|
0000e8  6800              LDR      r0,[r0,#0]            ;432  ; iphdr
0000ea  300c              ADDS     r0,r0,#0xc            ;432
0000ec  d100              BNE      |L2.240|
0000ee  e002              B        |L2.246|
                  |L2.240|
0000f0  4836              LDR      r0,|L2.460|
0000f2  6800              LDR      r0,[r0,#0]            ;432  ; iphdr
0000f4  68c0              LDR      r0,[r0,#0xc]          ;432
                  |L2.246|
0000f6  6060              STR      r0,[r4,#4]            ;432
0000f8  4831              LDR      r0,|L2.448|
0000fa  6800              LDR      r0,[r0,#0]            ;433  ; tcphdr
0000fc  8800              LDRH     r0,[r0,#0]            ;433
0000fe  8420              STRH     r0,[r4,#0x20]         ;433
000100  2003              MOVS     r0,#3                 ;434
000102  7420              STRB     r0,[r4,#0x10]         ;434
000104  482f              LDR      r0,|L2.452|
000106  6800              LDR      r0,[r0,#0]            ;435  ; seqno
000108  1c40              ADDS     r0,r0,#1              ;435
00010a  6260              STR      r0,[r4,#0x24]         ;435
00010c  6a60              LDR      r0,[r4,#0x24]         ;436
00010e  62e0              STR      r0,[r4,#0x2c]         ;436
000110  482b              LDR      r0,|L2.448|
000112  6800              LDR      r0,[r0,#0]            ;437  ; tcphdr
000114  89c0              LDRH     r0,[r0,#0xe]          ;437
000116  f8a4005c          STRH     r0,[r4,#0x5c]         ;437
00011a  f8b4005c          LDRH     r0,[r4,#0x5c]         ;438
00011e  f8a40054          STRH     r0,[r4,#0x54]         ;438
000122  4828              LDR      r0,|L2.452|
000124  6800              LDR      r0,[r0,#0]            ;439  ; seqno
000126  1e40              SUBS     r0,r0,#1              ;439
000128  6620              STR      r0,[r4,#0x60]         ;439
00012a  6968              LDR      r0,[r5,#0x14]         ;440
00012c  6160              STR      r0,[r4,#0x14]         ;440
00012e  69e8              LDR      r0,[r5,#0x1c]         ;442
000130  61e0              STR      r0,[r4,#0x1c]         ;442
000132  8928              LDRH     r0,[r5,#8]            ;445
000134  f2401199          MOV      r1,#0x199             ;445
000138  4008              ANDS     r0,r0,r1              ;445
00013a  8120              STRH     r0,[r4,#8]            ;445
00013c  bf00              NOP                            ;448
00013e  4853              LDR      r0,|L2.652|
000140  6800              LDR      r0,[r0,#0]            ;448  ; tcp_active_pcbs
000142  60e0              STR      r0,[r4,#0xc]          ;448
000144  4851              LDR      r0,|L2.652|
000146  6004              STR      r4,[r0,#0]            ;448  ; tcp_active_pcbs
000148  bf00              NOP                            ;448
00014a  4620              MOV      r0,r4                 ;451
00014c  f7fffffe          BL       tcp_parseopt
000150  8f20              LDRH     r0,[r4,#0x38]         ;453
000152  e000              B        |L2.342|
                  |L2.340|
000154  e018              B        |L2.392|
                  |L2.342|
000156  1d21              ADDS     r1,r4,#4              ;453
000158  f7fffffe          BL       tcp_eff_send_mss
00015c  8720              STRH     r0,[r4,#0x38]         ;453
00015e  2301              MOVS     r3,#1                 ;459
000160  2200              MOVS     r2,#0                 ;459
000162  e9cd2300          STRD     r2,r3,[sp,#0]         ;459
000166  2312              MOVS     r3,#0x12              ;459
000168  4611              MOV      r1,r2                 ;459
00016a  4620              MOV      r0,r4                 ;459
00016c  f7fffffe          BL       tcp_enqueue
000170  4606              MOV      r6,r0                 ;459
000172  b12e              CBZ      r6,|L2.384|
000174  2100              MOVS     r1,#0                 ;466
000176  4620              MOV      r0,r4                 ;466
000178  f7fffffe          BL       tcp_abandon
00017c  4630              MOV      r0,r6                 ;467
00017e  e789              B        |L2.148|
                  |L2.384|
000180  4620              MOV      r0,r4                 ;469
000182  f7fffffe          BL       tcp_output
000186  e785              B        |L2.148|
                  |L2.392|
000188  2000              MOVS     r0,#0                 ;471
00018a  e783              B        |L2.148|
;;;473    
                          ENDP

                  |L2.396|
                          DCD      flags
                  |L2.400|
000190  7463705f          DCB      "tcp_listen_input: ACK in LISTEN, sending reset\n",0
000194  6c697374
000198  656e5f69
00019c  6e707574
0001a0  3a204143
0001a4  4b20696e
0001a8  204c4953
0001ac  54454e2c
0001b0  2073656e
0001b4  64696e67
0001b8  20726573
0001bc  65740a00
                  |L2.448|
                          DCD      tcphdr
                  |L2.452|
                          DCD      seqno
                  |L2.456|
                          DCD      tcplen
                  |L2.460|
                          DCD      iphdr
                  |L2.464|
                          DCD      ackno
                  |L2.468|
0001d4  54435020          DCB      "TCP connection request %4d -> %4d.\n",0
0001d8  636f6e6e
0001dc  65637469
0001e0  6f6e2072
0001e4  65717565
0001e8  73742025
0001ec  3464202d
0001f0  3e202534
0001f4  642e0a00
                  |L2.504|
0001f8  7463705f          DCB      "tcp_listen_input: listen backlog exceeded for port %4d\n"
0001fc  6c697374
000200  656e5f69
000204  6e707574
000208  3a206c69
00020c  7374656e
000210  20626163
000214  6b6c6f67
000218  20657863
00021c  65656465
000220  6420666f
000224  7220706f
000228  72742025
00022c  34640a  
00022f  00                DCB      0
                  |L2.560|
000230  7463705f          DCB      "tcp_listen_input: could not allocate PCB\n",0
000234  6c697374
000238  656e5f69
00023c  6e707574
000240  3a20636f
000244  756c6420
000248  6e6f7420
00024c  616c6c6f
000250  63617465
000254  20504342
000258  0a00    
00025a  00                DCB      0
00025b  00                DCB      0
                  |L2.604|
00025c  7463705f          DCB      "tcp_listen_input: pcb->accepts_pending++ %4d\n",0
000260  6c697374
000264  656e5f69
000268  6e707574
00026c  3a207063
000270  622d3e61
000274  63636570
000278  74735f70
00027c  656e6469
000280  6e672b2b
000284  20253464
000288  0a00    
00028a  00                DCB      0
00028b  00                DCB      0
                  |L2.652|
                          DCD      tcp_active_pcbs

                          AREA ||i.tcp_parseopt||, CODE, READONLY, ALIGN=2

                  tcp_parseopt PROC
;;;1343   static void
;;;1344   tcp_parseopt(struct tcp_pcb *pcb)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1345   {
000004  4680              MOV      r8,r0
;;;1346     u16_t c, max_c;
;;;1347     u16_t mss;
;;;1348     u8_t *opts, opt;
;;;1349   #if LWIP_TCP_TIMESTAMPS
;;;1350     u32_t tsval;
;;;1351   #endif
;;;1352   
;;;1353     opts = (u8_t *)tcphdr + TCP_HLEN;
000006  483f              LDR      r0,|L3.260|
000008  6800              LDR      r0,[r0,#0]  ; tcphdr
00000a  f1000514          ADD      r5,r0,#0x14
;;;1354   
;;;1355     /* Parse the TCP MSS option, if present. */
;;;1356     if(TCPH_HDRLEN(tcphdr) > 0x5) {
00000e  493d              LDR      r1,|L3.260|
000010  6809              LDR      r1,[r1,#0]  ; tcphdr
000012  8988              LDRH     r0,[r1,#0xc]
000014  f7fffffe          BL       ntohs
000018  2105              MOVS     r1,#5
00001a  ebb13f20          CMP      r1,r0,ASR #12
00001e  da6e              BGE      |L3.254|
;;;1357       max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
000020  4938              LDR      r1,|L3.260|
000022  6809              LDR      r1,[r1,#0]  ; tcphdr
000024  8988              LDRH     r0,[r1,#0xc]
000026  f7fffffe          BL       ntohs
00002a  2105              MOVS     r1,#5
00002c  ebc13020          RSB      r0,r1,r0,ASR #12
000030  0480              LSLS     r0,r0,#18
000032  0c07              LSRS     r7,r0,#16
;;;1358       for (c = 0; c < max_c; ) {
000034  2400              MOVS     r4,#0
000036  e060              B        |L3.250|
                  |L3.56|
;;;1359         opt = opts[c];
000038  f8159004          LDRB     r9,[r5,r4]
;;;1360         switch (opt) {
00003c  f1b90f00          CMP      r9,#0
000040  d006              BEQ      |L3.80|
000042  f1b90f01          CMP      r9,#1
000046  d00c              BEQ      |L3.98|
000048  f1b90f02          CMP      r9,#2
00004c  d13d              BNE      |L3.202|
00004e  e012              B        |L3.118|
                  |L3.80|
;;;1361         case 0x00:
;;;1362           /* End of options. */
;;;1363           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
000050  bf00              NOP      
000052  bf00              NOP      
000054  a02c              ADR      r0,|L3.264|
000056  f7fffffe          BL       __2printf
00005a  bf00              NOP      
00005c  bf00              NOP      
                  |L3.94|
;;;1364           return;
;;;1365         case 0x01:
;;;1366           /* NOP option. */
;;;1367           ++c;
;;;1368           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
;;;1369           break;
;;;1370         case 0x02:
;;;1371           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
;;;1372           if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
;;;1373             /* Bad length */
;;;1374             LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
;;;1375             return;
;;;1376           }
;;;1377           /* An MSS option with the right option length. */
;;;1378           mss = (opts[c + 2] << 8) | opts[c + 3];
;;;1379           /* Limit the mss to the configured TCP_MSS and prevent division by zero */
;;;1380           pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
;;;1381           /* Advance to next option */
;;;1382           c += 0x04;
;;;1383           break;
;;;1384   #if LWIP_TCP_TIMESTAMPS
;;;1385         case 0x08:
;;;1386           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: TS\n"));
;;;1387           if (opts[c + 1] != 0x0A || c + 0x0A > max_c) {
;;;1388             /* Bad length */
;;;1389             LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
;;;1390             return;
;;;1391           }
;;;1392           /* TCP timestamp option with valid length */
;;;1393           tsval = (opts[c+2]) | (opts[c+3] << 8) | 
;;;1394             (opts[c+4] << 16) | (opts[c+5] << 24);
;;;1395           if (flags & TCP_SYN) {
;;;1396             pcb->ts_recent = ntohl(tsval);
;;;1397             pcb->flags |= TF_TIMESTAMP;
;;;1398           } else if (TCP_SEQ_BETWEEN(pcb->ts_lastacksent, seqno, seqno+tcplen)) {
;;;1399             pcb->ts_recent = ntohl(tsval);
;;;1400           }
;;;1401           /* Advance to next option */
;;;1402           c += 0x0A;
;;;1403           break;
;;;1404   #endif
;;;1405         default:
;;;1406           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
;;;1407           if (opts[c + 1] == 0) {
;;;1408             LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
;;;1409             /* If the length field is zero, the options are malformed
;;;1410                and we don't process them further. */
;;;1411             return;
;;;1412           }
;;;1413           /* All other options have a length field, so that we easily
;;;1414              can skip past them. */
;;;1415           c += opts[c + 1];
;;;1416         }
;;;1417       }
;;;1418     }
;;;1419   }
00005e  e8bd87f0          POP      {r4-r10,pc}
                  |L3.98|
000062  1c60              ADDS     r0,r4,#1              ;1367
000064  b284              UXTH     r4,r0                 ;1367
000066  bf00              NOP                            ;1368
000068  bf00              NOP                            ;1368
00006a  a02c              ADR      r0,|L3.284|
00006c  f7fffffe          BL       __2printf
000070  bf00              NOP                            ;1368
000072  bf00              NOP                            ;1368
000074  e040              B        |L3.248|
                  |L3.118|
000076  bf00              NOP                            ;1371
000078  bf00              NOP                            ;1371
00007a  a02d              ADR      r0,|L3.304|
00007c  f7fffffe          BL       __2printf
000080  bf00              NOP                            ;1371
000082  bf00              NOP                            ;1371
000084  1c60              ADDS     r0,r4,#1              ;1372
000086  5c28              LDRB     r0,[r5,r0]            ;1372
000088  2804              CMP      r0,#4                 ;1372
00008a  d102              BNE      |L3.146|
00008c  1d20              ADDS     r0,r4,#4              ;1372
00008e  42b8              CMP      r0,r7                 ;1372
000090  dd07              BLE      |L3.162|
                  |L3.146|
000092  bf00              NOP                            ;1374
000094  bf00              NOP                            ;1374
000096  a02b              ADR      r0,|L3.324|
000098  f7fffffe          BL       __2printf
00009c  bf00              NOP                            ;1374
00009e  bf00              NOP                            ;1374
0000a0  e7dd              B        |L3.94|
                  |L3.162|
0000a2  1ce0              ADDS     r0,r4,#3              ;1378
0000a4  5c29              LDRB     r1,[r5,r0]            ;1378
0000a6  1ca0              ADDS     r0,r4,#2              ;1378
0000a8  5c28              LDRB     r0,[r5,r0]            ;1378
0000aa  ea412600          ORR      r6,r1,r0,LSL #8       ;1378
0000ae  f24050b4          MOV      r0,#0x5b4             ;1380
0000b2  4286              CMP      r6,r0                 ;1380
0000b4  dc00              BGT      |L3.184|
0000b6  b916              CBNZ     r6,|L3.190|
                  |L3.184|
0000b8  f24050b4          MOV      r0,#0x5b4             ;1380
0000bc  e000              B        |L3.192|
                  |L3.190|
0000be  4630              MOV      r0,r6                 ;1380
                  |L3.192|
0000c0  f8a80038          STRH     r0,[r8,#0x38]         ;1380
0000c4  1d20              ADDS     r0,r4,#4              ;1382
0000c6  b284              UXTH     r4,r0                 ;1382
0000c8  e016              B        |L3.248|
                  |L3.202|
0000ca  bf00              NOP                            ;1406
0000cc  bf00              NOP                            ;1406
0000ce  a024              ADR      r0,|L3.352|
0000d0  f7fffffe          BL       __2printf
0000d4  bf00              NOP                            ;1406
0000d6  bf00              NOP                            ;1406
0000d8  1c60              ADDS     r0,r4,#1              ;1407
0000da  5c28              LDRB     r0,[r5,r0]            ;1407
0000dc  b938              CBNZ     r0,|L3.238|
0000de  bf00              NOP                            ;1408
0000e0  bf00              NOP                            ;1408
0000e2  a018              ADR      r0,|L3.324|
0000e4  f7fffffe          BL       __2printf
0000e8  bf00              NOP                            ;1408
0000ea  bf00              NOP                            ;1408
0000ec  e7b7              B        |L3.94|
                  |L3.238|
0000ee  1c60              ADDS     r0,r4,#1              ;1415
0000f0  5c28              LDRB     r0,[r5,r0]            ;1415
0000f2  4420              ADD      r0,r0,r4              ;1415
0000f4  b284              UXTH     r4,r0                 ;1415
0000f6  bf00              NOP                            ;1360
                  |L3.248|
0000f8  bf00              NOP                            ;1369
                  |L3.250|
0000fa  42bc              CMP      r4,r7                 ;1358
0000fc  db9c              BLT      |L3.56|
                  |L3.254|
0000fe  bf00              NOP      
000100  e7ad              B        |L3.94|
;;;1420   
                          ENDP

000102  0000              DCW      0x0000
                  |L3.260|
                          DCD      tcphdr
                  |L3.264|
000108  7463705f          DCB      "tcp_parseopt: EOL\n",0
00010c  70617273
000110  656f7074
000114  3a20454f
000118  4c0a00  
00011b  00                DCB      0
                  |L3.284|
00011c  7463705f          DCB      "tcp_parseopt: NOP\n",0
000120  70617273
000124  656f7074
000128  3a204e4f
00012c  500a00  
00012f  00                DCB      0
                  |L3.304|
000130  7463705f          DCB      "tcp_parseopt: MSS\n",0
000134  70617273
000138  656f7074
00013c  3a204d53
000140  530a00  
000143  00                DCB      0
                  |L3.324|
000144  7463705f          DCB      "tcp_parseopt: bad length\n",0
000148  70617273
00014c  656f7074
000150  3a206261
000154  64206c65
000158  6e677468
00015c  0a00    
00015e  00                DCB      0
00015f  00                DCB      0
                  |L3.352|
000160  7463705f          DCB      "tcp_parseopt: other\n",0
000164  70617273
000168  656f7074
00016c  3a206f74
000170  6865720a
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0

                          AREA ||i.tcp_process||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  tcp_process PROC
;;;506    static err_t
;;;507    tcp_process(struct tcp_pcb *pcb)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;508    {
000004  4604              MOV      r4,r0
;;;509      struct tcp_seg *rseg;
;;;510      u8_t acceptable = 0;
000006  2700              MOVS     r7,#0
;;;511      err_t err;
;;;512    
;;;513      err = ERR_OK;
000008  46b8              MOV      r8,r7
;;;514    
;;;515      /* Process incoming RST segments. */
;;;516      if (flags & TCP_RST) {
00000a  48fb              LDR      r0,|L4.1016|
00000c  7800              LDRB     r0,[r0,#0]  ; flags
00000e  f0100f04          TST      r0,#4
000012  d045              BEQ      |L4.160|
;;;517        /* First, determine if the reset is acceptable. */
;;;518        if (pcb->state == SYN_SENT) {
000014  7c20              LDRB     r0,[r4,#0x10]
000016  2802              CMP      r0,#2
000018  d106              BNE      |L4.40|
;;;519          if (ackno == pcb->snd_nxt) {
00001a  49f8              LDR      r1,|L4.1020|
00001c  6da0              LDR      r0,[r4,#0x58]
00001e  6809              LDR      r1,[r1,#0]  ; ackno
000020  4288              CMP      r0,r1
000022  d10f              BNE      |L4.68|
;;;520            acceptable = 1;
000024  2701              MOVS     r7,#1
000026  e00d              B        |L4.68|
                  |L4.40|
;;;521          }
;;;522        } else {
;;;523          if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
000028  49f5              LDR      r1,|L4.1024|
00002a  6a60              LDR      r0,[r4,#0x24]
00002c  6809              LDR      r1,[r1,#0]  ; seqno
00002e  1a08              SUBS     r0,r1,r0
000030  d408              BMI      |L4.68|
000032  8d21              LDRH     r1,[r4,#0x28]
000034  6a60              LDR      r0,[r4,#0x24]
000036  4408              ADD      r0,r0,r1
000038  49f1              LDR      r1,|L4.1024|
00003a  6809              LDR      r1,[r1,#0]  ; seqno
00003c  1a08              SUBS     r0,r1,r0
00003e  2800              CMP      r0,#0
000040  dc00              BGT      |L4.68|
;;;524                              pcb->rcv_nxt+pcb->rcv_wnd)) {
;;;525            acceptable = 1;
000042  2701              MOVS     r7,#1
                  |L4.68|
;;;526          }
;;;527        }
;;;528    
;;;529        if (acceptable) {
000044  b1b7              CBZ      r7,|L4.116|
;;;530          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
000046  bf00              NOP      
000048  bf00              NOP      
00004a  a0ee              ADR      r0,|L4.1028|
00004c  f7fffffe          BL       __2printf
000050  bf00              NOP      
000052  bf00              NOP      
;;;531          LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
;;;532          recv_flags |= TF_RESET;
000054  48f3              LDR      r0,|L4.1060|
000056  7800              LDRB     r0,[r0,#0]  ; recv_flags
000058  f0400008          ORR      r0,r0,#8
00005c  49f1              LDR      r1,|L4.1060|
00005e  7008              STRB     r0,[r1,#0]
;;;533          pcb->flags &= ~TF_ACK_DELAY;
000060  f8940022          LDRB     r0,[r4,#0x22]
000064  f0200001          BIC      r0,r0,#1
000068  f8840022          STRB     r0,[r4,#0x22]
;;;534          return ERR_RST;
00006c  f06f0005          MVN      r0,#5
                  |L4.112|
;;;535        } else {
;;;536          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
;;;537           seqno, pcb->rcv_nxt));
;;;538          LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
;;;539           seqno, pcb->rcv_nxt));
;;;540          return ERR_OK;
;;;541        }
;;;542      }
;;;543    
;;;544      if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
;;;545        /* Cope with new connection attempt after remote end crashed */
;;;546        tcp_ack_now(pcb);
;;;547        return ERR_OK;
;;;548      }
;;;549      
;;;550      /* Update the PCB (in)activity timer. */
;;;551      pcb->tmr = tcp_ticks;
;;;552      pcb->keep_cnt_sent = 0;
;;;553    
;;;554      tcp_parseopt(pcb);
;;;555    
;;;556      /* Do different things depending on the TCP state. */
;;;557      switch (pcb->state) {
;;;558      case SYN_SENT:
;;;559        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
;;;560         pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
;;;561        /* received SYN ACK with expected sequence number? */
;;;562        if ((flags & TCP_ACK) && (flags & TCP_SYN)
;;;563            && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
;;;564          pcb->snd_buf++;
;;;565          pcb->rcv_nxt = seqno + 1;
;;;566          pcb->rcv_ann_right_edge = pcb->rcv_nxt;
;;;567          pcb->lastack = ackno;
;;;568          pcb->snd_wnd = tcphdr->wnd;
;;;569          pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
;;;570          pcb->state = ESTABLISHED;
;;;571    
;;;572    #if TCP_CALCULATE_EFF_SEND_MSS
;;;573          pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
;;;574    #endif /* TCP_CALCULATE_EFF_SEND_MSS */
;;;575    
;;;576          /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
;;;577           * but for the default value of pcb->mss) */
;;;578          pcb->ssthresh = pcb->mss * 10;
;;;579    
;;;580          pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
;;;581          LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
;;;582          --pcb->snd_queuelen;
;;;583          LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_queuelen));
;;;584          rseg = pcb->unacked;
;;;585          pcb->unacked = rseg->next;
;;;586    
;;;587          /* If there's nothing left to acknowledge, stop the retransmit
;;;588             timer, otherwise reset it to start again */
;;;589          if(pcb->unacked == NULL)
;;;590            pcb->rtime = -1;
;;;591          else {
;;;592            pcb->rtime = 0;
;;;593            pcb->nrtx = 0;
;;;594          }
;;;595    
;;;596          tcp_seg_free(rseg);
;;;597    
;;;598          /* Call the user specified function to call when sucessfully
;;;599           * connected. */
;;;600          TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
;;;601          tcp_ack_now(pcb);
;;;602        }
;;;603        /* received ACK? possibly a half-open connection */
;;;604        else if (flags & TCP_ACK) {
;;;605          /* send a RST to bring the other side in a non-synchronized state. */
;;;606          tcp_rst(ackno, seqno + tcplen, &(iphdr->dest), &(iphdr->src),
;;;607            tcphdr->dest, tcphdr->src);
;;;608        }
;;;609        break;
;;;610      case SYN_RCVD:
;;;611        if (flags & TCP_ACK) {
;;;612          /* expected ACK number? */
;;;613          if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
;;;614            u16_t old_cwnd;
;;;615            pcb->state = ESTABLISHED;
;;;616            LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
;;;617    #if LWIP_CALLBACK_API
;;;618            LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
;;;619    #endif
;;;620            /* Call the accept function. */
;;;621            TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
;;;622            if (err != ERR_OK) {
;;;623              /* If the accept function returns with an error, we abort
;;;624               * the connection. */
;;;625              tcp_abort(pcb);
;;;626              return ERR_ABRT;
;;;627            }
;;;628            old_cwnd = pcb->cwnd;
;;;629            /* If there was any data contained within this ACK,
;;;630             * we'd better pass it on to the application as well. */
;;;631            tcp_receive(pcb);
;;;632    
;;;633            pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
;;;634    
;;;635            if (recv_flags & TF_GOT_FIN) {
;;;636              tcp_ack_now(pcb);
;;;637              pcb->state = CLOSE_WAIT;
;;;638            }
;;;639          }
;;;640          /* incorrect ACK number */
;;;641          else {
;;;642            /* send RST */
;;;643            tcp_rst(ackno, seqno + tcplen, &(iphdr->dest), &(iphdr->src),
;;;644                    tcphdr->dest, tcphdr->src);
;;;645          }
;;;646        } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
;;;647          /* Looks like another copy of the SYN - retransmit our SYN-ACK */
;;;648          tcp_rexmit(pcb);
;;;649        }
;;;650        break;
;;;651      case CLOSE_WAIT:
;;;652        /* FALLTHROUGH */
;;;653      case ESTABLISHED:
;;;654        tcp_receive(pcb);
;;;655        if (recv_flags & TF_GOT_FIN) { /* passive close */
;;;656          tcp_ack_now(pcb);
;;;657          pcb->state = CLOSE_WAIT;
;;;658        }
;;;659        break;
;;;660      case FIN_WAIT_1:
;;;661        tcp_receive(pcb);
;;;662        if (recv_flags & TF_GOT_FIN) {
;;;663          if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
;;;664            LWIP_DEBUGF(TCP_DEBUG,
;;;665              ("TCP connection closed %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
;;;666            tcp_ack_now(pcb);
;;;667            tcp_pcb_purge(pcb);
;;;668            TCP_RMV(&tcp_active_pcbs, pcb);
;;;669            pcb->state = TIME_WAIT;
;;;670            TCP_REG(&tcp_tw_pcbs, pcb);
;;;671          } else {
;;;672            tcp_ack_now(pcb);
;;;673            pcb->state = CLOSING;
;;;674          }
;;;675        } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
;;;676          pcb->state = FIN_WAIT_2;
;;;677        }
;;;678        break;
;;;679      case FIN_WAIT_2:
;;;680        tcp_receive(pcb);
;;;681        if (recv_flags & TF_GOT_FIN) {
;;;682          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
;;;683          tcp_ack_now(pcb);
;;;684          tcp_pcb_purge(pcb);
;;;685          TCP_RMV(&tcp_active_pcbs, pcb);
;;;686          pcb->state = TIME_WAIT;
;;;687          TCP_REG(&tcp_tw_pcbs, pcb);
;;;688        }
;;;689        break;
;;;690      case CLOSING:
;;;691        tcp_receive(pcb);
;;;692        if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
;;;693          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
;;;694          tcp_pcb_purge(pcb);
;;;695          TCP_RMV(&tcp_active_pcbs, pcb);
;;;696          pcb->state = TIME_WAIT;
;;;697          TCP_REG(&tcp_tw_pcbs, pcb);
;;;698        }
;;;699        break;
;;;700      case LAST_ACK:
;;;701        tcp_receive(pcb);
;;;702        if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
;;;703          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
;;;704          /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
;;;705          recv_flags |= TF_CLOSED;
;;;706        }
;;;707        break;
;;;708      default:
;;;709        break;
;;;710      }
;;;711      return ERR_OK;
;;;712    }
000070  e8bd81fc          POP      {r2-r8,pc}
                  |L4.116|
000074  bf00              NOP                            ;536
000076  bf00              NOP                            ;536
000078  48e1              LDR      r0,|L4.1024|
00007a  6a62              LDR      r2,[r4,#0x24]         ;536
00007c  6801              LDR      r1,[r0,#0]            ;536  ; seqno
00007e  a0ea              ADR      r0,|L4.1064|
000080  f7fffffe          BL       __2printf
000084  bf00              NOP                            ;536
000086  bf00              NOP                            ;536
000088  bf00              NOP                            ;538
00008a  bf00              NOP                            ;538
00008c  48dc              LDR      r0,|L4.1024|
00008e  6a62              LDR      r2,[r4,#0x24]         ;538
000090  6801              LDR      r1,[r0,#0]            ;538  ; seqno
000092  a0e5              ADR      r0,|L4.1064|
000094  f7fffffe          BL       __2printf
000098  bf00              NOP                            ;538
00009a  bf00              NOP                            ;538
00009c  2000              MOVS     r0,#0                 ;540
00009e  e7e7              B        |L4.112|
                  |L4.160|
0000a0  48d5              LDR      r0,|L4.1016|
0000a2  7800              LDRB     r0,[r0,#0]            ;544  ; flags
0000a4  f0100f02          TST      r0,#2                 ;544
0000a8  d012              BEQ      |L4.208|
0000aa  7c20              LDRB     r0,[r4,#0x10]         ;544
0000ac  2802              CMP      r0,#2                 ;544
0000ae  d00f              BEQ      |L4.208|
0000b0  7c20              LDRB     r0,[r4,#0x10]         ;544
0000b2  2803              CMP      r0,#3                 ;544
0000b4  d00c              BEQ      |L4.208|
0000b6  bf00              NOP                            ;546
0000b8  f8940022          LDRB     r0,[r4,#0x22]         ;546
0000bc  f0400002          ORR      r0,r0,#2              ;546
0000c0  f8840022          STRB     r0,[r4,#0x22]         ;546
0000c4  4620              MOV      r0,r4                 ;546
0000c6  f7fffffe          BL       tcp_output
0000ca  bf00              NOP                            ;546
0000cc  2000              MOVS     r0,#0                 ;547
0000ce  e7cf              B        |L4.112|
                  |L4.208|
0000d0  48e4              LDR      r0,|L4.1124|
0000d2  6800              LDR      r0,[r0,#0]            ;551  ; tcp_ticks
0000d4  6320              STR      r0,[r4,#0x30]         ;551
0000d6  2000              MOVS     r0,#0                 ;552
0000d8  f884009d          STRB     r0,[r4,#0x9d]         ;552
0000dc  4620              MOV      r0,r4                 ;554
0000de  f7fffffe          BL       tcp_parseopt
0000e2  7c20              LDRB     r0,[r4,#0x10]         ;557
0000e4  1e80              SUBS     r0,r0,#2              ;557
0000e6  2808              CMP      r0,#8                 ;557
0000e8  d270              BCS      |L4.460|
0000ea  e8dff000          TBB      [pc,r0]               ;557
0000ee  04ae              DCB      0x04,0xae
0000f0  f5f4f3f2          DCB      0xf5,0xf4,0xf3,0xf2
0000f4  f1f0              DCB      0xf1,0xf0
0000f6  bf00              NOP                            ;559
0000f8  bf00              NOP                            ;559
0000fa  6fa1              LDR      r1,[r4,#0x78]         ;559
0000fc  6909              LDR      r1,[r1,#0x10]         ;559
0000fe  6848              LDR      r0,[r1,#4]            ;559
000100  f7fffffe          BL       ntohl
000104  4606              MOV      r6,r0                 ;559
000106  4603              MOV      r3,r0                 ;559
000108  48bc              LDR      r0,|L4.1020|
00010a  6da2              LDR      r2,[r4,#0x58]         ;559
00010c  6801              LDR      r1,[r0,#0]            ;559  ; ackno
00010e  a0d6              ADR      r0,|L4.1128|
000110  f7fffffe          BL       __2printf
000114  bf00              NOP                            ;559
000116  bf00              NOP                            ;559
000118  48b7              LDR      r0,|L4.1016|
00011a  7800              LDRB     r0,[r0,#0]            ;562  ; flags
00011c  f0100f10          TST      r0,#0x10              ;562
000120  d077              BEQ      |L4.530|
000122  48b5              LDR      r0,|L4.1016|
000124  7800              LDRB     r0,[r0,#0]            ;562  ; flags
000126  f0100f02          TST      r0,#2                 ;562
00012a  d072              BEQ      |L4.530|
00012c  6fa1              LDR      r1,[r4,#0x78]         ;563
00012e  6909              LDR      r1,[r1,#0x10]         ;563
000130  6848              LDR      r0,[r1,#4]            ;563
000132  f7fffffe          BL       ntohl
000136  1c40              ADDS     r0,r0,#1              ;563
000138  49b0              LDR      r1,|L4.1020|
00013a  6809              LDR      r1,[r1,#0]            ;563  ; ackno
00013c  4288              CMP      r0,r1                 ;563
00013e  d168              BNE      |L4.530|
000140  f8b4006e          LDRH     r0,[r4,#0x6e]         ;564
000144  1c40              ADDS     r0,r0,#1              ;564
000146  f8a4006e          STRH     r0,[r4,#0x6e]         ;564
00014a  48ad              LDR      r0,|L4.1024|
00014c  6800              LDR      r0,[r0,#0]            ;565  ; seqno
00014e  1c40              ADDS     r0,r0,#1              ;565
000150  6260              STR      r0,[r4,#0x24]         ;565
000152  6a60              LDR      r0,[r4,#0x24]         ;566
000154  62e0              STR      r0,[r4,#0x2c]         ;566
000156  48a9              LDR      r0,|L4.1020|
000158  6800              LDR      r0,[r0,#0]            ;567  ; ackno
00015a  64e0              STR      r0,[r4,#0x4c]         ;567
00015c  48d0              LDR      r0,|L4.1184|
00015e  6800              LDR      r0,[r0,#0]            ;568  ; tcphdr
000160  89c0              LDRH     r0,[r0,#0xe]          ;568
000162  f8a4005c          STRH     r0,[r4,#0x5c]         ;568
000166  48a6              LDR      r0,|L4.1024|
000168  6800              LDR      r0,[r0,#0]            ;569  ; seqno
00016a  1e40              SUBS     r0,r0,#1              ;569
00016c  6620              STR      r0,[r4,#0x60]         ;569
00016e  2004              MOVS     r0,#4                 ;570
000170  7420              STRB     r0,[r4,#0x10]         ;570
000172  8f20              LDRH     r0,[r4,#0x38]         ;573
000174  1d21              ADDS     r1,r4,#4              ;573
000176  f7fffffe          BL       tcp_eff_send_mss
00017a  8720              STRH     r0,[r4,#0x38]         ;573
00017c  8f20              LDRH     r0,[r4,#0x38]         ;578
00017e  eb000080          ADD      r0,r0,r0,LSL #2       ;578
000182  0440              LSLS     r0,r0,#17             ;578
000184  0c00              LSRS     r0,r0,#16             ;578
000186  f8a40054          STRH     r0,[r4,#0x54]         ;578
00018a  f8b40052          LDRH     r0,[r4,#0x52]         ;580
00018e  2801              CMP      r0,#1                 ;580
000190  d102              BNE      |L4.408|
000192  8f20              LDRH     r0,[r4,#0x38]         ;580
000194  0040              LSLS     r0,r0,#1              ;580
000196  e000              B        |L4.410|
                  |L4.408|
000198  8f20              LDRH     r0,[r4,#0x38]         ;580
                  |L4.410|
00019a  f8240f52          STRH     r0,[r4,#0x52]!        ;580
00019e  8be0              LDRH     r0,[r4,#0x1e]         ;582
0001a0  1e40              SUBS     r0,r0,#1              ;582
0001a2  83e0              STRH     r0,[r4,#0x1e]         ;582
0001a4  f1a40452          SUB      r4,r4,#0x52           ;582
0001a8  bf00              NOP                            ;583
0001aa  bf00              NOP                            ;583
0001ac  f8b41070          LDRH     r1,[r4,#0x70]         ;583
0001b0  a0bc              ADR      r0,|L4.1188|
0001b2  f7fffffe          BL       __2printf
0001b6  bf00              NOP                            ;583
0001b8  bf00              NOP                            ;583
0001ba  6fa5              LDR      r5,[r4,#0x78]         ;584
0001bc  6828              LDR      r0,[r5,#0]            ;585
0001be  67a0              STR      r0,[r4,#0x78]         ;585
0001c0  6fa0              LDR      r0,[r4,#0x78]         ;589
0001c2  b920              CBNZ     r0,|L4.462|
0001c4  f04f30ff          MOV      r0,#0xffffffff        ;590
0001c8  86e0              STRH     r0,[r4,#0x36]         ;590
0001ca  e004              B        |L4.470|
                  |L4.460|
0001cc  e2be              B        |L4.1868|
                  |L4.462|
0001ce  2000              MOVS     r0,#0                 ;592
0001d0  86e0              STRH     r0,[r4,#0x36]         ;592
0001d2  f884004a          STRB     r0,[r4,#0x4a]         ;593
                  |L4.470|
0001d6  4628              MOV      r0,r5                 ;596
0001d8  f7fffffe          BL       tcp_seg_free
0001dc  bf00              NOP                            ;600
0001de  f8d40088          LDR      r0,[r4,#0x88]         ;600
0001e2  b138              CBZ      r0,|L4.500|
0001e4  2200              MOVS     r2,#0                 ;600
0001e6  4621              MOV      r1,r4                 ;600
0001e8  f8d43088          LDR      r3,[r4,#0x88]         ;600
0001ec  6960              LDR      r0,[r4,#0x14]         ;600
0001ee  4798              BLX      r3                    ;600
0001f0  4680              MOV      r8,r0                 ;600
0001f2  e001              B        |L4.504|
                  |L4.500|
0001f4  f04f0800          MOV      r8,#0                 ;600
                  |L4.504|
0001f8  bf00              NOP                            ;600
0001fa  bf00              NOP                            ;601
0001fc  f8940022          LDRB     r0,[r4,#0x22]         ;601
000200  f0400002          ORR      r0,r0,#2              ;601
000204  f8840022          STRB     r0,[r4,#0x22]         ;601
000208  4620              MOV      r0,r4                 ;601
00020a  f7fffffe          BL       tcp_output
00020e  e01b              B        |L4.584|
000210  e7ff              B        |L4.530|
                  |L4.530|
000212  4879              LDR      r0,|L4.1016|
000214  7800              LDRB     r0,[r0,#0]            ;604  ; flags
000216  f0100f10          TST      r0,#0x10              ;604
00021a  d015              BEQ      |L4.584|
00021c  48a0              LDR      r0,|L4.1184|
00021e  6800              LDR      r0,[r0,#0]            ;606  ; tcphdr
000220  8803              LDRH     r3,[r0,#0]            ;606
000222  489f              LDR      r0,|L4.1184|
000224  6800              LDR      r0,[r0,#0]            ;606  ; tcphdr
000226  8842              LDRH     r2,[r0,#2]            ;606
000228  4875              LDR      r0,|L4.1024|
00022a  e9cd2300          STRD     r2,r3,[sp,#0]         ;606
00022e  6800              LDR      r0,[r0,#0]            ;606  ; seqno
000230  4aa6              LDR      r2,|L4.1228|
000232  8812              LDRH     r2,[r2,#0]            ;606  ; tcplen
000234  1881              ADDS     r1,r0,r2              ;606
000236  48a6              LDR      r0,|L4.1232|
000238  6803              LDR      r3,[r0,#0]            ;606  ; iphdr
00023a  330c              ADDS     r3,r3,#0xc            ;606
00023c  6802              LDR      r2,[r0,#0]            ;606  ; iphdr
00023e  3210              ADDS     r2,r2,#0x10           ;606
000240  486e              LDR      r0,|L4.1020|
000242  6800              LDR      r0,[r0,#0]            ;606  ; ackno
000244  f7fffffe          BL       tcp_rst
                  |L4.584|
000248  e281              B        |L4.1870|
00024a  486b              LDR      r0,|L4.1016|
00024c  7800              LDRB     r0,[r0,#0]            ;611  ; flags
00024e  f0100f10          TST      r0,#0x10              ;611
000252  d070              BEQ      |L4.822|
000254  6ce0              LDR      r0,[r4,#0x4c]         ;613
000256  f1000001          ADD      r0,r0,#1              ;613
00025a  4968              LDR      r1,|L4.1020|
00025c  6809              LDR      r1,[r1,#0]            ;613  ; ackno
00025e  1a08              SUBS     r0,r1,r0              ;613
000260  d451              BMI      |L4.774|
000262  4966              LDR      r1,|L4.1020|
000264  6da0              LDR      r0,[r4,#0x58]         ;613
000266  6809              LDR      r1,[r1,#0]            ;613  ; ackno
000268  1a08              SUBS     r0,r1,r0              ;613
00026a  2800              CMP      r0,#0                 ;613
00026c  dc4b              BGT      |L4.774|
00026e  2004              MOVS     r0,#4                 ;615
000270  7420              STRB     r0,[r4,#0x10]         ;615
000272  bf00              NOP                            ;616
000274  bf00              NOP                            ;616
000276  4897              LDR      r0,|L4.1236|
000278  6900              LDR      r0,[r0,#0x10]         ;616  ; inseg
00027a  8842              LDRH     r2,[r0,#2]            ;616
00027c  4895              LDR      r0,|L4.1236|
00027e  6900              LDR      r0,[r0,#0x10]         ;616  ; inseg
000280  8801              LDRH     r1,[r0,#0]            ;616
000282  a095              ADR      r0,|L4.1240|
000284  f7fffffe          BL       __2printf
000288  bf00              NOP                            ;616
00028a  bf00              NOP                            ;616
00028c  bf00              NOP                            ;621
00028e  69e0              LDR      r0,[r4,#0x1c]         ;621
000290  b130              CBZ      r0,|L4.672|
000292  2200              MOVS     r2,#0                 ;621
000294  4621              MOV      r1,r4                 ;621
000296  69e3              LDR      r3,[r4,#0x1c]         ;621
000298  6960              LDR      r0,[r4,#0x14]         ;621
00029a  4798              BLX      r3                    ;621
00029c  4680              MOV      r8,r0                 ;621
00029e  e001              B        |L4.676|
                  |L4.672|
0002a0  f04f0800          MOV      r8,#0                 ;621
                  |L4.676|
0002a4  bf00              NOP                            ;621
0002a6  f1b80f00          CMP      r8,#0                 ;622
0002aa  d006              BEQ      |L4.698|
0002ac  2101              MOVS     r1,#1                 ;625
0002ae  4620              MOV      r0,r4                 ;625
0002b0  f7fffffe          BL       tcp_abandon
0002b4  f06f0004          MVN      r0,#4                 ;626
0002b8  e6da              B        |L4.112|
                  |L4.698|
0002ba  f8b46052          LDRH     r6,[r4,#0x52]         ;628
0002be  4620              MOV      r0,r4                 ;631
0002c0  f7fffffe          BL       tcp_receive
0002c4  2e01              CMP      r6,#1                 ;633
0002c6  d108              BNE      |L4.730|
0002c8  8f20              LDRH     r0,[r4,#0x38]         ;633
0002ca  0040              LSLS     r0,r0,#1              ;633
0002cc  e006              B        |L4.732|
0002ce  e21b              B        |L4.1800|
0002d0  e1c7              B        |L4.1634|
0002d2  e03f              B        |L4.852|
0002d4  e16c              B        |L4.1456|
0002d6  e054              B        |L4.898|
0002d8  e03d              B        |L4.854|
                  |L4.730|
0002da  8f20              LDRH     r0,[r4,#0x38]         ;633
                  |L4.732|
0002dc  f8a40052          STRH     r0,[r4,#0x52]         ;633
0002e0  4850              LDR      r0,|L4.1060|
0002e2  7800              LDRB     r0,[r0,#0]            ;635  ; recv_flags
0002e4  f0100f20          TST      r0,#0x20              ;635
0002e8  d00c              BEQ      |L4.772|
0002ea  bf00              NOP                            ;636
0002ec  f8940022          LDRB     r0,[r4,#0x22]         ;636
0002f0  f0400002          ORR      r0,r0,#2              ;636
0002f4  f8840022          STRB     r0,[r4,#0x22]         ;636
0002f8  4620              MOV      r0,r4                 ;636
0002fa  f7fffffe          BL       tcp_output
0002fe  bf00              NOP                            ;636
000300  2007              MOVS     r0,#7                 ;637
000302  7420              STRB     r0,[r4,#0x10]         ;637
                  |L4.772|
000304  e025              B        |L4.850|
                  |L4.774|
000306  4866              LDR      r0,|L4.1184|
000308  6800              LDR      r0,[r0,#0]            ;643  ; tcphdr
00030a  8803              LDRH     r3,[r0,#0]            ;643
00030c  4864              LDR      r0,|L4.1184|
00030e  6800              LDR      r0,[r0,#0]            ;643  ; tcphdr
000310  8842              LDRH     r2,[r0,#2]            ;643
000312  483b              LDR      r0,|L4.1024|
000314  e9cd2300          STRD     r2,r3,[sp,#0]         ;643
000318  6800              LDR      r0,[r0,#0]            ;643  ; seqno
00031a  4a6c              LDR      r2,|L4.1228|
00031c  8812              LDRH     r2,[r2,#0]            ;643  ; tcplen
00031e  1881              ADDS     r1,r0,r2              ;643
000320  486b              LDR      r0,|L4.1232|
000322  6803              LDR      r3,[r0,#0]            ;643  ; iphdr
000324  330c              ADDS     r3,r3,#0xc            ;643
000326  6802              LDR      r2,[r0,#0]            ;643  ; iphdr
000328  3210              ADDS     r2,r2,#0x10           ;643
00032a  4834              LDR      r0,|L4.1020|
00032c  6800              LDR      r0,[r0,#0]            ;643  ; ackno
00032e  f7fffffe          BL       tcp_rst
000332  e00e              B        |L4.850|
000334  e7ff              B        |L4.822|
                  |L4.822|
000336  4830              LDR      r0,|L4.1016|
000338  7800              LDRB     r0,[r0,#0]            ;646  ; flags
00033a  f0100f02          TST      r0,#2                 ;646
00033e  d008              BEQ      |L4.850|
000340  6a60              LDR      r0,[r4,#0x24]         ;646
000342  1e40              SUBS     r0,r0,#1              ;646
000344  492e              LDR      r1,|L4.1024|
000346  6809              LDR      r1,[r1,#0]            ;646  ; seqno
000348  4288              CMP      r0,r1                 ;646
00034a  d102              BNE      |L4.850|
00034c  4620              MOV      r0,r4                 ;648
00034e  f7fffffe          BL       tcp_rexmit
                  |L4.850|
000352  e1fc              B        |L4.1870|
                  |L4.852|
000354  bf00              NOP                            ;653
                  |L4.854|
000356  4620              MOV      r0,r4                 ;654
000358  f7fffffe          BL       tcp_receive
00035c  4831              LDR      r0,|L4.1060|
00035e  7800              LDRB     r0,[r0,#0]            ;655  ; recv_flags
000360  f0100f20          TST      r0,#0x20              ;655
000364  d00c              BEQ      |L4.896|
000366  bf00              NOP                            ;656
000368  f8940022          LDRB     r0,[r4,#0x22]         ;656
00036c  f0400002          ORR      r0,r0,#2              ;656
000370  f8840022          STRB     r0,[r4,#0x22]         ;656
000374  4620              MOV      r0,r4                 ;656
000376  f7fffffe          BL       tcp_output
00037a  bf00              NOP                            ;656
00037c  2007              MOVS     r0,#7                 ;657
00037e  7420              STRB     r0,[r4,#0x10]         ;657
                  |L4.896|
000380  e1e5              B        |L4.1870|
                  |L4.898|
000382  4620              MOV      r0,r4                 ;661
000384  f7fffffe          BL       tcp_receive
000388  4826              LDR      r0,|L4.1060|
00038a  7800              LDRB     r0,[r0,#0]            ;662  ; recv_flags
00038c  f0100f20          TST      r0,#0x20              ;662
000390  d02f              BEQ      |L4.1010|
000392  4819              LDR      r0,|L4.1016|
000394  7800              LDRB     r0,[r0,#0]            ;663  ; flags
000396  f0100f10          TST      r0,#0x10              ;663
00039a  d02b              BEQ      |L4.1012|
00039c  4917              LDR      r1,|L4.1020|
00039e  6da0              LDR      r0,[r4,#0x58]         ;663
0003a0  6809              LDR      r1,[r1,#0]            ;663  ; ackno
0003a2  4288              CMP      r0,r1                 ;663
0003a4  d126              BNE      |L4.1012|
0003a6  bf00              NOP                            ;664
0003a8  bf00              NOP                            ;664
0003aa  484a              LDR      r0,|L4.1236|
0003ac  6900              LDR      r0,[r0,#0x10]         ;664  ; inseg
0003ae  8842              LDRH     r2,[r0,#2]            ;664
0003b0  4848              LDR      r0,|L4.1236|
0003b2  6900              LDR      r0,[r0,#0x10]         ;664  ; inseg
0003b4  8801              LDRH     r1,[r0,#0]            ;664
0003b6  a052              ADR      r0,|L4.1280|
0003b8  f7fffffe          BL       __2printf
0003bc  bf00              NOP                            ;664
0003be  bf00              NOP                            ;664
0003c0  bf00              NOP                            ;666
0003c2  f8940022          LDRB     r0,[r4,#0x22]         ;666
0003c6  f0400002          ORR      r0,r0,#2              ;666
0003ca  f8840022          STRB     r0,[r4,#0x22]         ;666
0003ce  4620              MOV      r0,r4                 ;666
0003d0  f7fffffe          BL       tcp_output
0003d4  bf00              NOP                            ;666
0003d6  4620              MOV      r0,r4                 ;667
0003d8  f7fffffe          BL       tcp_pcb_purge
0003dc  bf00              NOP                            ;668
0003de  4851              LDR      r0,|L4.1316|
0003e0  6800              LDR      r0,[r0,#0]            ;668  ; tcp_active_pcbs
0003e2  42a0              CMP      r0,r4                 ;668
0003e4  d107              BNE      |L4.1014|
0003e6  484f              LDR      r0,|L4.1316|
0003e8  6800              LDR      r0,[r0,#0]            ;668  ; tcp_active_pcbs
0003ea  68c0              LDR      r0,[r0,#0xc]          ;668
0003ec  494d              LDR      r1,|L4.1316|
0003ee  6008              STR      r0,[r1,#0]            ;668  ; tcp_active_pcbs
0003f0  e0b7              B        |L4.1378|
                  |L4.1010|
0003f2  e0d0              B        |L4.1430|
                  |L4.1012|
0003f4  e0c1              B        |L4.1402|
                  |L4.1014|
0003f6  e097              B        |L4.1320|
                  |L4.1016|
                          DCD      flags
                  |L4.1020|
                          DCD      ackno
                  |L4.1024|
                          DCD      seqno
                  |L4.1028|
000404  7463705f          DCB      "tcp_process: Connection RESET\n",0
000408  70726f63
00040c  6573733a
000410  20436f6e
000414  6e656374
000418  696f6e20
00041c  52455345
000420  540a00  
000423  00                DCB      0
                  |L4.1060|
                          DCD      recv_flags
                  |L4.1064|
000428  7463705f          DCB      "tcp_process: unacceptable reset seqno %8ld rcv_nxt %8ld"
00042c  70726f63
000430  6573733a
000434  20756e61
000438  63636570
00043c  7461626c
000440  65207265
000444  73657420
000448  7365716e
00044c  6f202538
000450  6c642072
000454  63765f6e
000458  78742025
00045c  386c64  
00045f  0a00              DCB      "\n",0
000461  00                DCB      0
000462  00                DCB      0
000463  00                DCB      0
                  |L4.1124|
                          DCD      tcp_ticks
                  |L4.1128|
000468  53594e2d          DCB      "SYN-SENT: ackno %8ld pcb->snd_nxt %8ld unacked %8ld\n",0
00046c  53454e54
000470  3a206163
000474  6b6e6f20
000478  25386c64
00047c  20706362
000480  2d3e736e
000484  645f6e78
000488  74202538
00048c  6c642075
000490  6e61636b
000494  65642025
000498  386c640a
00049c  00      
00049d  00                DCB      0
00049e  00                DCB      0
00049f  00                DCB      0
                  |L4.1184|
                          DCD      tcphdr
                  |L4.1188|
0004a4  7463705f          DCB      "tcp_process: SYN-SENT --queuelen %4d\n",0
0004a8  70726f63
0004ac  6573733a
0004b0  2053594e
0004b4  2d53454e
0004b8  54202d2d
0004bc  71756575
0004c0  656c656e
0004c4  20253464
0004c8  0a00    
0004ca  00                DCB      0
0004cb  00                DCB      0
                  |L4.1228|
                          DCD      tcplen
                  |L4.1232|
                          DCD      iphdr
                  |L4.1236|
                          DCD      inseg
                  |L4.1240|
0004d8  54435020          DCB      "TCP connection established %4d -> %4d.\n",0
0004dc  636f6e6e
0004e0  65637469
0004e4  6f6e2065
0004e8  73746162
0004ec  6c697368
0004f0  65642025
0004f4  3464202d
0004f8  3e202534
0004fc  642e0a00
                  |L4.1280|
000500  54435020          DCB      "TCP connection closed %4d -> %4d.\n",0
000504  636f6e6e
000508  65637469
00050c  6f6e2063
000510  6c6f7365
000514  64202534
000518  64202d3e
00051c  20253464
000520  2e0a00  
000523  00                DCB      0
                  |L4.1316|
                          DCD      tcp_active_pcbs
                  |L4.1320|
000528  488a              LDR      r0,|L4.1876|
00052a  6800              LDR      r0,[r0,#0]            ;668  ; tcp_active_pcbs
00052c  498a              LDR      r1,|L4.1880|
00052e  6008              STR      r0,[r1,#0]            ;668  ; tcp_tmp_pcb
000530  e012              B        |L4.1368|
                  |L4.1330|
000532  4889              LDR      r0,|L4.1880|
000534  6800              LDR      r0,[r0,#0]            ;668  ; tcp_tmp_pcb
000536  68c0              LDR      r0,[r0,#0xc]          ;668
000538  b148              CBZ      r0,|L4.1358|
00053a  4887              LDR      r0,|L4.1880|
00053c  6800              LDR      r0,[r0,#0]            ;668  ; tcp_tmp_pcb
00053e  68c0              LDR      r0,[r0,#0xc]          ;668
000540  42a0              CMP      r0,r4                 ;668
000542  d104              BNE      |L4.1358|
000544  4984              LDR      r1,|L4.1880|
000546  68e0              LDR      r0,[r4,#0xc]          ;668
000548  6809              LDR      r1,[r1,#0]            ;668  ; tcp_tmp_pcb
00054a  60c8              STR      r0,[r1,#0xc]          ;668
00054c  e008              B        |L4.1376|
                  |L4.1358|
00054e  4882              LDR      r0,|L4.1880|
000550  6800              LDR      r0,[r0,#0]            ;668  ; tcp_tmp_pcb
000552  68c0              LDR      r0,[r0,#0xc]          ;668
000554  4980              LDR      r1,|L4.1880|
000556  6008              STR      r0,[r1,#0]            ;668  ; tcp_tmp_pcb
                  |L4.1368|
000558  487f              LDR      r0,|L4.1880|
00055a  6800              LDR      r0,[r0,#0]            ;668  ; tcp_tmp_pcb
00055c  2800              CMP      r0,#0                 ;668
00055e  d1e8              BNE      |L4.1330|
                  |L4.1376|
000560  bf00              NOP                            ;668
                  |L4.1378|
000562  2000              MOVS     r0,#0                 ;668
000564  60e0              STR      r0,[r4,#0xc]          ;668
000566  bf00              NOP                            ;668
000568  200a              MOVS     r0,#0xa               ;669
00056a  7420              STRB     r0,[r4,#0x10]         ;669
00056c  bf00              NOP                            ;670
00056e  487b              LDR      r0,|L4.1884|
000570  6800              LDR      r0,[r0,#0]            ;670  ; tcp_tw_pcbs
000572  60e0              STR      r0,[r4,#0xc]          ;670
000574  4879              LDR      r0,|L4.1884|
000576  6004              STR      r4,[r0,#0]            ;670  ; tcp_tw_pcbs
000578  e019              B        |L4.1454|
                  |L4.1402|
00057a  bf00              NOP                            ;672
00057c  f8940022          LDRB     r0,[r4,#0x22]         ;672
000580  f0400002          ORR      r0,r0,#2              ;672
000584  f8840022          STRB     r0,[r4,#0x22]         ;672
000588  4620              MOV      r0,r4                 ;672
00058a  f7fffffe          BL       tcp_output
00058e  bf00              NOP                            ;672
000590  2008              MOVS     r0,#8                 ;673
000592  7420              STRB     r0,[r4,#0x10]         ;673
000594  e00b              B        |L4.1454|
                  |L4.1430|
000596  4872              LDR      r0,|L4.1888|
000598  7800              LDRB     r0,[r0,#0]            ;675  ; flags
00059a  f0100f10          TST      r0,#0x10              ;675
00059e  d006              BEQ      |L4.1454|
0005a0  4970              LDR      r1,|L4.1892|
0005a2  6da0              LDR      r0,[r4,#0x58]         ;675
0005a4  6809              LDR      r1,[r1,#0]            ;675  ; ackno
0005a6  4288              CMP      r0,r1                 ;675
0005a8  d101              BNE      |L4.1454|
0005aa  2006              MOVS     r0,#6                 ;676
0005ac  7420              STRB     r0,[r4,#0x10]         ;676
                  |L4.1454|
0005ae  e0ce              B        |L4.1870|
                  |L4.1456|
0005b0  4620              MOV      r0,r4                 ;680
0005b2  f7fffffe          BL       tcp_receive
0005b6  486c              LDR      r0,|L4.1896|
0005b8  7800              LDRB     r0,[r0,#0]            ;681  ; recv_flags
0005ba  f0100f20          TST      r0,#0x20              ;681
0005be  d04f              BEQ      |L4.1632|
0005c0  bf00              NOP                            ;682
0005c2  bf00              NOP                            ;682
0005c4  4869              LDR      r0,|L4.1900|
0005c6  6900              LDR      r0,[r0,#0x10]         ;682  ; inseg
0005c8  8842              LDRH     r2,[r0,#2]            ;682
0005ca  4868              LDR      r0,|L4.1900|
0005cc  6900              LDR      r0,[r0,#0x10]         ;682  ; inseg
0005ce  8801              LDRH     r1,[r0,#0]            ;682
0005d0  f2af00d4          ADR      r0,|L4.1280|
0005d4  f7fffffe          BL       __2printf
0005d8  bf00              NOP                            ;682
0005da  bf00              NOP                            ;682
0005dc  bf00              NOP                            ;683
0005de  f8940022          LDRB     r0,[r4,#0x22]         ;683
0005e2  f0400002          ORR      r0,r0,#2              ;683
0005e6  f8840022          STRB     r0,[r4,#0x22]         ;683
0005ea  4620              MOV      r0,r4                 ;683
0005ec  f7fffffe          BL       tcp_output
0005f0  bf00              NOP                            ;683
0005f2  4620              MOV      r0,r4                 ;684
0005f4  f7fffffe          BL       tcp_pcb_purge
0005f8  bf00              NOP                            ;685
0005fa  4856              LDR      r0,|L4.1876|
0005fc  6800              LDR      r0,[r0,#0]            ;685  ; tcp_active_pcbs
0005fe  42a0              CMP      r0,r4                 ;685
000600  d105              BNE      |L4.1550|
000602  4854              LDR      r0,|L4.1876|
000604  6800              LDR      r0,[r0,#0]            ;685  ; tcp_active_pcbs
000606  68c0              LDR      r0,[r0,#0xc]          ;685
000608  4952              LDR      r1,|L4.1876|
00060a  6008              STR      r0,[r1,#0]            ;685  ; tcp_active_pcbs
00060c  e01c              B        |L4.1608|
                  |L4.1550|
00060e  4851              LDR      r0,|L4.1876|
000610  6800              LDR      r0,[r0,#0]            ;685  ; tcp_active_pcbs
000612  4951              LDR      r1,|L4.1880|
000614  6008              STR      r0,[r1,#0]            ;685  ; tcp_tmp_pcb
000616  e012              B        |L4.1598|
                  |L4.1560|
000618  484f              LDR      r0,|L4.1880|
00061a  6800              LDR      r0,[r0,#0]            ;685  ; tcp_tmp_pcb
00061c  68c0              LDR      r0,[r0,#0xc]          ;685
00061e  b148              CBZ      r0,|L4.1588|
000620  484d              LDR      r0,|L4.1880|
000622  6800              LDR      r0,[r0,#0]            ;685  ; tcp_tmp_pcb
000624  68c0              LDR      r0,[r0,#0xc]          ;685
000626  42a0              CMP      r0,r4                 ;685
000628  d104              BNE      |L4.1588|
00062a  494b              LDR      r1,|L4.1880|
00062c  68e0              LDR      r0,[r4,#0xc]          ;685
00062e  6809              LDR      r1,[r1,#0]            ;685  ; tcp_tmp_pcb
000630  60c8              STR      r0,[r1,#0xc]          ;685
000632  e008              B        |L4.1606|
                  |L4.1588|
000634  4848              LDR      r0,|L4.1880|
000636  6800              LDR      r0,[r0,#0]            ;685  ; tcp_tmp_pcb
000638  68c0              LDR      r0,[r0,#0xc]          ;685
00063a  4947              LDR      r1,|L4.1880|
00063c  6008              STR      r0,[r1,#0]            ;685  ; tcp_tmp_pcb
                  |L4.1598|
00063e  4846              LDR      r0,|L4.1880|
000640  6800              LDR      r0,[r0,#0]            ;685  ; tcp_tmp_pcb
000642  2800              CMP      r0,#0                 ;685
000644  d1e8              BNE      |L4.1560|
                  |L4.1606|
000646  bf00              NOP                            ;685
                  |L4.1608|
000648  2000              MOVS     r0,#0                 ;685
00064a  60e0              STR      r0,[r4,#0xc]          ;685
00064c  bf00              NOP                            ;685
00064e  200a              MOVS     r0,#0xa               ;686
000650  7420              STRB     r0,[r4,#0x10]         ;686
000652  bf00              NOP                            ;687
000654  4841              LDR      r0,|L4.1884|
000656  6800              LDR      r0,[r0,#0]            ;687  ; tcp_tw_pcbs
000658  60e0              STR      r0,[r4,#0xc]          ;687
00065a  4840              LDR      r0,|L4.1884|
00065c  6004              STR      r4,[r0,#0]            ;687  ; tcp_tw_pcbs
00065e  bf00              NOP                            ;687
                  |L4.1632|
000660  e075              B        |L4.1870|
                  |L4.1634|
000662  4620              MOV      r0,r4                 ;691
000664  f7fffffe          BL       tcp_receive
000668  483d              LDR      r0,|L4.1888|
00066a  7800              LDRB     r0,[r0,#0]            ;692  ; flags
00066c  f0100f10          TST      r0,#0x10              ;692
000670  d049              BEQ      |L4.1798|
000672  493c              LDR      r1,|L4.1892|
000674  6da0              LDR      r0,[r4,#0x58]         ;692
000676  6809              LDR      r1,[r1,#0]            ;692  ; ackno
000678  4288              CMP      r0,r1                 ;692
00067a  d144              BNE      |L4.1798|
00067c  bf00              NOP                            ;693
00067e  bf00              NOP                            ;693
000680  483a              LDR      r0,|L4.1900|
000682  6900              LDR      r0,[r0,#0x10]         ;693  ; inseg
000684  8842              LDRH     r2,[r0,#2]            ;693
000686  4839              LDR      r0,|L4.1900|
000688  6900              LDR      r0,[r0,#0x10]         ;693  ; inseg
00068a  8801              LDRH     r1,[r0,#0]            ;693
00068c  f2af1090          ADR      r0,|L4.1280|
000690  f7fffffe          BL       __2printf
000694  bf00              NOP                            ;693
000696  bf00              NOP                            ;693
000698  4620              MOV      r0,r4                 ;694
00069a  f7fffffe          BL       tcp_pcb_purge
00069e  bf00              NOP                            ;695
0006a0  482c              LDR      r0,|L4.1876|
0006a2  6800              LDR      r0,[r0,#0]            ;695  ; tcp_active_pcbs
0006a4  42a0              CMP      r0,r4                 ;695
0006a6  d105              BNE      |L4.1716|
0006a8  482a              LDR      r0,|L4.1876|
0006aa  6800              LDR      r0,[r0,#0]            ;695  ; tcp_active_pcbs
0006ac  68c0              LDR      r0,[r0,#0xc]          ;695
0006ae  4929              LDR      r1,|L4.1876|
0006b0  6008              STR      r0,[r1,#0]            ;695  ; tcp_active_pcbs
0006b2  e01c              B        |L4.1774|
                  |L4.1716|
0006b4  4827              LDR      r0,|L4.1876|
0006b6  6800              LDR      r0,[r0,#0]            ;695  ; tcp_active_pcbs
0006b8  4927              LDR      r1,|L4.1880|
0006ba  6008              STR      r0,[r1,#0]            ;695  ; tcp_tmp_pcb
0006bc  e012              B        |L4.1764|
                  |L4.1726|
0006be  4826              LDR      r0,|L4.1880|
0006c0  6800              LDR      r0,[r0,#0]            ;695  ; tcp_tmp_pcb
0006c2  68c0              LDR      r0,[r0,#0xc]          ;695
0006c4  b148              CBZ      r0,|L4.1754|
0006c6  4824              LDR      r0,|L4.1880|
0006c8  6800              LDR      r0,[r0,#0]            ;695  ; tcp_tmp_pcb
0006ca  68c0              LDR      r0,[r0,#0xc]          ;695
0006cc  42a0              CMP      r0,r4                 ;695
0006ce  d104              BNE      |L4.1754|
0006d0  4921              LDR      r1,|L4.1880|
0006d2  68e0              LDR      r0,[r4,#0xc]          ;695
0006d4  6809              LDR      r1,[r1,#0]            ;695  ; tcp_tmp_pcb
0006d6  60c8              STR      r0,[r1,#0xc]          ;695
0006d8  e008              B        |L4.1772|
                  |L4.1754|
0006da  481f              LDR      r0,|L4.1880|
0006dc  6800              LDR      r0,[r0,#0]            ;695  ; tcp_tmp_pcb
0006de  68c0              LDR      r0,[r0,#0xc]          ;695
0006e0  491d              LDR      r1,|L4.1880|
0006e2  6008              STR      r0,[r1,#0]            ;695  ; tcp_tmp_pcb
                  |L4.1764|
0006e4  481c              LDR      r0,|L4.1880|
0006e6  6800              LDR      r0,[r0,#0]            ;695  ; tcp_tmp_pcb
0006e8  2800              CMP      r0,#0                 ;695
0006ea  d1e8              BNE      |L4.1726|
                  |L4.1772|
0006ec  bf00              NOP                            ;695
                  |L4.1774|
0006ee  2000              MOVS     r0,#0                 ;695
0006f0  60e0              STR      r0,[r4,#0xc]          ;695
0006f2  bf00              NOP                            ;695
0006f4  200a              MOVS     r0,#0xa               ;696
0006f6  7420              STRB     r0,[r4,#0x10]         ;696
0006f8  bf00              NOP                            ;697
0006fa  4818              LDR      r0,|L4.1884|
0006fc  6800              LDR      r0,[r0,#0]            ;697  ; tcp_tw_pcbs
0006fe  60e0              STR      r0,[r4,#0xc]          ;697
000700  4816              LDR      r0,|L4.1884|
000702  6004              STR      r4,[r0,#0]            ;697  ; tcp_tw_pcbs
000704  bf00              NOP                            ;697
                  |L4.1798|
000706  e022              B        |L4.1870|
                  |L4.1800|
000708  4620              MOV      r0,r4                 ;701
00070a  f7fffffe          BL       tcp_receive
00070e  4814              LDR      r0,|L4.1888|
000710  7800              LDRB     r0,[r0,#0]            ;702  ; flags
000712  f0100f10          TST      r0,#0x10              ;702
000716  d018              BEQ      |L4.1866|
000718  4912              LDR      r1,|L4.1892|
00071a  6da0              LDR      r0,[r4,#0x58]         ;702
00071c  6809              LDR      r1,[r1,#0]            ;702  ; ackno
00071e  4288              CMP      r0,r1                 ;702
000720  d113              BNE      |L4.1866|
000722  bf00              NOP                            ;703
000724  bf00              NOP                            ;703
000726  4811              LDR      r0,|L4.1900|
000728  6900              LDR      r0,[r0,#0x10]         ;703  ; inseg
00072a  8842              LDRH     r2,[r0,#2]            ;703
00072c  480f              LDR      r0,|L4.1900|
00072e  6900              LDR      r0,[r0,#0x10]         ;703  ; inseg
000730  8801              LDRH     r1,[r0,#0]            ;703
000732  f2af2034          ADR      r0,|L4.1280|
000736  f7fffffe          BL       __2printf
00073a  bf00              NOP                            ;703
00073c  bf00              NOP                            ;703
00073e  480a              LDR      r0,|L4.1896|
000740  7800              LDRB     r0,[r0,#0]            ;705  ; recv_flags
000742  f0400010          ORR      r0,r0,#0x10           ;705
000746  4908              LDR      r1,|L4.1896|
000748  7008              STRB     r0,[r1,#0]            ;705
                  |L4.1866|
00074a  e000              B        |L4.1870|
                  |L4.1868|
00074c  bf00              NOP                            ;709
                  |L4.1870|
00074e  bf00              NOP                            ;609
000750  2000              MOVS     r0,#0                 ;711
000752  e48d              B        |L4.112|
;;;713    
                          ENDP

                  |L4.1876|
                          DCD      tcp_active_pcbs
                  |L4.1880|
                          DCD      tcp_tmp_pcb
                  |L4.1884|
                          DCD      tcp_tw_pcbs
                  |L4.1888|
                          DCD      flags
                  |L4.1892|
                          DCD      ackno
                  |L4.1896|
                          DCD      recv_flags
                  |L4.1900|
                          DCD      inseg

                          AREA ||i.tcp_receive||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_sizespec
                  tcp_receive PROC
;;;728    static u8_t
;;;729    tcp_receive(struct tcp_pcb *pcb)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;730    {
000004  4604              MOV      r4,r0
;;;731      struct tcp_seg *next;
;;;732    #if TCP_QUEUE_OOSEQ
;;;733      struct tcp_seg *prev, *cseg;
;;;734    #endif
;;;735      struct pbuf *p;
;;;736      s32_t off;
;;;737      s16_t m;
;;;738      u32_t right_wnd_edge;
;;;739      u16_t new_tot_len;
;;;740      u8_t accepted_inseq = 0;
000006  2000              MOVS     r0,#0
000008  9002              STR      r0,[sp,#8]
;;;741    
;;;742      if (flags & TCP_ACK) {
00000a  48ff              LDR      r0,|L5.1032|
00000c  7800              LDRB     r0,[r0,#0]  ; flags
00000e  f0100f10          TST      r0,#0x10
000012  d07e              BEQ      |L5.274|
;;;743        right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
000014  f8b4005c          LDRH     r0,[r4,#0x5c]
000018  6e61              LDR      r1,[r4,#0x64]
00001a  eb000901          ADD      r9,r0,r1
;;;744    
;;;745        /* Update window. */
;;;746        if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
00001e  49fb              LDR      r1,|L5.1036|
000020  6e20              LDR      r0,[r4,#0x60]
000022  6809              LDR      r1,[r1,#0]  ; seqno
000024  1a40              SUBS     r0,r0,r1
000026  d415              BMI      |L5.84|
;;;747           (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
000028  49f8              LDR      r1,|L5.1036|
00002a  6e20              LDR      r0,[r4,#0x60]
00002c  6809              LDR      r1,[r1,#0]  ; seqno
00002e  4288              CMP      r0,r1
000030  d104              BNE      |L5.60|
000032  49f7              LDR      r1,|L5.1040|
000034  6e60              LDR      r0,[r4,#0x64]
000036  6809              LDR      r1,[r1,#0]  ; ackno
000038  1a40              SUBS     r0,r0,r1
00003a  d40b              BMI      |L5.84|
                  |L5.60|
;;;748           (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
00003c  49f4              LDR      r1,|L5.1040|
00003e  6e60              LDR      r0,[r4,#0x64]
000040  6809              LDR      r1,[r1,#0]  ; ackno
000042  4288              CMP      r0,r1
000044  d125              BNE      |L5.146|
000046  48f3              LDR      r0,|L5.1044|
000048  6800              LDR      r0,[r0,#0]  ; tcphdr
00004a  89c0              LDRH     r0,[r0,#0xe]
00004c  f8b4105c          LDRH     r1,[r4,#0x5c]
000050  4288              CMP      r0,r1
000052  dd1e              BLE      |L5.146|
                  |L5.84|
;;;749          pcb->snd_wnd = tcphdr->wnd;
000054  48ef              LDR      r0,|L5.1044|
000056  6800              LDR      r0,[r0,#0]  ; tcphdr
000058  89c0              LDRH     r0,[r0,#0xe]
00005a  f8a4005c          STRH     r0,[r4,#0x5c]
;;;750          pcb->snd_wl1 = seqno;
00005e  48eb              LDR      r0,|L5.1036|
000060  6800              LDR      r0,[r0,#0]  ; seqno
000062  6620              STR      r0,[r4,#0x60]
;;;751          pcb->snd_wl2 = ackno;
000064  48ea              LDR      r0,|L5.1040|
000066  6800              LDR      r0,[r0,#0]  ; ackno
000068  6660              STR      r0,[r4,#0x64]
;;;752          if (pcb->snd_wnd > 0 && pcb->persist_backoff > 0) {
00006a  f8b4005c          LDRH     r0,[r4,#0x5c]
00006e  2800              CMP      r0,#0
000070  dd06              BLE      |L5.128|
000072  f894009c          LDRB     r0,[r4,#0x9c]
000076  2800              CMP      r0,#0
000078  dd02              BLE      |L5.128|
;;;753              pcb->persist_backoff = 0;
00007a  2000              MOVS     r0,#0
00007c  f884009c          STRB     r0,[r4,#0x9c]
                  |L5.128|
;;;754          }
;;;755          LWIP_DEBUGF(TCP_WND_DEBUG, ("tcp_receive: window update %"U16_F"\n", pcb->snd_wnd));
000080  bf00              NOP      
000082  bf00              NOP      
000084  f8b4105c          LDRH     r1,[r4,#0x5c]
000088  a0e3              ADR      r0,|L5.1048|
00008a  f7fffffe          BL       __2printf
00008e  bf00              NOP      
000090  e016              B        |L5.192|
                  |L5.146|
;;;756    #if TCP_WND_DEBUG
;;;757        } else {
;;;758          if (pcb->snd_wnd != tcphdr->wnd) {
000092  f8b4005c          LDRH     r0,[r4,#0x5c]
000096  49df              LDR      r1,|L5.1044|
000098  6809              LDR      r1,[r1,#0]  ; tcphdr
00009a  89c9              LDRH     r1,[r1,#0xe]
00009c  4288              CMP      r0,r1
00009e  d00f              BEQ      |L5.192|
;;;759            LWIP_DEBUGF(TCP_WND_DEBUG, 
0000a0  bf00              NOP      
0000a2  bf00              NOP      
0000a4  48d9              LDR      r0,|L5.1036|
0000a6  6e63              LDR      r3,[r4,#0x64]
0000a8  6802              LDR      r2,[r0,#0]  ; seqno
0000aa  e9cd2300          STRD     r2,r3,[sp,#0]
0000ae  48d8              LDR      r0,|L5.1040|
0000b0  6e23              LDR      r3,[r4,#0x60]
0000b2  6ce1              LDR      r1,[r4,#0x4c]
0000b4  6802              LDR      r2,[r0,#0]  ; ackno
0000b6  48e0              LDR      r0,|L5.1080|
0000b8  f7fffffe          BL       __2printf
0000bc  bf00              NOP      
0000be  bf00              NOP      
                  |L5.192|
;;;760                        ("tcp_receive: no window update lastack %"U32_F" ackno %"
;;;761                         U32_F" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",
;;;762                         pcb->lastack, ackno, pcb->snd_wl1, seqno, pcb->snd_wl2));
;;;763          }
;;;764    #endif /* TCP_WND_DEBUG */
;;;765        }
;;;766    
;;;767        if (pcb->lastack == ackno) {
0000c0  49d3              LDR      r1,|L5.1040|
0000c2  6ce0              LDR      r0,[r4,#0x4c]
0000c4  6809              LDR      r1,[r1,#0]  ; ackno
0000c6  4288              CMP      r0,r1
0000c8  d17a              BNE      |L5.448|
;;;768          pcb->acked = 0;
0000ca  2000              MOVS     r0,#0
0000cc  f8a4006c          STRH     r0,[r4,#0x6c]
;;;769    
;;;770          if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
0000d0  f8b4105c          LDRH     r1,[r4,#0x5c]
0000d4  6e60              LDR      r0,[r4,#0x64]
0000d6  4408              ADD      r0,r0,r1
0000d8  4548              CMP      r0,r9
0000da  d173              BNE      |L5.452|
;;;771            ++pcb->dupacks;
0000dc  f8140f50          LDRB     r0,[r4,#0x50]!
0000e0  1c40              ADDS     r0,r0,#1
0000e2  7020              STRB     r0,[r4,#0]
;;;772            if (pcb->dupacks >= 3 && pcb->unacked != NULL) {
0000e4  f8140950          LDRB     r0,[r4],#-0x50
0000e8  2803              CMP      r0,#3
0000ea  db40              BLT      |L5.366|
0000ec  6fa0              LDR      r0,[r4,#0x78]
0000ee  b3f0              CBZ      r0,|L5.366|
;;;773              if (!(pcb->flags & TF_INFR)) {
0000f0  f8940022          LDRB     r0,[r4,#0x22]
0000f4  f0100f04          TST      r0,#4
0000f8  d152              BNE      |L5.416|
;;;774                /* This is fast retransmit. Retransmit the first unacked segment. */
;;;775                LWIP_DEBUGF(TCP_FR_DEBUG, ("tcp_receive: dupacks %"U16_F" (%"U32_F"), fast retransmit %"U32_F"\n",
0000fa  bf00              NOP      
0000fc  bf00              NOP      
0000fe  6fa1              LDR      r1,[r4,#0x78]
000100  6909              LDR      r1,[r1,#0x10]
000102  6848              LDR      r0,[r1,#4]
000104  f7fffffe          BL       ntohl
000108  4682              MOV      r10,r0
00010a  f8941050          LDRB     r1,[r4,#0x50]
00010e  4603              MOV      r3,r0
000110  e000              B        |L5.276|
                  |L5.274|
000112  e329              B        |L5.1896|
                  |L5.276|
000114  a0c9              ADR      r0,|L5.1084|
000116  6ce2              LDR      r2,[r4,#0x4c]
000118  f7fffffe          BL       __2printf
00011c  bf00              NOP      
00011e  bf00              NOP      
;;;776                                           (u16_t)pcb->dupacks, pcb->lastack,
;;;777                                           ntohl(pcb->unacked->tcphdr->seqno)));
;;;778                tcp_rexmit(pcb);
000120  4620              MOV      r0,r4
000122  f7fffffe          BL       tcp_rexmit
;;;779                /* Set ssthresh to max (FlightSize / 2, 2*SMSS) */
;;;780                /*pcb->ssthresh = LWIP_MAX((pcb->snd_max -
;;;781                                          pcb->lastack) / 2,
;;;782                                          2 * pcb->mss);*/
;;;783                /* Set ssthresh to half of the minimum of the current cwnd and the advertised window */
;;;784                if (pcb->cwnd > pcb->snd_wnd)
000126  f8b40052          LDRH     r0,[r4,#0x52]
00012a  f8b4105c          LDRH     r1,[r4,#0x5c]
00012e  4288              CMP      r0,r1
000130  dd07              BLE      |L5.322|
;;;785                  pcb->ssthresh = pcb->snd_wnd / 2;
000132  f8b4005c          LDRH     r0,[r4,#0x5c]
000136  eb0071d0          ADD      r1,r0,r0,LSR #31
00013a  1049              ASRS     r1,r1,#1
00013c  f8a41054          STRH     r1,[r4,#0x54]
000140  e006              B        |L5.336|
                  |L5.322|
;;;786                else
;;;787                  pcb->ssthresh = pcb->cwnd / 2;
000142  f8b40052          LDRH     r0,[r4,#0x52]
000146  eb0071d0          ADD      r1,r0,r0,LSR #31
00014a  1049              ASRS     r1,r1,#1
00014c  f8a41054          STRH     r1,[r4,#0x54]
                  |L5.336|
;;;788    
;;;789                /* The minimum value for ssthresh should be 2 MSS */
;;;790                if (pcb->ssthresh < 2*pcb->mss) {
000150  f8b40054          LDRH     r0,[r4,#0x54]
000154  8f21              LDRH     r1,[r4,#0x38]
000156  0049              LSLS     r1,r1,#1
000158  4288              CMP      r0,r1
00015a  da12              BGE      |L5.386|
;;;791                  LWIP_DEBUGF(TCP_FR_DEBUG, ("tcp_receive: The minimum value for ssthresh %"U16_F" should be min 2 mss %"U16_F"...\n", pcb->ssthresh, 2*pcb->mss));
00015c  bf00              NOP      
00015e  bf00              NOP      
000160  8f20              LDRH     r0,[r4,#0x38]
000162  0042              LSLS     r2,r0,#1
000164  f8b41054          LDRH     r1,[r4,#0x54]
000168  48b3              LDR      r0,|L5.1080|
00016a  3054              ADDS     r0,r0,#0x54
00016c  e000              B        |L5.368|
                  |L5.366|
00016e  e026              B        |L5.446|
                  |L5.368|
000170  f7fffffe          BL       __2printf
000174  bf00              NOP      
000176  bf00              NOP      
;;;792                  pcb->ssthresh = 2*pcb->mss;
000178  8f20              LDRH     r0,[r4,#0x38]
00017a  0440              LSLS     r0,r0,#17
00017c  0c00              LSRS     r0,r0,#16
00017e  f8a40054          STRH     r0,[r4,#0x54]
                  |L5.386|
;;;793                }
;;;794    
;;;795                pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
000182  f1040422          ADD      r4,r4,#0x22
000186  8e60              LDRH     r0,[r4,#0x32]
000188  8ae1              LDRH     r1,[r4,#0x16]
00018a  f04f0203          MOV      r2,#3
00018e  fb020001          MLA      r0,r2,r1,r0
000192  8620              STRH     r0,[r4,#0x30]
;;;796                pcb->flags |= TF_INFR;
000194  7820              LDRB     r0,[r4,#0]
000196  f0400004          ORR      r0,r0,#4
00019a  f8040922          STRB     r0,[r4],#-0x22
00019e  e21c              B        |L5.1498|
                  |L5.416|
;;;797              } else {
;;;798                /* Inflate the congestion window, but not if it means that
;;;799                   the value overflows. */
;;;800                if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
0001a0  f8b40052          LDRH     r0,[r4,#0x52]
0001a4  8f21              LDRH     r1,[r4,#0x38]
0001a6  4408              ADD      r0,r0,r1
0001a8  b280              UXTH     r0,r0
0001aa  f8b41052          LDRH     r1,[r4,#0x52]
0001ae  4288              CMP      r0,r1
0001b0  dd05              BLE      |L5.446|
;;;801                  pcb->cwnd += pcb->mss;
0001b2  f8b40052          LDRH     r0,[r4,#0x52]
0001b6  8f21              LDRH     r1,[r4,#0x38]
0001b8  4408              ADD      r0,r0,r1
0001ba  f8a40052          STRH     r0,[r4,#0x52]
                  |L5.446|
0001be  e20c              B        |L5.1498|
                  |L5.448|
0001c0  e00c              B        |L5.476|
0001c2  e7ff              B        |L5.452|
                  |L5.452|
;;;802                }
;;;803              }
;;;804            }
;;;805          } else {
;;;806            LWIP_DEBUGF(TCP_FR_DEBUG, ("tcp_receive: dupack averted %"U32_F" %"U32_F"\n",
0001c4  bf00              NOP      
0001c6  bf00              NOP      
0001c8  f8b4205c          LDRH     r2,[r4,#0x5c]
0001cc  6e60              LDR      r0,[r4,#0x64]
0001ce  1881              ADDS     r1,r0,r2
0001d0  464a              MOV      r2,r9
0001d2  a0a8              ADR      r0,|L5.1140|
0001d4  f7fffffe          BL       __2printf
0001d8  bf00              NOP      
0001da  e1fe              B        |L5.1498|
                  |L5.476|
;;;807                                       pcb->snd_wl2 + pcb->snd_wnd, right_wnd_edge));
;;;808          }
;;;809        } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
0001dc  6ce0              LDR      r0,[r4,#0x4c]
0001de  f1000001          ADD      r0,r0,#1
0001e2  498b              LDR      r1,|L5.1040|
0001e4  6809              LDR      r1,[r1,#0]  ; ackno
0001e6  1a08              SUBS     r0,r1,r0
0001e8  d47e              BMI      |L5.744|
0001ea  4989              LDR      r1,|L5.1040|
0001ec  6da0              LDR      r0,[r4,#0x58]
0001ee  6809              LDR      r1,[r1,#0]  ; ackno
0001f0  1a08              SUBS     r0,r1,r0
0001f2  2800              CMP      r0,#0
0001f4  dc78              BGT      |L5.744|
;;;810          /* We come here when the ACK acknowledges new data. */
;;;811          
;;;812          /* Reset the "IN Fast Retransmit" flag, since we are no longer
;;;813             in fast retransmit. Also reset the congestion window to the
;;;814             slow start threshold. */
;;;815          if (pcb->flags & TF_INFR) {
0001f6  f8940022          LDRB     r0,[r4,#0x22]
0001fa  f0100f04          TST      r0,#4
0001fe  d008              BEQ      |L5.530|
;;;816            pcb->flags &= ~TF_INFR;
000200  f8140f22          LDRB     r0,[r4,#0x22]!
000204  f0200004          BIC      r0,r0,#4
000208  7020              STRB     r0,[r4,#0]
;;;817            pcb->cwnd = pcb->ssthresh;
00020a  8e60              LDRH     r0,[r4,#0x32]
00020c  8620              STRH     r0,[r4,#0x30]
00020e  f1a40422          SUB      r4,r4,#0x22
                  |L5.530|
;;;818          }
;;;819    
;;;820          /* Reset the number of retransmissions. */
;;;821          pcb->nrtx = 0;
000212  2000              MOVS     r0,#0
000214  f1040434          ADD      r4,r4,#0x34
000218  75a0              STRB     r0,[r4,#0x16]
;;;822    
;;;823          /* Reset the retransmission time-out. */
;;;824          pcb->rto = (pcb->sa >> 3) + pcb->sv;
00021a  8a60              LDRH     r0,[r4,#0x12]
00021c  f9b41010          LDRSH    r1,[r4,#0x10]
000220  eb0000e1          ADD      r0,r0,r1,ASR #3
000224  b200              SXTH     r0,r0
000226  82a0              STRH     r0,[r4,#0x14]
;;;825    
;;;826          /* Update the send buffer space. Diff between the two can never exceed 64K? */
;;;827          pcb->acked = (u16_t)(ackno - pcb->lastack);
000228  4979              LDR      r1,|L5.1040|
00022a  69a0              LDR      r0,[r4,#0x18]
00022c  6809              LDR      r1,[r1,#0]  ; ackno
00022e  eba10000          SUB      r0,r1,r0
000232  8720              STRH     r0,[r4,#0x38]
;;;828    
;;;829          pcb->snd_buf += pcb->acked;
000234  8f60              LDRH     r0,[r4,#0x3a]
000236  8f21              LDRH     r1,[r4,#0x38]
000238  4408              ADD      r0,r0,r1
00023a  8760              STRH     r0,[r4,#0x3a]
;;;830    
;;;831          /* Reset the fast retransmit variables. */
;;;832          pcb->dupacks = 0;
00023c  f04f0000          MOV      r0,#0
000240  7720              STRB     r0,[r4,#0x1c]
;;;833          pcb->lastack = ackno;
000242  4873              LDR      r0,|L5.1040|
000244  6800              LDR      r0,[r0,#0]  ; ackno
000246  61a0              STR      r0,[r4,#0x18]
;;;834    
;;;835          /* Update the congestion control variables (cwnd and
;;;836             ssthresh). */
;;;837          if (pcb->state >= ESTABLISHED) {
000248  f8140c24          LDRB     r0,[r4,#-0x24]
00024c  f1a40434          SUB      r4,r4,#0x34
000250  2804              CMP      r0,#4
000252  db37              BLT      |L5.708|
;;;838            if (pcb->cwnd < pcb->ssthresh) {
000254  f8b40052          LDRH     r0,[r4,#0x52]
000258  f8b41054          LDRH     r1,[r4,#0x54]
00025c  4288              CMP      r0,r1
00025e  da17              BGE      |L5.656|
;;;839              if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
000260  f8b40052          LDRH     r0,[r4,#0x52]
000264  8f21              LDRH     r1,[r4,#0x38]
000266  4408              ADD      r0,r0,r1
000268  b280              UXTH     r0,r0
00026a  f8b41052          LDRH     r1,[r4,#0x52]
00026e  4288              CMP      r0,r1
000270  dd05              BLE      |L5.638|
;;;840                pcb->cwnd += pcb->mss;
000272  f8b40052          LDRH     r0,[r4,#0x52]
000276  8f21              LDRH     r1,[r4,#0x38]
000278  4408              ADD      r0,r0,r1
00027a  f8a40052          STRH     r0,[r4,#0x52]
                  |L5.638|
;;;841              }
;;;842              LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
00027e  bf00              NOP      
000280  bf00              NOP      
000282  f8b41052          LDRH     r1,[r4,#0x52]
000286  a085              ADR      r0,|L5.1180|
000288  f7fffffe          BL       __2printf
00028c  bf00              NOP      
00028e  e019              B        |L5.708|
                  |L5.656|
;;;843            } else {
;;;844              u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
000290  f8340f38          LDRH     r0,[r4,#0x38]!
000294  4340              MULS     r0,r0,r0
000296  8b61              LDRH     r1,[r4,#0x1a]
000298  fb90f0f1          SDIV     r0,r0,r1
00029c  4408              ADD      r0,r0,r1
00029e  fa1ffa80          UXTH     r10,r0
;;;845              if (new_cwnd > pcb->cwnd) {
0002a2  8b60              LDRH     r0,[r4,#0x1a]
0002a4  f1a40438          SUB      r4,r4,#0x38
0002a8  4550              CMP      r0,r10
0002aa  da01              BGE      |L5.688|
;;;846                pcb->cwnd = new_cwnd;
0002ac  f8a4a052          STRH     r10,[r4,#0x52]
                  |L5.688|
;;;847              }
;;;848              LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: congestion avoidance cwnd %"U16_F"\n", pcb->cwnd));
0002b0  bf00              NOP      
0002b2  bf00              NOP      
0002b4  f8b41052          LDRH     r1,[r4,#0x52]
0002b8  a081              ADR      r0,|L5.1216|
0002ba  f7fffffe          BL       __2printf
0002be  bf00              NOP      
0002c0  bf00              NOP      
;;;849            }
0002c2  bf00              NOP      
                  |L5.708|
;;;850          }
;;;851          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: ACK for %"U32_F", unacked->seqno %"U32_F":%"U32_F"\n",
0002c4  bf00              NOP      
0002c6  bf00              NOP      
0002c8  6fa0              LDR      r0,[r4,#0x78]
0002ca  b1f8              CBZ      r0,|L5.780|
0002cc  6fa1              LDR      r1,[r4,#0x78]
0002ce  6909              LDR      r1,[r1,#0x10]
0002d0  6848              LDR      r0,[r1,#4]
0002d2  f7fffffe          BL       ntohl
0002d6  4683              MOV      r11,r0
0002d8  6fa1              LDR      r1,[r4,#0x78]
0002da  6909              LDR      r1,[r1,#0x10]
0002dc  8988              LDRH     r0,[r1,#0xc]
0002de  f7fffffe          BL       ntohs
0002e2  f0100f01          TST      r0,#1
0002e6  e000              B        |L5.746|
                  |L5.744|
0002e8  e174              B        |L5.1492|
                  |L5.746|
0002ea  d107              BNE      |L5.764|
0002ec  6fa1              LDR      r1,[r4,#0x78]
0002ee  6909              LDR      r1,[r1,#0x10]
0002f0  8988              LDRH     r0,[r1,#0xc]
0002f2  f7fffffe          BL       ntohs
0002f6  f0100f02          TST      r0,#2
0002fa  d001              BEQ      |L5.768|
                  |L5.764|
0002fc  2001              MOVS     r0,#1
0002fe  e000              B        |L5.770|
                  |L5.768|
000300  2000              MOVS     r0,#0
                  |L5.770|
000302  6fa1              LDR      r1,[r4,#0x78]
000304  8989              LDRH     r1,[r1,#0xc]
000306  4408              ADD      r0,r0,r1
000308  4458              ADD      r0,r0,r11
00030a  e000              B        |L5.782|
                  |L5.780|
00030c  2000              MOVS     r0,#0
                  |L5.782|
00030e  4682              MOV      r10,r0
000310  6fa0              LDR      r0,[r4,#0x78]
000312  b128              CBZ      r0,|L5.800|
000314  6fa1              LDR      r1,[r4,#0x78]
000316  6909              LDR      r1,[r1,#0x10]
000318  6848              LDR      r0,[r1,#4]
00031a  f7fffffe          BL       ntohl
00031e  e000              B        |L5.802|
                  |L5.800|
000320  2000              MOVS     r0,#0
                  |L5.802|
000322  4653              MOV      r3,r10
000324  4602              MOV      r2,r0
000326  9001              STR      r0,[sp,#4]
000328  4839              LDR      r0,|L5.1040|
00032a  6801              LDR      r1,[r0,#0]  ; ackno
00032c  a06f              ADR      r0,|L5.1260|
00032e  f7fffffe          BL       __2printf
000332  bf00              NOP      
000334  bf00              NOP      
;;;852                                        ackno,
;;;853                                        pcb->unacked != NULL?
;;;854                                        ntohl(pcb->unacked->tcphdr->seqno): 0,
;;;855                                        pcb->unacked != NULL?
;;;856                                        ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));
;;;857    
;;;858          /* Remove segment from the unacknowledged list if the incoming
;;;859             ACK acknowlegdes them. */
;;;860          while (pcb->unacked != NULL &&
000336  e050              B        |L5.986|
                  |L5.824|
;;;861                 TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
;;;862                             TCP_TCPLEN(pcb->unacked), ackno)) {
;;;863            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
000338  bf00              NOP      
00033a  bf00              NOP      
00033c  6fa1              LDR      r1,[r4,#0x78]
00033e  6909              LDR      r1,[r1,#0x10]
000340  6848              LDR      r0,[r1,#4]
000342  f7fffffe          BL       ntohl
000346  4683              MOV      r11,r0
000348  6fa1              LDR      r1,[r4,#0x78]
00034a  6909              LDR      r1,[r1,#0x10]
00034c  8988              LDRH     r0,[r1,#0xc]
00034e  f7fffffe          BL       ntohs
000352  f0100f01          TST      r0,#1
000356  d107              BNE      |L5.872|
000358  6fa1              LDR      r1,[r4,#0x78]
00035a  6909              LDR      r1,[r1,#0x10]
00035c  8988              LDRH     r0,[r1,#0xc]
00035e  f7fffffe          BL       ntohs
000362  f0100f02          TST      r0,#2
000366  d001              BEQ      |L5.876|
                  |L5.872|
000368  2001              MOVS     r0,#1
00036a  e000              B        |L5.878|
                  |L5.876|
00036c  2000              MOVS     r0,#0
                  |L5.878|
00036e  6fa1              LDR      r1,[r4,#0x78]
000370  8989              LDRH     r1,[r1,#0xc]
000372  4408              ADD      r0,r0,r1
000374  eb0b0a00          ADD      r10,r11,r0
000378  6fa1              LDR      r1,[r4,#0x78]
00037a  6909              LDR      r1,[r1,#0x10]
00037c  6848              LDR      r0,[r1,#4]
00037e  f7fffffe          BL       ntohl
000382  4652              MOV      r2,r10
000384  4601              MOV      r1,r0
000386  9001              STR      r0,[sp,#4]
000388  a066              ADR      r0,|L5.1316|
00038a  f7fffffe          BL       __2printf
00038e  bf00              NOP      
000390  bf00              NOP      
;;;864                                          ntohl(pcb->unacked->tcphdr->seqno),
;;;865                                          ntohl(pcb->unacked->tcphdr->seqno) +
;;;866                                          TCP_TCPLEN(pcb->unacked)));
;;;867    
;;;868            next = pcb->unacked;
000392  f8d48078          LDR      r8,[r4,#0x78]
;;;869            pcb->unacked = pcb->unacked->next;
000396  6fa0              LDR      r0,[r4,#0x78]
000398  6800              LDR      r0,[r0,#0]
00039a  67a0              STR      r0,[r4,#0x78]
;;;870    
;;;871            LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
00039c  bf00              NOP      
00039e  bf00              NOP      
0003a0  f8b41070          LDRH     r1,[r4,#0x70]
0003a4  a06c              ADR      r0,|L5.1368|
0003a6  f7fffffe          BL       __2printf
0003aa  bf00              NOP      
0003ac  bf00              NOP      
;;;872            LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
;;;873            pcb->snd_queuelen -= pbuf_clen(next->p);
0003ae  f8d80004          LDR      r0,[r8,#4]
0003b2  f7fffffe          BL       pbuf_clen
0003b6  f8b41070          LDRH     r1,[r4,#0x70]
0003ba  1a08              SUBS     r0,r1,r0
0003bc  f8a40070          STRH     r0,[r4,#0x70]
;;;874            tcp_seg_free(next);
0003c0  4640              MOV      r0,r8
0003c2  f7fffffe          BL       tcp_seg_free
;;;875    
;;;876            LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unacked)\n", (u16_t)pcb->snd_queuelen));
0003c6  bf00              NOP      
0003c8  bf00              NOP      
0003ca  f8b41070          LDRH     r1,[r4,#0x70]
0003ce  a06a              ADR      r0,|L5.1400|
0003d0  f7fffffe          BL       __2printf
0003d4  bf00              NOP      
0003d6  bf00              NOP      
;;;877            if (pcb->snd_queuelen != 0) {
0003d8  bf00              NOP      
                  |L5.986|
0003da  6fa0              LDR      r0,[r4,#0x78]         ;860
0003dc  b188              CBZ      r0,|L5.1026|
0003de  6fa1              LDR      r1,[r4,#0x78]         ;861
0003e0  6909              LDR      r1,[r1,#0x10]         ;861
0003e2  6848              LDR      r0,[r1,#4]            ;861
0003e4  f7fffffe          BL       ntohl
0003e8  4682              MOV      r10,r0                ;861
0003ea  6fa1              LDR      r1,[r4,#0x78]         ;861
0003ec  6909              LDR      r1,[r1,#0x10]         ;861
0003ee  8988              LDRH     r0,[r1,#0xc]          ;861
0003f0  f7fffffe          BL       ntohs
0003f4  f0100f01          TST      r0,#1                 ;861
0003f8  d104              BNE      |L5.1028|
0003fa  6fa1              LDR      r1,[r4,#0x78]         ;861
0003fc  6909              LDR      r1,[r1,#0x10]         ;861
0003fe  8988              LDRH     r0,[r1,#0xc]          ;861
000400  e0ca              B        |L5.1432|
                  |L5.1026|
000402  e0db              B        |L5.1468|
                  |L5.1028|
000404  e0cd              B        |L5.1442|
000406  0000              DCW      0x0000
                  |L5.1032|
                          DCD      flags
                  |L5.1036|
                          DCD      seqno
                  |L5.1040|
                          DCD      ackno
                  |L5.1044|
                          DCD      tcphdr
                  |L5.1048|
000418  7463705f          DCB      "tcp_receive: window update %4d\n",0
00041c  72656365
000420  6976653a
000424  2077696e
000428  646f7720
00042c  75706461
000430  74652025
000434  34640a00
                  |L5.1080|
                          DCD      ||.constdata||
                  |L5.1084|
00043c  7463705f          DCB      "tcp_receive: dupacks %4d (%8ld), fast retransmit %8ld\n"
000440  72656365
000444  6976653a
000448  20647570
00044c  61636b73
000450  20253464
000454  20282538
000458  6c64292c
00045c  20666173
000460  74207265
000464  7472616e
000468  736d6974
00046c  2025386c
000470  640a    
000472  00                DCB      0
000473  00                DCB      0
                  |L5.1140|
000474  7463705f          DCB      "tcp_receive: dupack averted %8ld %8ld\n",0
000478  72656365
00047c  6976653a
000480  20647570
000484  61636b20
000488  61766572
00048c  74656420
000490  25386c64
000494  2025386c
000498  640a00  
00049b  00                DCB      0
                  |L5.1180|
00049c  7463705f          DCB      "tcp_receive: slow start cwnd %4d\n",0
0004a0  72656365
0004a4  6976653a
0004a8  20736c6f
0004ac  77207374
0004b0  61727420
0004b4  63776e64
0004b8  20253464
0004bc  0a00    
0004be  00                DCB      0
0004bf  00                DCB      0
                  |L5.1216|
0004c0  7463705f          DCB      "tcp_receive: congestion avoidance cwnd %4d\n",0
0004c4  72656365
0004c8  6976653a
0004cc  20636f6e
0004d0  67657374
0004d4  696f6e20
0004d8  61766f69
0004dc  64616e63
0004e0  65206377
0004e4  6e642025
0004e8  34640a00
                  |L5.1260|
0004ec  7463705f          DCB      "tcp_receive: ACK for %8ld, unacked->seqno %8ld:%8ld\n",0
0004f0  72656365
0004f4  6976653a
0004f8  2041434b
0004fc  20666f72
000500  2025386c
000504  642c2075
000508  6e61636b
00050c  65642d3e
000510  7365716e
000514  6f202538
000518  6c643a25
00051c  386c640a
000520  00      
000521  00                DCB      0
000522  00                DCB      0
000523  00                DCB      0
                  |L5.1316|
000524  7463705f          DCB      "tcp_receive: removing %8ld:%8ld from pcb->unacked\n",0
000528  72656365
00052c  6976653a
000530  2072656d
000534  6f76696e
000538  67202538
00053c  6c643a25
000540  386c6420
000544  66726f6d
000548  20706362
00054c  2d3e756e
000550  61636b65
000554  640a00  
000557  00                DCB      0
                  |L5.1368|
000558  7463705f          DCB      "tcp_receive: queuelen %4d ... ",0
00055c  72656365
000560  6976653a
000564  20717565
000568  75656c65
00056c  6e202534
000570  64202e2e
000574  2e2000  
000577  00                DCB      0
                  |L5.1400|
000578  25346420          DCB      "%4d (after freeing unacked)\n",0
00057c  28616674
000580  65722066
000584  72656569
000588  6e672075
00058c  6e61636b
000590  6564290a
000594  00      
000595  00                DCB      0
000596  00                DCB      0
000597  00                DCB      0
                  |L5.1432|
000598  f7fffffe          BL       ntohs
00059c  f0100f02          TST      r0,#2                 ;861
0005a0  d001              BEQ      |L5.1446|
                  |L5.1442|
0005a2  2001              MOVS     r0,#1                 ;861
0005a4  e000              B        |L5.1448|
                  |L5.1446|
0005a6  2000              MOVS     r0,#0                 ;861
                  |L5.1448|
0005a8  6fa1              LDR      r1,[r4,#0x78]         ;861
0005aa  8989              LDRH     r1,[r1,#0xc]          ;861
0005ac  4408              ADD      r0,r0,r1              ;861
0005ae  4450              ADD      r0,r0,r10             ;861
0005b0  49ff              LDR      r1,|L5.2480|
0005b2  6809              LDR      r1,[r1,#0]            ;861  ; ackno
0005b4  1a40              SUBS     r0,r0,r1              ;861
0005b6  2800              CMP      r0,#0                 ;861
0005b8  f77faebe          BLE      |L5.824|
                  |L5.1468|
;;;878              LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
;;;879                          pcb->unsent != NULL);
;;;880            }
;;;881          }
;;;882    
;;;883          /* If there's nothing left to acknowledge, stop the retransmit
;;;884             timer, otherwise reset it to start again */
;;;885          if(pcb->unacked == NULL)
0005bc  6fa0              LDR      r0,[r4,#0x78]
0005be  b918              CBNZ     r0,|L5.1480|
;;;886            pcb->rtime = -1;
0005c0  f04f30ff          MOV      r0,#0xffffffff
0005c4  86e0              STRH     r0,[r4,#0x36]
0005c6  e001              B        |L5.1484|
                  |L5.1480|
;;;887          else
;;;888            pcb->rtime = 0;
0005c8  2000              MOVS     r0,#0
0005ca  86e0              STRH     r0,[r4,#0x36]
                  |L5.1484|
;;;889    
;;;890          pcb->polltmr = 0;
0005cc  2000              MOVS     r0,#0
0005ce  f8840034          STRB     r0,[r4,#0x34]
0005d2  e002              B        |L5.1498|
                  |L5.1492|
;;;891        } else {
;;;892          /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
;;;893          pcb->acked = 0;
0005d4  2000              MOVS     r0,#0
0005d6  f8a4006c          STRH     r0,[r4,#0x6c]
                  |L5.1498|
;;;894        }
;;;895    
;;;896        /* We go through the ->unsent list to see if any of the segments
;;;897           on the list are acknowledged by the ACK. This may seem
;;;898           strange since an "unsent" segment shouldn't be acked. The
;;;899           rationale is that lwIP puts all outstanding segments on the
;;;900           ->unsent list after a retransmission, so these segments may
;;;901           in fact have been sent once. */
;;;902        while (pcb->unsent != NULL &&
0005da  e051              B        |L5.1664|
                  |L5.1500|
;;;903               TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
;;;904                               TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
;;;905          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
0005dc  bf00              NOP      
0005de  bf00              NOP      
0005e0  6f61              LDR      r1,[r4,#0x74]
0005e2  6909              LDR      r1,[r1,#0x10]
0005e4  6848              LDR      r0,[r1,#4]
0005e6  f7fffffe          BL       ntohl
0005ea  4683              MOV      r11,r0
0005ec  6f61              LDR      r1,[r4,#0x74]
0005ee  6909              LDR      r1,[r1,#0x10]
0005f0  8988              LDRH     r0,[r1,#0xc]
0005f2  f7fffffe          BL       ntohs
0005f6  f0100f01          TST      r0,#1
0005fa  d107              BNE      |L5.1548|
0005fc  6f61              LDR      r1,[r4,#0x74]
0005fe  6909              LDR      r1,[r1,#0x10]
000600  8988              LDRH     r0,[r1,#0xc]
000602  f7fffffe          BL       ntohs
000606  f0100f02          TST      r0,#2
00060a  d001              BEQ      |L5.1552|
                  |L5.1548|
00060c  2001              MOVS     r0,#1
00060e  e000              B        |L5.1554|
                  |L5.1552|
000610  2000              MOVS     r0,#0
                  |L5.1554|
000612  6f61              LDR      r1,[r4,#0x74]
000614  8989              LDRH     r1,[r1,#0xc]
000616  4408              ADD      r0,r0,r1
000618  eb0b0a00          ADD      r10,r11,r0
00061c  6f61              LDR      r1,[r4,#0x74]
00061e  6909              LDR      r1,[r1,#0x10]
000620  6848              LDR      r0,[r1,#4]
000622  f7fffffe          BL       ntohl
000626  4652              MOV      r2,r10
000628  4601              MOV      r1,r0
00062a  9001              STR      r0,[sp,#4]
00062c  a0e1              ADR      r0,|L5.2484|
00062e  f7fffffe          BL       __2printf
000632  bf00              NOP      
000634  bf00              NOP      
;;;906                                        ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->seqno) +
;;;907                                        TCP_TCPLEN(pcb->unsent)));
;;;908    
;;;909          next = pcb->unsent;
000636  f8d48074          LDR      r8,[r4,#0x74]
;;;910          pcb->unsent = pcb->unsent->next;
00063a  6f60              LDR      r0,[r4,#0x74]
00063c  6800              LDR      r0,[r0,#0]
00063e  6760              STR      r0,[r4,#0x74]
;;;911          LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen));
000640  bf00              NOP      
000642  bf00              NOP      
000644  f8b41070          LDRH     r1,[r4,#0x70]
000648  f2af00f4          ADR      r0,|L5.1368|
00064c  f7fffffe          BL       __2printf
000650  bf00              NOP      
000652  bf00              NOP      
;;;912          LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
;;;913          pcb->snd_queuelen -= pbuf_clen(next->p);
000654  f8d80004          LDR      r0,[r8,#4]
000658  f7fffffe          BL       pbuf_clen
00065c  f8b41070          LDRH     r1,[r4,#0x70]
000660  1a08              SUBS     r0,r1,r0
000662  f8a40070          STRH     r0,[r4,#0x70]
;;;914          tcp_seg_free(next);
000666  4640              MOV      r0,r8
000668  f7fffffe          BL       tcp_seg_free
;;;915          LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unsent)\n", (u16_t)pcb->snd_queuelen));
00066c  bf00              NOP      
00066e  bf00              NOP      
000670  f8b41070          LDRH     r1,[r4,#0x70]
000674  a0dc              ADR      r0,|L5.2536|
000676  f7fffffe          BL       __2printf
00067a  bf00              NOP      
00067c  bf00              NOP      
;;;916          if (pcb->snd_queuelen != 0) {
00067e  bf00              NOP      
                  |L5.1664|
000680  6f60              LDR      r0,[r4,#0x74]         ;902
000682  b330              CBZ      r0,|L5.1746|
000684  6f61              LDR      r1,[r4,#0x74]         ;903
000686  6909              LDR      r1,[r1,#0x10]         ;903
000688  6848              LDR      r0,[r1,#4]            ;903
00068a  f7fffffe          BL       ntohl
00068e  4682              MOV      r10,r0                ;903
000690  6f61              LDR      r1,[r4,#0x74]         ;903
000692  6909              LDR      r1,[r1,#0x10]         ;903
000694  8988              LDRH     r0,[r1,#0xc]          ;903
000696  f7fffffe          BL       ntohs
00069a  f0100f01          TST      r0,#1                 ;903
00069e  d107              BNE      |L5.1712|
0006a0  6f61              LDR      r1,[r4,#0x74]         ;903
0006a2  6909              LDR      r1,[r1,#0x10]         ;903
0006a4  8988              LDRH     r0,[r1,#0xc]          ;903
0006a6  f7fffffe          BL       ntohs
0006aa  f0100f02          TST      r0,#2                 ;903
0006ae  d001              BEQ      |L5.1716|
                  |L5.1712|
0006b0  2001              MOVS     r0,#1                 ;903
0006b2  e000              B        |L5.1718|
                  |L5.1716|
0006b4  2000              MOVS     r0,#0                 ;903
                  |L5.1718|
0006b6  6f61              LDR      r1,[r4,#0x74]         ;903
0006b8  8989              LDRH     r1,[r1,#0xc]          ;903
0006ba  4408              ADD      r0,r0,r1              ;903
0006bc  4450              ADD      r0,r0,r10             ;903
0006be  49bc              LDR      r1,|L5.2480|
0006c0  6809              LDR      r1,[r1,#0]            ;903  ; ackno
0006c2  1a08              SUBS     r0,r1,r0              ;903
0006c4  d405              BMI      |L5.1746|
0006c6  49ba              LDR      r1,|L5.2480|
0006c8  6da0              LDR      r0,[r4,#0x58]         ;903
0006ca  6809              LDR      r1,[r1,#0]            ;903  ; ackno
0006cc  1a08              SUBS     r0,r1,r0              ;903
0006ce  2800              CMP      r0,#0                 ;903
0006d0  dd84              BLE      |L5.1500|
                  |L5.1746|
;;;917            LWIP_ASSERT("tcp_receive: valid queue length",
;;;918              pcb->unacked != NULL || pcb->unsent != NULL);
;;;919          }
;;;920        }
;;;921        /* End of ACK for new data processing. */
;;;922    
;;;923        LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: pcb->rttest %"U32_F" rtseq %"U32_F" ackno %"U32_F"\n",
0006d2  bf00              NOP      
0006d4  bf00              NOP      
0006d6  48b6              LDR      r0,|L5.2480|
0006d8  e9d4120f          LDRD     r1,r2,[r4,#0x3c]
0006dc  6803              LDR      r3,[r0,#0]  ; ackno
0006de  a0c9              ADR      r0,|L5.2564|
0006e0  f7fffffe          BL       __2printf
0006e4  bf00              NOP      
0006e6  bf00              NOP      
;;;924                                    pcb->rttest, pcb->rtseq, ackno));
;;;925    
;;;926        /* RTT estimation calculations. This is done by checking if the
;;;927           incoming segment acknowledges the segment we use to take a
;;;928           round-trip time measurement. */
;;;929        if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
0006e8  6be0              LDR      r0,[r4,#0x3c]
0006ea  b3e8              CBZ      r0,|L5.1896|
0006ec  49b0              LDR      r1,|L5.2480|
0006ee  6c20              LDR      r0,[r4,#0x40]
0006f0  6809              LDR      r1,[r1,#0]  ; ackno
0006f2  1a40              SUBS     r0,r0,r1
0006f4  d543              BPL      |L5.1918|
;;;930          /* diff between this shouldn't exceed 32K since this are tcp timer ticks
;;;931             and a round-trip shouldn't be that long... */
;;;932          m = (s16_t)(tcp_ticks - pcb->rttest);
0006f6  49d1              LDR      r1,|L5.2620|
0006f8  6be0              LDR      r0,[r4,#0x3c]
0006fa  6809              LDR      r1,[r1,#0]  ; tcp_ticks
0006fc  1a08              SUBS     r0,r1,r0
0006fe  b205              SXTH     r5,r0
;;;933    
;;;934          LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
000700  bf00              NOP      
000702  bf00              NOP      
000704  f44f70fa          MOV      r0,#0x1f4
000708  fb05f200          MUL      r2,r5,r0
00070c  4629              MOV      r1,r5
00070e  a0cc              ADR      r0,|L5.2624|
000710  f7fffffe          BL       __2printf
000714  bf00              NOP      
000716  bf00              NOP      
;;;935                                      m, m * TCP_SLOW_INTERVAL));
;;;936    
;;;937          /* This is taken directly from VJs original code in his paper */
;;;938          m = m - (pcb->sa >> 3);
000718  f9b40044          LDRSH    r0,[r4,#0x44]
00071c  eba500e0          SUB      r0,r5,r0,ASR #3
000720  b205              SXTH     r5,r0
;;;939          pcb->sa += m;
000722  f8b40044          LDRH     r0,[r4,#0x44]
000726  4428              ADD      r0,r0,r5
000728  b200              SXTH     r0,r0
00072a  f8a40044          STRH     r0,[r4,#0x44]
;;;940          if (m < 0) {
00072e  2d00              CMP      r5,#0
000730  da01              BGE      |L5.1846|
;;;941            m = -m;
000732  4268              RSBS     r0,r5,#0
000734  b205              SXTH     r5,r0
                  |L5.1846|
;;;942          }
;;;943          m = m - (pcb->sv >> 2);
000736  f9340f46          LDRSH    r0,[r4,#0x46]!
00073a  eba500a0          SUB      r0,r5,r0,ASR #2
00073e  b205              SXTH     r5,r0
;;;944          pcb->sv += m;
000740  8820              LDRH     r0,[r4,#0]
000742  4428              ADD      r0,r0,r5
000744  b200              SXTH     r0,r0
000746  8020              STRH     r0,[r4,#0]
;;;945          pcb->rto = (pcb->sa >> 3) + pcb->sv;
000748  8820              LDRH     r0,[r4,#0]
00074a  f9341c02          LDRSH    r1,[r4,#-2]
00074e  eb0000e1          ADD      r0,r0,r1,ASR #3
000752  b200              SXTH     r0,r0
000754  8060              STRH     r0,[r4,#2]
000756  f1a40446          SUB      r4,r4,#0x46
;;;946    
;;;947          LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
00075a  bf00              NOP      
00075c  bf00              NOP      
00075e  f9b40048          LDRSH    r0,[r4,#0x48]
000762  f44f73fa          MOV      r3,#0x1f4
000766  e000              B        |L5.1898|
                  |L5.1896|
000768  e009              B        |L5.1918|
                  |L5.1898|
00076a  fb00f203          MUL      r2,r0,r3
00076e  4601              MOV      r1,r0
000770  a0c0              ADR      r0,|L5.2676|
000772  f7fffffe          BL       __2printf
000776  bf00              NOP      
000778  bf00              NOP      
;;;948                                      pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));
;;;949    
;;;950          pcb->rttest = 0;
00077a  2000              MOVS     r0,#0
00077c  63e0              STR      r0,[r4,#0x3c]
                  |L5.1918|
;;;951        }
;;;952      }
;;;953    
;;;954      /* If the incoming segment contains data, we must process it
;;;955         further. */
;;;956      if (tcplen > 0) {
00077e  48c8              LDR      r0,|L5.2720|
000780  8800              LDRH     r0,[r0,#0]  ; tcplen
000782  2800              CMP      r0,#0
000784  dd7e              BLE      |L5.2180|
;;;957        /* This code basically does three things:
;;;958    
;;;959        +) If the incoming segment contains data that is the next
;;;960        in-sequence data, this data is passed to the application. This
;;;961        might involve trimming the first edge of the data. The rcv_nxt
;;;962        variable and the advertised window are adjusted.
;;;963    
;;;964        +) If the incoming segment has data that is above the next
;;;965        sequence number expected (->rcv_nxt), the segment is placed on
;;;966        the ->ooseq queue. This is done by finding the appropriate
;;;967        place in the ->ooseq queue (which is ordered by sequence
;;;968        number) and trim the segment in both ends if needed. An
;;;969        immediate ACK is sent to indicate that we received an
;;;970        out-of-sequence segment.
;;;971    
;;;972        +) Finally, we check if the first segment on the ->ooseq queue
;;;973        now is in sequence (i.e., if rcv_nxt >= ooseq->seqno). If
;;;974        rcv_nxt > ooseq->seqno, we must trim the first edge of the
;;;975        segment on ->ooseq before we adjust rcv_nxt. The data in the
;;;976        segments that are now on sequence are chained onto the
;;;977        incoming segment so that we only need to call the application
;;;978        once.
;;;979        */
;;;980    
;;;981        /* First, we check if we must trim the first edge. We have to do
;;;982           this if the sequence number of the incoming segment is less
;;;983           than rcv_nxt, and the sequence number plus the length of the
;;;984           segment is larger than rcv_nxt. */
;;;985        /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
;;;986              if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
;;;987        if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
000786  48c7              LDR      r0,|L5.2724|
000788  6a61              LDR      r1,[r4,#0x24]
00078a  6800              LDR      r0,[r0,#0]  ; seqno
00078c  f1000001          ADD      r0,r0,#1
000790  1a08              SUBS     r0,r1,r0
000792  d443              BMI      |L5.2076|
000794  48c3              LDR      r0,|L5.2724|
000796  6a61              LDR      r1,[r4,#0x24]
000798  6800              LDR      r0,[r0,#0]  ; seqno
00079a  4ac1              LDR      r2,|L5.2720|
00079c  8812              LDRH     r2,[r2,#0]  ; tcplen
00079e  4410              ADD      r0,r0,r2
0007a0  1e40              SUBS     r0,r0,#1
0007a2  1a08              SUBS     r0,r1,r0
0007a4  2800              CMP      r0,#0
0007a6  dc39              BGT      |L5.2076|
;;;988          /* Trimming the first edge is done by pushing the payload
;;;989             pointer in the pbuf downwards. This is somewhat tricky since
;;;990             we do not want to discard the full contents of the pbuf up to
;;;991             the new starting point of the data since we have to keep the
;;;992             TCP header which is present in the first pbuf in the chain.
;;;993    
;;;994             What is done is really quite a nasty hack: the first pbuf in
;;;995             the pbuf chain is pointed to by inseg.p. Since we need to be
;;;996             able to deallocate the whole pbuf, we cannot change this
;;;997             inseg.p pointer to point to any of the later pbufs in the
;;;998             chain. Instead, we point the ->payload pointer in the first
;;;999             pbuf to data in one of the later pbufs. We also set the
;;;1000            inseg.data pointer to point to the right place. This way, the
;;;1001            ->p pointer will still point to the first pbuf, but the
;;;1002            ->p->payload pointer will point to data in another pbuf.
;;;1003   
;;;1004            After we are done with adjusting the pbuf pointers we must
;;;1005            adjust the ->data pointer in the seg and the segment
;;;1006            length.*/
;;;1007   
;;;1008         off = pcb->rcv_nxt - seqno;
0007a8  49be              LDR      r1,|L5.2724|
0007aa  6a60              LDR      r0,[r4,#0x24]
0007ac  6809              LDR      r1,[r1,#0]  ; seqno
0007ae  1a47              SUBS     r7,r0,r1
;;;1009         p = inseg.p;
0007b0  48bd              LDR      r0,|L5.2728|
0007b2  6846              LDR      r6,[r0,#4]  ; inseg
;;;1010         LWIP_ASSERT("inseg.p != NULL", inseg.p);
;;;1011         LWIP_ASSERT("insane offset!", (off < 0x7fff));
;;;1012         if (inseg.p->len < off) {
0007b4  6840              LDR      r0,[r0,#4]  ; inseg
0007b6  8940              LDRH     r0,[r0,#0xa]
0007b8  42b8              CMP      r0,r7
0007ba  da16              BGE      |L5.2026|
;;;1013           LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
;;;1014           new_tot_len = (u16_t)(inseg.p->tot_len - off);
0007bc  48ba              LDR      r0,|L5.2728|
0007be  6840              LDR      r0,[r0,#4]  ; inseg
0007c0  8900              LDRH     r0,[r0,#8]
0007c2  1bc0              SUBS     r0,r0,r7
0007c4  b280              UXTH     r0,r0
0007c6  9003              STR      r0,[sp,#0xc]
;;;1015           while (p->len < off) {
0007c8  e006              B        |L5.2008|
                  |L5.1994|
;;;1016             off -= p->len;
0007ca  8970              LDRH     r0,[r6,#0xa]
0007cc  1a3f              SUBS     r7,r7,r0
;;;1017             /* KJM following line changed (with addition of new_tot_len var)
;;;1018                to fix bug #9076
;;;1019                inseg.p->tot_len -= p->len; */
;;;1020             p->tot_len = new_tot_len;
0007ce  9803              LDR      r0,[sp,#0xc]
0007d0  8130              STRH     r0,[r6,#8]
;;;1021             p->len = 0;
0007d2  2000              MOVS     r0,#0
0007d4  8170              STRH     r0,[r6,#0xa]
;;;1022             p = p->next;
0007d6  6836              LDR      r6,[r6,#0]
                  |L5.2008|
0007d8  8970              LDRH     r0,[r6,#0xa]          ;1015
0007da  42b8              CMP      r0,r7                 ;1015
0007dc  dbf5              BLT      |L5.1994|
;;;1023           }
;;;1024           if(pbuf_header(p, (s16_t)-off)) {
0007de  4278              RSBS     r0,r7,#0
0007e0  b201              SXTH     r1,r0
0007e2  4630              MOV      r0,r6
0007e4  f7fffffe          BL       pbuf_header
0007e8  e005              B        |L5.2038|
                  |L5.2026|
;;;1025             /* Do we need to cope with this failing?  Assert for now */
;;;1026             LWIP_ASSERT("pbuf_header failed", 0);
;;;1027           }
;;;1028         } else {
;;;1029           if(pbuf_header(inseg.p, (s16_t)-off)) {
0007ea  49af              LDR      r1,|L5.2728|
0007ec  6848              LDR      r0,[r1,#4]  ; inseg
0007ee  4279              RSBS     r1,r7,#0
0007f0  b209              SXTH     r1,r1
0007f2  f7fffffe          BL       pbuf_header
                  |L5.2038|
;;;1030             /* Do we need to cope with this failing?  Assert for now */
;;;1031             LWIP_ASSERT("pbuf_header failed", 0);
;;;1032           }
;;;1033         }
;;;1034         /* KJM following line changed to use p->payload rather than inseg->p->payload
;;;1035            to fix bug #9076 */
;;;1036         inseg.dataptr = p->payload;
0007f6  49ac              LDR      r1,|L5.2728|
0007f8  6870              LDR      r0,[r6,#4]
0007fa  6088              STR      r0,[r1,#8]  ; inseg
;;;1037         inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
0007fc  4608              MOV      r0,r1
0007fe  8981              LDRH     r1,[r0,#0xc]  ; inseg
000800  4aa8              LDR      r2,|L5.2724|
000802  6a60              LDR      r0,[r4,#0x24]
000804  6812              LDR      r2,[r2,#0]  ; seqno
000806  1a80              SUBS     r0,r0,r2
000808  1a08              SUBS     r0,r1,r0
00080a  49a7              LDR      r1,|L5.2728|
00080c  8188              STRH     r0,[r1,#0xc]
;;;1038         inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
00080e  49a5              LDR      r1,|L5.2724|
000810  6a60              LDR      r0,[r4,#0x24]
000812  6008              STR      r0,[r1,#0]  ; seqno
000814  49a4              LDR      r1,|L5.2728|
000816  6909              LDR      r1,[r1,#0x10]  ; inseg
000818  6048              STR      r0,[r1,#4]
00081a  e018              B        |L5.2126|
                  |L5.2076|
;;;1039       }
;;;1040       else {
;;;1041         if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
00081c  49a1              LDR      r1,|L5.2724|
00081e  6a60              LDR      r0,[r4,#0x24]
000820  6809              LDR      r1,[r1,#0]  ; seqno
000822  1a08              SUBS     r0,r1,r0
000824  d513              BPL      |L5.2126|
;;;1042           /* the whole segment is < rcv_nxt */
;;;1043           /* must be a duplicate of a packet that has already been correctly handled */
;;;1044   
;;;1045           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
000826  bf00              NOP      
000828  bf00              NOP      
00082a  489e              LDR      r0,|L5.2724|
00082c  6801              LDR      r1,[r0,#0]  ; seqno
00082e  a09f              ADR      r0,|L5.2732|
000830  f7fffffe          BL       __2printf
000834  bf00              NOP      
000836  bf00              NOP      
;;;1046           tcp_ack_now(pcb);
000838  bf00              NOP      
00083a  f8940022          LDRB     r0,[r4,#0x22]
00083e  f0400002          ORR      r0,r0,#2
000842  f8840022          STRB     r0,[r4,#0x22]
000846  4620              MOV      r0,r4
000848  f7fffffe          BL       tcp_output
00084c  bf00              NOP      
                  |L5.2126|
;;;1047         }
;;;1048       }
;;;1049   
;;;1050       /* The sequence number must be within the window (above rcv_nxt
;;;1051          and below rcv_nxt + rcv_wnd) in order to be further
;;;1052          processed. */
;;;1053       if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
00084e  4995              LDR      r1,|L5.2724|
000850  6a60              LDR      r0,[r4,#0x24]
000852  6809              LDR      r1,[r1,#0]  ; seqno
000854  1a08              SUBS     r0,r1,r0
000856  d47e              BMI      |L5.2390|
000858  8d21              LDRH     r1,[r4,#0x28]
00085a  6a60              LDR      r0,[r4,#0x24]
00085c  4408              ADD      r0,r0,r1
00085e  1e40              SUBS     r0,r0,#1
000860  4990              LDR      r1,|L5.2724|
000862  6809              LDR      r1,[r1,#0]  ; seqno
000864  1a08              SUBS     r0,r1,r0
000866  2800              CMP      r0,#0
000868  dc75              BGT      |L5.2390|
;;;1054                           pcb->rcv_nxt + pcb->rcv_wnd - 1)){
;;;1055         if (pcb->rcv_nxt == seqno) {
00086a  498e              LDR      r1,|L5.2724|
00086c  6a60              LDR      r0,[r4,#0x24]
00086e  6809              LDR      r1,[r1,#0]  ; seqno
000870  4288              CMP      r0,r1
000872  d171              BNE      |L5.2392|
;;;1056           accepted_inseq = 1; 
000874  2001              MOVS     r0,#1
000876  9002              STR      r0,[sp,#8]
;;;1057           /* The incoming segment is the next in sequence. We check if
;;;1058              we have to trim the end of the segment and update rcv_nxt
;;;1059              and pass the data to the application. */
;;;1060           tcplen = TCP_TCPLEN(&inseg);
000878  498b              LDR      r1,|L5.2728|
00087a  6909              LDR      r1,[r1,#0x10]  ; inseg
00087c  8988              LDRH     r0,[r1,#0xc]
00087e  f7fffffe          BL       ntohs
000882  e000              B        |L5.2182|
                  |L5.2180|
000884  e167              B        |L5.2902|
                  |L5.2182|
000886  f0100f01          TST      r0,#1
00088a  d107              BNE      |L5.2204|
00088c  4986              LDR      r1,|L5.2728|
00088e  6909              LDR      r1,[r1,#0x10]  ; inseg
000890  8988              LDRH     r0,[r1,#0xc]
000892  f7fffffe          BL       ntohs
000896  f0100f02          TST      r0,#2
00089a  d001              BEQ      |L5.2208|
                  |L5.2204|
00089c  2001              MOVS     r0,#1
00089e  e000              B        |L5.2210|
                  |L5.2208|
0008a0  2000              MOVS     r0,#0
                  |L5.2210|
0008a2  4981              LDR      r1,|L5.2728|
0008a4  8989              LDRH     r1,[r1,#0xc]  ; inseg
0008a6  4408              ADD      r0,r0,r1
0008a8  497d              LDR      r1,|L5.2720|
0008aa  8008              STRH     r0,[r1,#0]
;;;1061   
;;;1062           if (tcplen > pcb->rcv_wnd) {
0008ac  8d20              LDRH     r0,[r4,#0x28]
0008ae  8809              LDRH     r1,[r1,#0]  ; tcplen
0008b0  4288              CMP      r0,r1
0008b2  da5a              BGE      |L5.2410|
;;;1063             LWIP_DEBUGF(TCP_INPUT_DEBUG, 
0008b4  bf00              NOP      
0008b6  bf00              NOP      
0008b8  8d21              LDRH     r1,[r4,#0x28]
0008ba  6a60              LDR      r0,[r4,#0x24]
0008bc  1843              ADDS     r3,r0,r1
0008be  4878              LDR      r0,|L5.2720|
0008c0  8802              LDRH     r2,[r0,#0]  ; tcplen
0008c2  4878              LDR      r0,|L5.2724|
0008c4  6801              LDR      r1,[r0,#0]  ; seqno
0008c6  4882              LDR      r0,|L5.2768|
0008c8  f7fffffe          BL       __2printf
0008cc  bf00              NOP      
0008ce  bf00              NOP      
;;;1064                         ("tcp_receive: other end overran receive window"
;;;1065                          "seqno %"U32_F" len %"U32_F" right edge %"U32_F"\n",
;;;1066                          seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
;;;1067             if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
0008d0  4975              LDR      r1,|L5.2728|
0008d2  6909              LDR      r1,[r1,#0x10]  ; inseg
0008d4  8988              LDRH     r0,[r1,#0xc]
0008d6  f7fffffe          BL       ntohs
0008da  f0100f01          TST      r0,#1
0008de  d015              BEQ      |L5.2316|
;;;1068               /* Must remove the FIN from the header as we're trimming 
;;;1069                * that byte of sequence-space from the packet */
;;;1070               TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
0008e0  4971              LDR      r1,|L5.2728|
0008e2  6909              LDR      r1,[r1,#0x10]  ; inseg
0008e4  8988              LDRH     r0,[r1,#0xc]
0008e6  f7fffffe          BL       ntohs
0008ea  f0200b3f          BIC      r11,r0,#0x3f
0008ee  496e              LDR      r1,|L5.2728|
0008f0  6909              LDR      r1,[r1,#0x10]  ; inseg
0008f2  8988              LDRH     r0,[r1,#0xc]
0008f4  f7fffffe          BL       ntohs
0008f8  f000003e          AND      r0,r0,#0x3e
0008fc  ea4b0a00          ORR      r10,r11,r0
000900  4650              MOV      r0,r10
000902  f7fffffe          BL       htons
000906  4968              LDR      r1,|L5.2728|
000908  6909              LDR      r1,[r1,#0x10]  ; inseg
00090a  8188              STRH     r0,[r1,#0xc]
                  |L5.2316|
;;;1071             }
;;;1072             /* Adjust length of segment to fit in the window. */
;;;1073             inseg.len = pcb->rcv_wnd;
00090c  8d20              LDRH     r0,[r4,#0x28]
00090e  4966              LDR      r1,|L5.2728|
000910  8188              STRH     r0,[r1,#0xc]
;;;1074             if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
000912  6909              LDR      r1,[r1,#0x10]  ; inseg
000914  8988              LDRH     r0,[r1,#0xc]
000916  f7fffffe          BL       ntohs
00091a  f0100f02          TST      r0,#2
00091e  d004              BEQ      |L5.2346|
;;;1075               inseg.len -= 1;
000920  4861              LDR      r0,|L5.2728|
000922  8980              LDRH     r0,[r0,#0xc]  ; inseg
000924  1e40              SUBS     r0,r0,#1
000926  4960              LDR      r1,|L5.2728|
000928  8188              STRH     r0,[r1,#0xc]
                  |L5.2346|
;;;1076             }
;;;1077             pbuf_realloc(inseg.p, inseg.len);
00092a  4a5f              LDR      r2,|L5.2728|
00092c  8991              LDRH     r1,[r2,#0xc]  ; inseg
00092e  6850              LDR      r0,[r2,#4]  ; inseg
000930  f7fffffe          BL       pbuf_realloc
;;;1078             tcplen = TCP_TCPLEN(&inseg);
000934  495c              LDR      r1,|L5.2728|
000936  6909              LDR      r1,[r1,#0x10]  ; inseg
000938  8988              LDRH     r0,[r1,#0xc]
00093a  f7fffffe          BL       ntohs
00093e  f0100f01          TST      r0,#1
000942  d107              BNE      |L5.2388|
000944  4958              LDR      r1,|L5.2728|
000946  6909              LDR      r1,[r1,#0x10]  ; inseg
000948  8988              LDRH     r0,[r1,#0xc]
00094a  f7fffffe          BL       ntohs
00094e  f0100f02          TST      r0,#2
000952  d004              BEQ      |L5.2398|
                  |L5.2388|
000954  e001              B        |L5.2394|
                  |L5.2390|
000956  e0f3              B        |L5.2880|
                  |L5.2392|
000958  e0e7              B        |L5.2858|
                  |L5.2394|
00095a  2001              MOVS     r0,#1
00095c  e000              B        |L5.2400|
                  |L5.2398|
00095e  2000              MOVS     r0,#0
                  |L5.2400|
000960  4951              LDR      r1,|L5.2728|
000962  8989              LDRH     r1,[r1,#0xc]  ; inseg
000964  4408              ADD      r0,r0,r1
000966  494e              LDR      r1,|L5.2720|
000968  8008              STRH     r0,[r1,#0]
                  |L5.2410|
;;;1079             LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
;;;1080                         (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
;;;1081           }
;;;1082   #if TCP_QUEUE_OOSEQ
;;;1083           if (pcb->ooseq != NULL) {
;;;1084             if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
;;;1085               LWIP_DEBUGF(TCP_INPUT_DEBUG, 
;;;1086                           ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
;;;1087               /* Received in-order FIN means anything that was received
;;;1088                * out of order must now have been received in-order, so
;;;1089                * bin the ooseq queue */
;;;1090               while (pcb->ooseq != NULL) {
;;;1091                 struct tcp_seg *old_ooseq = pcb->ooseq;
;;;1092                 pcb->ooseq = pcb->ooseq->next;
;;;1093                 memp_free(MEMP_TCP_SEG, old_ooseq);
;;;1094               }               
;;;1095             } else if (TCP_SEQ_LEQ(pcb->ooseq->tcphdr->seqno, seqno + tcplen)) {
;;;1096               if (pcb->ooseq->len > 0) {
;;;1097                 /* We have to trim the second edge of the incoming segment. */
;;;1098                 LWIP_ASSERT("tcp_receive: trimmed segment would have zero length\n",
;;;1099                             TCP_SEQ_GT(pcb->ooseq->tcphdr->seqno, seqno));
;;;1100                 /* FIN in inseg already handled by dropping whole ooseq queue */
;;;1101                 inseg.len = (u16_t)(pcb->ooseq->tcphdr->seqno - seqno);
;;;1102                 if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
;;;1103                   inseg.len -= 1;
;;;1104                 }
;;;1105                 pbuf_realloc(inseg.p, inseg.len);
;;;1106                 tcplen = TCP_TCPLEN(&inseg);
;;;1107                 LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
;;;1108                             (seqno + tcplen) == pcb->ooseq->tcphdr->seqno);
;;;1109               } else {
;;;1110                 /* does the ooseq segment contain only flags that are in inseg also? */
;;;1111                 if ((TCPH_FLAGS(inseg.tcphdr) & (TCP_FIN|TCP_SYN)) ==
;;;1112                     (TCPH_FLAGS(pcb->ooseq->tcphdr) & (TCP_FIN|TCP_SYN))) {
;;;1113                   struct tcp_seg *old_ooseq = pcb->ooseq;
;;;1114                   pcb->ooseq = pcb->ooseq->next;
;;;1115                   memp_free(MEMP_TCP_SEG, old_ooseq);
;;;1116                 }
;;;1117               }
;;;1118             }
;;;1119           }
;;;1120   #endif /* TCP_QUEUE_OOSEQ */
;;;1121   
;;;1122           pcb->rcv_nxt = seqno + tcplen;
00096a  484e              LDR      r0,|L5.2724|
00096c  6800              LDR      r0,[r0,#0]  ; seqno
00096e  494c              LDR      r1,|L5.2720|
000970  8809              LDRH     r1,[r1,#0]  ; tcplen
000972  4408              ADD      r0,r0,r1
000974  6260              STR      r0,[r4,#0x24]
;;;1123   
;;;1124           /* Update the receiver's (our) window. */
;;;1125           LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
;;;1126           pcb->rcv_wnd -= tcplen;
000976  8d20              LDRH     r0,[r4,#0x28]
000978  4949              LDR      r1,|L5.2720|
00097a  8809              LDRH     r1,[r1,#0]  ; tcplen
00097c  1a40              SUBS     r0,r0,r1
00097e  8520              STRH     r0,[r4,#0x28]
;;;1127   
;;;1128           tcp_update_rcv_ann_wnd(pcb);
000980  4620              MOV      r0,r4
000982  f7fffffe          BL       tcp_update_rcv_ann_wnd
;;;1129   
;;;1130           /* If there is data in the segment, we make preparations to
;;;1131              pass this up to the application. The ->recv_data variable
;;;1132              is used for holding the pbuf that goes to the
;;;1133              application. The code for reassembling out-of-sequence data
;;;1134              chains its data on this pbuf as well.
;;;1135   
;;;1136              If the segment was a FIN, we set the TF_GOT_FIN flag that will
;;;1137              be used to indicate to the application that the remote side has
;;;1138              closed its end of the connection. */
;;;1139           if (inseg.p->tot_len > 0) {
000986  4848              LDR      r0,|L5.2728|
000988  6840              LDR      r0,[r0,#4]  ; inseg
00098a  8900              LDRH     r0,[r0,#8]
00098c  2800              CMP      r0,#0
00098e  dd06              BLE      |L5.2462|
;;;1140             recv_data = inseg.p;
000990  4845              LDR      r0,|L5.2728|
000992  6840              LDR      r0,[r0,#4]  ; inseg
000994  494f              LDR      r1,|L5.2772|
000996  6008              STR      r0,[r1,#0]  ; recv_data
;;;1141             /* Since this pbuf now is the responsibility of the
;;;1142                application, we delete our reference to it so that we won't
;;;1143                (mistakingly) deallocate it. */
;;;1144             inseg.p = NULL;
000998  2000              MOVS     r0,#0
00099a  4943              LDR      r1,|L5.2728|
00099c  6048              STR      r0,[r1,#4]  ; inseg
                  |L5.2462|
;;;1145           }
;;;1146           if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
00099e  4942              LDR      r1,|L5.2728|
0009a0  6909              LDR      r1,[r1,#0x10]  ; inseg
0009a2  8988              LDRH     r0,[r1,#0xc]
0009a4  f7fffffe          BL       ntohs
0009a8  f0100f01          TST      r0,#1
0009ac  e094              B        |L5.2776|
0009ae  0000              DCW      0x0000
                  |L5.2480|
                          DCD      ackno
                  |L5.2484|
0009b4  7463705f          DCB      "tcp_receive: removing %8ld:%8ld from pcb->unsent\n",0
0009b8  72656365
0009bc  6976653a
0009c0  2072656d
0009c4  6f76696e
0009c8  67202538
0009cc  6c643a25
0009d0  386c6420
0009d4  66726f6d
0009d8  20706362
0009dc  2d3e756e
0009e0  73656e74
0009e4  0a00    
0009e6  00                DCB      0
0009e7  00                DCB      0
                  |L5.2536|
0009e8  25346420          DCB      "%4d (after freeing unsent)\n",0
0009ec  28616674
0009f0  65722066
0009f4  72656569
0009f8  6e672075
0009fc  6e73656e
000a00  74290a00
                  |L5.2564|
000a04  7463705f          DCB      "tcp_receive: pcb->rttest %8ld rtseq %8ld ackno %8ld\n",0
000a08  72656365
000a0c  6976653a
000a10  20706362
000a14  2d3e7274
000a18  74657374
000a1c  2025386c
000a20  64207274
000a24  73657120
000a28  25386c64
000a2c  2061636b
000a30  6e6f2025
000a34  386c640a
000a38  00      
000a39  00                DCB      0
000a3a  00                DCB      0
000a3b  00                DCB      0
                  |L5.2620|
                          DCD      tcp_ticks
                  |L5.2624|
000a40  7463705f          DCB      "tcp_receive: experienced rtt %4d ticks (%4d msec).\n",0
000a44  72656365
000a48  6976653a
000a4c  20657870
000a50  65726965
000a54  6e636564
000a58  20727474
000a5c  20253464
000a60  20746963
000a64  6b732028
000a68  25346420
000a6c  6d736563
000a70  292e0a00
                  |L5.2676|
000a74  7463705f          DCB      "tcp_receive: RTO %4d (%4d milliseconds)\n",0
000a78  72656365
000a7c  6976653a
000a80  2052544f
000a84  20253464
000a88  20282534
000a8c  64206d69
000a90  6c6c6973
000a94  65636f6e
000a98  6473290a
000a9c  00      
000a9d  00                DCB      0
000a9e  00                DCB      0
000a9f  00                DCB      0
                  |L5.2720|
                          DCD      tcplen
                  |L5.2724|
                          DCD      seqno
                  |L5.2728|
                          DCD      inseg
                  |L5.2732|
000aac  7463705f          DCB      "tcp_receive: duplicate seqno %8ld\n",0
000ab0  72656365
000ab4  6976653a
000ab8  20647570
000abc  6c696361
000ac0  74652073
000ac4  65716e6f
000ac8  2025386c
000acc  640a00  
000acf  00                DCB      0
                  |L5.2768|
                          DCD      ||.constdata||+0xa0
                  |L5.2772|
                          DCD      recv_data
                  |L5.2776|
000ad8  d00c              BEQ      |L5.2804|
;;;1147             LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
000ada  bf00              NOP      
000adc  bf00              NOP      
000ade  a02c              ADR      r0,|L5.2960|
000ae0  f7fffffe          BL       __2printf
000ae4  bf00              NOP      
000ae6  bf00              NOP      
;;;1148             recv_flags |= TF_GOT_FIN;
000ae8  4830              LDR      r0,|L5.2988|
000aea  7800              LDRB     r0,[r0,#0]  ; recv_flags
000aec  f0400020          ORR      r0,r0,#0x20
000af0  492e              LDR      r1,|L5.2988|
000af2  7008              STRB     r0,[r1,#0]
                  |L5.2804|
;;;1149           }
;;;1150   
;;;1151   #if TCP_QUEUE_OOSEQ
;;;1152           /* We now check if we have segments on the ->ooseq queue that
;;;1153              is now in sequence. */
;;;1154           while (pcb->ooseq != NULL &&
;;;1155                  pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
;;;1156   
;;;1157             cseg = pcb->ooseq;
;;;1158             seqno = pcb->ooseq->tcphdr->seqno;
;;;1159   
;;;1160             pcb->rcv_nxt += TCP_TCPLEN(cseg);
;;;1161             LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
;;;1162                         pcb->rcv_wnd >= TCP_TCPLEN(cseg));
;;;1163             pcb->rcv_wnd -= TCP_TCPLEN(cseg);
;;;1164   
;;;1165             tcp_update_rcv_ann_wnd(pcb);
;;;1166   
;;;1167             if (cseg->p->tot_len > 0) {
;;;1168               /* Chain this pbuf onto the pbuf that we will pass to
;;;1169                  the application. */
;;;1170               if (recv_data) {
;;;1171                 pbuf_cat(recv_data, cseg->p);
;;;1172               } else {
;;;1173                 recv_data = cseg->p;
;;;1174               }
;;;1175               cseg->p = NULL;
;;;1176             }
;;;1177             if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
;;;1178               LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
;;;1179               recv_flags |= TF_GOT_FIN;
;;;1180               if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
;;;1181                 pcb->state = CLOSE_WAIT;
;;;1182               } 
;;;1183             }
;;;1184   
;;;1185   
;;;1186             pcb->ooseq = cseg->next;
;;;1187             tcp_seg_free(cseg);
;;;1188           }
;;;1189   #endif /* TCP_QUEUE_OOSEQ */
;;;1190   
;;;1191   
;;;1192           /* Acknowledge the segment(s). */
;;;1193           tcp_ack(pcb);
000af4  bf00              NOP      
000af6  f8940022          LDRB     r0,[r4,#0x22]
000afa  f0100f01          TST      r0,#1
000afe  d00d              BEQ      |L5.2844|
000b00  f8140f22          LDRB     r0,[r4,#0x22]!
000b04  f0200001          BIC      r0,r0,#1
000b08  7020              STRB     r0,[r4,#0]
000b0a  7820              LDRB     r0,[r4,#0]
000b0c  f0400002          ORR      r0,r0,#2
000b10  f8040922          STRB     r0,[r4],#-0x22
000b14  4620              MOV      r0,r4
000b16  f7fffffe          BL       tcp_output
000b1a  e005              B        |L5.2856|
                  |L5.2844|
000b1c  f8940022          LDRB     r0,[r4,#0x22]
000b20  f0400001          ORR      r0,r0,#1
000b24  f8840022          STRB     r0,[r4,#0x22]
                  |L5.2856|
000b28  e02e              B        |L5.2952|
                  |L5.2858|
;;;1194   
;;;1195         } else {
;;;1196           /* We get here if the incoming segment is out-of-sequence. */
;;;1197           tcp_ack_now(pcb);
000b2a  bf00              NOP      
000b2c  f8940022          LDRB     r0,[r4,#0x22]
000b30  f0400002          ORR      r0,r0,#2
000b34  f8840022          STRB     r0,[r4,#0x22]
000b38  4620              MOV      r0,r4
000b3a  f7fffffe          BL       tcp_output
000b3e  e023              B        |L5.2952|
                  |L5.2880|
;;;1198   #if TCP_QUEUE_OOSEQ
;;;1199           /* We queue the segment on the ->ooseq queue. */
;;;1200           if (pcb->ooseq == NULL) {
;;;1201             pcb->ooseq = tcp_seg_copy(&inseg);
;;;1202           } else {
;;;1203             /* If the queue is not empty, we walk through the queue and
;;;1204                try to find a place where the sequence number of the
;;;1205                incoming segment is between the sequence numbers of the
;;;1206                previous and the next segment on the ->ooseq queue. That is
;;;1207                the place where we put the incoming segment. If needed, we
;;;1208                trim the second edges of the previous and the incoming
;;;1209                segment so that it will fit into the sequence.
;;;1210   
;;;1211                If the incoming segment has the same sequence number as a
;;;1212                segment on the ->ooseq queue, we discard the segment that
;;;1213                contains less data. */
;;;1214   
;;;1215             prev = NULL;
;;;1216             for(next = pcb->ooseq; next != NULL; next = next->next) {
;;;1217               if (seqno == next->tcphdr->seqno) {
;;;1218                 /* The sequence number of the incoming segment is the
;;;1219                    same as the sequence number of the segment on
;;;1220                    ->ooseq. We check the lengths to see which one to
;;;1221                    discard. */
;;;1222                 if (inseg.len > next->len) {
;;;1223                   /* The incoming segment is larger than the old
;;;1224                      segment. We replace the old segment with the new
;;;1225                      one. */
;;;1226                   cseg = tcp_seg_copy(&inseg);
;;;1227                   if (cseg != NULL) {
;;;1228                     cseg->next = next->next;
;;;1229                     if (prev != NULL) {
;;;1230                       prev->next = cseg;
;;;1231                     } else {
;;;1232                       pcb->ooseq = cseg;
;;;1233                     }
;;;1234                     tcp_seg_free(next);
;;;1235                     if (cseg->next != NULL) {
;;;1236                       next = cseg->next;
;;;1237                       if (TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
;;;1238                         /* We need to trim the incoming segment. */
;;;1239                         cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
;;;1240                         pbuf_realloc(cseg->p, cseg->len);
;;;1241                       }
;;;1242                     }
;;;1243                   }
;;;1244                   break;
;;;1245                 } else {
;;;1246                   /* Either the lenghts are the same or the incoming
;;;1247                      segment was smaller than the old one; in either
;;;1248                      case, we ditch the incoming segment. */
;;;1249                   break;
;;;1250                 }
;;;1251               } else {
;;;1252                 if (prev == NULL) {
;;;1253                   if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
;;;1254                     /* The sequence number of the incoming segment is lower
;;;1255                        than the sequence number of the first segment on the
;;;1256                        queue. We put the incoming segment first on the
;;;1257                        queue. */
;;;1258   
;;;1259                     if (TCP_SEQ_GT(seqno + inseg.len, next->tcphdr->seqno)) {
;;;1260                       /* We need to trim the incoming segment. */
;;;1261                       inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
;;;1262                       pbuf_realloc(inseg.p, inseg.len);
;;;1263                     }
;;;1264                     cseg = tcp_seg_copy(&inseg);
;;;1265                     if (cseg != NULL) {
;;;1266                       cseg->next = next;
;;;1267                       pcb->ooseq = cseg;
;;;1268                     }
;;;1269                     break;
;;;1270                   }
;;;1271                 } else 
;;;1272                   /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
;;;1273                     TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
;;;1274                   if(TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)){
;;;1275                   /* The sequence number of the incoming segment is in
;;;1276                      between the sequence numbers of the previous and
;;;1277                      the next segment on ->ooseq. We trim and insert the
;;;1278                      incoming segment and trim the previous segment, if
;;;1279                      needed. */
;;;1280                   if (TCP_SEQ_GT(seqno + inseg.len, next->tcphdr->seqno)) {
;;;1281                     /* We need to trim the incoming segment. */
;;;1282                     inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
;;;1283                     pbuf_realloc(inseg.p, inseg.len);
;;;1284                   }
;;;1285   
;;;1286                   cseg = tcp_seg_copy(&inseg);
;;;1287                   if (cseg != NULL) {
;;;1288                     cseg->next = next;
;;;1289                     prev->next = cseg;
;;;1290                     if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
;;;1291                       /* We need to trim the prev segment. */
;;;1292                       prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
;;;1293                       pbuf_realloc(prev->p, prev->len);
;;;1294                     }
;;;1295                   }
;;;1296                   break;
;;;1297                 }
;;;1298                 /* If the "next" segment is the last segment on the
;;;1299                    ooseq queue, we add the incoming segment to the end
;;;1300                    of the list. */
;;;1301                 if (next->next == NULL &&
;;;1302                     TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
;;;1303                   next->next = tcp_seg_copy(&inseg);
;;;1304                   if (next->next != NULL) {
;;;1305                     if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
;;;1306                       /* We need to trim the last segment. */
;;;1307                       next->len = (u16_t)(seqno - next->tcphdr->seqno);
;;;1308                       pbuf_realloc(next->p, next->len);
;;;1309                     }
;;;1310                   }
;;;1311                   break;
;;;1312                 }
;;;1313               }
;;;1314               prev = next;
;;;1315             }
;;;1316           }
;;;1317   #endif /* TCP_QUEUE_OOSEQ */
;;;1318   
;;;1319         }
;;;1320       } else {
;;;1321         tcp_ack_now(pcb);
000b40  bf00              NOP      
000b42  f8940022          LDRB     r0,[r4,#0x22]
000b46  f0400002          ORR      r0,r0,#2
000b4a  f8840022          STRB     r0,[r4,#0x22]
000b4e  4620              MOV      r0,r4
000b50  f7fffffe          BL       tcp_output
000b54  e018              B        |L5.2952|
                  |L5.2902|
;;;1322       }
;;;1323     } else {
;;;1324       /* Segments with length 0 is taken care of here. Segments that
;;;1325          fall out of the window are ACKed. */
;;;1326       /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
;;;1327         TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
;;;1328       if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
000b56  4916              LDR      r1,|L5.2992|
000b58  6a60              LDR      r0,[r4,#0x24]
000b5a  6809              LDR      r1,[r1,#0]  ; seqno
000b5c  1a08              SUBS     r0,r1,r0
000b5e  d408              BMI      |L5.2930|
000b60  8d21              LDRH     r1,[r4,#0x28]
000b62  6a60              LDR      r0,[r4,#0x24]
000b64  4408              ADD      r0,r0,r1
000b66  1e40              SUBS     r0,r0,#1
000b68  4911              LDR      r1,|L5.2992|
000b6a  6809              LDR      r1,[r1,#0]  ; seqno
000b6c  1a08              SUBS     r0,r1,r0
000b6e  2800              CMP      r0,#0
000b70  dd0a              BLE      |L5.2952|
                  |L5.2930|
;;;1329         tcp_ack_now(pcb);
000b72  bf00              NOP      
000b74  f8940022          LDRB     r0,[r4,#0x22]
000b78  f0400002          ORR      r0,r0,#2
000b7c  f8840022          STRB     r0,[r4,#0x22]
000b80  4620              MOV      r0,r4
000b82  f7fffffe          BL       tcp_output
000b86  bf00              NOP      
                  |L5.2952|
;;;1330       }
;;;1331     }
;;;1332     return accepted_inseq;
000b88  9802              LDR      r0,[sp,#8]
;;;1333   }
000b8a  b004              ADD      sp,sp,#0x10
000b8c  e8bd9ff0          POP      {r4-r12,pc}
;;;1334   
                          ENDP

                  |L5.2960|
000b90  7463705f          DCB      "tcp_receive: received FIN.\n",0
000b94  72656365
000b98  6976653a
000b9c  20726563
000ba0  65697665
000ba4  64204649
000ba8  4e2e0a00
                  |L5.2988|
                          DCD      recv_flags
                  |L5.2992|
                          DCD      seqno

                          AREA ||i.tcp_timewait_input||, CODE, READONLY, ALIGN=2

                  tcp_timewait_input PROC
;;;483    static err_t
;;;484    tcp_timewait_input(struct tcp_pcb *pcb)
000000  b510              PUSH     {r4,lr}
;;;485    {
000002  4604              MOV      r4,r0
;;;486      if (TCP_SEQ_GT(seqno + tcplen, pcb->rcv_nxt)) {
000004  4810              LDR      r0,|L6.72|
000006  6800              LDR      r0,[r0,#0]  ; seqno
000008  4910              LDR      r1,|L6.76|
00000a  8809              LDRH     r1,[r1,#0]  ; tcplen
00000c  4408              ADD      r0,r0,r1
00000e  6a61              LDR      r1,[r4,#0x24]
000010  1a40              SUBS     r0,r0,r1
000012  2800              CMP      r0,#0
000014  dd05              BLE      |L6.34|
;;;487        pcb->rcv_nxt = seqno + tcplen;
000016  480c              LDR      r0,|L6.72|
000018  6800              LDR      r0,[r0,#0]  ; seqno
00001a  490c              LDR      r1,|L6.76|
00001c  8809              LDRH     r1,[r1,#0]  ; tcplen
00001e  4408              ADD      r0,r0,r1
000020  6260              STR      r0,[r4,#0x24]
                  |L6.34|
;;;488      }
;;;489      if (tcplen > 0) {
000022  480a              LDR      r0,|L6.76|
000024  8800              LDRH     r0,[r0,#0]  ; tcplen
000026  2800              CMP      r0,#0
000028  dd0a              BLE      |L6.64|
;;;490        tcp_ack_now(pcb);
00002a  bf00              NOP      
00002c  f8940022          LDRB     r0,[r4,#0x22]
000030  f0400002          ORR      r0,r0,#2
000034  f8840022          STRB     r0,[r4,#0x22]
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       tcp_output
00003e  bf00              NOP      
                  |L6.64|
;;;491      }
;;;492      return tcp_output(pcb);
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       tcp_output
;;;493    }
000046  bd10              POP      {r4,pc}
;;;494    
                          ENDP

                  |L6.72|
                          DCD      seqno
                  |L6.76|
                          DCD      tcplen

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  inseg
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  7463705f          DCB      0x74,0x63,0x70,0x5f
000004  72656365          DCB      0x72,0x65,0x63,0x65
000008  6976653a          DCB      0x69,0x76,0x65,0x3a
00000c  206e6f20          DCB      0x20,0x6e,0x6f,0x20
000010  77696e64          DCB      0x77,0x69,0x6e,0x64
000014  6f772075          DCB      0x6f,0x77,0x20,0x75
000018  70646174          DCB      0x70,0x64,0x61,0x74
00001c  65206c61          DCB      0x65,0x20,0x6c,0x61
000020  73746163          DCB      0x73,0x74,0x61,0x63
000024  6b202538          DCB      0x6b,0x20,0x25,0x38
000028  6c642061          DCB      0x6c,0x64,0x20,0x61
00002c  636b6e6f          DCB      0x63,0x6b,0x6e,0x6f
000030  2025386c          DCB      0x20,0x25,0x38,0x6c
000034  6420776c          DCB      0x64,0x20,0x77,0x6c
000038  31202538          DCB      0x31,0x20,0x25,0x38
00003c  6c642073          DCB      0x6c,0x64,0x20,0x73
000040  65716e6f          DCB      0x65,0x71,0x6e,0x6f
000044  2025386c          DCB      0x20,0x25,0x38,0x6c
000048  6420776c          DCB      0x64,0x20,0x77,0x6c
00004c  32202538          DCB      0x32,0x20,0x25,0x38
000050  6c640a00          DCB      0x6c,0x64,0x0a,0x00
000054  7463705f          DCB      0x74,0x63,0x70,0x5f
000058  72656365          DCB      0x72,0x65,0x63,0x65
00005c  6976653a          DCB      0x69,0x76,0x65,0x3a
000060  20546865          DCB      0x20,0x54,0x68,0x65
000064  206d696e          DCB      0x20,0x6d,0x69,0x6e
000068  696d756d          DCB      0x69,0x6d,0x75,0x6d
00006c  2076616c          DCB      0x20,0x76,0x61,0x6c
000070  75652066          DCB      0x75,0x65,0x20,0x66
000074  6f722073          DCB      0x6f,0x72,0x20,0x73
000078  73746872          DCB      0x73,0x74,0x68,0x72
00007c  65736820          DCB      0x65,0x73,0x68,0x20
000080  25346420          DCB      0x25,0x34,0x64,0x20
000084  73686f75          DCB      0x73,0x68,0x6f,0x75
000088  6c642062          DCB      0x6c,0x64,0x20,0x62
00008c  65206d69          DCB      0x65,0x20,0x6d,0x69
000090  6e203220          DCB      0x6e,0x20,0x32,0x20
000094  6d737320          DCB      0x6d,0x73,0x73,0x20
000098  2534642e          DCB      0x25,0x34,0x64,0x2e
00009c  2e2e0a00          DCB      0x2e,0x2e,0x0a,0x00
0000a0  7463705f          DCB      0x74,0x63,0x70,0x5f
0000a4  72656365          DCB      0x72,0x65,0x63,0x65
0000a8  6976653a          DCB      0x69,0x76,0x65,0x3a
0000ac  206f7468          DCB      0x20,0x6f,0x74,0x68
0000b0  65722065          DCB      0x65,0x72,0x20,0x65
0000b4  6e64206f          DCB      0x6e,0x64,0x20,0x6f
0000b8  76657272          DCB      0x76,0x65,0x72,0x72
0000bc  616e2072          DCB      0x61,0x6e,0x20,0x72
0000c0  65636569          DCB      0x65,0x63,0x65,0x69
0000c4  76652077          DCB      0x76,0x65,0x20,0x77
0000c8  696e646f          DCB      0x69,0x6e,0x64,0x6f
0000cc  77736571          DCB      0x77,0x73,0x65,0x71
0000d0  6e6f2025          DCB      0x6e,0x6f,0x20,0x25
0000d4  386c6420          DCB      0x38,0x6c,0x64,0x20
0000d8  6c656e20          DCB      0x6c,0x65,0x6e,0x20
0000dc  25386c64          DCB      0x25,0x38,0x6c,0x64
0000e0  20726967          DCB      0x20,0x72,0x69,0x67
0000e4  68742065          DCB      0x68,0x74,0x20,0x65
0000e8  64676520          DCB      0x64,0x67,0x65,0x20
0000ec  25386c64          DCB      0x25,0x38,0x6c,0x64
0000f0  0a00              DCB      0x0a,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  tcphdr
                          DCD      0x00000000
                  iphdr
                          DCD      0x00000000
                  seqno
                          DCD      0x00000000
                  ackno
                          DCD      0x00000000
                  flags
000010  0000              DCB      0x00,0x00
                  tcplen
000012  0000              DCB      0x00,0x00
                  recv_flags
000014  00000000          DCB      0x00,0x00,0x00,0x00
                  recv_data
                          DCD      0x00000000
                  tcp_input_pcb
                          DCD      0x00000000
