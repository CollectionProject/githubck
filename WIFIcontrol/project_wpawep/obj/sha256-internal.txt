; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\sha256-internal.o --depend=.\obj\sha256-internal.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\sha256-internal.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\sha256-internal.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L2.30|
00001a  2001              MOVS     r0,#1
                  |L2.28|
;;;495    }
00001c  4770              BX       lr
                  |L2.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L2.28|
;;;496    
                          ENDP


                          AREA ||i.sha256_compress||, CODE, READONLY, ALIGN=2

                  sha256_compress PROC
;;;96     /* compress 512-bits */
;;;97     static int sha256_compress(struct sha256_state *md, unsigned char *buf)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;98     {
000004  b0c8              SUB      sp,sp,#0x120
000006  4603              MOV      r3,r0
000008  460a              MOV      r2,r1
;;;99     	u32 S[8], W[64], t0, t1;
;;;100    	u32 t;
;;;101    	int i;
;;;102    
;;;103    	/* copy state into S */
;;;104    	for (i = 0; i < 8; i++) {
00000a  2100              MOVS     r1,#0
00000c  e006              B        |L3.28|
                  |L3.14|
;;;105    		S[i] = md->state[i];
00000e  1d18              ADDS     r0,r3,#4
000010  f8500021          LDR      r0,[r0,r1,LSL #2]
000014  af40              ADD      r7,sp,#0x100
000016  f8470021          STR      r0,[r7,r1,LSL #2]
00001a  1c49              ADDS     r1,r1,#1              ;104
                  |L3.28|
00001c  2908              CMP      r1,#8                 ;104
00001e  dbf6              BLT      |L3.14|
;;;106    	}
;;;107    
;;;108    	/* copy the state into 512-bits into W[0..15] */
;;;109    	for (i = 0; i < 16; i++)
000020  2100              MOVS     r1,#0
000022  e016              B        |L3.82|
                  |L3.36|
;;;110    		W[i] = WPA_GET_BE32(buf + (4 * i));
000024  f8120021          LDRB     r0,[r2,r1,LSL #2]
000028  0600              LSLS     r0,r0,#24
00002a  2704              MOVS     r7,#4
00002c  fb072701          MLA      r7,r7,r1,r2
000030  787f              LDRB     r7,[r7,#1]
000032  ea404007          ORR      r0,r0,r7,LSL #16
000036  2704              MOVS     r7,#4
000038  fb072701          MLA      r7,r7,r1,r2
00003c  78bf              LDRB     r7,[r7,#2]
00003e  ea402007          ORR      r0,r0,r7,LSL #8
000042  2704              MOVS     r7,#4
000044  fb072701          MLA      r7,r7,r1,r2
000048  78ff              LDRB     r7,[r7,#3]
00004a  4338              ORRS     r0,r0,r7
00004c  f84d0021          STR      r0,[sp,r1,LSL #2]
000050  1c49              ADDS     r1,r1,#1              ;109
                  |L3.82|
000052  2910              CMP      r1,#0x10              ;109
000054  dbe6              BLT      |L3.36|
;;;111    
;;;112    	/* fill W[16..63] */
;;;113    	for (i = 16; i < 64; i++) {
000056  2110              MOVS     r1,#0x10
000058  e045              B        |L3.230|
                  |L3.90|
;;;114    		W[i] = Gamma1(W[i - 2]) + W[i - 7] + Gamma0(W[i - 15]) +
00005a  1e88              SUBS     r0,r1,#2
00005c  f85d0020          LDR      r0,[sp,r0,LSL #2]
000060  0c47              LSRS     r7,r0,#17
000062  1e88              SUBS     r0,r1,#2
000064  f85d0020          LDR      r0,[sp,r0,LSL #2]
000068  ea4730c0          ORR      r0,r7,r0,LSL #15
00006c  1e8f              SUBS     r7,r1,#2
00006e  f85d7027          LDR      r7,[sp,r7,LSL #2]
000072  ea4f4cd7          LSR      r12,r7,#19
000076  1e8f              SUBS     r7,r1,#2
000078  f85d7027          LDR      r7,[sp,r7,LSL #2]
00007c  ea4c3747          ORR      r7,r12,r7,LSL #13
000080  4078              EORS     r0,r0,r7
000082  1e8f              SUBS     r7,r1,#2
000084  f85d7027          LDR      r7,[sp,r7,LSL #2]
000088  ea802797          EOR      r7,r0,r7,LSR #10
00008c  1fc8              SUBS     r0,r1,#7
00008e  f85d0020          LDR      r0,[sp,r0,LSL #2]
000092  4407              ADD      r7,r7,r0
000094  f1a1000f          SUB      r0,r1,#0xf
000098  f85d0020          LDR      r0,[sp,r0,LSL #2]
00009c  ea4f1cd0          LSR      r12,r0,#7
0000a0  f1a1000f          SUB      r0,r1,#0xf
0000a4  f85d0020          LDR      r0,[sp,r0,LSL #2]
0000a8  ea4c6040          ORR      r0,r12,r0,LSL #25
0000ac  f1a10c0f          SUB      r12,r1,#0xf
0000b0  f85dc02c          LDR      r12,[sp,r12,LSL #2]
0000b4  ea4f489c          LSR      r8,r12,#18
0000b8  f1a10c0f          SUB      r12,r1,#0xf
0000bc  f85dc02c          LDR      r12,[sp,r12,LSL #2]
0000c0  ea483c8c          ORR      r12,r8,r12,LSL #14
0000c4  ea80000c          EOR      r0,r0,r12
0000c8  f1a10c0f          SUB      r12,r1,#0xf
0000cc  f85dc02c          LDR      r12,[sp,r12,LSL #2]
0000d0  ea8000dc          EOR      r0,r0,r12,LSR #3
0000d4  4407              ADD      r7,r7,r0
0000d6  f1a10010          SUB      r0,r1,#0x10
0000da  f85d0020          LDR      r0,[sp,r0,LSL #2]
0000de  4438              ADD      r0,r0,r7
0000e0  f84d0021          STR      r0,[sp,r1,LSL #2]
0000e4  1c49              ADDS     r1,r1,#1              ;113
                  |L3.230|
0000e6  2940              CMP      r1,#0x40              ;113
0000e8  dbb7              BLT      |L3.90|
;;;115    			W[i - 16];
;;;116    	}        
;;;117    
;;;118    	/* Compress */
;;;119    #define RND(a,b,c,d,e,f,g,h,i)                          \
;;;120    	t0 = h + Sigma1(e) + Ch(e, f, g) + K[i] + W[i];	\
;;;121    	t1 = Sigma0(a) + Maj(a, b, c);			\
;;;122    	d += t0;					\
;;;123    	h  = t0 + t1;
;;;124    
;;;125    	for (i = 0; i < 64; ++i) {
0000ea  2100              MOVS     r1,#0
0000ec  e05e              B        |L3.428|
                  |L3.238|
;;;126    		RND(S[0], S[1], S[2], S[3], S[4], S[5], S[6], S[7], i);
0000ee  9844              LDR      r0,[sp,#0x110]
0000f0  0980              LSRS     r0,r0,#6
0000f2  9f44              LDR      r7,[sp,#0x110]
0000f4  ea406087          ORR      r0,r0,r7,LSL #26
0000f8  0aff              LSRS     r7,r7,#11
0000fa  f8ddc110          LDR      r12,[sp,#0x110]
0000fe  ea47574c          ORR      r7,r7,r12,LSL #21
000102  4078              EORS     r0,r0,r7
000104  ea4f675c          LSR      r7,r12,#25
000108  ea4717cc          ORR      r7,r7,r12,LSL #7
00010c  4078              EORS     r0,r0,r7
00010e  9f47              LDR      r7,[sp,#0x11c]
000110  4407              ADD      r7,r7,r0
000112  f8ddc118          LDR      r12,[sp,#0x118]
000116  9845              LDR      r0,[sp,#0x114]
000118  ea80000c          EOR      r0,r0,r12
00011c  f8ddc110          LDR      r12,[sp,#0x110]
000120  ea00000c          AND      r0,r0,r12
000124  f8ddc118          LDR      r12,[sp,#0x118]
000128  ea80000c          EOR      r0,r0,r12
00012c  4438              ADD      r0,r0,r7
00012e  4f2a              LDR      r7,|L3.472|
000130  f8577021          LDR      r7,[r7,r1,LSL #2]
000134  4438              ADD      r0,r0,r7
000136  f85d7021          LDR      r7,[sp,r1,LSL #2]
00013a  19c4              ADDS     r4,r0,r7
00013c  9840              LDR      r0,[sp,#0x100]
00013e  0880              LSRS     r0,r0,#2
000140  9f40              LDR      r7,[sp,#0x100]
000142  ea407087          ORR      r0,r0,r7,LSL #30
000146  0b7f              LSRS     r7,r7,#13
000148  f8ddc100          LDR      r12,[sp,#0x100]
00014c  ea4747cc          ORR      r7,r7,r12,LSL #19
000150  4078              EORS     r0,r0,r7
000152  ea4f579c          LSR      r7,r12,#22
000156  ea47278c          ORR      r7,r7,r12,LSL #10
00015a  4047              EORS     r7,r7,r0
00015c  4660              MOV      r0,r12
00015e  f8ddc104          LDR      r12,[sp,#0x104]
000162  ea40000c          ORR      r0,r0,r12
000166  f8ddc108          LDR      r12,[sp,#0x108]
00016a  ea00000c          AND      r0,r0,r12
00016e  f8ddc100          LDR      r12,[sp,#0x100]
000172  f8dd8104          LDR      r8,[sp,#0x104]
000176  ea0c0c08          AND      r12,r12,r8
00017a  ea40000c          ORR      r0,r0,r12
00017e  183d              ADDS     r5,r7,r0
000180  9843              LDR      r0,[sp,#0x10c]
000182  4420              ADD      r0,r0,r4
000184  9043              STR      r0,[sp,#0x10c]
000186  1960              ADDS     r0,r4,r5
000188  9047              STR      r0,[sp,#0x11c]
;;;127    		t = S[7]; S[7] = S[6]; S[6] = S[5]; S[5] = S[4]; 
00018a  9e47              LDR      r6,[sp,#0x11c]
00018c  9846              LDR      r0,[sp,#0x118]
00018e  9047              STR      r0,[sp,#0x11c]
000190  9845              LDR      r0,[sp,#0x114]
000192  9046              STR      r0,[sp,#0x118]
000194  9844              LDR      r0,[sp,#0x110]
000196  9045              STR      r0,[sp,#0x114]
;;;128    		S[4] = S[3]; S[3] = S[2]; S[2] = S[1]; S[1] = S[0]; S[0] = t;
000198  9843              LDR      r0,[sp,#0x10c]
00019a  9044              STR      r0,[sp,#0x110]
00019c  9842              LDR      r0,[sp,#0x108]
00019e  9043              STR      r0,[sp,#0x10c]
0001a0  9841              LDR      r0,[sp,#0x104]
0001a2  9042              STR      r0,[sp,#0x108]
0001a4  9840              LDR      r0,[sp,#0x100]
0001a6  9041              STR      r0,[sp,#0x104]
0001a8  9640              STR      r6,[sp,#0x100]
0001aa  1c49              ADDS     r1,r1,#1              ;125
                  |L3.428|
0001ac  2940              CMP      r1,#0x40              ;125
0001ae  db9e              BLT      |L3.238|
;;;129    	}
;;;130    
;;;131    	/* feedback */
;;;132    	for (i = 0; i < 8; i++) {
0001b0  2100              MOVS     r1,#0
0001b2  e00a              B        |L3.458|
                  |L3.436|
;;;133    		md->state[i] = md->state[i] + S[i];
0001b4  1d18              ADDS     r0,r3,#4
0001b6  f8500021          LDR      r0,[r0,r1,LSL #2]
0001ba  af40              ADD      r7,sp,#0x100
0001bc  f8577021          LDR      r7,[r7,r1,LSL #2]
0001c0  4407              ADD      r7,r7,r0
0001c2  1d18              ADDS     r0,r3,#4
0001c4  f8407021          STR      r7,[r0,r1,LSL #2]
0001c8  1c49              ADDS     r1,r1,#1              ;132
                  |L3.458|
0001ca  2908              CMP      r1,#8                 ;132
0001cc  dbf2              BLT      |L3.436|
;;;134    	}
;;;135    	return 0;
0001ce  2000              MOVS     r0,#0
;;;136    }
0001d0  b048              ADD      sp,sp,#0x120
0001d2  e8bd83f0          POP      {r4-r9,pc}
;;;137    
                          ENDP

0001d6  0000              DCW      0x0000
                  |L3.472|
                          DCD      K

                          AREA ||i.sha256_done||, CODE, READONLY, ALIGN=1

                  sha256_done PROC
;;;201    */
;;;202    static int sha256_done(struct sha256_state *md, unsigned char *out)
000000  b570              PUSH     {r4-r6,lr}
;;;203    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;204    	int i;
;;;205    
;;;206    	if (md->curlen >= sizeof(md->buf))
000006  6a60              LDR      r0,[r4,#0x24]
000008  2840              CMP      r0,#0x40
00000a  d302              BCC      |L4.18|
;;;207    		return -1;
00000c  f04f30ff          MOV      r0,#0xffffffff
                  |L4.16|
;;;208    
;;;209    	/* increase the length of the message */
;;;210    	md->length += md->curlen * 8;
;;;211    
;;;212    	/* append the '1' bit */
;;;213    	md->buf[md->curlen++] = (unsigned char) 0x80;
;;;214    
;;;215    	/* if the length is currently above 56 bytes we append zeros
;;;216    	 * then compress.  Then we can fall back to padding zeros and length
;;;217    	 * encoding like normal.
;;;218    	 */
;;;219    	if (md->curlen > 56) {
;;;220    		while (md->curlen < 64) {
;;;221    			md->buf[md->curlen++] = (unsigned char) 0;
;;;222    		}
;;;223    		sha256_compress(md, md->buf);
;;;224    		md->curlen = 0;
;;;225    	}
;;;226    
;;;227    	/* pad upto 56 bytes of zeroes */
;;;228    	while (md->curlen < 56) {
;;;229    		md->buf[md->curlen++] = (unsigned char) 0;
;;;230    	}
;;;231    
;;;232    	/* store length */
;;;233    	WPA_PUT_BE64(md->buf + 56, md->length);
;;;234    	sha256_compress(md, md->buf);
;;;235    
;;;236    	/* copy output */
;;;237    	for (i = 0; i < 8; i++)
;;;238    		WPA_PUT_BE32(out + (4 * i), md->state[i]);
;;;239    
;;;240    	return 0;
;;;241    }
000010  bd70              POP      {r4-r6,pc}
                  |L4.18|
000012  6821              LDR      r1,[r4,#0]            ;210
000014  6a60              LDR      r0,[r4,#0x24]         ;210
000016  eb0100c0          ADD      r0,r1,r0,LSL #3       ;210
00001a  6020              STR      r0,[r4,#0]            ;210
00001c  2180              MOVS     r1,#0x80              ;213
00001e  6a62              LDR      r2,[r4,#0x24]         ;213
000020  1c50              ADDS     r0,r2,#1              ;213
000022  6260              STR      r0,[r4,#0x24]         ;213
000024  f1040028          ADD      r0,r4,#0x28           ;213
000028  5481              STRB     r1,[r0,r2]            ;213
00002a  6a60              LDR      r0,[r4,#0x24]         ;219
00002c  2838              CMP      r0,#0x38              ;219
00002e  d911              BLS      |L4.84|
000030  e006              B        |L4.64|
                  |L4.50|
000032  2100              MOVS     r1,#0                 ;221
000034  6a62              LDR      r2,[r4,#0x24]         ;221
000036  1c50              ADDS     r0,r2,#1              ;221
000038  6260              STR      r0,[r4,#0x24]         ;221
00003a  f1040028          ADD      r0,r4,#0x28           ;221
00003e  5481              STRB     r1,[r0,r2]            ;221
                  |L4.64|
000040  6a60              LDR      r0,[r4,#0x24]         ;220
000042  2840              CMP      r0,#0x40              ;220
000044  d3f5              BCC      |L4.50|
000046  f1040128          ADD      r1,r4,#0x28           ;223
00004a  4620              MOV      r0,r4                 ;223
00004c  f7fffffe          BL       sha256_compress
000050  2000              MOVS     r0,#0                 ;224
000052  6260              STR      r0,[r4,#0x24]         ;224
                  |L4.84|
000054  e006              B        |L4.100|
                  |L4.86|
000056  2100              MOVS     r1,#0                 ;229
000058  6a62              LDR      r2,[r4,#0x24]         ;229
00005a  1c50              ADDS     r0,r2,#1              ;229
00005c  6260              STR      r0,[r4,#0x24]         ;229
00005e  f1040028          ADD      r0,r4,#0x28           ;229
000062  5481              STRB     r1,[r0,r2]            ;229
                  |L4.100|
000064  6a60              LDR      r0,[r4,#0x24]         ;228
000066  2838              CMP      r0,#0x38              ;228
000068  d3f5              BCC      |L4.86|
00006a  bf00              NOP                            ;233
00006c  2000              MOVS     r0,#0                 ;233
00006e  f8840060          STRB     r0,[r4,#0x60]         ;233
000072  2100              MOVS     r1,#0                 ;233
000074  f8841061          STRB     r1,[r4,#0x61]         ;233
000078  f8841062          STRB     r1,[r4,#0x62]         ;233
00007c  f8841063          STRB     r1,[r4,#0x63]         ;233
000080  6820              LDR      r0,[r4,#0]            ;233
000082  0e01              LSRS     r1,r0,#24             ;233
000084  f8841064          STRB     r1,[r4,#0x64]         ;233
000088  6820              LDR      r0,[r4,#0]            ;233
00008a  0c01              LSRS     r1,r0,#16             ;233
00008c  f8841065          STRB     r1,[r4,#0x65]         ;233
000090  6820              LDR      r0,[r4,#0]            ;233
000092  0a01              LSRS     r1,r0,#8              ;233
000094  f8841066          STRB     r1,[r4,#0x66]         ;233
000098  6820              LDR      r0,[r4,#0]            ;233
00009a  f8840067          STRB     r0,[r4,#0x67]         ;233
00009e  bf00              NOP                            ;233
0000a0  f1040128          ADD      r1,r4,#0x28           ;234
0000a4  4620              MOV      r0,r4                 ;234
0000a6  f7fffffe          BL       sha256_compress
0000aa  2500              MOVS     r5,#0                 ;237
0000ac  e01f              B        |L4.238|
                  |L4.174|
0000ae  bf00              NOP                            ;238
0000b0  1d20              ADDS     r0,r4,#4              ;238
0000b2  f8500025          LDR      r0,[r0,r5,LSL #2]     ;238
0000b6  0e00              LSRS     r0,r0,#24             ;238
0000b8  f8060025          STRB     r0,[r6,r5,LSL #2]     ;238
0000bc  1d20              ADDS     r0,r4,#4              ;238
0000be  f8500025          LDR      r0,[r0,r5,LSL #2]     ;238
0000c2  0c00              LSRS     r0,r0,#16             ;238
0000c4  2104              MOVS     r1,#4                 ;238
0000c6  fb016105          MLA      r1,r1,r5,r6           ;238
0000ca  7048              STRB     r0,[r1,#1]            ;238
0000cc  1d20              ADDS     r0,r4,#4              ;238
0000ce  f8500025          LDR      r0,[r0,r5,LSL #2]     ;238
0000d2  0a00              LSRS     r0,r0,#8              ;238
0000d4  2104              MOVS     r1,#4                 ;238
0000d6  fb016105          MLA      r1,r1,r5,r6           ;238
0000da  7088              STRB     r0,[r1,#2]            ;238
0000dc  1d20              ADDS     r0,r4,#4              ;238
0000de  f8500025          LDR      r0,[r0,r5,LSL #2]     ;238
0000e2  2104              MOVS     r1,#4                 ;238
0000e4  fb016105          MLA      r1,r1,r5,r6           ;238
0000e8  70c8              STRB     r0,[r1,#3]            ;238
0000ea  bf00              NOP                            ;238
0000ec  1c6d              ADDS     r5,r5,#1              ;237
                  |L4.238|
0000ee  2d08              CMP      r5,#8                 ;237
0000f0  dbdd              BLT      |L4.174|
0000f2  2000              MOVS     r0,#0                 ;240
0000f4  e78c              B        |L4.16|
;;;242    
                          ENDP


                          AREA ||i.sha256_init||, CODE, READONLY, ALIGN=2

                  sha256_init PROC
;;;139    /* Initialize the hash state */
;;;140    static void sha256_init(struct sha256_state *md)
000000  2100              MOVS     r1,#0
;;;141    {
;;;142    	md->curlen = 0;
000002  6241              STR      r1,[r0,#0x24]
;;;143    	md->length = 0;
000004  6001              STR      r1,[r0,#0]
;;;144    	md->state[0] = 0x6A09E667UL;
000006  4908              LDR      r1,|L5.40|
000008  6041              STR      r1,[r0,#4]
;;;145    	md->state[1] = 0xBB67AE85UL;
00000a  4a08              LDR      r2,|L5.44|
00000c  6082              STR      r2,[r0,#8]
;;;146    	md->state[2] = 0x3C6EF372UL;
00000e  4a08              LDR      r2,|L5.48|
000010  60c2              STR      r2,[r0,#0xc]
;;;147    	md->state[3] = 0xA54FF53AUL;
000012  4a08              LDR      r2,|L5.52|
000014  6102              STR      r2,[r0,#0x10]
;;;148    	md->state[4] = 0x510E527FUL;
000016  4a08              LDR      r2,|L5.56|
000018  6142              STR      r2,[r0,#0x14]
;;;149    	md->state[5] = 0x9B05688CUL;
00001a  4a08              LDR      r2,|L5.60|
00001c  6182              STR      r2,[r0,#0x18]
;;;150    	md->state[6] = 0x1F83D9ABUL;
00001e  4a08              LDR      r2,|L5.64|
000020  61c2              STR      r2,[r0,#0x1c]
;;;151    	md->state[7] = 0x5BE0CD19UL;
000022  4a08              LDR      r2,|L5.68|
000024  6202              STR      r2,[r0,#0x20]
;;;152    }
000026  4770              BX       lr
;;;153    
                          ENDP

                  |L5.40|
                          DCD      0x6a09e667
                  |L5.44|
                          DCD      0xbb67ae85
                  |L5.48|
                          DCD      0x3c6ef372
                  |L5.52|
                          DCD      0xa54ff53a
                  |L5.56|
                          DCD      0x510e527f
                  |L5.60|
                          DCD      0x9b05688c
                  |L5.64|
                          DCD      0x1f83d9ab
                  |L5.68|
                          DCD      0x5be0cd19

                          AREA ||i.sha256_process||, CODE, READONLY, ALIGN=1

                  sha256_process PROC
;;;160    */
;;;161    static int sha256_process(struct sha256_state *md, const unsigned char *in,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;162    			  unsigned long inlen)
;;;163    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;164    	unsigned long n;
;;;165    #define block_size 64
;;;166    
;;;167    	if (md->curlen > sizeof(md->buf))
00000a  6a60              LDR      r0,[r4,#0x24]
00000c  2840              CMP      r0,#0x40
00000e  d903              BLS      |L6.24|
;;;168    		return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L6.20|
;;;169    
;;;170    	while (inlen > 0) {
;;;171    		if (md->curlen == 0 && inlen >= block_size) {
;;;172    			if (sha256_compress(md, (unsigned char *) in) < 0)
;;;173    				return -1;
;;;174    			md->length += block_size * 8;
;;;175    			in += block_size;
;;;176    			inlen -= block_size;
;;;177    		} else {
;;;178    			n = MIN(inlen, (block_size - md->curlen));
;;;179    			os_memcpy(md->buf + md->curlen, in, n);
;;;180    			md->curlen += n;
;;;181    			in += n;
;;;182    			inlen -= n;
;;;183    			if (md->curlen == block_size) {
;;;184    				if (sha256_compress(md, md->buf) < 0)
;;;185    					return -1;
;;;186    				md->length += 8 * block_size;
;;;187    				md->curlen = 0;
;;;188    			}
;;;189    		}
;;;190    	}
;;;191    
;;;192    	return 0;
;;;193    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L6.24|
000018  e03e              B        |L6.152|
                  |L6.26|
00001a  6a60              LDR      r0,[r4,#0x24]         ;171
00001c  b988              CBNZ     r0,|L6.66|
00001e  2d40              CMP      r5,#0x40              ;171
000020  d30f              BCC      |L6.66|
000022  4639              MOV      r1,r7                 ;172
000024  4620              MOV      r0,r4                 ;172
000026  f7fffffe          BL       sha256_compress
00002a  2800              CMP      r0,#0                 ;172
00002c  da02              BGE      |L6.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;173
000032  e7ef              B        |L6.20|
                  |L6.52|
000034  6820              LDR      r0,[r4,#0]            ;174
000036  f5007000          ADD      r0,r0,#0x200          ;174
00003a  6020              STR      r0,[r4,#0]            ;174
00003c  3740              ADDS     r7,r7,#0x40           ;175
00003e  3d40              SUBS     r5,r5,#0x40           ;176
000040  e02a              B        |L6.152|
                  |L6.66|
000042  6a60              LDR      r0,[r4,#0x24]         ;178
000044  f1c00040          RSB      r0,r0,#0x40           ;178
000048  42a8              CMP      r0,r5                 ;178
00004a  d901              BLS      |L6.80|
00004c  4628              MOV      r0,r5                 ;178
00004e  e002              B        |L6.86|
                  |L6.80|
000050  6a60              LDR      r0,[r4,#0x24]         ;178
000052  f1c00040          RSB      r0,r0,#0x40           ;178
                  |L6.86|
000056  4606              MOV      r6,r0                 ;178
000058  f1040128          ADD      r1,r4,#0x28           ;179
00005c  6a62              LDR      r2,[r4,#0x24]         ;179
00005e  1850              ADDS     r0,r2,r1              ;179
000060  4632              MOV      r2,r6                 ;179
000062  4639              MOV      r1,r7                 ;179
000064  f7fffffe          BL       os_memcpy
000068  6a60              LDR      r0,[r4,#0x24]         ;180
00006a  4430              ADD      r0,r0,r6              ;180
00006c  6260              STR      r0,[r4,#0x24]         ;180
00006e  4437              ADD      r7,r7,r6              ;181
000070  1bad              SUBS     r5,r5,r6              ;182
000072  6a60              LDR      r0,[r4,#0x24]         ;183
000074  2840              CMP      r0,#0x40              ;183
000076  d10f              BNE      |L6.152|
000078  f1040128          ADD      r1,r4,#0x28           ;184
00007c  4620              MOV      r0,r4                 ;184
00007e  f7fffffe          BL       sha256_compress
000082  2800              CMP      r0,#0                 ;184
000084  da02              BGE      |L6.140|
000086  f04f30ff          MOV      r0,#0xffffffff        ;185
00008a  e7c3              B        |L6.20|
                  |L6.140|
00008c  6820              LDR      r0,[r4,#0]            ;186
00008e  f5007000          ADD      r0,r0,#0x200          ;186
000092  6020              STR      r0,[r4,#0]            ;186
000094  2000              MOVS     r0,#0                 ;187
000096  6260              STR      r0,[r4,#0x24]         ;187
                  |L6.152|
000098  2d00              CMP      r5,#0                 ;170
00009a  d1be              BNE      |L6.26|
00009c  2000              MOVS     r0,#0                 ;192
00009e  e7b9              B        |L6.20|
;;;194    
                          ENDP


                          AREA ||i.sha256_vector||, CODE, READONLY, ALIGN=1

                  sha256_vector PROC
;;;40      */
;;;41     int sha256_vector(size_t num_elem, const u8 *addr[], const size_t *len,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;42     		  u8 *mac)
;;;43     {
000004  b09a              SUB      sp,sp,#0x68
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
;;;44     	struct sha256_state ctx;
;;;45     	size_t i;
;;;46     
;;;47     	sha256_init(&ctx);
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       sha256_init
;;;48     	for (i = 0; i < num_elem; i++)
000014  2400              MOVS     r4,#0
000016  e00d              B        |L7.52|
                  |L7.24|
;;;49     		if (sha256_process(&ctx, addr[i], len[i]))
000018  f8572024          LDR      r2,[r7,r4,LSL #2]
00001c  f8561024          LDR      r1,[r6,r4,LSL #2]
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       sha256_process
000026  b120              CBZ      r0,|L7.50|
;;;50     			return -1;
000028  f04f30ff          MOV      r0,#0xffffffff
                  |L7.44|
;;;51     	if (sha256_done(&ctx, mac))
;;;52     		return -1;
;;;53     	return 0;
;;;54     }
00002c  b01a              ADD      sp,sp,#0x68
00002e  e8bd81f0          POP      {r4-r8,pc}
                  |L7.50|
000032  1c64              ADDS     r4,r4,#1              ;48
                  |L7.52|
000034  42ac              CMP      r4,r5                 ;48
000036  d3ef              BCC      |L7.24|
000038  4641              MOV      r1,r8                 ;51
00003a  4668              MOV      r0,sp                 ;51
00003c  f7fffffe          BL       sha256_done
000040  b110              CBZ      r0,|L7.72|
000042  f04f30ff          MOV      r0,#0xffffffff        ;52
000046  e7f1              B        |L7.44|
                  |L7.72|
000048  2000              MOVS     r0,#0                 ;53
00004a  e7ef              B        |L7.44|
;;;55     
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L12.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L12.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L12.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L12.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L15.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L15.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L15.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L15.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L21.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L21.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  K
                          DCD      0x428a2f98
                          DCD      0x71374491
                          DCD      0xb5c0fbcf
                          DCD      0xe9b5dba5
                          DCD      0x3956c25b
                          DCD      0x59f111f1
                          DCD      0x923f82a4
                          DCD      0xab1c5ed5
                          DCD      0xd807aa98
                          DCD      0x12835b01
                          DCD      0x243185be
                          DCD      0x550c7dc3
                          DCD      0x72be5d74
                          DCD      0x80deb1fe
                          DCD      0x9bdc06a7
                          DCD      0xc19bf174
                          DCD      0xe49b69c1
                          DCD      0xefbe4786
                          DCD      0x0fc19dc6
                          DCD      0x240ca1cc
                          DCD      0x2de92c6f
                          DCD      0x4a7484aa
                          DCD      0x5cb0a9dc
                          DCD      0x76f988da
                          DCD      0x983e5152
                          DCD      0xa831c66d
                          DCD      0xb00327c8
                          DCD      0xbf597fc7
                          DCD      0xc6e00bf3
                          DCD      0xd5a79147
                          DCD      0x06ca6351
                          DCD      0x14292967
                          DCD      0x27b70a85
                          DCD      0x2e1b2138
                          DCD      0x4d2c6dfc
                          DCD      0x53380d13
                          DCD      0x650a7354
                          DCD      0x766a0abb
                          DCD      0x81c2c92e
                          DCD      0x92722c85
                          DCD      0xa2bfe8a1
                          DCD      0xa81a664b
                          DCD      0xc24b8b70
                          DCD      0xc76c51a3
                          DCD      0xd192e819
                          DCD      0xd6990624
                          DCD      0xf40e3585
                          DCD      0x106aa070
                          DCD      0x19a4c116
                          DCD      0x1e376c08
                          DCD      0x2748774c
                          DCD      0x34b0bcb5
                          DCD      0x391c0cb3
                          DCD      0x4ed8aa4a
                          DCD      0x5b9cca4f
                          DCD      0x682e6ff3
                          DCD      0x748f82ee
                          DCD      0x78a5636f
                          DCD      0x84c87814
                          DCD      0x8cc70208
                          DCD      0x90befffa
                          DCD      0xa4506ceb
                          DCD      0xbef9a3f7
                          DCD      0xc67178f2
