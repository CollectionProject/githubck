; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\inet.o --depend=.\obj\inet.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\inet.crf ..\lwIP\src\core\ipv4\inet.c]
                          THUMB

                          AREA ||i.htonl||, CODE, READONLY, ALIGN=1

                  htonl PROC
;;;257    u32_t
;;;258    htonl(u32_t n)
000000  4601              MOV      r1,r0
;;;259    {
;;;260      return ((n & 0xff) << 24) |
000002  0608              LSLS     r0,r1,#24
000004  f401427f          AND      r2,r1,#0xff00
000008  ea402002          ORR      r0,r0,r2,LSL #8
00000c  f401027f          AND      r2,r1,#0xff0000
000010  ea402012          ORR      r0,r0,r2,LSR #8
000014  ea406011          ORR      r0,r0,r1,LSR #24
;;;261        ((n & 0xff00) << 8) |
;;;262        ((n & 0xff0000UL) >> 8) |
;;;263        ((n & 0xff000000UL) >> 24);
;;;264    }
000018  4770              BX       lr
;;;265    
                          ENDP


                          AREA ||i.htons||, CODE, READONLY, ALIGN=1

                  htons PROC
;;;233    u16_t
;;;234    htons(u16_t n)
000000  4601              MOV      r1,r0
;;;235    {
;;;236      return ((n & 0xff) << 8) | ((n & 0xff00) >> 8);
000002  b2c8              UXTB     r0,r1
000004  0a0a              LSRS     r2,r1,#8
000006  ea422000          ORR      r0,r2,r0,LSL #8
;;;237    }
00000a  4770              BX       lr
;;;238    
                          ENDP


                          AREA ||i.inet_addr||, CODE, READONLY, ALIGN=1

                  inet_addr PROC
;;;60     u32_t
;;;61     inet_addr(const char *cp)
000000  b518              PUSH     {r3,r4,lr}
;;;62     {
000002  4604              MOV      r4,r0
;;;63       struct in_addr val;
;;;64     
;;;65       if (inet_aton(cp, &val)) {
000004  4669              MOV      r1,sp
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       inet_aton
00000c  b108              CBZ      r0,|L3.18|
;;;66         return (val.s_addr);
00000e  9800              LDR      r0,[sp,#0]
                  |L3.16|
;;;67       }
;;;68       return (INADDR_NONE);
;;;69     }
000010  bd18              POP      {r3,r4,pc}
                  |L3.18|
000012  f04f30ff          MOV      r0,#0xffffffff        ;68
000016  e7fb              B        |L3.16|
;;;70     
                          ENDP


                          AREA ||i.inet_aton||, CODE, READONLY, ALIGN=1

                  inet_aton PROC
;;;82     int
;;;83     inet_aton(const char *cp, struct in_addr *addr)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;84     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;85       u32_t val;
;;;86       u8_t base;
;;;87       char c;
;;;88       u32_t parts[4];
;;;89       u32_t *pp = parts;
000008  466e              MOV      r6,sp
;;;90     
;;;91       c = *cp;
00000a  782b              LDRB     r3,[r5,#0]
;;;92       for (;;) {
00000c  bf00              NOP      
                  |L4.14|
;;;93         /*
;;;94          * Collect number up to ``.''.
;;;95          * Values are specified as for C:
;;;96          * 0x=hex, 0=octal, 1-9=decimal.
;;;97          */
;;;98         if (!isdigit(c))
00000e  2b30              CMP      r3,#0x30
000010  db01              BLT      |L4.22|
000012  2b39              CMP      r3,#0x39
000014  dd03              BLE      |L4.30|
                  |L4.22|
;;;99           return (0);
000016  2000              MOVS     r0,#0
                  |L4.24|
;;;100        val = 0;
;;;101        base = 10;
;;;102        if (c == '0') {
;;;103          c = *++cp;
;;;104          if (c == 'x' || c == 'X') {
;;;105            base = 16;
;;;106            c = *++cp;
;;;107          } else
;;;108            base = 8;
;;;109        }
;;;110        for (;;) {
;;;111          if (isdigit(c)) {
;;;112            val = (val * base) + (int)(c - '0');
;;;113            c = *++cp;
;;;114          } else if (base == 16 && isxdigit(c)) {
;;;115            val = (val << 4) | (int)(c + 10 - (islower(c) ? 'a' : 'A'));
;;;116            c = *++cp;
;;;117          } else
;;;118            break;
;;;119        }
;;;120        if (c == '.') {
;;;121          /*
;;;122           * Internet format:
;;;123           *  a.b.c.d
;;;124           *  a.b.c   (with c treated as 16 bits)
;;;125           *  a.b (with b treated as 24 bits)
;;;126           */
;;;127          if (pp >= parts + 3)
;;;128            return (0);
;;;129          *pp++ = val;
;;;130          c = *++cp;
;;;131        } else
;;;132          break;
;;;133      }
;;;134      /*
;;;135       * Check for trailing characters.
;;;136       */
;;;137      if (c != '\0' && !isspace(c))
;;;138        return (0);
;;;139      /*
;;;140       * Concoct the address according to
;;;141       * the number of parts specified.
;;;142       */
;;;143      switch (pp - parts + 1) {
;;;144    
;;;145      case 0:
;;;146        return (0);       /* initial nondigit */
;;;147    
;;;148      case 1:             /* a -- 32 bits */
;;;149        break;
;;;150    
;;;151      case 2:             /* a.b -- 8.24 bits */
;;;152        if (val > 0xffffffUL)
;;;153          return (0);
;;;154        val |= parts[0] << 24;
;;;155        break;
;;;156    
;;;157      case 3:             /* a.b.c -- 8.8.16 bits */
;;;158        if (val > 0xffff)
;;;159          return (0);
;;;160        val |= (parts[0] << 24) | (parts[1] << 16);
;;;161        break;
;;;162    
;;;163      case 4:             /* a.b.c.d -- 8.8.8.8 bits */
;;;164        if (val > 0xff)
;;;165          return (0);
;;;166        val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
;;;167        break;
;;;168      }
;;;169      if (addr)
;;;170        addr->s_addr = htonl(val);
;;;171      return (1);
;;;172    }
000018  b004              ADD      sp,sp,#0x10
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L4.30|
00001e  2400              MOVS     r4,#0                 ;100
000020  f04f080a          MOV      r8,#0xa               ;101
000024  2b30              CMP      r3,#0x30              ;102
000026  d10e              BNE      |L4.70|
000028  1c68              ADDS     r0,r5,#1              ;103
00002a  4605              MOV      r5,r0                 ;103
00002c  7803              LDRB     r3,[r0,#0]            ;103
00002e  2b78              CMP      r3,#0x78              ;104
000030  d001              BEQ      |L4.54|
000032  2b58              CMP      r3,#0x58              ;104
000034  d105              BNE      |L4.66|
                  |L4.54|
000036  f04f0810          MOV      r8,#0x10              ;105
00003a  1c68              ADDS     r0,r5,#1              ;106
00003c  4605              MOV      r5,r0                 ;106
00003e  7803              LDRB     r3,[r0,#0]            ;106
000040  e001              B        |L4.70|
                  |L4.66|
000042  f04f0808          MOV      r8,#8                 ;108
                  |L4.70|
000046  bf00              NOP                            ;110
                  |L4.72|
000048  2b30              CMP      r3,#0x30              ;111
00004a  db09              BLT      |L4.96|
00004c  2b39              CMP      r3,#0x39              ;111
00004e  dc07              BGT      |L4.96|
000050  f1a30030          SUB      r0,r3,#0x30           ;112
000054  fb040408          MLA      r4,r4,r8,r0           ;112
000058  1c68              ADDS     r0,r5,#1              ;113
00005a  4605              MOV      r5,r0                 ;113
00005c  7803              LDRB     r3,[r0,#0]            ;113
00005e  e7f3              B        |L4.72|
                  |L4.96|
000060  f1b80f10          CMP      r8,#0x10              ;114
000064  d11b              BNE      |L4.158|
000066  2b30              CMP      r3,#0x30              ;114
000068  db01              BLT      |L4.110|
00006a  2b39              CMP      r3,#0x39              ;114
00006c  dd07              BLE      |L4.126|
                  |L4.110|
00006e  2b61              CMP      r3,#0x61              ;114
000070  db01              BLT      |L4.118|
000072  2b66              CMP      r3,#0x66              ;114
000074  dd03              BLE      |L4.126|
                  |L4.118|
000076  2b41              CMP      r3,#0x41              ;114
000078  db11              BLT      |L4.158|
00007a  2b46              CMP      r3,#0x46              ;114
00007c  dc0f              BGT      |L4.158|
                  |L4.126|
00007e  2b61              CMP      r3,#0x61              ;115
000080  db03              BLT      |L4.138|
000082  2b7a              CMP      r3,#0x7a              ;115
000084  dc01              BGT      |L4.138|
000086  2161              MOVS     r1,#0x61              ;115
000088  e000              B        |L4.140|
                  |L4.138|
00008a  2141              MOVS     r1,#0x41              ;115
                  |L4.140|
00008c  f103000a          ADD      r0,r3,#0xa            ;115
000090  1a40              SUBS     r0,r0,r1              ;115
000092  ea401404          ORR      r4,r0,r4,LSL #4       ;115
000096  1c68              ADDS     r0,r5,#1              ;116
000098  4605              MOV      r5,r0                 ;116
00009a  7803              LDRB     r3,[r0,#0]            ;116
00009c  e7d4              B        |L4.72|
                  |L4.158|
00009e  bf00              NOP                            ;118
0000a0  bf00              NOP                            ;118
0000a2  2b2e              CMP      r3,#0x2e              ;120
0000a4  d109              BNE      |L4.186|
0000a6  a803              ADD      r0,sp,#0xc            ;127
0000a8  4286              CMP      r6,r0                 ;127
0000aa  d301              BCC      |L4.176|
0000ac  2000              MOVS     r0,#0                 ;128
0000ae  e7b3              B        |L4.24|
                  |L4.176|
0000b0  c610              STM      r6!,{r4}              ;129
0000b2  1c68              ADDS     r0,r5,#1              ;130
0000b4  4605              MOV      r5,r0                 ;130
0000b6  7803              LDRB     r3,[r0,#0]            ;130
0000b8  e7a9              B        |L4.14|
                  |L4.186|
0000ba  bf00              NOP                            ;132
0000bc  bf00              NOP                            ;132
0000be  b16b              CBZ      r3,|L4.220|
0000c0  2b20              CMP      r3,#0x20              ;137
0000c2  d00b              BEQ      |L4.220|
0000c4  2b0c              CMP      r3,#0xc               ;137
0000c6  d009              BEQ      |L4.220|
0000c8  2b0a              CMP      r3,#0xa               ;137
0000ca  d007              BEQ      |L4.220|
0000cc  2b0d              CMP      r3,#0xd               ;137
0000ce  d005              BEQ      |L4.220|
0000d0  2b09              CMP      r3,#9                 ;137
0000d2  d003              BEQ      |L4.220|
0000d4  2b0b              CMP      r3,#0xb               ;137
0000d6  d001              BEQ      |L4.220|
0000d8  2000              MOVS     r0,#0                 ;138
0000da  e79d              B        |L4.24|
                  |L4.220|
0000dc  4668              MOV      r0,sp                 ;143
0000de  1a30              SUBS     r0,r6,r0              ;143
0000e0  2101              MOVS     r1,#1                 ;143
0000e2  eb0100a0          ADD      r0,r1,r0,ASR #2       ;143
0000e6  2805              CMP      r0,#5                 ;143
0000e8  d22a              BCS      |L4.320|
0000ea  e8dff000          TBB      [pc,r0]               ;143
0000ee  0305              DCB      0x03,0x05
0000f0  060f1b00          DCB      0x06,0x0f,0x1b,0x00
0000f4  2000              MOVS     r0,#0                 ;146
0000f6  e78f              B        |L4.24|
0000f8  e022              B        |L4.320|
0000fa  f1b47f80          CMP      r4,#0x1000000         ;152
0000fe  d301              BCC      |L4.260|
000100  2000              MOVS     r0,#0                 ;153
000102  e789              B        |L4.24|
                  |L4.260|
000104  9800              LDR      r0,[sp,#0]            ;154
000106  ea446400          ORR      r4,r4,r0,LSL #24      ;154
00010a  e019              B        |L4.320|
00010c  f5b43f80          CMP      r4,#0x10000           ;158
000110  d301              BCC      |L4.278|
000112  2000              MOVS     r0,#0                 ;159
000114  e780              B        |L4.24|
                  |L4.278|
000116  9800              LDR      r0,[sp,#0]            ;160
000118  0600              LSLS     r0,r0,#24             ;160
00011a  9901              LDR      r1,[sp,#4]            ;160
00011c  ea404001          ORR      r0,r0,r1,LSL #16      ;160
000120  4304              ORRS     r4,r4,r0              ;160
000122  e00d              B        |L4.320|
000124  2cff              CMP      r4,#0xff              ;164
000126  d901              BLS      |L4.300|
000128  2000              MOVS     r0,#0                 ;165
00012a  e775              B        |L4.24|
                  |L4.300|
00012c  9800              LDR      r0,[sp,#0]            ;166
00012e  0600              LSLS     r0,r0,#24             ;166
000130  9901              LDR      r1,[sp,#4]            ;166
000132  ea404001          ORR      r0,r0,r1,LSL #16      ;166
000136  9902              LDR      r1,[sp,#8]            ;166
000138  ea402001          ORR      r0,r0,r1,LSL #8       ;166
00013c  4304              ORRS     r4,r4,r0              ;166
00013e  bf00              NOP                            ;167
                  |L4.320|
000140  bf00              NOP                            ;149
000142  b11f              CBZ      r7,|L4.332|
000144  4620              MOV      r0,r4                 ;170
000146  f7fffffe          BL       htonl
00014a  6038              STR      r0,[r7,#0]            ;170
                  |L4.332|
00014c  2001              MOVS     r0,#1                 ;171
00014e  e763              B        |L4.24|
;;;173    
                          ENDP


                          AREA ||i.inet_ntoa||, CODE, READONLY, ALIGN=2

                  inet_ntoa PROC
;;;182    char *
;;;183    inet_ntoa(struct in_addr addr)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;184    {
000002  b082              SUB      sp,sp,#8
;;;185      static char str[16];
;;;186      u32_t s_addr = addr.s_addr;
000004  9802              LDR      r0,[sp,#8]
000006  9001              STR      r0,[sp,#4]
;;;187      char inv[3];
;;;188      char *rp;
;;;189      u8_t *ap;
;;;190      u8_t rem;
;;;191      u8_t n;
;;;192      u8_t i;
;;;193    
;;;194      rp = str;
000008  4919              LDR      r1,|L5.112|
;;;195      ap = (u8_t *)&s_addr;
00000a  aa01              ADD      r2,sp,#4
;;;196      for(n = 0; n < 4; n++) {
00000c  2400              MOVS     r4,#0
00000e  e027              B        |L5.96|
                  |L5.16|
;;;197        i = 0;
000010  2300              MOVS     r3,#0
;;;198        do {
000012  bf00              NOP      
                  |L5.20|
;;;199          rem = *ap % (u8_t)10;
000014  7810              LDRB     r0,[r2,#0]
000016  260a              MOVS     r6,#0xa
000018  fb90f7f6          SDIV     r7,r0,r6
00001c  fb060017          MLS      r0,r6,r7,r0
000020  b2c5              UXTB     r5,r0
;;;200          *ap /= (u8_t)10;
000022  7810              LDRB     r0,[r2,#0]
000024  fb90f0f6          SDIV     r0,r0,r6
000028  7010              STRB     r0,[r2,#0]
;;;201          inv[i++] = '0' + rem;
00002a  f1050030          ADD      r0,r5,#0x30
00002e  b2c7              UXTB     r7,r0
000030  4618              MOV      r0,r3
000032  1c5e              ADDS     r6,r3,#1
000034  b2f3              UXTB     r3,r6
000036  f80d7000          STRB     r7,[sp,r0]
;;;202        } while(*ap);
00003a  7810              LDRB     r0,[r2,#0]
00003c  2800              CMP      r0,#0
00003e  d1e9              BNE      |L5.20|
;;;203        while(i--)
000040  e003              B        |L5.74|
                  |L5.66|
;;;204          *rp++ = inv[i];
000042  f81d0003          LDRB     r0,[sp,r3]
000046  f8010b01          STRB     r0,[r1],#1
                  |L5.74|
00004a  0018              MOVS     r0,r3                 ;203
00004c  f1a30601          SUB      r6,r3,#1              ;203
000050  b2f3              UXTB     r3,r6                 ;203
000052  d1f6              BNE      |L5.66|
;;;205        *rp++ = '.';
000054  202e              MOVS     r0,#0x2e
000056  f8010b01          STRB     r0,[r1],#1
;;;206        ap++;
00005a  1c52              ADDS     r2,r2,#1
00005c  1c60              ADDS     r0,r4,#1              ;196
00005e  b2c4              UXTB     r4,r0                 ;196
                  |L5.96|
000060  2c04              CMP      r4,#4                 ;196
000062  dbd5              BLT      |L5.16|
;;;207      }
;;;208      *--rp = 0;
000064  2600              MOVS     r6,#0
000066  1e48              SUBS     r0,r1,#1
000068  4601              MOV      r1,r0
00006a  7006              STRB     r6,[r0,#0]
;;;209      return str;
00006c  4800              LDR      r0,|L5.112|
;;;210    }
00006e  bdfe              POP      {r1-r7,pc}
;;;211    
                          ENDP

                  |L5.112|
                          DCD      ||str||

                          AREA ||i.ntohl||, CODE, READONLY, ALIGN=1

                  ntohl PROC
;;;272    u32_t
;;;273    ntohl(u32_t n)
000000  b500              PUSH     {lr}
;;;274    {
000002  4603              MOV      r3,r0
;;;275      return htonl(n);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       htonl
;;;276    }
00000a  bd00              POP      {pc}
;;;277    
                          ENDP


                          AREA ||i.ntohs||, CODE, READONLY, ALIGN=1

                  ntohs PROC
;;;245    u16_t
;;;246    ntohs(u16_t n)
000000  b500              PUSH     {lr}
;;;247    {
000002  4603              MOV      r3,r0
;;;248      return htons(n);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       htons
;;;249    }
00000a  bd00              POP      {pc}
;;;250    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ||str||
                          %        16
