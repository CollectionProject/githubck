; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_mschapv2.o --depend=.\obj\eap_mschapv2.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_mschapv2.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_mschapv2.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_mschapv2_challenge||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_challenge PROC
;;;243     */
;;;244    static struct wpabuf * eap_mschapv2_challenge(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;245    	struct eap_sm *sm, struct eap_mschapv2_data *data,
;;;246    	struct eap_method_ret *ret, const struct eap_mschapv2_hdr *req,
;;;247    	size_t req_len, u8 id)
;;;248    {
000004  b083              SUB      sp,sp,#0xc
000006  4683              MOV      r11,r0
000008  460f              MOV      r7,r1
00000a  4614              MOV      r4,r2
00000c  4698              MOV      r8,r3
00000e  f8dd9040          LDR      r9,[sp,#0x40]
;;;249    	size_t len, challenge_len;
;;;250    	const u8 *pos, *challenge;
;;;251    
;;;252    	if (eap_get_config_identity(sm, &len) == NULL ||
000012  a902              ADD      r1,sp,#8
000014  4658              MOV      r0,r11
000016  f7fffffe          BL       eap_get_config_identity
00001a  b120              CBZ      r0,|L2.38|
;;;253    	    eap_get_config_password(sm, &len) == NULL)
00001c  a902              ADD      r1,sp,#8
00001e  4658              MOV      r0,r11
000020  f7fffffe          BL       eap_get_config_password
000024  b918              CBNZ     r0,|L2.46|
                  |L2.38|
;;;254    		return NULL;
000026  2000              MOVS     r0,#0
                  |L2.40|
;;;255    
;;;256    	wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: Received challenge");
;;;257    	if (req_len < sizeof(*req) + 1) {
;;;258    		wpa_printf(MSG_INFO, "EAP-MSCHAPV2: Too short challenge data "
;;;259    			   "(len %lu)", (unsigned long) req_len);
;;;260    		ret->ignore = TRUE;
;;;261    		return NULL;
;;;262    	}
;;;263    	pos = (const u8 *) (req + 1);
;;;264    	challenge_len = *pos++;
;;;265    	len = req_len - sizeof(*req) - 1;
;;;266    	if (challenge_len != MSCHAPV2_CHAL_LEN) {
;;;267    		wpa_printf(MSG_INFO, "EAP-MSCHAPV2: Invalid challenge length "
;;;268    			   "%lu", (unsigned long) challenge_len);
;;;269    		ret->ignore = TRUE;
;;;270    		return NULL;
;;;271    	}
;;;272    
;;;273    	if (len < challenge_len) {
;;;274    		wpa_printf(MSG_INFO, "EAP-MSCHAPV2: Too short challenge"
;;;275    			   " packet: len=%lu challenge_len=%lu",
;;;276    			   (unsigned long) len, (unsigned long) challenge_len);
;;;277    		ret->ignore = TRUE;
;;;278    		return NULL;
;;;279    	}
;;;280    
;;;281    	if (data->passwd_change_challenge_valid) {
;;;282    		wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: Using challenge from the "
;;;283    			   "failure message");
;;;284    		challenge = data->passwd_change_challenge;
;;;285    	} else
;;;286    		challenge = pos;
;;;287    	pos += challenge_len;
;;;288    	len -= challenge_len;
;;;289    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-MSCHAPV2: Authentication Servername",
;;;290    		    pos, len);
;;;291    
;;;292    	ret->ignore = FALSE;
;;;293    	ret->methodState = METHOD_MAY_CONT;
;;;294    	ret->decision = DECISION_FAIL;
;;;295    	ret->allowNotifications = TRUE;
;;;296    
;;;297    	return eap_mschapv2_challenge_reply(sm, data, id, req->mschapv2_id,
;;;298    					    challenge);
;;;299    }
000028  b007              ADD      sp,sp,#0x1c
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.46|
00002e  a12a              ADR      r1,|L2.216|
000030  2000              MOVS     r0,#0                 ;256
000032  f7fffffe          BL       wpa_printf
000036  f1b90f05          CMP      r9,#5                 ;257
00003a  d208              BCS      |L2.78|
00003c  464a              MOV      r2,r9                 ;258
00003e  a12f              ADR      r1,|L2.252|
000040  2000              MOVS     r0,#0                 ;258
000042  f7fffffe          BL       wpa_printf
000046  2001              MOVS     r0,#1                 ;260
000048  6020              STR      r0,[r4,#0]            ;260
00004a  2000              MOVS     r0,#0                 ;261
00004c  e7ec              B        |L2.40|
                  |L2.78|
00004e  f1080604          ADD      r6,r8,#4              ;263
000052  f8165b01          LDRB     r5,[r6],#1            ;264
000056  f1a90005          SUB      r0,r9,#5              ;265
00005a  9002              STR      r0,[sp,#8]            ;265
00005c  2d10              CMP      r5,#0x10              ;266
00005e  d008              BEQ      |L2.114|
000060  462a              MOV      r2,r5                 ;267
000062  a133              ADR      r1,|L2.304|
000064  2000              MOVS     r0,#0                 ;267
000066  f7fffffe          BL       wpa_printf
00006a  2001              MOVS     r0,#1                 ;269
00006c  6020              STR      r0,[r4,#0]            ;269
00006e  2000              MOVS     r0,#0                 ;270
000070  e7da              B        |L2.40|
                  |L2.114|
000072  9802              LDR      r0,[sp,#8]            ;273
000074  42a8              CMP      r0,r5                 ;273
000076  d209              BCS      |L2.140|
000078  462b              MOV      r3,r5                 ;274
00007a  4938              LDR      r1,|L2.348|
00007c  2000              MOVS     r0,#0                 ;274
00007e  9a02              LDR      r2,[sp,#8]            ;274
000080  f7fffffe          BL       wpa_printf
000084  2001              MOVS     r0,#1                 ;277
000086  6020              STR      r0,[r4,#0]            ;277
000088  2000              MOVS     r0,#0                 ;278
00008a  e7cd              B        |L2.40|
                  |L2.140|
00008c  6af8              LDR      r0,[r7,#0x2c]         ;281
00008e  b130              CBZ      r0,|L2.158|
000090  a133              ADR      r1,|L2.352|
000092  2000              MOVS     r0,#0                 ;282
000094  f7fffffe          BL       wpa_printf
000098  f1070a1c          ADD      r10,r7,#0x1c          ;284
00009c  e000              B        |L2.160|
                  |L2.158|
00009e  46b2              MOV      r10,r6                ;286
                  |L2.160|
0000a0  442e              ADD      r6,r6,r5              ;287
0000a2  9802              LDR      r0,[sp,#8]            ;288
0000a4  1b40              SUBS     r0,r0,r5              ;288
0000a6  9002              STR      r0,[sp,#8]            ;288
0000a8  4632              MOV      r2,r6                 ;289
0000aa  a13b              ADR      r1,|L2.408|
0000ac  2000              MOVS     r0,#0                 ;289
0000ae  9b02              LDR      r3,[sp,#8]            ;289
0000b0  f7fffffe          BL       wpa_hexdump_ascii
0000b4  2000              MOVS     r0,#0                 ;292
0000b6  6020              STR      r0,[r4,#0]            ;292
0000b8  2003              MOVS     r0,#3                 ;293
0000ba  7120              STRB     r0,[r4,#4]            ;293
0000bc  2000              MOVS     r0,#0                 ;294
0000be  7160              STRB     r0,[r4,#5]            ;294
0000c0  2001              MOVS     r0,#1                 ;295
0000c2  60a0              STR      r0,[r4,#8]            ;295
0000c4  f8cda000          STR      r10,[sp,#0]           ;297
0000c8  f8983001          LDRB     r3,[r8,#1]            ;297
0000cc  4639              MOV      r1,r7                 ;297
0000ce  4658              MOV      r0,r11                ;297
0000d0  9a11              LDR      r2,[sp,#0x44]         ;297
0000d2  f7fffffe          BL       eap_mschapv2_challenge_reply
0000d6  e7a7              B        |L2.40|
;;;300    
                          ENDP

                  |L2.216|
0000d8  4541502d          DCB      "EAP-MSCHAPV2: Received challenge",0
0000dc  4d534348
0000e0  41505632
0000e4  3a205265
0000e8  63656976
0000ec  65642063
0000f0  68616c6c
0000f4  656e6765
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L2.252|
0000fc  4541502d          DCB      "EAP-MSCHAPV2: Too short challenge data (len %lu)",0
000100  4d534348
000104  41505632
000108  3a20546f
00010c  6f207368
000110  6f727420
000114  6368616c
000118  6c656e67
00011c  65206461
000120  74612028
000124  6c656e20
000128  256c7529
00012c  00      
00012d  00                DCB      0
00012e  00                DCB      0
00012f  00                DCB      0
                  |L2.304|
000130  4541502d          DCB      "EAP-MSCHAPV2: Invalid challenge length %lu",0
000134  4d534348
000138  41505632
00013c  3a20496e
000140  76616c69
000144  64206368
000148  616c6c65
00014c  6e676520
000150  6c656e67
000154  74682025
000158  6c7500  
00015b  00                DCB      0
                  |L2.348|
                          DCD      ||.constdata||
                  |L2.352|
000160  4541502d          DCB      "EAP-MSCHAPV2: Using challenge from the failure message",0
000164  4d534348
000168  41505632
00016c  3a205573
000170  696e6720
000174  6368616c
000178  6c656e67
00017c  65206672
000180  6f6d2074
000184  68652066
000188  61696c75
00018c  7265206d
000190  65737361
000194  676500  
000197  00                DCB      0
                  |L2.408|
000198  4541502d          DCB      "EAP-MSCHAPV2: Authentication Servername",0
00019c  4d534348
0001a0  41505632
0001a4  3a204175
0001a8  7468656e
0001ac  74696361
0001b0  74696f6e
0001b4  20536572
0001b8  7665726e
0001bc  616d6500

                          AREA ||i.eap_mschapv2_challenge_reply||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_challenge_reply PROC
;;;151    
;;;152    static struct wpabuf * eap_mschapv2_challenge_reply(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;153    	struct eap_sm *sm, struct eap_mschapv2_data *data, u8 id,
;;;154    	u8 mschapv2_id, const u8 *auth_challenge)
;;;155    {
000004  b08b              SUB      sp,sp,#0x2c
000006  460c              MOV      r4,r1
000008  4693              MOV      r11,r2
;;;156    	struct wpabuf *resp;
;;;157    	struct eap_mschapv2_hdr *ms;
;;;158    	u8 *peer_challenge;
;;;159    	int ms_len;
;;;160    	struct ms_response *r;
;;;161    	size_t identity_len, password_len;
;;;162    	const u8 *identity, *password;
;;;163    	int pwhash;
;;;164    
;;;165    	wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: Generating Challenge Response");
00000a  a14d              ADR      r1,|L3.320|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       wpa_printf
;;;166    
;;;167    	identity = eap_get_config_identity(sm, &identity_len);
000012  a90a              ADD      r1,sp,#0x28
000014  980b              LDR      r0,[sp,#0x2c]
000016  f7fffffe          BL       eap_get_config_identity
00001a  4682              MOV      r10,r0
;;;168    	password = eap_get_config_password2(sm, &password_len, &pwhash);
00001c  aa07              ADD      r2,sp,#0x1c
00001e  a909              ADD      r1,sp,#0x24
000020  980b              LDR      r0,[sp,#0x2c]
000022  f7fffffe          BL       eap_get_config_password2
000026  9008              STR      r0,[sp,#0x20]
;;;169    	if (identity == NULL || password == NULL)
000028  f1ba0f00          CMP      r10,#0
00002c  d001              BEQ      |L3.50|
00002e  9808              LDR      r0,[sp,#0x20]
000030  b918              CBNZ     r0,|L3.58|
                  |L3.50|
;;;170    		return NULL;
000032  2000              MOVS     r0,#0
                  |L3.52|
;;;171    
;;;172    	ms_len = sizeof(*ms) + 1 + sizeof(*r) + identity_len;
;;;173    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_MSCHAPV2, ms_len,
;;;174    			     EAP_CODE_RESPONSE, id);
;;;175    	if (resp == NULL)
;;;176    		return NULL;
;;;177    
;;;178    	ms = wpabuf_put(resp, sizeof(*ms));
;;;179    	ms->op_code = MSCHAPV2_OP_RESPONSE;
;;;180    	ms->mschapv2_id = mschapv2_id;
;;;181    	if (data->prev_error) {
;;;182    		/*
;;;183    		 * TODO: this does not seem to be enough when processing two
;;;184    		 * or more failure messages. IAS did not increment mschapv2_id
;;;185    		 * in its own packets, but it seemed to expect the peer to
;;;186    		 * increment this for all packets(?).
;;;187    		 */
;;;188    		ms->mschapv2_id++;
;;;189    	}
;;;190    	WPA_PUT_BE16(ms->ms_length, ms_len);
;;;191    
;;;192    	wpabuf_put_u8(resp, sizeof(*r)); /* Value-Size */
;;;193    
;;;194    	/* Response */
;;;195    	r = wpabuf_put(resp, sizeof(*r));
;;;196    	peer_challenge = r->peer_challenge;
;;;197    	if (data->peer_challenge) {
;;;198    		wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: peer_challenge generated "
;;;199    			   "in Phase 1");
;;;200    		peer_challenge = data->peer_challenge;
;;;201    		os_memset(r->peer_challenge, 0, MSCHAPV2_CHAL_LEN);
;;;202    	} else if (os_get_random(peer_challenge, MSCHAPV2_CHAL_LEN)) {
;;;203    		wpabuf_free(resp);
;;;204    		return NULL;
;;;205    	}
;;;206    	os_memset(r->reserved, 0, 8);
;;;207    	if (data->auth_challenge) {
;;;208    		wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: auth_challenge generated "
;;;209    			   "in Phase 1");
;;;210    		auth_challenge = data->auth_challenge;
;;;211    	}
;;;212    	if (mschapv2_derive_response(identity, identity_len, password,
;;;213    				     password_len, pwhash, auth_challenge,
;;;214    				     peer_challenge, r->nt_response,
;;;215    				     data->auth_response, data->master_key)) {
;;;216    		wpa_printf(MSG_ERROR, "EAP-MSCHAPV2: Failed to derive "
;;;217    			   "response");
;;;218    		wpabuf_free(resp);
;;;219    		return NULL;
;;;220    	}
;;;221    	data->auth_response_valid = 1;
;;;222    	data->master_key_valid = 1;
;;;223    
;;;224    	r->flags = 0; /* reserved, must be zero */
;;;225    
;;;226    	wpabuf_put_data(resp, identity, identity_len);
;;;227    	wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: TX identifier %d mschapv2_id %d "
;;;228    		   "(response)", id, ms->mschapv2_id);
;;;229    	return resp;
;;;230    }
000034  b00f              ADD      sp,sp,#0x3c
000036  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.58|
00003a  980a              LDR      r0,[sp,#0x28]         ;172
00003c  f1000736          ADD      r7,r0,#0x36           ;172
000040  2302              MOVS     r3,#2                 ;173
000042  463a              MOV      r2,r7                 ;173
000044  211a              MOVS     r1,#0x1a              ;173
000046  2000              MOVS     r0,#0                 ;173
000048  f8cdb000          STR      r11,[sp,#0]           ;173
00004c  f7fffffe          BL       eap_msg_alloc
000050  4680              MOV      r8,r0                 ;173
000052  f1b80f00          CMP      r8,#0                 ;175
000056  d101              BNE      |L3.92|
000058  2000              MOVS     r0,#0                 ;176
00005a  e7eb              B        |L3.52|
                  |L3.92|
00005c  2104              MOVS     r1,#4                 ;178
00005e  4640              MOV      r0,r8                 ;178
000060  f7fffffe          BL       wpabuf_put
000064  4605              MOV      r5,r0                 ;178
000066  2102              MOVS     r1,#2                 ;179
000068  7029              STRB     r1,[r5,#0]            ;179
00006a  990e              LDR      r1,[sp,#0x38]         ;180
00006c  7069              STRB     r1,[r5,#1]            ;180
00006e  69a0              LDR      r0,[r4,#0x18]         ;181
000070  b110              CBZ      r0,|L3.120|
000072  7868              LDRB     r0,[r5,#1]            ;188
000074  1c40              ADDS     r0,r0,#1              ;188
000076  7068              STRB     r0,[r5,#1]            ;188
                  |L3.120|
000078  bf00              NOP                            ;190
00007a  0a38              LSRS     r0,r7,#8              ;190
00007c  70a8              STRB     r0,[r5,#2]            ;190
00007e  70ef              STRB     r7,[r5,#3]            ;190
000080  bf00              NOP                            ;190
000082  2131              MOVS     r1,#0x31              ;192
000084  4640              MOV      r0,r8                 ;192
000086  f7fffffe          BL       wpabuf_put_u8
00008a  2131              MOVS     r1,#0x31              ;195
00008c  4640              MOV      r0,r8                 ;195
00008e  f7fffffe          BL       wpabuf_put
000092  4606              MOV      r6,r0                 ;195
000094  46b1              MOV      r9,r6                 ;196
000096  6b60              LDR      r0,[r4,#0x34]         ;197
000098  b158              CBZ      r0,|L3.178|
00009a  a134              ADR      r1,|L3.364|
00009c  2000              MOVS     r0,#0                 ;198
00009e  f7fffffe          BL       wpa_printf
0000a2  f8d49034          LDR      r9,[r4,#0x34]         ;200
0000a6  2210              MOVS     r2,#0x10              ;201
0000a8  2100              MOVS     r1,#0                 ;201
0000aa  4630              MOV      r0,r6                 ;201
0000ac  f7fffffe          BL       os_memset
0000b0  e009              B        |L3.198|
                  |L3.178|
0000b2  2110              MOVS     r1,#0x10              ;202
0000b4  4648              MOV      r0,r9                 ;202
0000b6  f7fffffe          BL       os_get_random
0000ba  b120              CBZ      r0,|L3.198|
0000bc  4640              MOV      r0,r8                 ;203
0000be  f7fffffe          BL       wpabuf_free
0000c2  2000              MOVS     r0,#0                 ;204
0000c4  e7b6              B        |L3.52|
                  |L3.198|
0000c6  2208              MOVS     r2,#8                 ;206
0000c8  2100              MOVS     r1,#0                 ;206
0000ca  f1060010          ADD      r0,r6,#0x10           ;206
0000ce  f7fffffe          BL       os_memset
0000d2  6ba0              LDR      r0,[r4,#0x38]         ;207
0000d4  b128              CBZ      r0,|L3.226|
0000d6  a132              ADR      r1,|L3.416|
0000d8  2000              MOVS     r0,#0                 ;208
0000da  f7fffffe          BL       wpa_printf
0000de  6ba0              LDR      r0,[r4,#0x38]         ;210
0000e0  9018              STR      r0,[sp,#0x60]         ;210
                  |L3.226|
0000e2  f1040340          ADD      r3,r4,#0x40           ;212
0000e6  f1060118          ADD      r1,r6,#0x18           ;212
0000ea  e9cd9102          STRD     r9,r1,[sp,#8]         ;212
0000ee  e9cd4304          STRD     r4,r3,[sp,#0x10]      ;212
0000f2  9b18              LDR      r3,[sp,#0x60]         ;212
0000f4  9a07              LDR      r2,[sp,#0x1c]         ;212
0000f6  e9cd2300          STRD     r2,r3,[sp,#0]         ;212
0000fa  4650              MOV      r0,r10                ;212
0000fc  e9dd2308          LDRD     r2,r3,[sp,#0x20]      ;212
000100  990a              LDR      r1,[sp,#0x28]         ;212
000102  f7fffffe          BL       mschapv2_derive_response
000106  b140              CBZ      r0,|L3.282|
000108  a132              ADR      r1,|L3.468|
00010a  2000              MOVS     r0,#0                 ;216
00010c  f7fffffe          BL       wpa_printf
000110  4640              MOV      r0,r8                 ;218
000112  f7fffffe          BL       wpabuf_free
000116  2000              MOVS     r0,#0                 ;219
000118  e78c              B        |L3.52|
                  |L3.282|
00011a  2001              MOVS     r0,#1                 ;221
00011c  6160              STR      r0,[r4,#0x14]         ;221
00011e  6520              STR      r0,[r4,#0x50]         ;222
000120  2000              MOVS     r0,#0                 ;224
000122  f8860030          STRB     r0,[r6,#0x30]         ;224
000126  4651              MOV      r1,r10                ;226
000128  4640              MOV      r0,r8                 ;226
00012a  9a0a              LDR      r2,[sp,#0x28]         ;226
00012c  f7fffffe          BL       wpabuf_put_data
000130  786b              LDRB     r3,[r5,#1]            ;227
000132  465a              MOV      r2,r11                ;227
000134  a131              ADR      r1,|L3.508|
000136  2000              MOVS     r0,#0                 ;227
000138  f7fffffe          BL       wpa_printf
00013c  4640              MOV      r0,r8                 ;229
00013e  e779              B        |L3.52|
;;;231    
                          ENDP

                  |L3.320|
000140  4541502d          DCB      "EAP-MSCHAPV2: Generating Challenge Response",0
000144  4d534348
000148  41505632
00014c  3a204765
000150  6e657261
000154  74696e67
000158  20436861
00015c  6c6c656e
000160  67652052
000164  6573706f
000168  6e736500
                  |L3.364|
00016c  4541502d          DCB      "EAP-MSCHAPV2: peer_challenge generated in Phase 1",0
000170  4d534348
000174  41505632
000178  3a207065
00017c  65725f63
000180  68616c6c
000184  656e6765
000188  2067656e
00018c  65726174
000190  65642069
000194  6e205068
000198  61736520
00019c  3100    
00019e  00                DCB      0
00019f  00                DCB      0
                  |L3.416|
0001a0  4541502d          DCB      "EAP-MSCHAPV2: auth_challenge generated in Phase 1",0
0001a4  4d534348
0001a8  41505632
0001ac  3a206175
0001b0  74685f63
0001b4  68616c6c
0001b8  656e6765
0001bc  2067656e
0001c0  65726174
0001c4  65642069
0001c8  6e205068
0001cc  61736520
0001d0  3100    
0001d2  00                DCB      0
0001d3  00                DCB      0
                  |L3.468|
0001d4  4541502d          DCB      "EAP-MSCHAPV2: Failed to derive response",0
0001d8  4d534348
0001dc  41505632
0001e0  3a204661
0001e4  696c6564
0001e8  20746f20
0001ec  64657269
0001f0  76652072
0001f4  6573706f
0001f8  6e736500
                  |L3.508|
0001fc  4541502d          DCB      "EAP-MSCHAPV2: TX identifier %d mschapv2_id %d (response"
000200  4d534348
000204  41505632
000208  3a205458
00020c  20696465
000210  6e746966
000214  69657220
000218  2564206d
00021c  73636861
000220  7076325f
000224  69642025
000228  64202872
00022c  6573706f
000230  6e7365  
000233  2900              DCB      ")",0
000235  00                DCB      0
000236  00                DCB      0
000237  00                DCB      0

                          AREA ||i.eap_mschapv2_change_password||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_change_password PROC
;;;500    
;;;501    static struct wpabuf * eap_mschapv2_change_password(
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;502    	struct eap_sm *sm, struct eap_mschapv2_data *data,
;;;503    	struct eap_method_ret *ret, const struct eap_mschapv2_hdr *req, u8 id)
;;;504    {
000004  b091              SUB      sp,sp,#0x44
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;505    	struct wpabuf *resp;
;;;506    	int ms_len;
;;;507    	const u8 *username, *password, *new_password;
;;;508    	size_t username_len, password_len, new_password_len;
;;;509    	struct eap_mschapv2_hdr *ms;
;;;510    	struct ms_change_password *cp;
;;;511    	u8 password_hash[16], password_hash_hash[16];
;;;512    	int pwhash;
;;;513    
;;;514    	username = eap_get_config_identity(sm, &username_len);
00000a  a90f              ADD      r1,sp,#0x3c
00000c  9811              LDR      r0,[sp,#0x44]
00000e  f7fffffe          BL       eap_get_config_identity
000012  4683              MOV      r11,r0
;;;515    	password = eap_get_config_password2(sm, &password_len, &pwhash);
000014  aa04              ADD      r2,sp,#0x10
000016  a90e              ADD      r1,sp,#0x38
000018  9811              LDR      r0,[sp,#0x44]
00001a  f7fffffe          BL       eap_get_config_password2
00001e  9010              STR      r0,[sp,#0x40]
;;;516    	new_password = eap_get_config_new_password(sm, &new_password_len);
000020  a90d              ADD      r1,sp,#0x34
000022  9811              LDR      r0,[sp,#0x44]
000024  f7fffffe          BL       eap_get_config_new_password
000028  4681              MOV      r9,r0
;;;517    	if (username == NULL || password == NULL || new_password == NULL)
00002a  f1bb0f00          CMP      r11,#0
00002e  d004              BEQ      |L4.58|
000030  9810              LDR      r0,[sp,#0x40]
000032  b110              CBZ      r0,|L4.58|
000034  f1b90f00          CMP      r9,#0
000038  d103              BNE      |L4.66|
                  |L4.58|
;;;518    		return NULL;
00003a  2000              MOVS     r0,#0
                  |L4.60|
;;;519    
;;;520    	username = mschapv2_remove_domain(username, &username_len);
;;;521    
;;;522    	ret->ignore = FALSE;
;;;523    	ret->methodState = METHOD_MAY_CONT;
;;;524    	ret->decision = DECISION_COND_SUCC;
;;;525    	ret->allowNotifications = TRUE;
;;;526    
;;;527    	ms_len = sizeof(*ms) + sizeof(*cp);
;;;528    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_MSCHAPV2, ms_len,
;;;529    			     EAP_CODE_RESPONSE, id);
;;;530    	if (resp == NULL)
;;;531    		return NULL;
;;;532    
;;;533    	ms = wpabuf_put(resp, sizeof(*ms));
;;;534    	ms->op_code = MSCHAPV2_OP_CHANGE_PASSWORD;
;;;535    	ms->mschapv2_id = req->mschapv2_id + 1;
;;;536    	WPA_PUT_BE16(ms->ms_length, ms_len);
;;;537    	cp = wpabuf_put(resp, sizeof(*cp));
;;;538    
;;;539    	/* Encrypted-Password */
;;;540    	if (pwhash) {
;;;541    		if (encrypt_pw_block_with_password_hash(
;;;542    			    new_password, new_password_len,
;;;543    			    password, cp->encr_password))
;;;544    			goto fail;
;;;545    	} else {
;;;546    		if (new_password_encrypted_with_old_nt_password_hash(
;;;547    			    new_password, new_password_len,
;;;548    			    password, password_len, cp->encr_password))
;;;549    			goto fail;
;;;550    	}
;;;551    
;;;552    	/* Encrypted-Hash */
;;;553    	if (pwhash) {
;;;554    		u8 new_password_hash[16];
;;;555    		nt_password_hash(new_password, new_password_len,
;;;556    				 new_password_hash);
;;;557    		nt_password_hash_encrypted_with_block(password,
;;;558    						      new_password_hash,
;;;559    						      cp->encr_hash);
;;;560    	} else {
;;;561    		old_nt_password_hash_encrypted_with_new_nt_password_hash(
;;;562    			new_password, new_password_len,
;;;563    			password, password_len, cp->encr_hash);
;;;564    	}
;;;565    
;;;566    	/* Peer-Challenge */
;;;567    	if (os_get_random(cp->peer_challenge, MSCHAPV2_CHAL_LEN))
;;;568    		goto fail;
;;;569    
;;;570    	/* Reserved, must be zero */
;;;571    	os_memset(cp->reserved, 0, 8);
;;;572    
;;;573    	/* NT-Response */
;;;574    	wpa_hexdump(MSG_DEBUG, "EAP-MSCHAPV2: auth_challenge",
;;;575    		    data->passwd_change_challenge, PASSWD_CHANGE_CHAL_LEN);
;;;576    	wpa_hexdump(MSG_DEBUG, "EAP-MSCHAPV2: peer_challenge",
;;;577    		    cp->peer_challenge, MSCHAPV2_CHAL_LEN);
;;;578    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-MSCHAPV2: username",
;;;579    			  username, username_len);
;;;580    	wpa_hexdump_ascii_key(MSG_DEBUG, "EAP-MSCHAPV2: new password",
;;;581    			      new_password, new_password_len);
;;;582    	generate_nt_response(data->passwd_change_challenge, cp->peer_challenge,
;;;583    			     username, username_len,
;;;584    			     new_password, new_password_len,
;;;585    			     cp->nt_response);
;;;586    	wpa_hexdump(MSG_DEBUG, "EAP-MSCHAPV2: NT-Response",
;;;587    		    cp->nt_response, MSCHAPV2_NT_RESPONSE_LEN);
;;;588    
;;;589    	/* Authenticator response is not really needed yet, but calculate it
;;;590    	 * here so that challenges need not be saved. */
;;;591    	generate_authenticator_response(new_password, new_password_len,
;;;592    					cp->peer_challenge,
;;;593    					data->passwd_change_challenge,
;;;594    					username, username_len,
;;;595    					cp->nt_response, data->auth_response);
;;;596    	data->auth_response_valid = 1;
;;;597    
;;;598    	/* Likewise, generate master_key here since we have the needed data
;;;599    	 * available. */
;;;600    	nt_password_hash(new_password, new_password_len, password_hash);
;;;601    	hash_nt_password_hash(password_hash, password_hash_hash);
;;;602    	get_master_key(password_hash_hash, cp->nt_response, data->master_key);
;;;603    	data->master_key_valid = 1;
;;;604    
;;;605    	/* Flags */
;;;606    	os_memset(cp->flags, 0, 2);
;;;607    
;;;608    	wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: TX identifier %d mschapv2_id %d "
;;;609    		   "(change pw)", id, ms->mschapv2_id);
;;;610    
;;;611    	return resp;
;;;612    
;;;613    fail:
;;;614    	wpabuf_free(resp);
;;;615    	return NULL;
;;;616    }
00003c  b015              ADD      sp,sp,#0x54
00003e  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.66|
000042  a90f              ADD      r1,sp,#0x3c           ;520
000044  4658              MOV      r0,r11                ;520
000046  f7fffffe          BL       mschapv2_remove_domain
00004a  4683              MOV      r11,r0                ;520
00004c  2000              MOVS     r0,#0                 ;522
00004e  6038              STR      r0,[r7,#0]            ;522
000050  2003              MOVS     r0,#3                 ;523
000052  7138              STRB     r0,[r7,#4]            ;523
000054  2001              MOVS     r0,#1                 ;524
000056  7178              STRB     r0,[r7,#5]            ;524
000058  60b8              STR      r0,[r7,#8]            ;525
00005a  f240284a          MOV      r8,#0x24a             ;527
00005e  9b1e              LDR      r3,[sp,#0x78]         ;528
000060  9300              STR      r3,[sp,#0]            ;528
000062  2302              MOVS     r3,#2                 ;528
000064  4642              MOV      r2,r8                 ;528
000066  211a              MOVS     r1,#0x1a              ;528
000068  2000              MOVS     r0,#0                 ;528
00006a  f7fffffe          BL       eap_msg_alloc
00006e  4682              MOV      r10,r0                ;528
000070  f1ba0f00          CMP      r10,#0                ;530
000074  d101              BNE      |L4.122|
000076  2000              MOVS     r0,#0                 ;531
000078  e7e0              B        |L4.60|
                  |L4.122|
00007a  2104              MOVS     r1,#4                 ;533
00007c  4650              MOV      r0,r10                ;533
00007e  f7fffffe          BL       wpabuf_put
000082  4606              MOV      r6,r0                 ;533
000084  2107              MOVS     r1,#7                 ;534
000086  7031              STRB     r1,[r6,#0]            ;534
000088  9814              LDR      r0,[sp,#0x50]         ;535
00008a  7840              LDRB     r0,[r0,#1]            ;535
00008c  1c40              ADDS     r0,r0,#1              ;535
00008e  7070              STRB     r0,[r6,#1]            ;535
000090  bf00              NOP                            ;536
000092  ea4f2018          LSR      r0,r8,#8              ;536
000096  70b0              STRB     r0,[r6,#2]            ;536
000098  f8868003          STRB     r8,[r6,#3]            ;536
00009c  bf00              NOP                            ;536
00009e  f2402146          MOV      r1,#0x246             ;537
0000a2  4650              MOV      r0,r10                ;537
0000a4  f7fffffe          BL       wpabuf_put
0000a8  4604              MOV      r4,r0                 ;537
0000aa  9804              LDR      r0,[sp,#0x10]         ;540
0000ac  b138              CBZ      r0,|L4.190|
0000ae  4623              MOV      r3,r4                 ;541
0000b0  4648              MOV      r0,r9                 ;541
0000b2  9a10              LDR      r2,[sp,#0x40]         ;541
0000b4  990d              LDR      r1,[sp,#0x34]         ;541
0000b6  f7fffffe          BL       encrypt_pw_block_with_password_hash
0000ba  b148              CBZ      r0,|L4.208|
0000bc  e08b              B        |L4.470|
                  |L4.190|
0000be  9400              STR      r4,[sp,#0]            ;546
0000c0  4648              MOV      r0,r9                 ;546
0000c2  e9dd130d          LDRD     r1,r3,[sp,#0x34]      ;546
0000c6  9a10              LDR      r2,[sp,#0x40]         ;546
0000c8  f7fffffe          BL       new_password_encrypted_with_old_nt_password_hash
0000cc  b100              CBZ      r0,|L4.208|
0000ce  e082              B        |L4.470|
                  |L4.208|
0000d0  9804              LDR      r0,[sp,#0x10]         ;553
0000d2  b158              CBZ      r0,|L4.236|
0000d4  466a              MOV      r2,sp                 ;555
0000d6  4648              MOV      r0,r9                 ;555
0000d8  990d              LDR      r1,[sp,#0x34]         ;555
0000da  f7fffffe          BL       nt_password_hash
0000de  f5047201          ADD      r2,r4,#0x204          ;557
0000e2  4669              MOV      r1,sp                 ;557
0000e4  9810              LDR      r0,[sp,#0x40]         ;557
0000e6  f7fffffe          BL       nt_password_hash_encrypted_with_block
0000ea  e008              B        |L4.254|
                  |L4.236|
0000ec  f5047301          ADD      r3,r4,#0x204          ;561
0000f0  9300              STR      r3,[sp,#0]            ;561
0000f2  4648              MOV      r0,r9                 ;561
0000f4  e9dd130d          LDRD     r1,r3,[sp,#0x34]      ;561
0000f8  9a10              LDR      r2,[sp,#0x40]         ;561
0000fa  f7fffffe          BL       old_nt_password_hash_encrypted_with_new_nt_password_hash
                  |L4.254|
0000fe  2110              MOVS     r1,#0x10              ;567
000100  f5047005          ADD      r0,r4,#0x214          ;567
000104  f7fffffe          BL       os_get_random
000108  b100              CBZ      r0,|L4.268|
00010a  e064              B        |L4.470|
                  |L4.268|
00010c  2208              MOVS     r2,#8                 ;571
00010e  2100              MOVS     r1,#0                 ;571
000110  f5047009          ADD      r0,r4,#0x224          ;571
000114  f7fffffe          BL       os_memset
000118  2310              MOVS     r3,#0x10              ;574
00011a  f105021c          ADD      r2,r5,#0x1c           ;574
00011e  a130              ADR      r1,|L4.480|
000120  2000              MOVS     r0,#0                 ;574
000122  f7fffffe          BL       wpa_hexdump
000126  2310              MOVS     r3,#0x10              ;576
000128  f5047205          ADD      r2,r4,#0x214          ;576
00012c  a134              ADR      r1,|L4.512|
00012e  2000              MOVS     r0,#0                 ;576
000130  f7fffffe          BL       wpa_hexdump
000134  465a              MOV      r2,r11                ;578
000136  a13a              ADR      r1,|L4.544|
000138  2000              MOVS     r0,#0                 ;578
00013a  9b0f              LDR      r3,[sp,#0x3c]         ;578
00013c  f7fffffe          BL       wpa_hexdump_ascii
000140  464a              MOV      r2,r9                 ;580
000142  a13d              ADR      r1,|L4.568|
000144  2000              MOVS     r0,#0                 ;580
000146  9b0d              LDR      r3,[sp,#0x34]         ;580
000148  f7fffffe          BL       wpa_hexdump_ascii_key
00014c  f504730b          ADD      r3,r4,#0x22c          ;582
000150  9a0d              LDR      r2,[sp,#0x34]         ;582
000152  e9cd9200          STRD     r9,r2,[sp,#0]         ;582
000156  9302              STR      r3,[sp,#8]            ;582
000158  465a              MOV      r2,r11                ;582
00015a  f5047105          ADD      r1,r4,#0x214          ;582
00015e  f105001c          ADD      r0,r5,#0x1c           ;582
000162  9b0f              LDR      r3,[sp,#0x3c]         ;582
000164  f7fffffe          BL       generate_nt_response
000168  2318              MOVS     r3,#0x18              ;586
00016a  f504720b          ADD      r2,r4,#0x22c          ;586
00016e  a139              ADR      r1,|L4.596|
000170  2000              MOVS     r0,#0                 ;586
000172  f7fffffe          BL       wpa_hexdump
000176  f504720b          ADD      r2,r4,#0x22c          ;591
00017a  990f              LDR      r1,[sp,#0x3c]         ;591
00017c  f105031c          ADD      r3,r5,#0x1c           ;591
000180  e9cdb100          STRD     r11,r1,[sp,#0]        ;591
000184  e9cd2502          STRD     r2,r5,[sp,#8]         ;591
000188  3a18              SUBS     r2,r2,#0x18           ;591
00018a  4648              MOV      r0,r9                 ;591
00018c  990d              LDR      r1,[sp,#0x34]         ;591
00018e  f7fffffe          BL       generate_authenticator_response
000192  2001              MOVS     r0,#1                 ;596
000194  6168              STR      r0,[r5,#0x14]         ;596
000196  aa09              ADD      r2,sp,#0x24           ;600
000198  4648              MOV      r0,r9                 ;600
00019a  990d              LDR      r1,[sp,#0x34]         ;600
00019c  f7fffffe          BL       nt_password_hash
0001a0  a905              ADD      r1,sp,#0x14           ;601
0001a2  a809              ADD      r0,sp,#0x24           ;601
0001a4  f7fffffe          BL       hash_nt_password_hash
0001a8  f1050240          ADD      r2,r5,#0x40           ;602
0001ac  f504710b          ADD      r1,r4,#0x22c          ;602
0001b0  a805              ADD      r0,sp,#0x14           ;602
0001b2  f7fffffe          BL       get_master_key
0001b6  2001              MOVS     r0,#1                 ;603
0001b8  6528              STR      r0,[r5,#0x50]         ;603
0001ba  2202              MOVS     r2,#2                 ;606
0001bc  2100              MOVS     r1,#0                 ;606
0001be  f5047011          ADD      r0,r4,#0x244          ;606
0001c2  f7fffffe          BL       os_memset
0001c6  7873              LDRB     r3,[r6,#1]            ;608
0001c8  a129              ADR      r1,|L4.624|
0001ca  2000              MOVS     r0,#0                 ;608
0001cc  9a1e              LDR      r2,[sp,#0x78]         ;608
0001ce  f7fffffe          BL       wpa_printf
0001d2  4650              MOV      r0,r10                ;611
0001d4  e732              B        |L4.60|
                  |L4.470|
0001d6  4650              MOV      r0,r10                ;614
0001d8  f7fffffe          BL       wpabuf_free
0001dc  2000              MOVS     r0,#0                 ;615
0001de  e72d              B        |L4.60|
;;;617    
                          ENDP

                  |L4.480|
0001e0  4541502d          DCB      "EAP-MSCHAPV2: auth_challenge",0
0001e4  4d534348
0001e8  41505632
0001ec  3a206175
0001f0  74685f63
0001f4  68616c6c
0001f8  656e6765
0001fc  00      
0001fd  00                DCB      0
0001fe  00                DCB      0
0001ff  00                DCB      0
                  |L4.512|
000200  4541502d          DCB      "EAP-MSCHAPV2: peer_challenge",0
000204  4d534348
000208  41505632
00020c  3a207065
000210  65725f63
000214  68616c6c
000218  656e6765
00021c  00      
00021d  00                DCB      0
00021e  00                DCB      0
00021f  00                DCB      0
                  |L4.544|
000220  4541502d          DCB      "EAP-MSCHAPV2: username",0
000224  4d534348
000228  41505632
00022c  3a207573
000230  65726e61
000234  6d6500  
000237  00                DCB      0
                  |L4.568|
000238  4541502d          DCB      "EAP-MSCHAPV2: new password",0
00023c  4d534348
000240  41505632
000244  3a206e65
000248  77207061
00024c  7373776f
000250  726400  
000253  00                DCB      0
                  |L4.596|
000254  4541502d          DCB      "EAP-MSCHAPV2: NT-Response",0
000258  4d534348
00025c  41505632
000260  3a204e54
000264  2d526573
000268  706f6e73
00026c  6500    
00026e  00                DCB      0
00026f  00                DCB      0
                  |L4.624|
000270  4541502d          DCB      "EAP-MSCHAPV2: TX identifier %d mschapv2_id %d (change p"
000274  4d534348
000278  41505632
00027c  3a205458
000280  20696465
000284  6e746966
000288  69657220
00028c  2564206d
000290  73636861
000294  7076325f
000298  69642025
00029c  64202863
0002a0  68616e67
0002a4  652070  
0002a7  772900            DCB      "w)",0
0002aa  00                DCB      0
0002ab  00                DCB      0

                          AREA ||i.eap_mschapv2_check_config||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_check_config PROC
;;;690    
;;;691    static int eap_mschapv2_check_config(struct eap_sm *sm)
000000  b538              PUSH     {r3-r5,lr}
;;;692    {
000002  4604              MOV      r4,r0
;;;693    	size_t len;
;;;694    
;;;695    	if (eap_get_config_identity(sm, &len) == NULL) {
000004  4669              MOV      r1,sp
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       eap_get_config_identity
00000c  b948              CBNZ     r0,|L5.34|
;;;696    		wpa_printf(MSG_INFO, "EAP-MSCHAPV2: Identity not configured");
00000e  a10d              ADR      r1,|L5.68|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       wpa_printf
;;;697    		eap_sm_request_identity(sm);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       eap_sm_request_identity
;;;698    		return -1;
00001c  f04f30ff          MOV      r0,#0xffffffff
                  |L5.32|
;;;699    	}
;;;700    
;;;701    	if (eap_get_config_password(sm, &len) == NULL) {
;;;702    		wpa_printf(MSG_INFO, "EAP-MSCHAPV2: Password not configured");
;;;703    		eap_sm_request_password(sm);
;;;704    		return -1;
;;;705    	}
;;;706    
;;;707    	return 0;
;;;708    }
000020  bd38              POP      {r3-r5,pc}
                  |L5.34|
000022  4669              MOV      r1,sp                 ;701
000024  4620              MOV      r0,r4                 ;701
000026  f7fffffe          BL       eap_get_config_password
00002a  b948              CBNZ     r0,|L5.64|
00002c  a10f              ADR      r1,|L5.108|
00002e  2000              MOVS     r0,#0                 ;702
000030  f7fffffe          BL       wpa_printf
000034  4620              MOV      r0,r4                 ;703
000036  f7fffffe          BL       eap_sm_request_password
00003a  f04f30ff          MOV      r0,#0xffffffff        ;704
00003e  e7ef              B        |L5.32|
                  |L5.64|
000040  2000              MOVS     r0,#0                 ;707
000042  e7ed              B        |L5.32|
;;;709    
                          ENDP

                  |L5.68|
000044  4541502d          DCB      "EAP-MSCHAPV2: Identity not configured",0
000048  4d534348
00004c  41505632
000050  3a204964
000054  656e7469
000058  7479206e
00005c  6f742063
000060  6f6e6669
000064  67757265
000068  6400    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L5.108|
00006c  4541502d          DCB      "EAP-MSCHAPV2: Password not configured",0
000070  4d534348
000074  41505632
000078  3a205061
00007c  7373776f
000080  7264206e
000084  6f742063
000088  6f6e6669
00008c  67757265
000090  6400    
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.eap_mschapv2_check_mslen||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_check_mslen PROC
;;;710    
;;;711    static int eap_mschapv2_check_mslen(struct eap_sm *sm, size_t len,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;712    				    const struct eap_mschapv2_hdr *ms)
;;;713    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;714    	size_t ms_len = WPA_GET_BE16(ms->ms_length);
00000a  78e8              LDRB     r0,[r5,#3]
00000c  78a9              LDRB     r1,[r5,#2]
00000e  ea402601          ORR      r6,r0,r1,LSL #8
;;;715    
;;;716    	if (ms_len == len)
000012  42a6              CMP      r6,r4
000014  d102              BNE      |L6.28|
;;;717    		return 0;
000016  2000              MOVS     r0,#0
                  |L6.24|
;;;718    
;;;719    	wpa_printf(MSG_INFO, "EAP-MSCHAPV2: Invalid header: len=%lu "
;;;720    		   "ms_len=%lu", (unsigned long) len, (unsigned long) ms_len);
;;;721    	if (sm->workaround) {
;;;722    		/* Some authentication servers use invalid ms_len,
;;;723    		 * ignore it for interoperability. */
;;;724    		wpa_printf(MSG_INFO, "EAP-MSCHAPV2: workaround, ignore"
;;;725    			   " invalid ms_len %lu (len %lu)",
;;;726    			   (unsigned long) ms_len,
;;;727    			   (unsigned long) len);
;;;728    		return 0;
;;;729    	}
;;;730    
;;;731    	return -1;
;;;732    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L6.28|
00001c  4633              MOV      r3,r6                 ;719
00001e  4622              MOV      r2,r4                 ;719
000020  a108              ADR      r1,|L6.68|
000022  2000              MOVS     r0,#0                 ;719
000024  f7fffffe          BL       wpa_printf
000028  f8d7009c          LDR      r0,[r7,#0x9c]         ;721
00002c  b138              CBZ      r0,|L6.62|
00002e  4623              MOV      r3,r4                 ;724
000030  4632              MOV      r2,r6                 ;724
000032  a111              ADR      r1,|L6.120|
000034  2000              MOVS     r0,#0                 ;724
000036  f7fffffe          BL       wpa_printf
00003a  2000              MOVS     r0,#0                 ;728
00003c  e7ec              B        |L6.24|
                  |L6.62|
00003e  f04f30ff          MOV      r0,#0xffffffff        ;731
000042  e7e9              B        |L6.24|
;;;733    
                          ENDP

                  |L6.68|
000044  4541502d          DCB      "EAP-MSCHAPV2: Invalid header: len=%lu ms_len=%lu",0
000048  4d534348
00004c  41505632
000050  3a20496e
000054  76616c69
000058  64206865
00005c  61646572
000060  3a206c65
000064  6e3d256c
000068  75206d73
00006c  5f6c656e
000070  3d256c75
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
                  |L6.120|
000078  4541502d          DCB      "EAP-MSCHAPV2: workaround, ignore invalid ms_len %lu (le"
00007c  4d534348
000080  41505632
000084  3a20776f
000088  726b6172
00008c  6f756e64
000090  2c206967
000094  6e6f7265
000098  20696e76
00009c  616c6964
0000a0  206d735f
0000a4  6c656e20
0000a8  256c7520
0000ac  286c65  
0000af  6e20256c          DCB      "n %lu)",0
0000b3  752900  
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.eap_mschapv2_copy_challenge||, CODE, READONLY, ALIGN=1

                  eap_mschapv2_copy_challenge PROC
;;;734    
;;;735    static void eap_mschapv2_copy_challenge(struct eap_mschapv2_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;736    					const struct wpabuf *reqData)
;;;737    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;738    	/*
;;;739    	 * Store a copy of the challenge message, so that it can be processed
;;;740    	 * again in case retry is allowed after a possible failure.
;;;741    	 */
;;;742    	wpabuf_free(data->prev_challenge);
000006  6da0              LDR      r0,[r4,#0x58]
000008  f7fffffe          BL       wpabuf_free
;;;743    	data->prev_challenge = wpabuf_dup(reqData);
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       wpabuf_dup
000012  65a0              STR      r0,[r4,#0x58]
;;;744    }
000014  bd70              POP      {r4-r6,pc}
;;;745    
                          ENDP


                          AREA ||i.eap_mschapv2_deinit||, CODE, READONLY, ALIGN=1

                  eap_mschapv2_deinit PROC
;;;141    
;;;142    static void eap_mschapv2_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;143    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;144    	struct eap_mschapv2_data *data = priv;
000006  4625              MOV      r5,r4
;;;145    	os_free(data->peer_challenge);
000008  6b68              LDR      r0,[r5,#0x34]
00000a  f7fffffe          BL       os_free
;;;146    	os_free(data->auth_challenge);
00000e  6ba8              LDR      r0,[r5,#0x38]
000010  f7fffffe          BL       os_free
;;;147    	wpabuf_free(data->prev_challenge);
000014  6da8              LDR      r0,[r5,#0x58]
000016  f7fffffe          BL       wpabuf_free
;;;148    	os_free(data);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       os_free
;;;149    }
000020  bd70              POP      {r4-r6,pc}
;;;150    
                          ENDP


                          AREA ||i.eap_mschapv2_failure||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_failure PROC
;;;629     */
;;;630    static struct wpabuf * eap_mschapv2_failure(struct eap_sm *sm,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;631    					    struct eap_mschapv2_data *data,
;;;632    					    struct eap_method_ret *ret,
;;;633    					    const struct eap_mschapv2_hdr *req,
;;;634    					    size_t req_len, u8 id)
;;;635    {
000004  b083              SUB      sp,sp,#0xc
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  469a              MOV      r10,r3
;;;636    	struct wpabuf *resp;
;;;637    	const u8 *msdata = (const u8 *) (req + 1);
00000c  f10a0b04          ADD      r11,r10,#4
;;;638    	char *buf;
;;;639    	size_t len = req_len - sizeof(*req);
000010  9810              LDR      r0,[sp,#0x40]
000012  1f07              SUBS     r7,r0,#4
;;;640    	int retry = 0;
000014  2000              MOVS     r0,#0
000016  9002              STR      r0,[sp,#8]
;;;641    
;;;642    	wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: Received failure");
000018  a133              ADR      r1,|L9.232|
00001a  f7fffffe          BL       wpa_printf
;;;643    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-MSCHAPV2: Failure data",
00001e  463b              MOV      r3,r7
000020  465a              MOV      r2,r11
000022  a139              ADR      r1,|L9.264|
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       wpa_hexdump_ascii
;;;644    			  msdata, len);
;;;645    	/*
;;;646    	 * eap_mschapv2_failure_txt() expects a nul terminated string, so we
;;;647    	 * must allocate a large enough temporary buffer to create that since
;;;648    	 * the received message does not include nul termination.
;;;649    	 */
;;;650    	buf = os_malloc(len + 1);
00002a  1c78              ADDS     r0,r7,#1
00002c  f7fffffe          BL       os_malloc
000030  4606              MOV      r6,r0
;;;651    	if (buf) {
000032  b17e              CBZ      r6,|L9.84|
;;;652    		os_memcpy(buf, msdata, len);
000034  463a              MOV      r2,r7
000036  4659              MOV      r1,r11
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       os_memcpy
;;;653    		buf[len] = '\0';
00003e  2000              MOVS     r0,#0
000040  55f0              STRB     r0,[r6,r7]
;;;654    		retry = eap_mschapv2_failure_txt(sm, data, buf);
000042  4632              MOV      r2,r6
000044  4629              MOV      r1,r5
000046  9803              LDR      r0,[sp,#0xc]
000048  f7fffffe          BL       eap_mschapv2_failure_txt
00004c  9002              STR      r0,[sp,#8]
;;;655    		os_free(buf);
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       os_free
                  |L9.84|
;;;656    	}
;;;657    
;;;658    	ret->ignore = FALSE;
000054  2000              MOVS     r0,#0
000056  6020              STR      r0,[r4,#0]
;;;659    	ret->methodState = METHOD_DONE;
000058  2004              MOVS     r0,#4
00005a  7120              STRB     r0,[r4,#4]
;;;660    	ret->decision = DECISION_FAIL;
00005c  2000              MOVS     r0,#0
00005e  7160              STRB     r0,[r4,#5]
;;;661    	ret->allowNotifications = FALSE;
000060  60a0              STR      r0,[r4,#8]
;;;662    
;;;663    	if (data->prev_error == ERROR_PASSWD_EXPIRED &&
000062  69a8              LDR      r0,[r5,#0x18]
000064  f5b07f22          CMP      r0,#0x288
000068  d120              BNE      |L9.172|
;;;664    	    data->passwd_change_version == 3) {
00006a  6b28              LDR      r0,[r5,#0x30]
00006c  2803              CMP      r0,#3
00006e  d11d              BNE      |L9.172|
;;;665    		struct eap_peer_config *config = eap_get_config(sm);
000070  9803              LDR      r0,[sp,#0xc]
000072  f7fffffe          BL       eap_get_config
000076  4680              MOV      r8,r0
;;;666    		if (config && config->new_password)
000078  f1b80f00          CMP      r8,#0
00007c  d00d              BEQ      |L9.154|
00007e  f8d800c4          LDR      r0,[r8,#0xc4]
000082  b150              CBZ      r0,|L9.154|
;;;667    			return eap_mschapv2_change_password(sm, data, ret, req,
000084  9b11              LDR      r3,[sp,#0x44]
000086  9300              STR      r3,[sp,#0]
000088  4653              MOV      r3,r10
00008a  4622              MOV      r2,r4
00008c  4629              MOV      r1,r5
00008e  9803              LDR      r0,[sp,#0xc]
000090  f7fffffe          BL       eap_mschapv2_change_password
                  |L9.148|
;;;668    							    id);
;;;669    		if (config && config->pending_req_new_password)
;;;670    			return NULL;
;;;671    	} else if (retry && data->prev_error == ERROR_AUTHENTICATION_FAILURE) {
;;;672    		/* TODO: could try to retry authentication, e.g, after having
;;;673    		 * changed the username/password. In this case, EAP MS-CHAP-v2
;;;674    		 * Failure Response would not be sent here. */
;;;675    		return NULL;
;;;676    	}
;;;677    
;;;678    	/* Note: Only op_code of the EAP-MSCHAPV2 header is included in failure
;;;679    	 * message. */
;;;680    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_MSCHAPV2, 1,
;;;681    			     EAP_CODE_RESPONSE, id);
;;;682    	if (resp == NULL)
;;;683    		return NULL;
;;;684    
;;;685    	wpabuf_put_u8(resp, MSCHAPV2_OP_FAILURE); /* op_code */
;;;686    
;;;687    	return resp;
;;;688    }
000094  b007              ADD      sp,sp,#0x1c
000096  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.154|
00009a  f1b80f00          CMP      r8,#0                 ;669
00009e  d004              BEQ      |L9.170|
0000a0  f8d800ac          LDR      r0,[r8,#0xac]         ;669
0000a4  b108              CBZ      r0,|L9.170|
0000a6  2000              MOVS     r0,#0                 ;670
0000a8  e7f4              B        |L9.148|
                  |L9.170|
0000aa  e008              B        |L9.190|
                  |L9.172|
0000ac  9802              LDR      r0,[sp,#8]            ;671
0000ae  b130              CBZ      r0,|L9.190|
0000b0  69a8              LDR      r0,[r5,#0x18]         ;671
0000b2  f5a07100          SUB      r1,r0,#0x200          ;671
0000b6  39b3              SUBS     r1,r1,#0xb3           ;671
0000b8  d101              BNE      |L9.190|
0000ba  2000              MOVS     r0,#0                 ;675
0000bc  e7ea              B        |L9.148|
                  |L9.190|
0000be  9b11              LDR      r3,[sp,#0x44]         ;680
0000c0  9300              STR      r3,[sp,#0]            ;680
0000c2  2302              MOVS     r3,#2                 ;680
0000c4  2201              MOVS     r2,#1                 ;680
0000c6  211a              MOVS     r1,#0x1a              ;680
0000c8  2000              MOVS     r0,#0                 ;680
0000ca  f7fffffe          BL       eap_msg_alloc
0000ce  4681              MOV      r9,r0                 ;680
0000d0  f1b90f00          CMP      r9,#0                 ;682
0000d4  d101              BNE      |L9.218|
0000d6  2000              MOVS     r0,#0                 ;683
0000d8  e7dc              B        |L9.148|
                  |L9.218|
0000da  2104              MOVS     r1,#4                 ;685
0000dc  4648              MOV      r0,r9                 ;685
0000de  f7fffffe          BL       wpabuf_put_u8
0000e2  4648              MOV      r0,r9                 ;687
0000e4  e7d6              B        |L9.148|
;;;689    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L9.232|
0000e8  4541502d          DCB      "EAP-MSCHAPV2: Received failure",0
0000ec  4d534348
0000f0  41505632
0000f4  3a205265
0000f8  63656976
0000fc  65642066
000100  61696c75
000104  726500  
000107  00                DCB      0
                  |L9.264|
000108  4541502d          DCB      "EAP-MSCHAPV2: Failure data",0
00010c  4d534348
000110  41505632
000114  3a204661
000118  696c7572
00011c  65206461
000120  746100  
000123  00                DCB      0

                          AREA ||i.eap_mschapv2_failure_txt||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_failure_txt PROC
;;;397    
;;;398    static int eap_mschapv2_failure_txt(struct eap_sm *sm,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;399    				    struct eap_mschapv2_data *data, char *txt)
;;;400    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
;;;401    	char *pos, *msg = "";
00000a  f20f1bac          ADR.W    r11,|L10.440|
;;;402    	int retry = 1;
00000e  2701              MOVS     r7,#1
;;;403    	struct eap_peer_config *config = eap_get_config(sm);
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       eap_get_config
000016  4606              MOV      r6,r0
;;;404    
;;;405    	/* For example:
;;;406    	 * E=691 R=1 C=<32 octets hex challenge> V=3 M=Authentication Failure
;;;407    	 */
;;;408    
;;;409    	pos = txt;
000018  464c              MOV      r4,r9
;;;410    
;;;411    	if (pos && os_strncmp(pos, "E=", 2) == 0) {
00001a  b1b4              CBZ      r4,|L10.74|
00001c  2202              MOVS     r2,#2
00001e  a167              ADR      r1,|L10.444|
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       os_strncmp
000026  b980              CBNZ     r0,|L10.74|
;;;412    		pos += 2;
000028  1ca4              ADDS     r4,r4,#2
;;;413    		data->prev_error = atoi(pos);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       atoi
000030  61a8              STR      r0,[r5,#0x18]
;;;414    		wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: error %d",
000032  a163              ADR      r1,|L10.448|
000034  2000              MOVS     r0,#0
000036  69aa              LDR      r2,[r5,#0x18]
000038  f7fffffe          BL       wpa_printf
;;;415    			   data->prev_error);
;;;416    		pos = os_strchr(pos, ' ');
00003c  2120              MOVS     r1,#0x20
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       os_strchr
000044  4604              MOV      r4,r0
;;;417    		if (pos)
000046  b104              CBZ      r4,|L10.74|
;;;418    			pos++;
000048  1c64              ADDS     r4,r4,#1
                  |L10.74|
;;;419    	}
;;;420    
;;;421    	if (pos && os_strncmp(pos, "R=", 2) == 0) {
00004a  b1dc              CBZ      r4,|L10.132|
00004c  2202              MOVS     r2,#2
00004e  a162              ADR      r1,|L10.472|
000050  4620              MOV      r0,r4
000052  f7fffffe          BL       os_strncmp
000056  b9a8              CBNZ     r0,|L10.132|
;;;422    		pos += 2;
000058  1ca4              ADDS     r4,r4,#2
;;;423    		retry = atoi(pos);
00005a  4620              MOV      r0,r4
00005c  f7fffffe          BL       atoi
000060  4607              MOV      r7,r0
;;;424    		wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: retry is %sallowed",
000062  2f01              CMP      r7,#1
000064  d101              BNE      |L10.106|
;;;425    			   retry == 1 ? "" : "not ");
000066  a054              ADR      r0,|L10.440|
000068  e000              B        |L10.108|
                  |L10.106|
00006a  a05c              ADR      r0,|L10.476|
                  |L10.108|
00006c  4602              MOV      r2,r0
00006e  a15d              ADR      r1,|L10.484|
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       wpa_printf
;;;426    		pos = os_strchr(pos, ' ');
000076  2120              MOVS     r1,#0x20
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       os_strchr
00007e  4604              MOV      r4,r0
;;;427    		if (pos)
000080  b104              CBZ      r4,|L10.132|
;;;428    			pos++;
000082  1c64              ADDS     r4,r4,#1
                  |L10.132|
;;;429    	}
;;;430    
;;;431    	if (pos && os_strncmp(pos, "C=", 2) == 0) {
000084  b394              CBZ      r4,|L10.236|
000086  2202              MOVS     r2,#2
000088  a15f              ADR      r1,|L10.520|
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       os_strncmp
000090  bb60              CBNZ     r0,|L10.236|
;;;432    		int hex_len;
;;;433    		pos += 2;
000092  1ca4              ADDS     r4,r4,#2
;;;434    		hex_len = os_strchr(pos, ' ') - (char *) pos;
000094  2120              MOVS     r1,#0x20
000096  4620              MOV      r0,r4
000098  f7fffffe          BL       os_strchr
00009c  eba00a04          SUB      r10,r0,r4
;;;435    		if (hex_len == PASSWD_CHANGE_CHAL_LEN * 2) {
0000a0  f1ba0f20          CMP      r10,#0x20
0000a4  d115              BNE      |L10.210|
;;;436    			if (hexstr2bin(pos, data->passwd_change_challenge,
0000a6  2210              MOVS     r2,#0x10
0000a8  f105011c          ADD      r1,r5,#0x1c
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       hexstr2bin
0000b2  b120              CBZ      r0,|L10.190|
;;;437    				       PASSWD_CHANGE_CHAL_LEN)) {
;;;438    				wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: invalid "
0000b4  a155              ADR      r1,|L10.524|
0000b6  2000              MOVS     r0,#0
0000b8  f7fffffe          BL       wpa_printf
0000bc  e00e              B        |L10.220|
                  |L10.190|
;;;439    					   "failure challenge");
;;;440    			} else {
;;;441    				wpa_hexdump(MSG_DEBUG, "EAP-MSCHAPV2: failure "
0000be  2310              MOVS     r3,#0x10
0000c0  f105021c          ADD      r2,r5,#0x1c
0000c4  a15b              ADR      r1,|L10.564|
0000c6  2000              MOVS     r0,#0
0000c8  f7fffffe          BL       wpa_hexdump
;;;442    					    "challenge",
;;;443    					    data->passwd_change_challenge,
;;;444    					    PASSWD_CHANGE_CHAL_LEN);
;;;445    				data->passwd_change_challenge_valid = 1;
0000cc  2001              MOVS     r0,#1
0000ce  62e8              STR      r0,[r5,#0x2c]
0000d0  e004              B        |L10.220|
                  |L10.210|
;;;446    			}
;;;447    		} else {
;;;448    			wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: invalid failure "
0000d2  4652              MOV      r2,r10
0000d4  a15f              ADR      r1,|L10.596|
0000d6  2000              MOVS     r0,#0
0000d8  f7fffffe          BL       wpa_printf
                  |L10.220|
;;;449    				   "challenge len %d", hex_len);
;;;450    		}
;;;451    		pos = os_strchr(pos, ' ');
0000dc  2120              MOVS     r1,#0x20
0000de  4620              MOV      r0,r4
0000e0  f7fffffe          BL       os_strchr
0000e4  4604              MOV      r4,r0
;;;452    		if (pos)
0000e6  b104              CBZ      r4,|L10.234|
;;;453    			pos++;
0000e8  1c64              ADDS     r4,r4,#1
                  |L10.234|
;;;454    	} else {
0000ea  e004              B        |L10.246|
                  |L10.236|
0000ec  e7ff              B        |L10.238|
                  |L10.238|
;;;455    		wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: required challenge field "
0000ee  4965              LDR      r1,|L10.644|
0000f0  2000              MOVS     r0,#0
0000f2  f7fffffe          BL       wpa_printf
                  |L10.246|
;;;456    			   "was not present in failure message");
;;;457    	}
;;;458    
;;;459    	if (pos && os_strncmp(pos, "V=", 2) == 0) {
0000f6  b1b4              CBZ      r4,|L10.294|
0000f8  2202              MOVS     r2,#2
0000fa  a163              ADR      r1,|L10.648|
0000fc  4620              MOV      r0,r4
0000fe  f7fffffe          BL       os_strncmp
000102  b980              CBNZ     r0,|L10.294|
;;;460    		pos += 2;
000104  1ca4              ADDS     r4,r4,#2
;;;461    		data->passwd_change_version = atoi(pos);
000106  4620              MOV      r0,r4
000108  f7fffffe          BL       atoi
00010c  6328              STR      r0,[r5,#0x30]
;;;462    		wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: password changing "
00010e  a15f              ADR      r1,|L10.652|
000110  2000              MOVS     r0,#0
000112  6b2a              LDR      r2,[r5,#0x30]
000114  f7fffffe          BL       wpa_printf
;;;463    			   "protocol version %d", data->passwd_change_version);
;;;464    		pos = os_strchr(pos, ' ');
000118  2120              MOVS     r1,#0x20
00011a  4620              MOV      r0,r4
00011c  f7fffffe          BL       os_strchr
000120  4604              MOV      r4,r0
;;;465    		if (pos)
000122  b104              CBZ      r4,|L10.294|
;;;466    			pos++;
000124  1c64              ADDS     r4,r4,#1
                  |L10.294|
;;;467    	}
;;;468    
;;;469    	if (pos && os_strncmp(pos, "M=", 2) == 0) {
000126  b13c              CBZ      r4,|L10.312|
000128  2202              MOVS     r2,#2
00012a  a165              ADR      r1,|L10.704|
00012c  4620              MOV      r0,r4
00012e  f7fffffe          BL       os_strncmp
000132  b908              CBNZ     r0,|L10.312|
;;;470    		pos += 2;
000134  1ca4              ADDS     r4,r4,#2
;;;471    		msg = pos;
000136  46a3              MOV      r11,r4
                  |L10.312|
;;;472    	}
;;;473    	wpa_msg(sm->msg_ctx, MSG_WARNING,
000138  69ab              LDR      r3,[r5,#0x18]
00013a  2f01              CMP      r7,#1
00013c  d101              BNE      |L10.322|
;;;474    		"EAP-MSCHAPV2: failure message: '%s' (retry %sallowed, error "
;;;475    		"%d)",
;;;476    		msg, retry == 1 ? "" : "not ", data->prev_error);
00013e  a21e              ADR      r2,|L10.440|
000140  e000              B        |L10.324|
                  |L10.322|
000142  a226              ADR      r2,|L10.476|
                  |L10.324|
000144  e9cd2300          STRD     r2,r3,[sp,#0]
000148  465b              MOV      r3,r11
00014a  a25e              ADR      r2,|L10.708|
00014c  2100              MOVS     r1,#0
00014e  f8d80090          LDR      r0,[r8,#0x90]
000152  f7fffffe          BL       wpa_msg
;;;477    	if (data->prev_error == ERROR_PASSWD_EXPIRED &&
000156  69a8              LDR      r0,[r5,#0x18]
000158  f5b07f22          CMP      r0,#0x288
00015c  d110              BNE      |L10.384|
;;;478    	    data->passwd_change_version == 3 && config) {
00015e  6b28              LDR      r0,[r5,#0x30]
000160  2803              CMP      r0,#3
000162  d10d              BNE      |L10.384|
000164  b166              CBZ      r6,|L10.384|
;;;479    		if (config->new_password == NULL) {
000166  f8d600c4          LDR      r0,[r6,#0xc4]
00016a  b9e8              CBNZ     r0,|L10.424|
;;;480    			wpa_msg(sm->msg_ctx, MSG_INFO,
00016c  a265              ADR      r2,|L10.772|
00016e  2100              MOVS     r1,#0
000170  f8d80090          LDR      r0,[r8,#0x90]
000174  f7fffffe          BL       wpa_msg
;;;481    				"EAP-MSCHAPV2: Password expired - password "
;;;482    				"change required");
;;;483    			eap_sm_request_new_password(sm);
000178  4640              MOV      r0,r8
00017a  f7fffffe          BL       eap_sm_request_new_password
00017e  e013              B        |L10.424|
                  |L10.384|
;;;484    		}
;;;485    	} else if (retry == 1 && config) {
000180  2f01              CMP      r7,#1
000182  d10d              BNE      |L10.416|
000184  b166              CBZ      r6,|L10.416|
;;;486    		/* TODO: could prevent the current password from being used
;;;487    		 * again at least for some period of time */
;;;488    		if (!config->mschapv2_retry)
000186  f8d600c0          LDR      r0,[r6,#0xc0]
00018a  b910              CBNZ     r0,|L10.402|
;;;489    			eap_sm_request_identity(sm);
00018c  4640              MOV      r0,r8
00018e  f7fffffe          BL       eap_sm_request_identity
                  |L10.402|
;;;490    		eap_sm_request_password(sm);
000192  4640              MOV      r0,r8
000194  f7fffffe          BL       eap_sm_request_password
;;;491    		config->mschapv2_retry = 1;
000198  2001              MOVS     r0,#1
00019a  f8c600c0          STR      r0,[r6,#0xc0]
00019e  e003              B        |L10.424|
                  |L10.416|
;;;492    	} else if (config) {
0001a0  b116              CBZ      r6,|L10.424|
;;;493    		/* TODO: prevent retries using same username/password */
;;;494    		config->mschapv2_retry = 0;
0001a2  2000              MOVS     r0,#0
0001a4  f8c600c0          STR      r0,[r6,#0xc0]
                  |L10.424|
;;;495    	}
;;;496    
;;;497    	return retry == 1;
0001a8  2f01              CMP      r7,#1
0001aa  d102              BNE      |L10.434|
0001ac  2001              MOVS     r0,#1
                  |L10.430|
;;;498    }
0001ae  e8bd9ffc          POP      {r2-r12,pc}
                  |L10.434|
0001b2  2000              MOVS     r0,#0                 ;497
0001b4  e7fb              B        |L10.430|
;;;499    
                          ENDP

0001b6  0000              DCW      0x0000
                  |L10.440|
0001b8  00                DCB      0
0001b9  00                DCB      0
0001ba  00                DCB      0
0001bb  00                DCB      0
                  |L10.444|
0001bc  453d00            DCB      "E=",0
0001bf  00                DCB      0
                  |L10.448|
0001c0  4541502d          DCB      "EAP-MSCHAPV2: error %d",0
0001c4  4d534348
0001c8  41505632
0001cc  3a206572
0001d0  726f7220
0001d4  256400  
0001d7  00                DCB      0
                  |L10.472|
0001d8  523d00            DCB      "R=",0
0001db  00                DCB      0
                  |L10.476|
0001dc  6e6f7420          DCB      "not ",0
0001e0  00      
0001e1  00                DCB      0
0001e2  00                DCB      0
0001e3  00                DCB      0
                  |L10.484|
0001e4  4541502d          DCB      "EAP-MSCHAPV2: retry is %sallowed",0
0001e8  4d534348
0001ec  41505632
0001f0  3a207265
0001f4  74727920
0001f8  69732025
0001fc  73616c6c
000200  6f776564
000204  00      
000205  00                DCB      0
000206  00                DCB      0
000207  00                DCB      0
                  |L10.520|
000208  433d00            DCB      "C=",0
00020b  00                DCB      0
                  |L10.524|
00020c  4541502d          DCB      "EAP-MSCHAPV2: invalid failure challenge",0
000210  4d534348
000214  41505632
000218  3a20696e
00021c  76616c69
000220  64206661
000224  696c7572
000228  65206368
00022c  616c6c65
000230  6e676500
                  |L10.564|
000234  4541502d          DCB      "EAP-MSCHAPV2: failure challenge",0
000238  4d534348
00023c  41505632
000240  3a206661
000244  696c7572
000248  65206368
00024c  616c6c65
000250  6e676500
                  |L10.596|
000254  4541502d          DCB      "EAP-MSCHAPV2: invalid failure challenge len %d",0
000258  4d534348
00025c  41505632
000260  3a20696e
000264  76616c69
000268  64206661
00026c  696c7572
000270  65206368
000274  616c6c65
000278  6e676520
00027c  6c656e20
000280  256400  
000283  00                DCB      0
                  |L10.644|
                          DCD      ||.constdata||+0x8c
                  |L10.648|
000288  563d00            DCB      "V=",0
00028b  00                DCB      0
                  |L10.652|
00028c  4541502d          DCB      "EAP-MSCHAPV2: password changing protocol version %d",0
000290  4d534348
000294  41505632
000298  3a207061
00029c  7373776f
0002a0  72642063
0002a4  68616e67
0002a8  696e6720
0002ac  70726f74
0002b0  6f636f6c
0002b4  20766572
0002b8  73696f6e
0002bc  20256400
                  |L10.704|
0002c0  4d3d00            DCB      "M=",0
0002c3  00                DCB      0
                  |L10.708|
0002c4  4541502d          DCB      "EAP-MSCHAPV2: failure message: '%s' (retry %sallowed, e"
0002c8  4d534348
0002cc  41505632
0002d0  3a206661
0002d4  696c7572
0002d8  65206d65
0002dc  73736167
0002e0  653a2027
0002e4  25732720
0002e8  28726574
0002ec  72792025
0002f0  73616c6c
0002f4  6f776564
0002f8  2c2065  
0002fb  72726f72          DCB      "rror %d)",0
0002ff  20256429
000303  00      
                  |L10.772|
000304  4541502d          DCB      "EAP-MSCHAPV2: Password expired - password change requir"
000308  4d534348
00030c  41505632
000310  3a205061
000314  7373776f
000318  72642065
00031c  78706972
000320  6564202d
000324  20706173
000328  73776f72
00032c  64206368
000330  616e6765
000334  20726571
000338  756972  
00033b  656400            DCB      "ed",0
00033e  00                DCB      0
00033f  00                DCB      0

                          AREA ||i.eap_mschapv2_getKey||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_getKey PROC
;;;824    
;;;825    static u8 * eap_mschapv2_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;826    {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;827    	struct eap_mschapv2_data *data = priv;
00000a  463d              MOV      r5,r7
;;;828    	u8 *key;
;;;829    	int key_len;
;;;830    
;;;831    	if (!data->master_key_valid || !data->success)
00000c  6d28              LDR      r0,[r5,#0x50]
00000e  b108              CBZ      r0,|L11.20|
000010  6d68              LDR      r0,[r5,#0x54]
000012  b910              CBNZ     r0,|L11.26|
                  |L11.20|
;;;832    		return NULL;
000014  2000              MOVS     r0,#0
                  |L11.22|
;;;833    
;;;834    	key_len = 2 * MSCHAPV2_KEY_LEN;
;;;835    
;;;836    	key = os_malloc(key_len);
;;;837    	if (key == NULL)
;;;838    		return NULL;
;;;839    
;;;840    	/* MSK = server MS-MPPE-Recv-Key | MS-MPPE-Send-Key, i.e.,
;;;841    	 *	peer MS-MPPE-Send-Key | MS-MPPE-Recv-Key */
;;;842    	get_asymetric_start_key(data->master_key, key, MSCHAPV2_KEY_LEN, 1, 0);
;;;843    	get_asymetric_start_key(data->master_key, key + MSCHAPV2_KEY_LEN,
;;;844    				MSCHAPV2_KEY_LEN, 0, 0);
;;;845    
;;;846    	wpa_hexdump_key(MSG_DEBUG, "EAP-MSCHAPV2: Derived key",
;;;847    			key, key_len);
;;;848    
;;;849    	*len = key_len;
;;;850    	return key;
;;;851    }
000016  e8bd83f8          POP      {r3-r9,pc}
                  |L11.26|
00001a  2620              MOVS     r6,#0x20              ;834
00001c  4630              MOV      r0,r6                 ;836
00001e  f7fffffe          BL       os_malloc
000022  4604              MOV      r4,r0                 ;836
000024  b90c              CBNZ     r4,|L11.42|
000026  2000              MOVS     r0,#0                 ;838
000028  e7f5              B        |L11.22|
                  |L11.42|
00002a  2300              MOVS     r3,#0                 ;842
00002c  9300              STR      r3,[sp,#0]            ;842
00002e  2301              MOVS     r3,#1                 ;842
000030  2210              MOVS     r2,#0x10              ;842
000032  4621              MOV      r1,r4                 ;842
000034  f1050040          ADD      r0,r5,#0x40           ;842
000038  f7fffffe          BL       get_asymetric_start_key
00003c  2300              MOVS     r3,#0                 ;843
00003e  2210              MOVS     r2,#0x10              ;843
000040  f1040110          ADD      r1,r4,#0x10           ;843
000044  f1050040          ADD      r0,r5,#0x40           ;843
000048  9300              STR      r3,[sp,#0]            ;843
00004a  f7fffffe          BL       get_asymetric_start_key
00004e  4633              MOV      r3,r6                 ;846
000050  4622              MOV      r2,r4                 ;846
000052  a104              ADR      r1,|L11.100|
000054  2000              MOVS     r0,#0                 ;846
000056  f7fffffe          BL       wpa_hexdump_key
00005a  f8c86000          STR      r6,[r8,#0]            ;849
00005e  4620              MOV      r0,r4                 ;850
000060  e7d9              B        |L11.22|
;;;852    
                          ENDP

000062  0000              DCW      0x0000
                  |L11.100|
000064  4541502d          DCB      "EAP-MSCHAPV2: Derived key",0
000068  4d534348
00006c  41505632
000070  3a204465
000074  72697665
000078  64206b65
00007c  7900    
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.eap_mschapv2_init||, CODE, READONLY, ALIGN=1

                  eap_mschapv2_init PROC
;;;108    
;;;109    static void * eap_mschapv2_init(struct eap_sm *sm)
000000  b570              PUSH     {r4-r6,lr}
;;;110    {
000002  4605              MOV      r5,r0
;;;111    	struct eap_mschapv2_data *data;
;;;112    	data = os_zalloc(sizeof(*data));
000004  205c              MOVS     r0,#0x5c
000006  f7fffffe          BL       os_zalloc
00000a  4604              MOV      r4,r0
;;;113    	if (data == NULL)
00000c  b90c              CBNZ     r4,|L12.18|
;;;114    		return NULL;
00000e  2000              MOVS     r0,#0
                  |L12.16|
;;;115    
;;;116    	if (sm->peer_challenge) {
;;;117    		data->peer_challenge = os_malloc(MSCHAPV2_CHAL_LEN);
;;;118    		if (data->peer_challenge == NULL) {
;;;119    			eap_mschapv2_deinit(sm, data);
;;;120    			return NULL;
;;;121    		}
;;;122    		os_memcpy(data->peer_challenge, sm->peer_challenge,
;;;123    			  MSCHAPV2_CHAL_LEN);
;;;124    	}
;;;125    
;;;126    	if (sm->auth_challenge) {
;;;127    		data->auth_challenge = os_malloc(MSCHAPV2_CHAL_LEN);
;;;128    		if (data->auth_challenge == NULL) {
;;;129    			eap_mschapv2_deinit(sm, data);
;;;130    			return NULL;
;;;131    		}
;;;132    		os_memcpy(data->auth_challenge, sm->auth_challenge,
;;;133    			  MSCHAPV2_CHAL_LEN);
;;;134    	}
;;;135    
;;;136    	data->phase2 = sm->init_phase2;
;;;137    
;;;138    	return data;
;;;139    }
000010  bd70              POP      {r4-r6,pc}
                  |L12.18|
000012  f8d500a0          LDR      r0,[r5,#0xa0]         ;116
000016  b188              CBZ      r0,|L12.60|
000018  2010              MOVS     r0,#0x10              ;117
00001a  f7fffffe          BL       os_malloc
00001e  6360              STR      r0,[r4,#0x34]         ;117
000020  6b60              LDR      r0,[r4,#0x34]         ;118
000022  b928              CBNZ     r0,|L12.48|
000024  4621              MOV      r1,r4                 ;119
000026  4628              MOV      r0,r5                 ;119
000028  f7fffffe          BL       eap_mschapv2_deinit
00002c  2000              MOVS     r0,#0                 ;120
00002e  e7ef              B        |L12.16|
                  |L12.48|
000030  f8d510a0          LDR      r1,[r5,#0xa0]         ;122
000034  2210              MOVS     r2,#0x10              ;122
000036  6b60              LDR      r0,[r4,#0x34]         ;122
000038  f7fffffe          BL       os_memcpy
                  |L12.60|
00003c  f8d500a4          LDR      r0,[r5,#0xa4]         ;126
000040  b188              CBZ      r0,|L12.102|
000042  2010              MOVS     r0,#0x10              ;127
000044  f7fffffe          BL       os_malloc
000048  63a0              STR      r0,[r4,#0x38]         ;127
00004a  6ba0              LDR      r0,[r4,#0x38]         ;128
00004c  b928              CBNZ     r0,|L12.90|
00004e  4621              MOV      r1,r4                 ;129
000050  4628              MOV      r0,r5                 ;129
000052  f7fffffe          BL       eap_mschapv2_deinit
000056  2000              MOVS     r0,#0                 ;130
000058  e7da              B        |L12.16|
                  |L12.90|
00005a  f8d510a4          LDR      r1,[r5,#0xa4]         ;132
00005e  2210              MOVS     r2,#0x10              ;132
000060  6ba0              LDR      r0,[r4,#0x38]         ;132
000062  f7fffffe          BL       os_memcpy
                  |L12.102|
000066  6de8              LDR      r0,[r5,#0x5c]         ;136
000068  63e0              STR      r0,[r4,#0x3c]         ;136
00006a  4620              MOV      r0,r4                 ;138
00006c  e7d0              B        |L12.16|
;;;140    
                          ENDP


                          AREA ||i.eap_mschapv2_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_mschapv2_isKeyAvailable PROC
;;;817    
;;;818    static Boolean eap_mschapv2_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;819    {
;;;820    	struct eap_mschapv2_data *data = priv;
000002  460a              MOV      r2,r1
;;;821    	return data->success && data->master_key_valid;
000004  6d50              LDR      r0,[r2,#0x54]
000006  b118              CBZ      r0,|L13.16|
000008  6d10              LDR      r0,[r2,#0x50]
00000a  b108              CBZ      r0,|L13.16|
00000c  2001              MOVS     r0,#1
                  |L13.14|
;;;822    }
00000e  4770              BX       lr
                  |L13.16|
000010  2000              MOVS     r0,#0                 ;821
000012  e7fc              B        |L13.14|
;;;823    
                          ENDP


                          AREA ||i.eap_mschapv2_password_changed||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_password_changed PROC
;;;301    
;;;302    static void eap_mschapv2_password_changed(struct eap_sm *sm,
000000  b570              PUSH     {r4-r6,lr}
;;;303    					  struct eap_mschapv2_data *data)
;;;304    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;305    	struct eap_peer_config *config = eap_get_config(sm);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       eap_get_config
00000c  4604              MOV      r4,r0
;;;306    	if (config && config->new_password) {
00000e  b37c              CBZ      r4,|L14.112|
000010  f8d400c4          LDR      r0,[r4,#0xc4]
000014  b360              CBZ      r0,|L14.112|
;;;307    		wpa_msg(sm->msg_ctx, MSG_INFO,
000016  4a17              LDR      r2,|L14.116|
000018  2100              MOVS     r1,#0
00001a  f8d50090          LDR      r0,[r5,#0x90]
00001e  f7fffffe          BL       wpa_msg
;;;308    			WPA_EVENT_PASSWORD_CHANGED
;;;309    			"EAP-MSCHAPV2: Password changed successfully");
;;;310    		data->prev_error = 0;
000022  2000              MOVS     r0,#0
000024  61b0              STR      r0,[r6,#0x18]
;;;311    		os_free(config->password);
000026  6920              LDR      r0,[r4,#0x10]
000028  f7fffffe          BL       os_free
;;;312    		if (config->flags & EAP_CONFIG_FLAGS_PASSWORD_NTHASH) {
00002c  f8d400d0          LDR      r0,[r4,#0xd0]
000030  f0100f01          TST      r0,#1
000034  d011              BEQ      |L14.90|
;;;313    			config->password = os_malloc(16);
000036  2010              MOVS     r0,#0x10
000038  f7fffffe          BL       os_malloc
00003c  6120              STR      r0,[r4,#0x10]
;;;314    			config->password_len = 16;
00003e  2010              MOVS     r0,#0x10
000040  6160              STR      r0,[r4,#0x14]
;;;315    			if (config->password) {
000042  6920              LDR      r0,[r4,#0x10]
000044  b120              CBZ      r0,|L14.80|
;;;316    				nt_password_hash(config->new_password,
000046  6922              LDR      r2,[r4,#0x10]
000048  e9d40131          LDRD     r0,r1,[r4,#0xc4]
00004c  f7fffffe          BL       nt_password_hash
                  |L14.80|
;;;317    						 config->new_password_len,
;;;318    						 config->password);
;;;319    			}
;;;320    			os_free(config->new_password);
000050  f8d400c4          LDR      r0,[r4,#0xc4]
000054  f7fffffe          BL       os_free
000058  e005              B        |L14.102|
                  |L14.90|
;;;321    		} else {
;;;322    			config->password = config->new_password;
00005a  f8d400c4          LDR      r0,[r4,#0xc4]
00005e  6120              STR      r0,[r4,#0x10]
;;;323    			config->password_len = config->new_password_len;
000060  f8d400c8          LDR      r0,[r4,#0xc8]
000064  6160              STR      r0,[r4,#0x14]
                  |L14.102|
;;;324    		}
;;;325    		config->new_password = NULL;
000066  2000              MOVS     r0,#0
000068  f8c400c4          STR      r0,[r4,#0xc4]
;;;326    		config->new_password_len = 0;
00006c  f8c400c8          STR      r0,[r4,#0xc8]
                  |L14.112|
;;;327    	}
;;;328    }
000070  bd70              POP      {r4-r6,pc}
;;;329    
                          ENDP

000072  0000              DCW      0x0000
                  |L14.116|
                          DCD      ||.constdata||+0x44

                          AREA ||i.eap_mschapv2_process||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_process PROC
;;;755     */
;;;756    static struct wpabuf * eap_mschapv2_process(struct eap_sm *sm, void *priv,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;757    					    struct eap_method_ret *ret,
;;;758    					    const struct wpabuf *reqData)
;;;759    {
000004  b085              SUB      sp,sp,#0x14
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;760    	struct eap_mschapv2_data *data = priv;
00000c  464e              MOV      r6,r9
;;;761    	struct eap_peer_config *config = eap_get_config(sm);
00000e  9805              LDR      r0,[sp,#0x14]
000010  f7fffffe          BL       eap_get_config
000014  4682              MOV      r10,r0
;;;762    	const struct eap_mschapv2_hdr *ms;
;;;763    	int using_prev_challenge = 0;
000016  f04f0b00          MOV      r11,#0
;;;764    	const u8 *pos;
;;;765    	size_t len;
;;;766    	u8 id;
;;;767    
;;;768    	if (eap_mschapv2_check_config(sm)) {
00001a  9805              LDR      r0,[sp,#0x14]
00001c  f7fffffe          BL       eap_mschapv2_check_config
000020  b128              CBZ      r0,|L15.46|
;;;769    		ret->ignore = TRUE;
000022  2001              MOVS     r0,#1
000024  6028              STR      r0,[r5,#0]
;;;770    		return NULL;
000026  2000              MOVS     r0,#0
                  |L15.40|
;;;771    	}
;;;772    
;;;773    	if (config->mschapv2_retry && data->prev_challenge &&
;;;774    	    data->prev_error == ERROR_AUTHENTICATION_FAILURE) {
;;;775    		wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: Replacing pending packet "
;;;776    			   "with the previous challenge");
;;;777    
;;;778    		reqData = data->prev_challenge;
;;;779    		using_prev_challenge = 1;
;;;780    		config->mschapv2_retry = 0;
;;;781    	}
;;;782    
;;;783    	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_MSCHAPV2, reqData,
;;;784    			       &len);
;;;785    	if (pos == NULL || len < sizeof(*ms) + 1) {
;;;786    		ret->ignore = TRUE;
;;;787    		return NULL;
;;;788    	}
;;;789    
;;;790    	ms = (const struct eap_mschapv2_hdr *) pos;
;;;791    	if (eap_mschapv2_check_mslen(sm, len, ms)) {
;;;792    		ret->ignore = TRUE;
;;;793    		return NULL;
;;;794    	}
;;;795    
;;;796    	id = eap_get_id(reqData);
;;;797    	wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: RX identifier %d mschapv2_id %d",
;;;798    		   id, ms->mschapv2_id);
;;;799    
;;;800    	switch (ms->op_code) {
;;;801    	case MSCHAPV2_OP_CHALLENGE:
;;;802    		if (!using_prev_challenge)
;;;803    			eap_mschapv2_copy_challenge(data, reqData);
;;;804    		return eap_mschapv2_challenge(sm, data, ret, ms, len, id);
;;;805    	case MSCHAPV2_OP_SUCCESS:
;;;806    		return eap_mschapv2_success(sm, data, ret, ms, len, id);
;;;807    	case MSCHAPV2_OP_FAILURE:
;;;808    		return eap_mschapv2_failure(sm, data, ret, ms, len, id);
;;;809    	default:
;;;810    		wpa_printf(MSG_INFO, "EAP-MSCHAPV2: Unknown op %d - ignored",
;;;811    			   ms->op_code);
;;;812    		ret->ignore = TRUE;
;;;813    		return NULL;
;;;814    	}
;;;815    }
000028  b009              ADD      sp,sp,#0x24
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L15.46|
00002e  f8da00c0          LDR      r0,[r10,#0xc0]        ;773
000032  b180              CBZ      r0,|L15.86|
000034  6db0              LDR      r0,[r6,#0x58]         ;773
000036  b170              CBZ      r0,|L15.86|
000038  69b0              LDR      r0,[r6,#0x18]         ;774
00003a  f5a07100          SUB      r1,r0,#0x200          ;774
00003e  39b3              SUBS     r1,r1,#0xb3           ;774
000040  d109              BNE      |L15.86|
000042  4934              LDR      r1,|L15.276|
000044  2000              MOVS     r0,#0                 ;775
000046  f7fffffe          BL       wpa_printf
00004a  6db7              LDR      r7,[r6,#0x58]         ;778
00004c  f04f0b01          MOV      r11,#1                ;779
000050  2000              MOVS     r0,#0                 ;780
000052  f8ca00c0          STR      r0,[r10,#0xc0]        ;780
                  |L15.86|
000056  ab04              ADD      r3,sp,#0x10           ;783
000058  463a              MOV      r2,r7                 ;783
00005a  211a              MOVS     r1,#0x1a              ;783
00005c  2000              MOVS     r0,#0                 ;783
00005e  f7fffffe          BL       eap_hdr_validate
000062  4680              MOV      r8,r0                 ;783
000064  f1b80f00          CMP      r8,#0                 ;785
000068  d002              BEQ      |L15.112|
00006a  9804              LDR      r0,[sp,#0x10]         ;785
00006c  2805              CMP      r0,#5                 ;785
00006e  d203              BCS      |L15.120|
                  |L15.112|
000070  2001              MOVS     r0,#1                 ;786
000072  6028              STR      r0,[r5,#0]            ;786
000074  2000              MOVS     r0,#0                 ;787
000076  e7d7              B        |L15.40|
                  |L15.120|
000078  4644              MOV      r4,r8                 ;790
00007a  4622              MOV      r2,r4                 ;791
00007c  e9dd1004          LDRD     r1,r0,[sp,#0x10]      ;791
000080  f7fffffe          BL       eap_mschapv2_check_mslen
000084  b118              CBZ      r0,|L15.142|
000086  2001              MOVS     r0,#1                 ;792
000088  6028              STR      r0,[r5,#0]            ;792
00008a  2000              MOVS     r0,#0                 ;793
00008c  e7cc              B        |L15.40|
                  |L15.142|
00008e  4638              MOV      r0,r7                 ;796
000090  f7fffffe          BL       eap_get_id
000094  9003              STR      r0,[sp,#0xc]          ;796
000096  7863              LDRB     r3,[r4,#1]            ;797
000098  a11f              ADR      r1,|L15.280|
00009a  2000              MOVS     r0,#0                 ;797
00009c  9a03              LDR      r2,[sp,#0xc]          ;797
00009e  f7fffffe          BL       wpa_printf
0000a2  7820              LDRB     r0,[r4,#0]            ;800
0000a4  2801              CMP      r0,#1                 ;800
0000a6  d004              BEQ      |L15.178|
0000a8  2803              CMP      r0,#3                 ;800
0000aa  d014              BEQ      |L15.214|
0000ac  2804              CMP      r0,#4                 ;800
0000ae  d128              BNE      |L15.258|
0000b0  e01c              B        |L15.236|
                  |L15.178|
0000b2  f1bb0f00          CMP      r11,#0                ;802
0000b6  d103              BNE      |L15.192|
0000b8  4639              MOV      r1,r7                 ;803
0000ba  4630              MOV      r0,r6                 ;803
0000bc  f7fffffe          BL       eap_mschapv2_copy_challenge
                  |L15.192|
0000c0  e9dd2303          LDRD     r2,r3,[sp,#0xc]       ;804
0000c4  e9cd3200          STRD     r3,r2,[sp,#0]         ;804
0000c8  4623              MOV      r3,r4                 ;804
0000ca  462a              MOV      r2,r5                 ;804
0000cc  4631              MOV      r1,r6                 ;804
0000ce  9805              LDR      r0,[sp,#0x14]         ;804
0000d0  f7fffffe          BL       eap_mschapv2_challenge
0000d4  e7a8              B        |L15.40|
                  |L15.214|
0000d6  e9dd2303          LDRD     r2,r3,[sp,#0xc]       ;806
0000da  e9cd3200          STRD     r3,r2,[sp,#0]         ;806
0000de  4623              MOV      r3,r4                 ;806
0000e0  462a              MOV      r2,r5                 ;806
0000e2  4631              MOV      r1,r6                 ;806
0000e4  9805              LDR      r0,[sp,#0x14]         ;806
0000e6  f7fffffe          BL       eap_mschapv2_success
0000ea  e79d              B        |L15.40|
                  |L15.236|
0000ec  e9dd2303          LDRD     r2,r3,[sp,#0xc]       ;808
0000f0  e9cd3200          STRD     r3,r2,[sp,#0]         ;808
0000f4  4623              MOV      r3,r4                 ;808
0000f6  462a              MOV      r2,r5                 ;808
0000f8  4631              MOV      r1,r6                 ;808
0000fa  9805              LDR      r0,[sp,#0x14]         ;808
0000fc  f7fffffe          BL       eap_mschapv2_failure
000100  e792              B        |L15.40|
                  |L15.258|
000102  7822              LDRB     r2,[r4,#0]            ;810
000104  a110              ADR      r1,|L15.328|
000106  2000              MOVS     r0,#0                 ;810
000108  f7fffffe          BL       wpa_printf
00010c  2001              MOVS     r0,#1                 ;812
00010e  6028              STR      r0,[r5,#0]            ;812
000110  2000              MOVS     r0,#0                 ;813
000112  e789              B        |L15.40|
;;;816    
                          ENDP

                  |L15.276|
                          DCD      ||.constdata||+0xd8
                  |L15.280|
000118  4541502d          DCB      "EAP-MSCHAPV2: RX identifier %d mschapv2_id %d",0
00011c  4d534348
000120  41505632
000124  3a205258
000128  20696465
00012c  6e746966
000130  69657220
000134  2564206d
000138  73636861
00013c  7076325f
000140  69642025
000144  6400    
000146  00                DCB      0
000147  00                DCB      0
                  |L15.328|
000148  4541502d          DCB      "EAP-MSCHAPV2: Unknown op %d - ignored",0
00014c  4d534348
000150  41505632
000154  3a20556e
000158  6b6e6f77
00015c  6e206f70
000160  20256420
000164  2d206967
000168  6e6f7265
00016c  6400    
00016e  00                DCB      0
00016f  00                DCB      0

                          AREA ||i.eap_mschapv2_success||, CODE, READONLY, ALIGN=2

                  eap_mschapv2_success PROC
;;;341     */
;;;342    static struct wpabuf * eap_mschapv2_success(struct eap_sm *sm,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;343    					    struct eap_mschapv2_data *data,
;;;344    					    struct eap_method_ret *ret,
;;;345    					    const struct eap_mschapv2_hdr *req,
;;;346    					    size_t req_len, u8 id)
;;;347    {
000004  b081              SUB      sp,sp,#4
000006  4682              MOV      r10,r0
000008  460d              MOV      r5,r1
00000a  4614              MOV      r4,r2
00000c  4699              MOV      r9,r3
00000e  f8ddb038          LDR      r11,[sp,#0x38]
;;;348    	struct wpabuf *resp;
;;;349    	const u8 *pos;
;;;350    	size_t len;
;;;351    
;;;352    	wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: Received success");
000012  a12c              ADR      r1,|L16.196|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;353    	len = req_len - sizeof(*req);
00001a  f1ab0704          SUB      r7,r11,#4
;;;354    	pos = (const u8 *) (req + 1);
00001e  f1090604          ADD      r6,r9,#4
;;;355    	if (!data->auth_response_valid ||
000022  6968              LDR      r0,[r5,#0x14]
000024  b128              CBZ      r0,|L16.50|
;;;356    	    mschapv2_verify_auth_response(data->auth_response, pos, len)) {
000026  463a              MOV      r2,r7
000028  4631              MOV      r1,r6
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       mschapv2_verify_auth_response
000030  b150              CBZ      r0,|L16.72|
                  |L16.50|
;;;357    		wpa_printf(MSG_WARNING, "EAP-MSCHAPV2: Invalid authenticator "
000032  a12c              ADR      r1,|L16.228|
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       wpa_printf
;;;358    			   "response in success request");
;;;359    		ret->methodState = METHOD_DONE;
00003a  2004              MOVS     r0,#4
00003c  7120              STRB     r0,[r4,#4]
;;;360    		ret->decision = DECISION_FAIL;
00003e  2000              MOVS     r0,#0
000040  7160              STRB     r0,[r4,#5]
                  |L16.66|
;;;361    		return NULL;
;;;362    	}
;;;363    	pos += 2 + 2 * MSCHAPV2_AUTH_RESPONSE_LEN;
;;;364    	len -= 2 + 2 * MSCHAPV2_AUTH_RESPONSE_LEN;
;;;365    	while (len > 0 && *pos == ' ') {
;;;366    		pos++;
;;;367    		len--;
;;;368    	}
;;;369    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-MSCHAPV2: Success message",
;;;370    			  pos, len);
;;;371    	wpa_printf(MSG_INFO, "EAP-MSCHAPV2: Authentication succeeded");
;;;372    
;;;373    	/* Note: Only op_code of the EAP-MSCHAPV2 header is included in success
;;;374    	 * message. */
;;;375    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_MSCHAPV2, 1,
;;;376    			     EAP_CODE_RESPONSE, id);
;;;377    	if (resp == NULL) {
;;;378    		wpa_printf(MSG_DEBUG, "EAP-MSCHAPV2: Failed to allocate "
;;;379    			   "buffer for success response");
;;;380    		ret->ignore = TRUE;
;;;381    		return NULL;
;;;382    	}
;;;383    
;;;384    	wpabuf_put_u8(resp, MSCHAPV2_OP_SUCCESS); /* op_code */
;;;385    
;;;386    	ret->methodState = METHOD_DONE;
;;;387    	ret->decision = DECISION_UNCOND_SUCC;
;;;388    	ret->allowNotifications = FALSE;
;;;389    	data->success = 1;
;;;390    
;;;391    	if (data->prev_error == ERROR_PASSWD_EXPIRED)
;;;392    		eap_mschapv2_password_changed(sm, data);
;;;393    
;;;394    	return resp;
;;;395    }
000042  b005              ADD      sp,sp,#0x14
000044  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.72|
000048  362a              ADDS     r6,r6,#0x2a           ;363
00004a  3f2a              SUBS     r7,r7,#0x2a           ;364
00004c  e001              B        |L16.82|
                  |L16.78|
00004e  1c76              ADDS     r6,r6,#1              ;366
000050  1e7f              SUBS     r7,r7,#1              ;367
                  |L16.82|
000052  b117              CBZ      r7,|L16.90|
000054  7830              LDRB     r0,[r6,#0]            ;365
000056  2820              CMP      r0,#0x20              ;365
000058  d0f9              BEQ      |L16.78|
                  |L16.90|
00005a  463b              MOV      r3,r7                 ;369
00005c  4632              MOV      r2,r6                 ;369
00005e  a131              ADR      r1,|L16.292|
000060  2000              MOVS     r0,#0                 ;369
000062  f7fffffe          BL       wpa_hexdump_ascii
000066  a137              ADR      r1,|L16.324|
000068  2000              MOVS     r0,#0                 ;371
00006a  f7fffffe          BL       wpa_printf
00006e  9b0f              LDR      r3,[sp,#0x3c]         ;375
000070  9300              STR      r3,[sp,#0]            ;375
000072  2302              MOVS     r3,#2                 ;375
000074  2201              MOVS     r2,#1                 ;375
000076  211a              MOVS     r1,#0x1a              ;375
000078  2000              MOVS     r0,#0                 ;375
00007a  f7fffffe          BL       eap_msg_alloc
00007e  4680              MOV      r8,r0                 ;375
000080  f1b80f00          CMP      r8,#0                 ;377
000084  d107              BNE      |L16.150|
000086  a139              ADR      r1,|L16.364|
000088  2000              MOVS     r0,#0                 ;378
00008a  f7fffffe          BL       wpa_printf
00008e  2001              MOVS     r0,#1                 ;380
000090  6020              STR      r0,[r4,#0]            ;380
000092  2000              MOVS     r0,#0                 ;381
000094  e7d5              B        |L16.66|
                  |L16.150|
000096  2103              MOVS     r1,#3                 ;384
000098  4640              MOV      r0,r8                 ;384
00009a  f7fffffe          BL       wpabuf_put_u8
00009e  2004              MOVS     r0,#4                 ;386
0000a0  7120              STRB     r0,[r4,#4]            ;386
0000a2  2002              MOVS     r0,#2                 ;387
0000a4  7160              STRB     r0,[r4,#5]            ;387
0000a6  2000              MOVS     r0,#0                 ;388
0000a8  60a0              STR      r0,[r4,#8]            ;388
0000aa  2001              MOVS     r0,#1                 ;389
0000ac  6568              STR      r0,[r5,#0x54]         ;389
0000ae  69a8              LDR      r0,[r5,#0x18]         ;391
0000b0  f5b07f22          CMP      r0,#0x288             ;391
0000b4  d103              BNE      |L16.190|
0000b6  4629              MOV      r1,r5                 ;392
0000b8  4650              MOV      r0,r10                ;392
0000ba  f7fffffe          BL       eap_mschapv2_password_changed
                  |L16.190|
0000be  4640              MOV      r0,r8                 ;394
0000c0  e7bf              B        |L16.66|
;;;396    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L16.196|
0000c4  4541502d          DCB      "EAP-MSCHAPV2: Received success",0
0000c8  4d534348
0000cc  41505632
0000d0  3a205265
0000d4  63656976
0000d8  65642073
0000dc  75636365
0000e0  737300  
0000e3  00                DCB      0
                  |L16.228|
0000e4  4541502d          DCB      "EAP-MSCHAPV2: Invalid authenticator response in success"
0000e8  4d534348
0000ec  41505632
0000f0  3a20496e
0000f4  76616c69
0000f8  64206175
0000fc  7468656e
000100  74696361
000104  746f7220
000108  72657370
00010c  6f6e7365
000110  20696e20
000114  73756363
000118  657373  
00011b  20726571          DCB      " request",0
00011f  75657374
000123  00      
                  |L16.292|
000124  4541502d          DCB      "EAP-MSCHAPV2: Success message",0
000128  4d534348
00012c  41505632
000130  3a205375
000134  63636573
000138  73206d65
00013c  73736167
000140  6500    
000142  00                DCB      0
000143  00                DCB      0
                  |L16.324|
000144  4541502d          DCB      "EAP-MSCHAPV2: Authentication succeeded",0
000148  4d534348
00014c  41505632
000150  3a204175
000154  7468656e
000158  74696361
00015c  74696f6e
000160  20737563
000164  63656564
000168  656400  
00016b  00                DCB      0
                  |L16.364|
00016c  4541502d          DCB      "EAP-MSCHAPV2: Failed to allocate buffer for success res"
000170  4d534348
000174  41505632
000178  3a204661
00017c  696c6564
000180  20746f20
000184  616c6c6f
000188  63617465
00018c  20627566
000190  66657220
000194  666f7220
000198  73756363
00019c  65737320
0001a0  726573  
0001a3  706f6e73          DCB      "ponse",0
0001a7  6500    
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0

                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.eap_peer_mschapv2_register||, CODE, READONLY, ALIGN=2

                  eap_peer_mschapv2_register PROC
;;;860     */
;;;861    int eap_peer_mschapv2_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;862    {
;;;863    	struct eap_method *eap;
;;;864    	int ret;
;;;865    
;;;866    	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a30f              ADR      r3,|L19.64|
000004  221a              MOVS     r2,#0x1a
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;867    				    EAP_VENDOR_IETF, EAP_TYPE_MSCHAPV2,
;;;868    				    "MSCHAPV2");
;;;869    	if (eap == NULL)
000010  b914              CBNZ     r4,|L19.24|
;;;870    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L19.22|
;;;871    
;;;872    	eap->init = eap_mschapv2_init;
;;;873    	eap->deinit = eap_mschapv2_deinit;
;;;874    	eap->process = eap_mschapv2_process;
;;;875    	eap->isKeyAvailable = eap_mschapv2_isKeyAvailable;
;;;876    	eap->getKey = eap_mschapv2_getKey;
;;;877    
;;;878    	ret = eap_peer_method_register(eap);
;;;879    	if (ret)
;;;880    		eap_peer_method_free(eap);
;;;881    	return ret;
;;;882    }
000016  bd70              POP      {r4-r6,pc}
                  |L19.24|
000018  480c              LDR      r0,|L19.76|
00001a  60e0              STR      r0,[r4,#0xc]          ;872
00001c  480c              LDR      r0,|L19.80|
00001e  6120              STR      r0,[r4,#0x10]         ;873
000020  480c              LDR      r0,|L19.84|
000022  6160              STR      r0,[r4,#0x14]         ;874
000024  480c              LDR      r0,|L19.88|
000026  61a0              STR      r0,[r4,#0x18]         ;875
000028  480c              LDR      r0,|L19.92|
00002a  61e0              STR      r0,[r4,#0x1c]         ;876
00002c  4620              MOV      r0,r4                 ;878
00002e  f7fffffe          BL       eap_peer_method_register
000032  4605              MOV      r5,r0                 ;878
000034  b115              CBZ      r5,|L19.60|
000036  4620              MOV      r0,r4                 ;880
000038  f7fffffe          BL       eap_peer_method_free
                  |L19.60|
00003c  4628              MOV      r0,r5                 ;881
00003e  e7ea              B        |L19.22|
                          ENDP

                  |L19.64|
000040  4d534348          DCB      "MSCHAPV2",0
000044  41505632
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L19.76|
                          DCD      eap_mschapv2_init
                  |L19.80|
                          DCD      eap_mschapv2_deinit
                  |L19.84|
                          DCD      eap_mschapv2_process
                  |L19.88|
                          DCD      eap_mschapv2_isKeyAvailable
                  |L19.92|
                          DCD      eap_mschapv2_getKey

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L20.30|
00001a  2001              MOVS     r0,#1
                  |L20.28|
;;;495    }
00001c  4770              BX       lr
                  |L20.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L20.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L25.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L25.14|
                  |L25.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L25.12|
;;;70     }
00000c  4770              BX       lr
                  |L25.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L25.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L26.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L26.16|
                  |L26.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L26.14|
;;;76     }
00000e  4770              BX       lr
                  |L26.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L26.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L27.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L27.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L27.18|
                  |L27.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L27.16|
;;;57     }
000010  4770              BX       lr
                  |L27.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L27.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L28.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L28.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L28.20|
                  |L28.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L28.18|
;;;64     }
000012  4770              BX       lr
                  |L28.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L28.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L29.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L29.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L29.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L29.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L32.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L32.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L32.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L32.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L38.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L38.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  4d534348          DCB      0x4d,0x53,0x43,0x48
000008  41505632          DCB      0x41,0x50,0x56,0x32
00000c  3a20546f          DCB      0x3a,0x20,0x54,0x6f
000010  6f207368          DCB      0x6f,0x20,0x73,0x68
000014  6f727420          DCB      0x6f,0x72,0x74,0x20
000018  6368616c          DCB      0x63,0x68,0x61,0x6c
00001c  6c656e67          DCB      0x6c,0x65,0x6e,0x67
000020  65207061          DCB      0x65,0x20,0x70,0x61
000024  636b6574          DCB      0x63,0x6b,0x65,0x74
000028  3a206c65          DCB      0x3a,0x20,0x6c,0x65
00002c  6e3d256c          DCB      0x6e,0x3d,0x25,0x6c
000030  75206368          DCB      0x75,0x20,0x63,0x68
000034  616c6c65          DCB      0x61,0x6c,0x6c,0x65
000038  6e67655f          DCB      0x6e,0x67,0x65,0x5f
00003c  6c656e3d          DCB      0x6c,0x65,0x6e,0x3d
000040  256c7500          DCB      0x25,0x6c,0x75,0x00
000044  4354524c          DCB      0x43,0x54,0x52,0x4c
000048  2d455645          DCB      0x2d,0x45,0x56,0x45
00004c  4e542d50          DCB      0x4e,0x54,0x2d,0x50
000050  41535357          DCB      0x41,0x53,0x53,0x57
000054  4f52442d          DCB      0x4f,0x52,0x44,0x2d
000058  4348414e          DCB      0x43,0x48,0x41,0x4e
00005c  47454420          DCB      0x47,0x45,0x44,0x20
000060  4541502d          DCB      0x45,0x41,0x50,0x2d
000064  4d534348          DCB      0x4d,0x53,0x43,0x48
000068  41505632          DCB      0x41,0x50,0x56,0x32
00006c  3a205061          DCB      0x3a,0x20,0x50,0x61
000070  7373776f          DCB      0x73,0x73,0x77,0x6f
000074  72642063          DCB      0x72,0x64,0x20,0x63
000078  68616e67          DCB      0x68,0x61,0x6e,0x67
00007c  65642073          DCB      0x65,0x64,0x20,0x73
000080  75636365          DCB      0x75,0x63,0x63,0x65
000084  73736675          DCB      0x73,0x73,0x66,0x75
000088  6c6c7900          DCB      0x6c,0x6c,0x79,0x00
00008c  4541502d          DCB      0x45,0x41,0x50,0x2d
000090  4d534348          DCB      0x4d,0x53,0x43,0x48
000094  41505632          DCB      0x41,0x50,0x56,0x32
000098  3a207265          DCB      0x3a,0x20,0x72,0x65
00009c  71756972          DCB      0x71,0x75,0x69,0x72
0000a0  65642063          DCB      0x65,0x64,0x20,0x63
0000a4  68616c6c          DCB      0x68,0x61,0x6c,0x6c
0000a8  656e6765          DCB      0x65,0x6e,0x67,0x65
0000ac  20666965          DCB      0x20,0x66,0x69,0x65
0000b0  6c642077          DCB      0x6c,0x64,0x20,0x77
0000b4  6173206e          DCB      0x61,0x73,0x20,0x6e
0000b8  6f742070          DCB      0x6f,0x74,0x20,0x70
0000bc  72657365          DCB      0x72,0x65,0x73,0x65
0000c0  6e742069          DCB      0x6e,0x74,0x20,0x69
0000c4  6e206661          DCB      0x6e,0x20,0x66,0x61
0000c8  696c7572          DCB      0x69,0x6c,0x75,0x72
0000cc  65206d65          DCB      0x65,0x20,0x6d,0x65
0000d0  73736167          DCB      0x73,0x73,0x61,0x67
0000d4  65000000          DCB      0x65,0x00,0x00,0x00
0000d8  4541502d          DCB      0x45,0x41,0x50,0x2d
0000dc  4d534348          DCB      0x4d,0x53,0x43,0x48
0000e0  41505632          DCB      0x41,0x50,0x56,0x32
0000e4  3a205265          DCB      0x3a,0x20,0x52,0x65
0000e8  706c6163          DCB      0x70,0x6c,0x61,0x63
0000ec  696e6720          DCB      0x69,0x6e,0x67,0x20
0000f0  70656e64          DCB      0x70,0x65,0x6e,0x64
0000f4  696e6720          DCB      0x69,0x6e,0x67,0x20
0000f8  7061636b          DCB      0x70,0x61,0x63,0x6b
0000fc  65742077          DCB      0x65,0x74,0x20,0x77
000100  69746820          DCB      0x69,0x74,0x68,0x20
000104  74686520          DCB      0x74,0x68,0x65,0x20
000108  70726576          DCB      0x70,0x72,0x65,0x76
00010c  696f7573          DCB      0x69,0x6f,0x75,0x73
000110  20636861          DCB      0x20,0x63,0x68,0x61
000114  6c6c656e          DCB      0x6c,0x6c,0x65,0x6e
000118  676500            DCB      0x67,0x65,0x00
