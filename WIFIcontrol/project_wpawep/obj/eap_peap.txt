; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_peap.o --depend=.\obj\eap_peap.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_peap.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_peap.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_peap_decrypt||, CODE, READONLY, ALIGN=2

                  eap_peap_decrypt PROC
;;;755    
;;;756    static int eap_peap_decrypt(struct eap_sm *sm, struct eap_peap_data *data,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;757    			    struct eap_method_ret *ret,
;;;758    			    const struct eap_hdr *req,
;;;759    			    const struct wpabuf *in_data,
;;;760    			    struct wpabuf **out_data)
;;;761    {
000004  b08b              SUB      sp,sp,#0x2c
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  4699              MOV      r9,r3
;;;762    	struct wpabuf *in_decrypted = NULL;
00000c  2000              MOVS     r0,#0
00000e  900a              STR      r0,[sp,#0x28]
;;;763    	int res, skip_change = 0;
000010  9008              STR      r0,[sp,#0x20]
;;;764    	struct eap_hdr *hdr, *rhdr;
;;;765    	struct wpabuf *resp = NULL;
000012  9007              STR      r0,[sp,#0x1c]
;;;766    	size_t len;
;;;767    
;;;768    	wpa_printf(MSG_DEBUG, "EAP-PEAP: received %lu bytes encrypted data for"
000014  9818              LDR      r0,[sp,#0x60]
000016  f7fffffe          BL       wpabuf_len
00001a  4680              MOV      r8,r0
00001c  4602              MOV      r2,r0
00001e  a1f4              ADR      r1,|L2.1008|
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       wpa_printf
;;;769    		   " Phase 2", (unsigned long) wpabuf_len(in_data));
;;;770    
;;;771    	if (data->pending_phase2_req) {
000026  6ee8              LDR      r0,[r5,#0x6c]
000028  b168              CBZ      r0,|L2.70|
;;;772    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Pending Phase 2 request - "
00002a  49ff              LDR      r1,|L2.1064|
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       wpa_printf
;;;773    			   "skip decryption and use old data");
;;;774    		/* Clear TLS reassembly state. */
;;;775    		eap_peer_tls_reset_input(&data->ssl);
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       eap_peer_tls_reset_input
;;;776    		in_decrypted = data->pending_phase2_req;
000038  6ee8              LDR      r0,[r5,#0x6c]
00003a  900a              STR      r0,[sp,#0x28]
;;;777    		data->pending_phase2_req = NULL;
00003c  2000              MOVS     r0,#0
00003e  66e8              STR      r0,[r5,#0x6c]
;;;778    		skip_change = 1;
000040  2001              MOVS     r0,#1
000042  9008              STR      r0,[sp,#0x20]
;;;779    		goto continue_req;
000044  e033              B        |L2.174|
                  |L2.70|
;;;780    	}
;;;781    
;;;782    	if (wpabuf_len(in_data) == 0 && sm->workaround &&
000046  9818              LDR      r0,[sp,#0x60]
000048  f7fffffe          BL       wpabuf_len
00004c  b990              CBNZ     r0,|L2.116|
00004e  980b              LDR      r0,[sp,#0x2c]
000050  f8d0009c          LDR      r0,[r0,#0x9c]
000054  b170              CBZ      r0,|L2.116|
;;;783    	    data->phase2_success) {
000056  6c28              LDR      r0,[r5,#0x40]
000058  b160              CBZ      r0,|L2.116|
;;;784    		/*
;;;785    		 * Cisco ACS seems to be using TLS ACK to terminate
;;;786    		 * EAP-PEAPv0/GTC. Try to reply with TLS ACK.
;;;787    		 */
;;;788    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Received TLS ACK, but "
00005a  49f3              LDR      r1,|L2.1064|
00005c  3148              ADDS     r1,r1,#0x48
00005e  2000              MOVS     r0,#0
000060  f7fffffe          BL       wpa_printf
;;;789    			   "expected data - acknowledge with TLS ACK since "
;;;790    			   "Phase 2 has been completed");
;;;791    		ret->decision = DECISION_COND_SUCC;
000064  2001              MOVS     r0,#1
000066  7170              STRB     r0,[r6,#5]
;;;792    		ret->methodState = METHOD_DONE;
000068  2004              MOVS     r0,#4
00006a  7130              STRB     r0,[r6,#4]
;;;793    		return 1;
00006c  2001              MOVS     r0,#1
                  |L2.110|
;;;794    	} else if (wpabuf_len(in_data) == 0) {
;;;795    		/* Received TLS ACK - requesting more fragments */
;;;796    		return eap_peer_tls_encrypt(sm, &data->ssl, EAP_TYPE_PEAP,
;;;797    					    data->peap_version,
;;;798    					    req->identifier, NULL, out_data);
;;;799    	}
;;;800    
;;;801    	res = eap_peer_tls_decrypt(sm, &data->ssl, in_data, &in_decrypted);
;;;802    	if (res)
;;;803    		return res;
;;;804    
;;;805    continue_req:
;;;806    	wpa_hexdump_buf(MSG_DEBUG, "EAP-PEAP: Decrypted Phase 2 EAP",
;;;807    			in_decrypted);
;;;808    
;;;809    	hdr = wpabuf_mhead(in_decrypted);
;;;810    	if (wpabuf_len(in_decrypted) == 5 && hdr->code == EAP_CODE_REQUEST &&
;;;811    	    be_to_host16(hdr->length) == 5 &&
;;;812    	    eap_get_type(in_decrypted) == EAP_TYPE_IDENTITY) {
;;;813    		/* At least FreeRADIUS seems to send full EAP header with
;;;814    		 * EAP Request Identity */
;;;815    		skip_change = 1;
;;;816    	}
;;;817    	if (wpabuf_len(in_decrypted) >= 5 && hdr->code == EAP_CODE_REQUEST &&
;;;818    	    eap_get_type(in_decrypted) == EAP_TYPE_TLV) {
;;;819    		skip_change = 1;
;;;820    	}
;;;821    
;;;822    	if (data->peap_version == 0 && !skip_change) {
;;;823    		struct eap_hdr *nhdr;
;;;824    		struct wpabuf *nmsg = wpabuf_alloc(sizeof(struct eap_hdr) +
;;;825    						   wpabuf_len(in_decrypted));
;;;826    		if (nmsg == NULL) {
;;;827    			wpabuf_free(in_decrypted);
;;;828    			return 0;
;;;829    		}
;;;830    		nhdr = wpabuf_put(nmsg, sizeof(*nhdr));
;;;831    		wpabuf_put_buf(nmsg, in_decrypted);
;;;832    		nhdr->code = req->code;
;;;833    		nhdr->identifier = req->identifier;
;;;834    		nhdr->length = host_to_be16(sizeof(struct eap_hdr) +
;;;835    					    wpabuf_len(in_decrypted));
;;;836    
;;;837    		wpabuf_free(in_decrypted);
;;;838    		in_decrypted = nmsg;
;;;839    	}
;;;840    
;;;841    	if (data->peap_version >= 2) {
;;;842    		struct eap_tlv_hdr *tlv;
;;;843    		struct wpabuf *nmsg;
;;;844    
;;;845    		if (wpabuf_len(in_decrypted) < sizeof(*tlv) + sizeof(*hdr)) {
;;;846    			wpa_printf(MSG_INFO, "EAP-PEAPv2: Too short Phase 2 "
;;;847    				   "EAP TLV");
;;;848    			wpabuf_free(in_decrypted);
;;;849    			return 0;
;;;850    		}
;;;851    		tlv = wpabuf_mhead(in_decrypted);
;;;852    		if ((be_to_host16(tlv->tlv_type) & 0x3fff) !=
;;;853    		    EAP_TLV_EAP_PAYLOAD_TLV) {
;;;854    			wpa_printf(MSG_INFO, "EAP-PEAPv2: Not an EAP TLV");
;;;855    			wpabuf_free(in_decrypted);
;;;856    			return 0;
;;;857    		}
;;;858    		if (sizeof(*tlv) + be_to_host16(tlv->length) >
;;;859    		    wpabuf_len(in_decrypted)) {
;;;860    			wpa_printf(MSG_INFO, "EAP-PEAPv2: Invalid EAP TLV "
;;;861    				   "length");
;;;862    			wpabuf_free(in_decrypted);
;;;863    			return 0;
;;;864    		}
;;;865    		hdr = (struct eap_hdr *) (tlv + 1);
;;;866    		if (be_to_host16(hdr->length) > be_to_host16(tlv->length)) {
;;;867    			wpa_printf(MSG_INFO, "EAP-PEAPv2: No room for full "
;;;868    				   "EAP packet in EAP TLV");
;;;869    			wpabuf_free(in_decrypted);
;;;870    			return 0;
;;;871    		}
;;;872    
;;;873    		nmsg = wpabuf_alloc(be_to_host16(hdr->length));
;;;874    		if (nmsg == NULL) {
;;;875    			wpabuf_free(in_decrypted);
;;;876    			return 0;
;;;877    		}
;;;878    
;;;879    		wpabuf_put_data(nmsg, hdr, be_to_host16(hdr->length));
;;;880    		wpabuf_free(in_decrypted);
;;;881    		in_decrypted = nmsg;
;;;882    	}
;;;883    
;;;884    	hdr = wpabuf_mhead(in_decrypted);
;;;885    	if (wpabuf_len(in_decrypted) < sizeof(*hdr)) {
;;;886    		wpa_printf(MSG_INFO, "EAP-PEAP: Too short Phase 2 "
;;;887    			   "EAP frame (len=%lu)",
;;;888    			   (unsigned long) wpabuf_len(in_decrypted));
;;;889    		wpabuf_free(in_decrypted);
;;;890    		return 0;
;;;891    	}
;;;892    	len = be_to_host16(hdr->length);
;;;893    	if (len > wpabuf_len(in_decrypted)) {
;;;894    		wpa_printf(MSG_INFO, "EAP-PEAP: Length mismatch in "
;;;895    			   "Phase 2 EAP frame (len=%lu hdr->length=%lu)",
;;;896    			   (unsigned long) wpabuf_len(in_decrypted),
;;;897    			   (unsigned long) len);
;;;898    		wpabuf_free(in_decrypted);
;;;899    		return 0;
;;;900    	}
;;;901    	if (len < wpabuf_len(in_decrypted)) {
;;;902    		wpa_printf(MSG_INFO, "EAP-PEAP: Odd.. Phase 2 EAP header has "
;;;903    			   "shorter length than full decrypted data "
;;;904    			   "(%lu < %lu)",
;;;905    			   (unsigned long) len,
;;;906    			   (unsigned long) wpabuf_len(in_decrypted));
;;;907    	}
;;;908    	wpa_printf(MSG_DEBUG, "EAP-PEAP: received Phase 2: code=%d "
;;;909    		   "identifier=%d length=%lu", hdr->code, hdr->identifier,
;;;910    		   (unsigned long) len);
;;;911    	switch (hdr->code) {
;;;912    	case EAP_CODE_REQUEST:
;;;913    		if (eap_peap_phase2_request(sm, data, ret, in_decrypted,
;;;914    					    &resp)) {
;;;915    			wpabuf_free(in_decrypted);
;;;916    			wpa_printf(MSG_INFO, "EAP-PEAP: Phase2 Request "
;;;917    				   "processing failed");
;;;918    			return 0;
;;;919    		}
;;;920    		break;
;;;921    	case EAP_CODE_SUCCESS:
;;;922    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Phase 2 Success");
;;;923    		if (data->peap_version == 1) {
;;;924    			/* EAP-Success within TLS tunnel is used to indicate
;;;925    			 * shutdown of the TLS channel. The authentication has
;;;926    			 * been completed. */
;;;927    			if (data->phase2_eap_started &&
;;;928    			    !data->phase2_eap_success) {
;;;929    				wpa_printf(MSG_DEBUG, "EAP-PEAP: Phase 2 "
;;;930    					   "Success used to indicate success, "
;;;931    					   "but Phase 2 EAP was not yet "
;;;932    					   "completed successfully");
;;;933    				ret->methodState = METHOD_DONE;
;;;934    				ret->decision = DECISION_FAIL;
;;;935    				wpabuf_free(in_decrypted);
;;;936    				return 0;
;;;937    			}
;;;938    			wpa_printf(MSG_DEBUG, "EAP-PEAP: Version 1 - "
;;;939    				   "EAP-Success within TLS tunnel - "
;;;940    				   "authentication completed");
;;;941    			ret->decision = DECISION_UNCOND_SUCC;
;;;942    			ret->methodState = METHOD_DONE;
;;;943    			data->phase2_success = 1;
;;;944    			if (data->peap_outer_success == 2) {
;;;945    				wpabuf_free(in_decrypted);
;;;946    				wpa_printf(MSG_DEBUG, "EAP-PEAP: Use TLS ACK "
;;;947    					   "to finish authentication");
;;;948    				return 1;
;;;949    			} else if (data->peap_outer_success == 1) {
;;;950    				/* Reply with EAP-Success within the TLS
;;;951    				 * channel to complete the authentication. */
;;;952    				resp = wpabuf_alloc(sizeof(struct eap_hdr));
;;;953    				if (resp) {
;;;954    					rhdr = wpabuf_put(resp, sizeof(*rhdr));
;;;955    					rhdr->code = EAP_CODE_SUCCESS;
;;;956    					rhdr->identifier = hdr->identifier;
;;;957    					rhdr->length =
;;;958    						host_to_be16(sizeof(*rhdr));
;;;959    				}
;;;960    			} else {
;;;961    				/* No EAP-Success expected for Phase 1 (outer,
;;;962    				 * unencrypted auth), so force EAP state
;;;963    				 * machine to SUCCESS state. */
;;;964    				sm->peap_done = TRUE;
;;;965    			}
;;;966    		} else {
;;;967    			/* FIX: ? */
;;;968    		}
;;;969    		break;
;;;970    	case EAP_CODE_FAILURE:
;;;971    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Phase 2 Failure");
;;;972    		ret->decision = DECISION_FAIL;
;;;973    		ret->methodState = METHOD_MAY_CONT;
;;;974    		ret->allowNotifications = FALSE;
;;;975    		/* Reply with EAP-Failure within the TLS channel to complete
;;;976    		 * failure reporting. */
;;;977    		resp = wpabuf_alloc(sizeof(struct eap_hdr));
;;;978    		if (resp) {
;;;979    			rhdr = wpabuf_put(resp, sizeof(*rhdr));
;;;980    			rhdr->code = EAP_CODE_FAILURE;
;;;981    			rhdr->identifier = hdr->identifier;
;;;982    			rhdr->length = host_to_be16(sizeof(*rhdr));
;;;983    		}
;;;984    		break;
;;;985    	default:
;;;986    		wpa_printf(MSG_INFO, "EAP-PEAP: Unexpected code=%d in "
;;;987    			   "Phase 2 EAP header", hdr->code);
;;;988    		break;
;;;989    	}
;;;990    
;;;991    	wpabuf_free(in_decrypted);
;;;992    
;;;993    	if (resp) {
;;;994    		int skip_change2 = 0;
;;;995    		struct wpabuf *rmsg, buf;
;;;996    
;;;997    		wpa_hexdump_buf_key(MSG_DEBUG,
;;;998    				    "EAP-PEAP: Encrypting Phase 2 data", resp);
;;;999    		/* PEAP version changes */
;;;1000   		if (data->peap_version >= 2) {
;;;1001   			resp = eap_peapv2_tlv_eap_payload(resp);
;;;1002   			if (resp == NULL)
;;;1003   				return -1;
;;;1004   		}
;;;1005   		if (wpabuf_len(resp) >= 5 &&
;;;1006   		    wpabuf_head_u8(resp)[0] == EAP_CODE_RESPONSE &&
;;;1007   		    eap_get_type(resp) == EAP_TYPE_TLV)
;;;1008   			skip_change2 = 1;
;;;1009   		rmsg = resp;
;;;1010   		if (data->peap_version == 0 && !skip_change2) {
;;;1011   			wpabuf_set(&buf, wpabuf_head_u8(resp) +
;;;1012   				   sizeof(struct eap_hdr),
;;;1013   				   wpabuf_len(resp) - sizeof(struct eap_hdr));
;;;1014   			rmsg = &buf;
;;;1015   		}
;;;1016   
;;;1017   		if (eap_peer_tls_encrypt(sm, &data->ssl, EAP_TYPE_PEAP,
;;;1018   					 data->peap_version, req->identifier,
;;;1019   					 rmsg, out_data)) {
;;;1020   			wpa_printf(MSG_INFO, "EAP-PEAP: Failed to encrypt "
;;;1021   				   "a Phase 2 frame");
;;;1022   		}
;;;1023   		wpabuf_free(resp);
;;;1024   	}
;;;1025   
;;;1026   	return 0;
;;;1027   }
00006e  b00f              ADD      sp,sp,#0x3c
000070  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.116|
000074  9818              LDR      r0,[sp,#0x60]         ;794
000076  f7fffffe          BL       wpabuf_len
00007a  b960              CBNZ     r0,|L2.150|
00007c  2200              MOVS     r2,#0                 ;796
00007e  f8991001          LDRB     r1,[r9,#1]            ;796
000082  9b19              LDR      r3,[sp,#0x64]         ;796
000084  e88d000e          STM      sp,{r1-r3}            ;796
000088  2219              MOVS     r2,#0x19              ;796
00008a  4629              MOV      r1,r5                 ;796
00008c  6aeb              LDR      r3,[r5,#0x2c]         ;796
00008e  980b              LDR      r0,[sp,#0x2c]         ;796
000090  f7fffffe          BL       eap_peer_tls_encrypt
000094  e7eb              B        |L2.110|
                  |L2.150|
000096  ab0a              ADD      r3,sp,#0x28           ;801
000098  4629              MOV      r1,r5                 ;801
00009a  9a18              LDR      r2,[sp,#0x60]         ;801
00009c  980b              LDR      r0,[sp,#0x2c]         ;801
00009e  f7fffffe          BL       eap_peer_tls_decrypt
0000a2  9009              STR      r0,[sp,#0x24]         ;801
0000a4  9809              LDR      r0,[sp,#0x24]         ;802
0000a6  b108              CBZ      r0,|L2.172|
0000a8  9809              LDR      r0,[sp,#0x24]         ;803
0000aa  e7e0              B        |L2.110|
                  |L2.172|
0000ac  bf00              NOP                            ;805
                  |L2.174|
0000ae  a1df              ADR      r1,|L2.1068|
0000b0  2000              MOVS     r0,#0                 ;806
0000b2  9a0a              LDR      r2,[sp,#0x28]         ;806
0000b4  f7fffffe          BL       wpa_hexdump_buf
0000b8  980a              LDR      r0,[sp,#0x28]         ;809
0000ba  f7fffffe          BL       wpabuf_mhead
0000be  4604              MOV      r4,r0                 ;809
0000c0  980a              LDR      r0,[sp,#0x28]         ;810
0000c2  f7fffffe          BL       wpabuf_len
0000c6  2805              CMP      r0,#5                 ;810
0000c8  d112              BNE      |L2.240|
0000ca  7820              LDRB     r0,[r4,#0]            ;810
0000cc  2801              CMP      r0,#1                 ;810
0000ce  d10f              BNE      |L2.240|
0000d0  8860              LDRH     r0,[r4,#2]            ;811
0000d2  f44f417f          MOV      r1,#0xff00            ;811
0000d6  ea012000          AND      r0,r1,r0,LSL #8       ;811
0000da  8861              LDRH     r1,[r4,#2]            ;811
0000dc  ea402011          ORR      r0,r0,r1,LSR #8       ;811
0000e0  2805              CMP      r0,#5                 ;811
0000e2  d105              BNE      |L2.240|
0000e4  980a              LDR      r0,[sp,#0x28]         ;812
0000e6  f7fffffe          BL       eap_get_type
0000ea  2801              CMP      r0,#1                 ;812
0000ec  d100              BNE      |L2.240|
0000ee  9008              STR      r0,[sp,#0x20]         ;815
                  |L2.240|
0000f0  980a              LDR      r0,[sp,#0x28]         ;817
0000f2  f7fffffe          BL       wpabuf_len
0000f6  2805              CMP      r0,#5                 ;817
0000f8  d309              BCC      |L2.270|
0000fa  7820              LDRB     r0,[r4,#0]            ;817
0000fc  2801              CMP      r0,#1                 ;817
0000fe  d106              BNE      |L2.270|
000100  980a              LDR      r0,[sp,#0x28]         ;818
000102  f7fffffe          BL       eap_get_type
000106  2821              CMP      r0,#0x21              ;818
000108  d101              BNE      |L2.270|
00010a  2001              MOVS     r0,#1                 ;819
00010c  9008              STR      r0,[sp,#0x20]         ;819
                  |L2.270|
00010e  6ae8              LDR      r0,[r5,#0x2c]         ;822
000110  bbd8              CBNZ     r0,|L2.394|
000112  9808              LDR      r0,[sp,#0x20]         ;822
000114  bbc8              CBNZ     r0,|L2.394|
000116  980a              LDR      r0,[sp,#0x28]         ;824
000118  f7fffffe          BL       wpabuf_len
00011c  f1000b04          ADD      r11,r0,#4             ;824
000120  4658              MOV      r0,r11                ;824
000122  f7fffffe          BL       wpabuf_alloc
000126  9006              STR      r0,[sp,#0x18]         ;824
000128  9806              LDR      r0,[sp,#0x18]         ;826
00012a  b920              CBNZ     r0,|L2.310|
00012c  980a              LDR      r0,[sp,#0x28]         ;827
00012e  f7fffffe          BL       wpabuf_free
000132  2000              MOVS     r0,#0                 ;828
000134  e79b              B        |L2.110|
                  |L2.310|
000136  2104              MOVS     r1,#4                 ;830
000138  9806              LDR      r0,[sp,#0x18]         ;830
00013a  f7fffffe          BL       wpabuf_put
00013e  4680              MOV      r8,r0                 ;830
000140  990a              LDR      r1,[sp,#0x28]         ;831
000142  9806              LDR      r0,[sp,#0x18]         ;831
000144  f7fffffe          BL       wpabuf_put_buf
000148  f8990000          LDRB     r0,[r9,#0]            ;832
00014c  f8880000          STRB     r0,[r8,#0]            ;832
000150  f8990001          LDRB     r0,[r9,#1]            ;833
000154  f8880001          STRB     r0,[r8,#1]            ;833
000158  980a              LDR      r0,[sp,#0x28]         ;834
00015a  f7fffffe          BL       wpabuf_len
00015e  1d00              ADDS     r0,r0,#4              ;834
000160  b280              UXTH     r0,r0                 ;834
000162  f44f417f          MOV      r1,#0xff00            ;834
000166  ea012b00          AND      r11,r1,r0,LSL #8      ;834
00016a  980a              LDR      r0,[sp,#0x28]         ;834
00016c  f7fffffe          BL       wpabuf_len
000170  1d00              ADDS     r0,r0,#4              ;834
000172  f3c02007          UBFX     r0,r0,#8,#8           ;834
000176  ea4b0b00          ORR      r11,r11,r0            ;834
00017a  f8a8b002          STRH     r11,[r8,#2]           ;834
00017e  980a              LDR      r0,[sp,#0x28]         ;837
000180  f7fffffe          BL       wpabuf_free
000184  9806              LDR      r0,[sp,#0x18]         ;838
000186  900a              STR      r0,[sp,#0x28]         ;838
000188  bf00              NOP                            ;839
                  |L2.394|
00018a  6ae8              LDR      r0,[r5,#0x2c]         ;841
00018c  2802              CMP      r0,#2                 ;841
00018e  db72              BLT      |L2.630|
000190  980a              LDR      r0,[sp,#0x28]         ;845
000192  f7fffffe          BL       wpabuf_len
000196  2808              CMP      r0,#8                 ;845
000198  d208              BCS      |L2.428|
00019a  a1ac              ADR      r1,|L2.1100|
00019c  2000              MOVS     r0,#0                 ;846
00019e  f7fffffe          BL       wpa_printf
0001a2  980a              LDR      r0,[sp,#0x28]         ;848
0001a4  f7fffffe          BL       wpabuf_free
0001a8  2000              MOVS     r0,#0                 ;849
0001aa  e760              B        |L2.110|
                  |L2.428|
0001ac  980a              LDR      r0,[sp,#0x28]         ;851
0001ae  f7fffffe          BL       wpabuf_mhead
0001b2  4680              MOV      r8,r0                 ;851
0001b4  f8b80000          LDRH     r0,[r8,#0]            ;852
0001b8  f44f417f          MOV      r1,#0xff00            ;852
0001bc  ea012100          AND      r1,r1,r0,LSL #8       ;852
0001c0  ea412110          ORR      r1,r1,r0,LSR #8       ;852
0001c4  f3c1000d          UBFX     r0,r1,#0,#14          ;852
0001c8  2809              CMP      r0,#9                 ;852
0001ca  d008              BEQ      |L2.478|
0001cc  a1a9              ADR      r1,|L2.1140|
0001ce  2000              MOVS     r0,#0                 ;854
0001d0  f7fffffe          BL       wpa_printf
0001d4  980a              LDR      r0,[sp,#0x28]         ;855
0001d6  f7fffffe          BL       wpabuf_free
0001da  2000              MOVS     r0,#0                 ;856
0001dc  e747              B        |L2.110|
                  |L2.478|
0001de  980a              LDR      r0,[sp,#0x28]         ;858
0001e0  f7fffffe          BL       wpabuf_len
0001e4  4601              MOV      r1,r0                 ;858
0001e6  f8b80002          LDRH     r0,[r8,#2]            ;858
0001ea  f44f427f          MOV      r2,#0xff00            ;858
0001ee  ea022000          AND      r0,r2,r0,LSL #8       ;858
0001f2  f8b82002          LDRH     r2,[r8,#2]            ;858
0001f6  ea402012          ORR      r0,r0,r2,LSR #8       ;858
0001fa  1d00              ADDS     r0,r0,#4              ;858
0001fc  4281              CMP      r1,r0                 ;858
0001fe  d208              BCS      |L2.530|
000200  a1a3              ADR      r1,|L2.1168|
000202  2000              MOVS     r0,#0                 ;860
000204  f7fffffe          BL       wpa_printf
000208  980a              LDR      r0,[sp,#0x28]         ;862
00020a  f7fffffe          BL       wpabuf_free
00020e  2000              MOVS     r0,#0                 ;863
000210  e72d              B        |L2.110|
                  |L2.530|
000212  f1080404          ADD      r4,r8,#4              ;865
000216  8860              LDRH     r0,[r4,#2]            ;866
000218  f44f417f          MOV      r1,#0xff00            ;866
00021c  ea012000          AND      r0,r1,r0,LSL #8       ;866
000220  8861              LDRH     r1,[r4,#2]            ;866
000222  ea402011          ORR      r0,r0,r1,LSR #8       ;866
000226  f8b81002          LDRH     r1,[r8,#2]            ;866
00022a  f44f427f          MOV      r2,#0xff00            ;866
00022e  ea022101          AND      r1,r2,r1,LSL #8       ;866
000232  f8b82002          LDRH     r2,[r8,#2]            ;866
000236  ea412112          ORR      r1,r1,r2,LSR #8       ;866
00023a  4288              CMP      r0,r1                 ;866
00023c  dd08              BLE      |L2.592|
00023e  a19d              ADR      r1,|L2.1204|
000240  2000              MOVS     r0,#0                 ;867
000242  f7fffffe          BL       wpa_printf
000246  980a              LDR      r0,[sp,#0x28]         ;869
000248  f7fffffe          BL       wpabuf_free
00024c  2000              MOVS     r0,#0                 ;870
00024e  e70e              B        |L2.110|
                  |L2.592|
000250  8861              LDRH     r1,[r4,#2]            ;873
000252  f44f427f          MOV      r2,#0xff00            ;873
000256  ea022101          AND      r1,r2,r1,LSL #8       ;873
00025a  8862              LDRH     r2,[r4,#2]            ;873
00025c  ea412012          ORR      r0,r1,r2,LSR #8       ;873
000260  f7fffffe          BL       wpabuf_alloc
000264  4683              MOV      r11,r0                ;873
000266  f1bb0f00          CMP      r11,#0                ;874
00026a  d105              BNE      |L2.632|
00026c  980a              LDR      r0,[sp,#0x28]         ;875
00026e  f7fffffe          BL       wpabuf_free
000272  2000              MOVS     r0,#0                 ;876
000274  e6fb              B        |L2.110|
                  |L2.630|
000276  e011              B        |L2.668|
                  |L2.632|
000278  8860              LDRH     r0,[r4,#2]            ;879
00027a  f44f417f          MOV      r1,#0xff00            ;879
00027e  ea012000          AND      r0,r1,r0,LSL #8       ;879
000282  8861              LDRH     r1,[r4,#2]            ;879
000284  ea402211          ORR      r2,r0,r1,LSR #8       ;879
000288  4621              MOV      r1,r4                 ;879
00028a  4658              MOV      r0,r11                ;879
00028c  f7fffffe          BL       wpabuf_put_data
000290  980a              LDR      r0,[sp,#0x28]         ;880
000292  f7fffffe          BL       wpabuf_free
000296  f8cdb028          STR      r11,[sp,#0x28]        ;881
00029a  bf00              NOP                            ;882
                  |L2.668|
00029c  980a              LDR      r0,[sp,#0x28]         ;884
00029e  f7fffffe          BL       wpabuf_mhead
0002a2  4604              MOV      r4,r0                 ;884
0002a4  980a              LDR      r0,[sp,#0x28]         ;885
0002a6  f7fffffe          BL       wpabuf_len
0002aa  2804              CMP      r0,#4                 ;885
0002ac  d20d              BCS      |L2.714|
0002ae  980a              LDR      r0,[sp,#0x28]         ;886
0002b0  f7fffffe          BL       wpabuf_len
0002b4  4680              MOV      r8,r0                 ;886
0002b6  4602              MOV      r2,r0                 ;886
0002b8  a18b              ADR      r1,|L2.1256|
0002ba  2000              MOVS     r0,#0                 ;886
0002bc  f7fffffe          BL       wpa_printf
0002c0  980a              LDR      r0,[sp,#0x28]         ;889
0002c2  f7fffffe          BL       wpabuf_free
0002c6  2000              MOVS     r0,#0                 ;890
0002c8  e6d1              B        |L2.110|
                  |L2.714|
0002ca  8860              LDRH     r0,[r4,#2]            ;892
0002cc  f44f417f          MOV      r1,#0xff00            ;892
0002d0  ea012000          AND      r0,r1,r0,LSL #8       ;892
0002d4  8861              LDRH     r1,[r4,#2]            ;892
0002d6  ea402a11          ORR      r10,r0,r1,LSR #8      ;892
0002da  980a              LDR      r0,[sp,#0x28]         ;893
0002dc  f7fffffe          BL       wpabuf_len
0002e0  4550              CMP      r0,r10                ;893
0002e2  d20f              BCS      |L2.772|
0002e4  980a              LDR      r0,[sp,#0x28]         ;894
0002e6  f7fffffe          BL       wpabuf_len
0002ea  4680              MOV      r8,r0                 ;894
0002ec  4653              MOV      r3,r10                ;894
0002ee  4602              MOV      r2,r0                 ;894
0002f0  494d              LDR      r1,|L2.1064|
0002f2  31b4              ADDS     r1,r1,#0xb4           ;894
0002f4  2000              MOVS     r0,#0                 ;894
0002f6  f7fffffe          BL       wpa_printf
0002fa  980a              LDR      r0,[sp,#0x28]         ;898
0002fc  f7fffffe          BL       wpabuf_free
000300  2000              MOVS     r0,#0                 ;899
000302  e6b4              B        |L2.110|
                  |L2.772|
000304  980a              LDR      r0,[sp,#0x28]         ;901
000306  f7fffffe          BL       wpabuf_len
00030a  4550              CMP      r0,r10                ;901
00030c  d909              BLS      |L2.802|
00030e  980a              LDR      r0,[sp,#0x28]         ;902
000310  f7fffffe          BL       wpabuf_len
000314  4680              MOV      r8,r0                 ;902
000316  4603              MOV      r3,r0                 ;902
000318  4652              MOV      r2,r10                ;902
00031a  497f              LDR      r1,|L2.1304|
00031c  2000              MOVS     r0,#0                 ;902
00031e  f7fffffe          BL       wpa_printf
                  |L2.802|
000322  f8cda000          STR      r10,[sp,#0]           ;908
000326  7863              LDRB     r3,[r4,#1]            ;908
000328  7822              LDRB     r2,[r4,#0]            ;908
00032a  a17c              ADR      r1,|L2.1308|
00032c  2000              MOVS     r0,#0                 ;908
00032e  f7fffffe          BL       wpa_printf
000332  7820              LDRB     r0,[r4,#0]            ;911
000334  2801              CMP      r0,#1                 ;911
000336  d004              BEQ      |L2.834|
000338  2803              CMP      r0,#3                 ;911
00033a  d015              BEQ      |L2.872|
00033c  2804              CMP      r0,#4                 ;911
00033e  d154              BNE      |L2.1002|
000340  e152              B        |L2.1512|
                  |L2.834|
000342  ab07              ADD      r3,sp,#0x1c           ;913
000344  9300              STR      r3,[sp,#0]            ;913
000346  4632              MOV      r2,r6                 ;913
000348  4629              MOV      r1,r5                 ;913
00034a  e9dd300a          LDRD     r3,r0,[sp,#0x28]      ;913
00034e  f7fffffe          BL       eap_peap_phase2_request
000352  b140              CBZ      r0,|L2.870|
000354  980a              LDR      r0,[sp,#0x28]         ;915
000356  f7fffffe          BL       wpabuf_free
00035a  a180              ADR      r1,|L2.1372|
00035c  2000              MOVS     r0,#0                 ;916
00035e  f7fffffe          BL       wpa_printf
000362  2000              MOVS     r0,#0                 ;918
000364  e683              B        |L2.110|
                  |L2.870|
000366  e162              B        |L2.1582|
                  |L2.872|
000368  a187              ADR      r1,|L2.1416|
00036a  2000              MOVS     r0,#0                 ;922
00036c  f7fffffe          BL       wpa_printf
000370  6ae8              LDR      r0,[r5,#0x2c]         ;923
000372  2801              CMP      r0,#1                 ;923
000374  d13a              BNE      |L2.1004|
000376  6ca8              LDR      r0,[r5,#0x48]         ;927
000378  b178              CBZ      r0,|L2.922|
00037a  6c68              LDR      r0,[r5,#0x44]         ;928
00037c  b968              CBNZ     r0,|L2.922|
00037e  4966              LDR      r1,|L2.1304|
000380  315c              ADDS     r1,r1,#0x5c           ;929
000382  2000              MOVS     r0,#0                 ;929
000384  f7fffffe          BL       wpa_printf
000388  2004              MOVS     r0,#4                 ;933
00038a  7130              STRB     r0,[r6,#4]            ;933
00038c  2000              MOVS     r0,#0                 ;934
00038e  7170              STRB     r0,[r6,#5]            ;934
000390  980a              LDR      r0,[sp,#0x28]         ;935
000392  f7fffffe          BL       wpabuf_free
000396  2000              MOVS     r0,#0                 ;936
000398  e669              B        |L2.110|
                  |L2.922|
00039a  495f              LDR      r1,|L2.1304|
00039c  31c4              ADDS     r1,r1,#0xc4           ;938
00039e  2000              MOVS     r0,#0                 ;938
0003a0  f7fffffe          BL       wpa_printf
0003a4  2002              MOVS     r0,#2                 ;941
0003a6  7170              STRB     r0,[r6,#5]            ;941
0003a8  2004              MOVS     r0,#4                 ;942
0003aa  7130              STRB     r0,[r6,#4]            ;942
0003ac  2001              MOVS     r0,#1                 ;943
0003ae  6428              STR      r0,[r5,#0x40]         ;943
0003b0  6de8              LDR      r0,[r5,#0x5c]         ;944
0003b2  2802              CMP      r0,#2                 ;944
0003b4  d108              BNE      |L2.968|
0003b6  980a              LDR      r0,[sp,#0x28]         ;945
0003b8  f7fffffe          BL       wpabuf_free
0003bc  a179              ADR      r1,|L2.1444|
0003be  2000              MOVS     r0,#0                 ;946
0003c0  f7fffffe          BL       wpa_printf
0003c4  2001              MOVS     r0,#1                 ;948
0003c6  e652              B        |L2.110|
                  |L2.968|
0003c8  6de8              LDR      r0,[r5,#0x5c]         ;949
0003ca  2801              CMP      r0,#1                 ;949
0003cc  d10f              BNE      |L2.1006|
0003ce  2004              MOVS     r0,#4                 ;952
0003d0  f7fffffe          BL       wpabuf_alloc
0003d4  9007              STR      r0,[sp,#0x1c]         ;952
0003d6  9807              LDR      r0,[sp,#0x1c]         ;953
0003d8  b140              CBZ      r0,|L2.1004|
0003da  2104              MOVS     r1,#4                 ;954
0003dc  9807              LDR      r0,[sp,#0x1c]         ;954
0003de  f7fffffe          BL       wpabuf_put
0003e2  4607              MOV      r7,r0                 ;954
0003e4  2103              MOVS     r1,#3                 ;955
0003e6  7039              STRB     r1,[r7,#0]            ;955
0003e8  e0f4              B        |L2.1492|
                  |L2.1002|
0003ea  e11a              B        |L2.1570|
                  |L2.1004|
0003ec  e0fb              B        |L2.1510|
                  |L2.1006|
0003ee  e0f7              B        |L2.1504|
                  |L2.1008|
0003f0  4541502d          DCB      "EAP-PEAP: received %lu bytes encrypted data for Phase 2"
0003f4  50454150
0003f8  3a207265
0003fc  63656976
000400  65642025
000404  6c752062
000408  79746573
00040c  20656e63
000410  72797074
000414  65642064
000418  61746120
00041c  666f7220
000420  50686173
000424  652032  
000427  00                DCB      0
                  |L2.1064|
                          DCD      ||.constdata||+0xd4
                  |L2.1068|
00042c  4541502d          DCB      "EAP-PEAP: Decrypted Phase 2 EAP",0
000430  50454150
000434  3a204465
000438  63727970
00043c  74656420
000440  50686173
000444  65203220
000448  45415000
                  |L2.1100|
00044c  4541502d          DCB      "EAP-PEAPv2: Too short Phase 2 EAP TLV",0
000450  50454150
000454  76323a20
000458  546f6f20
00045c  73686f72
000460  74205068
000464  61736520
000468  32204541
00046c  5020544c
000470  5600    
000472  00                DCB      0
000473  00                DCB      0
                  |L2.1140|
000474  4541502d          DCB      "EAP-PEAPv2: Not an EAP TLV",0
000478  50454150
00047c  76323a20
000480  4e6f7420
000484  616e2045
000488  41502054
00048c  4c5600  
00048f  00                DCB      0
                  |L2.1168|
000490  4541502d          DCB      "EAP-PEAPv2: Invalid EAP TLV length",0
000494  50454150
000498  76323a20
00049c  496e7661
0004a0  6c696420
0004a4  45415020
0004a8  544c5620
0004ac  6c656e67
0004b0  746800  
0004b3  00                DCB      0
                  |L2.1204|
0004b4  4541502d          DCB      "EAP-PEAPv2: No room for full EAP packet in EAP TLV",0
0004b8  50454150
0004bc  76323a20
0004c0  4e6f2072
0004c4  6f6f6d20
0004c8  666f7220
0004cc  66756c6c
0004d0  20454150
0004d4  20706163
0004d8  6b657420
0004dc  696e2045
0004e0  41502054
0004e4  4c5600  
0004e7  00                DCB      0
                  |L2.1256|
0004e8  4541502d          DCB      "EAP-PEAP: Too short Phase 2 EAP frame (len=%lu)",0
0004ec  50454150
0004f0  3a20546f
0004f4  6f207368
0004f8  6f727420
0004fc  50686173
000500  65203220
000504  45415020
000508  6672616d
00050c  6520286c
000510  656e3d25
000514  6c752900
                  |L2.1304|
                          DCD      ||.constdata||+0x1d4
                  |L2.1308|
00051c  4541502d          DCB      "EAP-PEAP: received Phase 2: code=%d identifier=%d lengt"
000520  50454150
000524  3a207265
000528  63656976
00052c  65642050
000530  68617365
000534  20323a20
000538  636f6465
00053c  3d256420
000540  6964656e
000544  74696669
000548  65723d25
00054c  64206c65
000550  6e6774  
000553  683d256c          DCB      "h=%lu",0
000557  7500    
000559  00                DCB      0
00055a  00                DCB      0
00055b  00                DCB      0
                  |L2.1372|
00055c  4541502d          DCB      "EAP-PEAP: Phase2 Request processing failed",0
000560  50454150
000564  3a205068
000568  61736532
00056c  20526571
000570  75657374
000574  2070726f
000578  63657373
00057c  696e6720
000580  6661696c
000584  656400  
000587  00                DCB      0
                  |L2.1416|
000588  4541502d          DCB      "EAP-PEAP: Phase 2 Success",0
00058c  50454150
000590  3a205068
000594  61736520
000598  32205375
00059c  63636573
0005a0  7300    
0005a2  00                DCB      0
0005a3  00                DCB      0
                  |L2.1444|
0005a4  4541502d          DCB      "EAP-PEAP: Use TLS ACK to finish authentication",0
0005a8  50454150
0005ac  3a205573
0005b0  6520544c
0005b4  53204143
0005b8  4b20746f
0005bc  2066696e
0005c0  69736820
0005c4  61757468
0005c8  656e7469
0005cc  63617469
0005d0  6f6e00  
0005d3  00                DCB      0
                  |L2.1492|
0005d4  7861              LDRB     r1,[r4,#1]            ;956
0005d6  7079              STRB     r1,[r7,#1]            ;956
0005d8  f44f6180          MOV      r1,#0x400             ;957
0005dc  8079              STRH     r1,[r7,#2]            ;957
0005de  e002              B        |L2.1510|
                  |L2.1504|
0005e0  2101              MOVS     r1,#1                 ;964
0005e2  980b              LDR      r0,[sp,#0x2c]         ;964
0005e4  66c1              STR      r1,[r0,#0x6c]         ;964
                  |L2.1510|
0005e6  e022              B        |L2.1582|
                  |L2.1512|
0005e8  a13e              ADR      r1,|L2.1764|
0005ea  2000              MOVS     r0,#0                 ;971
0005ec  f7fffffe          BL       wpa_printf
0005f0  2000              MOVS     r0,#0                 ;972
0005f2  7170              STRB     r0,[r6,#5]            ;972
0005f4  2003              MOVS     r0,#3                 ;973
0005f6  7130              STRB     r0,[r6,#4]            ;973
0005f8  2000              MOVS     r0,#0                 ;974
0005fa  60b0              STR      r0,[r6,#8]            ;974
0005fc  2004              MOVS     r0,#4                 ;977
0005fe  f7fffffe          BL       wpabuf_alloc
000602  9007              STR      r0,[sp,#0x1c]         ;977
000604  9807              LDR      r0,[sp,#0x1c]         ;978
000606  b158              CBZ      r0,|L2.1568|
000608  2104              MOVS     r1,#4                 ;979
00060a  9807              LDR      r0,[sp,#0x1c]         ;979
00060c  f7fffffe          BL       wpabuf_put
000610  4607              MOV      r7,r0                 ;979
000612  2104              MOVS     r1,#4                 ;980
000614  7039              STRB     r1,[r7,#0]            ;980
000616  7861              LDRB     r1,[r4,#1]            ;981
000618  7079              STRB     r1,[r7,#1]            ;981
00061a  f44f6180          MOV      r1,#0x400             ;982
00061e  8079              STRH     r1,[r7,#2]            ;982
                  |L2.1568|
000620  e005              B        |L2.1582|
                  |L2.1570|
000622  7822              LDRB     r2,[r4,#0]            ;986
000624  a136              ADR      r1,|L2.1792|
000626  2000              MOVS     r0,#0                 ;986
000628  f7fffffe          BL       wpa_printf
00062c  bf00              NOP                            ;988
                  |L2.1582|
00062e  bf00              NOP                            ;920
000630  980a              LDR      r0,[sp,#0x28]         ;991
000632  f7fffffe          BL       wpabuf_free
000636  9807              LDR      r0,[sp,#0x1c]         ;993
000638  b3f0              CBZ      r0,|L2.1720|
00063a  2000              MOVS     r0,#0                 ;994
00063c  9006              STR      r0,[sp,#0x18]         ;994
00063e  a13d              ADR      r1,|L2.1844|
000640  9a07              LDR      r2,[sp,#0x1c]         ;997
000642  f7fffffe          BL       wpa_hexdump_buf_key
000646  6ae8              LDR      r0,[r5,#0x2c]         ;1000
000648  2802              CMP      r0,#2                 ;1000
00064a  db08              BLT      |L2.1630|
00064c  9807              LDR      r0,[sp,#0x1c]         ;1001
00064e  f7fffffe          BL       eap_peapv2_tlv_eap_payload
000652  9007              STR      r0,[sp,#0x1c]         ;1001
000654  9807              LDR      r0,[sp,#0x1c]         ;1002
000656  b910              CBNZ     r0,|L2.1630|
000658  f04f30ff          MOV      r0,#0xffffffff        ;1003
00065c  e507              B        |L2.110|
                  |L2.1630|
00065e  9807              LDR      r0,[sp,#0x1c]         ;1005
000660  f7fffffe          BL       wpabuf_len
000664  2805              CMP      r0,#5                 ;1005
000666  d30c              BCC      |L2.1666|
000668  9807              LDR      r0,[sp,#0x1c]         ;1006
00066a  f7fffffe          BL       wpabuf_head_u8
00066e  7800              LDRB     r0,[r0,#0]            ;1006
000670  2802              CMP      r0,#2                 ;1006
000672  d106              BNE      |L2.1666|
000674  9807              LDR      r0,[sp,#0x1c]         ;1007
000676  f7fffffe          BL       eap_get_type
00067a  2821              CMP      r0,#0x21              ;1007
00067c  d101              BNE      |L2.1666|
00067e  2001              MOVS     r0,#1                 ;1008
000680  9006              STR      r0,[sp,#0x18]         ;1008
                  |L2.1666|
000682  f8dd801c          LDR      r8,[sp,#0x1c]         ;1009
000686  6ae8              LDR      r0,[r5,#0x2c]         ;1010
000688  b990              CBNZ     r0,|L2.1712|
00068a  9806              LDR      r0,[sp,#0x18]         ;1010
00068c  b980              CBNZ     r0,|L2.1712|
00068e  9807              LDR      r0,[sp,#0x1c]         ;1011
000690  f7fffffe          BL       wpabuf_len
000694  f1a00b04          SUB      r11,r0,#4             ;1011
000698  9807              LDR      r0,[sp,#0x1c]         ;1011
00069a  f7fffffe          BL       wpabuf_head_u8
00069e  1d00              ADDS     r0,r0,#4              ;1011
0006a0  465a              MOV      r2,r11                ;1011
0006a2  4601              MOV      r1,r0                 ;1011
0006a4  9002              STR      r0,[sp,#8]            ;1011
0006a6  a803              ADD      r0,sp,#0xc            ;1011
0006a8  f7fffffe          BL       wpabuf_set
0006ac  f10d080c          ADD      r8,sp,#0xc            ;1014
                  |L2.1712|
0006b0  f8991001          LDRB     r1,[r9,#1]            ;1017
0006b4  9b19              LDR      r3,[sp,#0x64]         ;1017
0006b6  e000              B        |L2.1722|
                  |L2.1720|
0006b8  e011              B        |L2.1758|
                  |L2.1722|
0006ba  e9cd8301          STRD     r8,r3,[sp,#4]         ;1017
0006be  9100              STR      r1,[sp,#0]            ;1017
0006c0  2219              MOVS     r2,#0x19              ;1017
0006c2  4629              MOV      r1,r5                 ;1017
0006c4  6aeb              LDR      r3,[r5,#0x2c]         ;1017
0006c6  980b              LDR      r0,[sp,#0x2c]         ;1017
0006c8  f7fffffe          BL       eap_peer_tls_encrypt
0006cc  b118              CBZ      r0,|L2.1750|
0006ce  a122              ADR      r1,|L2.1880|
0006d0  2000              MOVS     r0,#0                 ;1020
0006d2  f7fffffe          BL       wpa_printf
                  |L2.1750|
0006d6  9807              LDR      r0,[sp,#0x1c]         ;1023
0006d8  f7fffffe          BL       wpabuf_free
0006dc  bf00              NOP                            ;1024
                  |L2.1758|
0006de  2000              MOVS     r0,#0                 ;1026
0006e0  e4c5              B        |L2.110|
;;;1028   
                          ENDP

0006e2  0000              DCW      0x0000
                  |L2.1764|
0006e4  4541502d          DCB      "EAP-PEAP: Phase 2 Failure",0
0006e8  50454150
0006ec  3a205068
0006f0  61736520
0006f4  32204661
0006f8  696c7572
0006fc  6500    
0006fe  00                DCB      0
0006ff  00                DCB      0
                  |L2.1792|
000700  4541502d          DCB      "EAP-PEAP: Unexpected code=%d in Phase 2 EAP header",0
000704  50454150
000708  3a20556e
00070c  65787065
000710  63746564
000714  20636f64
000718  653d2564
00071c  20696e20
000720  50686173
000724  65203220
000728  45415020
00072c  68656164
000730  657200  
000733  00                DCB      0
                  |L2.1844|
000734  4541502d          DCB      "EAP-PEAP: Encrypting Phase 2 data",0
000738  50454150
00073c  3a20456e
000740  63727970
000744  74696e67
000748  20506861
00074c  73652032
000750  20646174
000754  6100    
000756  00                DCB      0
000757  00                DCB      0
                  |L2.1880|
000758  4541502d          DCB      "EAP-PEAP: Failed to encrypt a Phase 2 frame",0
00075c  50454150
000760  3a204661
000764  696c6564
000768  20746f20
00076c  656e6372
000770  79707420
000774  61205068
000778  61736520
00077c  32206672
000780  616d6500

                          AREA ||i.eap_peap_deinit||, CODE, READONLY, ALIGN=1

                  eap_peap_deinit PROC
;;;177    
;;;178    static void eap_peap_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;179    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;180    	struct eap_peap_data *data = priv;
000006  462c              MOV      r4,r5
;;;181    	if (data == NULL)
000008  b904              CBNZ     r4,|L3.12|
                  |L3.10|
;;;182    		return;
;;;183    	if (data->phase2_priv && data->phase2_method)
;;;184    		data->phase2_method->deinit(sm, data->phase2_priv);
;;;185    	os_free(data->phase2_types);
;;;186    	eap_peer_tls_ssl_deinit(sm, &data->ssl);
;;;187    	os_free(data->key_data);
;;;188    	wpabuf_free(data->pending_phase2_req);
;;;189    	os_free(data);
;;;190    }
00000a  bd70              POP      {r4-r6,pc}
                  |L3.12|
00000c  6be0              LDR      r0,[r4,#0x3c]         ;183
00000e  b130              CBZ      r0,|L3.30|
000010  6ba0              LDR      r0,[r4,#0x38]         ;183
000012  b120              CBZ      r0,|L3.30|
000014  e9d4010e          LDRD     r0,r1,[r4,#0x38]      ;184
000018  6902              LDR      r2,[r0,#0x10]         ;184
00001a  4630              MOV      r0,r6                 ;184
00001c  4790              BLX      r2                    ;184
                  |L3.30|
00001e  6d60              LDR      r0,[r4,#0x54]         ;185
000020  f7fffffe          BL       os_free
000024  4621              MOV      r1,r4                 ;186
000026  4630              MOV      r0,r6                 ;186
000028  f7fffffe          BL       eap_peer_tls_ssl_deinit
00002c  6ea0              LDR      r0,[r4,#0x68]         ;187
00002e  f7fffffe          BL       os_free
000032  6ee0              LDR      r0,[r4,#0x6c]         ;188
000034  f7fffffe          BL       wpabuf_free
000038  4620              MOV      r0,r4                 ;189
00003a  f7fffffe          BL       os_free
00003e  bf00              NOP      
000040  e7e3              B        |L3.10|
;;;191    
                          ENDP


                          AREA ||i.eap_peap_deinit_for_reauth||, CODE, READONLY, ALIGN=1

                  eap_peap_deinit_for_reauth PROC
;;;1170   
;;;1171   static void eap_peap_deinit_for_reauth(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;1172   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1173   	struct eap_peap_data *data = priv;
000006  4625              MOV      r5,r4
;;;1174   	wpabuf_free(data->pending_phase2_req);
000008  6ee8              LDR      r0,[r5,#0x6c]
00000a  f7fffffe          BL       wpabuf_free
;;;1175   	data->pending_phase2_req = NULL;
00000e  2000              MOVS     r0,#0
000010  66e8              STR      r0,[r5,#0x6c]
;;;1176   	data->crypto_binding_used = 0;
000012  6768              STR      r0,[r5,#0x74]
;;;1177   }
000014  bd70              POP      {r4-r6,pc}
;;;1178   
                          ENDP


                          AREA ||i.eap_peap_derive_cmk||, CODE, READONLY, ALIGN=2

                  eap_peap_derive_cmk PROC
;;;249    
;;;250    static int eap_peap_derive_cmk(struct eap_sm *sm, struct eap_peap_data *data)
000000  b570              PUSH     {r4-r6,lr}
;;;251    {
000002  b09c              SUB      sp,sp,#0x70
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;252    	u8 *tk;
;;;253    	u8 isk[32], imck[60];
;;;254    
;;;255    	/*
;;;256    	 * Tunnel key (TK) is the first 60 octets of the key generated by
;;;257    	 * phase 1 of PEAP (based on TLS).
;;;258    	 */
;;;259    	tk = data->key_data;
000008  6ea5              LDR      r5,[r4,#0x68]
;;;260    	if (tk == NULL)
00000a  b91d              CBNZ     r5,|L5.20|
;;;261    		return -1;
00000c  f04f30ff          MOV      r0,#0xffffffff
                  |L5.16|
;;;262    	wpa_hexdump_key(MSG_DEBUG, "EAP-PEAP: TK", tk, 60);
;;;263    
;;;264    	if (data->reauth &&
;;;265    	    tls_connection_resumed(sm->ssl_ctx, data->ssl.conn)) {
;;;266    		/* Fast-connect: IPMK|CMK = TK */
;;;267    		os_memcpy(data->ipmk, tk, 40);
;;;268    		wpa_hexdump_key(MSG_DEBUG, "EAP-PEAP: IPMK from TK",
;;;269    				data->ipmk, 40);
;;;270    		os_memcpy(data->cmk, tk + 40, 20);
;;;271    		wpa_hexdump_key(MSG_DEBUG, "EAP-PEAP: CMK from TK",
;;;272    				data->cmk, 20);
;;;273    		return 0;
;;;274    	}
;;;275    
;;;276    	if (eap_peap_get_isk(sm, data, isk, sizeof(isk)) < 0)
;;;277    		return -1;
;;;278    	wpa_hexdump_key(MSG_DEBUG, "EAP-PEAP: ISK", isk, sizeof(isk));
;;;279    
;;;280    	/*
;;;281    	 * IPMK Seed = "Inner Methods Compound Keys" | ISK
;;;282    	 * TempKey = First 40 octets of TK
;;;283    	 * IPMK|CMK = PRF+(TempKey, IPMK Seed, 60)
;;;284    	 * (note: draft-josefsson-pppext-eap-tls-eap-10.txt includes a space
;;;285    	 * in the end of the label just before ISK; is that just a typo?)
;;;286    	 */
;;;287    	wpa_hexdump_key(MSG_DEBUG, "EAP-PEAP: TempKey", tk, 40);
;;;288    	peap_prfplus(data->peap_version, tk, 40, "Inner Methods Compound Keys",
;;;289    		     isk, sizeof(isk), imck, sizeof(imck));
;;;290    	wpa_hexdump_key(MSG_DEBUG, "EAP-PEAP: IMCK (IPMKj)",
;;;291    			imck, sizeof(imck));
;;;292    
;;;293    	os_memcpy(data->ipmk, imck, 40);
;;;294    	wpa_hexdump_key(MSG_DEBUG, "EAP-PEAP: IPMK (S-IPMKj)", data->ipmk, 40);
;;;295    	os_memcpy(data->cmk, imck + 40, 20);
;;;296    	wpa_hexdump_key(MSG_DEBUG, "EAP-PEAP: CMK (CMKj)", data->cmk, 20);
;;;297    
;;;298    	return 0;
;;;299    }
000010  b01c              ADD      sp,sp,#0x70
000012  bd70              POP      {r4-r6,pc}
                  |L5.20|
000014  233c              MOVS     r3,#0x3c              ;262
000016  462a              MOV      r2,r5                 ;262
000018  a136              ADR      r1,|L5.244|
00001a  2000              MOVS     r0,#0                 ;262
00001c  f7fffffe          BL       wpa_hexdump_key
000020  6e60              LDR      r0,[r4,#0x64]         ;264
000022  b310              CBZ      r0,|L5.106|
000024  6821              LDR      r1,[r4,#0]            ;265
000026  f8d60098          LDR      r0,[r6,#0x98]         ;265
00002a  f7fffffe          BL       tls_connection_resumed
00002e  b1e0              CBZ      r0,|L5.106|
000030  2228              MOVS     r2,#0x28              ;267
000032  4629              MOV      r1,r5                 ;267
000034  f1040098          ADD      r0,r4,#0x98           ;267
000038  f7fffffe          BL       os_memcpy
00003c  2328              MOVS     r3,#0x28              ;268
00003e  f1040298          ADD      r2,r4,#0x98           ;268
000042  a130              ADR      r1,|L5.260|
000044  2000              MOVS     r0,#0                 ;268
000046  f7fffffe          BL       wpa_hexdump_key
00004a  2214              MOVS     r2,#0x14              ;270
00004c  f1050128          ADD      r1,r5,#0x28           ;270
000050  f10400c0          ADD      r0,r4,#0xc0           ;270
000054  f7fffffe          BL       os_memcpy
000058  2314              MOVS     r3,#0x14              ;271
00005a  f10402c0          ADD      r2,r4,#0xc0           ;271
00005e  a12f              ADR      r1,|L5.284|
000060  2000              MOVS     r0,#0                 ;271
000062  f7fffffe          BL       wpa_hexdump_key
000066  2000              MOVS     r0,#0                 ;273
000068  e7d2              B        |L5.16|
                  |L5.106|
00006a  2320              MOVS     r3,#0x20              ;276
00006c  aa14              ADD      r2,sp,#0x50           ;276
00006e  4621              MOV      r1,r4                 ;276
000070  4630              MOV      r0,r6                 ;276
000072  f7fffffe          BL       eap_peap_get_isk
000076  2800              CMP      r0,#0                 ;276
000078  da02              BGE      |L5.128|
00007a  f04f30ff          MOV      r0,#0xffffffff        ;277
00007e  e7c7              B        |L5.16|
                  |L5.128|
000080  2320              MOVS     r3,#0x20              ;278
000082  aa14              ADD      r2,sp,#0x50           ;278
000084  a12b              ADR      r1,|L5.308|
000086  2000              MOVS     r0,#0                 ;278
000088  f7fffffe          BL       wpa_hexdump_key
00008c  2328              MOVS     r3,#0x28              ;287
00008e  462a              MOV      r2,r5                 ;287
000090  a12c              ADR      r1,|L5.324|
000092  2000              MOVS     r0,#0                 ;287
000094  f7fffffe          BL       wpa_hexdump_key
000098  233c              MOVS     r3,#0x3c              ;288
00009a  aa05              ADD      r2,sp,#0x14           ;288
00009c  2120              MOVS     r1,#0x20              ;288
00009e  a814              ADD      r0,sp,#0x50           ;288
0000a0  e88d000f          STM      sp,{r0-r3}            ;288
0000a4  a32c              ADR      r3,|L5.344|
0000a6  2228              MOVS     r2,#0x28              ;288
0000a8  4629              MOV      r1,r5                 ;288
0000aa  6ae0              LDR      r0,[r4,#0x2c]         ;288
0000ac  f7fffffe          BL       peap_prfplus
0000b0  233c              MOVS     r3,#0x3c              ;290
0000b2  aa05              ADD      r2,sp,#0x14           ;290
0000b4  a12f              ADR      r1,|L5.372|
0000b6  2000              MOVS     r0,#0                 ;290
0000b8  f7fffffe          BL       wpa_hexdump_key
0000bc  2228              MOVS     r2,#0x28              ;293
0000be  a905              ADD      r1,sp,#0x14           ;293
0000c0  f1040098          ADD      r0,r4,#0x98           ;293
0000c4  f7fffffe          BL       os_memcpy
0000c8  2328              MOVS     r3,#0x28              ;294
0000ca  f1040298          ADD      r2,r4,#0x98           ;294
0000ce  a12f              ADR      r1,|L5.396|
0000d0  2000              MOVS     r0,#0                 ;294
0000d2  f7fffffe          BL       wpa_hexdump_key
0000d6  2214              MOVS     r2,#0x14              ;295
0000d8  a90f              ADD      r1,sp,#0x3c           ;295
0000da  f10400c0          ADD      r0,r4,#0xc0           ;295
0000de  f7fffffe          BL       os_memcpy
0000e2  2314              MOVS     r3,#0x14              ;296
0000e4  f10402c0          ADD      r2,r4,#0xc0           ;296
0000e8  a12f              ADR      r1,|L5.424|
0000ea  2000              MOVS     r0,#0                 ;296
0000ec  f7fffffe          BL       wpa_hexdump_key
0000f0  2000              MOVS     r0,#0                 ;298
0000f2  e78d              B        |L5.16|
;;;300    
                          ENDP

                  |L5.244|
0000f4  4541502d          DCB      "EAP-PEAP: TK",0
0000f8  50454150
0000fc  3a20544b
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L5.260|
000104  4541502d          DCB      "EAP-PEAP: IPMK from TK",0
000108  50454150
00010c  3a204950
000110  4d4b2066
000114  726f6d20
000118  544b00  
00011b  00                DCB      0
                  |L5.284|
00011c  4541502d          DCB      "EAP-PEAP: CMK from TK",0
000120  50454150
000124  3a20434d
000128  4b206672
00012c  6f6d2054
000130  4b00    
000132  00                DCB      0
000133  00                DCB      0
                  |L5.308|
000134  4541502d          DCB      "EAP-PEAP: ISK",0
000138  50454150
00013c  3a204953
000140  4b00    
000142  00                DCB      0
000143  00                DCB      0
                  |L5.324|
000144  4541502d          DCB      "EAP-PEAP: TempKey",0
000148  50454150
00014c  3a205465
000150  6d704b65
000154  7900    
000156  00                DCB      0
000157  00                DCB      0
                  |L5.344|
000158  496e6e65          DCB      "Inner Methods Compound Keys",0
00015c  72204d65
000160  74686f64
000164  7320436f
000168  6d706f75
00016c  6e64204b
000170  65797300
                  |L5.372|
000174  4541502d          DCB      "EAP-PEAP: IMCK (IPMKj)",0
000178  50454150
00017c  3a20494d
000180  434b2028
000184  49504d4b
000188  6a2900  
00018b  00                DCB      0
                  |L5.396|
00018c  4541502d          DCB      "EAP-PEAP: IPMK (S-IPMKj)",0
000190  50454150
000194  3a204950
000198  4d4b2028
00019c  532d4950
0001a0  4d4b6a29
0001a4  00      
0001a5  00                DCB      0
0001a6  00                DCB      0
0001a7  00                DCB      0
                  |L5.424|
0001a8  4541502d          DCB      "EAP-PEAP: CMK (CMKj)",0
0001ac  50454150
0001b0  3a20434d
0001b4  4b202843
0001b8  4d4b6a29
0001bc  00      
0001bd  00                DCB      0
0001be  00                DCB      0
0001bf  00                DCB      0

                          AREA ||i.eap_peap_getKey||, CODE, READONLY, ALIGN=2

                  eap_peap_getKey PROC
;;;1228   
;;;1229   static u8 * eap_peap_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1230   {
000004  b0a4              SUB      sp,sp,#0x90
000006  4680              MOV      r8,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
;;;1231   	struct eap_peap_data *data = priv;
00000c  4634              MOV      r4,r6
;;;1232   	u8 *key;
;;;1233   
;;;1234   	if (data->key_data == NULL || !data->phase2_success)
00000e  6ea0              LDR      r0,[r4,#0x68]
000010  b108              CBZ      r0,|L6.22|
000012  6c20              LDR      r0,[r4,#0x40]
000014  b918              CBNZ     r0,|L6.30|
                  |L6.22|
;;;1235   		return NULL;
000016  2000              MOVS     r0,#0
                  |L6.24|
;;;1236   
;;;1237   	key = os_malloc(EAP_TLS_KEY_LEN);
;;;1238   	if (key == NULL)
;;;1239   		return NULL;
;;;1240   
;;;1241   	*len = EAP_TLS_KEY_LEN;
;;;1242   
;;;1243   	if (data->crypto_binding_used) {
;;;1244   		u8 csk[128];
;;;1245   		/*
;;;1246   		 * Note: It looks like Microsoft implementation requires null
;;;1247   		 * termination for this label while the one used for deriving
;;;1248   		 * IPMK|CMK did not use null termination.
;;;1249   		 */
;;;1250   		peap_prfplus(data->peap_version, data->ipmk, 40,
;;;1251   			     "Session Key Generating Function",
;;;1252   			     (u8 *) "\00", 1, csk, sizeof(csk));
;;;1253   		wpa_hexdump_key(MSG_DEBUG, "EAP-PEAP: CSK", csk, sizeof(csk));
;;;1254   		os_memcpy(key, csk, EAP_TLS_KEY_LEN);
;;;1255   		wpa_hexdump(MSG_DEBUG, "EAP-PEAP: Derived key",
;;;1256   			    key, EAP_TLS_KEY_LEN);
;;;1257   	} else
;;;1258   		os_memcpy(key, data->key_data, EAP_TLS_KEY_LEN);
;;;1259   
;;;1260   	return key;
;;;1261   }
000018  b024              ADD      sp,sp,#0x90
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L6.30|
00001e  2040              MOVS     r0,#0x40              ;1237
000020  f7fffffe          BL       os_malloc
000024  4605              MOV      r5,r0                 ;1237
000026  b90d              CBNZ     r5,|L6.44|
000028  2000              MOVS     r0,#0                 ;1239
00002a  e7f5              B        |L6.24|
                  |L6.44|
00002c  2040              MOVS     r0,#0x40              ;1241
00002e  6038              STR      r0,[r7,#0]            ;1241
000030  6f60              LDR      r0,[r4,#0x74]         ;1243
000032  b1f0              CBZ      r0,|L6.114|
000034  2380              MOVS     r3,#0x80              ;1250
000036  aa04              ADD      r2,sp,#0x10           ;1250
000038  2101              MOVS     r1,#1                 ;1250
00003a  a011              ADR      r0,|L6.128|
00003c  e88d000f          STM      sp,{r0-r3}            ;1250
000040  a310              ADR      r3,|L6.132|
000042  2228              MOVS     r2,#0x28              ;1250
000044  f1040198          ADD      r1,r4,#0x98           ;1250
000048  6ae0              LDR      r0,[r4,#0x2c]         ;1250
00004a  f7fffffe          BL       peap_prfplus
00004e  2380              MOVS     r3,#0x80              ;1253
000050  aa04              ADD      r2,sp,#0x10           ;1253
000052  a114              ADR      r1,|L6.164|
000054  2000              MOVS     r0,#0                 ;1253
000056  f7fffffe          BL       wpa_hexdump_key
00005a  2240              MOVS     r2,#0x40              ;1254
00005c  a904              ADD      r1,sp,#0x10           ;1254
00005e  4628              MOV      r0,r5                 ;1254
000060  f7fffffe          BL       os_memcpy
000064  2340              MOVS     r3,#0x40              ;1255
000066  462a              MOV      r2,r5                 ;1255
000068  a112              ADR      r1,|L6.180|
00006a  2000              MOVS     r0,#0                 ;1255
00006c  f7fffffe          BL       wpa_hexdump
000070  e004              B        |L6.124|
                  |L6.114|
000072  2240              MOVS     r2,#0x40              ;1258
000074  4628              MOV      r0,r5                 ;1258
000076  6ea1              LDR      r1,[r4,#0x68]         ;1258
000078  f7fffffe          BL       os_memcpy
                  |L6.124|
00007c  4628              MOV      r0,r5                 ;1260
00007e  e7cb              B        |L6.24|
;;;1262   
                          ENDP

                  |L6.128|
000080  00                DCB      0
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L6.132|
000084  53657373          DCB      "Session Key Generating Function",0
000088  696f6e20
00008c  4b657920
000090  47656e65
000094  72617469
000098  6e672046
00009c  756e6374
0000a0  696f6e00
                  |L6.164|
0000a4  4541502d          DCB      "EAP-PEAP: CSK",0
0000a8  50454150
0000ac  3a204353
0000b0  4b00    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L6.180|
0000b4  4541502d          DCB      "EAP-PEAP: Derived key",0
0000b8  50454150
0000bc  3a204465
0000c0  72697665
0000c4  64206b65
0000c8  7900    
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i.eap_peap_get_isk||, CODE, READONLY, ALIGN=2

                  eap_peap_get_isk PROC
;;;220    
;;;221    static int eap_peap_get_isk(struct eap_sm *sm, struct eap_peap_data *data,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;222    			    u8 *isk, size_t isk_len)
;;;223    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;224    	u8 *key;
;;;225    	size_t key_len;
;;;226    
;;;227    	os_memset(isk, 0, isk_len);
00000c  462a              MOV      r2,r5
00000e  2100              MOVS     r1,#0
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       os_memset
;;;228    	if (data->phase2_method == NULL || data->phase2_priv == NULL ||
000016  6ba0              LDR      r0,[r4,#0x38]
000018  b138              CBZ      r0,|L7.42|
00001a  6be0              LDR      r0,[r4,#0x3c]
00001c  b128              CBZ      r0,|L7.42|
;;;229    	    data->phase2_method->isKeyAvailable == NULL ||
00001e  6ba0              LDR      r0,[r4,#0x38]
000020  6980              LDR      r0,[r0,#0x18]
000022  b110              CBZ      r0,|L7.42|
;;;230    	    data->phase2_method->getKey == NULL)
000024  6ba0              LDR      r0,[r4,#0x38]
000026  69c0              LDR      r0,[r0,#0x1c]
000028  b910              CBNZ     r0,|L7.48|
                  |L7.42|
;;;231    		return 0;
00002a  2000              MOVS     r0,#0
                  |L7.44|
;;;232    
;;;233    	if (!data->phase2_method->isKeyAvailable(sm, data->phase2_priv) ||
;;;234    	    (key = data->phase2_method->getKey(sm, data->phase2_priv,
;;;235    					       &key_len)) == NULL) {
;;;236    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Could not get key material "
;;;237    			   "from Phase 2");
;;;238    		return -1;
;;;239    	}
;;;240    
;;;241    	if (key_len > isk_len)
;;;242    		key_len = isk_len;
;;;243    	os_memcpy(isk, key, key_len);
;;;244    	os_free(key);
;;;245    
;;;246    	return 0;
;;;247    }
00002c  e8bd83f8          POP      {r3-r9,pc}
                  |L7.48|
000030  e9d4010e          LDRD     r0,r1,[r4,#0x38]      ;233
000034  6982              LDR      r2,[r0,#0x18]         ;233
000036  4638              MOV      r0,r7                 ;233
000038  4790              BLX      r2                    ;233
00003a  b140              CBZ      r0,|L7.78|
00003c  e9d4010e          LDRD     r0,r1,[r4,#0x38]      ;234
000040  466a              MOV      r2,sp                 ;234
000042  69c3              LDR      r3,[r0,#0x1c]         ;234
000044  4638              MOV      r0,r7                 ;234
000046  4798              BLX      r3                    ;234
000048  ea5f0800          MOVS     r8,r0                 ;234
00004c  d106              BNE      |L7.92|
                  |L7.78|
00004e  a10a              ADR      r1,|L7.120|
000050  2000              MOVS     r0,#0                 ;236
000052  f7fffffe          BL       wpa_printf
000056  f04f30ff          MOV      r0,#0xffffffff        ;238
00005a  e7e7              B        |L7.44|
                  |L7.92|
00005c  9800              LDR      r0,[sp,#0]            ;241
00005e  42a8              CMP      r0,r5                 ;241
000060  d900              BLS      |L7.100|
000062  9500              STR      r5,[sp,#0]            ;242
                  |L7.100|
000064  4641              MOV      r1,r8                 ;243
000066  4630              MOV      r0,r6                 ;243
000068  9a00              LDR      r2,[sp,#0]            ;243
00006a  f7fffffe          BL       os_memcpy
00006e  4640              MOV      r0,r8                 ;244
000070  f7fffffe          BL       os_free
000074  2000              MOVS     r0,#0                 ;246
000076  e7d9              B        |L7.44|
;;;248    
                          ENDP

                  |L7.120|
000078  4541502d          DCB      "EAP-PEAP: Could not get key material from Phase 2",0
00007c  50454150
000080  3a20436f
000084  756c6420
000088  6e6f7420
00008c  67657420
000090  6b657920
000094  6d617465
000098  7269616c
00009c  2066726f
0000a0  6d205068
0000a4  61736520
0000a8  3200    
0000aa  00                DCB      0
0000ab  00                DCB      0

                          AREA ||i.eap_peap_get_status||, CODE, READONLY, ALIGN=2

                  eap_peap_get_status PROC
;;;1201   
;;;1202   static int eap_peap_get_status(struct eap_sm *sm, void *priv, char *buf,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1203   			       size_t buflen, int verbose)
;;;1204   {
000004  4682              MOV      r10,r0
000006  460f              MOV      r7,r1
000008  4691              MOV      r9,r2
00000a  4698              MOV      r8,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;1205   	struct eap_peap_data *data = priv;
000010  463e              MOV      r6,r7
;;;1206   	int len, ret;
;;;1207   
;;;1208   	len = eap_peer_tls_status(sm, &data->ssl, buf, buflen, verbose);
000012  4643              MOV      r3,r8
000014  464a              MOV      r2,r9
000016  4631              MOV      r1,r6
000018  4650              MOV      r0,r10
00001a  f8cdb000          STR      r11,[sp,#0]
00001e  f7fffffe          BL       eap_peer_tls_status
000022  4604              MOV      r4,r0
;;;1209   	if (data->phase2_method) {
000024  6bb0              LDR      r0,[r6,#0x38]
000026  b1a8              CBZ      r0,|L8.84|
;;;1210   		ret = os_snprintf(buf + len, buflen - len,
000028  6bb0              LDR      r0,[r6,#0x38]
00002a  6883              LDR      r3,[r0,#8]
00002c  9300              STR      r3,[sp,#0]
00002e  eba80104          SUB      r1,r8,r4
000032  eb090004          ADD      r0,r9,r4
000036  a208              ADR      r2,|L8.88|
000038  6af3              LDR      r3,[r6,#0x2c]
00003a  f7fffffe          BL       os_snprintf
00003e  4605              MOV      r5,r0
;;;1211   				  "EAP-PEAPv%d Phase2 method=%s\n",
;;;1212   				  data->peap_version,
;;;1213   				  data->phase2_method->name);
;;;1214   		if (ret < 0 || (size_t) ret >= buflen - len)
000040  2d00              CMP      r5,#0
000042  db03              BLT      |L8.76|
000044  eba80004          SUB      r0,r8,r4
000048  42a8              CMP      r0,r5
00004a  d802              BHI      |L8.82|
                  |L8.76|
;;;1215   			return len;
00004c  4620              MOV      r0,r4
                  |L8.78|
;;;1216   		len += ret;
;;;1217   	}
;;;1218   	return len;
;;;1219   }
00004e  e8bd8ff8          POP      {r3-r11,pc}
                  |L8.82|
000052  442c              ADD      r4,r4,r5              ;1216
                  |L8.84|
000054  4620              MOV      r0,r4                 ;1218
000056  e7fa              B        |L8.78|
;;;1220   
                          ENDP

                  |L8.88|
000058  4541502d          DCB      "EAP-PEAPv%d Phase2 method=%s\n",0
00005c  50454150
000060  76256420
000064  50686173
000068  6532206d
00006c  6574686f
000070  643d2573
000074  0a00    
000076  00                DCB      0
000077  00                DCB      0

                          AREA ||i.eap_peap_has_reauth_data||, CODE, READONLY, ALIGN=1

                  eap_peap_has_reauth_data PROC
;;;1162   
;;;1163   static Boolean eap_peap_has_reauth_data(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;1164   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1165   	struct eap_peap_data *data = priv;
000006  4626              MOV      r6,r4
;;;1166   	return tls_connection_established(sm->ssl_ctx, data->ssl.conn) &&
000008  6831              LDR      r1,[r6,#0]
00000a  f8d50098          LDR      r0,[r5,#0x98]
00000e  f7fffffe          BL       tls_connection_established
000012  b118              CBZ      r0,|L9.28|
;;;1167   		data->phase2_success;
000014  6c30              LDR      r0,[r6,#0x40]
000016  b108              CBZ      r0,|L9.28|
000018  2001              MOVS     r0,#1                 ;1166
                  |L9.26|
;;;1168   }
00001a  bd70              POP      {r4-r6,pc}
                  |L9.28|
00001c  2000              MOVS     r0,#0                 ;1166
00001e  e7fc              B        |L9.26|
;;;1169   
                          ENDP


                          AREA ||i.eap_peap_init||, CODE, READONLY, ALIGN=2

                  eap_peap_init PROC
;;;137    
;;;138    static void * eap_peap_init(struct eap_sm *sm)
000000  b570              PUSH     {r4-r6,lr}
;;;139    {
000002  4606              MOV      r6,r0
;;;140    	struct eap_peap_data *data;
;;;141    	struct eap_peer_config *config = eap_get_config(sm);
000004  4630              MOV      r0,r6
000006  f7fffffe          BL       eap_get_config
00000a  4605              MOV      r5,r0
;;;142    
;;;143    	data = os_zalloc(sizeof(*data));
00000c  20d8              MOVS     r0,#0xd8
00000e  f7fffffe          BL       os_zalloc
000012  4604              MOV      r4,r0
;;;144    	if (data == NULL)
000014  b90c              CBNZ     r4,|L10.26|
;;;145    		return NULL;
000016  2000              MOVS     r0,#0
                  |L10.24|
;;;146    	sm->peap_done = FALSE;
;;;147    	data->peap_version = EAP_PEAP_VERSION;
;;;148    	data->force_peap_version = -1;
;;;149    	data->peap_outer_success = 2;
;;;150    	data->crypto_binding = OPTIONAL_BINDING;
;;;151    
;;;152    	if (config && config->phase1 &&
;;;153    	    eap_peap_parse_phase1(data, config->phase1) < 0) {
;;;154    		eap_peap_deinit(sm, data);
;;;155    		return NULL;
;;;156    	}
;;;157    
;;;158    	if (eap_peer_select_phase2_methods(config, "auth=",
;;;159    					   &data->phase2_types,
;;;160    					   &data->num_phase2_types) < 0) {
;;;161    		eap_peap_deinit(sm, data);
;;;162    		return NULL;
;;;163    	}
;;;164    
;;;165    	data->phase2_type.vendor = EAP_VENDOR_IETF;
;;;166    	data->phase2_type.method = EAP_TYPE_NONE;
;;;167    
;;;168    	if (eap_peer_tls_ssl_init(sm, &data->ssl, config)) {
;;;169    		wpa_printf(MSG_INFO, "EAP-PEAP: Failed to initialize SSL.");
;;;170    		eap_peap_deinit(sm, data);
;;;171    		return NULL;
;;;172    	}
;;;173    
;;;174    	return data;
;;;175    }
000018  bd70              POP      {r4-r6,pc}
                  |L10.26|
00001a  2000              MOVS     r0,#0                 ;146
00001c  66f0              STR      r0,[r6,#0x6c]         ;146
00001e  2001              MOVS     r0,#1                 ;147
000020  62e0              STR      r0,[r4,#0x2c]         ;147
000022  1e80              SUBS     r0,r0,#2              ;148
000024  6320              STR      r0,[r4,#0x30]         ;148
000026  2002              MOVS     r0,#2                 ;149
000028  65e0              STR      r0,[r4,#0x5c]         ;149
00002a  2001              MOVS     r0,#1                 ;150
00002c  f8840070          STRB     r0,[r4,#0x70]         ;150
000030  b16d              CBZ      r5,|L10.78|
000032  6de8              LDR      r0,[r5,#0x5c]         ;152
000034  b158              CBZ      r0,|L10.78|
000036  4620              MOV      r0,r4                 ;153
000038  6de9              LDR      r1,[r5,#0x5c]         ;153
00003a  f7fffffe          BL       eap_peap_parse_phase1
00003e  2800              CMP      r0,#0                 ;153
000040  da05              BGE      |L10.78|
000042  4621              MOV      r1,r4                 ;154
000044  4630              MOV      r0,r6                 ;154
000046  f7fffffe          BL       eap_peap_deinit
00004a  2000              MOVS     r0,#0                 ;155
00004c  e7e4              B        |L10.24|
                  |L10.78|
00004e  f1040358          ADD      r3,r4,#0x58           ;158
000052  1f1a              SUBS     r2,r3,#4              ;158
000054  a110              ADR      r1,|L10.152|
000056  4628              MOV      r0,r5                 ;158
000058  f7fffffe          BL       eap_peer_select_phase2_methods
00005c  2800              CMP      r0,#0                 ;158
00005e  da05              BGE      |L10.108|
000060  4621              MOV      r1,r4                 ;161
000062  4630              MOV      r0,r6                 ;161
000064  f7fffffe          BL       eap_peap_deinit
000068  2000              MOVS     r0,#0                 ;162
00006a  e7d5              B        |L10.24|
                  |L10.108|
00006c  2000              MOVS     r0,#0                 ;165
00006e  64e0              STR      r0,[r4,#0x4c]         ;165
000070  2100              MOVS     r1,#0                 ;166
000072  6521              STR      r1,[r4,#0x50]         ;166
000074  462a              MOV      r2,r5                 ;168
000076  4621              MOV      r1,r4                 ;168
000078  4630              MOV      r0,r6                 ;168
00007a  f7fffffe          BL       eap_peer_tls_ssl_init
00007e  b148              CBZ      r0,|L10.148|
000080  a107              ADR      r1,|L10.160|
000082  2000              MOVS     r0,#0                 ;169
000084  f7fffffe          BL       wpa_printf
000088  4621              MOV      r1,r4                 ;170
00008a  4630              MOV      r0,r6                 ;170
00008c  f7fffffe          BL       eap_peap_deinit
000090  2000              MOVS     r0,#0                 ;171
000092  e7c1              B        |L10.24|
                  |L10.148|
000094  4620              MOV      r0,r4                 ;174
000096  e7bf              B        |L10.24|
;;;176    
                          ENDP

                  |L10.152|
000098  61757468          DCB      "auth=",0
00009c  3d00    
00009e  00                DCB      0
00009f  00                DCB      0
                  |L10.160|
0000a0  4541502d          DCB      "EAP-PEAP: Failed to initialize SSL.",0
0000a4  50454150
0000a8  3a204661
0000ac  696c6564
0000b0  20746f20
0000b4  696e6974
0000b8  69616c69
0000bc  7a652053
0000c0  534c2e00

                          AREA ||i.eap_peap_init_for_reauth||, CODE, READONLY, ALIGN=1

                  eap_peap_init_for_reauth PROC
;;;1179   
;;;1180   static void * eap_peap_init_for_reauth(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;1181   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;1182   	struct eap_peap_data *data = priv;
000006  462c              MOV      r4,r5
;;;1183   	os_free(data->key_data);
000008  6ea0              LDR      r0,[r4,#0x68]
00000a  f7fffffe          BL       os_free
;;;1184   	data->key_data = NULL;
00000e  2000              MOVS     r0,#0
000010  66a0              STR      r0,[r4,#0x68]
;;;1185   	if (eap_peer_tls_reauth_init(sm, &data->ssl)) {
000012  4621              MOV      r1,r4
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       eap_peer_tls_reauth_init
00001a  b120              CBZ      r0,|L11.38|
;;;1186   		os_free(data);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       os_free
;;;1187   		return NULL;
000022  2000              MOVS     r0,#0
                  |L11.36|
;;;1188   	}
;;;1189   	if (data->phase2_priv && data->phase2_method &&
;;;1190   	    data->phase2_method->init_for_reauth)
;;;1191   		data->phase2_method->init_for_reauth(sm, data->phase2_priv);
;;;1192   	data->phase2_success = 0;
;;;1193   	data->phase2_eap_success = 0;
;;;1194   	data->phase2_eap_started = 0;
;;;1195   	data->resuming = 1;
;;;1196   	data->reauth = 1;
;;;1197   	sm->peap_done = FALSE;
;;;1198   	return priv;
;;;1199   }
000024  bd70              POP      {r4-r6,pc}
                  |L11.38|
000026  6be0              LDR      r0,[r4,#0x3c]         ;1189
000028  b148              CBZ      r0,|L11.62|
00002a  6ba0              LDR      r0,[r4,#0x38]         ;1189
00002c  b138              CBZ      r0,|L11.62|
00002e  6ba0              LDR      r0,[r4,#0x38]         ;1190
000030  6ac0              LDR      r0,[r0,#0x2c]         ;1190
000032  b120              CBZ      r0,|L11.62|
000034  e9d4010e          LDRD     r0,r1,[r4,#0x38]      ;1191
000038  6ac2              LDR      r2,[r0,#0x2c]         ;1191
00003a  4630              MOV      r0,r6                 ;1191
00003c  4790              BLX      r2                    ;1191
                  |L11.62|
00003e  2000              MOVS     r0,#0                 ;1192
000040  6420              STR      r0,[r4,#0x40]         ;1192
000042  6460              STR      r0,[r4,#0x44]         ;1193
000044  64a0              STR      r0,[r4,#0x48]         ;1194
000046  2001              MOVS     r0,#1                 ;1195
000048  6620              STR      r0,[r4,#0x60]         ;1195
00004a  6660              STR      r0,[r4,#0x64]         ;1196
00004c  2000              MOVS     r0,#0                 ;1197
00004e  66f0              STR      r0,[r6,#0x6c]         ;1197
000050  4628              MOV      r0,r5                 ;1198
000052  e7e7              B        |L11.36|
;;;1200   
                          ENDP


                          AREA ||i.eap_peap_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_peap_isKeyAvailable PROC
;;;1221   
;;;1222   static Boolean eap_peap_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;1223   {
;;;1224   	struct eap_peap_data *data = priv;
000002  460a              MOV      r2,r1
;;;1225   	return data->key_data != NULL && data->phase2_success;
000004  6e90              LDR      r0,[r2,#0x68]
000006  b118              CBZ      r0,|L12.16|
000008  6c10              LDR      r0,[r2,#0x40]
00000a  b108              CBZ      r0,|L12.16|
00000c  2001              MOVS     r0,#1
                  |L12.14|
;;;1226   }
00000e  4770              BX       lr
                  |L12.16|
000010  2000              MOVS     r0,#0                 ;1225
000012  e7fc              B        |L12.14|
;;;1227   
                          ENDP


                          AREA ||i.eap_peap_parse_phase1||, CODE, READONLY, ALIGN=2

                  eap_peap_parse_phase1 PROC
;;;76     
;;;77     static int eap_peap_parse_phase1(struct eap_peap_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;78     				 const char *phase1)
;;;79     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;80     	const char *pos;
;;;81     
;;;82     	pos = os_strstr(phase1, "peapver=");
000006  a133              ADR      r1,|L13.212|
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       os_strstr
00000e  4606              MOV      r6,r0
;;;83     	if (pos) {
000010  b15e              CBZ      r6,|L13.42|
;;;84     		data->force_peap_version = atoi(pos + 8);
000012  f1060008          ADD      r0,r6,#8
000016  f7fffffe          BL       atoi
00001a  6320              STR      r0,[r4,#0x30]
;;;85     		data->peap_version = data->force_peap_version;
00001c  6b20              LDR      r0,[r4,#0x30]
00001e  62e0              STR      r0,[r4,#0x2c]
;;;86     		wpa_printf(MSG_DEBUG, "EAP-PEAP: Forced PEAP version %d",
000020  a12f              ADR      r1,|L13.224|
000022  2000              MOVS     r0,#0
000024  6b22              LDR      r2,[r4,#0x30]
000026  f7fffffe          BL       wpa_printf
                  |L13.42|
;;;87     			   data->force_peap_version);
;;;88     	}
;;;89     
;;;90     	if (os_strstr(phase1, "peaplabel=1")) {
00002a  a136              ADR      r1,|L13.260|
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       os_strstr
000032  b128              CBZ      r0,|L13.64|
;;;91     		data->force_new_label = 1;
000034  2001              MOVS     r0,#1
000036  6360              STR      r0,[r4,#0x34]
;;;92     		wpa_printf(MSG_DEBUG, "EAP-PEAP: Force new label for key "
000038  a135              ADR      r1,|L13.272|
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       wpa_printf
                  |L13.64|
;;;93     			   "derivation");
;;;94     	}
;;;95     
;;;96     	if (os_strstr(phase1, "peap_outer_success=0")) {
000040  a13f              ADR      r1,|L13.320|
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       os_strstr
000048  b128              CBZ      r0,|L13.86|
;;;97     		data->peap_outer_success = 0;
00004a  2000              MOVS     r0,#0
00004c  65e0              STR      r0,[r4,#0x5c]
;;;98     		wpa_printf(MSG_DEBUG, "EAP-PEAP: terminate authentication on "
00004e  a142              ADR      r1,|L13.344|
000050  f7fffffe          BL       wpa_printf
000054  e017              B        |L13.134|
                  |L13.86|
;;;99     			   "tunneled EAP-Success");
;;;100    	} else if (os_strstr(phase1, "peap_outer_success=1")) {
000056  a14f              ADR      r1,|L13.404|
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       os_strstr
00005e  b130              CBZ      r0,|L13.110|
;;;101    		data->peap_outer_success = 1;
000060  2001              MOVS     r0,#1
000062  65e0              STR      r0,[r4,#0x5c]
;;;102    		wpa_printf(MSG_DEBUG, "EAP-PEAP: send tunneled EAP-Success "
000064  4951              LDR      r1,|L13.428|
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       wpa_printf
00006c  e00b              B        |L13.134|
                  |L13.110|
;;;103    			   "after receiving tunneled EAP-Success");
;;;104    	} else if (os_strstr(phase1, "peap_outer_success=2")) {
00006e  a150              ADR      r1,|L13.432|
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       os_strstr
000076  b130              CBZ      r0,|L13.134|
;;;105    		data->peap_outer_success = 2;
000078  2002              MOVS     r0,#2
00007a  65e0              STR      r0,[r4,#0x5c]
;;;106    		wpa_printf(MSG_DEBUG, "EAP-PEAP: send PEAP/TLS ACK after "
00007c  494b              LDR      r1,|L13.428|
00007e  314c              ADDS     r1,r1,#0x4c
000080  2000              MOVS     r0,#0
000082  f7fffffe          BL       wpa_printf
                  |L13.134|
;;;107    			   "receiving tunneled EAP-Success");
;;;108    	}
;;;109    
;;;110    	if (os_strstr(phase1, "crypto_binding=0")) {
000086  a150              ADR      r1,|L13.456|
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       os_strstr
00008e  b130              CBZ      r0,|L13.158|
;;;111    		data->crypto_binding = NO_BINDING;
000090  2000              MOVS     r0,#0
000092  f8840070          STRB     r0,[r4,#0x70]
;;;112    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Do not use cryptobinding");
000096  a151              ADR      r1,|L13.476|
000098  f7fffffe          BL       wpa_printf
00009c  e018              B        |L13.208|
                  |L13.158|
;;;113    	} else if (os_strstr(phase1, "crypto_binding=1")) {
00009e  a158              ADR      r1,|L13.512|
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       os_strstr
0000a6  b138              CBZ      r0,|L13.184|
;;;114    		data->crypto_binding = OPTIONAL_BINDING;
0000a8  2001              MOVS     r0,#1
0000aa  f8840070          STRB     r0,[r4,#0x70]
;;;115    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Optional cryptobinding");
0000ae  a159              ADR      r1,|L13.532|
0000b0  2000              MOVS     r0,#0
0000b2  f7fffffe          BL       wpa_printf
0000b6  e00b              B        |L13.208|
                  |L13.184|
;;;116    	} else if (os_strstr(phase1, "crypto_binding=2")) {
0000b8  a15f              ADR      r1,|L13.568|
0000ba  4628              MOV      r0,r5
0000bc  f7fffffe          BL       os_strstr
0000c0  b130              CBZ      r0,|L13.208|
;;;117    		data->crypto_binding = REQUIRE_BINDING;
0000c2  2002              MOVS     r0,#2
0000c4  f8840070          STRB     r0,[r4,#0x70]
;;;118    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Require cryptobinding");
0000c8  a160              ADR      r1,|L13.588|
0000ca  2000              MOVS     r0,#0
0000cc  f7fffffe          BL       wpa_printf
                  |L13.208|
;;;119    	}
;;;120    
;;;121    #ifdef EAP_TNC
;;;122    	if (os_strstr(phase1, "tnc=soh2")) {
;;;123    		data->soh = 2;
;;;124    		wpa_printf(MSG_DEBUG, "EAP-PEAP: SoH version 2 enabled");
;;;125    	} else if (os_strstr(phase1, "tnc=soh1")) {
;;;126    		data->soh = 1;
;;;127    		wpa_printf(MSG_DEBUG, "EAP-PEAP: SoH version 1 enabled");
;;;128    	} else if (os_strstr(phase1, "tnc=soh")) {
;;;129    		data->soh = 2;
;;;130    		wpa_printf(MSG_DEBUG, "EAP-PEAP: SoH version 2 enabled");
;;;131    	}
;;;132    #endif /* EAP_TNC */
;;;133    
;;;134    	return 0;
0000d0  2000              MOVS     r0,#0
;;;135    }
0000d2  bd70              POP      {r4-r6,pc}
;;;136    
                          ENDP

                  |L13.212|
0000d4  70656170          DCB      "peapver=",0
0000d8  7665723d
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L13.224|
0000e0  4541502d          DCB      "EAP-PEAP: Forced PEAP version %d",0
0000e4  50454150
0000e8  3a20466f
0000ec  72636564
0000f0  20504541
0000f4  50207665
0000f8  7273696f
0000fc  6e202564
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0
                  |L13.260|
000104  70656170          DCB      "peaplabel=1",0
000108  6c616265
00010c  6c3d3100
                  |L13.272|
000110  4541502d          DCB      "EAP-PEAP: Force new label for key derivation",0
000114  50454150
000118  3a20466f
00011c  72636520
000120  6e657720
000124  6c616265
000128  6c20666f
00012c  72206b65
000130  79206465
000134  72697661
000138  74696f6e
00013c  00      
00013d  00                DCB      0
00013e  00                DCB      0
00013f  00                DCB      0
                  |L13.320|
000140  70656170          DCB      "peap_outer_success=0",0
000144  5f6f7574
000148  65725f73
00014c  75636365
000150  73733d30
000154  00      
000155  00                DCB      0
000156  00                DCB      0
000157  00                DCB      0
                  |L13.344|
000158  4541502d          DCB      "EAP-PEAP: terminate authentication on tunneled EAP-Succ"
00015c  50454150
000160  3a207465
000164  726d696e
000168  61746520
00016c  61757468
000170  656e7469
000174  63617469
000178  6f6e206f
00017c  6e207475
000180  6e6e656c
000184  65642045
000188  41502d53
00018c  756363  
00018f  65737300          DCB      "ess",0
000193  00                DCB      0
                  |L13.404|
000194  70656170          DCB      "peap_outer_success=1",0
000198  5f6f7574
00019c  65725f73
0001a0  75636365
0001a4  73733d31
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L13.428|
                          DCD      ||.constdata||
                  |L13.432|
0001b0  70656170          DCB      "peap_outer_success=2",0
0001b4  5f6f7574
0001b8  65725f73
0001bc  75636365
0001c0  73733d32
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L13.456|
0001c8  63727970          DCB      "crypto_binding=0",0
0001cc  746f5f62
0001d0  696e6469
0001d4  6e673d30
0001d8  00      
0001d9  00                DCB      0
0001da  00                DCB      0
0001db  00                DCB      0
                  |L13.476|
0001dc  4541502d          DCB      "EAP-PEAP: Do not use cryptobinding",0
0001e0  50454150
0001e4  3a20446f
0001e8  206e6f74
0001ec  20757365
0001f0  20637279
0001f4  70746f62
0001f8  696e6469
0001fc  6e6700  
0001ff  00                DCB      0
                  |L13.512|
000200  63727970          DCB      "crypto_binding=1",0
000204  746f5f62
000208  696e6469
00020c  6e673d31
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
                  |L13.532|
000214  4541502d          DCB      "EAP-PEAP: Optional cryptobinding",0
000218  50454150
00021c  3a204f70
000220  74696f6e
000224  616c2063
000228  72797074
00022c  6f62696e
000230  64696e67
000234  00      
000235  00                DCB      0
000236  00                DCB      0
000237  00                DCB      0
                  |L13.568|
000238  63727970          DCB      "crypto_binding=2",0
00023c  746f5f62
000240  696e6469
000244  6e673d32
000248  00      
000249  00                DCB      0
00024a  00                DCB      0
00024b  00                DCB      0
                  |L13.588|
00024c  4541502d          DCB      "EAP-PEAP: Require cryptobinding",0
000250  50454150
000254  3a205265
000258  71756972
00025c  65206372
000260  7970746f
000264  62696e64
000268  696e6700

                          AREA ||i.eap_peap_phase2_request||, CODE, READONLY, ALIGN=2

                  eap_peap_phase2_request PROC
;;;610    
;;;611    static int eap_peap_phase2_request(struct eap_sm *sm,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;612    				   struct eap_peap_data *data,
;;;613    				   struct eap_method_ret *ret,
;;;614    				   struct wpabuf *req,
;;;615    				   struct wpabuf **resp)
;;;616    {
000004  b087              SUB      sp,sp,#0x1c
000006  4683              MOV      r11,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
00000c  f8dd9050          LDR      r9,[sp,#0x50]
;;;617    	struct eap_hdr *hdr = wpabuf_mhead(req);
000010  980a              LDR      r0,[sp,#0x28]
000012  f7fffffe          BL       wpabuf_mhead
000016  4607              MOV      r7,r0
;;;618    	size_t len = be_to_host16(hdr->length);
000018  8878              LDRH     r0,[r7,#2]
00001a  f44f417f          MOV      r1,#0xff00
00001e  ea012000          AND      r0,r1,r0,LSL #8
000022  8879              LDRH     r1,[r7,#2]
000024  ea402011          ORR      r0,r0,r1,LSR #8
000028  9006              STR      r0,[sp,#0x18]
;;;619    	u8 *pos;
;;;620    	struct eap_method_ret iret;
;;;621    	struct eap_peer_config *config = eap_get_config(sm);
00002a  4658              MOV      r0,r11
00002c  f7fffffe          BL       eap_get_config
000030  4682              MOV      r10,r0
;;;622    
;;;623    	if (len <= sizeof(struct eap_hdr)) {
000032  9806              LDR      r0,[sp,#0x18]
000034  2804              CMP      r0,#4
000036  d809              BHI      |L14.76|
;;;624    		wpa_printf(MSG_INFO, "EAP-PEAP: too short "
000038  a175              ADR      r1,|L14.528|
00003a  2000              MOVS     r0,#0
00003c  9a06              LDR      r2,[sp,#0x18]
00003e  f7fffffe          BL       wpa_printf
;;;625    			   "Phase 2 request (len=%lu)", (unsigned long) len);
;;;626    		return -1;
000042  f04f30ff          MOV      r0,#0xffffffff
                  |L14.70|
;;;627    	}
;;;628    	pos = (u8 *) (hdr + 1);
;;;629    	wpa_printf(MSG_DEBUG, "EAP-PEAP: Phase 2 Request: type=%d", *pos);
;;;630    	switch (*pos) {
;;;631    	case EAP_TYPE_IDENTITY:
;;;632    		*resp = eap_sm_buildIdentity(sm, hdr->identifier, 1);
;;;633    		break;
;;;634    	case EAP_TYPE_TLV:
;;;635    		os_memset(&iret, 0, sizeof(iret));
;;;636    		if (eap_tlv_process(sm, data, &iret, req, resp,
;;;637    				    data->phase2_eap_started &&
;;;638    				    !data->phase2_eap_success)) {
;;;639    			ret->methodState = METHOD_DONE;
;;;640    			ret->decision = DECISION_FAIL;
;;;641    			return -1;
;;;642    		}
;;;643    		if (iret.methodState == METHOD_DONE ||
;;;644    		    iret.methodState == METHOD_MAY_CONT) {
;;;645    			ret->methodState = iret.methodState;
;;;646    			ret->decision = iret.decision;
;;;647    			data->phase2_success = 1;
;;;648    		}
;;;649    		break;
;;;650    	case EAP_TYPE_EXPANDED:
;;;651    #ifdef EAP_TNC
;;;652    		if (data->soh) {
;;;653    			const u8 *epos;
;;;654    			size_t eleft;
;;;655    
;;;656    			epos = eap_hdr_validate(EAP_VENDOR_MICROSOFT, 0x21,
;;;657    						req, &eleft);
;;;658    			if (epos) {
;;;659    				struct wpabuf *buf;
;;;660    				wpa_printf(MSG_DEBUG,
;;;661    					   "EAP-PEAP: SoH EAP Extensions");
;;;662    				buf = tncc_process_soh_request(data->soh,
;;;663    							       epos, eleft);
;;;664    				if (buf) {
;;;665    					*resp = eap_msg_alloc(
;;;666    						EAP_VENDOR_MICROSOFT, 0x21,
;;;667    						wpabuf_len(buf),
;;;668    						EAP_CODE_RESPONSE,
;;;669    						hdr->identifier);
;;;670    					if (*resp == NULL) {
;;;671    						ret->methodState = METHOD_DONE;
;;;672    						ret->decision = DECISION_FAIL;
;;;673    						return -1;
;;;674    					}
;;;675    					wpabuf_put_buf(*resp, buf);
;;;676    					wpabuf_free(buf);
;;;677    					break;
;;;678    				}
;;;679    			}
;;;680    		}
;;;681    #endif /* EAP_TNC */
;;;682    		/* fall through */
;;;683    	default:
;;;684    		if (data->phase2_type.vendor == EAP_VENDOR_IETF &&
;;;685    		    data->phase2_type.method == EAP_TYPE_NONE) {
;;;686    			size_t i;
;;;687    			for (i = 0; i < data->num_phase2_types; i++) {
;;;688    				if (data->phase2_types[i].vendor !=
;;;689    				    EAP_VENDOR_IETF ||
;;;690    				    data->phase2_types[i].method != *pos)
;;;691    					continue;
;;;692    
;;;693    				data->phase2_type.vendor =
;;;694    					data->phase2_types[i].vendor;
;;;695    				data->phase2_type.method =
;;;696    					data->phase2_types[i].method;
;;;697    				wpa_printf(MSG_DEBUG, "EAP-PEAP: Selected "
;;;698    					   "Phase 2 EAP vendor %d method %d",
;;;699    					   data->phase2_type.vendor,
;;;700    					   data->phase2_type.method);
;;;701    				break;
;;;702    			}
;;;703    		}
;;;704    		if (*pos != data->phase2_type.method ||
;;;705    		    *pos == EAP_TYPE_NONE) {
;;;706    			if (eap_peer_tls_phase2_nak(data->phase2_types,
;;;707    						    data->num_phase2_types,
;;;708    						    hdr, resp))
;;;709    				return -1;
;;;710    			return 0;
;;;711    		}
;;;712    
;;;713    		if (data->phase2_priv == NULL) {
;;;714    			data->phase2_method = eap_peer_get_eap_method(
;;;715    				data->phase2_type.vendor,
;;;716    				data->phase2_type.method);
;;;717    			if (data->phase2_method) {
;;;718    				sm->init_phase2 = 1;
;;;719    				data->phase2_priv =
;;;720    					data->phase2_method->init(sm);
;;;721    				sm->init_phase2 = 0;
;;;722    			}
;;;723    		}
;;;724    		if (data->phase2_priv == NULL || data->phase2_method == NULL) {
;;;725    			wpa_printf(MSG_INFO, "EAP-PEAP: failed to initialize "
;;;726    				   "Phase 2 EAP method %d", *pos);
;;;727    			ret->methodState = METHOD_DONE;
;;;728    			ret->decision = DECISION_FAIL;
;;;729    			return -1;
;;;730    		}
;;;731    		data->phase2_eap_started = 1;
;;;732    		os_memset(&iret, 0, sizeof(iret));
;;;733    		*resp = data->phase2_method->process(sm, data->phase2_priv,
;;;734    						     &iret, req);
;;;735    		if ((iret.methodState == METHOD_DONE ||
;;;736    		     iret.methodState == METHOD_MAY_CONT) &&
;;;737    		    (iret.decision == DECISION_UNCOND_SUCC ||
;;;738    		     iret.decision == DECISION_COND_SUCC)) {
;;;739    			data->phase2_eap_success = 1;
;;;740    			data->phase2_success = 1;
;;;741    		}
;;;742    		break;
;;;743    	}
;;;744    
;;;745    	if (*resp == NULL &&
;;;746    	    (config->pending_req_identity || config->pending_req_password ||
;;;747    	     config->pending_req_otp || config->pending_req_new_password)) {
;;;748    		wpabuf_free(data->pending_phase2_req);
;;;749    		data->pending_phase2_req = wpabuf_alloc_copy(hdr, len);
;;;750    	}
;;;751    
;;;752    	return 0;
;;;753    }
000046  b00b              ADD      sp,sp,#0x2c
000048  e8bd8ff0          POP      {r4-r11,pc}
                  |L14.76|
00004c  1d3e              ADDS     r6,r7,#4              ;628
00004e  7832              LDRB     r2,[r6,#0]            ;629
000050  a17b              ADR      r1,|L14.576|
000052  2000              MOVS     r0,#0                 ;629
000054  f7fffffe          BL       wpa_printf
000058  7830              LDRB     r0,[r6,#0]            ;630
00005a  2801              CMP      r0,#1                 ;630
00005c  d004              BEQ      |L14.104|
00005e  2821              CMP      r0,#0x21              ;630
000060  d00a              BEQ      |L14.120|
000062  28fe              CMP      r0,#0xfe              ;630
000064  d134              BNE      |L14.208|
000066  e034              B        |L14.210|
                  |L14.104|
000068  7879              LDRB     r1,[r7,#1]            ;632
00006a  2201              MOVS     r2,#1                 ;632
00006c  4658              MOV      r0,r11                ;632
00006e  f7fffffe          BL       eap_sm_buildIdentity
000072  f8c90000          STR      r0,[r9,#0]            ;632
000076  e0b1              B        |L14.476|
                  |L14.120|
000078  220c              MOVS     r2,#0xc               ;635
00007a  2100              MOVS     r1,#0                 ;635
00007c  a803              ADD      r0,sp,#0xc            ;635
00007e  f7fffffe          BL       os_memset
000082  6ca0              LDR      r0,[r4,#0x48]         ;636
000084  b118              CBZ      r0,|L14.142|
000086  6c60              LDR      r0,[r4,#0x44]         ;638
000088  b908              CBNZ     r0,|L14.142|
00008a  2301              MOVS     r3,#1                 ;638
00008c  e000              B        |L14.144|
                  |L14.142|
00008e  2300              MOVS     r3,#0                 ;638
                  |L14.144|
000090  e9cd9300          STRD     r9,r3,[sp,#0]         ;638
000094  aa03              ADD      r2,sp,#0xc            ;638
000096  4621              MOV      r1,r4                 ;638
000098  4658              MOV      r0,r11                ;638
00009a  9b0a              LDR      r3,[sp,#0x28]         ;638
00009c  f7fffffe          BL       eap_tlv_process
0000a0  b128              CBZ      r0,|L14.174|
0000a2  2004              MOVS     r0,#4                 ;639
0000a4  7128              STRB     r0,[r5,#4]            ;639
0000a6  2000              MOVS     r0,#0                 ;640
0000a8  7168              STRB     r0,[r5,#5]            ;640
0000aa  1e40              SUBS     r0,r0,#1              ;641
0000ac  e7cb              B        |L14.70|
                  |L14.174|
0000ae  f89d0010          LDRB     r0,[sp,#0x10]         ;643
0000b2  2804              CMP      r0,#4                 ;643
0000b4  d003              BEQ      |L14.190|
0000b6  f89d0010          LDRB     r0,[sp,#0x10]         ;644
0000ba  2803              CMP      r0,#3                 ;644
0000bc  d107              BNE      |L14.206|
                  |L14.190|
0000be  f89d0010          LDRB     r0,[sp,#0x10]         ;645
0000c2  7128              STRB     r0,[r5,#4]            ;645
0000c4  f89d0011          LDRB     r0,[sp,#0x11]         ;646
0000c8  7168              STRB     r0,[r5,#5]            ;646
0000ca  2001              MOVS     r0,#1                 ;647
0000cc  6420              STR      r0,[r4,#0x40]         ;647
                  |L14.206|
0000ce  e085              B        |L14.476|
                  |L14.208|
0000d0  bf00              NOP                            ;650
                  |L14.210|
0000d2  6ce0              LDR      r0,[r4,#0x4c]         ;684
0000d4  bb38              CBNZ     r0,|L14.294|
0000d6  6d20              LDR      r0,[r4,#0x50]         ;685
0000d8  bb28              CBNZ     r0,|L14.294|
0000da  f04f0800          MOV      r8,#0                 ;687
0000de  e01d              B        |L14.284|
                  |L14.224|
0000e0  6d60              LDR      r0,[r4,#0x54]         ;688
0000e2  f8500038          LDR      r0,[r0,r8,LSL #3]     ;688
0000e6  b930              CBNZ     r0,|L14.246|
0000e8  6d60              LDR      r0,[r4,#0x54]         ;690
0000ea  eb0000c8          ADD      r0,r0,r8,LSL #3       ;690
0000ee  6840              LDR      r0,[r0,#4]            ;690
0000f0  7831              LDRB     r1,[r6,#0]            ;690
0000f2  4288              CMP      r0,r1                 ;690
0000f4  d000              BEQ      |L14.248|
                  |L14.246|
0000f6  e00f              B        |L14.280|
                  |L14.248|
0000f8  6d60              LDR      r0,[r4,#0x54]         ;693
0000fa  f8500038          LDR      r0,[r0,r8,LSL #3]     ;693
0000fe  64e0              STR      r0,[r4,#0x4c]         ;693
000100  6d60              LDR      r0,[r4,#0x54]         ;695
000102  eb0000c8          ADD      r0,r0,r8,LSL #3       ;695
000106  6841              LDR      r1,[r0,#4]            ;695
000108  6521              STR      r1,[r4,#0x50]         ;695
00010a  a156              ADR      r1,|L14.612|
00010c  2000              MOVS     r0,#0                 ;697
00010e  e9d42313          LDRD     r2,r3,[r4,#0x4c]      ;697
000112  f7fffffe          BL       wpa_printf
000116  e004              B        |L14.290|
                  |L14.280|
000118  f1080801          ADD      r8,r8,#1              ;687
                  |L14.284|
00011c  6da0              LDR      r0,[r4,#0x58]         ;687
00011e  4540              CMP      r0,r8                 ;687
000120  d8de              BHI      |L14.224|
                  |L14.290|
000122  bf00              NOP                            ;701
000124  bf00              NOP                            ;703
                  |L14.294|
000126  7831              LDRB     r1,[r6,#0]            ;704
000128  6d20              LDR      r0,[r4,#0x50]         ;704
00012a  4281              CMP      r1,r0                 ;704
00012c  d101              BNE      |L14.306|
00012e  7830              LDRB     r0,[r6,#0]            ;705
000130  b958              CBNZ     r0,|L14.330|
                  |L14.306|
000132  464b              MOV      r3,r9                 ;706
000134  463a              MOV      r2,r7                 ;706
000136  e9d40115          LDRD     r0,r1,[r4,#0x54]      ;706
00013a  f7fffffe          BL       eap_peer_tls_phase2_nak
00013e  b110              CBZ      r0,|L14.326|
000140  f04f30ff          MOV      r0,#0xffffffff        ;709
000144  e77f              B        |L14.70|
                  |L14.326|
000146  2000              MOVS     r0,#0                 ;710
000148  e77d              B        |L14.70|
                  |L14.330|
00014a  6be0              LDR      r0,[r4,#0x3c]         ;713
00014c  b990              CBNZ     r0,|L14.372|
00014e  6d22              LDR      r2,[r4,#0x50]         ;714
000150  b2d1              UXTB     r1,r2                 ;714
000152  6ce0              LDR      r0,[r4,#0x4c]         ;714
000154  f7fffffe          BL       eap_peer_get_eap_method
000158  63a0              STR      r0,[r4,#0x38]         ;714
00015a  6ba0              LDR      r0,[r4,#0x38]         ;717
00015c  b150              CBZ      r0,|L14.372|
00015e  2001              MOVS     r0,#1                 ;718
000160  f8cb005c          STR      r0,[r11,#0x5c]        ;718
000164  6ba0              LDR      r0,[r4,#0x38]         ;719
000166  68c1              LDR      r1,[r0,#0xc]          ;719
000168  4658              MOV      r0,r11                ;719
00016a  4788              BLX      r1                    ;719
00016c  63e0              STR      r0,[r4,#0x3c]         ;719
00016e  2000              MOVS     r0,#0                 ;721
000170  f8cb005c          STR      r0,[r11,#0x5c]        ;721
                  |L14.372|
000174  6be0              LDR      r0,[r4,#0x3c]         ;724
000176  b108              CBZ      r0,|L14.380|
000178  6ba0              LDR      r0,[r4,#0x38]         ;724
00017a  b950              CBNZ     r0,|L14.402|
                  |L14.380|
00017c  7832              LDRB     r2,[r6,#0]            ;725
00017e  a146              ADR      r1,|L14.664|
000180  2000              MOVS     r0,#0                 ;725
000182  f7fffffe          BL       wpa_printf
000186  2004              MOVS     r0,#4                 ;727
000188  7128              STRB     r0,[r5,#4]            ;727
00018a  2000              MOVS     r0,#0                 ;728
00018c  7168              STRB     r0,[r5,#5]            ;728
00018e  1e40              SUBS     r0,r0,#1              ;729
000190  e759              B        |L14.70|
                  |L14.402|
000192  2001              MOVS     r0,#1                 ;731
000194  64a0              STR      r0,[r4,#0x48]         ;731
000196  220c              MOVS     r2,#0xc               ;732
000198  2100              MOVS     r1,#0                 ;732
00019a  a803              ADD      r0,sp,#0xc            ;732
00019c  f7fffffe          BL       os_memset
0001a0  e9d4010e          LDRD     r0,r1,[r4,#0x38]      ;733
0001a4  f8d0c014          LDR      r12,[r0,#0x14]        ;733
0001a8  aa03              ADD      r2,sp,#0xc            ;733
0001aa  4658              MOV      r0,r11                ;733
0001ac  9b0a              LDR      r3,[sp,#0x28]         ;733
0001ae  47e0              BLX      r12                   ;733
0001b0  f8c90000          STR      r0,[r9,#0]            ;733
0001b4  f89d0010          LDRB     r0,[sp,#0x10]         ;735
0001b8  2804              CMP      r0,#4                 ;735
0001ba  d003              BEQ      |L14.452|
0001bc  f89d0010          LDRB     r0,[sp,#0x10]         ;736
0001c0  2803              CMP      r0,#3                 ;736
0001c2  d10a              BNE      |L14.474|
                  |L14.452|
0001c4  f89d0011          LDRB     r0,[sp,#0x11]         ;737
0001c8  2802              CMP      r0,#2                 ;737
0001ca  d003              BEQ      |L14.468|
0001cc  f89d0011          LDRB     r0,[sp,#0x11]         ;738
0001d0  2801              CMP      r0,#1                 ;738
0001d2  d102              BNE      |L14.474|
                  |L14.468|
0001d4  2001              MOVS     r0,#1                 ;739
0001d6  6460              STR      r0,[r4,#0x44]         ;739
0001d8  6420              STR      r0,[r4,#0x40]         ;740
                  |L14.474|
0001da  bf00              NOP                            ;742
                  |L14.476|
0001dc  bf00              NOP                            ;633
0001de  f8d90000          LDR      r0,[r9,#0]            ;745
0001e2  b998              CBNZ     r0,|L14.524|
0001e4  f8da00a0          LDR      r0,[r10,#0xa0]        ;746
0001e8  b940              CBNZ     r0,|L14.508|
0001ea  f8da00a4          LDR      r0,[r10,#0xa4]        ;746
0001ee  b928              CBNZ     r0,|L14.508|
0001f0  f8da00b4          LDR      r0,[r10,#0xb4]        ;747
0001f4  b910              CBNZ     r0,|L14.508|
0001f6  f8da00ac          LDR      r0,[r10,#0xac]        ;747
0001fa  b138              CBZ      r0,|L14.524|
                  |L14.508|
0001fc  6ee0              LDR      r0,[r4,#0x6c]         ;748
0001fe  f7fffffe          BL       wpabuf_free
000202  4638              MOV      r0,r7                 ;749
000204  9906              LDR      r1,[sp,#0x18]         ;749
000206  f7fffffe          BL       wpabuf_alloc_copy
00020a  66e0              STR      r0,[r4,#0x6c]         ;749
                  |L14.524|
00020c  2000              MOVS     r0,#0                 ;752
00020e  e71a              B        |L14.70|
;;;754    
                          ENDP

                  |L14.528|
000210  4541502d          DCB      "EAP-PEAP: too short Phase 2 request (len=%lu)",0
000214  50454150
000218  3a20746f
00021c  6f207368
000220  6f727420
000224  50686173
000228  65203220
00022c  72657175
000230  65737420
000234  286c656e
000238  3d256c75
00023c  2900    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L14.576|
000240  4541502d          DCB      "EAP-PEAP: Phase 2 Request: type=%d",0
000244  50454150
000248  3a205068
00024c  61736520
000250  32205265
000254  71756573
000258  743a2074
00025c  7970653d
000260  256400  
000263  00                DCB      0
                  |L14.612|
000264  4541502d          DCB      "EAP-PEAP: Selected Phase 2 EAP vendor %d method %d",0
000268  50454150
00026c  3a205365
000270  6c656374
000274  65642050
000278  68617365
00027c  20322045
000280  41502076
000284  656e646f
000288  72202564
00028c  206d6574
000290  686f6420
000294  256400  
000297  00                DCB      0
                  |L14.664|
000298  4541502d          DCB      "EAP-PEAP: failed to initialize Phase 2 EAP method %d",0
00029c  50454150
0002a0  3a206661
0002a4  696c6564
0002a8  20746f20
0002ac  696e6974
0002b0  69616c69
0002b4  7a652050
0002b8  68617365
0002bc  20322045
0002c0  4150206d
0002c4  6574686f
0002c8  64202564
0002cc  00      
0002cd  00                DCB      0
0002ce  00                DCB      0
0002cf  00                DCB      0

                          AREA ||i.eap_peap_process||, CODE, READONLY, ALIGN=2

                  eap_peap_process PROC
;;;1029   
;;;1030   static struct wpabuf * eap_peap_process(struct eap_sm *sm, void *priv,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1031   					struct eap_method_ret *ret,
;;;1032   					const struct wpabuf *reqData)
;;;1033   {
000004  b08b              SUB      sp,sp,#0x2c
000006  4607              MOV      r7,r0
000008  468b              MOV      r11,r1
00000a  4615              MOV      r5,r2
00000c  4699              MOV      r9,r3
;;;1034   	const struct eap_hdr *req;
;;;1035   	size_t left;
;;;1036   	int res;
;;;1037   	u8 flags, id;
;;;1038   	struct wpabuf *resp;
;;;1039   	const u8 *pos;
;;;1040   	struct eap_peap_data *data = priv;
00000e  465c              MOV      r4,r11
;;;1041   
;;;1042   	pos = eap_peer_tls_process_init(sm, &data->ssl, EAP_TYPE_PEAP, ret,
000010  ab09              ADD      r3,sp,#0x24
000012  aa0a              ADD      r2,sp,#0x28
000014  e9cd9200          STRD     r9,r2,[sp,#0]
000018  9302              STR      r3,[sp,#8]
00001a  462b              MOV      r3,r5
00001c  2219              MOVS     r2,#0x19
00001e  4621              MOV      r1,r4
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       eap_peer_tls_process_init
000026  9006              STR      r0,[sp,#0x18]
;;;1043   					reqData, &left, &flags);
;;;1044   	if (pos == NULL)
000028  9806              LDR      r0,[sp,#0x18]
00002a  b918              CBNZ     r0,|L15.52|
;;;1045   		return NULL;
00002c  2000              MOVS     r0,#0
                  |L15.46|
;;;1046   	req = wpabuf_head(reqData);
;;;1047   	id = req->identifier;
;;;1048   
;;;1049   	if (flags & EAP_TLS_FLAGS_START) {
;;;1050   		wpa_printf(MSG_DEBUG, "EAP-PEAP: Start (server ver=%d, own "
;;;1051   			   "ver=%d)", flags & EAP_TLS_VERSION_MASK,
;;;1052   			data->peap_version);
;;;1053   		if ((flags & EAP_TLS_VERSION_MASK) < data->peap_version)
;;;1054   			data->peap_version = flags & EAP_TLS_VERSION_MASK;
;;;1055   		if (data->force_peap_version >= 0 &&
;;;1056   		    data->force_peap_version != data->peap_version) {
;;;1057   			wpa_printf(MSG_WARNING, "EAP-PEAP: Failed to select "
;;;1058   				   "forced PEAP version %d",
;;;1059   				   data->force_peap_version);
;;;1060   			ret->methodState = METHOD_DONE;
;;;1061   			ret->decision = DECISION_FAIL;
;;;1062   			ret->allowNotifications = FALSE;
;;;1063   			return NULL;
;;;1064   		}
;;;1065   		wpa_printf(MSG_DEBUG, "EAP-PEAP: Using PEAP version %d",
;;;1066   			   data->peap_version);
;;;1067   		left = 0; /* make sure that this frame is empty, even though it
;;;1068   			   * should always be, anyway */
;;;1069   	}
;;;1070   
;;;1071   	resp = NULL;
;;;1072   	if (tls_connection_established(sm->ssl_ctx, data->ssl.conn) &&
;;;1073   	    !data->resuming) {
;;;1074   		struct wpabuf msg;
;;;1075   		wpabuf_set(&msg, pos, left);
;;;1076   		res = eap_peap_decrypt(sm, data, ret, req, &msg, &resp);
;;;1077   	} else {
;;;1078   		res = eap_peer_tls_process_helper(sm, &data->ssl,
;;;1079   						  EAP_TYPE_PEAP,
;;;1080   						  data->peap_version, id, pos,
;;;1081   						  left, &resp);
;;;1082   
;;;1083   		if (tls_connection_established(sm->ssl_ctx, data->ssl.conn)) {
;;;1084   			char *label;
;;;1085   			wpa_printf(MSG_DEBUG,
;;;1086   				   "EAP-PEAP: TLS done, proceed to Phase 2");
;;;1087   			os_free(data->key_data);
;;;1088   			/* draft-josefsson-ppext-eap-tls-eap-05.txt
;;;1089   			 * specifies that PEAPv1 would use "client PEAP
;;;1090   			 * encryption" as the label. However, most existing
;;;1091   			 * PEAPv1 implementations seem to be using the old
;;;1092   			 * label, "client EAP encryption", instead. Use the old
;;;1093   			 * label by default, but allow it to be configured with
;;;1094   			 * phase1 parameter peaplabel=1. */
;;;1095   			if (data->peap_version > 1 || data->force_new_label)
;;;1096   				label = "client PEAP encryption";
;;;1097   			else
;;;1098   				label = "client EAP encryption";
;;;1099   			wpa_printf(MSG_DEBUG, "EAP-PEAP: using label '%s' in "
;;;1100   				   "key derivation", label);
;;;1101   			data->key_data =
;;;1102   				eap_peer_tls_derive_key(sm, &data->ssl, label,
;;;1103   							EAP_TLS_KEY_LEN);
;;;1104   			if (data->key_data) {
;;;1105   				wpa_hexdump_key(MSG_DEBUG, 
;;;1106   						"EAP-PEAP: Derived key",
;;;1107   						data->key_data,
;;;1108   						EAP_TLS_KEY_LEN);
;;;1109   			} else {
;;;1110   				wpa_printf(MSG_DEBUG, "EAP-PEAP: Failed to "
;;;1111   					   "derive key");
;;;1112   			}
;;;1113   
;;;1114   			if (sm->workaround && data->resuming) {
;;;1115   				/*
;;;1116   				 * At least few RADIUS servers (Aegis v1.1.6;
;;;1117   				 * but not v1.1.4; and Cisco ACS) seem to be
;;;1118   				 * terminating PEAPv1 (Aegis) or PEAPv0 (Cisco
;;;1119   				 * ACS) session resumption with outer
;;;1120   				 * EAP-Success. This does not seem to follow
;;;1121   				 * draft-josefsson-pppext-eap-tls-eap-05.txt
;;;1122   				 * section 4.2, so only allow this if EAP
;;;1123   				 * workarounds are enabled.
;;;1124   				 */
;;;1125   				wpa_printf(MSG_DEBUG, "EAP-PEAP: Workaround - "
;;;1126   					   "allow outer EAP-Success to "
;;;1127   					   "terminate PEAP resumption");
;;;1128   				ret->decision = DECISION_COND_SUCC;
;;;1129   				data->phase2_success = 1;
;;;1130   			}
;;;1131   
;;;1132   			data->resuming = 0;
;;;1133   		}
;;;1134   
;;;1135   		if (res == 2) {
;;;1136   			struct wpabuf msg;
;;;1137   			/*
;;;1138   			 * Application data included in the handshake message.
;;;1139   			 */
;;;1140   			wpabuf_free(data->pending_phase2_req);
;;;1141   			data->pending_phase2_req = resp;
;;;1142   			resp = NULL;
;;;1143   			wpabuf_set(&msg, pos, left);
;;;1144   			res = eap_peap_decrypt(sm, data, ret, req, &msg,
;;;1145   					       &resp);
;;;1146   		}
;;;1147   	}
;;;1148   
;;;1149   	if (ret->methodState == METHOD_DONE) {
;;;1150   		ret->allowNotifications = FALSE;
;;;1151   	}
;;;1152   
;;;1153   	if (res == 1) {
;;;1154   		wpabuf_free(resp);
;;;1155   		return eap_peer_tls_build_ack(id, EAP_TYPE_PEAP,
;;;1156   					      data->peap_version);
;;;1157   	}
;;;1158   
;;;1159   	return resp;
;;;1160   }
00002e  b00b              ADD      sp,sp,#0x2c
000030  e8bd8ff0          POP      {r4-r11,pc}
                  |L15.52|
000034  4648              MOV      r0,r9                 ;1046
000036  f7fffffe          BL       wpabuf_head
00003a  4680              MOV      r8,r0                 ;1046
00003c  f8980001          LDRB     r0,[r8,#1]            ;1047
000040  9008              STR      r0,[sp,#0x20]         ;1047
000042  f89d0024          LDRB     r0,[sp,#0x24]         ;1049
000046  f0100f20          TST      r0,#0x20              ;1049
00004a  d02d              BEQ      |L15.168|
00004c  f89d0024          LDRB     r0,[sp,#0x24]         ;1050
000050  f0000207          AND      r2,r0,#7              ;1050
000054  a15e              ADR      r1,|L15.464|
000056  2000              MOVS     r0,#0                 ;1050
000058  6ae3              LDR      r3,[r4,#0x2c]         ;1050
00005a  f7fffffe          BL       wpa_printf
00005e  f89d0024          LDRB     r0,[sp,#0x24]         ;1053
000062  f0000007          AND      r0,r0,#7              ;1053
000066  6ae1              LDR      r1,[r4,#0x2c]         ;1053
000068  4288              CMP      r0,r1                 ;1053
00006a  da04              BGE      |L15.118|
00006c  f89d0024          LDRB     r0,[sp,#0x24]         ;1054
000070  f0000007          AND      r0,r0,#7              ;1054
000074  62e0              STR      r0,[r4,#0x2c]         ;1054
                  |L15.118|
000076  6b20              LDR      r0,[r4,#0x30]         ;1055
000078  2800              CMP      r0,#0                 ;1055
00007a  db0e              BLT      |L15.154|
00007c  e9d4100b          LDRD     r1,r0,[r4,#0x2c]      ;1056
000080  4288              CMP      r0,r1                 ;1056
000082  d00a              BEQ      |L15.154|
000084  a15d              ADR      r1,|L15.508|
000086  2000              MOVS     r0,#0                 ;1057
000088  6b22              LDR      r2,[r4,#0x30]         ;1057
00008a  f7fffffe          BL       wpa_printf
00008e  2004              MOVS     r0,#4                 ;1060
000090  7128              STRB     r0,[r5,#4]            ;1060
000092  2000              MOVS     r0,#0                 ;1061
000094  7168              STRB     r0,[r5,#5]            ;1061
000096  60a8              STR      r0,[r5,#8]            ;1062
000098  e7c9              B        |L15.46|
                  |L15.154|
00009a  a165              ADR      r1,|L15.560|
00009c  2000              MOVS     r0,#0                 ;1065
00009e  6ae2              LDR      r2,[r4,#0x2c]         ;1065
0000a0  f7fffffe          BL       wpa_printf
0000a4  2000              MOVS     r0,#0                 ;1067
0000a6  900a              STR      r0,[sp,#0x28]         ;1067
                  |L15.168|
0000a8  2000              MOVS     r0,#0                 ;1071
0000aa  9007              STR      r0,[sp,#0x1c]         ;1071
0000ac  6821              LDR      r1,[r4,#0]            ;1072
0000ae  f8d70098          LDR      r0,[r7,#0x98]         ;1072
0000b2  f7fffffe          BL       tls_connection_established
0000b6  b190              CBZ      r0,|L15.222|
0000b8  6e20              LDR      r0,[r4,#0x60]         ;1073
0000ba  b980              CBNZ     r0,|L15.222|
0000bc  a803              ADD      r0,sp,#0xc            ;1075
0000be  9a0a              LDR      r2,[sp,#0x28]         ;1075
0000c0  9906              LDR      r1,[sp,#0x18]         ;1075
0000c2  f7fffffe          BL       wpabuf_set
0000c6  ab07              ADD      r3,sp,#0x1c           ;1076
0000c8  aa03              ADD      r2,sp,#0xc            ;1076
0000ca  e9cd2300          STRD     r2,r3,[sp,#0]         ;1076
0000ce  4643              MOV      r3,r8                 ;1076
0000d0  462a              MOV      r2,r5                 ;1076
0000d2  4621              MOV      r1,r4                 ;1076
0000d4  4638              MOV      r0,r7                 ;1076
0000d6  f7fffffe          BL       eap_peap_decrypt
0000da  4606              MOV      r6,r0                 ;1076
0000dc  e065              B        |L15.426|
                  |L15.222|
0000de  ab07              ADD      r3,sp,#0x1c           ;1078
0000e0  9a0a              LDR      r2,[sp,#0x28]         ;1078
0000e2  9906              LDR      r1,[sp,#0x18]         ;1078
0000e4  9808              LDR      r0,[sp,#0x20]         ;1078
0000e6  e88d000f          STM      sp,{r0-r3}            ;1078
0000ea  2219              MOVS     r2,#0x19              ;1078
0000ec  4621              MOV      r1,r4                 ;1078
0000ee  4638              MOV      r0,r7                 ;1078
0000f0  6ae3              LDR      r3,[r4,#0x2c]         ;1078
0000f2  f7fffffe          BL       eap_peer_tls_process_helper
0000f6  4606              MOV      r6,r0                 ;1078
0000f8  6821              LDR      r1,[r4,#0]            ;1083
0000fa  f8d70098          LDR      r0,[r7,#0x98]         ;1083
0000fe  f7fffffe          BL       tls_connection_established
000102  b3c0              CBZ      r0,|L15.374|
000104  a152              ADR      r1,|L15.592|
000106  2000              MOVS     r0,#0                 ;1085
000108  f7fffffe          BL       wpa_printf
00010c  6ea0              LDR      r0,[r4,#0x68]         ;1087
00010e  f7fffffe          BL       os_free
000112  6ae0              LDR      r0,[r4,#0x2c]         ;1095
000114  2801              CMP      r0,#1                 ;1095
000116  dc01              BGT      |L15.284|
000118  6b60              LDR      r0,[r4,#0x34]         ;1095
00011a  b110              CBZ      r0,|L15.290|
                  |L15.284|
00011c  f20f1a58          ADR.W    r10,|L15.632|
000120  e001              B        |L15.294|
                  |L15.290|
000122  f20f1a6c          ADR.W    r10,|L15.656|
                  |L15.294|
000126  4652              MOV      r2,r10                ;1099
000128  a15f              ADR      r1,|L15.680|
00012a  2000              MOVS     r0,#0                 ;1099
00012c  f7fffffe          BL       wpa_printf
000130  2340              MOVS     r3,#0x40              ;1101
000132  4652              MOV      r2,r10                ;1101
000134  4621              MOV      r1,r4                 ;1101
000136  4638              MOV      r0,r7                 ;1101
000138  f7fffffe          BL       eap_peer_tls_derive_key
00013c  66a0              STR      r0,[r4,#0x68]         ;1101
00013e  6ea0              LDR      r0,[r4,#0x68]         ;1104
000140  b130              CBZ      r0,|L15.336|
000142  2340              MOVS     r3,#0x40              ;1105
000144  a164              ADR      r1,|L15.728|
000146  2000              MOVS     r0,#0                 ;1105
000148  6ea2              LDR      r2,[r4,#0x68]         ;1105
00014a  f7fffffe          BL       wpa_hexdump_key
00014e  e003              B        |L15.344|
                  |L15.336|
000150  a167              ADR      r1,|L15.752|
000152  2000              MOVS     r0,#0                 ;1110
000154  f7fffffe          BL       wpa_printf
                  |L15.344|
000158  f8d7009c          LDR      r0,[r7,#0x9c]         ;1114
00015c  b140              CBZ      r0,|L15.368|
00015e  6e20              LDR      r0,[r4,#0x60]         ;1114
000160  b130              CBZ      r0,|L15.368|
000162  496b              LDR      r1,|L15.784|
000164  2000              MOVS     r0,#0                 ;1125
000166  f7fffffe          BL       wpa_printf
00016a  2001              MOVS     r0,#1                 ;1128
00016c  7168              STRB     r0,[r5,#5]            ;1128
00016e  6420              STR      r0,[r4,#0x40]         ;1129
                  |L15.368|
000170  2000              MOVS     r0,#0                 ;1132
000172  6620              STR      r0,[r4,#0x60]         ;1132
000174  bf00              NOP                            ;1133
                  |L15.374|
000176  2e02              CMP      r6,#2                 ;1135
000178  d117              BNE      |L15.426|
00017a  6ee0              LDR      r0,[r4,#0x6c]         ;1140
00017c  f7fffffe          BL       wpabuf_free
000180  9807              LDR      r0,[sp,#0x1c]         ;1141
000182  66e0              STR      r0,[r4,#0x6c]         ;1141
000184  2000              MOVS     r0,#0                 ;1142
000186  9007              STR      r0,[sp,#0x1c]         ;1142
000188  a803              ADD      r0,sp,#0xc            ;1143
00018a  9a0a              LDR      r2,[sp,#0x28]         ;1143
00018c  9906              LDR      r1,[sp,#0x18]         ;1143
00018e  f7fffffe          BL       wpabuf_set
000192  ab07              ADD      r3,sp,#0x1c           ;1144
000194  aa03              ADD      r2,sp,#0xc            ;1144
000196  e9cd2300          STRD     r2,r3,[sp,#0]         ;1144
00019a  4643              MOV      r3,r8                 ;1144
00019c  462a              MOV      r2,r5                 ;1144
00019e  4621              MOV      r1,r4                 ;1144
0001a0  4638              MOV      r0,r7                 ;1144
0001a2  f7fffffe          BL       eap_peap_decrypt
0001a6  4606              MOV      r6,r0                 ;1144
0001a8  bf00              NOP                            ;1146
                  |L15.426|
0001aa  7928              LDRB     r0,[r5,#4]            ;1149
0001ac  2804              CMP      r0,#4                 ;1149
0001ae  d101              BNE      |L15.436|
0001b0  2000              MOVS     r0,#0                 ;1150
0001b2  60a8              STR      r0,[r5,#8]            ;1150
                  |L15.436|
0001b4  2e01              CMP      r6,#1                 ;1153
0001b6  d108              BNE      |L15.458|
0001b8  9807              LDR      r0,[sp,#0x1c]         ;1154
0001ba  f7fffffe          BL       wpabuf_free
0001be  2119              MOVS     r1,#0x19              ;1155
0001c0  6ae2              LDR      r2,[r4,#0x2c]         ;1155
0001c2  9808              LDR      r0,[sp,#0x20]         ;1155
0001c4  f7fffffe          BL       eap_peer_tls_build_ack
0001c8  e731              B        |L15.46|
                  |L15.458|
0001ca  9807              LDR      r0,[sp,#0x1c]         ;1159
0001cc  e72f              B        |L15.46|
;;;1161   
                          ENDP

0001ce  0000              DCW      0x0000
                  |L15.464|
0001d0  4541502d          DCB      "EAP-PEAP: Start (server ver=%d, own ver=%d)",0
0001d4  50454150
0001d8  3a205374
0001dc  61727420
0001e0  28736572
0001e4  76657220
0001e8  7665723d
0001ec  25642c20
0001f0  6f776e20
0001f4  7665723d
0001f8  25642900
                  |L15.508|
0001fc  4541502d          DCB      "EAP-PEAP: Failed to select forced PEAP version %d",0
000200  50454150
000204  3a204661
000208  696c6564
00020c  20746f20
000210  73656c65
000214  63742066
000218  6f726365
00021c  64205045
000220  41502076
000224  65727369
000228  6f6e2025
00022c  6400    
00022e  00                DCB      0
00022f  00                DCB      0
                  |L15.560|
000230  4541502d          DCB      "EAP-PEAP: Using PEAP version %d",0
000234  50454150
000238  3a205573
00023c  696e6720
000240  50454150
000244  20766572
000248  73696f6e
00024c  20256400
                  |L15.592|
000250  4541502d          DCB      "EAP-PEAP: TLS done, proceed to Phase 2",0
000254  50454150
000258  3a20544c
00025c  5320646f
000260  6e652c20
000264  70726f63
000268  65656420
00026c  746f2050
000270  68617365
000274  203200  
000277  00                DCB      0
                  |L15.632|
000278  636c6965          DCB      "client PEAP encryption",0
00027c  6e742050
000280  45415020
000284  656e6372
000288  79707469
00028c  6f6e00  
00028f  00                DCB      0
                  |L15.656|
000290  636c6965          DCB      "client EAP encryption",0
000294  6e742045
000298  41502065
00029c  6e637279
0002a0  7074696f
0002a4  6e00    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L15.680|
0002a8  4541502d          DCB      "EAP-PEAP: using label '%s' in key derivation",0
0002ac  50454150
0002b0  3a207573
0002b4  696e6720
0002b8  6c616265
0002bc  6c202725
0002c0  73272069
0002c4  6e206b65
0002c8  79206465
0002cc  72697661
0002d0  74696f6e
0002d4  00      
0002d5  00                DCB      0
0002d6  00                DCB      0
0002d7  00                DCB      0
                  |L15.728|
0002d8  4541502d          DCB      "EAP-PEAP: Derived key",0
0002dc  50454150
0002e0  3a204465
0002e4  72697665
0002e8  64206b65
0002ec  7900    
0002ee  00                DCB      0
0002ef  00                DCB      0
                  |L15.752|
0002f0  4541502d          DCB      "EAP-PEAP: Failed to derive key",0
0002f4  50454150
0002f8  3a204661
0002fc  696c6564
000300  20746f20
000304  64657269
000308  7665206b
00030c  657900  
00030f  00                DCB      0
                  |L15.784|
                          DCD      ||.constdata||+0x2e8

                          AREA ||i.eap_peapv2_tlv_eap_payload||, CODE, READONLY, ALIGN=2

                  eap_peapv2_tlv_eap_payload PROC
;;;583    
;;;584    static struct wpabuf * eap_peapv2_tlv_eap_payload(struct wpabuf *buf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;585    {
000004  4604              MOV      r4,r0
;;;586    	struct wpabuf *e;
;;;587    	struct eap_tlv_hdr *tlv;
;;;588    
;;;589    	if (buf == NULL)
000006  b914              CBNZ     r4,|L16.14|
;;;590    		return NULL;
000008  2000              MOVS     r0,#0
                  |L16.10|
;;;591    
;;;592    	/* Encapsulate EAP packet in EAP-Payload TLV */
;;;593    	wpa_printf(MSG_DEBUG, "EAP-PEAPv2: Add EAP-Payload TLV");
;;;594    	e = wpabuf_alloc(sizeof(*tlv) + wpabuf_len(buf));
;;;595    	if (e == NULL) {
;;;596    		wpa_printf(MSG_DEBUG, "EAP-PEAPv2: Failed to allocate memory "
;;;597    			   "for TLV encapsulation");
;;;598    		wpabuf_free(buf);
;;;599    		return NULL;
;;;600    	}
;;;601    	tlv = wpabuf_put(e, sizeof(*tlv));
;;;602    	tlv->tlv_type = host_to_be16(EAP_TLV_TYPE_MANDATORY |
;;;603    				     EAP_TLV_EAP_PAYLOAD_TLV);
;;;604    	tlv->length = host_to_be16(wpabuf_len(buf));
;;;605    	wpabuf_put_buf(e, buf);
;;;606    	wpabuf_free(buf);
;;;607    	return e;
;;;608    }
00000a  e8bd81f0          POP      {r4-r8,pc}
                  |L16.14|
00000e  a11b              ADR      r1,|L16.124|
000010  2000              MOVS     r0,#0                 ;593
000012  f7fffffe          BL       wpa_printf
000016  4620              MOV      r0,r4                 ;594
000018  f7fffffe          BL       wpabuf_len
00001c  1d07              ADDS     r7,r0,#4              ;594
00001e  4638              MOV      r0,r7                 ;594
000020  f7fffffe          BL       wpabuf_alloc
000024  4605              MOV      r5,r0                 ;594
000026  b945              CBNZ     r5,|L16.58|
000028  a11c              ADR      r1,|L16.156|
00002a  2000              MOVS     r0,#0                 ;596
00002c  f7fffffe          BL       wpa_printf
000030  4620              MOV      r0,r4                 ;598
000032  f7fffffe          BL       wpabuf_free
000036  2000              MOVS     r0,#0                 ;599
000038  e7e7              B        |L16.10|
                  |L16.58|
00003a  2104              MOVS     r1,#4                 ;601
00003c  4628              MOV      r0,r5                 ;601
00003e  f7fffffe          BL       wpabuf_put
000042  4606              MOV      r6,r0                 ;601
000044  f44f6018          MOV      r0,#0x980             ;602
000048  8030              STRH     r0,[r6,#0]            ;602
00004a  4620              MOV      r0,r4                 ;604
00004c  f7fffffe          BL       wpabuf_len
000050  b280              UXTH     r0,r0                 ;604
000052  f44f417f          MOV      r1,#0xff00            ;604
000056  ea012700          AND      r7,r1,r0,LSL #8       ;604
00005a  4620              MOV      r0,r4                 ;604
00005c  f7fffffe          BL       wpabuf_len
000060  f3c02007          UBFX     r0,r0,#8,#8           ;604
000064  4338              ORRS     r0,r0,r7              ;604
000066  8070              STRH     r0,[r6,#2]            ;604
000068  4621              MOV      r1,r4                 ;605
00006a  4628              MOV      r0,r5                 ;605
00006c  f7fffffe          BL       wpabuf_put_buf
000070  4620              MOV      r0,r4                 ;606
000072  f7fffffe          BL       wpabuf_free
000076  4628              MOV      r0,r5                 ;607
000078  e7c7              B        |L16.10|
;;;609    
                          ENDP

00007a  0000              DCW      0x0000
                  |L16.124|
00007c  4541502d          DCB      "EAP-PEAPv2: Add EAP-Payload TLV",0
000080  50454150
000084  76323a20
000088  41646420
00008c  4541502d
000090  5061796c
000094  6f616420
000098  544c5600
                  |L16.156|
00009c  4541502d          DCB      "EAP-PEAPv2: Failed to allocate memory for TLV encapsula"
0000a0  50454150
0000a4  76323a20
0000a8  4661696c
0000ac  65642074
0000b0  6f20616c
0000b4  6c6f6361
0000b8  7465206d
0000bc  656d6f72
0000c0  7920666f
0000c4  7220544c
0000c8  5620656e
0000cc  63617073
0000d0  756c61  
0000d3  74696f6e          DCB      "tion",0
0000d7  00      

                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.eap_peer_peap_register||, CODE, READONLY, ALIGN=2

                  eap_peer_peap_register PROC
;;;1263   
;;;1264   int eap_peer_peap_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1265   {
;;;1266   	struct eap_method *eap;
;;;1267   	int ret;
;;;1268   
;;;1269   	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a313              ADR      r3,|L19.80|
000004  2219              MOVS     r2,#0x19
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;1270   				    EAP_VENDOR_IETF, EAP_TYPE_PEAP, "PEAP");
;;;1271   	if (eap == NULL)
000010  b914              CBNZ     r4,|L19.24|
;;;1272   		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L19.22|
;;;1273   
;;;1274   	eap->init = eap_peap_init;
;;;1275   	eap->deinit = eap_peap_deinit;
;;;1276   	eap->process = eap_peap_process;
;;;1277   	eap->isKeyAvailable = eap_peap_isKeyAvailable;
;;;1278   	eap->getKey = eap_peap_getKey;
;;;1279   	eap->get_status = eap_peap_get_status;
;;;1280   	eap->has_reauth_data = eap_peap_has_reauth_data;
;;;1281   	eap->deinit_for_reauth = eap_peap_deinit_for_reauth;
;;;1282   	eap->init_for_reauth = eap_peap_init_for_reauth;
;;;1283   
;;;1284   	ret = eap_peer_method_register(eap);
;;;1285   	if (ret)
;;;1286   		eap_peer_method_free(eap);
;;;1287   	return ret;
;;;1288   }
000016  bd70              POP      {r4-r6,pc}
                  |L19.24|
000018  480f              LDR      r0,|L19.88|
00001a  60e0              STR      r0,[r4,#0xc]          ;1274
00001c  480f              LDR      r0,|L19.92|
00001e  6120              STR      r0,[r4,#0x10]         ;1275
000020  480f              LDR      r0,|L19.96|
000022  6160              STR      r0,[r4,#0x14]         ;1276
000024  480f              LDR      r0,|L19.100|
000026  61a0              STR      r0,[r4,#0x18]         ;1277
000028  480f              LDR      r0,|L19.104|
00002a  61e0              STR      r0,[r4,#0x1c]         ;1278
00002c  480f              LDR      r0,|L19.108|
00002e  6220              STR      r0,[r4,#0x20]         ;1279
000030  480f              LDR      r0,|L19.112|
000032  6260              STR      r0,[r4,#0x24]         ;1280
000034  480f              LDR      r0,|L19.116|
000036  62a0              STR      r0,[r4,#0x28]         ;1281
000038  480f              LDR      r0,|L19.120|
00003a  62e0              STR      r0,[r4,#0x2c]         ;1282
00003c  4620              MOV      r0,r4                 ;1284
00003e  f7fffffe          BL       eap_peer_method_register
000042  4605              MOV      r5,r0                 ;1284
000044  b115              CBZ      r5,|L19.76|
000046  4620              MOV      r0,r4                 ;1286
000048  f7fffffe          BL       eap_peer_method_free
                  |L19.76|
00004c  4628              MOV      r0,r5                 ;1287
00004e  e7e2              B        |L19.22|
                          ENDP

                  |L19.80|
000050  50454150          DCB      "PEAP",0
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L19.88|
                          DCD      eap_peap_init
                  |L19.92|
                          DCD      eap_peap_deinit
                  |L19.96|
                          DCD      eap_peap_process
                  |L19.100|
                          DCD      eap_peap_isKeyAvailable
                  |L19.104|
                          DCD      eap_peap_getKey
                  |L19.108|
                          DCD      eap_peap_get_status
                  |L19.112|
                          DCD      eap_peap_has_reauth_data
                  |L19.116|
                          DCD      eap_peap_deinit_for_reauth
                  |L19.120|
                          DCD      eap_peap_init_for_reauth

                          AREA ||i.eap_tlv_add_cryptobinding||, CODE, READONLY, ALIGN=2

                  eap_tlv_add_cryptobinding PROC
;;;301    
;;;302    static int eap_tlv_add_cryptobinding(struct eap_sm *sm,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;303    				     struct eap_peap_data *data,
;;;304    				     struct wpabuf *buf)
;;;305    {
000004  b088              SUB      sp,sp,#0x20
000006  4680              MOV      r8,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
;;;306    	u8 *mac;
;;;307    	u8 eap_type = EAP_TYPE_PEAP;
00000c  2019              MOVS     r0,#0x19
00000e  9007              STR      r0,[sp,#0x1c]
;;;308    	const u8 *addr[2];
;;;309    	size_t len[2];
;;;310    	u16 tlv_type;
;;;311    
;;;312    	/* Compound_MAC: HMAC-SHA1-160(cryptobinding TLV | EAP type) */
;;;313    	addr[0] = wpabuf_put(buf, 0);
000010  2100              MOVS     r1,#0
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put
000018  9005              STR      r0,[sp,#0x14]
;;;314    	len[0] = 60;
00001a  203c              MOVS     r0,#0x3c
00001c  9003              STR      r0,[sp,#0xc]
;;;315    	addr[1] = &eap_type;
00001e  a807              ADD      r0,sp,#0x1c
000020  9006              STR      r0,[sp,#0x18]
;;;316    	len[1] = 1;
000022  2001              MOVS     r0,#1
000024  9004              STR      r0,[sp,#0x10]
;;;317    
;;;318    	tlv_type = EAP_TLV_CRYPTO_BINDING_TLV;
000026  260c              MOVS     r6,#0xc
;;;319    	if (data->peap_version >= 2)
000028  6ae0              LDR      r0,[r4,#0x2c]
00002a  2802              CMP      r0,#2
00002c  db01              BLT      |L20.50|
;;;320    		tlv_type |= EAP_TLV_TYPE_MANDATORY;
00002e  f4464600          ORR      r6,r6,#0x8000
                  |L20.50|
;;;321    	wpabuf_put_be16(buf, tlv_type);
000032  4631              MOV      r1,r6
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       wpabuf_put_be16
;;;322    	wpabuf_put_be16(buf, 56);
00003a  2138              MOVS     r1,#0x38
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       wpabuf_put_be16
;;;323    
;;;324    	wpabuf_put_u8(buf, 0); /* Reserved */
000042  2100              MOVS     r1,#0
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       wpabuf_put_u8
;;;325    	wpabuf_put_u8(buf, data->peap_version); /* Version */
00004a  6ae0              LDR      r0,[r4,#0x2c]
00004c  b2c1              UXTB     r1,r0
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       wpabuf_put_u8
;;;326    	wpabuf_put_u8(buf, data->peap_version); /* RecvVersion */
000054  6ae0              LDR      r0,[r4,#0x2c]
000056  b2c1              UXTB     r1,r0
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       wpabuf_put_u8
;;;327    	wpabuf_put_u8(buf, 1); /* SubType: 0 = Request, 1 = Response */
00005e  2101              MOVS     r1,#1
000060  4628              MOV      r0,r5
000062  f7fffffe          BL       wpabuf_put_u8
;;;328    	wpabuf_put_data(buf, data->binding_nonce, 32); /* Nonce */
000066  2220              MOVS     r2,#0x20
000068  f1040178          ADD      r1,r4,#0x78
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       wpabuf_put_data
;;;329    	mac = wpabuf_put(buf, 20); /* Compound_MAC */
000072  2114              MOVS     r1,#0x14
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       wpabuf_put
00007a  4607              MOV      r7,r0
;;;330    	wpa_hexdump(MSG_MSGDUMP, "EAP-PEAP: Compound_MAC CMK", data->cmk, 20);
00007c  2314              MOVS     r3,#0x14
00007e  f10402c0          ADD      r2,r4,#0xc0
000082  a113              ADR      r1,|L20.208|
000084  2000              MOVS     r0,#0
000086  f7fffffe          BL       wpa_hexdump
;;;331    	wpa_hexdump(MSG_MSGDUMP, "EAP-PEAP: Compound_MAC data 1",
00008a  a118              ADR      r1,|L20.236|
00008c  2000              MOVS     r0,#0
00008e  9b03              LDR      r3,[sp,#0xc]
000090  9a05              LDR      r2,[sp,#0x14]
000092  f7fffffe          BL       wpa_hexdump
;;;332    		    addr[0], len[0]);
;;;333    	wpa_hexdump(MSG_MSGDUMP, "EAP-PEAP: Compound_MAC data 2",
000096  a11d              ADR      r1,|L20.268|
000098  2000              MOVS     r0,#0
00009a  9b04              LDR      r3,[sp,#0x10]
00009c  9a06              LDR      r2,[sp,#0x18]
00009e  f7fffffe          BL       wpa_hexdump
;;;334    		    addr[1], len[1]);
;;;335    	hmac_sha1_vector(data->cmk, 20, 2, addr, len, mac);
0000a2  aa03              ADD      r2,sp,#0xc
0000a4  ab05              ADD      r3,sp,#0x14
0000a6  e9cd2700          STRD     r2,r7,[sp,#0]
0000aa  2202              MOVS     r2,#2
0000ac  2114              MOVS     r1,#0x14
0000ae  f10400c0          ADD      r0,r4,#0xc0
0000b2  f7fffffe          BL       hmac_sha1_vector
;;;336    	wpa_hexdump(MSG_MSGDUMP, "EAP-PEAP: Compound_MAC", mac, SHA1_MAC_LEN);
0000b6  2314              MOVS     r3,#0x14
0000b8  463a              MOV      r2,r7
0000ba  a11c              ADR      r1,|L20.300|
0000bc  2000              MOVS     r0,#0
0000be  f7fffffe          BL       wpa_hexdump
;;;337    	data->crypto_binding_used = 1;
0000c2  2001              MOVS     r0,#1
0000c4  6760              STR      r0,[r4,#0x74]
;;;338    
;;;339    	return 0;
0000c6  2000              MOVS     r0,#0
;;;340    }
0000c8  b008              ADD      sp,sp,#0x20
0000ca  e8bd81f0          POP      {r4-r8,pc}
;;;341    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L20.208|
0000d0  4541502d          DCB      "EAP-PEAP: Compound_MAC CMK",0
0000d4  50454150
0000d8  3a20436f
0000dc  6d706f75
0000e0  6e645f4d
0000e4  41432043
0000e8  4d4b00  
0000eb  00                DCB      0
                  |L20.236|
0000ec  4541502d          DCB      "EAP-PEAP: Compound_MAC data 1",0
0000f0  50454150
0000f4  3a20436f
0000f8  6d706f75
0000fc  6e645f4d
000100  41432064
000104  61746120
000108  3100    
00010a  00                DCB      0
00010b  00                DCB      0
                  |L20.268|
00010c  4541502d          DCB      "EAP-PEAP: Compound_MAC data 2",0
000110  50454150
000114  3a20436f
000118  6d706f75
00011c  6e645f4d
000120  41432064
000124  61746120
000128  3200    
00012a  00                DCB      0
00012b  00                DCB      0
                  |L20.300|
00012c  4541502d          DCB      "EAP-PEAP: Compound_MAC",0
000130  50454150
000134  3a20436f
000138  6d706f75
00013c  6e645f4d
000140  414300  
000143  00                DCB      0

                          AREA ||i.eap_tlv_build_nak||, CODE, READONLY, ALIGN=1

                  eap_tlv_build_nak PROC
;;;201     */
;;;202    static struct wpabuf * eap_tlv_build_nak(int id, u16 nak_type)
000000  b5f8              PUSH     {r3-r7,lr}
;;;203    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;204    	struct wpabuf *msg;
;;;205    
;;;206    	msg = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_TLV, 10,
000006  b2e3              UXTB     r3,r4
000008  9300              STR      r3,[sp,#0]
00000a  2302              MOVS     r3,#2
00000c  220a              MOVS     r2,#0xa
00000e  2121              MOVS     r1,#0x21
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       eap_msg_alloc
000016  4605              MOV      r5,r0
;;;207    			    EAP_CODE_RESPONSE, id);
;;;208    	if (msg == NULL)
000018  b90d              CBNZ     r5,|L21.30|
;;;209    		return NULL;
00001a  2000              MOVS     r0,#0
                  |L21.28|
;;;210    
;;;211    	wpabuf_put_u8(msg, 0x80); /* Mandatory */
;;;212    	wpabuf_put_u8(msg, EAP_TLV_NAK_TLV);
;;;213    	wpabuf_put_be16(msg, 6); /* Length */
;;;214    	wpabuf_put_be32(msg, 0); /* Vendor-Id */
;;;215    	wpabuf_put_be16(msg, nak_type); /* NAK-Type */
;;;216    
;;;217    	return msg;
;;;218    }
00001c  bdf8              POP      {r3-r7,pc}
                  |L21.30|
00001e  2180              MOVS     r1,#0x80              ;211
000020  4628              MOV      r0,r5                 ;211
000022  f7fffffe          BL       wpabuf_put_u8
000026  2104              MOVS     r1,#4                 ;212
000028  4628              MOV      r0,r5                 ;212
00002a  f7fffffe          BL       wpabuf_put_u8
00002e  2106              MOVS     r1,#6                 ;213
000030  4628              MOV      r0,r5                 ;213
000032  f7fffffe          BL       wpabuf_put_be16
000036  2100              MOVS     r1,#0                 ;214
000038  4628              MOV      r0,r5                 ;214
00003a  f7fffffe          BL       wpabuf_put_be32
00003e  4631              MOV      r1,r6                 ;215
000040  4628              MOV      r0,r5                 ;215
000042  f7fffffe          BL       wpabuf_put_be16
000046  4628              MOV      r0,r5                 ;217
000048  e7e8              B        |L21.28|
;;;219    
                          ENDP


                          AREA ||i.eap_tlv_build_result||, CODE, READONLY, ALIGN=1

                  eap_tlv_build_result PROC
;;;351     */
;;;352    static struct wpabuf * eap_tlv_build_result(struct eap_sm *sm,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;353    					    struct eap_peap_data *data,
;;;354    					    int crypto_tlv_used,
;;;355    					    int id, u16 status)
;;;356    {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;357    	struct wpabuf *msg;
;;;358    	size_t len;
;;;359    
;;;360    	if (data->crypto_binding == NO_BINDING)
000010  f8970070          LDRB     r0,[r7,#0x70]
000014  b900              CBNZ     r0,|L22.24|
;;;361    		crypto_tlv_used = 0;
000016  2500              MOVS     r5,#0
                  |L22.24|
;;;362    
;;;363    	len = 6;
000018  2606              MOVS     r6,#6
;;;364    	if (crypto_tlv_used)
00001a  b105              CBZ      r5,|L22.30|
;;;365    		len += 60; /* Cryptobinding TLV */
00001c  363c              ADDS     r6,r6,#0x3c
                  |L22.30|
;;;366    	msg = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_TLV, len,
00001e  f00803ff          AND      r3,r8,#0xff
000022  9300              STR      r3,[sp,#0]
000024  2302              MOVS     r3,#2
000026  4632              MOV      r2,r6
000028  2121              MOVS     r1,#0x21
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       eap_msg_alloc
000030  4604              MOV      r4,r0
;;;367    			    EAP_CODE_RESPONSE, id);
;;;368    	if (msg == NULL)
000032  b914              CBNZ     r4,|L22.58|
;;;369    		return NULL;
000034  2000              MOVS     r0,#0
                  |L22.54|
;;;370    
;;;371    	wpabuf_put_u8(msg, 0x80); /* Mandatory */
;;;372    	wpabuf_put_u8(msg, EAP_TLV_RESULT_TLV);
;;;373    	wpabuf_put_be16(msg, 2); /* Length */
;;;374    	wpabuf_put_be16(msg, status); /* Status */
;;;375    
;;;376    	if (crypto_tlv_used && eap_tlv_add_cryptobinding(sm, data, msg)) {
;;;377    		wpabuf_free(msg);
;;;378    		return NULL;
;;;379    	}
;;;380    
;;;381    	return msg;
;;;382    }
000036  e8bd8ff8          POP      {r3-r11,pc}
                  |L22.58|
00003a  2180              MOVS     r1,#0x80              ;371
00003c  4620              MOV      r0,r4                 ;371
00003e  f7fffffe          BL       wpabuf_put_u8
000042  2103              MOVS     r1,#3                 ;372
000044  4620              MOV      r0,r4                 ;372
000046  f7fffffe          BL       wpabuf_put_u8
00004a  2102              MOVS     r1,#2                 ;373
00004c  4620              MOV      r0,r4                 ;373
00004e  f7fffffe          BL       wpabuf_put_be16
000052  4651              MOV      r1,r10                ;374
000054  4620              MOV      r0,r4                 ;374
000056  f7fffffe          BL       wpabuf_put_be16
00005a  b155              CBZ      r5,|L22.114|
00005c  4622              MOV      r2,r4                 ;376
00005e  4639              MOV      r1,r7                 ;376
000060  4648              MOV      r0,r9                 ;376
000062  f7fffffe          BL       eap_tlv_add_cryptobinding
000066  b120              CBZ      r0,|L22.114|
000068  4620              MOV      r0,r4                 ;377
00006a  f7fffffe          BL       wpabuf_free
00006e  2000              MOVS     r0,#0                 ;378
000070  e7e1              B        |L22.54|
                  |L22.114|
000072  4620              MOV      r0,r4                 ;381
000074  e7df              B        |L22.54|
;;;383    
                          ENDP


                          AREA ||i.eap_tlv_process||, CODE, READONLY, ALIGN=2

                  eap_tlv_process PROC
;;;459     */
;;;460    static int eap_tlv_process(struct eap_sm *sm, struct eap_peap_data *data,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;461    			   struct eap_method_ret *ret,
;;;462    			   const struct wpabuf *req, struct wpabuf **resp,
;;;463    			   int force_failure)
;;;464    {
000004  b087              SUB      sp,sp,#0x1c
000006  4616              MOV      r6,r2
;;;465    	size_t left, tlv_len;
;;;466    	const u8 *pos;
;;;467    	const u8 *result_tlv = NULL, *crypto_tlv = NULL;
000008  2700              MOVS     r7,#0
00000a  46b8              MOV      r8,r7
;;;468    	size_t result_tlv_len = 0, crypto_tlv_len = 0;
00000c  2000              MOVS     r0,#0
00000e  9005              STR      r0,[sp,#0x14]
000010  9004              STR      r0,[sp,#0x10]
;;;469    	int tlv_type, mandatory;
;;;470    
;;;471    	/* Parse TLVs */
;;;472    	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_TLV, req, &left);
000012  ab06              ADD      r3,sp,#0x18
000014  2121              MOVS     r1,#0x21
000016  9a0a              LDR      r2,[sp,#0x28]
000018  f7fffffe          BL       eap_hdr_validate
00001c  4604              MOV      r4,r0
;;;473    	if (pos == NULL)
00001e  b91c              CBNZ     r4,|L23.40|
;;;474    		return -1;
000020  1e78              SUBS     r0,r7,#1
                  |L23.34|
;;;475    	wpa_hexdump(MSG_DEBUG, "EAP-TLV: Received TLVs", pos, left);
;;;476    	while (left >= 4) {
;;;477    		mandatory = !!(pos[0] & 0x80);
;;;478    		tlv_type = WPA_GET_BE16(pos) & 0x3fff;
;;;479    		pos += 2;
;;;480    		tlv_len = WPA_GET_BE16(pos);
;;;481    		pos += 2;
;;;482    		left -= 4;
;;;483    		if (tlv_len > left) {
;;;484    			wpa_printf(MSG_DEBUG, "EAP-TLV: TLV underrun "
;;;485    				   "(tlv_len=%lu left=%lu)",
;;;486    				   (unsigned long) tlv_len,
;;;487    				   (unsigned long) left);
;;;488    			return -1;
;;;489    		}
;;;490    		switch (tlv_type) {
;;;491    		case EAP_TLV_RESULT_TLV:
;;;492    			result_tlv = pos;
;;;493    			result_tlv_len = tlv_len;
;;;494    			break;
;;;495    		case EAP_TLV_CRYPTO_BINDING_TLV:
;;;496    			crypto_tlv = pos;
;;;497    			crypto_tlv_len = tlv_len;
;;;498    			break;
;;;499    		default:
;;;500    			wpa_printf(MSG_DEBUG, "EAP-TLV: Unsupported TLV Type "
;;;501    				   "%d%s", tlv_type,
;;;502    				   mandatory ? " (mandatory)" : "");
;;;503    			if (mandatory) {
;;;504    				/* NAK TLV and ignore all TLVs in this packet.
;;;505    				 */
;;;506    				*resp = eap_tlv_build_nak(eap_get_id(req),
;;;507    							  tlv_type);
;;;508    				return *resp == NULL ? -1 : 0;
;;;509    			}
;;;510    			/* Ignore this TLV, but process other TLVs */
;;;511    			break;
;;;512    		}
;;;513    
;;;514    		pos += tlv_len;
;;;515    		left -= tlv_len;
;;;516    	}
;;;517    	if (left) {
;;;518    		wpa_printf(MSG_DEBUG, "EAP-TLV: Last TLV too short in "
;;;519    			   "Request (left=%lu)", (unsigned long) left);
;;;520    		return -1;
;;;521    	}
;;;522    
;;;523    	/* Process supported TLVs */
;;;524    	if (crypto_tlv && data->crypto_binding != NO_BINDING) {
;;;525    		wpa_hexdump(MSG_DEBUG, "EAP-PEAP: Cryptobinding TLV",
;;;526    			    crypto_tlv, crypto_tlv_len);
;;;527    		if (eap_tlv_validate_cryptobinding(sm, data, crypto_tlv - 4,
;;;528    						   crypto_tlv_len + 4) < 0) {
;;;529    			if (result_tlv == NULL)
;;;530    				return -1;
;;;531    			force_failure = 1;
;;;532    			crypto_tlv = NULL; /* do not include Cryptobinding TLV
;;;533    					    * in response, if the received
;;;534    					    * cryptobinding was invalid. */
;;;535    		}
;;;536    	} else if (!crypto_tlv && data->crypto_binding == REQUIRE_BINDING) {
;;;537    		wpa_printf(MSG_DEBUG, "EAP-PEAP: No cryptobinding TLV");
;;;538    		return -1;
;;;539    	}
;;;540    
;;;541    	if (result_tlv) {
;;;542    		int status, resp_status;
;;;543    		wpa_hexdump(MSG_DEBUG, "EAP-TLV: Result TLV",
;;;544    			    result_tlv, result_tlv_len);
;;;545    		if (result_tlv_len < 2) {
;;;546    			wpa_printf(MSG_INFO, "EAP-TLV: Too short Result TLV "
;;;547    				   "(len=%lu)",
;;;548    				   (unsigned long) result_tlv_len);
;;;549    			return -1;
;;;550    		}
;;;551    		status = WPA_GET_BE16(result_tlv);
;;;552    		if (status == EAP_TLV_RESULT_SUCCESS) {
;;;553    			wpa_printf(MSG_INFO, "EAP-TLV: TLV Result - Success "
;;;554    				   "- EAP-TLV/Phase2 Completed");
;;;555    			if (force_failure) {
;;;556    				wpa_printf(MSG_INFO, "EAP-TLV: Earlier failure"
;;;557    					   " - force failed Phase 2");
;;;558    				resp_status = EAP_TLV_RESULT_FAILURE;
;;;559    				ret->decision = DECISION_FAIL;
;;;560    			} else {
;;;561    				resp_status = EAP_TLV_RESULT_SUCCESS;
;;;562    				ret->decision = DECISION_UNCOND_SUCC;
;;;563    			}
;;;564    		} else if (status == EAP_TLV_RESULT_FAILURE) {
;;;565    			wpa_printf(MSG_INFO, "EAP-TLV: TLV Result - Failure");
;;;566    			resp_status = EAP_TLV_RESULT_FAILURE;
;;;567    			ret->decision = DECISION_FAIL;
;;;568    		} else {
;;;569    			wpa_printf(MSG_INFO, "EAP-TLV: Unknown TLV Result "
;;;570    				   "Status %d", status);
;;;571    			resp_status = EAP_TLV_RESULT_FAILURE;
;;;572    			ret->decision = DECISION_FAIL;
;;;573    		}
;;;574    		ret->methodState = METHOD_DONE;
;;;575    
;;;576    		*resp = eap_tlv_build_result(sm, data, crypto_tlv != NULL,
;;;577    					     eap_get_id(req), resp_status);
;;;578    	}
;;;579    
;;;580    	return 0;
;;;581    }
000022  b00b              ADD      sp,sp,#0x2c
000024  e8bd8ff0          POP      {r4-r11,pc}
                  |L23.40|
000028  4622              MOV      r2,r4                 ;475
00002a  a177              ADR      r1,|L23.520|
00002c  2000              MOVS     r0,#0                 ;475
00002e  9b06              LDR      r3,[sp,#0x18]         ;475
000030  f7fffffe          BL       wpa_hexdump
000034  e04f              B        |L23.214|
                  |L23.54|
000036  7820              LDRB     r0,[r4,#0]            ;477
000038  09c0              LSRS     r0,r0,#7              ;477
00003a  9003              STR      r0,[sp,#0xc]          ;477
00003c  7860              LDRB     r0,[r4,#1]            ;478
00003e  7821              LDRB     r1,[r4,#0]            ;478
000040  ea402001          ORR      r0,r0,r1,LSL #8       ;478
000044  f3c00b0d          UBFX     r11,r0,#0,#14         ;478
000048  1ca4              ADDS     r4,r4,#2              ;479
00004a  7860              LDRB     r0,[r4,#1]            ;480
00004c  7821              LDRB     r1,[r4,#0]            ;480
00004e  ea402501          ORR      r5,r0,r1,LSL #8       ;480
000052  1ca4              ADDS     r4,r4,#2              ;481
000054  9806              LDR      r0,[sp,#0x18]         ;482
000056  1f00              SUBS     r0,r0,#4              ;482
000058  9006              STR      r0,[sp,#0x18]         ;482
00005a  9806              LDR      r0,[sp,#0x18]         ;483
00005c  4285              CMP      r5,r0                 ;483
00005e  d908              BLS      |L23.114|
000060  462a              MOV      r2,r5                 ;484
000062  a16f              ADR      r1,|L23.544|
000064  2000              MOVS     r0,#0                 ;484
000066  9b06              LDR      r3,[sp,#0x18]         ;484
000068  f7fffffe          BL       wpa_printf
00006c  f04f30ff          MOV      r0,#0xffffffff        ;488
000070  e7d7              B        |L23.34|
                  |L23.114|
000072  f1bb0f03          CMP      r11,#3                ;490
000076  d003              BEQ      |L23.128|
000078  f1bb0f0c          CMP      r11,#0xc              ;490
00007c  d106              BNE      |L23.140|
00007e  e002              B        |L23.134|
                  |L23.128|
000080  4627              MOV      r7,r4                 ;492
000082  9505              STR      r5,[sp,#0x14]         ;493
000084  e022              B        |L23.204|
                  |L23.134|
000086  46a0              MOV      r8,r4                 ;496
000088  9504              STR      r5,[sp,#0x10]         ;497
00008a  e01f              B        |L23.204|
                  |L23.140|
00008c  9803              LDR      r0,[sp,#0xc]          ;500
00008e  b108              CBZ      r0,|L23.148|
000090  a06f              ADR      r0,|L23.592|
000092  e000              B        |L23.150|
                  |L23.148|
000094  a06d              ADR      r0,|L23.588|
                  |L23.150|
000096  4603              MOV      r3,r0                 ;502
000098  465a              MOV      r2,r11                ;502
00009a  a171              ADR      r1,|L23.608|
00009c  2000              MOVS     r0,#0                 ;502
00009e  f7fffffe          BL       wpa_printf
0000a2  9803              LDR      r0,[sp,#0xc]          ;503
0000a4  b188              CBZ      r0,|L23.202|
0000a6  980a              LDR      r0,[sp,#0x28]         ;506
0000a8  f7fffffe          BL       eap_get_id
0000ac  4681              MOV      r9,r0                 ;506
0000ae  fa1ff18b          UXTH     r1,r11                ;506
0000b2  f7fffffe          BL       eap_tlv_build_nak
0000b6  9914              LDR      r1,[sp,#0x50]         ;506
0000b8  6008              STR      r0,[r1,#0]            ;506
0000ba  9814              LDR      r0,[sp,#0x50]         ;508
0000bc  6800              LDR      r0,[r0,#0]            ;508
0000be  b910              CBNZ     r0,|L23.198|
0000c0  f04f30ff          MOV      r0,#0xffffffff        ;508
0000c4  e7ad              B        |L23.34|
                  |L23.198|
0000c6  2000              MOVS     r0,#0                 ;508
0000c8  e7ab              B        |L23.34|
                  |L23.202|
0000ca  bf00              NOP                            ;511
                  |L23.204|
0000cc  bf00              NOP                            ;494
0000ce  442c              ADD      r4,r4,r5              ;514
0000d0  9806              LDR      r0,[sp,#0x18]         ;515
0000d2  1b40              SUBS     r0,r0,r5              ;515
0000d4  9006              STR      r0,[sp,#0x18]         ;515
                  |L23.214|
0000d6  9806              LDR      r0,[sp,#0x18]         ;476
0000d8  2804              CMP      r0,#4                 ;476
0000da  d2ac              BCS      |L23.54|
0000dc  9806              LDR      r0,[sp,#0x18]         ;517
0000de  b138              CBZ      r0,|L23.240|
0000e0  a168              ADR      r1,|L23.644|
0000e2  2000              MOVS     r0,#0                 ;518
0000e4  9a06              LDR      r2,[sp,#0x18]         ;518
0000e6  f7fffffe          BL       wpa_printf
0000ea  f04f30ff          MOV      r0,#0xffffffff        ;520
0000ee  e798              B        |L23.34|
                  |L23.240|
0000f0  f1b80f00          CMP      r8,#0                 ;524
0000f4  d01c              BEQ      |L23.304|
0000f6  9808              LDR      r0,[sp,#0x20]         ;524
0000f8  f8900070          LDRB     r0,[r0,#0x70]         ;524
0000fc  b1c0              CBZ      r0,|L23.304|
0000fe  4642              MOV      r2,r8                 ;525
000100  a16d              ADR      r1,|L23.696|
000102  2000              MOVS     r0,#0                 ;525
000104  9b04              LDR      r3,[sp,#0x10]         ;525
000106  f7fffffe          BL       wpa_hexdump
00010a  f1a80204          SUB      r2,r8,#4              ;527
00010e  9b04              LDR      r3,[sp,#0x10]         ;527
000110  1d1b              ADDS     r3,r3,#4              ;527
000112  e9dd0107          LDRD     r0,r1,[sp,#0x1c]      ;527
000116  f7fffffe          BL       eap_tlv_validate_cryptobinding
00011a  2800              CMP      r0,#0                 ;527
00011c  da17              BGE      |L23.334|
00011e  b917              CBNZ     r7,|L23.294|
000120  f04f30ff          MOV      r0,#0xffffffff        ;530
000124  e77d              B        |L23.34|
                  |L23.294|
000126  2001              MOVS     r0,#1                 ;531
000128  9015              STR      r0,[sp,#0x54]         ;531
00012a  f04f0800          MOV      r8,#0                 ;532
00012e  e00e              B        |L23.334|
                  |L23.304|
000130  f1b80f00          CMP      r8,#0                 ;536
000134  d10b              BNE      |L23.334|
000136  9808              LDR      r0,[sp,#0x20]         ;536
000138  f8900070          LDRB     r0,[r0,#0x70]         ;536
00013c  2802              CMP      r0,#2                 ;536
00013e  d106              BNE      |L23.334|
000140  a164              ADR      r1,|L23.724|
000142  2000              MOVS     r0,#0                 ;537
000144  f7fffffe          BL       wpa_printf
000148  f04f30ff          MOV      r0,#0xffffffff        ;538
00014c  e769              B        |L23.34|
                  |L23.334|
00014e  b3bf              CBZ      r7,|L23.448|
000150  463a              MOV      r2,r7                 ;543
000152  a168              ADR      r1,|L23.756|
000154  2000              MOVS     r0,#0                 ;543
000156  9b05              LDR      r3,[sp,#0x14]         ;543
000158  f7fffffe          BL       wpa_hexdump
00015c  9805              LDR      r0,[sp,#0x14]         ;545
00015e  2802              CMP      r0,#2                 ;545
000160  d207              BCS      |L23.370|
000162  a169              ADR      r1,|L23.776|
000164  2000              MOVS     r0,#0                 ;546
000166  9a05              LDR      r2,[sp,#0x14]         ;546
000168  f7fffffe          BL       wpa_printf
00016c  f04f30ff          MOV      r0,#0xffffffff        ;549
000170  e757              B        |L23.34|
                  |L23.370|
000172  7878              LDRB     r0,[r7,#1]            ;551
000174  7839              LDRB     r1,[r7,#0]            ;551
000176  ea402901          ORR      r9,r0,r1,LSL #8       ;551
00017a  f1b90f01          CMP      r9,#1                 ;552
00017e  d113              BNE      |L23.424|
000180  a16b              ADR      r1,|L23.816|
000182  2000              MOVS     r0,#0                 ;553
000184  f7fffffe          BL       wpa_printf
000188  9815              LDR      r0,[sp,#0x54]         ;555
00018a  b140              CBZ      r0,|L23.414|
00018c  a177              ADR      r1,|L23.876|
00018e  2000              MOVS     r0,#0                 ;556
000190  f7fffffe          BL       wpa_printf
000194  f04f0a02          MOV      r10,#2                ;558
000198  2000              MOVS     r0,#0                 ;559
00019a  7170              STRB     r0,[r6,#5]            ;559
00019c  e01a              B        |L23.468|
                  |L23.414|
00019e  f04f0a01          MOV      r10,#1                ;561
0001a2  2002              MOVS     r0,#2                 ;562
0001a4  7170              STRB     r0,[r6,#5]            ;562
0001a6  e015              B        |L23.468|
                  |L23.424|
0001a8  f1b90f02          CMP      r9,#2                 ;564
0001ac  d109              BNE      |L23.450|
0001ae  a17b              ADR      r1,|L23.924|
0001b0  2000              MOVS     r0,#0                 ;565
0001b2  f7fffffe          BL       wpa_printf
0001b6  f04f0a02          MOV      r10,#2                ;566
0001ba  2000              MOVS     r0,#0                 ;567
0001bc  7170              STRB     r0,[r6,#5]            ;567
0001be  e009              B        |L23.468|
                  |L23.448|
0001c0  e020              B        |L23.516|
                  |L23.450|
0001c2  464a              MOV      r2,r9                 ;569
0001c4  a17d              ADR      r1,|L23.956|
0001c6  2000              MOVS     r0,#0                 ;569
0001c8  f7fffffe          BL       wpa_printf
0001cc  f04f0a02          MOV      r10,#2                ;571
0001d0  2000              MOVS     r0,#0                 ;572
0001d2  7170              STRB     r0,[r6,#5]            ;572
                  |L23.468|
0001d4  2004              MOVS     r0,#4                 ;574
0001d6  7130              STRB     r0,[r6,#4]            ;574
0001d8  980a              LDR      r0,[sp,#0x28]         ;576
0001da  f7fffffe          BL       eap_get_id
0001de  fa1ff38a          UXTH     r3,r10                ;576
0001e2  9300              STR      r3,[sp,#0]            ;576
0001e4  9002              STR      r0,[sp,#8]            ;576
0001e6  f1b80f00          CMP      r8,#0                 ;576
0001ea  d001              BEQ      |L23.496|
0001ec  2001              MOVS     r0,#1                 ;576
0001ee  e000              B        |L23.498|
                  |L23.496|
0001f0  2000              MOVS     r0,#0                 ;576
                  |L23.498|
0001f2  4602              MOV      r2,r0                 ;576
0001f4  9b02              LDR      r3,[sp,#8]            ;576
0001f6  e9dd0107          LDRD     r0,r1,[sp,#0x1c]      ;576
0001fa  f7fffffe          BL       eap_tlv_build_result
0001fe  9914              LDR      r1,[sp,#0x50]         ;576
000200  6008              STR      r0,[r1,#0]            ;576
000202  bf00              NOP                            ;578
                  |L23.516|
000204  2000              MOVS     r0,#0                 ;580
000206  e70c              B        |L23.34|
;;;582    
                          ENDP

                  |L23.520|
000208  4541502d          DCB      "EAP-TLV: Received TLVs",0
00020c  544c563a
000210  20526563
000214  65697665
000218  6420544c
00021c  567300  
00021f  00                DCB      0
                  |L23.544|
000220  4541502d          DCB      "EAP-TLV: TLV underrun (tlv_len=%lu left=%lu)"
000224  544c563a
000228  20544c56
00022c  20756e64
000230  65727275
000234  6e202874
000238  6c765f6c
00023c  656e3d25
000240  6c75206c
000244  6566743d
000248  256c7529
                  |L23.588|
00024c  00                DCB      0
00024d  00                DCB      0
00024e  00                DCB      0
00024f  00                DCB      0
                  |L23.592|
000250  20286d61          DCB      " (mandatory)",0
000254  6e646174
000258  6f727929
00025c  00      
00025d  00                DCB      0
00025e  00                DCB      0
00025f  00                DCB      0
                  |L23.608|
000260  4541502d          DCB      "EAP-TLV: Unsupported TLV Type %d%s",0
000264  544c563a
000268  20556e73
00026c  7570706f
000270  72746564
000274  20544c56
000278  20547970
00027c  65202564
000280  257300  
000283  00                DCB      0
                  |L23.644|
000284  4541502d          DCB      "EAP-TLV: Last TLV too short in Request (left=%lu)",0
000288  544c563a
00028c  204c6173
000290  7420544c
000294  5620746f
000298  6f207368
00029c  6f727420
0002a0  696e2052
0002a4  65717565
0002a8  73742028
0002ac  6c656674
0002b0  3d256c75
0002b4  2900    
0002b6  00                DCB      0
0002b7  00                DCB      0
                  |L23.696|
0002b8  4541502d          DCB      "EAP-PEAP: Cryptobinding TLV",0
0002bc  50454150
0002c0  3a204372
0002c4  7970746f
0002c8  62696e64
0002cc  696e6720
0002d0  544c5600
                  |L23.724|
0002d4  4541502d          DCB      "EAP-PEAP: No cryptobinding TLV",0
0002d8  50454150
0002dc  3a204e6f
0002e0  20637279
0002e4  70746f62
0002e8  696e6469
0002ec  6e672054
0002f0  4c5600  
0002f3  00                DCB      0
                  |L23.756|
0002f4  4541502d          DCB      "EAP-TLV: Result TLV",0
0002f8  544c563a
0002fc  20526573
000300  756c7420
000304  544c5600
                  |L23.776|
000308  4541502d          DCB      "EAP-TLV: Too short Result TLV (len=%lu)",0
00030c  544c563a
000310  20546f6f
000314  2073686f
000318  72742052
00031c  6573756c
000320  7420544c
000324  5620286c
000328  656e3d25
00032c  6c752900
                  |L23.816|
000330  4541502d          DCB      "EAP-TLV: TLV Result - Success - EAP-TLV/Phase2 Complete"
000334  544c563a
000338  20544c56
00033c  20526573
000340  756c7420
000344  2d205375
000348  63636573
00034c  73202d20
000350  4541502d
000354  544c562f
000358  50686173
00035c  65322043
000360  6f6d706c
000364  657465  
000367  6400              DCB      "d",0
000369  00                DCB      0
00036a  00                DCB      0
00036b  00                DCB      0
                  |L23.876|
00036c  4541502d          DCB      "EAP-TLV: Earlier failure - force failed Phase 2",0
000370  544c563a
000374  20456172
000378  6c696572
00037c  20666169
000380  6c757265
000384  202d2066
000388  6f726365
00038c  20666169
000390  6c656420
000394  50686173
000398  65203200
                  |L23.924|
00039c  4541502d          DCB      "EAP-TLV: TLV Result - Failure",0
0003a0  544c563a
0003a4  20544c56
0003a8  20526573
0003ac  756c7420
0003b0  2d204661
0003b4  696c7572
0003b8  6500    
0003ba  00                DCB      0
0003bb  00                DCB      0
                  |L23.956|
0003bc  4541502d          DCB      "EAP-TLV: Unknown TLV Result Status %d",0
0003c0  544c563a
0003c4  20556e6b
0003c8  6e6f776e
0003cc  20544c56
0003d0  20526573
0003d4  756c7420
0003d8  53746174
0003dc  75732025
0003e0  6400    
0003e2  00                DCB      0
0003e3  00                DCB      0

                          AREA ||i.eap_tlv_validate_cryptobinding||, CODE, READONLY, ALIGN=2

                  eap_tlv_validate_cryptobinding PROC
;;;384    
;;;385    static int eap_tlv_validate_cryptobinding(struct eap_sm *sm,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;386    					  struct eap_peap_data *data,
;;;387    					  const u8 *crypto_tlv,
;;;388    					  size_t crypto_tlv_len)
;;;389    {
000004  b096              SUB      sp,sp,#0x58
000006  4680              MOV      r8,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
;;;390    	u8 buf[61], mac[SHA1_MAC_LEN];
;;;391    	const u8 *pos;
;;;392    
;;;393    	if (eap_peap_derive_cmk(sm, data) < 0) {
00000e  4629              MOV      r1,r5
000010  4640              MOV      r0,r8
000012  f7fffffe          BL       eap_peap_derive_cmk
000016  2800              CMP      r0,#0
000018  da08              BGE      |L24.44|
;;;394    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Could not derive CMK");
00001a  a137              ADR      r1,|L24.248|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       wpa_printf
;;;395    		return -1;
000022  f04f30ff          MOV      r0,#0xffffffff
                  |L24.38|
;;;396    	}
;;;397    
;;;398    	if (crypto_tlv_len != 4 + 56) {
;;;399    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Invalid cryptobinding TLV "
;;;400    			   "length %d", (int) crypto_tlv_len);
;;;401    		return -1;
;;;402    	}
;;;403    
;;;404    	pos = crypto_tlv;
;;;405    	pos += 4; /* TLV header */
;;;406    	if (pos[1] != data->peap_version) {
;;;407    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Cryptobinding TLV Version "
;;;408    			   "mismatch (was %d; expected %d)",
;;;409    			   pos[1], data->peap_version);
;;;410    		return -1;
;;;411    	}
;;;412    
;;;413    	if (pos[3] != 0) {
;;;414    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Unexpected Cryptobinding TLV "
;;;415    			   "SubType %d", pos[3]);
;;;416    		return -1;
;;;417    	}
;;;418    	pos += 4;
;;;419    	os_memcpy(data->binding_nonce, pos, 32);
;;;420    	pos += 32; /* Nonce */
;;;421    
;;;422    	/* Compound_MAC: HMAC-SHA1-160(cryptobinding TLV | EAP type) */
;;;423    	os_memcpy(buf, crypto_tlv, 60);
;;;424    	os_memset(buf + 4 + 4 + 32, 0, 20); /* Compound_MAC */
;;;425    	buf[60] = EAP_TYPE_PEAP;
;;;426    	wpa_hexdump(MSG_DEBUG, "EAP-PEAP: Compound_MAC data",
;;;427    		    buf, sizeof(buf));
;;;428    	hmac_sha1(data->cmk, 20, buf, sizeof(buf), mac);
;;;429    
;;;430    	if (os_memcmp(mac, pos, SHA1_MAC_LEN) != 0) {
;;;431    		wpa_printf(MSG_DEBUG, "EAP-PEAP: Invalid Compound_MAC in "
;;;432    			   "cryptobinding TLV");
;;;433    		wpa_hexdump(MSG_DEBUG, "EAP-PEAP: Received MAC",
;;;434    			    pos, SHA1_MAC_LEN);
;;;435    		wpa_hexdump(MSG_DEBUG, "EAP-PEAP: Expected MAC",
;;;436    			    mac, SHA1_MAC_LEN);
;;;437    		return -1;
;;;438    	}
;;;439    
;;;440    	wpa_printf(MSG_DEBUG, "EAP-PEAP: Valid cryptobinding TLV received");
;;;441    
;;;442    	return 0;
;;;443    }
000026  b016              ADD      sp,sp,#0x58
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L24.44|
00002c  2f3c              CMP      r7,#0x3c              ;398
00002e  d007              BEQ      |L24.64|
000030  463a              MOV      r2,r7                 ;399
000032  a139              ADR      r1,|L24.280|
000034  2000              MOVS     r0,#0                 ;399
000036  f7fffffe          BL       wpa_printf
00003a  f04f30ff          MOV      r0,#0xffffffff        ;401
00003e  e7f2              B        |L24.38|
                  |L24.64|
000040  4634              MOV      r4,r6                 ;404
000042  1d24              ADDS     r4,r4,#4              ;405
000044  7860              LDRB     r0,[r4,#1]            ;406
000046  6ae9              LDR      r1,[r5,#0x2c]         ;406
000048  4288              CMP      r0,r1                 ;406
00004a  d008              BEQ      |L24.94|
00004c  7862              LDRB     r2,[r4,#1]            ;407
00004e  493e              LDR      r1,|L24.328|
000050  2000              MOVS     r0,#0                 ;407
000052  6aeb              LDR      r3,[r5,#0x2c]         ;407
000054  f7fffffe          BL       wpa_printf
000058  f04f30ff          MOV      r0,#0xffffffff        ;410
00005c  e7e3              B        |L24.38|
                  |L24.94|
00005e  78e0              LDRB     r0,[r4,#3]            ;413
000060  b138              CBZ      r0,|L24.114|
000062  78e2              LDRB     r2,[r4,#3]            ;414
000064  a139              ADR      r1,|L24.332|
000066  2000              MOVS     r0,#0                 ;414
000068  f7fffffe          BL       wpa_printf
00006c  f04f30ff          MOV      r0,#0xffffffff        ;416
000070  e7d9              B        |L24.38|
                  |L24.114|
000072  1d24              ADDS     r4,r4,#4              ;418
000074  2220              MOVS     r2,#0x20              ;419
000076  4621              MOV      r1,r4                 ;419
000078  f1050078          ADD      r0,r5,#0x78           ;419
00007c  f7fffffe          BL       os_memcpy
000080  3420              ADDS     r4,r4,#0x20           ;420
000082  223c              MOVS     r2,#0x3c              ;423
000084  4631              MOV      r1,r6                 ;423
000086  a806              ADD      r0,sp,#0x18           ;423
000088  f7fffffe          BL       os_memcpy
00008c  2214              MOVS     r2,#0x14              ;424
00008e  2100              MOVS     r1,#0                 ;424
000090  a810              ADD      r0,sp,#0x40           ;424
000092  f7fffffe          BL       os_memset
000096  2019              MOVS     r0,#0x19              ;425
000098  f88d0054          STRB     r0,[sp,#0x54]         ;425
00009c  233d              MOVS     r3,#0x3d              ;426
00009e  aa06              ADD      r2,sp,#0x18           ;426
0000a0  a137              ADR      r1,|L24.384|
0000a2  2000              MOVS     r0,#0                 ;426
0000a4  f7fffffe          BL       wpa_hexdump
0000a8  ab01              ADD      r3,sp,#4              ;428
0000aa  9300              STR      r3,[sp,#0]            ;428
0000ac  233d              MOVS     r3,#0x3d              ;428
0000ae  aa06              ADD      r2,sp,#0x18           ;428
0000b0  2114              MOVS     r1,#0x14              ;428
0000b2  f10500c0          ADD      r0,r5,#0xc0           ;428
0000b6  f7fffffe          BL       hmac_sha1
0000ba  2214              MOVS     r2,#0x14              ;430
0000bc  4621              MOV      r1,r4                 ;430
0000be  a801              ADD      r0,sp,#4              ;430
0000c0  f7fffffe          BL       os_memcmp
0000c4  b190              CBZ      r0,|L24.236|
0000c6  a135              ADR      r1,|L24.412|
0000c8  2000              MOVS     r0,#0                 ;431
0000ca  f7fffffe          BL       wpa_printf
0000ce  2314              MOVS     r3,#0x14              ;433
0000d0  4622              MOV      r2,r4                 ;433
0000d2  a13f              ADR      r1,|L24.464|
0000d4  2000              MOVS     r0,#0                 ;433
0000d6  f7fffffe          BL       wpa_hexdump
0000da  2314              MOVS     r3,#0x14              ;435
0000dc  aa01              ADD      r2,sp,#4              ;435
0000de  a142              ADR      r1,|L24.488|
0000e0  2000              MOVS     r0,#0                 ;435
0000e2  f7fffffe          BL       wpa_hexdump
0000e6  f04f30ff          MOV      r0,#0xffffffff        ;437
0000ea  e79c              B        |L24.38|
                  |L24.236|
0000ec  a144              ADR      r1,|L24.512|
0000ee  2000              MOVS     r0,#0                 ;440
0000f0  f7fffffe          BL       wpa_printf
0000f4  2000              MOVS     r0,#0                 ;442
0000f6  e796              B        |L24.38|
;;;444    
                          ENDP

                  |L24.248|
0000f8  4541502d          DCB      "EAP-PEAP: Could not derive CMK",0
0000fc  50454150
000100  3a20436f
000104  756c6420
000108  6e6f7420
00010c  64657269
000110  76652043
000114  4d4b00  
000117  00                DCB      0
                  |L24.280|
000118  4541502d          DCB      "EAP-PEAP: Invalid cryptobinding TLV length %d",0
00011c  50454150
000120  3a20496e
000124  76616c69
000128  64206372
00012c  7970746f
000130  62696e64
000134  696e6720
000138  544c5620
00013c  6c656e67
000140  74682025
000144  6400    
000146  00                DCB      0
000147  00                DCB      0
                  |L24.328|
                          DCD      ||.constdata||+0x90
                  |L24.332|
00014c  4541502d          DCB      "EAP-PEAP: Unexpected Cryptobinding TLV SubType %d",0
000150  50454150
000154  3a20556e
000158  65787065
00015c  63746564
000160  20437279
000164  70746f62
000168  696e6469
00016c  6e672054
000170  4c562053
000174  75625479
000178  70652025
00017c  6400    
00017e  00                DCB      0
00017f  00                DCB      0
                  |L24.384|
000180  4541502d          DCB      "EAP-PEAP: Compound_MAC data",0
000184  50454150
000188  3a20436f
00018c  6d706f75
000190  6e645f4d
000194  41432064
000198  61746100
                  |L24.412|
00019c  4541502d          DCB      "EAP-PEAP: Invalid Compound_MAC in cryptobinding TLV",0
0001a0  50454150
0001a4  3a20496e
0001a8  76616c69
0001ac  6420436f
0001b0  6d706f75
0001b4  6e645f4d
0001b8  41432069
0001bc  6e206372
0001c0  7970746f
0001c4  62696e64
0001c8  696e6720
0001cc  544c5600
                  |L24.464|
0001d0  4541502d          DCB      "EAP-PEAP: Received MAC",0
0001d4  50454150
0001d8  3a205265
0001dc  63656976
0001e0  6564204d
0001e4  414300  
0001e7  00                DCB      0
                  |L24.488|
0001e8  4541502d          DCB      "EAP-PEAP: Expected MAC",0
0001ec  50454150
0001f0  3a204578
0001f4  70656374
0001f8  6564204d
0001fc  414300  
0001ff  00                DCB      0
                  |L24.512|
000200  4541502d          DCB      "EAP-PEAP: Valid cryptobinding TLV received",0
000204  50454150
000208  3a205661
00020c  6c696420
000210  63727970
000214  746f6269
000218  6e64696e
00021c  6720544c
000220  56207265
000224  63656976
000228  656400  
00022b  00                DCB      0

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L25.30|
00001a  2001              MOVS     r0,#1
                  |L25.28|
;;;495    }
00001c  4770              BX       lr
                  |L25.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L25.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L30.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L30.14|
                  |L30.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L30.12|
;;;70     }
00000c  4770              BX       lr
                  |L30.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L30.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L31.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L31.16|
                  |L31.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L31.14|
;;;76     }
00000e  4770              BX       lr
                  |L31.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L31.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L32.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L32.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L32.18|
                  |L32.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L32.16|
;;;57     }
000010  4770              BX       lr
                  |L32.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L32.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L33.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L33.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L33.20|
                  |L33.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L33.18|
;;;64     }
000012  4770              BX       lr
                  |L33.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L33.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L34.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L34.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L34.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L34.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L37.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L37.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L37.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L37.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L43.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L43.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  50454150          DCB      0x50,0x45,0x41,0x50
000008  3a207365          DCB      0x3a,0x20,0x73,0x65
00000c  6e642074          DCB      0x6e,0x64,0x20,0x74
000010  756e6e65          DCB      0x75,0x6e,0x6e,0x65
000014  6c656420          DCB      0x6c,0x65,0x64,0x20
000018  4541502d          DCB      0x45,0x41,0x50,0x2d
00001c  53756363          DCB      0x53,0x75,0x63,0x63
000020  65737320          DCB      0x65,0x73,0x73,0x20
000024  61667465          DCB      0x61,0x66,0x74,0x65
000028  72207265          DCB      0x72,0x20,0x72,0x65
00002c  63656976          DCB      0x63,0x65,0x69,0x76
000030  696e6720          DCB      0x69,0x6e,0x67,0x20
000034  74756e6e          DCB      0x74,0x75,0x6e,0x6e
000038  656c6564          DCB      0x65,0x6c,0x65,0x64
00003c  20454150          DCB      0x20,0x45,0x41,0x50
000040  2d537563          DCB      0x2d,0x53,0x75,0x63
000044  63657373          DCB      0x63,0x65,0x73,0x73
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  4541502d          DCB      0x45,0x41,0x50,0x2d
000050  50454150          DCB      0x50,0x45,0x41,0x50
000054  3a207365          DCB      0x3a,0x20,0x73,0x65
000058  6e642050          DCB      0x6e,0x64,0x20,0x50
00005c  4541502f          DCB      0x45,0x41,0x50,0x2f
000060  544c5320          DCB      0x54,0x4c,0x53,0x20
000064  41434b20          DCB      0x41,0x43,0x4b,0x20
000068  61667465          DCB      0x61,0x66,0x74,0x65
00006c  72207265          DCB      0x72,0x20,0x72,0x65
000070  63656976          DCB      0x63,0x65,0x69,0x76
000074  696e6720          DCB      0x69,0x6e,0x67,0x20
000078  74756e6e          DCB      0x74,0x75,0x6e,0x6e
00007c  656c6564          DCB      0x65,0x6c,0x65,0x64
000080  20454150          DCB      0x20,0x45,0x41,0x50
000084  2d537563          DCB      0x2d,0x53,0x75,0x63
000088  63657373          DCB      0x63,0x65,0x73,0x73
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  4541502d          DCB      0x45,0x41,0x50,0x2d
000094  50454150          DCB      0x50,0x45,0x41,0x50
000098  3a204372          DCB      0x3a,0x20,0x43,0x72
00009c  7970746f          DCB      0x79,0x70,0x74,0x6f
0000a0  62696e64          DCB      0x62,0x69,0x6e,0x64
0000a4  696e6720          DCB      0x69,0x6e,0x67,0x20
0000a8  544c5620          DCB      0x54,0x4c,0x56,0x20
0000ac  56657273          DCB      0x56,0x65,0x72,0x73
0000b0  696f6e20          DCB      0x69,0x6f,0x6e,0x20
0000b4  6d69736d          DCB      0x6d,0x69,0x73,0x6d
0000b8  61746368          DCB      0x61,0x74,0x63,0x68
0000bc  20287761          DCB      0x20,0x28,0x77,0x61
0000c0  73202564          DCB      0x73,0x20,0x25,0x64
0000c4  3b206578          DCB      0x3b,0x20,0x65,0x78
0000c8  70656374          DCB      0x70,0x65,0x63,0x74
0000cc  65642025          DCB      0x65,0x64,0x20,0x25
0000d0  64290000          DCB      0x64,0x29,0x00,0x00
0000d4  4541502d          DCB      0x45,0x41,0x50,0x2d
0000d8  50454150          DCB      0x50,0x45,0x41,0x50
0000dc  3a205065          DCB      0x3a,0x20,0x50,0x65
0000e0  6e64696e          DCB      0x6e,0x64,0x69,0x6e
0000e4  67205068          DCB      0x67,0x20,0x50,0x68
0000e8  61736520          DCB      0x61,0x73,0x65,0x20
0000ec  32207265          DCB      0x32,0x20,0x72,0x65
0000f0  71756573          DCB      0x71,0x75,0x65,0x73
0000f4  74202d20          DCB      0x74,0x20,0x2d,0x20
0000f8  736b6970          DCB      0x73,0x6b,0x69,0x70
0000fc  20646563          DCB      0x20,0x64,0x65,0x63
000100  72797074          DCB      0x72,0x79,0x70,0x74
000104  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000108  616e6420          DCB      0x61,0x6e,0x64,0x20
00010c  75736520          DCB      0x75,0x73,0x65,0x20
000110  6f6c6420          DCB      0x6f,0x6c,0x64,0x20
000114  64617461          DCB      0x64,0x61,0x74,0x61
000118  00000000          DCB      0x00,0x00,0x00,0x00
00011c  4541502d          DCB      0x45,0x41,0x50,0x2d
000120  50454150          DCB      0x50,0x45,0x41,0x50
000124  3a205265          DCB      0x3a,0x20,0x52,0x65
000128  63656976          DCB      0x63,0x65,0x69,0x76
00012c  65642054          DCB      0x65,0x64,0x20,0x54
000130  4c532041          DCB      0x4c,0x53,0x20,0x41
000134  434b2c20          DCB      0x43,0x4b,0x2c,0x20
000138  62757420          DCB      0x62,0x75,0x74,0x20
00013c  65787065          DCB      0x65,0x78,0x70,0x65
000140  63746564          DCB      0x63,0x74,0x65,0x64
000144  20646174          DCB      0x20,0x64,0x61,0x74
000148  61202d20          DCB      0x61,0x20,0x2d,0x20
00014c  61636b6e          DCB      0x61,0x63,0x6b,0x6e
000150  6f776c65          DCB      0x6f,0x77,0x6c,0x65
000154  64676520          DCB      0x64,0x67,0x65,0x20
000158  77697468          DCB      0x77,0x69,0x74,0x68
00015c  20544c53          DCB      0x20,0x54,0x4c,0x53
000160  2041434b          DCB      0x20,0x41,0x43,0x4b
000164  2073696e          DCB      0x20,0x73,0x69,0x6e
000168  63652050          DCB      0x63,0x65,0x20,0x50
00016c  68617365          DCB      0x68,0x61,0x73,0x65
000170  20322068          DCB      0x20,0x32,0x20,0x68
000174  61732062          DCB      0x61,0x73,0x20,0x62
000178  65656e20          DCB      0x65,0x65,0x6e,0x20
00017c  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000180  6c657465          DCB      0x6c,0x65,0x74,0x65
000184  64000000          DCB      0x64,0x00,0x00,0x00
000188  4541502d          DCB      0x45,0x41,0x50,0x2d
00018c  50454150          DCB      0x50,0x45,0x41,0x50
000190  3a204c65          DCB      0x3a,0x20,0x4c,0x65
000194  6e677468          DCB      0x6e,0x67,0x74,0x68
000198  206d6973          DCB      0x20,0x6d,0x69,0x73
00019c  6d617463          DCB      0x6d,0x61,0x74,0x63
0001a0  6820696e          DCB      0x68,0x20,0x69,0x6e
0001a4  20506861          DCB      0x20,0x50,0x68,0x61
0001a8  73652032          DCB      0x73,0x65,0x20,0x32
0001ac  20454150          DCB      0x20,0x45,0x41,0x50
0001b0  20667261          DCB      0x20,0x66,0x72,0x61
0001b4  6d652028          DCB      0x6d,0x65,0x20,0x28
0001b8  6c656e3d          DCB      0x6c,0x65,0x6e,0x3d
0001bc  256c7520          DCB      0x25,0x6c,0x75,0x20
0001c0  6864722d          DCB      0x68,0x64,0x72,0x2d
0001c4  3e6c656e          DCB      0x3e,0x6c,0x65,0x6e
0001c8  6774683d          DCB      0x67,0x74,0x68,0x3d
0001cc  256c7529          DCB      0x25,0x6c,0x75,0x29
0001d0  00000000          DCB      0x00,0x00,0x00,0x00
0001d4  4541502d          DCB      0x45,0x41,0x50,0x2d
0001d8  50454150          DCB      0x50,0x45,0x41,0x50
0001dc  3a204f64          DCB      0x3a,0x20,0x4f,0x64
0001e0  642e2e20          DCB      0x64,0x2e,0x2e,0x20
0001e4  50686173          DCB      0x50,0x68,0x61,0x73
0001e8  65203220          DCB      0x65,0x20,0x32,0x20
0001ec  45415020          DCB      0x45,0x41,0x50,0x20
0001f0  68656164          DCB      0x68,0x65,0x61,0x64
0001f4  65722068          DCB      0x65,0x72,0x20,0x68
0001f8  61732073          DCB      0x61,0x73,0x20,0x73
0001fc  686f7274          DCB      0x68,0x6f,0x72,0x74
000200  6572206c          DCB      0x65,0x72,0x20,0x6c
000204  656e6774          DCB      0x65,0x6e,0x67,0x74
000208  68207468          DCB      0x68,0x20,0x74,0x68
00020c  616e2066          DCB      0x61,0x6e,0x20,0x66
000210  756c6c20          DCB      0x75,0x6c,0x6c,0x20
000214  64656372          DCB      0x64,0x65,0x63,0x72
000218  79707465          DCB      0x79,0x70,0x74,0x65
00021c  64206461          DCB      0x64,0x20,0x64,0x61
000220  74612028          DCB      0x74,0x61,0x20,0x28
000224  256c7520          DCB      0x25,0x6c,0x75,0x20
000228  3c20256c          DCB      0x3c,0x20,0x25,0x6c
00022c  75290000          DCB      0x75,0x29,0x00,0x00
000230  4541502d          DCB      0x45,0x41,0x50,0x2d
000234  50454150          DCB      0x50,0x45,0x41,0x50
000238  3a205068          DCB      0x3a,0x20,0x50,0x68
00023c  61736520          DCB      0x61,0x73,0x65,0x20
000240  32205375          DCB      0x32,0x20,0x53,0x75
000244  63636573          DCB      0x63,0x63,0x65,0x73
000248  73207573          DCB      0x73,0x20,0x75,0x73
00024c  65642074          DCB      0x65,0x64,0x20,0x74
000250  6f20696e          DCB      0x6f,0x20,0x69,0x6e
000254  64696361          DCB      0x64,0x69,0x63,0x61
000258  74652073          DCB      0x74,0x65,0x20,0x73
00025c  75636365          DCB      0x75,0x63,0x63,0x65
000260  73732c20          DCB      0x73,0x73,0x2c,0x20
000264  62757420          DCB      0x62,0x75,0x74,0x20
000268  50686173          DCB      0x50,0x68,0x61,0x73
00026c  65203220          DCB      0x65,0x20,0x32,0x20
000270  45415020          DCB      0x45,0x41,0x50,0x20
000274  77617320          DCB      0x77,0x61,0x73,0x20
000278  6e6f7420          DCB      0x6e,0x6f,0x74,0x20
00027c  79657420          DCB      0x79,0x65,0x74,0x20
000280  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000284  6c657465          DCB      0x6c,0x65,0x74,0x65
000288  64207375          DCB      0x64,0x20,0x73,0x75
00028c  63636573          DCB      0x63,0x63,0x65,0x73
000290  7366756c          DCB      0x73,0x66,0x75,0x6c
000294  6c790000          DCB      0x6c,0x79,0x00,0x00
000298  4541502d          DCB      0x45,0x41,0x50,0x2d
00029c  50454150          DCB      0x50,0x45,0x41,0x50
0002a0  3a205665          DCB      0x3a,0x20,0x56,0x65
0002a4  7273696f          DCB      0x72,0x73,0x69,0x6f
0002a8  6e203120          DCB      0x6e,0x20,0x31,0x20
0002ac  2d204541          DCB      0x2d,0x20,0x45,0x41
0002b0  502d5375          DCB      0x50,0x2d,0x53,0x75
0002b4  63636573          DCB      0x63,0x63,0x65,0x73
0002b8  73207769          DCB      0x73,0x20,0x77,0x69
0002bc  7468696e          DCB      0x74,0x68,0x69,0x6e
0002c0  20544c53          DCB      0x20,0x54,0x4c,0x53
0002c4  2074756e          DCB      0x20,0x74,0x75,0x6e
0002c8  6e656c20          DCB      0x6e,0x65,0x6c,0x20
0002cc  2d206175          DCB      0x2d,0x20,0x61,0x75
0002d0  7468656e          DCB      0x74,0x68,0x65,0x6e
0002d4  74696361          DCB      0x74,0x69,0x63,0x61
0002d8  74696f6e          DCB      0x74,0x69,0x6f,0x6e
0002dc  20636f6d          DCB      0x20,0x63,0x6f,0x6d
0002e0  706c6574          DCB      0x70,0x6c,0x65,0x74
0002e4  65640000          DCB      0x65,0x64,0x00,0x00
0002e8  4541502d          DCB      0x45,0x41,0x50,0x2d
0002ec  50454150          DCB      0x50,0x45,0x41,0x50
0002f0  3a20576f          DCB      0x3a,0x20,0x57,0x6f
0002f4  726b6172          DCB      0x72,0x6b,0x61,0x72
0002f8  6f756e64          DCB      0x6f,0x75,0x6e,0x64
0002fc  202d2061          DCB      0x20,0x2d,0x20,0x61
000300  6c6c6f77          DCB      0x6c,0x6c,0x6f,0x77
000304  206f7574          DCB      0x20,0x6f,0x75,0x74
000308  65722045          DCB      0x65,0x72,0x20,0x45
00030c  41502d53          DCB      0x41,0x50,0x2d,0x53
000310  75636365          DCB      0x75,0x63,0x63,0x65
000314  73732074          DCB      0x73,0x73,0x20,0x74
000318  6f207465          DCB      0x6f,0x20,0x74,0x65
00031c  726d696e          DCB      0x72,0x6d,0x69,0x6e
000320  61746520          DCB      0x61,0x74,0x65,0x20
000324  50454150          DCB      0x50,0x45,0x41,0x50
000328  20726573          DCB      0x20,0x72,0x65,0x73
00032c  756d7074          DCB      0x75,0x6d,0x70,0x74
000330  696f6e00          DCB      0x69,0x6f,0x6e,0x00
