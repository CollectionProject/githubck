; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\sha256.o --depend=.\obj\sha256.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\sha256.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\sha256.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.hmac_sha256||, CODE, READONLY, ALIGN=1

                  hmac_sha256 PROC
;;;101     */
;;;102    void hmac_sha256(const u8 *key, size_t key_len, const u8 *data,
000000  b57f              PUSH     {r0-r6,lr}
;;;103    		 size_t data_len, u8 *mac)
;;;104    {
000002  b082              SUB      sp,sp,#8
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  9e0a              LDR      r6,[sp,#0x28]
;;;105    	hmac_sha256_vector(key, key_len, 1, &data, &data_len, mac);
00000a  aa05              ADD      r2,sp,#0x14
00000c  ab04              ADD      r3,sp,#0x10
00000e  e9cd2600          STRD     r2,r6,[sp,#0]
000012  2201              MOVS     r2,#1
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       hmac_sha256_vector
;;;106    }
00001c  b006              ADD      sp,sp,#0x18
00001e  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP


                          AREA ||i.hmac_sha256_vector||, CODE, READONLY, ALIGN=1

                  hmac_sha256_vector PROC
;;;30      */
;;;31     void hmac_sha256_vector(const u8 *key, size_t key_len, size_t num_elem,
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;32     			const u8 *addr[], const size_t *len, u8 *mac)
;;;33     {
000004  b0a4              SUB      sp,sp,#0x90
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
00000a  e9dd872e          LDRD     r8,r7,[sp,#0xb8]
;;;34     	unsigned char k_pad[64]; /* padding - key XORd with ipad/opad */
;;;35     	unsigned char tk[32];
;;;36     	const u8 *_addr[6];
;;;37     	size_t _len[6], i;
;;;38     
;;;39     	if (num_elem > 5) {
00000e  2d05              CMP      r5,#5
000010  d902              BLS      |L3.24|
                  |L3.18|
;;;40     		/*
;;;41     		 * Fixed limit on the number of fragments to avoid having to
;;;42     		 * allocate memory (which could fail).
;;;43     		 */
;;;44     		return;
;;;45     	}
;;;46     
;;;47             /* if key is longer than 64 bytes reset it to key = SHA256(key) */
;;;48             if (key_len > 64) {
;;;49     		sha256_vector(1, &key, &key_len, tk);
;;;50     		key = tk;
;;;51     		key_len = 32;
;;;52             }
;;;53     
;;;54     	/* the HMAC_SHA256 transform looks like:
;;;55     	 *
;;;56     	 * SHA256(K XOR opad, SHA256(K XOR ipad, text))
;;;57     	 *
;;;58     	 * where K is an n byte key
;;;59     	 * ipad is the byte 0x36 repeated 64 times
;;;60     	 * opad is the byte 0x5c repeated 64 times
;;;61     	 * and text is the data being protected */
;;;62     
;;;63     	/* start out by storing key in ipad */
;;;64     	os_memset(k_pad, 0, sizeof(k_pad));
;;;65     	os_memcpy(k_pad, key, key_len);
;;;66     	/* XOR key with ipad values */
;;;67     	for (i = 0; i < 64; i++)
;;;68     		k_pad[i] ^= 0x36;
;;;69     
;;;70     	/* perform inner SHA256 */
;;;71     	_addr[0] = k_pad;
;;;72     	_len[0] = 64;
;;;73     	for (i = 0; i < num_elem; i++) {
;;;74     		_addr[i + 1] = addr[i];
;;;75     		_len[i + 1] = len[i];
;;;76     	}
;;;77     	sha256_vector(1 + num_elem, _addr, _len, mac);
;;;78     
;;;79     	os_memset(k_pad, 0, sizeof(k_pad));
;;;80     	os_memcpy(k_pad, key, key_len);
;;;81     	/* XOR key with opad values */
;;;82     	for (i = 0; i < 64; i++)
;;;83     		k_pad[i] ^= 0x5c;
;;;84     
;;;85     	/* perform outer SHA256 */
;;;86     	_addr[0] = k_pad;
;;;87     	_len[0] = 64;
;;;88     	_addr[1] = mac;
;;;89     	_len[1] = SHA256_MAC_LEN;
;;;90     	sha256_vector(2, _addr, _len, mac);
;;;91     }
000012  b028              ADD      sp,sp,#0xa0
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L3.24|
000018  9825              LDR      r0,[sp,#0x94]         ;48
00001a  2840              CMP      r0,#0x40              ;48
00001c  d909              BLS      |L3.50|
00001e  ab0c              ADD      r3,sp,#0x30           ;49
000020  aa25              ADD      r2,sp,#0x94           ;49
000022  a924              ADD      r1,sp,#0x90           ;49
000024  2001              MOVS     r0,#1                 ;49
000026  f7fffffe          BL       sha256_vector
00002a  a80c              ADD      r0,sp,#0x30           ;50
00002c  9024              STR      r0,[sp,#0x90]         ;50
00002e  2020              MOVS     r0,#0x20              ;51
000030  9025              STR      r0,[sp,#0x94]         ;51
                  |L3.50|
000032  2240              MOVS     r2,#0x40              ;64
000034  2100              MOVS     r1,#0                 ;64
000036  a814              ADD      r0,sp,#0x50           ;64
000038  f7fffffe          BL       os_memset
00003c  a814              ADD      r0,sp,#0x50           ;65
00003e  e9dd1224          LDRD     r1,r2,[sp,#0x90]      ;65
000042  f7fffffe          BL       os_memcpy
000046  2400              MOVS     r4,#0                 ;67
000048  e006              B        |L3.88|
                  |L3.74|
00004a  a814              ADD      r0,sp,#0x50           ;68
00004c  5d00              LDRB     r0,[r0,r4]            ;68
00004e  f0800036          EOR      r0,r0,#0x36           ;68
000052  a914              ADD      r1,sp,#0x50           ;68
000054  5508              STRB     r0,[r1,r4]            ;68
000056  1c64              ADDS     r4,r4,#1              ;67
                  |L3.88|
000058  2c40              CMP      r4,#0x40              ;67
00005a  d3f6              BCC      |L3.74|
00005c  a814              ADD      r0,sp,#0x50           ;71
00005e  9006              STR      r0,[sp,#0x18]         ;71
000060  2040              MOVS     r0,#0x40              ;72
000062  9000              STR      r0,[sp,#0]            ;72
000064  2400              MOVS     r4,#0                 ;73
000066  e00a              B        |L3.126|
                  |L3.104|
000068  f8561024          LDR      r1,[r6,r4,LSL #2]     ;74
00006c  aa06              ADD      r2,sp,#0x18           ;74
00006e  1c60              ADDS     r0,r4,#1              ;74
000070  f8421020          STR      r1,[r2,r0,LSL #2]     ;74
000074  f8581024          LDR      r1,[r8,r4,LSL #2]     ;75
000078  f84d1020          STR      r1,[sp,r0,LSL #2]     ;75
00007c  1c64              ADDS     r4,r4,#1              ;73
                  |L3.126|
00007e  42ac              CMP      r4,r5                 ;73
000080  d3f2              BCC      |L3.104|
000082  1c68              ADDS     r0,r5,#1              ;77
000084  463b              MOV      r3,r7                 ;77
000086  466a              MOV      r2,sp                 ;77
000088  a906              ADD      r1,sp,#0x18           ;77
00008a  f7fffffe          BL       sha256_vector
00008e  2240              MOVS     r2,#0x40              ;79
000090  2100              MOVS     r1,#0                 ;79
000092  a814              ADD      r0,sp,#0x50           ;79
000094  f7fffffe          BL       os_memset
000098  a814              ADD      r0,sp,#0x50           ;80
00009a  e9dd1224          LDRD     r1,r2,[sp,#0x90]      ;80
00009e  f7fffffe          BL       os_memcpy
0000a2  2400              MOVS     r4,#0                 ;82
0000a4  e006              B        |L3.180|
                  |L3.166|
0000a6  a814              ADD      r0,sp,#0x50           ;83
0000a8  5d00              LDRB     r0,[r0,r4]            ;83
0000aa  f080005c          EOR      r0,r0,#0x5c           ;83
0000ae  a914              ADD      r1,sp,#0x50           ;83
0000b0  5508              STRB     r0,[r1,r4]            ;83
0000b2  1c64              ADDS     r4,r4,#1              ;82
                  |L3.180|
0000b4  2c40              CMP      r4,#0x40              ;82
0000b6  d3f6              BCC      |L3.166|
0000b8  a814              ADD      r0,sp,#0x50           ;86
0000ba  9006              STR      r0,[sp,#0x18]         ;86
0000bc  2040              MOVS     r0,#0x40              ;87
0000be  9000              STR      r0,[sp,#0]            ;87
0000c0  9707              STR      r7,[sp,#0x1c]         ;88
0000c2  2020              MOVS     r0,#0x20              ;89
0000c4  9001              STR      r0,[sp,#4]            ;89
0000c6  463b              MOV      r3,r7                 ;90
0000c8  466a              MOV      r2,sp                 ;90
0000ca  a906              ADD      r1,sp,#0x18           ;90
0000cc  2002              MOVS     r0,#2                 ;90
0000ce  f7fffffe          BL       sha256_vector
0000d2  bf00              NOP      
0000d4  e79d              B        |L3.18|
;;;92     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L4.30|
00001a  2001              MOVS     r0,#1
                  |L4.28|
;;;495    }
00001c  4770              BX       lr
                  |L4.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L4.28|
;;;496    
                          ENDP


                          AREA ||i.sha256_prf||, CODE, READONLY, ALIGN=1

                  sha256_prf PROC
;;;121     */
;;;122    void sha256_prf(const u8 *key, size_t key_len, const char *label,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;123    		const u8 *data, size_t data_len, u8 *buf, size_t buf_len)
;;;124    {
000004  b095              SUB      sp,sp,#0x54
000006  4616              MOV      r6,r2
000008  4699              MOV      r9,r3
00000a  e9ddba22          LDRD     r11,r10,[sp,#0x88]
00000e  9d24              LDR      r5,[sp,#0x90]
;;;125    	u16 counter = 1;
000010  2701              MOVS     r7,#1
;;;126    	size_t pos, plen;
;;;127    	u8 hash[SHA256_MAC_LEN];
;;;128    	const u8 *addr[4];
;;;129    	size_t len[4];
;;;130    	u8 counter_le[2], length_le[2];
;;;131    
;;;132    	addr[0] = counter_le;
000012  a804              ADD      r0,sp,#0x10
000014  9009              STR      r0,[sp,#0x24]
;;;133    	len[0] = 2;
000016  2002              MOVS     r0,#2
000018  9005              STR      r0,[sp,#0x14]
;;;134    	addr[1] = (u8 *) label;
00001a  960a              STR      r6,[sp,#0x28]
;;;135    	len[1] = os_strlen(label);
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       os_strlen
000022  9006              STR      r0,[sp,#0x18]
;;;136    	addr[2] = data;
000024  f8cd902c          STR      r9,[sp,#0x2c]
;;;137    	len[2] = data_len;
000028  f8cdb01c          STR      r11,[sp,#0x1c]
;;;138    	addr[3] = length_le;
00002c  a803              ADD      r0,sp,#0xc
00002e  900c              STR      r0,[sp,#0x30]
;;;139    	len[3] = sizeof(length_le);
000030  2002              MOVS     r0,#2
000032  9008              STR      r0,[sp,#0x20]
;;;140    
;;;141    	WPA_PUT_LE16(length_le, buf_len * 8);
000034  bf00              NOP      
000036  f3c51047          UBFX     r0,r5,#5,#8
00003a  f88d000d          STRB     r0,[sp,#0xd]
00003e  06e8              LSLS     r0,r5,#27
000040  0e00              LSRS     r0,r0,#24
000042  f88d000c          STRB     r0,[sp,#0xc]
000046  bf00              NOP      
;;;142    	pos = 0;
000048  2400              MOVS     r4,#0
;;;143    	while (pos < buf_len) {
00004a  e02c              B        |L5.166|
                  |L5.76|
;;;144    		plen = buf_len - pos;
00004c  eba50804          SUB      r8,r5,r4
;;;145    		WPA_PUT_LE16(counter_le, counter);
000050  bf00              NOP      
000052  1238              ASRS     r0,r7,#8
000054  f88d0011          STRB     r0,[sp,#0x11]
000058  b2f8              UXTB     r0,r7
00005a  f88d0010          STRB     r0,[sp,#0x10]
00005e  bf00              NOP      
;;;146    		if (plen >= SHA256_MAC_LEN) {
000060  f1b80f20          CMP      r8,#0x20
000064  d30c              BCC      |L5.128|
;;;147    			hmac_sha256_vector(key, key_len, 4, addr, len,
000066  eb0a0304          ADD      r3,r10,r4
00006a  aa05              ADD      r2,sp,#0x14
00006c  e9cd2300          STRD     r2,r3,[sp,#0]
000070  ab09              ADD      r3,sp,#0x24
000072  2204              MOVS     r2,#4
000074  e9dd0115          LDRD     r0,r1,[sp,#0x54]
000078  f7fffffe          BL       hmac_sha256_vector
;;;148    					   &buf[pos]);
;;;149    			pos += SHA256_MAC_LEN;
00007c  3420              ADDS     r4,r4,#0x20
00007e  e010              B        |L5.162|
                  |L5.128|
;;;150    		} else {
;;;151    			hmac_sha256_vector(key, key_len, 4, addr, len, hash);
000080  ab0d              ADD      r3,sp,#0x34
000082  aa05              ADD      r2,sp,#0x14
000084  e9cd2300          STRD     r2,r3,[sp,#0]
000088  ab09              ADD      r3,sp,#0x24
00008a  2204              MOVS     r2,#4
00008c  e9dd0115          LDRD     r0,r1,[sp,#0x54]
000090  f7fffffe          BL       hmac_sha256_vector
;;;152    			os_memcpy(&buf[pos], hash, plen);
000094  eb0a0004          ADD      r0,r10,r4
000098  4642              MOV      r2,r8
00009a  a90d              ADD      r1,sp,#0x34
00009c  f7fffffe          BL       os_memcpy
;;;153    			break;
0000a0  e003              B        |L5.170|
                  |L5.162|
;;;154    		}
;;;155    		counter++;
0000a2  1c78              ADDS     r0,r7,#1
0000a4  b287              UXTH     r7,r0
                  |L5.166|
0000a6  42ac              CMP      r4,r5                 ;143
0000a8  d3d0              BCC      |L5.76|
                  |L5.170|
0000aa  bf00              NOP                            ;153
;;;156    	}
;;;157    }
0000ac  b019              ADD      sp,sp,#0x64
0000ae  e8bd8ff0          POP      {r4-r11,pc}
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L10.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L10.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L10.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L10.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L13.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L13.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L13.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L13.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L19.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L19.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

