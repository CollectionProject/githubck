; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\common.o --depend=.\obj\common.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\common.crf ..\sdio\src\common.c]
                          THUMB

                          AREA ||i.ERR_PTR||, CODE, READONLY, ALIGN=1

                  ERR_PTR PROC
;;;58     
;;;59      void  *ERR_PTR(long error)
000000  4770              BX       lr
;;;60     {
;;;61     	return (void *) error;
;;;62     }
;;;63      void  lbs_hex(unsigned int grp, const char *prompt, u8 *buf, int len)
                          ENDP


                          AREA ||i.IS_ERR||, CODE, READONLY, ALIGN=1

                  IS_ERR PROC
;;;52     }
;;;53      long  IS_ERR(const void *ptr)
000000  4601              MOV      r1,r0
;;;54     {
;;;55     	return IS_ERR_VALUE((long)ptr);
000002  2900              CMP      r1,#0
000004  db00              BLT      |L2.8|
000006  b909              CBNZ     r1,|L2.12|
                  |L2.8|
000008  2001              MOVS     r0,#1
                  |L2.10|
;;;56     }
00000a  4770              BX       lr
                  |L2.12|
00000c  2000              MOVS     r0,#0                 ;55
00000e  e7fc              B        |L2.10|
;;;57     
                          ENDP


                          AREA ||i.PTR_ERR||, CODE, READONLY, ALIGN=1

                  PTR_ERR PROC
;;;48     
;;;49      long  PTR_ERR(const void *ptr)
000000  4770              BX       lr
;;;50     {
;;;51     	return (long) ptr;
;;;52     }
;;;53      long  IS_ERR(const void *ptr)
                          ENDP


                          AREA ||i._wpa_hexdump||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_u
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  _wpa_hexdump PROC
;;;5      extern  int wpa_debug_level;
;;;6      static void _wpa_hexdump(int level, const char *title, const u8 *buf,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;7      			 size_t len, int show)
;;;8      {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;9      	size_t i;
;;;10     	if (level < wpa_debug_level)
000010  4812              LDR      r0,|L4.92|
000012  6800              LDR      r0,[r0,#0]  ; wpa_debug_level
000014  4287              CMP      r7,r0
000016  da01              BGE      |L4.28|
                  |L4.24|
;;;11     		return;
;;;12     	printf("%s - hexdump(len=%lu):", title, (unsigned long) len);
;;;13     	if (buf == NULL) {
;;;14     		printf(" [NULL]");
;;;15     	} else if (show) {
;;;16     		for (i = 0; i < len; i++)
;;;17     			printf(" %02x", buf[i]);
;;;18     	} else {
;;;19     		printf(" [REMOVED]");
;;;20     	}
;;;21     	printf("\n");
;;;22     }
000018  e8bd87f0          POP      {r4-r10,pc}
                  |L4.28|
00001c  4632              MOV      r2,r6                 ;12
00001e  4641              MOV      r1,r8                 ;12
000020  a00f              ADR      r0,|L4.96|
000022  f7fffffe          BL       __2printf
000026  b91d              CBNZ     r5,|L4.48|
000028  a013              ADR      r0,|L4.120|
00002a  f7fffffe          BL       __2printf
00002e  e00f              B        |L4.80|
                  |L4.48|
000030  f1b90f00          CMP      r9,#0                 ;15
000034  d009              BEQ      |L4.74|
000036  2400              MOVS     r4,#0                 ;16
000038  e004              B        |L4.68|
                  |L4.58|
00003a  5d29              LDRB     r1,[r5,r4]            ;17
00003c  a010              ADR      r0,|L4.128|
00003e  f7fffffe          BL       __2printf
000042  1c64              ADDS     r4,r4,#1              ;16
                  |L4.68|
000044  42b4              CMP      r4,r6                 ;16
000046  d3f8              BCC      |L4.58|
000048  e002              B        |L4.80|
                  |L4.74|
00004a  a00f              ADR      r0,|L4.136|
00004c  f7fffffe          BL       __2printf
                  |L4.80|
000050  a010              ADR      r0,|L4.148|
000052  f7fffffe          BL       __2printf
000056  bf00              NOP      
000058  e7de              B        |L4.24|
;;;23     void wpa_printf(int level, char *fmt, ...)
                          ENDP

00005a  0000              DCW      0x0000
                  |L4.92|
                          DCD      wpa_debug_level
                  |L4.96|
000060  2573202d          DCB      "%s - hexdump(len=%lu):",0
000064  20686578
000068  64756d70
00006c  286c656e
000070  3d256c75
000074  293a00  
000077  00                DCB      0
                  |L4.120|
000078  205b4e55          DCB      " [NULL]",0
00007c  4c4c5d00
                  |L4.128|
000080  20253032          DCB      " %02x",0
000084  7800    
000086  00                DCB      0
000087  00                DCB      0
                  |L4.136|
000088  205b5245          DCB      " [REMOVED]",0
00008c  4d4f5645
000090  445d00  
000093  00                DCB      0
                  |L4.148|
000094  0a00              DCB      "\n",0
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.convert_from_bytes_to_power_of_two||, CODE, READONLY, ALIGN=1

                  convert_from_bytes_to_power_of_two PROC
;;;173    
;;;174     u8 convert_from_bytes_to_power_of_two(u16 NumberOfBytes)
000000  4601              MOV      r1,r0
;;;175    {
;;;176      u8 count = 0;
000002  2000              MOVS     r0,#0
;;;177    
;;;178      while (NumberOfBytes != 1)
000004  e002              B        |L5.12|
                  |L5.6|
;;;179      {
;;;180        NumberOfBytes >>= 1;
000006  1049              ASRS     r1,r1,#1
;;;181        count++;
000008  1c42              ADDS     r2,r0,#1
00000a  b2d0              UXTB     r0,r2
                  |L5.12|
00000c  2901              CMP      r1,#1                 ;178
00000e  d1fa              BNE      |L5.6|
;;;182      }
;;;183      return(count);
;;;184    }
000010  4770              BX       lr
;;;185    
                          ENDP


                          AREA ||i.lbs_hex||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  lbs_hex PROC
;;;62     }
;;;63      void  lbs_hex(unsigned int grp, const char *prompt, u8 *buf, int len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;64     {
000004  4680              MOV      r8,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;65     	int i = 0;
00000c  2400              MOVS     r4,#0
;;;66     	if (len )
00000e  b1ce              CBZ      r6,|L6.68|
;;;67     	{
;;;68     		for (i = 1; i <= len; i++) {
000010  2401              MOVS     r4,#1
000012  e012              B        |L6.58|
                  |L6.20|
;;;69     			if ((i & 0xf) == 1) {
000014  f004000f          AND      r0,r4,#0xf
000018  2801              CMP      r0,#1
00001a  d108              BNE      |L6.46|
;;;70     				if (i != 1)
00001c  2c01              CMP      r4,#1
00001e  d002              BEQ      |L6.38|
;;;71     					printf("\n");
000020  a009              ADR      r0,|L6.72|
000022  f7fffffe          BL       __2printf
                  |L6.38|
;;;72     				printk("marvell" " %s: ", prompt);
000026  4639              MOV      r1,r7
000028  a008              ADR      r0,|L6.76|
00002a  f7fffffe          BL       __2printf
                  |L6.46|
;;;73     			}
;;;74     			printf("%02x ", (u8) * buf);
00002e  7829              LDRB     r1,[r5,#0]
000030  a00a              ADR      r0,|L6.92|
000032  f7fffffe          BL       __2printf
;;;75     			buf++;
000036  1c6d              ADDS     r5,r5,#1
000038  1c64              ADDS     r4,r4,#1              ;68
                  |L6.58|
00003a  42b4              CMP      r4,r6                 ;68
00003c  ddea              BLE      |L6.20|
;;;76     		}
;;;77     		printf("\n");
00003e  a002              ADR      r0,|L6.72|
000040  f7fffffe          BL       __2printf
                  |L6.68|
;;;78     	}
;;;79     }
000044  e8bd81f0          POP      {r4-r8,pc}
;;;80     void mmc_delay(unsigned int time)
                          ENDP

                  |L6.72|
000048  0a00              DCB      "\n",0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L6.76|
00004c  6d617276          DCB      "marvell %s: ",0
000050  656c6c20
000054  25733a20
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L6.92|
00005c  25303278          DCB      "%02x ",0
000060  2000    
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.mdelay||, CODE, READONLY, ALIGN=1

                  mdelay PROC
;;;95     
;;;96     void  mdelay(unsigned long time)
000000  b500              PUSH     {lr}
;;;97     {
000002  4603              MOV      r3,r0
;;;98     	while(time--)
000004  e001              B        |L7.10|
                  |L7.6|
;;;99     		ms_delay();
000006  f7fffffe          BL       ms_delay
                  |L7.10|
00000a  0018              MOVS     r0,r3                 ;98
00000c  f1a30301          SUB      r3,r3,#1              ;98
000010  d1f9              BNE      |L7.6|
;;;100    }
000012  bd00              POP      {pc}
;;;101    
                          ENDP


                          AREA ||i.mmc_delay||, CODE, READONLY, ALIGN=2

                  mmc_delay PROC
;;;79     }
;;;80     void mmc_delay(unsigned int time)
000000  b510              PUSH     {r4,lr}
;;;81     {
;;;82     	unsigned long i,ii;
;;;83     	for(i=0;i<time;i++)
000002  2100              MOVS     r1,#0
000004  e006              B        |L8.20|
                  |L8.6|
;;;84     	{	
;;;85     		ii=72000;
000006  4a05              LDR      r2,|L8.28|
;;;86     		while(ii--);
000008  bf00              NOP      
                  |L8.10|
00000a  0013              MOVS     r3,r2
00000c  f1a20201          SUB      r2,r2,#1
000010  d1fb              BNE      |L8.10|
000012  1c49              ADDS     r1,r1,#1              ;83
                  |L8.20|
000014  4281              CMP      r1,r0                 ;83
000016  d3f6              BCC      |L8.6|
;;;87     	}
;;;88     }
000018  bd10              POP      {r4,pc}
;;;89     void ms_delay(void)
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0x00011940

                          AREA ||i.ms_delay||, CODE, READONLY, ALIGN=2

                  ms_delay PROC
;;;88     }
;;;89     void ms_delay(void)
000000  4803              LDR      r0,|L9.16|
;;;90     {
;;;91     	unsigned long i=72000;
;;;92     	while(i--);
000002  bf00              NOP      
                  |L9.4|
000004  0001              MOVS     r1,r0
000006  f1a00001          SUB      r0,r0,#1
00000a  d1fb              BNE      |L9.4|
;;;93     }
00000c  4770              BX       lr
;;;94     
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x00011940

                          AREA ||i.print_ssid||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_return_value
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_o
                          REQUIRE _printf_longlong_oct
                  print_ssid PROC
;;;129    
;;;130    const char *print_ssid(char *buf, const char *ssid, u8 ssid_len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;131    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
;;;132    	const char *s = ssid;
00000a  4645              MOV      r5,r8
;;;133    	char *d = buf;
00000c  463c              MOV      r4,r7
;;;134    
;;;135    	ssid_len = min(ssid_len, 32);
00000e  2e20              CMP      r6,#0x20
000010  da01              BGE      |L10.22|
000012  4630              MOV      r0,r6
000014  e000              B        |L10.24|
                  |L10.22|
000016  2020              MOVS     r0,#0x20
                  |L10.24|
000018  b2c6              UXTB     r6,r0
;;;136    	while (ssid_len--) {
00001a  e039              B        |L10.144|
                  |L10.28|
;;;137    		if (isprint(*s)) {
00001c  f7fffffe          BL       __rt_ctype_table
000020  6800              LDR      r0,[r0,#0]
000022  7829              LDRB     r1,[r5,#0]
000024  5c40              LDRB     r0,[r0,r1]
000026  f0100f3e          TST      r0,#0x3e
00002a  d004              BEQ      |L10.54|
;;;138    			*d++ = *s++;
00002c  f8150b01          LDRB     r0,[r5],#1
000030  f8040b01          STRB     r0,[r4],#1
;;;139    			continue;
000034  e02c              B        |L10.144|
                  |L10.54|
;;;140    		}
;;;141    
;;;142    		*d++ = '\\';
000036  205c              MOVS     r0,#0x5c
000038  f8040b01          STRB     r0,[r4],#1
;;;143    		if (*s == '\0')
00003c  7828              LDRB     r0,[r5,#0]
00003e  b918              CBNZ     r0,|L10.72|
;;;144    			*d++ = '0';
000040  2030              MOVS     r0,#0x30
000042  f8040b01          STRB     r0,[r4],#1
000046  e021              B        |L10.140|
                  |L10.72|
;;;145    		else if (*s == '\n')
000048  7828              LDRB     r0,[r5,#0]
00004a  280a              CMP      r0,#0xa
00004c  d103              BNE      |L10.86|
;;;146    			*d++ = 'n';
00004e  206e              MOVS     r0,#0x6e
000050  f8040b01          STRB     r0,[r4],#1
000054  e01a              B        |L10.140|
                  |L10.86|
;;;147    		else if (*s == '\r')
000056  7828              LDRB     r0,[r5,#0]
000058  280d              CMP      r0,#0xd
00005a  d103              BNE      |L10.100|
;;;148    			*d++ = 'r';
00005c  2072              MOVS     r0,#0x72
00005e  f8040b01          STRB     r0,[r4],#1
000062  e013              B        |L10.140|
                  |L10.100|
;;;149    		else if (*s == '\t')
000064  7828              LDRB     r0,[r5,#0]
000066  2809              CMP      r0,#9
000068  d103              BNE      |L10.114|
;;;150    			*d++ = 't';
00006a  2074              MOVS     r0,#0x74
00006c  f8040b01          STRB     r0,[r4],#1
000070  e00c              B        |L10.140|
                  |L10.114|
;;;151    		else if (*s == '\\')
000072  7828              LDRB     r0,[r5,#0]
000074  285c              CMP      r0,#0x5c
000076  d102              BNE      |L10.126|
;;;152    			*d++ = '\\';
000078  f8040b01          STRB     r0,[r4],#1
00007c  e006              B        |L10.140|
                  |L10.126|
;;;153    		else
;;;154    			d += snprintf(d, 3, "%03o", *s);
00007e  782b              LDRB     r3,[r5,#0]
000080  a208              ADR      r2,|L10.164|
000082  2103              MOVS     r1,#3
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       __2snprintf
00008a  4404              ADD      r4,r4,r0
                  |L10.140|
;;;155    		s++;
00008c  1c6d              ADDS     r5,r5,#1
00008e  bf00              NOP                            ;139
                  |L10.144|
000090  0030              MOVS     r0,r6                 ;136
000092  f1a60101          SUB      r1,r6,#1              ;136
000096  b2ce              UXTB     r6,r1                 ;136
000098  d1c0              BNE      |L10.28|
;;;156    	}
;;;157    	*d = '\0';
00009a  7020              STRB     r0,[r4,#0]
;;;158    	return buf;
00009c  4638              MOV      r0,r7
;;;159    }
00009e  e8bd81f0          POP      {r4-r8,pc}
;;;160    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L10.164|
0000a4  2530336f          DCB      "%03o",0
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0

                          AREA ||i.time_after||, CODE, READONLY, ALIGN=1

                  time_after PROC
;;;102    
;;;103    bool time_after(char res, unsigned long *time_out)
000000  b530              PUSH     {r4,r5,lr}
;;;104    {
000002  4605              MOV      r5,r0
000004  460b              MOV      r3,r1
;;;105    	unsigned long i=(*time_out);
000006  681c              LDR      r4,[r3,#0]
;;;106    	ms_delay();
000008  f7fffffe          BL       ms_delay
;;;107    	if(i){
00000c  b11c              CBZ      r4,|L11.22|
;;;108    		*time_out=i-1;
00000e  1e60              SUBS     r0,r4,#1
000010  6018              STR      r0,[r3,#0]
;;;109    		return false;
000012  2000              MOVS     r0,#0
                  |L11.20|
;;;110    	}
;;;111    	return true;//time_out=0
;;;112    }
000014  bd30              POP      {r4,r5,pc}
                  |L11.22|
000016  2001              MOVS     r0,#1                 ;111
000018  e7fc              B        |L11.20|
;;;113    
                          ENDP


                          AREA ||i.void_dbg||, CODE, READONLY, ALIGN=1

                  void_dbg PROC
;;;43     
;;;44      void  void_dbg(void *fmt,...)
000000  4770              BX       lr
;;;45     {
;;;46         return;
;;;47     }
;;;48     
                          ENDP


                          AREA ||i.wpa_hexdump||, CODE, READONLY, ALIGN=1

                  wpa_hexdump PROC
;;;38     
;;;39      void wpa_hexdump(int level, const char *title, const u8 *buf, size_t len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;40      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;41     	 _wpa_hexdump(level, title, buf, len, 1);
00000a  2301              MOVS     r3,#1
00000c  9300              STR      r3,[sp,#0]
00000e  463b              MOV      r3,r7
000010  4632              MOV      r2,r6
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       _wpa_hexdump
;;;42      }
00001a  bdf8              POP      {r3-r7,pc}
;;;43     
                          ENDP


                          AREA ||i.wpa_hexdump_key||, CODE, READONLY, ALIGN=2

                  wpa_hexdump_key PROC
;;;33     
;;;34     void wpa_hexdump_key(int level, const char *title, const u8 *buf, size_t len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;35      {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
;;;36     	 _wpa_hexdump(level, title, buf, len, wpa_debug_show_keys);
00000a  4805              LDR      r0,|L14.32|
00000c  6803              LDR      r3,[r0,#0]  ; wpa_debug_show_keys
00000e  9300              STR      r3,[sp,#0]
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       _wpa_hexdump
;;;37      }
00001c  bdf8              POP      {r3-r7,pc}
;;;38     
                          ENDP

00001e  0000              DCW      0x0000
                  |L14.32|
                          DCD      wpa_debug_show_keys

                          AREA ||i.wpa_printf||, CODE, READONLY, ALIGN=2

                  wpa_printf PROC
;;;22     }
;;;23     void wpa_printf(int level, char *fmt, ...)
000000  b40f              PUSH     {r0-r3}
;;;24     {
000002  b538              PUSH     {r3-r5,lr}
000004  4604              MOV      r4,r0
;;;25     	va_list ap;
;;;26     	va_start(ap, fmt);
000006  a806              ADD      r0,sp,#0x18
000008  9000              STR      r0,[sp,#0]
;;;27     	if (level >= wpa_debug_level) {
00000a  4807              LDR      r0,|L15.40|
00000c  6800              LDR      r0,[r0,#0]  ; wpa_debug_level
00000e  4284              CMP      r4,r0
000010  db06              BLT      |L15.32|
;;;28     		vprintf(fmt, ap);
000012  9900              LDR      r1,[sp,#0]
000014  9805              LDR      r0,[sp,#0x14]
000016  f7fffffe          BL       __c89vprintf
;;;29     		printf("\n");
00001a  a004              ADR      r0,|L15.44|
00001c  f7fffffe          BL       __2printf
                  |L15.32|
;;;30     	}
;;;31     	va_end(ap);
;;;32     }
000020  bc38              POP      {r3-r5}
000022  f85dfb14          LDR      pc,[sp],#0x14
;;;33     
                          ENDP

000026  0000              DCW      0x0000
                  |L15.40|
                          DCD      wpa_debug_level
                  |L15.44|
00002c  0a00              DCB      "\n",0
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.xdbug_buf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  xdbug_buf PROC
;;;147    #define RUN_TEST printk("RUN_TEST >>> LINE:%d ,,, FUNCTION:%s ,,, FILE:%s \r\n",__LINE__,__FUNCTION__,__FILE__);
;;;148    static void xdbug_buf(const char * name , const unsigned char * buf , const int len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;150    	int i = 0;
00000a  2400              MOVS     r4,#0
;;;151    	printf("dbug buf [%s]\n",name);
00000c  4629              MOV      r1,r5
00000e  a008              ADR      r0,|L16.48|
000010  f7fffffe          BL       __2printf
;;;152    	for(;i<len;i++)
000014  e004              B        |L16.32|
                  |L16.22|
;;;153    	{
;;;154    		printf("0x%02x,",buf[i]);
000016  5d31              LDRB     r1,[r6,r4]
000018  a009              ADR      r0,|L16.64|
00001a  f7fffffe          BL       __2printf
00001e  1c64              ADDS     r4,r4,#1              ;152
                  |L16.32|
000020  42bc              CMP      r4,r7                 ;152
000022  dbf8              BLT      |L16.22|
;;;155    	}
;;;156    	printf("\n");
000024  a008              ADR      r0,|L16.72|
000026  f7fffffe          BL       __2printf
;;;157    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;158    #define DEBUG_PARAM_SDIO
                          ENDP

00002e  0000              DCW      0x0000
                  |L16.48|
000030  64627567          DCB      "dbug buf [%s]\n",0
000034  20627566
000038  205b2573
00003c  5d0a00  
00003f  00                DCB      0
                  |L16.64|
000040  30782530          DCB      "0x%02x,",0
000044  32782c00
                  |L16.72|
000048  0a00              DCB      "\n",0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  wpa_debug_show_keys
                          DCD      0x00000001
                  g_random
                          DCD      0x00000000
