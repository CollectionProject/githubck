; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\mschapv2.o --depend=.\obj\mschapv2.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\mschapv2.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\mschapv2.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L2.30|
00001a  2001              MOVS     r0,#1
                  |L2.28|
;;;495    }
00001c  4770              BX       lr
                  |L2.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L2.28|
;;;496    
                          ENDP


                          AREA ||i.mschapv2_derive_response||, CODE, READONLY, ALIGN=2

                  mschapv2_derive_response PROC
;;;41     
;;;42     int mschapv2_derive_response(const u8 *identity, size_t identity_len,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;43     			     const u8 *password, size_t password_len,
;;;44     			     int pwhash,
;;;45     			     const u8 *auth_challenge,
;;;46     			     const u8 *peer_challenge,
;;;47     			     u8 *nt_response, u8 *auth_response,
;;;48     			     u8 *master_key)
;;;49     {
000004  b08f              SUB      sp,sp,#0x3c
000006  4681              MOV      r9,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
00000c  461e              MOV      r6,r3
00000e  e9ddb81a          LDRD     r11,r8,[sp,#0x68]
000012  e9dda718          LDRD     r10,r7,[sp,#0x60]
;;;50     	const u8 *username;
;;;51     	size_t username_len;
;;;52     	u8 password_hash[16], password_hash_hash[16];
;;;53     
;;;54     	wpa_hexdump_ascii(MSG_DEBUG, "MSCHAPV2: Identity",
000016  4623              MOV      r3,r4
000018  464a              MOV      r2,r9
00001a  a147              ADR      r1,|L3.312|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       wpa_hexdump_ascii
;;;55     			  identity, identity_len);
;;;56     	username_len = identity_len;
000022  940d              STR      r4,[sp,#0x34]
;;;57     	username = mschapv2_remove_domain(identity, &username_len);
000024  a90d              ADD      r1,sp,#0x34
000026  4648              MOV      r0,r9
000028  f7fffffe          BL       mschapv2_remove_domain
00002c  900e              STR      r0,[sp,#0x38]
;;;58     	wpa_hexdump_ascii(MSG_DEBUG, "MSCHAPV2: Username",
00002e  a147              ADR      r1,|L3.332|
000030  2000              MOVS     r0,#0
000032  e9dd320d          LDRD     r3,r2,[sp,#0x34]
000036  f7fffffe          BL       wpa_hexdump_ascii
;;;59     			  username, username_len);
;;;60     
;;;61     	wpa_hexdump(MSG_DEBUG, "MSCHAPV2: auth_challenge",
00003a  2310              MOVS     r3,#0x10
00003c  463a              MOV      r2,r7
00003e  a148              ADR      r1,|L3.352|
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       wpa_hexdump
;;;62     		    auth_challenge, MSCHAPV2_CHAL_LEN);
;;;63     	wpa_hexdump(MSG_DEBUG, "MSCHAPV2: peer_challenge",
000046  2310              MOVS     r3,#0x10
000048  465a              MOV      r2,r11
00004a  a14c              ADR      r1,|L3.380|
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       wpa_hexdump
;;;64     		    peer_challenge, MSCHAPV2_CHAL_LEN);
;;;65     	wpa_hexdump_ascii(MSG_DEBUG, "MSCHAPV2: username",
000052  a151              ADR      r1,|L3.408|
000054  2000              MOVS     r0,#0
000056  e9dd320d          LDRD     r3,r2,[sp,#0x34]
00005a  f7fffffe          BL       wpa_hexdump_ascii
;;;66     			  username, username_len);
;;;67     	/* Authenticator response is not really needed yet, but calculate it
;;;68     	 * here so that challenges need not be saved. */
;;;69     	if (pwhash) {
00005e  f1ba0f00          CMP      r10,#0
000062  d019              BEQ      |L3.152|
;;;70     		wpa_hexdump_key(MSG_DEBUG, "MSCHAPV2: password hash",
000064  4633              MOV      r3,r6
000066  462a              MOV      r2,r5
000068  a150              ADR      r1,|L3.428|
00006a  2000              MOVS     r0,#0
00006c  f7fffffe          BL       wpa_hexdump_key
;;;71     				password, password_len);
;;;72     		generate_nt_response_pwhash(auth_challenge, peer_challenge,
000070  e9cd5800          STRD     r5,r8,[sp,#0]
000074  4659              MOV      r1,r11
000076  4638              MOV      r0,r7
000078  e9dd320d          LDRD     r3,r2,[sp,#0x34]
00007c  f7fffffe          BL       generate_nt_response_pwhash
;;;73     					    username, username_len,
;;;74     					    password, nt_response);
;;;75     		generate_authenticator_response_pwhash(
000080  9b1c              LDR      r3,[sp,#0x70]
000082  990d              LDR      r1,[sp,#0x34]
000084  e9cd8301          STRD     r8,r3,[sp,#4]
000088  9100              STR      r1,[sp,#0]
00008a  463a              MOV      r2,r7
00008c  4659              MOV      r1,r11
00008e  4628              MOV      r0,r5
000090  9b0e              LDR      r3,[sp,#0x38]
000092  f7fffffe          BL       generate_authenticator_response_pwhash
000096  e01a              B        |L3.206|
                  |L3.152|
;;;76     			password, peer_challenge, auth_challenge,
;;;77     			username, username_len, nt_response, auth_response);
;;;78     	} else {
;;;79     		wpa_hexdump_ascii_key(MSG_DEBUG, "MSCHAPV2: password",
000098  4633              MOV      r3,r6
00009a  462a              MOV      r2,r5
00009c  a149              ADR      r1,|L3.452|
00009e  2000              MOVS     r0,#0
0000a0  f7fffffe          BL       wpa_hexdump_ascii_key
;;;80     				      password, password_len);
;;;81     		generate_nt_response(auth_challenge, peer_challenge,
0000a4  e88d0160          STM      sp,{r5,r6,r8}
0000a8  4659              MOV      r1,r11
0000aa  4638              MOV      r0,r7
0000ac  e9dd320d          LDRD     r3,r2,[sp,#0x34]
0000b0  f7fffffe          BL       generate_nt_response
;;;82     				     username, username_len,
;;;83     				     password, password_len, nt_response);
;;;84     		generate_authenticator_response(password, password_len,
0000b4  9b1c              LDR      r3,[sp,#0x70]
0000b6  e9dd010d          LDRD     r0,r1,[sp,#0x34]
0000ba  e9cd8302          STRD     r8,r3,[sp,#8]
0000be  e9cd1000          STRD     r1,r0,[sp,#0]
0000c2  463b              MOV      r3,r7
0000c4  465a              MOV      r2,r11
0000c6  4631              MOV      r1,r6
0000c8  4628              MOV      r0,r5
0000ca  f7fffffe          BL       generate_authenticator_response
                  |L3.206|
;;;85     						peer_challenge, auth_challenge,
;;;86     						username, username_len,
;;;87     						nt_response, auth_response);
;;;88     	}
;;;89     	wpa_hexdump(MSG_DEBUG, "MSCHAPV2: NT Response",
0000ce  2318              MOVS     r3,#0x18
0000d0  4642              MOV      r2,r8
0000d2  a141              ADR      r1,|L3.472|
0000d4  2000              MOVS     r0,#0
0000d6  f7fffffe          BL       wpa_hexdump
;;;90     		    nt_response, MSCHAPV2_NT_RESPONSE_LEN);
;;;91     	wpa_hexdump(MSG_DEBUG, "MSCHAPV2: Auth Response",
0000da  2314              MOVS     r3,#0x14
0000dc  a144              ADR      r1,|L3.496|
0000de  2000              MOVS     r0,#0
0000e0  9a1c              LDR      r2,[sp,#0x70]
0000e2  f7fffffe          BL       wpa_hexdump
;;;92     		    auth_response, MSCHAPV2_AUTH_RESPONSE_LEN);
;;;93     
;;;94     	/* Generate master_key here since we have the needed data available. */
;;;95     	if (pwhash) {
0000e6  f1ba0f00          CMP      r10,#0
0000ea  d009              BEQ      |L3.256|
;;;96     		if (hash_nt_password_hash(password, password_hash_hash))
0000ec  a905              ADD      r1,sp,#0x14
0000ee  4628              MOV      r0,r5
0000f0  f7fffffe          BL       hash_nt_password_hash
0000f4  b190              CBZ      r0,|L3.284|
;;;97     			return -1;
0000f6  f04f30ff          MOV      r0,#0xffffffff
                  |L3.250|
;;;98     	} else {
;;;99     		if (nt_password_hash(password, password_len, password_hash) ||
;;;100    		    hash_nt_password_hash(password_hash, password_hash_hash))
;;;101    			return -1;
;;;102    	}
;;;103    	get_master_key(password_hash_hash, nt_response, master_key);
;;;104    	wpa_hexdump_key(MSG_DEBUG, "MSCHAPV2: Master Key",
;;;105    			master_key, MSCHAPV2_MASTER_KEY_LEN);
;;;106    
;;;107    	return 0;
;;;108    }
0000fa  b00f              ADD      sp,sp,#0x3c
0000fc  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.256|
000100  aa09              ADD      r2,sp,#0x24           ;99
000102  4631              MOV      r1,r6                 ;99
000104  4628              MOV      r0,r5                 ;99
000106  f7fffffe          BL       nt_password_hash
00010a  b920              CBNZ     r0,|L3.278|
00010c  a905              ADD      r1,sp,#0x14           ;100
00010e  a809              ADD      r0,sp,#0x24           ;100
000110  f7fffffe          BL       hash_nt_password_hash
000114  b110              CBZ      r0,|L3.284|
                  |L3.278|
000116  f04f30ff          MOV      r0,#0xffffffff        ;101
00011a  e7ee              B        |L3.250|
                  |L3.284|
00011c  4641              MOV      r1,r8                 ;103
00011e  a805              ADD      r0,sp,#0x14           ;103
000120  9a1d              LDR      r2,[sp,#0x74]         ;103
000122  f7fffffe          BL       get_master_key
000126  2310              MOVS     r3,#0x10              ;104
000128  a137              ADR      r1,|L3.520|
00012a  2000              MOVS     r0,#0                 ;104
00012c  9a1d              LDR      r2,[sp,#0x74]         ;104
00012e  f7fffffe          BL       wpa_hexdump_key
000132  2000              MOVS     r0,#0                 ;107
000134  e7e1              B        |L3.250|
;;;109    
                          ENDP

000136  0000              DCW      0x0000
                  |L3.312|
000138  4d534348          DCB      "MSCHAPV2: Identity",0
00013c  41505632
000140  3a204964
000144  656e7469
000148  747900  
00014b  00                DCB      0
                  |L3.332|
00014c  4d534348          DCB      "MSCHAPV2: Username",0
000150  41505632
000154  3a205573
000158  65726e61
00015c  6d6500  
00015f  00                DCB      0
                  |L3.352|
000160  4d534348          DCB      "MSCHAPV2: auth_challenge",0
000164  41505632
000168  3a206175
00016c  74685f63
000170  68616c6c
000174  656e6765
000178  00      
000179  00                DCB      0
00017a  00                DCB      0
00017b  00                DCB      0
                  |L3.380|
00017c  4d534348          DCB      "MSCHAPV2: peer_challenge",0
000180  41505632
000184  3a207065
000188  65725f63
00018c  68616c6c
000190  656e6765
000194  00      
000195  00                DCB      0
000196  00                DCB      0
000197  00                DCB      0
                  |L3.408|
000198  4d534348          DCB      "MSCHAPV2: username",0
00019c  41505632
0001a0  3a207573
0001a4  65726e61
0001a8  6d6500  
0001ab  00                DCB      0
                  |L3.428|
0001ac  4d534348          DCB      "MSCHAPV2: password hash",0
0001b0  41505632
0001b4  3a207061
0001b8  7373776f
0001bc  72642068
0001c0  61736800
                  |L3.452|
0001c4  4d534348          DCB      "MSCHAPV2: password",0
0001c8  41505632
0001cc  3a207061
0001d0  7373776f
0001d4  726400  
0001d7  00                DCB      0
                  |L3.472|
0001d8  4d534348          DCB      "MSCHAPV2: NT Response",0
0001dc  41505632
0001e0  3a204e54
0001e4  20526573
0001e8  706f6e73
0001ec  6500    
0001ee  00                DCB      0
0001ef  00                DCB      0
                  |L3.496|
0001f0  4d534348          DCB      "MSCHAPV2: Auth Response",0
0001f4  41505632
0001f8  3a204175
0001fc  74682052
000200  6573706f
000204  6e736500
                  |L3.520|
000208  4d534348          DCB      "MSCHAPV2: Master Key",0
00020c  41505632
000210  3a204d61
000214  73746572
000218  204b6579
00021c  00      
00021d  00                DCB      0
00021e  00                DCB      0
00021f  00                DCB      0

                          AREA ||i.mschapv2_remove_domain||, CODE, READONLY, ALIGN=1

                  mschapv2_remove_domain PROC
;;;20     
;;;21     const u8 * mschapv2_remove_domain(const u8 *username, size_t *len)
000000  b510              PUSH     {r4,lr}
;;;22     {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;23     	size_t i;
;;;24     
;;;25     	/*
;;;26     	 * MSCHAPv2 does not include optional domain name in the
;;;27     	 * challenge-response calculation, so remove domain prefix
;;;28     	 * (if present).
;;;29     	 */
;;;30     
;;;31     	for (i = 0; i < *len; i++) {
000006  2100              MOVS     r1,#0
000008  e00a              B        |L4.32|
                  |L4.10|
;;;32     		if (username[i] == '\\') {
00000a  5c58              LDRB     r0,[r3,r1]
00000c  285c              CMP      r0,#0x5c
00000e  d106              BNE      |L4.30|
;;;33     			*len -= i + 1;
000010  1c48              ADDS     r0,r1,#1
000012  6814              LDR      r4,[r2,#0]
000014  1a20              SUBS     r0,r4,r0
000016  6010              STR      r0,[r2,#0]
;;;34     			return username + i + 1;
000018  1858              ADDS     r0,r3,r1
00001a  1c40              ADDS     r0,r0,#1
                  |L4.28|
;;;35     		}
;;;36     	}
;;;37     
;;;38     	return username;
;;;39     }
00001c  bd10              POP      {r4,pc}
                  |L4.30|
00001e  1c49              ADDS     r1,r1,#1              ;31
                  |L4.32|
000020  6810              LDR      r0,[r2,#0]            ;31
000022  4288              CMP      r0,r1                 ;31
000024  d8f1              BHI      |L4.10|
000026  4618              MOV      r0,r3                 ;38
000028  e7f8              B        |L4.28|
;;;40     
                          ENDP


                          AREA ||i.mschapv2_verify_auth_response||, CODE, READONLY, ALIGN=1

                  mschapv2_verify_auth_response PROC
;;;110    
;;;111    int mschapv2_verify_auth_response(const u8 *auth_response,
000000  b570              PUSH     {r4-r6,lr}
;;;112    				  const u8 *buf, size_t buf_len)
;;;113    {
000002  b086              SUB      sp,sp,#0x18
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;114    	u8 recv_response[MSCHAPV2_AUTH_RESPONSE_LEN];
;;;115    	if (buf_len < 2 + 2 * MSCHAPV2_AUTH_RESPONSE_LEN ||
00000a  2d2a              CMP      r5,#0x2a
00000c  d311              BCC      |L5.50|
;;;116    	    buf[0] != 'S' || buf[1] != '=' ||
00000e  7820              LDRB     r0,[r4,#0]
000010  2853              CMP      r0,#0x53
000012  d10e              BNE      |L5.50|
000014  7860              LDRB     r0,[r4,#1]
000016  283d              CMP      r0,#0x3d
000018  d10b              BNE      |L5.50|
;;;117    	    hexstr2bin((char *) (buf + 2), recv_response,
00001a  2214              MOVS     r2,#0x14
00001c  a901              ADD      r1,sp,#4
00001e  1ca0              ADDS     r0,r4,#2
000020  f7fffffe          BL       hexstr2bin
000024  b928              CBNZ     r0,|L5.50|
;;;118    		       MSCHAPV2_AUTH_RESPONSE_LEN) ||
;;;119    	    os_memcmp(auth_response, recv_response,
000026  2214              MOVS     r2,#0x14
000028  a901              ADD      r1,sp,#4
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       os_memcmp
000030  b118              CBZ      r0,|L5.58|
                  |L5.50|
;;;120    		      MSCHAPV2_AUTH_RESPONSE_LEN) != 0)
;;;121    		return -1;
000032  f04f30ff          MOV      r0,#0xffffffff
                  |L5.54|
;;;122    	return 0;
;;;123    }
000036  b006              ADD      sp,sp,#0x18
000038  bd70              POP      {r4-r6,pc}
                  |L5.58|
00003a  2000              MOVS     r0,#0                 ;122
00003c  e7fb              B        |L5.54|
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L10.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L10.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L10.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L10.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L13.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L13.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L13.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L13.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L19.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L19.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

