<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\wifi.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\wifi.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 4.1 [Build 481]: Last Updated: Sun Dec 22 08:53:41 2013
<BR><P>
<H3>Maximum Stack Usage =       4448 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
if_sdio_host_to_card &rArr; if_sdio_host_to_card_worker &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4a]">fputc</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4a]">fputc</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a> from stm32f10x.o(.text) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1]">NMIException</a> from stm32f10x_it.o(i.NMIException) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2]">HardFaultException</a> from stm32f10x_it.o(i.HardFaultException) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3]">MemManageException</a> from stm32f10x_it.o(i.MemManageException) referenced from stm32f10x.o(RESET)
 <LI><a href="#[4]">BusFaultException</a> from stm32f10x_it.o(i.BusFaultException) referenced from stm32f10x.o(RESET)
 <LI><a href="#[5]">UsageFaultException</a> from stm32f10x_it.o(i.UsageFaultException) referenced from stm32f10x.o(RESET)
 <LI><a href="#[6]">SVCHandler</a> from stm32f10x_it.o(i.SVCHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[7]">DebugMonitor</a> from stm32f10x_it.o(i.DebugMonitor) referenced from stm32f10x.o(RESET)
 <LI><a href="#[8]">PendSVC</a> from stm32f10x_it.o(i.PendSVC) referenced from stm32f10x.o(RESET)
 <LI><a href="#[9]">SysTickHandler</a> from stm32f10x_it.o(i.SysTickHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from stm32f10x_it.o(i.WWDG_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from stm32f10x_it.o(i.PVD_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from stm32f10x_it.o(i.TAMPER_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from stm32f10x_it.o(i.RTC_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from stm32f10x_it.o(i.FLASH_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from stm32f10x_it.o(i.RCC_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x_it.o(i.EXTI0_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x_it.o(i.EXTI1_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from stm32f10x_it.o(i.EXTI2_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from stm32f10x_it.o(i.EXTI3_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f10x_it.o(i.EXTI4_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[15]">DMAChannel1_IRQHandler</a> from stm32f10x_it.o(i.DMAChannel1_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[16]">DMAChannel2_IRQHandler</a> from stm32f10x_it.o(i.DMAChannel2_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[17]">DMAChannel3_IRQHandler</a> from stm32f10x_it.o(i.DMAChannel3_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[18]">DMAChannel4_IRQHandler</a> from stm32f10x_it.o(i.DMAChannel4_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[19]">DMAChannel5_IRQHandler</a> from stm32f10x_it.o(i.DMAChannel5_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1a]">DMAChannel6_IRQHandler</a> from stm32f10x_it.o(i.DMAChannel6_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1b]">DMAChannel7_IRQHandler</a> from stm32f10x_it.o(i.DMAChannel7_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from stm32f10x_it.o(i.ADC_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN_TX_IRQHandler</a> from stm32f10x_it.o(i.USB_HP_CAN_TX_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN_RX0_IRQHandler</a> from stm32f10x_it.o(i.USB_LP_CAN_RX0_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[1f]">CAN_RX1_IRQHandler</a> from stm32f10x_it.o(i.CAN_RX1_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[20]">CAN_SCE_IRQHandler</a> from stm32f10x_it.o(i.CAN_SCE_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(i.EXTI9_5_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from stm32f10x_it.o(i.TIM1_BRK_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from stm32f10x_it.o(i.TIM1_UP_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from stm32f10x_it.o(i.TIM1_TRG_COM_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from stm32f10x_it.o(i.TIM1_CC_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from stm32f10x_it.o(i.TIM2_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f10x_it.o(i.TIM3_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from stm32f10x_it.o(i.TIM4_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from stm32f10x_it.o(i.I2C1_EV_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from stm32f10x_it.o(i.I2C1_ER_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from stm32f10x_it.o(i.I2C2_EV_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from stm32f10x_it.o(i.I2C2_ER_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from stm32f10x_it.o(i.SPI1_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from stm32f10x_it.o(i.SPI2_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from stm32f10x_it.o(i.USART2_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f10x_it.o(i.USART3_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(i.EXTI15_10_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from stm32f10x_it.o(i.RTCAlarm_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from stm32f10x_it.o(i.USBWakeUp_IRQHandler) referenced from stm32f10x.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHander</a> from stm32f10x_it.o(i.TIM8_BRK_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHander</a> from stm32f10x_it.o(i.TIM8_UP_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHander</a> from stm32f10x_it.o(i.TIM8_TRG_COM_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHander</a> from stm32f10x_it.o(i.TIM8_CC_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHander</a> from stm32f10x_it.o(i.ADC3_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHander</a> from stm32f10x_it.o(i.FSMC_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHander</a> from stm32f10x_it.o(i.SDIO_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHander</a> from stm32f10x_it.o(i.TIM5_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHander</a> from stm32f10x_it.o(i.SPI3_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHander</a> from stm32f10x_it.o(i.UART4_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHander</a> from stm32f10x_it.o(i.UART5_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHander</a> from stm32f10x_it.o(i.TIM6_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHander</a> from stm32f10x_it.o(i.TIM7_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHander</a> from stm32f10x_it.o(i.DMA2_Channel1_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHander</a> from stm32f10x_it.o(i.DMA2_Channel2_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHander</a> from stm32f10x_it.o(i.DMA2_Channel3_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHander</a> from stm32f10x_it.o(i.DMA2_Channel4_5_IRQHander) referenced from stm32f10x.o(RESET)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry7.o(.ARM.Collect$$$$00000007)
 <LI><a href="#[47]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from stm32f10x.o(.text)
 <LI><a href="#[48]">ethernet_input</a> from etharp.o(i.ethernet_input) referenced from lwip.o(i.Init_lwIP)
 <LI><a href="#[49]">ethernetif_init</a> from ethernetif.o(i.ethernetif_init) referenced from lwip.o(i.Init_lwIP)
 <LI><a href="#[4a]">fputc</a> from system.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4b]">_snputc</a> from printf8.o(i._snputc) referenced from printf8.o(i.__0snprintf$8)
 <LI><a href="#[4c]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[4a]">fputc</a> from system.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[4d]">dhcp_recv</a> from dhcp.o(i.dhcp_recv) referenced from dhcp.o(i.dhcp_start)
 <LI><a href="#[4e]">dns_recv</a> from dns.o(i.dns_recv) referenced from dns.o(i.dns_init)
 <LI><a href="#[4f]">etharp_output</a> from etharp.o(i.etharp_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[50]">low_level_output</a> from ethernetif.o(i.low_level_output) referenced from ethernetif.o(i.ethernetif_init)
 <LI><a href="#[51]">http_recv</a> from sample_http.o(i.http_recv) referenced from sample_http.o(i.http_accept)
 <LI><a href="#[52]">conn_err</a> from sample_http.o(i.conn_err) referenced from sample_http.o(i.http_accept)
 <LI><a href="#[53]">http_sent</a> from sample_http.o(i.http_sent) referenced from sample_http.o(i.http_recv)
 <LI><a href="#[54]">http_accept</a> from sample_http.o(i.http_accept) referenced from sample_http.o(i.httpd_init)
 <LI><a href="#[55]">if_sdio_interrupt</a> from if_sdio.o(i.if_sdio_interrupt) referenced from if_sdio.o(i.if_sdio_probe)
 <LI><a href="#[56]">if_sdio_host_to_card</a> from if_sdio.o(i.if_sdio_host_to_card) referenced from if_sdio.o(i.if_sdio_probe)
 <LI><a href="#[57]">stm32_request</a> from s3cmci.o(i.stm32_request) referenced from s3cmci.o(i.init_stm32_struct)
 <LI><a href="#[58]">stm32_set_ios</a> from s3cmci.o(i.stm32_set_ios) referenced from s3cmci.o(i.init_stm32_struct)
 <LI><a href="#[59]">stm32_get_ro</a> from s3cmci.o(i.stm32_get_ro) referenced from s3cmci.o(i.init_stm32_struct)
 <LI><a href="#[5a]">stm32_card_present</a> from s3cmci.o(i.stm32_card_present) referenced from s3cmci.o(i.init_stm32_struct)
 <LI><a href="#[5b]">stm32_enable_sdio_irq</a> from s3cmci.o(i.stm32_enable_sdio_irq) referenced from s3cmci.o(i.init_stm32_struct)
 <LI><a href="#[5c]">lbs_cmd_async_callback</a> from cmd.o(i.lbs_cmd_async_callback) referenced from cmd.o(i.lbs_cmd_async)
 <LI><a href="#[5d]">lbs_cmd_copyback</a> from cmd.o(i.lbs_cmd_copyback) referenced from cmd.o(i.lbs_cmd_with_response)
 <LI><a href="#[5c]">lbs_cmd_async_callback</a> from cmd.o(i.lbs_cmd_async_callback) referenced from cmd.o(i.lbs_complete_command)
 <LI><a href="#[5e]">lbs_ret_80211_scan</a> from scan.o(i.lbs_ret_80211_scan) referenced from scan.o(i.lbs_do_scan)
 <LI><a href="#[5f]">mmc_wait_done</a> from core.o(i.mmc_wait_done) referenced from core.o(i.mmc_wait_for_req)
 <LI><a href="#[60]">server_recv</a> from netapp.o(i.server_recv) referenced from netapp.o(i.server_accept)
 <LI><a href="#[61]">tcp_recv_null</a> from tcp.o(i.tcp_recv_null) referenced from tcp.o(i.tcp_alloc)
 <LI><a href="#[62]">tcp_accept_null</a> from tcp.o(i.tcp_accept_null) referenced from tcp.o(i.tcp_listen_with_backlog)
 <LI><a href="#[63]">server_accept</a> from netapp.o(i.server_accept) referenced from netapp.o(i.tcp_server_init)
 <LI><a href="#[64]">cistpl_vers_1</a> from sdio_cis.o(i.cistpl_vers_1) referenced from sdio_cis.o(.constdata)
 <LI><a href="#[65]">cistpl_manfid</a> from sdio_cis.o(i.cistpl_manfid) referenced from sdio_cis.o(.constdata)
 <LI><a href="#[66]">cistpl_funce</a> from sdio_cis.o(i.cistpl_funce) referenced from sdio_cis.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[47]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(.text)
</UL>
<P><STRONG><a name="[2e7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[67]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7.o(.ARM.Collect$$$$00000007))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ssid
</UL>

<P><STRONG><a name="[1cf]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_region_2_code
</UL>

<P><STRONG><a name="[2e9]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_add_ssid_tlv
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_add_chanlist_tlv
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_bss
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_key_material
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_cmd
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_network_ssid
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_assoc_post
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_post
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvel_adhoc_assoc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_keys
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_ie
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wep_keys
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_sendpbuf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_cgi
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_copyback
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_one_wpa_key
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_fwt_access
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_set_wep
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
</UL>

<P><STRONG><a name="[2ea]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_setup_firmware
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
</UL>

<P><STRONG><a name="[2ec]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_ie
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_sendpbuf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_cgi
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_11d
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_allocate_cmd_buffer
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_fwt_access
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cleanup_and_insert_cmd
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_select_card
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_alloc_func
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_alloc_host
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_alloc_card
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bss_descriptor
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_key_material
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_add_card
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_snmp_mib
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_channel
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_remove_wep_keys
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_set_wep
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_open_network
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_channel
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_allocate_cmd_buffer
</UL>

<P><STRONG><a name="[2ee]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>_memset$wrapper</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[eb]"></a>strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_vers_1
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvel_adhoc_assoc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[170]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[14b]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_same_network
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_rxed_packet
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ssid_cmp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_trans
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_region_2_code
</UL>

<P><STRONG><a name="[ea]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_vers_1
</UL>

<P><STRONG><a name="[2ef]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2f0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6f]"></a>__aeabi_dadd</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_dmul</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[68]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2f1]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2f2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[2f3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2f4]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[71]"></a>_double_epilogue</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2f5]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>__decompress1</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>ADC3_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.ADC3_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.ADC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFaultException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFaultException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2f7]"></a>BusFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFaultException), UNUSED)

<P><STRONG><a name="[1f]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.CAN_RX1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.CAN_SCE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel1_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel2_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel3_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMA2_Channel4_5_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMAChannel1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMAChannel2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMAChannel3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMAChannel4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMAChannel5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMAChannel6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMAChannel7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DMAChannel7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA_ClearFlag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
</UL>

<P><STRONG><a name="[7b]"></a>DMA_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
</UL>

<P><STRONG><a name="[225]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_dma
</UL>

<P><STRONG><a name="[7c]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
</UL>

<P><STRONG><a name="[2f8]"></a>DebugMon_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMonitor), UNUSED)

<P><STRONG><a name="[7]"></a>DebugMonitor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMonitor))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>DisableIrq</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, s3cmci.o(i.DisableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DisableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_irq
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_disable_irq
</UL>

<P><STRONG><a name="[be]"></a>ERR_PTR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(i.ERR_PTR))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>EnableIrq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, s3cmci.o(i.EnableIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EnableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_probe
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_irq
</UL>

<P><STRONG><a name="[25d]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[81]"></a>FLASH_ErasePage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[84]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FLASH_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25e]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[9e]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_PrefetchBufferCmd))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[83]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f10x_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[9d]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_SetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[25c]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[82]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, stm32f10x_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[3a]"></a>FSMC_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.FSMC_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>GPIO_Configuration</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, system.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>GPIO_Init</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[87]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[2]"></a>HardFaultException</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFaultException))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFaultException &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2f9]"></a>HardFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFaultException), UNUSED)

<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C1_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_ER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.I2C2_EV_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>IS_ERR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, common.o(i.IS_ERR))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
</UL>

<P><STRONG><a name="[1e4]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_dog_config
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[258]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_dog_config
</UL>

<P><STRONG><a name="[259]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_dog_config
</UL>

<P><STRONG><a name="[257]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_dog_config
</UL>

<P><STRONG><a name="[89]"></a>Init_lwIP</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, lwip.o(i.Init_lwIP))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = Init_lwIP &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerbase_config
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_default
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManageException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManageException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2fa]"></a>MemManage_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManageException), UNUSED)

<P><STRONG><a name="[1]"></a>NMIException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMIException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2fb]"></a>NMI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMIException), UNUSED)

<P><STRONG><a name="[94]"></a>NVIC_Configuration</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, system.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[152]"></a>NVIC_GenerateSystemReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_GenerateSystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[7f]"></a>NVIC_Init</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, stm32f10x_nvic.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
</UL>

<P><STRONG><a name="[95]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_nvic.o(i.NVIC_SetVectorTable))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[ba]"></a>PTR_ERR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(i.PTR_ERR))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
</UL>

<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PVD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSVC</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSVC))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2fc]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PendSVC), UNUSED)

<P><STRONG><a name="[a0]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[a7]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[a6]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[a5]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[96]"></a>RCC_Configuration</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, system.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_Configuration &rArr; RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSYSCLKSource
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_PrefetchBufferCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>RCC_DeInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[ae]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[a2]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[a4]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetSYSCLKSource))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[9a]"></a>RCC_HCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[98]"></a>RCC_HSEConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_HSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RCC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>RCC_PCLK1Config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK1Config))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[9b]"></a>RCC_PCLK2Config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PCLK2Config))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[a1]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[9f]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[a3]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[99]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_WaitForHSEStartUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_WaitForHSEStartUp
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTCAlarm_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>SDIO_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_dma
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
</UL>

<P><STRONG><a name="[22f]"></a>SDIO_ClockCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_ios
</UL>

<P><STRONG><a name="[231]"></a>SDIO_DMACmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[230]"></a>SDIO_DataConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_DataConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_DataConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[3b]"></a>SDIO_IRQHander</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SDIO_IRQHander))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SDIO_IRQHander &rArr; stm32_irq &rArr; mmc_signal_sdio_irq &rArr; sdio_irq_thread &rArr; process_sdio_pending_irqs &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>SDIO_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_dma
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_imask
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_imask
</UL>

<P><STRONG><a name="[22d]"></a>SDIO_Init</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f10x_sdio.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_clk
</UL>

<P><STRONG><a name="[22a]"></a>SDIO_SendCommand</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_sdio.o(i.SDIO_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_command
</UL>

<P><STRONG><a name="[22e]"></a>SDIO_SetPowerState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_sdio.o(i.SDIO_SetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_ios
</UL>

<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SPI3_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVCHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2fd]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVCHandler), UNUSED)

<P><STRONG><a name="[9]"></a>SysTickHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTickHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2fe]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SysTickHandler), UNUSED)

<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TAMPER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_BRK_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_CC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_TRG_COM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM1_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM2_IRQHandler &rArr; timer2_int
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM4_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM5_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM6_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM7_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_BRK_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_CC_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_TRG_COM_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.TIM8_UP_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[253]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_int
</UL>

<P><STRONG><a name="[120]"></a>TIM_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerbase_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer
</UL>

<P><STRONG><a name="[252]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_int
</UL>

<P><STRONG><a name="[256]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerbase_config
</UL>

<P><STRONG><a name="[255]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_PrescalerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerbase_config
</UL>

<P><STRONG><a name="[254]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timerbase_config
</UL>

<P><STRONG><a name="[3e]"></a>UART4_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UART4_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHander</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UART5_IRQHander))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>USART_ClockInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[ad]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[aa]"></a>USART_Configuration</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, system.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Configuration &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[ac]"></a>USART_Init</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[140]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USBWakeUp_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN_TX_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_HP_CAN_TX_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN_RX0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USB_LP_CAN_RX0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFaultException</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFaultException))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[2ff]"></a>UsageFault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFaultException), UNUSED)

<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.WWDG_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> stm32f10x.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[300]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[88]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultException
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_ios
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_probe
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_request_done
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_add_card
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_bss
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_data_end
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_rev_pkt
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvell_driver
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_rxed_packet
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_add_card
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_deauth_infrastructure
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_authentication
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_assoc_post
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_post
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iw_auth_to_ieee_auth
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_network_compatible
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvel_adhoc_assoc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_secinfo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_channel
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_recv
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print_state
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print_flags
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_async
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
</UL>

<P><STRONG><a name="[b1]"></a>__0snprintf$8</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[301]"></a>__1snprintf$8</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8), UNUSED)

<P><STRONG><a name="[216]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf8.o(i.__0snprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ssid
</UL>

<P><STRONG><a name="[b2]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[302]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[14d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_add_card
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_cgi
</UL>

<P><STRONG><a name="[b3]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[303]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[304]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[25a]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_printf
</UL>

<P><STRONG><a name="[305]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[b7]"></a>__lbs_cmd</STRONG> (Thumb, 200 bytes, Stack size 64 bytes, cmd.o(i.__lbs_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464<LI>Call Chain = __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTR_ERR
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IS_ERR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_sdio_interrupt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cleanup_and_insert_cmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>

<P><STRONG><a name="[306]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[307]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[308]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[e5]"></a>clear_bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, assoc.o(i.clear_bit))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_keys
</UL>

<P><STRONG><a name="[ed]"></a>clear_wpa_wpa2_info</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cmd.o(i.clear_wpa_wpa2_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 3592<LI>Call Chain = clear_wpa_wpa2_info &rArr; lbs_set_key_material &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_key_material
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[1e3]"></a>config_delay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, parmcfg.o(i.config_delay))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[232]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(i.convert_from_bytes_to_power_of_two))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[f5]"></a>dhcp_arp_reply</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_arp_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[8f]"></a>dhcp_start</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
</UL>

<P><STRONG><a name="[11b]"></a>dhcp_stop</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dhcp_stop &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[11f]"></a>disable_timer</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system.o(i.disable_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disable_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_thread
</UL>

<P><STRONG><a name="[91]"></a>dns_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dns.o(i.dns_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dns_init &rArr; udp_new &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
</UL>

<P><STRONG><a name="[92]"></a>dns_setserver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dns.o(i.dns_setserver))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[126]"></a>enable_timer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, system.o(i.enable_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_thread
</UL>

<P><STRONG><a name="[127]"></a>etharp_arp_input</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, etharp.o(i.etharp_arp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = etharp_arp_input &rArr; dhcp_arp_reply &rArr; dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[129]"></a>etharp_ip_input</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, etharp.o(i.etharp_ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = etharp_ip_input &rArr; update_arp_entry &rArr; find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[4f]"></a>etharp_output</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, etharp.o(i.etharp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[fe]"></a>etharp_query</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, etharp.o(i.etharp_query))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[12e]"></a>etharp_request</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, etharp.o(i.etharp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
</UL>

<P><STRONG><a name="[48]"></a>ethernet_input</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, etharp.o(i.ethernet_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = ethernet_input &rArr; ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip.o(i.Init_lwIP)
</UL>
<P><STRONG><a name="[49]"></a>ethernetif_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ethernetif_init &rArr; low_level_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip.o(i.Init_lwIP)
</UL>
<P><STRONG><a name="[135]"></a>ethernetif_input</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ethernetif.o(i.ethernetif_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 3472<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; lbs_rev_pkt &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>fputc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, system.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = fputc &rArr;  fputc (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printf8.o(i.__0printf$8)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[90]"></a>htonl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inet.o(i.htonl))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[121]"></a>htons</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inet.o(i.htons))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[154]"></a>httpd_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sample_http.o(i.httpd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = httpd_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[159]"></a>icmp_dest_unreach</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_dest_unreach))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[15b]"></a>icmp_input</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, icmp.o(i.icmp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = icmp_input &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[160]"></a>icmp_time_exceeded</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, icmp.o(i.icmp_time_exceeded))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_forward
</UL>

<P><STRONG><a name="[55]"></a>if_sdio_interrupt</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, if_sdio.o(i.if_sdio_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400<LI>Call Chain = if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_host_to_card_done
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_rev_pkt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_async
</UL>
<BR>[Address Reference Count : 1]<UL><LI> if_sdio.o(i.if_sdio_probe)
</UL>
<P><STRONG><a name="[16f]"></a>if_sdio_probe</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, if_sdio.o(i.if_sdio_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 3960<LI>Call Chain = if_sdio_probe &rArr; if_sdio_prog_firmware &rArr; if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_start_card
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_add_card
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_scratch
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_probe
</UL>

<P><STRONG><a name="[17a]"></a>if_sdio_send_data</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, if_sdio.o(i.if_sdio_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 3376<LI>Call Chain = if_sdio_send_data &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_align_size
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_sendpbuf
</UL>

<P><STRONG><a name="[15d]"></a>inet_chksum</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, inet_chksum.o(i.inet_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[15c]"></a>inet_chksum_pbuf</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, inet_chksum.o(i.inet_chksum_pbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[17c]"></a>inet_chksum_pseudo</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, inet_chksum.o(i.inet_chksum_pseudo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[17e]"></a>init_marvell_driver</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, marvell_ops.o(i.init_marvell_driver))
<BR><BR>[Stack]<UL><LI>Max Depth = 4000<LI>Call Chain = init_marvell_driver &rArr; sdio_bus_probe &rArr; if_sdio_probe &rArr; if_sdio_prog_firmware &rArr; if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_probe
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_probe
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12b]"></a>ip_addr_isbroadcast</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, ip_addr.o(i.ip_addr_isbroadcast))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ip_addr_isbroadcast
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[184]"></a>ip_frag</STRONG> (Thumb, 334 bytes, Stack size 72 bytes, ip_frag.o(i.ip_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[133]"></a>ip_input</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, ip.o(i.ip_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = ip_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[15f]"></a>ip_output</STRONG> (Thumb, 56 bytes, Stack size 48 bytes, ip.o(i.ip_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[15e]"></a>ip_output_if</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, ip.o(i.ip_output_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
</UL>

<P><STRONG><a name="[187]"></a>ip_reass</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, ip_frag.o(i.ip_reass))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = ip_reass &rArr; ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[183]"></a>ip_route</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ip.o(i.ip_route))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_is_up
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
</UL>

<P><STRONG><a name="[223]"></a>jdq_pro</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, netapp.o(i.jdq_pro))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_recv
</UL>

<P><STRONG><a name="[174]"></a>lbs_add_card</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, marvel_main.o(i.lbs_add_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lbs_add_card &rArr; lbs_init_adapter &rArr; lbs_allocate_cmd_buffer &rArr; lbs_cleanup_and_insert_cmd &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[19e]"></a>lbs_adhoc_stop</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, assoc.o(i.lbs_adhoc_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 3520<LI>Call Chain = lbs_adhoc_stop &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[19f]"></a>lbs_allocate_cmd_buffer</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, cmd.o(i.lbs_allocate_cmd_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lbs_allocate_cmd_buffer &rArr; lbs_cleanup_and_insert_cmd &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cleanup_and_insert_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
</UL>

<P><STRONG><a name="[1a3]"></a>lbs_association_worker</STRONG> (Thumb, 806 bytes, Stack size 96 bytes, assoc.o(i.lbs_association_worker))
<BR><BR>[Stack]<UL><LI>Max Depth = 4280<LI>Call Chain = lbs_association_worker &rArr; assoc_helper_associate &rArr; assoc_helper_essid &rArr; lbs_try_associate &rArr; lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ssid
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_remove_wep_keys
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wpa_wpa2_info
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_enckey
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_80211_deauthenticate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_stop
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_stop_adhoc
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_deauth_infrastructure
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_network_ssid
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_keys
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_ie
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wep_keys
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_secinfo
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_mode
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_channel
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_associate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_open_network
</UL>

<P><STRONG><a name="[1aa]"></a>lbs_cmd_80211_deauthenticate</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, assoc.o(i.lbs_cmd_80211_deauthenticate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3536<LI>Call Chain = lbs_cmd_80211_deauthenticate &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[e0]"></a>lbs_cmd_802_11_enable_rsn</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, cmd.o(i.lbs_cmd_802_11_enable_rsn))
<BR><BR>[Stack]<UL><LI>Max Depth = 3528<LI>Call Chain = lbs_cmd_802_11_enable_rsn &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_secinfo
</UL>

<P><STRONG><a name="[e6]"></a>lbs_cmd_802_11_key_material</STRONG> (Thumb, 306 bytes, Stack size 160 bytes, cmd.o(i.lbs_cmd_802_11_key_material))
<BR><BR>[Stack]<UL><LI>Max Depth = 3656<LI>Call Chain = lbs_cmd_802_11_key_material &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_one_wpa_key
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_keys
</UL>

<P><STRONG><a name="[e2]"></a>lbs_cmd_802_11_set_wep</STRONG> (Thumb, 190 bytes, Stack size 112 bytes, cmd.o(i.lbs_cmd_802_11_set_wep))
<BR><BR>[Stack]<UL><LI>Max Depth = 3608<LI>Call Chain = lbs_cmd_802_11_set_wep &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wep_keys
</UL>

<P><STRONG><a name="[1ae]"></a>lbs_cmd_async</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, cmd.o(i.lbs_cmd_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 3440<LI>Call Chain = lbs_cmd_async &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_sdio_interrupt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_mac_control
</UL>

<P><STRONG><a name="[5d]"></a>lbs_cmd_copyback</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, cmd.o(i.lbs_cmd_copyback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lbs_cmd_copyback &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(i.lbs_cmd_with_response)
</UL>
<P><STRONG><a name="[19c]"></a>lbs_cmd_with_response</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, cmd.o(i.lbs_cmd_with_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 3496<LI>Call Chain = lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_key_material
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_snmp_mib
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_radio
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_channel
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_remove_wep_keys
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_set_wep
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_enable_rsn
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_80211_deauthenticate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_stop
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_authentication
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_tx_power
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_channel
</UL>

<P><STRONG><a name="[1b1]"></a>lbs_complete_command</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cmd.o(i.lbs_complete_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cleanup_and_insert_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_command_response
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
</UL>

<P><STRONG><a name="[1b7]"></a>lbs_execute_next_command</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, cmd.o(i.lbs_execute_next_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lbs_execute_next_command &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_complete_command
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_submit_command
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_command_allowed_in_ps
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
</UL>

<P><STRONG><a name="[1be]"></a>lbs_get_channel</STRONG> (Thumb, 56 bytes, Stack size 64 bytes, cmd.o(i.lbs_get_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560<LI>Call Chain = lbs_get_channel &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_channel
</UL>

<P><STRONG><a name="[1d1]"></a>lbs_get_region_cfp_table</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, marvel_main.o(i.lbs_get_region_cfp_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lbs_get_region_cfp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_region_chan_supported_11d
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_regiontable
</UL>

<P><STRONG><a name="[1bf]"></a>lbs_get_tx_power</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, cmd.o(i.lbs_get_tx_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 3536<LI>Call Chain = lbs_get_tx_power &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_setup_firmware
</UL>

<P><STRONG><a name="[143]"></a>lbs_hex</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, common.o(i.lbs_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lbs_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_rxed_packet
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_assoc_post
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_domain_info_11d
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_domain_info_11d
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_bt_access
</UL>

<P><STRONG><a name="[16e]"></a>lbs_host_to_card_done</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, marvel_main.o(i.lbs_host_to_card_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lbs_host_to_card_done &rArr; lbs_thread &rArr; lbs_process_command_response &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
</UL>

<P><STRONG><a name="[1c0]"></a>lbs_init_11d</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, 11d.o(i.lbs_init_11d))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lbs_init_11d
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_start_card
</UL>

<P><STRONG><a name="[19b]"></a>lbs_parse_dnld_countryinfo_11d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, 11d.o(i.lbs_parse_dnld_countryinfo_11d))
<BR><BR>[Stack]<UL><LI>Max Depth = 3504<LI>Call Chain = lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_domain_info_11d
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_domain_info_11d
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generate_domain_info_11d
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
</UL>

<P><STRONG><a name="[19a]"></a>lbs_prepare_and_send_command</STRONG> (Thumb, 582 bytes, Stack size 64 bytes, cmd.o(i.lbs_prepare_and_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464<LI>Call Chain = lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_sdio_interrupt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_queue_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_cmd_ctrl_node
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_reg_access
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_fwt_access
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_bt_access
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_bcn_ctrl
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_rssi
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_ps_mode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_monitor_mode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cleanup_and_insert_cmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_domain_info_11d
</UL>

<P><STRONG><a name="[1cc]"></a>lbs_process_command_response</STRONG> (Thumb, 324 bytes, Stack size 40 bytes, cmd.o(i.lbs_process_command_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lbs_process_command_response &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_complete_command
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
</UL>

<P><STRONG><a name="[16a]"></a>lbs_process_rxed_packet</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, rx.o(i.lbs_process_rxed_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lbs_process_rxed_packet &rArr; lbs_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_data
</UL>

<P><STRONG><a name="[1ac]"></a>lbs_remove_wep_keys</STRONG> (Thumb, 50 bytes, Stack size 96 bytes, cmd.o(i.lbs_remove_wep_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 3592<LI>Call Chain = lbs_remove_wep_keys &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[1d3]"></a>lbs_rev_pkt</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, marvell_ops.o(i.lbs_rev_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 3424<LI>Call Chain = lbs_rev_pkt &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_sdio_interrupt
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[1bc]"></a>lbs_scan_networks</STRONG> (Thumb, 328 bytes, Stack size 408 bytes, scan.o(i.lbs_scan_networks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4040<LI>Call Chain = lbs_scan_networks &rArr; lbs_do_scan &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_create_channel_list
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bss_descriptor
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_worker
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_network_ssid
</UL>

<P><STRONG><a name="[1d7]"></a>lbs_scan_worker</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, marvell_ops.o(i.lbs_scan_worker))
<BR><BR>[Stack]<UL><LI>Max Depth = 4048<LI>Call Chain = lbs_scan_worker &rArr; lbs_scan_networks &rArr; lbs_do_scan &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d8]"></a>lbs_sendpbuf</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, ethernetif.o(i.lbs_sendpbuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 3416<LI>Call Chain = lbs_sendpbuf &rArr; if_sdio_send_data &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[d8]"></a>lbs_set_channel</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, cmd.o(i.lbs_set_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560<LI>Call Chain = lbs_set_channel &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_channel
</UL>

<P><STRONG><a name="[ee]"></a>lbs_set_key_material</STRONG> (Thumb, 98 bytes, Stack size 80 bytes, cmd.o(i.lbs_set_key_material))
<BR><BR>[Stack]<UL><LI>Max Depth = 3576<LI>Call Chain = lbs_set_key_material &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_wpa_wpa2_info
</UL>

<P><STRONG><a name="[df]"></a>lbs_set_mac_control</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, cmd.o(i.lbs_set_mac_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 3464<LI>Call Chain = lbs_set_mac_control &rArr; lbs_cmd_async &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_async
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wep_keys
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_secinfo
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_setup_firmware
</UL>

<P><STRONG><a name="[198]"></a>lbs_set_radio</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, cmd.o(i.lbs_set_radio))
<BR><BR>[Stack]<UL><LI>Max Depth = 3528<LI>Call Chain = lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_try_associate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
</UL>

<P><STRONG><a name="[1da]"></a>lbs_set_regiontable</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, marvel_main.o(i.lbs_set_regiontable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lbs_set_regiontable &rArr; lbs_get_region_cfp_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_region_cfp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
</UL>

<P><STRONG><a name="[dd]"></a>lbs_set_snmp_mib</STRONG> (Thumb, 126 bytes, Stack size 168 bytes, cmd.o(i.lbs_set_snmp_mib))
<BR><BR>[Stack]<UL><LI>Max Depth = 3664<LI>Call Chain = lbs_set_snmp_mib &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_mode
</UL>

<P><STRONG><a name="[1dd]"></a>lbs_set_universaltable</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, 11d.o(i.lbs_set_universaltable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lbs_set_universaltable
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
</UL>

<P><STRONG><a name="[197]"></a>lbs_ssid_cmp</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, scan.o(i.lbs_ssid_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lbs_ssid_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_stop_adhoc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_ssid_in_list
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
</UL>

<P><STRONG><a name="[176]"></a>lbs_start_card</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, marvel_main.o(i.lbs_start_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 3600<LI>Call Chain = lbs_start_card &rArr; lbs_setup_firmware &rArr; lbs_update_hw_spec &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_channel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_11d
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_setup_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[bd]"></a>lbs_thread</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, marvel_main.o(i.lbs_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lbs_thread &rArr; lbs_process_command_response &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_command_response
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_complete_command
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_host_to_card_done
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_cmd
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
</UL>

<P><STRONG><a name="[d7]"></a>lbs_update_channel</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cmd.o(i.lbs_update_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 3576<LI>Call Chain = lbs_update_channel &rArr; lbs_get_channel &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_start_card
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_channel
</UL>

<P><STRONG><a name="[1dc]"></a>lbs_update_hw_spec</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, cmd.o(i.lbs_update_hw_spec))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560<LI>Call Chain = lbs_update_hw_spec &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_universaltable
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_regiontable
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_setup_firmware
</UL>

<P><STRONG><a name="[136]"></a>low_level_input</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ethernetif.o(i.low_level_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 3456<LI>Call Chain = low_level_input &rArr; lbs_rev_pkt &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_sys_mem
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_rev_pkt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 686 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 4328<LI>Call Chain = main &rArr; marvel_assoc_network &rArr; marvel_assoc_open_network &rArr; lbs_association_worker &rArr; assoc_helper_associate &rArr; assoc_helper_essid &rArr; lbs_try_associate &rArr; lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watch_dog_config
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_thread
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_network
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_worker
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvell_driver
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_delay
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry7.o(.ARM.Collect$$$$00000007)
</UL>
<P><STRONG><a name="[1e0]"></a>marvel_assoc_network</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, marvell_ops.o(i.marvel_assoc_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 4328<LI>Call Chain = marvel_assoc_network &rArr; marvel_assoc_open_network &rArr; lbs_association_worker &rArr; assoc_helper_associate &rArr; assoc_helper_essid &rArr; lbs_try_associate &rArr; lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_open_network
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e6]"></a>marvel_assoc_open_network</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, assoc.o(i.marvel_assoc_open_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 4304<LI>Call Chain = marvel_assoc_open_network &rArr; lbs_association_worker &rArr; assoc_helper_associate &rArr; assoc_helper_essid &rArr; lbs_try_associate &rArr; lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xxx_find_ssid
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvel_adhoc_assoc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_network
</UL>

<P><STRONG><a name="[164]"></a>mdelay</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, common.o(i.mdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card_worker
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[f3]"></a>mem_free</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mem.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_err
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[8a]"></a>mem_init</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, mem.o(i.mem_init))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_sys_mem
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>mem_malloc</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, mem.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[210]"></a>mem_realloc</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, mem.o(i.mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
</UL>

<P><STRONG><a name="[141]"></a>memp_free</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, memp.o(i.memp_free))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[8b]"></a>memp_init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, memp.o(i.memp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rest_sys_mem
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
</UL>

<P><STRONG><a name="[131]"></a>memp_malloc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, memp.o(i.memp_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[1ea]"></a>mmc_add_card</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, core.o(i.mmc_add_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mmc_add_card &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[219]"></a>mmc_align_data_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, core.o(i.mmc_align_data_size))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_align_size
</UL>

<P><STRONG><a name="[1eb]"></a>mmc_alloc_card</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, core.o(i.mmc_alloc_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmc_alloc_card
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[1ec]"></a>mmc_alloc_host</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, core.o(i.mmc_alloc_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mmc_alloc_host
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_probe
</UL>

<P><STRONG><a name="[1ed]"></a>mmc_attach_sdio</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, sdio.o(i.mmc_attach_sdio))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = mmc_attach_sdio &rArr; sdio_init_func &rArr; sdio_read_func_cis &rArr; sdio_read_cis &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_func
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_cd
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_add_func
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_voltage
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_add_card
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>

<P><STRONG><a name="[1f5]"></a>mmc_delay</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, common.o(i.mmc_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mmc_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_power_up
</UL>

<P><STRONG><a name="[1f3]"></a>mmc_go_idle</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, core.o(i.mmc_go_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mmc_go_idle &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_chip_select
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>

<P><STRONG><a name="[1f6]"></a>mmc_io_rw_direct</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, sdio.o(i.mmc_io_rw_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_hs
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_cd
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
</UL>

<P><STRONG><a name="[1f7]"></a>mmc_io_rw_extended</STRONG> (Thumb, 286 bytes, Stack size 144 bytes, sdio.o(i.mmc_io_rw_extended))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_req
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_data_timeout
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
</UL>

<P><STRONG><a name="[13d]"></a>mmc_request_done</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, core.o(i.mmc_request_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mmc_request_done &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_request
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
</UL>

<P><STRONG><a name="[180]"></a>mmc_rescan</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, core.o(i.mmc_rescan))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mmc_rescan &rArr; mmc_attach_sdio &rArr; sdio_init_func &rArr; sdio_read_func_cis &rArr; sdio_read_cis &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_if_cond
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_power_up
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvell_driver
</UL>

<P><STRONG><a name="[202]"></a>mmc_select_card</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdio.o(i.mmc_select_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mmc_select_card &rArr; _mmc_select_card &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_select_card
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[1ee]"></a>mmc_select_voltage</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, core.o(i.mmc_select_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_select_voltage &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[1fe]"></a>mmc_send_if_cond</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, sdio.o(i.mmc_send_if_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mmc_send_if_cond &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>

<P><STRONG><a name="[1ff]"></a>mmc_send_io_op_cond</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, sdio.o(i.mmc_send_io_op_cond))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mmc_send_io_op_cond &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_delay
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>

<P><STRONG><a name="[200]"></a>mmc_send_relative_addr</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, sdio.o(i.mmc_send_relative_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mmc_send_relative_addr &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[201]"></a>mmc_set_bus_mode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, core.o(i.mmc_set_bus_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_set_bus_mode &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[208]"></a>mmc_set_bus_width</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, core.o(i.mmc_set_bus_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_set_bus_width &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
</UL>

<P><STRONG><a name="[1f4]"></a>mmc_set_chip_select</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, core.o(i.mmc_set_chip_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_set_chip_select &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
</UL>

<P><STRONG><a name="[206]"></a>mmc_set_clock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, core.o(i.mmc_set_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_set_clock &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[1f8]"></a>mmc_set_data_timeout</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, core.o(i.mmc_set_data_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mmc_set_data_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
</UL>

<P><STRONG><a name="[209]"></a>mmc_set_timing</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, core.o(i.mmc_set_timing))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_set_timing &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_hs
</UL>

<P><STRONG><a name="[c6]"></a>mmc_wait_for_cmd</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, core.o(i.mmc_wait_for_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_req
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmc_select_card
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_if_cond
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_go_idle
</UL>

<P><STRONG><a name="[1f9]"></a>mmc_wait_for_req</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, core.o(i.mmc_wait_for_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_start_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
</UL>

<P><STRONG><a name="[1e8]"></a>ms_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, common.o(i.ms_delay))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>

<P><STRONG><a name="[8c]"></a>netif_add</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, netif.o(i.netif_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
</UL>

<P><STRONG><a name="[186]"></a>netif_is_up</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, netif.o(i.netif_is_up))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>

<P><STRONG><a name="[20d]"></a>netif_set_addr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, netif.o(i.netif_set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[8d]"></a>netif_set_default</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, netif.o(i.netif_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
</UL>

<P><STRONG><a name="[112]"></a>netif_set_down</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, netif.o(i.netif_set_down))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[fb]"></a>netif_set_gw</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_gw))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[f9]"></a>netif_set_ipaddr</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, netif.o(i.netif_set_ipaddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[fa]"></a>netif_set_netmask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, netif.o(i.netif_set_netmask))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[8e]"></a>netif_set_up</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, netif.o(i.netif_set_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = netif_set_up &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[f8]"></a>ntohl</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, inet.o(i.ntohl))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ntohl
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print
</UL>

<P><STRONG><a name="[124]"></a>ntohs</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, inet.o(i.ntohs))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_forward
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
</UL>

<P><STRONG><a name="[100]"></a>pbuf_alloc</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[18f]"></a>pbuf_cat</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_cat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[185]"></a>pbuf_chain</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pbuf.o(i.pbuf_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_chain &rArr; pbuf_cat &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[18b]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_clen))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>

<P><STRONG><a name="[12f]"></a>pbuf_copy</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_copy &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[11c]"></a>pbuf_copy_partial</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, pbuf.o(i.pbuf_copy_partial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
</UL>

<P><STRONG><a name="[109]"></a>pbuf_free</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_recv
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[12a]"></a>pbuf_header</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pbuf_header &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>

<P><STRONG><a name="[105]"></a>pbuf_realloc</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, pbuf.o(i.pbuf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[130]"></a>pbuf_ref</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pbuf.o(i.pbuf_ref))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[bb]"></a>pool_sdio_interrupt</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, if_sdio.o(i.pool_sdio_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pool_sdio_interrupt &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_rev_pkt
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_async
</UL>

<P><STRONG><a name="[1a6]"></a>print_enckey</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, assoc.o(i.print_enckey))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = print_enckey &rArr; wpa_hexdump_key &rArr; _wpa_hexdump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_printf
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[1a4]"></a>print_ssid</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, common.o(i.print_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_ssid &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[188]"></a>raw_input</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, raw.o(i.raw_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = raw_input &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[16b]"></a>recv_mac_event</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.recv_mac_event))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_event
</UL>

<P><STRONG><a name="[1de]"></a>rest_sys_mem</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lwip.o(i.rest_sys_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rest_sys_mem &rArr; memp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
</UL>

<P><STRONG><a name="[1f2]"></a>sdio_add_func</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, core.o(i.sdio_add_func))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[165]"></a>sdio_align_size</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, sdio.o(i.sdio_align_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sdio_align_size
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_max_byte_size
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_align_data_size
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[21a]"></a>sdio_alloc_func</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, core.o(i.sdio_alloc_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdio_alloc_func
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_func
</UL>

<P><STRONG><a name="[181]"></a>sdio_bus_probe</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, core.o(i.sdio_bus_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 3976<LI>Call Chain = sdio_bus_probe &rArr; if_sdio_probe &rArr; if_sdio_prog_firmware &rArr; if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_device
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvell_driver
</UL>

<P><STRONG><a name="[172]"></a>sdio_claim_irq</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, core.o(i.sdio_claim_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_claim_irq &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_card_irq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[171]"></a>sdio_enable_func</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, core.o(i.sdio_enable_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_enable_func &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[166]"></a>sdio_io_rw_ext_helper</STRONG> (Thumb, 314 bytes, Stack size 3152 bytes, sdio.o(i.sdio_io_rw_ext_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 3328<LI>Call Chain = sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_extended
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_max_byte_size
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_power2
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card_worker
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[20b]"></a>sdio_irq_thread</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdio.o(i.sdio_irq_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sdio_irq_thread &rArr; process_sdio_pending_irqs &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_sdio_pending_irqs
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
</UL>

<P><STRONG><a name="[204]"></a>sdio_read_common_cis</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdio_cis.o(i.sdio_read_common_cis))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sdio_read_common_cis &rArr; sdio_read_cis &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[21e]"></a>sdio_read_func_cis</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdio_cis.o(i.sdio_read_func_cis))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sdio_read_func_cis &rArr; sdio_read_cis &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_func
</UL>

<P><STRONG><a name="[163]"></a>sdio_readb</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sdio.o(i.sdio_readb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_data_end
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_sdio_interrupt
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_scratch
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_rx_len
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card_worker
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[179]"></a>sdio_set_block_size</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, core.o(i.sdio_set_block_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdio_set_block_size &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_probe
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
</UL>

<P><STRONG><a name="[16d]"></a>sdio_writeb</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sdio.o(i.sdio_writeb))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_data_end
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
</UL>

<P><STRONG><a name="[d9]"></a>set_bit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, assoc.o(i.set_bit))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_channel
</UL>

<P><STRONG><a name="[222]"></a>state_pro</STRONG> (Thumb, 370 bytes, Stack size 0 bytes, netapp.o(i.state_pro))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_recv
</UL>

<P><STRONG><a name="[a8]"></a>stm32_irq</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, s3cmci.o(i.stm32_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = stm32_irq &rArr; mmc_signal_sdio_irq &rArr; sdio_irq_thread &rArr; process_sdio_pending_irqs &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_dma
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_signal_sdio_irq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_imask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHander
</UL>

<P><STRONG><a name="[17f]"></a>stm32_probe</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, s3cmci.o(i.stm32_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stm32_probe &rArr; EnableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_stm32_struct
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_alloc_host
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_marvell_driver
</UL>

<P><STRONG><a name="[20e]"></a>tcp_abandon</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, tcp.o(i.tcp_abandon))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_recv
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
</UL>

<P><STRONG><a name="[158]"></a>tcp_accept</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[236]"></a>tcp_alloc</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tcp.o(i.tcp_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_prio
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
</UL>

<P><STRONG><a name="[f0]"></a>tcp_arg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tcp.o(i.tcp_arg))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_accept
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[156]"></a>tcp_bind</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, tcp.o(i.tcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tcp_bind &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[f4]"></a>tcp_close</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, tcp.o(i.tcp_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print_state
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_recv
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[23e]"></a>tcp_debug_print</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, tcp.o(i.tcp_debug_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcp_debug_print &rArr; tcp_debug_print_flags &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print_flags
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[23f]"></a>tcp_debug_print_flags</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, tcp.o(i.tcp_debug_print_flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_debug_print_flags &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print
</UL>

<P><STRONG><a name="[23b]"></a>tcp_debug_print_state</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, tcp.o(i.tcp_debug_print_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_debug_print_state &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[240]"></a>tcp_eff_send_mss</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tcp.o(i.tcp_eff_send_mss))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tcp_eff_send_mss &rArr; ip_route
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[241]"></a>tcp_enqueue</STRONG> (Thumb, 1958 bytes, Stack size 80 bytes, tcp_out.o(i.tcp_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ctrl
</UL>

<P><STRONG><a name="[14e]"></a>tcp_err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_err))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
</UL>

<P><STRONG><a name="[242]"></a>tcp_fasttmr</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tcp.o(i.tcp_fasttmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_fasttmr &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_thread
</UL>

<P><STRONG><a name="[18a]"></a>tcp_input</STRONG> (Thumb, 1750 bytes, Stack size 48 bytes, tcp_in.o(i.tcp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print_state
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print_flags
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_debug_print
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[246]"></a>tcp_keepalive</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = tcp_keepalive &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[157]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, tcp.o(i.tcp_listen_with_backlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_listen_with_backlog &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[155]"></a>tcp_new</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tcp.o(i.tcp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_server_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpd_init
</UL>

<P><STRONG><a name="[239]"></a>tcp_next_iss</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(i.tcp_next_iss))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[23d]"></a>tcp_output</STRONG> (Thumb, 832 bytes, Stack size 64 bytes, tcp_out.o(i.tcp_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[24b]"></a>tcp_pcb_purge</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_purge))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>

<P><STRONG><a name="[233]"></a>tcp_pcb_remove</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tcp.o(i.tcp_pcb_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[f2]"></a>tcp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_accept
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_accept
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[14f]"></a>tcp_recved</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tcp.o(i.tcp_recved))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_recv
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[24d]"></a>tcp_rexmit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_rexmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[24f]"></a>tcp_rexmit_rto</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tcp_out.o(i.tcp_rexmit_rto))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[235]"></a>tcp_rst</STRONG> (Thumb, 214 bytes, Stack size 64 bytes, tcp_out.o(i.tcp_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tcp_rst &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[24a]"></a>tcp_seg_free</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tcp.o(i.tcp_seg_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[234]"></a>tcp_segs_free</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tcp.o(i.tcp_segs_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>

<P><STRONG><a name="[23c]"></a>tcp_send_ctrl</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tcp_out.o(i.tcp_send_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = tcp_send_ctrl &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[f1]"></a>tcp_sent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tcp.o(i.tcp_sent))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>

<P><STRONG><a name="[1e2]"></a>tcp_server_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, netapp.o(i.tcp_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = tcp_server_init &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[250]"></a>tcp_slowtmr</STRONG> (Thumb, 870 bytes, Stack size 48 bytes, tcp.o(i.tcp_slowtmr))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = tcp_slowtmr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_thread
</UL>

<P><STRONG><a name="[24e]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tcp.o(i.tcp_update_rcv_ann_wnd))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[150]"></a>tcp_write</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = tcp_write &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;server_recv
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[251]"></a>tcp_zero_window_probe</STRONG> (Thumb, 230 bytes, Stack size 48 bytes, tcp_out.o(i.tcp_zero_window_probe))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = tcp_zero_window_probe &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_set_header
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[ce]"></a>test_bit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, assoc.o(i.test_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_stop_adhoc
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;should_deauth_infrastructure
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_wpa_keys
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_associate
</UL>

<P><STRONG><a name="[bc]"></a>time_after</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, common.o(i.time_after))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = time_after
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ms_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_send_data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card_worker
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[a9]"></a>timer2_int</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lwip.o(i.timer2_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer2_int
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1e5]"></a>timer_thread</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwip.o(i.timer_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = timer_thread &rArr; tcp_slowtmr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>timerbase_config</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, system.o(i.timerbase_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timerbase_config
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_lwIP
</UL>

<P><STRONG><a name="[119]"></a>udp_bind</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, udp.o(i.udp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
</UL>

<P><STRONG><a name="[106]"></a>udp_connect</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, udp.o(i.udp_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[189]"></a>udp_input</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, udp.o(i.udp_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[118]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, udp.o(i.udp_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[11a]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udp.o(i.udp_recv))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[117]"></a>udp_remove</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, udp.o(i.udp_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = udp_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[107]"></a>udp_sendto_if</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, udp.o(i.udp_sendto_if))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[1df]"></a>wait_for_data_end</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rx.o(i.wait_for_data_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wait_for_data_end &rArr; sdio_writeb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_writeb
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[1e1]"></a>watch_dog_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, system.o(i.watch_dog_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = watch_dog_config
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a7]"></a>wpa_hexdump_key</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, common.o(i.wpa_hexdump_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wpa_hexdump_key &rArr; _wpa_hexdump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wpa_hexdump
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_enckey
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[1a5]"></a>wpa_printf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, common.o(i.wpa_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wpa_printf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vprintf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_enckey
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[25b]"></a>write_flash</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, system.o(i.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = write_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_config
</UL>

<P><STRONG><a name="[151]"></a>write_flash_config</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, parmcfg.o(i.write_flash_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = write_flash_config &rArr; write_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[cc]"></a>_wpa_hexdump</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, common.o(i._wpa_hexdump))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _wpa_hexdump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_hexdump_key
</UL>

<P><STRONG><a name="[1fb]"></a>ffs</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, core.o(i.ffs))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_voltage
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_power_up
</UL>

<P><STRONG><a name="[1fc]"></a>fls</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, core.o(i.fls))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_power_up
</UL>

<P><STRONG><a name="[1fa]"></a>mmc_power_up</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, core.o(i.mmc_power_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmc_power_up &rArr; mmc_set_ios
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_ios
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fls
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffs
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_rescan
</UL>

<P><STRONG><a name="[1fd]"></a>mmc_set_ios</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, core.o(i.mmc_set_ios))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmc_set_ios
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_timing
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_clock
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_chip_select
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_bus_width
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_bus_mode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_voltage
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_power_up
</UL>

<P><STRONG><a name="[20c]"></a>mmc_start_request</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, core.o(i.mmc_start_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmc_start_request
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_req
</UL>

<P><STRONG><a name="[5f]"></a>mmc_wait_done</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, core.o(i.mmc_wait_done))
<BR>[Address Reference Count : 1]<UL><LI> core.o(i.mmc_wait_for_req)
</UL>
<P><STRONG><a name="[21c]"></a>sdio_card_irq_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, core.o(i.sdio_card_irq_get))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_claim_irq
</UL>

<P><STRONG><a name="[21b]"></a>sdio_match_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, core.o(i.sdio_match_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdio_match_device
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_one
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_bus_probe
</UL>

<P><STRONG><a name="[220]"></a>sdio_match_one</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, core.o(i.sdio_match_one))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_device
</UL>

<P><STRONG><a name="[79]"></a>DMA_RxConfiguration</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, s3cmci.o(i.DMA_RxConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMA_RxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[7d]"></a>DMA_TxConfiguration</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, s3cmci.o(i.DMA_TxConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
</UL>

<P><STRONG><a name="[13a]"></a>clear_imask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, s3cmci.o(i.clear_imask))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
</UL>

<P><STRONG><a name="[11d]"></a>disable_imask</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, s3cmci.o(i.disable_imask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disable_imask
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
</UL>

<P><STRONG><a name="[125]"></a>enable_imask</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, s3cmci.o(i.enable_imask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enable_imask
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
</UL>

<P><STRONG><a name="[137]"></a>finalize_request</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, s3cmci.o(i.finalize_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = finalize_request &rArr; stm32_send_request &rArr; stm32_setup_data &rArr; DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_host_usedma
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_check_sdio_irq
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_imask
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_request_done
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
</UL>

<P><STRONG><a name="[228]"></a>init_stm32_struct</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, s3cmci.o(i.init_stm32_struct))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_probe
</UL>

<P><STRONG><a name="[20a]"></a>mmc_signal_sdio_irq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, s3cmci.o(i.mmc_signal_sdio_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = mmc_signal_sdio_irq &rArr; sdio_irq_thread &rArr; process_sdio_pending_irqs &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
</UL>

<P><STRONG><a name="[211]"></a>pio_tasklet</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, s3cmci.o(i.pio_tasklet))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = pio_tasklet &rArr; finalize_request &rArr; stm32_send_request &rArr; stm32_setup_data &rArr; DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udelay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_irq
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_disable_irq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_imask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
</UL>

<P><STRONG><a name="[226]"></a>readl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s3cmci.o(i.readl))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
</UL>

<P><STRONG><a name="[5a]"></a>stm32_card_present</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s3cmci.o(i.stm32_card_present))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3cmci.o(i.init_stm32_struct)
</UL>
<P><STRONG><a name="[13c]"></a>stm32_check_sdio_irq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, s3cmci.o(i.stm32_check_sdio_irq))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
</UL>

<P><STRONG><a name="[212]"></a>stm32_disable_irq</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, s3cmci.o(i.stm32_disable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stm32_disable_irq &rArr; DisableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
</UL>

<P><STRONG><a name="[224]"></a>stm32_enable_dma</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, s3cmci.o(i.stm32_enable_dma))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm32_enable_dma
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_irq
</UL>

<P><STRONG><a name="[214]"></a>stm32_enable_irq</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, s3cmci.o(i.stm32_enable_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stm32_enable_irq &rArr; EnableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
</UL>

<P><STRONG><a name="[5b]"></a>stm32_enable_sdio_irq</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, s3cmci.o(i.stm32_enable_sdio_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = stm32_enable_sdio_irq &rArr; EnableIrq &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableIrq
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableIrq
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writel
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_check_sdio_irq
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readl
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_imask
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_imask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3cmci.o(i.init_stm32_struct)
</UL>
<P><STRONG><a name="[59]"></a>stm32_get_ro</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s3cmci.o(i.stm32_get_ro))
<BR>[Address Reference Count : 1]<UL><LI> s3cmci.o(i.init_stm32_struct)
</UL>
<P><STRONG><a name="[138]"></a>stm32_host_usedma</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, s3cmci.o(i.stm32_host_usedma))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
</UL>

<P><STRONG><a name="[57]"></a>stm32_request</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, s3cmci.o(i.stm32_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = stm32_request &rArr; stm32_send_request &rArr; stm32_setup_data &rArr; DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_card_present
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_request_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3cmci.o(i.init_stm32_struct)
</UL>
<P><STRONG><a name="[229]"></a>stm32_send_command</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, s3cmci.o(i.stm32_send_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = stm32_send_command &rArr; enable_imask
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_imask
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
</UL>

<P><STRONG><a name="[13b]"></a>stm32_send_request</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, s3cmci.o(i.stm32_send_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = stm32_send_request &rArr; stm32_setup_data &rArr; DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_setup_data
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_command
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_irq
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_request_done
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_request
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finalize_request
</UL>

<P><STRONG><a name="[22c]"></a>stm32_set_clk</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, s3cmci.o(i.stm32_set_clk))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = stm32_set_clk &rArr; SDIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_ios
</UL>

<P><STRONG><a name="[58]"></a>stm32_set_ios</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, s3cmci.o(i.stm32_set_ios))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = stm32_set_ios &rArr; stm32_set_clk &rArr; SDIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_set_clk
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3cmci.o(i.init_stm32_struct)
</UL>
<P><STRONG><a name="[22b]"></a>stm32_setup_data</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, s3cmci.o(i.stm32_setup_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = stm32_setup_data &rArr; DMA_TxConfiguration &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_imask
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_send_request
</UL>

<P><STRONG><a name="[213]"></a>udelay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, s3cmci.o(i.udelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udelay
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pio_tasklet
</UL>

<P><STRONG><a name="[227]"></a>writel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, s3cmci.o(i.writel))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_enable_sdio_irq
</UL>

<P><STRONG><a name="[c4]"></a>_mmc_select_card</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, sdio.o(i._mmc_select_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _mmc_select_card &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_wait_for_cmd
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_card
</UL>

<P><STRONG><a name="[21f]"></a>align_power2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdio.o(i.align_power2))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
</UL>

<P><STRONG><a name="[1ef]"></a>mmc_sdio_init_card</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sdio.o(i.mmc_sdio_init_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mmc_sdio_init_card &rArr; sdio_read_common_cis &rArr; sdio_read_cis &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_common_cis
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_relative_addr
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_card
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_wide
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_hs
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_io_op_cond
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_clock
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_bus_mode
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_alloc_card
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[217]"></a>process_sdio_pending_irqs</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, sdio.o(i.process_sdio_pending_irqs))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = process_sdio_pending_irqs &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
</UL>

<P><STRONG><a name="[1f0]"></a>sdio_disable_cd</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sdio.o(i.sdio_disable_cd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdio_disable_cd &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[205]"></a>sdio_enable_hs</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sdio.o(i.sdio_enable_hs))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdio_enable_hs &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_timing
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[207]"></a>sdio_enable_wide</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdio.o(i.sdio_enable_wide))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdio_enable_wide &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_bus_width
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[1f1]"></a>sdio_init_func</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sdio.o(i.sdio_init_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sdio_init_func &rArr; sdio_read_func_cis &rArr; sdio_read_cis &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_func_cis
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_alloc_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_attach_sdio
</UL>

<P><STRONG><a name="[218]"></a>sdio_max_byte_size</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sdio.o(i.sdio_max_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_align_size
</UL>

<P><STRONG><a name="[203]"></a>sdio_read_cccr</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, sdio.o(i.sdio_read_cccr))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sdio_read_cccr &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_sdio_init_card
</UL>

<P><STRONG><a name="[21d]"></a>sdio_read_fbr</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, sdio.o(i.sdio_read_fbr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sdio_read_fbr &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_func
</UL>

<P><STRONG><a name="[66]"></a>cistpl_funce</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sdio_cis.o(i.cistpl_funce))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cistpl_funce &rArr; cistpl_funce_func
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_common
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdio_cis.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>cistpl_funce_common</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, sdio_cis.o(i.cistpl_funce_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cistpl_funce_common
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce
</UL>

<P><STRONG><a name="[e7]"></a>cistpl_funce_func</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sdio_cis.o(i.cistpl_funce_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cistpl_funce_func
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_whitelisted
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce
</UL>

<P><STRONG><a name="[e9]"></a>cistpl_funce_whitelisted</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, sdio_cis.o(i.cistpl_funce_whitelisted))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func
</UL>

<P><STRONG><a name="[65]"></a>cistpl_manfid</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, sdio_cis.o(i.cistpl_manfid))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cistpl_manfid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdio_cis.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>cistpl_vers_1</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, sdio_cis.o(i.cistpl_vers_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cistpl_vers_1
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdio_cis.o(.constdata)
</UL>
<P><STRONG><a name="[221]"></a>sdio_read_cis</STRONG> (Thumb, 474 bytes, Stack size 72 bytes, sdio_cis.o(i.sdio_read_cis))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sdio_read_cis &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_io_rw_direct
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_func_cis
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_common_cis
</UL>

<P><STRONG><a name="[cd]"></a>assoc_helper_associate</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, assoc.o(i.assoc_helper_associate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4184<LI>Call Chain = assoc_helper_associate &rArr; assoc_helper_essid &rArr; lbs_try_associate &rArr; lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[d0]"></a>assoc_helper_bssid</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, assoc.o(i.assoc_helper_bssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4152<LI>Call Chain = assoc_helper_bssid &rArr; lbs_try_associate &rArr; lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_try_associate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_bssid_in_list
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_associate
</UL>

<P><STRONG><a name="[d6]"></a>assoc_helper_channel</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, assoc.o(i.assoc_helper_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 3592<LI>Call Chain = assoc_helper_channel &rArr; lbs_update_channel &rArr; lbs_get_channel &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_channel
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_channel
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[d1]"></a>assoc_helper_essid</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, assoc.o(i.assoc_helper_essid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4160<LI>Call Chain = assoc_helper_essid &rArr; lbs_try_associate &rArr; lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_try_associate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_ssid_in_list
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_associate
</UL>

<P><STRONG><a name="[dc]"></a>assoc_helper_mode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, assoc.o(i.assoc_helper_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 3680<LI>Call Chain = assoc_helper_mode &rArr; lbs_set_snmp_mib &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_snmp_mib
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[de]"></a>assoc_helper_secinfo</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, assoc.o(i.assoc_helper_secinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 3552<LI>Call Chain = assoc_helper_secinfo &rArr; lbs_cmd_802_11_enable_rsn &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_mac_control
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_enable_rsn
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[e1]"></a>assoc_helper_wep_keys</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, assoc.o(i.assoc_helper_wep_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 3632<LI>Call Chain = assoc_helper_wep_keys &rArr; lbs_cmd_802_11_set_wep &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_mac_control
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_set_wep
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[e3]"></a>assoc_helper_wpa_ie</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, assoc.o(i.assoc_helper_wpa_ie))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = assoc_helper_wpa_ie &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[e4]"></a>assoc_helper_wpa_keys</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, assoc.o(i.assoc_helper_wpa_keys))
<BR><BR>[Stack]<UL><LI>Max Depth = 3680<LI>Call Chain = assoc_helper_wpa_keys &rArr; lbs_cmd_802_11_key_material &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[cf]"></a>compare_ether_addr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, assoc.o(i.compare_ether_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_ssid_in_list
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_bssid_in_list
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_associate
</UL>

<P><STRONG><a name="[144]"></a>get_common_rates</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, assoc.o(i.get_common_rates))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_common_rates &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
</UL>

<P><STRONG><a name="[17d]"></a>init_marvel_adhoc_assoc</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, assoc.o(i.init_marvel_adhoc_assoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = init_marvel_adhoc_assoc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_open_network
</UL>

<P><STRONG><a name="[192]"></a>is_network_compatible</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, assoc.o(i.is_network_compatible))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = is_network_compatible &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bssinfo_to_priv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_ssid_in_list
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_bssid_in_list
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_ssid_in_list
</UL>

<P><STRONG><a name="[195]"></a>iw_auth_to_ieee_auth</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, assoc.o(i.iw_auth_to_ieee_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iw_auth_to_ieee_auth &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_authentication
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
</UL>

<P><STRONG><a name="[d5]"></a>lbs_adhoc_join</STRONG> (Thumb, 658 bytes, Stack size 152 bytes, assoc.o(i.lbs_adhoc_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 3680<LI>Call Chain = lbs_adhoc_join &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ssid_cmp
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_radio
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_basic_rate_flags
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_post
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
</UL>

<P><STRONG><a name="[19d]"></a>lbs_adhoc_post</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, assoc.o(i.lbs_adhoc_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lbs_adhoc_post &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
</UL>

<P><STRONG><a name="[db]"></a>lbs_adhoc_start</STRONG> (Thumb, 350 bytes, Stack size 216 bytes, assoc.o(i.lbs_adhoc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 3744<LI>Call Chain = lbs_adhoc_start &rArr; lbs_set_radio &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_radio
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_basic_rate_flags
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_post
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
</UL>

<P><STRONG><a name="[1a1]"></a>lbs_assoc_post</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, assoc.o(i.lbs_assoc_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lbs_assoc_post &rArr; lbs_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
</UL>

<P><STRONG><a name="[1a2]"></a>lbs_associate</STRONG> (Thumb, 436 bytes, Stack size 600 bytes, assoc.o(i.lbs_associate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4104<LI>Call Chain = lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_basic_rate_flags
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_assoc_post
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iw_auth_to_ieee_auth
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_common_rates
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_try_associate
</UL>

<P><STRONG><a name="[1a8]"></a>lbs_find_best_network_ssid</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, assoc.o(i.lbs_find_best_network_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 4072<LI>Call Chain = lbs_find_best_network_ssid &rArr; lbs_scan_networks &rArr; lbs_do_scan &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_ssid_in_list
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[1bd]"></a>lbs_find_best_ssid_in_list</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, assoc.o(i.lbs_find_best_ssid_in_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lbs_find_best_ssid_in_list &rArr; is_network_compatible &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_network_compatible
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_find_best_network_ssid
</UL>

<P><STRONG><a name="[d2]"></a>lbs_find_bssid_in_list</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, assoc.o(i.lbs_find_bssid_in_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lbs_find_bssid_in_list &rArr; is_network_compatible &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_network_compatible
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
</UL>

<P><STRONG><a name="[da]"></a>lbs_find_ssid_in_list</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, assoc.o(i.lbs_find_ssid_in_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lbs_find_ssid_in_list &rArr; is_network_compatible &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ssid_cmp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_network_compatible
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
</UL>

<P><STRONG><a name="[1d9]"></a>lbs_set_authentication</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, assoc.o(i.lbs_set_authentication))
<BR><BR>[Stack]<UL><LI>Max Depth = 3544<LI>Call Chain = lbs_set_authentication &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_with_response
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iw_auth_to_ieee_auth
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_try_associate
</UL>

<P><STRONG><a name="[199]"></a>lbs_set_basic_rate_flags</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, assoc.o(i.lbs_set_basic_rate_flags))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_start
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_adhoc_join
</UL>

<P><STRONG><a name="[d4]"></a>lbs_try_associate</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, assoc.o(i.lbs_try_associate))
<BR><BR>[Stack]<UL><LI>Max Depth = 4128<LI>Call Chain = lbs_try_associate &rArr; lbs_associate &rArr; lbs_parse_dnld_countryinfo_11d &rArr; set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_radio
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_authentication
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_associate
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_essid
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assoc_helper_bssid
</UL>

<P><STRONG><a name="[193]"></a>set_bssinfo_to_priv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, assoc.o(i.set_bssinfo_to_priv))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_network_compatible
</UL>

<P><STRONG><a name="[1a9]"></a>should_deauth_infrastructure</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, assoc.o(i.should_deauth_infrastructure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = should_deauth_infrastructure &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[1ab]"></a>should_stop_adhoc</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, assoc.o(i.should_stop_adhoc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = should_stop_adhoc &rArr; lbs_ssid_cmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ssid_cmp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_association_worker
</UL>

<P><STRONG><a name="[1e7]"></a>xxx_find_ssid</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, assoc.o(i.xxx_find_ssid))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xxx_find_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;marvel_assoc_open_network
</UL>

<P><STRONG><a name="[161]"></a>if_sdio_card_to_host</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, if_sdio.o(i.if_sdio_card_to_host))
<BR><BR>[Stack]<UL><LI>Max Depth = 3376<LI>Call Chain = if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_align_size
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_rx_len
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_event
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_data
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_handle_cmd
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_interrupt
</UL>

<P><STRONG><a name="[167]"></a>if_sdio_handle_cmd</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, if_sdio.o(i.if_sdio_handle_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = if_sdio_handle_cmd &rArr; lbs_thread &rArr; lbs_process_command_response &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[168]"></a>if_sdio_handle_data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, if_sdio.o(i.if_sdio_handle_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = if_sdio_handle_data &rArr; lbs_process_rxed_packet &rArr; lbs_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_rxed_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[169]"></a>if_sdio_handle_event</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, if_sdio.o(i.if_sdio_handle_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = if_sdio_handle_event &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_mac_event
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[56]"></a>if_sdio_host_to_card</STRONG> (Thumb, 170 bytes, Stack size 1088 bytes, if_sdio.o(i.if_sdio_host_to_card))
<BR><BR>[Stack]<UL><LI>Max Depth = 4448<LI>Call Chain = if_sdio_host_to_card &rArr; if_sdio_host_to_card_worker &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_align_size
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card_worker
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> if_sdio.o(i.if_sdio_probe)
</UL>
<P><STRONG><a name="[16c]"></a>if_sdio_host_to_card_worker</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, if_sdio.o(i.if_sdio_host_to_card_worker))
<BR><BR>[Stack]<UL><LI>Max Depth = 3360<LI>Call Chain = if_sdio_host_to_card_worker &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_host_to_card
</UL>

<P><STRONG><a name="[173]"></a>if_sdio_prog_firmware</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, if_sdio.o(i.if_sdio_prog_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 3912<LI>Call Chain = if_sdio_prog_firmware &rArr; if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_scratch
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_helper
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
</UL>

<P><STRONG><a name="[177]"></a>if_sdio_prog_helper</STRONG> (Thumb, 318 bytes, Stack size 120 bytes, if_sdio.o(i.if_sdio_prog_helper))
<BR><BR>[Stack]<UL><LI>Max Depth = 3448<LI>Call Chain = if_sdio_prog_helper &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
</UL>

<P><STRONG><a name="[178]"></a>if_sdio_prog_real</STRONG> (Thumb, 372 bytes, Stack size 568 bytes, if_sdio.o(i.if_sdio_prog_real))
<BR><BR>[Stack]<UL><LI>Max Depth = 3896<LI>Call Chain = if_sdio_prog_real &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_ext_helper
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_after
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mdelay
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_scratch
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
</UL>

<P><STRONG><a name="[162]"></a>if_sdio_read_rx_len</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, if_sdio.o(i.if_sdio_read_rx_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = if_sdio_read_rx_len &rArr; if_sdio_read_scratch &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_scratch
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_card_to_host
</UL>

<P><STRONG><a name="[175]"></a>if_sdio_read_scratch</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, if_sdio.o(i.if_sdio_read_scratch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = if_sdio_read_scratch &rArr; sdio_readb &rArr; mmc_io_rw_direct &rArr; mmc_wait_for_cmd &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_probe
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_read_rx_len
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_real
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;if_sdio_prog_firmware
</UL>

<P><STRONG><a name="[1d4]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scan.o(i.INIT_LIST_HEAD))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>

<P><STRONG><a name="[ec]"></a>clear_bss_descriptor</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, scan.o(i.clear_bss_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clear_bss_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>

<P><STRONG><a name="[194]"></a>is_same_network</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, scan.o(i.is_same_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = is_same_network &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
</UL>

<P><STRONG><a name="[1b2]"></a>lbs_do_scan</STRONG> (Thumb, 150 bytes, Stack size 168 bytes, scan.o(i.lbs_do_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 3632<LI>Call Chain = lbs_do_scan &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xdbug_buf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_add_ssid_tlv
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_add_rates_tlv
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_add_chanlist_tlv
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>

<P><STRONG><a name="[1ca]"></a>lbs_process_bss</STRONG> (Thumb, 884 bytes, Stack size 80 bytes, scan.o(i.lbs_process_bss))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lbs_process_bss &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_unset_basic_rate_flags
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
</UL>

<P><STRONG><a name="[5e]"></a>lbs_ret_80211_scan</STRONG> (Thumb, 348 bytes, Stack size 560 bytes, scan.o(i.lbs_ret_80211_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = lbs_ret_80211_scan &rArr; lbs_process_bss &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_move_tail
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_bss
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_same_network
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_bss_descriptor
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scan.o(i.lbs_do_scan)
</UL>
<P><STRONG><a name="[1b4]"></a>lbs_scan_add_chanlist_tlv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, scan.o(i.lbs_scan_add_chanlist_tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lbs_scan_add_chanlist_tlv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
</UL>

<P><STRONG><a name="[1b5]"></a>lbs_scan_add_rates_tlv</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, scan.o(i.lbs_scan_add_rates_tlv))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
</UL>

<P><STRONG><a name="[1b3]"></a>lbs_scan_add_ssid_tlv</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, scan.o(i.lbs_scan_add_ssid_tlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lbs_scan_add_ssid_tlv &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
</UL>

<P><STRONG><a name="[1d6]"></a>lbs_scan_create_channel_list</STRONG> (Thumb, 176 bytes, Stack size 28 bytes, scan.o(i.lbs_scan_create_channel_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lbs_scan_create_channel_list
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>

<P><STRONG><a name="[1cb]"></a>lbs_unset_basic_rate_flags</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, scan.o(i.lbs_unset_basic_rate_flags))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_bss
</UL>

<P><STRONG><a name="[1d5]"></a>list_add_tail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scan.o(i.list_add_tail))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_move_tail
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_scan_networks
</UL>

<P><STRONG><a name="[1d2]"></a>list_move_tail</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, scan.o(i.list_move_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = list_move_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_80211_scan
</UL>

<P><STRONG><a name="[1b6]"></a>xdbug_buf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, scan.o(i.xdbug_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xdbug_buf &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_do_scan
</UL>

<P><STRONG><a name="[134]"></a>low_level_init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ethernetif.o(i.low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = low_level_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
</UL>

<P><STRONG><a name="[50]"></a>low_level_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ethernetif.o(i.low_level_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 3432<LI>Call Chain = low_level_output &rArr; lbs_sendpbuf &rArr; if_sdio_send_data &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_data_end
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_sendpbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ethernetif.o(i.ethernetif_init)
</UL>
<P><STRONG><a name="[132]"></a>etharp_raw</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, etharp.o(i.etharp_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[12c]"></a>etharp_send_ip</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, etharp.o(i.etharp_send_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = etharp_send_ip
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[12d]"></a>find_entry</STRONG> (Thumb, 502 bytes, Stack size 48 bytes, etharp.o(i.find_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_etharp_q
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_arp_entry
</UL>

<P><STRONG><a name="[13e]"></a>free_etharp_q</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, etharp.o(i.free_etharp_q))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
</UL>

<P><STRONG><a name="[128]"></a>update_arp_entry</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, etharp.o(i.update_arp_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = update_arp_entry &rArr; find_entry &rArr; free_etharp_q &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_addr_isbroadcast
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_entry
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_send_ip
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_ip_input
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_arp_input
</UL>

<P><STRONG><a name="[f7]"></a>dhcp_bind</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[fd]"></a>dhcp_check</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = dhcp_check &rArr; etharp_query &rArr; etharp_request &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[ff]"></a>dhcp_create_request</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_create_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = dhcp_create_request &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[f6]"></a>dhcp_decline</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_decline))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dhcp_decline &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_arp_reply
</UL>

<P><STRONG><a name="[108]"></a>dhcp_delete_request</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_delete_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = dhcp_delete_request &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[10a]"></a>dhcp_discover</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_discover))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
</UL>

<P><STRONG><a name="[10c]"></a>dhcp_free_reply</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_free_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dhcp_free_reply &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[110]"></a>dhcp_get_option_byte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_get_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[10f]"></a>dhcp_get_option_long</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_get_option_long))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[10e]"></a>dhcp_get_option_ptr</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_get_option_ptr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_get_option_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
</UL>

<P><STRONG><a name="[10d]"></a>dhcp_handle_ack</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = dhcp_handle_ack &rArr; dhcp_get_option_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[111]"></a>dhcp_handle_nak</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_handle_nak))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = dhcp_handle_nak &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[113]"></a>dhcp_handle_offer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dhcp.o(i.dhcp_handle_offer))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = dhcp_handle_offer &rArr; dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[101]"></a>dhcp_option</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[102]"></a>dhcp_option_byte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_option_byte))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[103]"></a>dhcp_option_long</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[10b]"></a>dhcp_option_short</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_short))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>

<P><STRONG><a name="[104]"></a>dhcp_option_trailer</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, dhcp.o(i.dhcp_option_trailer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dhcp_option_trailer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
</UL>

<P><STRONG><a name="[4d]"></a>dhcp_recv</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, dhcp.o(i.dhcp_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_ipaddr &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_unfold_reply
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_ptr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_get_option_byte
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp.o(i.dhcp_start)
</UL>
<P><STRONG><a name="[114]"></a>dhcp_select</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, dhcp.o(i.dhcp_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = dhcp_select &rArr; udp_sendto_if &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_request
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_request
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_offer
</UL>

<P><STRONG><a name="[fc]"></a>dhcp_set_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dhcp.o(i.dhcp_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_nak
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_decline
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_check
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
</UL>

<P><STRONG><a name="[115]"></a>dhcp_unfold_reply</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, dhcp.o(i.dhcp_unfold_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dhcp_unfold_reply &rArr; pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_free_reply
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[122]"></a>dns_compare_name</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dns.o(i.dns_compare_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dns_compare_name
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[123]"></a>dns_parse_name</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, dns.o(i.dns_parse_name))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[4e]"></a>dns_recv</STRONG> (Thumb, 588 bytes, Stack size 64 bytes, dns.o(i.dns_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dns_recv &rArr; pbuf_copy_partial &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_parse_name
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns.o(i.dns_init)
</UL>
<P><STRONG><a name="[1e9]"></a>plug_holes</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>

<P><STRONG><a name="[62]"></a>tcp_accept_null</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tcp.o(i.tcp_accept_null))
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_listen_with_backlog)
</UL>
<P><STRONG><a name="[238]"></a>tcp_kill_prio</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tcp.o(i.tcp_kill_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[237]"></a>tcp_kill_timewait</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tcp.o(i.tcp_kill_timewait))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[23a]"></a>tcp_new_port</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, tcp.o(i.tcp_new_port))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[61]"></a>tcp_recv_null</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, tcp.o(i.tcp_recv_null))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tcp.o(i.tcp_alloc)
</UL>
<P><STRONG><a name="[244]"></a>tcp_listen_input</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, tcp_in.o(i.tcp_listen_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_prio &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[248]"></a>tcp_parseopt</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_parseopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tcp_parseopt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
</UL>

<P><STRONG><a name="[245]"></a>tcp_process</STRONG> (Thumb, 1876 bytes, Stack size 32 bytes, tcp_in.o(i.tcp_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tcp_process &rArr; tcp_receive &rArr; tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[24c]"></a>tcp_receive</STRONG> (Thumb, 2960 bytes, Stack size 56 bytes, tcp_in.o(i.tcp_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = tcp_receive &rArr; tcp_rexmit &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[243]"></a>tcp_timewait_input</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, tcp_in.o(i.tcp_timewait_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[249]"></a>tcp_output_segment</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, tcp_out.o(i.tcp_output_segment))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohl
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[247]"></a>tcp_output_set_header</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tcp_out.o(i.tcp_output_set_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tcp_output_set_header &rArr; ntohs
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htonl
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
</UL>

<P><STRONG><a name="[15a]"></a>icmp_send_response</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, icmp.o(i.icmp_send_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_output
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[17b]"></a>lwip_standard_chksum</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, inet_chksum.o(i.lwip_standard_chksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>

<P><STRONG><a name="[182]"></a>ip_forward</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ip.o(i.ip_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ip_forward &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;htons
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_input
</UL>

<P><STRONG><a name="[18e]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, ip_frag.o(i.ip_reass_chain_frag_into_datagram_and_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ntohs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[190]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_dequeue_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip_reass_dequeue_datagram
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[18d]"></a>ip_reass_enqueue_new_datagram</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ip_frag.o(i.ip_reass_enqueue_new_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ip_reass_enqueue_new_datagram &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[191]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, ip_frag.o(i.ip_reass_free_complete_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
</UL>

<P><STRONG><a name="[18c]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ip_frag.o(i.ip_reass_remove_oldest_datagram))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_enqueue_new_datagram
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass
</UL>

<P><STRONG><a name="[63]"></a>server_accept</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, netapp.o(i.server_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = server_accept
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netapp.o(i.tcp_server_init)
</UL>
<P><STRONG><a name="[60]"></a>server_recv</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, netapp.o(i.server_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = server_recv &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_pro
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jdq_pro
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> netapp.o(i.server_accept)
</UL>
<P><STRONG><a name="[ef]"></a>close_conn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sample_http.o(i.close_conn))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = close_conn &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[52]"></a>conn_err</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sample_http.o(i.conn_err))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = conn_err &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample_http.o(i.http_accept)
</UL>
<P><STRONG><a name="[14a]"></a>hex_trans</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, sample_http.o(i.hex_trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hex_trans &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_cgi
</UL>

<P><STRONG><a name="[14c]"></a>html_cgi</STRONG> (Thumb, 1318 bytes, Stack size 56 bytes, sample_http.o(i.html_cgi))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = html_cgi &rArr; hex_trans &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_trans
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[54]"></a>http_accept</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sample_http.o(i.http_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = http_accept &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_err
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_arg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample_http.o(i.httpd_init)
</UL>
<P><STRONG><a name="[51]"></a>http_recv</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, sample_http.o(i.http_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = http_recv &rArr; close_conn &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_sent
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash_config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GenerateSystemReset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_cgi
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample_http.o(i.http_accept)
</UL>
<P><STRONG><a name="[53]"></a>http_sent</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sample_http.o(i.http_sent))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = http_sent &rArr; close_conn &rArr; tcp_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip_output &rArr; ip_output_if &rArr; ip_frag &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GenerateSystemReset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;html_cgi
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sample_http.o(i.http_recv)
</UL>
<P><STRONG><a name="[153]"></a>send_data</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sample_http.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = send_data &rArr; tcp_write &rArr; tcp_enqueue &rArr; pbuf_alloc &rArr; pbuf_free &rArr; mem_free &rArr; plug_holes
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_sent
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_recv
</UL>

<P><STRONG><a name="[142]"></a>generate_domain_info_11d</STRONG> (Thumb, 266 bytes, Stack size 48 bytes, 11d.o(i.generate_domain_info_11d))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = generate_domain_info_11d &rArr; lbs_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
</UL>

<P><STRONG><a name="[20f]"></a>lbs_get_chan_11d</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, 11d.o(i.lbs_get_chan_11d))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lbs_get_chan_11d
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_domain_info_11d
</UL>

<P><STRONG><a name="[1ce]"></a>lbs_region_2_code</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, 11d.o(i.lbs_region_2_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lbs_region_2_code &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_domain_info_11d
</UL>

<P><STRONG><a name="[1d0]"></a>lbs_region_chan_supported_11d</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, 11d.o(i.lbs_region_chan_supported_11d))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lbs_region_chan_supported_11d &rArr; lbs_get_region_cfp_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_region_cfp_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_domain_info_11d
</UL>

<P><STRONG><a name="[1c3]"></a>parse_domain_info_11d</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, 11d.o(i.parse_domain_info_11d))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = parse_domain_info_11d &rArr; lbs_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_region_chan_supported_11d
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_region_2_code
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_chan_11d
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
</UL>

<P><STRONG><a name="[1c4]"></a>set_domain_info_11d</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, 11d.o(i.set_domain_info_11d))
<BR><BR>[Stack]<UL><LI>Max Depth = 3488<LI>Call Chain = set_domain_info_11d &rArr; lbs_prepare_and_send_command &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_parse_dnld_countryinfo_11d
</UL>

<P><STRONG><a name="[b5]"></a>__lbs_cleanup_and_insert_cmd</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.__lbs_cleanup_and_insert_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_complete_command
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cleanup_and_insert_cmd
</UL>

<P><STRONG><a name="[b8]"></a>__lbs_cmd_async</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cmd.o(i.__lbs_cmd_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __lbs_cmd_async &rArr; lbs_thread &rArr; lbs_process_command_response &rArr; lbs_complete_command &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ERR_PTR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_queue_cmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_cmd_ctrl_node
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_async
</UL>

<P><STRONG><a name="[1cd]"></a>__list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmd.o(i.__list_add))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_queue_cmd
</UL>

<P><STRONG><a name="[145]"></a>handle_cmd_response</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, cmd.o(i.handle_cmd_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = handle_cmd_response &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_reg_access
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_802_11_rssi
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_ret_802_11_bcn_ctrl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_process_command_response
</UL>

<P><STRONG><a name="[1b9]"></a>is_command_allowed_in_ps</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmd.o(i.is_command_allowed_in_ps))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
</UL>

<P><STRONG><a name="[1a0]"></a>lbs_cleanup_and_insert_cmd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cmd.o(i.lbs_cleanup_and_insert_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lbs_cleanup_and_insert_cmd &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cleanup_and_insert_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_allocate_cmd_buffer
</UL>

<P><STRONG><a name="[1c7]"></a>lbs_cmd_802_11_monitor_mode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmd.o(i.lbs_cmd_802_11_monitor_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lbs_cmd_802_11_monitor_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[1c5]"></a>lbs_cmd_802_11_ps_mode</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cmd.o(i.lbs_cmd_802_11_ps_mode))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[1c8]"></a>lbs_cmd_802_11_rssi</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cmd.o(i.lbs_cmd_802_11_rssi))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[5c]"></a>lbs_cmd_async_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmd.o(i.lbs_cmd_async_callback))
<BR>[Address Reference Count : 2]<UL><LI> cmd.o(i.lbs_cmd_async)
<LI> cmd.o(i.lbs_complete_command)
</UL>
<P><STRONG><a name="[1c9]"></a>lbs_cmd_bcn_ctrl</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cmd.o(i.lbs_cmd_bcn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lbs_cmd_bcn_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[1af]"></a>lbs_cmd_bt_access</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, cmd.o(i.lbs_cmd_bt_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lbs_cmd_bt_access &rArr; lbs_hex &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[1b0]"></a>lbs_cmd_fwt_access</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, cmd.o(i.lbs_cmd_fwt_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lbs_cmd_fwt_access &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[1c6]"></a>lbs_cmd_reg_access</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, cmd.o(i.lbs_cmd_reg_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lbs_cmd_reg_access
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
</UL>

<P><STRONG><a name="[bf]"></a>lbs_get_cmd_ctrl_node</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.lbs_get_cmd_ctrl_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lbs_get_cmd_ctrl_node
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_empty
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
</UL>

<P><STRONG><a name="[c1]"></a>lbs_queue_cmd</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, cmd.o(i.lbs_queue_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lbs_queue_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_add_tail
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_prepare_and_send_command
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cmd_async
</UL>

<P><STRONG><a name="[149]"></a>lbs_ret_802_11_bcn_ctrl</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cmd.o(i.lbs_ret_802_11_bcn_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
</UL>

<P><STRONG><a name="[148]"></a>lbs_ret_802_11_rssi</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, cmd.o(i.lbs_ret_802_11_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lbs_ret_802_11_rssi
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
</UL>

<P><STRONG><a name="[146]"></a>lbs_ret_reg_access</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, cmd.o(i.lbs_ret_reg_access))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lbs_ret_reg_access
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_cmd_response
</UL>

<P><STRONG><a name="[1bb]"></a>lbs_submit_command</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, cmd.o(i.lbs_submit_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lbs_submit_command
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
</UL>

<P><STRONG><a name="[b6]"></a>list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmd.o(i.list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_queue_cmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__lbs_cleanup_and_insert_cmd
</UL>

<P><STRONG><a name="[1ba]"></a>list_del</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.list_del))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_cmd_ctrl_node
</UL>

<P><STRONG><a name="[1b8]"></a>list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_execute_next_command
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_cmd_ctrl_node
</UL>

<P><STRONG><a name="[1ad]"></a>set_one_wpa_key</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, cmd.o(i.set_one_wpa_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_one_wpa_key &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_cmd_802_11_key_material
</UL>

<P><STRONG><a name="[1c1]"></a>INIT_LIST_HEAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, marvel_main.o(i.INIT_LIST_HEAD))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
</UL>

<P><STRONG><a name="[1c2]"></a>__list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, marvel_main.o(i.__list_add))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_thread
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_init_adapter
</UL>

<P><STRONG><a name="[196]"></a>lbs_init_adapter</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, marvel_main.o(i.lbs_init_adapter))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lbs_init_adapter &rArr; lbs_allocate_cmd_buffer &rArr; lbs_cleanup_and_insert_cmd &rArr; __lbs_cleanup_and_insert_cmd &rArr; list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__list_add
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INIT_LIST_HEAD
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_allocate_cmd_buffer
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_add_card
</UL>

<P><STRONG><a name="[1db]"></a>lbs_setup_firmware</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, marvel_main.o(i.lbs_setup_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 3584<LI>Call Chain = lbs_setup_firmware &rArr; lbs_update_hw_spec &rArr; lbs_cmd_with_response &rArr; __lbs_cmd &rArr; if_sdio_interrupt &rArr; if_sdio_card_to_host &rArr; sdio_io_rw_ext_helper &rArr; mmc_io_rw_extended &rArr; mmc_wait_for_req &rArr; mmc_start_request
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_set_mac_control
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_update_hw_spec
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_get_tx_power
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lbs_start_card
</UL>

<P><STRONG><a name="[b0]"></a>_printf_core</STRONG> (Thumb, 1064 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$8
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[c8]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf8.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0snprintf$8)
</UL>
<P><STRONG><a name="[4c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[c2]"></a>_fp_digits</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b4]"></a>_printf_core</STRONG> (Thumb, 1734 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
</UL>

<P><STRONG><a name="[ca]"></a>_printf_post_padding</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c9]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
