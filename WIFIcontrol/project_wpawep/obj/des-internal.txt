; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\des-internal.o --depend=.\obj\des-internal.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\des-internal.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\des-internal.c]
                          THUMB

                          AREA ||i.cookey||, CODE, READONLY, ALIGN=1

                  cookey PROC
;;;254    
;;;255    static void cookey(const u32 *raw1, u32 *keyout)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;256    {
000004  b0a0              SUB      sp,sp,#0x80
000006  4605              MOV      r5,r0
000008  460f              MOV      r7,r1
;;;257    	u32 *cook;
;;;258    	const u32 *raw0;
;;;259    	u32 dough[32];
;;;260    	int i;
;;;261    
;;;262    	cook = dough;
00000a  466c              MOV      r4,sp
;;;263    	for (i = 0; i < 16; i++, raw1++) {
00000c  f04f0800          MOV      r8,#0
000010  e036              B        |L1.128|
                  |L1.18|
;;;264    		raw0 = raw1++;
000012  462e              MOV      r6,r5
000014  1d2d              ADDS     r5,r5,#4
;;;265    		*cook    = (*raw0 & 0x00fc0000L) << 6;
000016  6830              LDR      r0,[r6,#0]
000018  f400007c          AND      r0,r0,#0xfc0000
00001c  0180              LSLS     r0,r0,#6
00001e  6020              STR      r0,[r4,#0]
;;;266    		*cook   |= (*raw0 & 0x00000fc0L) << 10;
000020  6820              LDR      r0,[r4,#0]
000022  6831              LDR      r1,[r6,#0]
000024  f401617c          AND      r1,r1,#0xfc0
000028  ea402081          ORR      r0,r0,r1,LSL #10
00002c  6020              STR      r0,[r4,#0]
;;;267    		*cook   |= (*raw1 & 0x00fc0000L) >> 10;
00002e  6820              LDR      r0,[r4,#0]
000030  6829              LDR      r1,[r5,#0]
000032  f401017c          AND      r1,r1,#0xfc0000
000036  ea402091          ORR      r0,r0,r1,LSR #10
00003a  6020              STR      r0,[r4,#0]
;;;268    		*cook++ |= (*raw1 & 0x00000fc0L) >> 6;
00003c  6820              LDR      r0,[r4,#0]
00003e  6829              LDR      r1,[r5,#0]
000040  f3c11185          UBFX     r1,r1,#6,#6
000044  4308              ORRS     r0,r0,r1
000046  c401              STM      r4!,{r0}
;;;269    		*cook    = (*raw0 & 0x0003f000L) << 12;
000048  6830              LDR      r0,[r6,#0]
00004a  f400307c          AND      r0,r0,#0x3f000
00004e  0300              LSLS     r0,r0,#12
000050  6020              STR      r0,[r4,#0]
;;;270    		*cook   |= (*raw0 & 0x0000003fL) << 16;
000052  6820              LDR      r0,[r4,#0]
000054  6831              LDR      r1,[r6,#0]
000056  f001013f          AND      r1,r1,#0x3f
00005a  ea404001          ORR      r0,r0,r1,LSL #16
00005e  6020              STR      r0,[r4,#0]
;;;271    		*cook   |= (*raw1 & 0x0003f000L) >> 4;
000060  6820              LDR      r0,[r4,#0]
000062  6829              LDR      r1,[r5,#0]
000064  f401317c          AND      r1,r1,#0x3f000
000068  ea401011          ORR      r0,r0,r1,LSR #4
00006c  6020              STR      r0,[r4,#0]
;;;272    		*cook++ |= (*raw1 & 0x0000003fL);
00006e  6820              LDR      r0,[r4,#0]
000070  6829              LDR      r1,[r5,#0]
000072  f001013f          AND      r1,r1,#0x3f
000076  4308              ORRS     r0,r0,r1
000078  c401              STM      r4!,{r0}
00007a  f1080801          ADD      r8,r8,#1              ;263
00007e  1d2d              ADDS     r5,r5,#4              ;263
                  |L1.128|
000080  f1b80f10          CMP      r8,#0x10              ;263
000084  dbc5              BLT      |L1.18|
;;;273    	}
;;;274    
;;;275    	os_memcpy(keyout, dough, sizeof(dough));
000086  2280              MOVS     r2,#0x80
000088  4669              MOV      r1,sp
00008a  4638              MOV      r0,r7
00008c  f7fffffe          BL       __aeabi_memcpy4
;;;276    }
000090  b020              ADD      sp,sp,#0x80
000092  e8bd81f0          POP      {r4-r8,pc}
;;;277    
                          ENDP


                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.des3_decrypt||, CODE, READONLY, ALIGN=1

                  des3_decrypt PROC
;;;487    
;;;488    void des3_decrypt(const u8 *crypt, const struct des3_key_s *key, u8 *plain)
000000  b57c              PUSH     {r2-r6,lr}
;;;489    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;490    	u32 work[2];
;;;491    
;;;492    	work[0] = WPA_GET_BE32(crypt);
000008  7820              LDRB     r0,[r4,#0]
00000a  0600              LSLS     r0,r0,#24
00000c  7861              LDRB     r1,[r4,#1]
00000e  ea404001          ORR      r0,r0,r1,LSL #16
000012  78a1              LDRB     r1,[r4,#2]
000014  ea402001          ORR      r0,r0,r1,LSL #8
000018  78e1              LDRB     r1,[r4,#3]
00001a  4308              ORRS     r0,r0,r1
00001c  9000              STR      r0,[sp,#0]
;;;493    	work[1] = WPA_GET_BE32(crypt + 4);
00001e  7920              LDRB     r0,[r4,#4]
000020  0601              LSLS     r1,r0,#24
000022  7960              LDRB     r0,[r4,#5]
000024  ea414100          ORR      r1,r1,r0,LSL #16
000028  79a0              LDRB     r0,[r4,#6]
00002a  ea412000          ORR      r0,r1,r0,LSL #8
00002e  79e1              LDRB     r1,[r4,#7]
000030  4308              ORRS     r0,r0,r1
000032  9001              STR      r0,[sp,#4]
;;;494    	desfunc(work, key->dk[0]);
000034  f50671c0          ADD      r1,r6,#0x180
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       desfunc
;;;495    	desfunc(work, key->dk[1]);
00003e  f5067100          ADD      r1,r6,#0x200
000042  4668              MOV      r0,sp
000044  f7fffffe          BL       desfunc
;;;496    	desfunc(work, key->dk[2]);
000048  f5067120          ADD      r1,r6,#0x280
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       desfunc
;;;497    	WPA_PUT_BE32(plain, work[0]);
000052  bf00              NOP      
000054  9800              LDR      r0,[sp,#0]
000056  0e00              LSRS     r0,r0,#24
000058  7028              STRB     r0,[r5,#0]
00005a  9800              LDR      r0,[sp,#0]
00005c  0c00              LSRS     r0,r0,#16
00005e  7068              STRB     r0,[r5,#1]
000060  9800              LDR      r0,[sp,#0]
000062  0a00              LSRS     r0,r0,#8
000064  70a8              STRB     r0,[r5,#2]
000066  9800              LDR      r0,[sp,#0]
000068  70e8              STRB     r0,[r5,#3]
00006a  bf00              NOP      
;;;498    	WPA_PUT_BE32(plain + 4, work[1]);
00006c  bf00              NOP      
00006e  9801              LDR      r0,[sp,#4]
000070  0e00              LSRS     r0,r0,#24
000072  7128              STRB     r0,[r5,#4]
000074  9801              LDR      r0,[sp,#4]
000076  0c00              LSRS     r0,r0,#16
000078  7168              STRB     r0,[r5,#5]
00007a  9801              LDR      r0,[sp,#4]
00007c  0a00              LSRS     r0,r0,#8
00007e  71a8              STRB     r0,[r5,#6]
000080  9801              LDR      r0,[sp,#4]
000082  71e8              STRB     r0,[r5,#7]
000084  bf00              NOP      
;;;499    }
000086  bd7c              POP      {r2-r6,pc}
                          ENDP


                          AREA ||i.des3_encrypt||, CODE, READONLY, ALIGN=1

                  des3_encrypt PROC
;;;473    
;;;474    void des3_encrypt(const u8 *plain, const struct des3_key_s *key, u8 *crypt)
000000  b57c              PUSH     {r2-r6,lr}
;;;475    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;476    	u32 work[2];
;;;477    
;;;478    	work[0] = WPA_GET_BE32(plain);
000008  7820              LDRB     r0,[r4,#0]
00000a  0600              LSLS     r0,r0,#24
00000c  7861              LDRB     r1,[r4,#1]
00000e  ea404001          ORR      r0,r0,r1,LSL #16
000012  78a1              LDRB     r1,[r4,#2]
000014  ea402001          ORR      r0,r0,r1,LSL #8
000018  78e1              LDRB     r1,[r4,#3]
00001a  4308              ORRS     r0,r0,r1
00001c  9000              STR      r0,[sp,#0]
;;;479    	work[1] = WPA_GET_BE32(plain + 4);
00001e  7920              LDRB     r0,[r4,#4]
000020  0601              LSLS     r1,r0,#24
000022  7960              LDRB     r0,[r4,#5]
000024  ea414100          ORR      r1,r1,r0,LSL #16
000028  79a0              LDRB     r0,[r4,#6]
00002a  ea412000          ORR      r0,r1,r0,LSL #8
00002e  79e1              LDRB     r1,[r4,#7]
000030  4308              ORRS     r0,r0,r1
000032  9001              STR      r0,[sp,#4]
;;;480    	desfunc(work, key->ek[0]);
000034  4631              MOV      r1,r6
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       desfunc
;;;481    	desfunc(work, key->ek[1]);
00003c  f1060180          ADD      r1,r6,#0x80
000040  4668              MOV      r0,sp
000042  f7fffffe          BL       desfunc
;;;482    	desfunc(work, key->ek[2]);
000046  f5067180          ADD      r1,r6,#0x100
00004a  4668              MOV      r0,sp
00004c  f7fffffe          BL       desfunc
;;;483    	WPA_PUT_BE32(crypt, work[0]);
000050  bf00              NOP      
000052  9800              LDR      r0,[sp,#0]
000054  0e00              LSRS     r0,r0,#24
000056  7028              STRB     r0,[r5,#0]
000058  9800              LDR      r0,[sp,#0]
00005a  0c00              LSRS     r0,r0,#16
00005c  7068              STRB     r0,[r5,#1]
00005e  9800              LDR      r0,[sp,#0]
000060  0a00              LSRS     r0,r0,#8
000062  70a8              STRB     r0,[r5,#2]
000064  9800              LDR      r0,[sp,#0]
000066  70e8              STRB     r0,[r5,#3]
000068  bf00              NOP      
;;;484    	WPA_PUT_BE32(crypt + 4, work[1]);
00006a  bf00              NOP      
00006c  9801              LDR      r0,[sp,#4]
00006e  0e00              LSRS     r0,r0,#24
000070  7128              STRB     r0,[r5,#4]
000072  9801              LDR      r0,[sp,#4]
000074  0c00              LSRS     r0,r0,#16
000076  7168              STRB     r0,[r5,#5]
000078  9801              LDR      r0,[sp,#4]
00007a  0a00              LSRS     r0,r0,#8
00007c  71a8              STRB     r0,[r5,#6]
00007e  9801              LDR      r0,[sp,#4]
000080  71e8              STRB     r0,[r5,#7]
000082  bf00              NOP      
;;;485    }
000084  bd7c              POP      {r2-r6,pc}
;;;486    
                          ENDP


                          AREA ||i.des3_key_setup||, CODE, READONLY, ALIGN=1

                  des3_key_setup PROC
;;;461    
;;;462    void des3_key_setup(const u8 *key, struct des3_key_s *dkey)
000000  b570              PUSH     {r4-r6,lr}
;;;463    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;464    	deskey(key, 0, dkey->ek[0]);
000006  4622              MOV      r2,r4
000008  2100              MOVS     r1,#0
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       deskey
;;;465    	deskey(key + 8, 1, dkey->ek[1]);
000010  f1040280          ADD      r2,r4,#0x80
000014  2101              MOVS     r1,#1
000016  f1050008          ADD      r0,r5,#8
00001a  f7fffffe          BL       deskey
;;;466    	deskey(key + 16, 0, dkey->ek[2]);
00001e  f5047280          ADD      r2,r4,#0x100
000022  2100              MOVS     r1,#0
000024  f1050010          ADD      r0,r5,#0x10
000028  f7fffffe          BL       deskey
;;;467    
;;;468    	deskey(key, 1, dkey->dk[2]);
00002c  f5047220          ADD      r2,r4,#0x280
000030  2101              MOVS     r1,#1
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       deskey
;;;469    	deskey(key + 8, 0, dkey->dk[1]);
000038  f5047200          ADD      r2,r4,#0x200
00003c  2100              MOVS     r1,#0
00003e  f1050008          ADD      r0,r5,#8
000042  f7fffffe          BL       deskey
;;;470    	deskey(key + 16, 1, dkey->dk[0]);
000046  f50472c0          ADD      r2,r4,#0x180
00004a  2101              MOVS     r1,#1
00004c  f1050010          ADD      r0,r5,#0x10
000050  f7fffffe          BL       deskey
;;;471    }
000054  bd70              POP      {r4-r6,pc}
;;;472    
                          ENDP


                          AREA ||i.des_block_decrypt||, CODE, READONLY, ALIGN=1

                  des_block_decrypt PROC
;;;450    
;;;451    void des_block_decrypt(const u8 *crypt, const u32 *dk, u8 *plain)
000000  b57c              PUSH     {r2-r6,lr}
;;;452    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;453    	u32 work[2];
;;;454    	work[0] = WPA_GET_BE32(crypt);
000008  7820              LDRB     r0,[r4,#0]
00000a  0600              LSLS     r0,r0,#24
00000c  7861              LDRB     r1,[r4,#1]
00000e  ea404001          ORR      r0,r0,r1,LSL #16
000012  78a1              LDRB     r1,[r4,#2]
000014  ea402001          ORR      r0,r0,r1,LSL #8
000018  78e1              LDRB     r1,[r4,#3]
00001a  4308              ORRS     r0,r0,r1
00001c  9000              STR      r0,[sp,#0]
;;;455    	work[1] = WPA_GET_BE32(crypt + 4);
00001e  7920              LDRB     r0,[r4,#4]
000020  0601              LSLS     r1,r0,#24
000022  7960              LDRB     r0,[r4,#5]
000024  ea414100          ORR      r1,r1,r0,LSL #16
000028  79a0              LDRB     r0,[r4,#6]
00002a  ea412000          ORR      r0,r1,r0,LSL #8
00002e  79e1              LDRB     r1,[r4,#7]
000030  4308              ORRS     r0,r0,r1
000032  9001              STR      r0,[sp,#4]
;;;456    	desfunc(work, dk);
000034  4631              MOV      r1,r6
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       desfunc
;;;457    	WPA_PUT_BE32(plain, work[0]);
00003c  bf00              NOP      
00003e  9800              LDR      r0,[sp,#0]
000040  0e00              LSRS     r0,r0,#24
000042  7028              STRB     r0,[r5,#0]
000044  9800              LDR      r0,[sp,#0]
000046  0c00              LSRS     r0,r0,#16
000048  7068              STRB     r0,[r5,#1]
00004a  9800              LDR      r0,[sp,#0]
00004c  0a00              LSRS     r0,r0,#8
00004e  70a8              STRB     r0,[r5,#2]
000050  9800              LDR      r0,[sp,#0]
000052  70e8              STRB     r0,[r5,#3]
000054  bf00              NOP      
;;;458    	WPA_PUT_BE32(plain + 4, work[1]);
000056  bf00              NOP      
000058  9801              LDR      r0,[sp,#4]
00005a  0e00              LSRS     r0,r0,#24
00005c  7128              STRB     r0,[r5,#4]
00005e  9801              LDR      r0,[sp,#4]
000060  0c00              LSRS     r0,r0,#16
000062  7168              STRB     r0,[r5,#5]
000064  9801              LDR      r0,[sp,#4]
000066  0a00              LSRS     r0,r0,#8
000068  71a8              STRB     r0,[r5,#6]
00006a  9801              LDR      r0,[sp,#4]
00006c  71e8              STRB     r0,[r5,#7]
00006e  bf00              NOP      
;;;459    }
000070  bd7c              POP      {r2-r6,pc}
;;;460    
                          ENDP


                          AREA ||i.des_block_encrypt||, CODE, READONLY, ALIGN=1

                  des_block_encrypt PROC
;;;439    
;;;440    void des_block_encrypt(const u8 *plain, const u32 *ek, u8 *crypt)
000000  b57c              PUSH     {r2-r6,lr}
;;;441    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;442    	u32 work[2];
;;;443    	work[0] = WPA_GET_BE32(plain);
000008  7820              LDRB     r0,[r4,#0]
00000a  0600              LSLS     r0,r0,#24
00000c  7861              LDRB     r1,[r4,#1]
00000e  ea404001          ORR      r0,r0,r1,LSL #16
000012  78a1              LDRB     r1,[r4,#2]
000014  ea402001          ORR      r0,r0,r1,LSL #8
000018  78e1              LDRB     r1,[r4,#3]
00001a  4308              ORRS     r0,r0,r1
00001c  9000              STR      r0,[sp,#0]
;;;444    	work[1] = WPA_GET_BE32(plain + 4);
00001e  7920              LDRB     r0,[r4,#4]
000020  0601              LSLS     r1,r0,#24
000022  7960              LDRB     r0,[r4,#5]
000024  ea414100          ORR      r1,r1,r0,LSL #16
000028  79a0              LDRB     r0,[r4,#6]
00002a  ea412000          ORR      r0,r1,r0,LSL #8
00002e  79e1              LDRB     r1,[r4,#7]
000030  4308              ORRS     r0,r0,r1
000032  9001              STR      r0,[sp,#4]
;;;445    	desfunc(work, ek);
000034  4631              MOV      r1,r6
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       desfunc
;;;446    	WPA_PUT_BE32(crypt, work[0]);
00003c  bf00              NOP      
00003e  9800              LDR      r0,[sp,#0]
000040  0e00              LSRS     r0,r0,#24
000042  7028              STRB     r0,[r5,#0]
000044  9800              LDR      r0,[sp,#0]
000046  0c00              LSRS     r0,r0,#16
000048  7068              STRB     r0,[r5,#1]
00004a  9800              LDR      r0,[sp,#0]
00004c  0a00              LSRS     r0,r0,#8
00004e  70a8              STRB     r0,[r5,#2]
000050  9800              LDR      r0,[sp,#0]
000052  70e8              STRB     r0,[r5,#3]
000054  bf00              NOP      
;;;447    	WPA_PUT_BE32(crypt + 4, work[1]);
000056  bf00              NOP      
000058  9801              LDR      r0,[sp,#4]
00005a  0e00              LSRS     r0,r0,#24
00005c  7128              STRB     r0,[r5,#4]
00005e  9801              LDR      r0,[sp,#4]
000060  0c00              LSRS     r0,r0,#16
000062  7168              STRB     r0,[r5,#5]
000064  9801              LDR      r0,[sp,#4]
000066  0a00              LSRS     r0,r0,#8
000068  71a8              STRB     r0,[r5,#6]
00006a  9801              LDR      r0,[sp,#4]
00006c  71e8              STRB     r0,[r5,#7]
00006e  bf00              NOP      
;;;448    }
000070  bd7c              POP      {r2-r6,pc}
;;;449    
                          ENDP


                          AREA ||i.des_encrypt||, CODE, READONLY, ALIGN=1

                  des_encrypt PROC
;;;404    
;;;405    void des_encrypt(const u8 *clear, const u8 *key, u8 *cypher)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;406    {
000004  b0a5              SUB      sp,sp,#0x94
000006  4604              MOV      r4,r0
000008  4688              MOV      r8,r1
00000a  4615              MOV      r5,r2
;;;407    	u8 pkey[8], next, tmp;
;;;408    	int i;
;;;409    	u32 ek[32], work[2];
;;;410    
;;;411    	/* Add parity bits to the key */
;;;412    	next = 0;
00000c  f04f0900          MOV      r9,#0
;;;413    	for (i = 0; i < 7; i++) {
000010  2600              MOVS     r6,#0
000012  e011              B        |L8.56|
                  |L8.20|
;;;414    		tmp = key[i];
000014  f8187006          LDRB     r7,[r8,r6]
;;;415    		pkey[i] = (tmp >> i) | next | 1;
000018  fa47f006          ASR      r0,r7,r6
00001c  ea400009          ORR      r0,r0,r9
000020  b2c0              UXTB     r0,r0
000022  f0400001          ORR      r0,r0,#1
000026  a923              ADD      r1,sp,#0x8c
000028  5588              STRB     r0,[r1,r6]
;;;416    		next = tmp << (7 - i);
00002a  f1c60007          RSB      r0,r6,#7
00002e  fa07f000          LSL      r0,r7,r0
000032  f00009ff          AND      r9,r0,#0xff
000036  1c76              ADDS     r6,r6,#1              ;413
                  |L8.56|
000038  2e07              CMP      r6,#7                 ;413
00003a  dbeb              BLT      |L8.20|
;;;417    	}
;;;418    	pkey[i] = next | 1;
00003c  f0490001          ORR      r0,r9,#1
000040  a923              ADD      r1,sp,#0x8c
000042  5588              STRB     r0,[r1,r6]
;;;419    
;;;420    	deskey(pkey, 0, ek);
000044  aa03              ADD      r2,sp,#0xc
000046  2100              MOVS     r1,#0
000048  a823              ADD      r0,sp,#0x8c
00004a  f7fffffe          BL       deskey
;;;421    
;;;422    	work[0] = WPA_GET_BE32(clear);
00004e  7820              LDRB     r0,[r4,#0]
000050  0600              LSLS     r0,r0,#24
000052  7861              LDRB     r1,[r4,#1]
000054  ea404001          ORR      r0,r0,r1,LSL #16
000058  78a1              LDRB     r1,[r4,#2]
00005a  ea402001          ORR      r0,r0,r1,LSL #8
00005e  78e1              LDRB     r1,[r4,#3]
000060  4308              ORRS     r0,r0,r1
000062  9001              STR      r0,[sp,#4]
;;;423    	work[1] = WPA_GET_BE32(clear + 4);
000064  7920              LDRB     r0,[r4,#4]
000066  0601              LSLS     r1,r0,#24
000068  7960              LDRB     r0,[r4,#5]
00006a  ea414100          ORR      r1,r1,r0,LSL #16
00006e  79a0              LDRB     r0,[r4,#6]
000070  ea412000          ORR      r0,r1,r0,LSL #8
000074  79e1              LDRB     r1,[r4,#7]
000076  4308              ORRS     r0,r0,r1
000078  9002              STR      r0,[sp,#8]
;;;424    	desfunc(work, ek);
00007a  a903              ADD      r1,sp,#0xc
00007c  a801              ADD      r0,sp,#4
00007e  f7fffffe          BL       desfunc
;;;425    	WPA_PUT_BE32(cypher, work[0]);
000082  bf00              NOP      
000084  9801              LDR      r0,[sp,#4]
000086  0e00              LSRS     r0,r0,#24
000088  7028              STRB     r0,[r5,#0]
00008a  9801              LDR      r0,[sp,#4]
00008c  0c00              LSRS     r0,r0,#16
00008e  7068              STRB     r0,[r5,#1]
000090  9801              LDR      r0,[sp,#4]
000092  0a00              LSRS     r0,r0,#8
000094  70a8              STRB     r0,[r5,#2]
000096  9801              LDR      r0,[sp,#4]
000098  70e8              STRB     r0,[r5,#3]
00009a  bf00              NOP      
;;;426    	WPA_PUT_BE32(cypher + 4, work[1]);
00009c  bf00              NOP      
00009e  9802              LDR      r0,[sp,#8]
0000a0  0e00              LSRS     r0,r0,#24
0000a2  7128              STRB     r0,[r5,#4]
0000a4  9802              LDR      r0,[sp,#8]
0000a6  0c00              LSRS     r0,r0,#16
0000a8  7168              STRB     r0,[r5,#5]
0000aa  9802              LDR      r0,[sp,#8]
0000ac  0a00              LSRS     r0,r0,#8
0000ae  71a8              STRB     r0,[r5,#6]
0000b0  9802              LDR      r0,[sp,#8]
0000b2  71e8              STRB     r0,[r5,#7]
0000b4  bf00              NOP      
;;;427    
;;;428    	os_memset(pkey, 0, sizeof(pkey));
0000b6  2000              MOVS     r0,#0
0000b8  9023              STR      r0,[sp,#0x8c]
0000ba  9024              STR      r0,[sp,#0x90]
;;;429    	os_memset(ek, 0, sizeof(ek));
0000bc  2180              MOVS     r1,#0x80
0000be  a803              ADD      r0,sp,#0xc
0000c0  f7fffffe          BL       __aeabi_memclr4
;;;430    }
0000c4  b025              ADD      sp,sp,#0x94
0000c6  e8bd83f0          POP      {r4-r9,pc}
;;;431    
                          ENDP


                          AREA ||i.des_key_setup||, CODE, READONLY, ALIGN=1

                  des_key_setup PROC
;;;432    
;;;433    void des_key_setup(const u8 *key, u32 *ek, u32 *dk)
000000  b570              PUSH     {r4-r6,lr}
;;;434    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;435    	deskey(key, 0, ek);
000008  4622              MOV      r2,r4
00000a  2100              MOVS     r1,#0
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       deskey
;;;436    	deskey(key, 1, dk);
000012  4632              MOV      r2,r6
000014  2101              MOVS     r1,#1
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       deskey
;;;437    }
00001c  bd70              POP      {r4-r6,pc}
;;;438    
                          ENDP


                          AREA ||i.desfunc||, CODE, READONLY, ALIGN=2

                  desfunc PROC
;;;323    
;;;324    static void desfunc(u32 *block, const u32 *keys)
000000  b5f0              PUSH     {r4-r7,lr}
;;;325    {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;326    	u32 work, right, leftt;
;;;327    	int cur_round;
;;;328    
;;;329    	leftt = block[0];
000006  6822              LDR      r2,[r4,#0]
;;;330    	right = block[1];
000008  6861              LDR      r1,[r4,#4]
;;;331    
;;;332    	work = ((leftt >> 4)  ^ right) & 0x0f0f0f0fL;
00000a  ea811612          EOR      r6,r1,r2,LSR #4
00000e  f006300f          AND      r0,r6,#0xf0f0f0f
;;;333    	right ^= work;
000012  4041              EORS     r1,r1,r0
;;;334    	leftt ^= (work << 4);
000014  ea821200          EOR      r2,r2,r0,LSL #4
;;;335    
;;;336    	work = ((leftt >> 16) ^ right) & 0x0000ffffL;
000018  ea814612          EOR      r6,r1,r2,LSR #16
00001c  b2b0              UXTH     r0,r6
;;;337    	right ^= work;
00001e  4041              EORS     r1,r1,r0
;;;338    	leftt ^= (work << 16);
000020  ea824200          EOR      r2,r2,r0,LSL #16
;;;339    
;;;340    	work = ((right >> 2)  ^ leftt) & 0x33333333L;
000024  ea820691          EOR      r6,r2,r1,LSR #2
000028  f0063033          AND      r0,r6,#0x33333333
;;;341    	leftt ^= work;
00002c  4042              EORS     r2,r2,r0
;;;342    	right ^= (work << 2);
00002e  ea810180          EOR      r1,r1,r0,LSL #2
;;;343    
;;;344    	work = ((right >> 8)  ^ leftt) & 0x00ff00ffL;
000032  ea822611          EOR      r6,r2,r1,LSR #8
000036  f00610ff          AND      r0,r6,#0xff00ff
;;;345    	leftt ^= work;
00003a  4042              EORS     r2,r2,r0
;;;346    	right ^= (work << 8);
00003c  ea812100          EOR      r1,r1,r0,LSL #8
;;;347    
;;;348    	right = ROLc(right, 1);
000040  004e              LSLS     r6,r1,#1
000042  ea4671d1          ORR      r1,r6,r1,LSR #31
;;;349    	work = (leftt ^ right) & 0xaaaaaaaaL;
000046  ea820601          EOR      r6,r2,r1
00004a  f00630aa          AND      r0,r6,#0xaaaaaaaa
;;;350    
;;;351    	leftt ^= work;
00004e  4042              EORS     r2,r2,r0
;;;352    	right ^= work;
000050  4041              EORS     r1,r1,r0
;;;353    	leftt = ROLc(leftt, 1);
000052  0056              LSLS     r6,r2,#1
000054  ea4672d2          ORR      r2,r6,r2,LSR #31
;;;354    
;;;355    	for (cur_round = 0; cur_round < 8; cur_round++) {
000058  2500              MOVS     r5,#0
00005a  e074              B        |L10.326|
                  |L10.92|
;;;356    		work  = RORc(right, 4) ^ *keys++;
00005c  090e              LSRS     r6,r1,#4
00005e  ea467601          ORR      r6,r6,r1,LSL #28
000062  f853cb04          LDR      r12,[r3],#4
000066  ea86000c          EOR      r0,r6,r12
;;;357    		leftt ^= SP7[work        & 0x3fL]
00006a  f000063f          AND      r6,r0,#0x3f
00006e  4f4c              LDR      r7,|L10.416|
000070  f8576026          LDR      r6,[r7,r6,LSL #2]
000074  4f4b              LDR      r7,|L10.420|
000076  f3c02c05          UBFX     r12,r0,#8,#6
00007a  f857702c          LDR      r7,[r7,r12,LSL #2]
00007e  407e              EORS     r6,r6,r7
000080  4f49              LDR      r7,|L10.424|
000082  f3c04c05          UBFX     r12,r0,#16,#6
000086  f857702c          LDR      r7,[r7,r12,LSL #2]
00008a  407e              EORS     r6,r6,r7
00008c  4f47              LDR      r7,|L10.428|
00008e  f3c06c05          UBFX     r12,r0,#24,#6
000092  f857702c          LDR      r7,[r7,r12,LSL #2]
000096  407e              EORS     r6,r6,r7
000098  4072              EORS     r2,r2,r6
;;;358    			^ SP5[(work >>  8) & 0x3fL]
;;;359    			^ SP3[(work >> 16) & 0x3fL]
;;;360    			^ SP1[(work >> 24) & 0x3fL];
;;;361    		work  = right ^ *keys++;
00009a  cb40              LDM      r3!,{r6}
00009c  ea860001          EOR      r0,r6,r1
;;;362    		leftt ^= SP8[ work        & 0x3fL]
0000a0  f000063f          AND      r6,r0,#0x3f
0000a4  4f42              LDR      r7,|L10.432|
0000a6  f8576026          LDR      r6,[r7,r6,LSL #2]
0000aa  4f42              LDR      r7,|L10.436|
0000ac  f3c02c05          UBFX     r12,r0,#8,#6
0000b0  f857702c          LDR      r7,[r7,r12,LSL #2]
0000b4  407e              EORS     r6,r6,r7
0000b6  4f40              LDR      r7,|L10.440|
0000b8  f3c04c05          UBFX     r12,r0,#16,#6
0000bc  f857702c          LDR      r7,[r7,r12,LSL #2]
0000c0  407e              EORS     r6,r6,r7
0000c2  4f3e              LDR      r7,|L10.444|
0000c4  f3c06c05          UBFX     r12,r0,#24,#6
0000c8  f857702c          LDR      r7,[r7,r12,LSL #2]
0000cc  407e              EORS     r6,r6,r7
0000ce  4072              EORS     r2,r2,r6
;;;363    			^  SP6[(work >>  8) & 0x3fL]
;;;364    			^  SP4[(work >> 16) & 0x3fL]
;;;365    			^  SP2[(work >> 24) & 0x3fL];
;;;366    
;;;367    		work = RORc(leftt, 4) ^ *keys++;
0000d0  0916              LSRS     r6,r2,#4
0000d2  ea467602          ORR      r6,r6,r2,LSL #28
0000d6  f853cb04          LDR      r12,[r3],#4
0000da  ea86000c          EOR      r0,r6,r12
;;;368    		right ^= SP7[ work        & 0x3fL]
0000de  f000063f          AND      r6,r0,#0x3f
0000e2  4f2f              LDR      r7,|L10.416|
0000e4  f8576026          LDR      r6,[r7,r6,LSL #2]
0000e8  4f2e              LDR      r7,|L10.420|
0000ea  f3c02c05          UBFX     r12,r0,#8,#6
0000ee  f857702c          LDR      r7,[r7,r12,LSL #2]
0000f2  407e              EORS     r6,r6,r7
0000f4  4f2c              LDR      r7,|L10.424|
0000f6  f3c04c05          UBFX     r12,r0,#16,#6
0000fa  f857702c          LDR      r7,[r7,r12,LSL #2]
0000fe  407e              EORS     r6,r6,r7
000100  4f2a              LDR      r7,|L10.428|
000102  f3c06c05          UBFX     r12,r0,#24,#6
000106  f857702c          LDR      r7,[r7,r12,LSL #2]
00010a  407e              EORS     r6,r6,r7
00010c  4071              EORS     r1,r1,r6
;;;369    			^  SP5[(work >>  8) & 0x3fL]
;;;370    			^  SP3[(work >> 16) & 0x3fL]
;;;371    			^  SP1[(work >> 24) & 0x3fL];
;;;372    		work  = leftt ^ *keys++;
00010e  cb40              LDM      r3!,{r6}
000110  ea860002          EOR      r0,r6,r2
;;;373    		right ^= SP8[ work        & 0x3fL]
000114  f000063f          AND      r6,r0,#0x3f
000118  4f25              LDR      r7,|L10.432|
00011a  f8576026          LDR      r6,[r7,r6,LSL #2]
00011e  4f25              LDR      r7,|L10.436|
000120  f3c02c05          UBFX     r12,r0,#8,#6
000124  f857702c          LDR      r7,[r7,r12,LSL #2]
000128  407e              EORS     r6,r6,r7
00012a  4f23              LDR      r7,|L10.440|
00012c  f3c04c05          UBFX     r12,r0,#16,#6
000130  f857702c          LDR      r7,[r7,r12,LSL #2]
000134  407e              EORS     r6,r6,r7
000136  4f21              LDR      r7,|L10.444|
000138  f3c06c05          UBFX     r12,r0,#24,#6
00013c  f857702c          LDR      r7,[r7,r12,LSL #2]
000140  407e              EORS     r6,r6,r7
000142  4071              EORS     r1,r1,r6
000144  1c6d              ADDS     r5,r5,#1              ;355
                  |L10.326|
000146  2d08              CMP      r5,#8                 ;355
000148  db88              BLT      |L10.92|
;;;374    			^  SP6[(work >>  8) & 0x3fL]
;;;375    			^  SP4[(work >> 16) & 0x3fL]
;;;376    			^  SP2[(work >> 24) & 0x3fL];
;;;377    	}
;;;378    
;;;379    	right = RORc(right, 1);
00014a  084e              LSRS     r6,r1,#1
00014c  ea4671c1          ORR      r1,r6,r1,LSL #31
;;;380    	work = (leftt ^ right) & 0xaaaaaaaaL;
000150  ea820601          EOR      r6,r2,r1
000154  f00630aa          AND      r0,r6,#0xaaaaaaaa
;;;381    	leftt ^= work;
000158  4042              EORS     r2,r2,r0
;;;382    	right ^= work;
00015a  4041              EORS     r1,r1,r0
;;;383    	leftt = RORc(leftt, 1);
00015c  0856              LSRS     r6,r2,#1
00015e  ea4672c2          ORR      r2,r6,r2,LSL #31
;;;384    	work = ((leftt >> 8) ^ right) & 0x00ff00ffL;
000162  ea812612          EOR      r6,r1,r2,LSR #8
000166  f00610ff          AND      r0,r6,#0xff00ff
;;;385    	right ^= work;
00016a  4041              EORS     r1,r1,r0
;;;386    	leftt ^= (work << 8);
00016c  ea822200          EOR      r2,r2,r0,LSL #8
;;;387    	/* -- */
;;;388    	work = ((leftt >> 2) ^ right) & 0x33333333L;
000170  ea810692          EOR      r6,r1,r2,LSR #2
000174  f0063033          AND      r0,r6,#0x33333333
;;;389    	right ^= work;
000178  4041              EORS     r1,r1,r0
;;;390    	leftt ^= (work << 2);
00017a  ea820280          EOR      r2,r2,r0,LSL #2
;;;391    	work = ((right >> 16) ^ leftt) & 0x0000ffffL;
00017e  ea824611          EOR      r6,r2,r1,LSR #16
000182  b2b0              UXTH     r0,r6
;;;392    	leftt ^= work;
000184  4042              EORS     r2,r2,r0
;;;393    	right ^= (work << 16);
000186  ea814100          EOR      r1,r1,r0,LSL #16
;;;394    	work = ((right >> 4) ^ leftt) & 0x0f0f0f0fL;
00018a  ea821611          EOR      r6,r2,r1,LSR #4
00018e  f006300f          AND      r0,r6,#0xf0f0f0f
;;;395    	leftt ^= work;
000192  4042              EORS     r2,r2,r0
;;;396    	right ^= (work << 4);
000194  ea811100          EOR      r1,r1,r0,LSL #4
;;;397    
;;;398    	block[0] = right;
000198  6021              STR      r1,[r4,#0]
;;;399    	block[1] = leftt;
00019a  6062              STR      r2,[r4,#4]
;;;400    }
00019c  bdf0              POP      {r4-r7,pc}
;;;401    
                          ENDP

00019e  0000              DCW      0x0000
                  |L10.416|
                          DCD      ||SP7||
                  |L10.420|
                          DCD      ||SP5||
                  |L10.424|
                          DCD      ||SP3||
                  |L10.428|
                          DCD      ||SP1||
                  |L10.432|
                          DCD      ||SP8||
                  |L10.436|
                          DCD      ||SP6||
                  |L10.440|
                          DCD      ||SP4||
                  |L10.444|
                          DCD      ||SP2||

                          AREA ||i.deskey||, CODE, READONLY, ALIGN=2

                  deskey PROC
;;;278    
;;;279    static void deskey(const u8 *key, int decrypt, u32 *keyout)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;280    {
000004  b0bd              SUB      sp,sp,#0xf4
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  4693              MOV      r11,r2
;;;281    	u32 i, j, l, m, n, kn[32];
;;;282    	u8 pc1m[56], pcr[56];
;;;283    
;;;284    	for (j = 0; j < 56; j++) {
00000c  2400              MOVS     r4,#0
00000e  e015              B        |L11.60|
                  |L11.16|
;;;285    		l = (u32) pc1[j];
000010  4840              LDR      r0,|L11.276|
000012  5d05              LDRB     r5,[r0,r4]
;;;286    		m = l & 7;
000014  f0050707          AND      r7,r5,#7
;;;287    		pc1m[j] = (u8)
000018  eb0900d5          ADD      r0,r9,r5,LSR #3
00001c  7800              LDRB     r0,[r0,#0]
00001e  493e              LDR      r1,|L11.280|
000020  f8511027          LDR      r1,[r1,r7,LSL #2]
000024  4008              ANDS     r0,r0,r1
000026  493c              LDR      r1,|L11.280|
000028  f8511027          LDR      r1,[r1,r7,LSL #2]
00002c  4288              CMP      r0,r1
00002e  d101              BNE      |L11.52|
;;;288    			((key[l >> 3U] & bytebit[m]) == bytebit[m] ? 1 : 0);
000030  2001              MOVS     r0,#1
000032  e000              B        |L11.54|
                  |L11.52|
000034  2000              MOVS     r0,#0
                  |L11.54|
000036  a90f              ADD      r1,sp,#0x3c
000038  5508              STRB     r0,[r1,r4]
00003a  1c64              ADDS     r4,r4,#1              ;284
                  |L11.60|
00003c  2c38              CMP      r4,#0x38              ;284
00003e  d3e7              BCC      |L11.16|
;;;289    	}
;;;290    
;;;291    	for (i = 0; i < 16; i++) {
000040  2600              MOVS     r6,#0
000042  e05e              B        |L11.258|
                  |L11.68|
;;;292    		if (decrypt)
000044  f1ba0f00          CMP      r10,#0
000048  d003              BEQ      |L11.82|
;;;293    			m = (15 - i) << 1;
00004a  f1c6000f          RSB      r0,r6,#0xf
00004e  0047              LSLS     r7,r0,#1
000050  e000              B        |L11.84|
                  |L11.82|
;;;294    		else
;;;295    			m = i << 1;
000052  0077              LSLS     r7,r6,#1
                  |L11.84|
;;;296    		n = m + 1;
000054  f1070801          ADD      r8,r7,#1
;;;297    		kn[m] = kn[n] = 0L;
000058  2000              MOVS     r0,#0
00005a  a91d              ADD      r1,sp,#0x74
00005c  f8410028          STR      r0,[r1,r8,LSL #2]
000060  f8410027          STR      r0,[r1,r7,LSL #2]
;;;298    		for (j = 0; j < 28; j++) {
000064  2400              MOVS     r4,#0
000066  e010              B        |L11.138|
                  |L11.104|
;;;299    			l = j + (u32) totrot[i];
000068  482c              LDR      r0,|L11.284|
00006a  5d80              LDRB     r0,[r0,r6]
00006c  1905              ADDS     r5,r0,r4
;;;300    			if (l < 28)
00006e  2d1c              CMP      r5,#0x1c
000070  d204              BCS      |L11.124|
;;;301    				pcr[j] = pc1m[l];
000072  a80f              ADD      r0,sp,#0x3c
000074  5d40              LDRB     r0,[r0,r5]
000076  a901              ADD      r1,sp,#4
000078  5508              STRB     r0,[r1,r4]
00007a  e005              B        |L11.136|
                  |L11.124|
;;;302    			else
;;;303    				pcr[j] = pc1m[l - 28];
00007c  f1a5001c          SUB      r0,r5,#0x1c
000080  a90f              ADD      r1,sp,#0x3c
000082  5c08              LDRB     r0,[r1,r0]
000084  a901              ADD      r1,sp,#4
000086  5508              STRB     r0,[r1,r4]
                  |L11.136|
000088  1c64              ADDS     r4,r4,#1              ;298
                  |L11.138|
00008a  2c1c              CMP      r4,#0x1c              ;298
00008c  d3ec              BCC      |L11.104|
;;;304    		}
;;;305    		for (/* j = 28 */; j < 56; j++) {
00008e  e010              B        |L11.178|
                  |L11.144|
;;;306    			l = j + (u32) totrot[i];
000090  4822              LDR      r0,|L11.284|
000092  5d80              LDRB     r0,[r0,r6]
000094  1905              ADDS     r5,r0,r4
;;;307    			if (l < 56)
000096  2d38              CMP      r5,#0x38
000098  d204              BCS      |L11.164|
;;;308    				pcr[j] = pc1m[l];
00009a  a80f              ADD      r0,sp,#0x3c
00009c  5d40              LDRB     r0,[r0,r5]
00009e  a901              ADD      r1,sp,#4
0000a0  5508              STRB     r0,[r1,r4]
0000a2  e005              B        |L11.176|
                  |L11.164|
;;;309    			else
;;;310    				pcr[j] = pc1m[l - 28];
0000a4  f1a5001c          SUB      r0,r5,#0x1c
0000a8  a90f              ADD      r1,sp,#0x3c
0000aa  5c08              LDRB     r0,[r1,r0]
0000ac  a901              ADD      r1,sp,#4
0000ae  5508              STRB     r0,[r1,r4]
                  |L11.176|
0000b0  1c64              ADDS     r4,r4,#1              ;305
                  |L11.178|
0000b2  2c38              CMP      r4,#0x38              ;305
0000b4  d3ec              BCC      |L11.144|
;;;311    		}
;;;312    		for (j = 0; j < 24; j++) {
0000b6  2400              MOVS     r4,#0
0000b8  e020              B        |L11.252|
                  |L11.186|
;;;313    			if ((int) pcr[(int) pc2[j]] != 0)
0000ba  4819              LDR      r0,|L11.288|
0000bc  5d00              LDRB     r0,[r0,r4]
0000be  a901              ADD      r1,sp,#4
0000c0  5c08              LDRB     r0,[r1,r0]
0000c2  b148              CBZ      r0,|L11.216|
;;;314    				kn[m] |= bigbyte[j];
0000c4  a81d              ADD      r0,sp,#0x74
0000c6  f8500027          LDR      r0,[r0,r7,LSL #2]
0000ca  4916              LDR      r1,|L11.292|
0000cc  f8511024          LDR      r1,[r1,r4,LSL #2]
0000d0  4308              ORRS     r0,r0,r1
0000d2  a91d              ADD      r1,sp,#0x74
0000d4  f8410027          STR      r0,[r1,r7,LSL #2]
                  |L11.216|
;;;315    			if ((int) pcr[(int) pc2[j + 24]] != 0)
0000d8  4911              LDR      r1,|L11.288|
0000da  f1040018          ADD      r0,r4,#0x18
0000de  5c08              LDRB     r0,[r1,r0]
0000e0  a901              ADD      r1,sp,#4
0000e2  5c08              LDRB     r0,[r1,r0]
0000e4  b148              CBZ      r0,|L11.250|
;;;316    				kn[n] |= bigbyte[j];
0000e6  a81d              ADD      r0,sp,#0x74
0000e8  f8500028          LDR      r0,[r0,r8,LSL #2]
0000ec  490d              LDR      r1,|L11.292|
0000ee  f8511024          LDR      r1,[r1,r4,LSL #2]
0000f2  4308              ORRS     r0,r0,r1
0000f4  a91d              ADD      r1,sp,#0x74
0000f6  f8410028          STR      r0,[r1,r8,LSL #2]
                  |L11.250|
0000fa  1c64              ADDS     r4,r4,#1              ;312
                  |L11.252|
0000fc  2c18              CMP      r4,#0x18              ;312
0000fe  d3dc              BCC      |L11.186|
000100  1c76              ADDS     r6,r6,#1              ;291
                  |L11.258|
000102  2e10              CMP      r6,#0x10              ;291
000104  d39e              BCC      |L11.68|
;;;317    		}
;;;318    	}
;;;319    
;;;320    	cookey(kn, keyout);
000106  4659              MOV      r1,r11
000108  a81d              ADD      r0,sp,#0x74
00010a  f7fffffe          BL       cookey
;;;321    }
00010e  b03d              ADD      sp,sp,#0xf4
000110  e8bd8ff0          POP      {r4-r11,pc}
;;;322    
                          ENDP

                  |L11.276|
                          DCD      pc1
                  |L11.280|
                          DCD      bytebit
                  |L11.284|
                          DCD      totrot
                  |L11.288|
                          DCD      pc2
                  |L11.292|
                          DCD      bigbyte

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L12.30|
00001a  2001              MOVS     r0,#1
                  |L12.28|
;;;495    }
00001c  4770              BX       lr
                  |L12.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L12.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L17.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L17.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L17.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L17.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L20.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L20.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L20.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L20.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L26.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       __aeabi_memcpy
                  |L26.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||i.xdbug_buf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  xdbug_buf PROC
;;;147    #define RUN_TEST printk("RUN_TEST >>> LINE:%d ,,, FUNCTION:%s ,,, FILE:%s \r\n",__LINE__,__FUNCTION__,__FILE__);
;;;148    static void xdbug_buf(const char * name , const unsigned char * buf , const int len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;150    	int i = 0;
00000a  2400              MOVS     r4,#0
;;;151    	printf("dbug buf [%s]\n",name);
00000c  4629              MOV      r1,r5
00000e  a008              ADR      r0,|L33.48|
000010  f7fffffe          BL       __2printf
;;;152    	for(;i<len;i++)
000014  e004              B        |L33.32|
                  |L33.22|
;;;153    	{
;;;154    		printf("0x%02x,",buf[i]);
000016  5d31              LDRB     r1,[r6,r4]
000018  a009              ADR      r0,|L33.64|
00001a  f7fffffe          BL       __2printf
00001e  1c64              ADDS     r4,r4,#1              ;152
                  |L33.32|
000020  42bc              CMP      r4,r7                 ;152
000022  dbf8              BLT      |L33.22|
;;;155    	}
;;;156    	printf("\n");
000024  a008              ADR      r0,|L33.72|
000026  f7fffffe          BL       __2printf
;;;157    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;158    #define DEBUG_PARAM_SDIO
                          ENDP

00002e  0000              DCW      0x0000
                  |L33.48|
000030  64627567          DCB      "dbug buf [%s]\n",0
000034  20627566
000038  205b2573
00003c  5d0a00  
00003f  00                DCB      0
                  |L33.64|
000040  30782530          DCB      "0x%02x,",0
000044  32782c00
                  |L33.72|
000048  0a00              DCB      "\n",0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  bytebit
                          DCD      0x00000080
                          DCD      0x00000040
                          DCD      0x00000020
                          DCD      0x00000010
                          DCD      0x00000008
                          DCD      0x00000004
                          DCD      0x00000002
                          DCD      0x00000001
                  bigbyte
                          DCD      0x00800000
                          DCD      0x00400000
                          DCD      0x00200000
                          DCD      0x00100000
                          DCD      0x00080000
                          DCD      0x00040000
                          DCD      0x00020000
                          DCD      0x00010000
                          DCD      0x00008000
                          DCD      0x00004000
                          DCD      0x00002000
                          DCD      0x00001000
                          DCD      0x00000800
                          DCD      0x00000400
                          DCD      0x00000200
                          DCD      0x00000100
                          DCD      0x00000080
                          DCD      0x00000040
                          DCD      0x00000020
                          DCD      0x00000010
                          DCD      0x00000008
                          DCD      0x00000004
                          DCD      0x00000002
                          DCD      0x00000001
                  pc1
000080  38302820          DCB      0x38,0x30,0x28,0x20
000084  18100800          DCB      0x18,0x10,0x08,0x00
000088  39312921          DCB      0x39,0x31,0x29,0x21
00008c  19110901          DCB      0x19,0x11,0x09,0x01
000090  3a322a22          DCB      0x3a,0x32,0x2a,0x22
000094  1a120a02          DCB      0x1a,0x12,0x0a,0x02
000098  3b332b23          DCB      0x3b,0x33,0x2b,0x23
00009c  3e362e26          DCB      0x3e,0x36,0x2e,0x26
0000a0  1e160e06          DCB      0x1e,0x16,0x0e,0x06
0000a4  3d352d25          DCB      0x3d,0x35,0x2d,0x25
0000a8  1d150d05          DCB      0x1d,0x15,0x0d,0x05
0000ac  3c342c24          DCB      0x3c,0x34,0x2c,0x24
0000b0  1c140c04          DCB      0x1c,0x14,0x0c,0x04
0000b4  1b130b03          DCB      0x1b,0x13,0x0b,0x03
                  totrot
0000b8  01020406          DCB      0x01,0x02,0x04,0x06
0000bc  080a0c0e          DCB      0x08,0x0a,0x0c,0x0e
0000c0  0f111315          DCB      0x0f,0x11,0x13,0x15
0000c4  17191b1c          DCB      0x17,0x19,0x1b,0x1c
                  pc2
0000c8  0d100a17          DCB      0x0d,0x10,0x0a,0x17
0000cc  0004021b          DCB      0x00,0x04,0x02,0x1b
0000d0  0e051409          DCB      0x0e,0x05,0x14,0x09
0000d4  16120b03          DCB      0x16,0x12,0x0b,0x03
0000d8  19070f06          DCB      0x19,0x07,0x0f,0x06
0000dc  1a130c01          DCB      0x1a,0x13,0x0c,0x01
0000e0  28331e24          DCB      0x28,0x33,0x1e,0x24
0000e4  2e361d27          DCB      0x2e,0x36,0x1d,0x27
0000e8  322c202f          DCB      0x32,0x2c,0x20,0x2f
0000ec  2b302637          DCB      0x2b,0x30,0x26,0x37
0000f0  21342d29          DCB      0x21,0x34,0x2d,0x29
0000f4  31231c1f          DCB      0x31,0x23,0x1c,0x1f
                  ||SP1||
                          DCD      0x01010400
                          DCD      0x00000000
                          DCD      0x00010000
                          DCD      0x01010404
                          DCD      0x01010004
                          DCD      0x00010404
                          DCD      0x00000004
                          DCD      0x00010000
                          DCD      0x00000400
                          DCD      0x01010400
                          DCD      0x01010404
                          DCD      0x00000400
                          DCD      0x01000404
                          DCD      0x01010004
                          DCD      0x01000000
                          DCD      0x00000004
                          DCD      0x00000404
                          DCD      0x01000400
                          DCD      0x01000400
                          DCD      0x00010400
                          DCD      0x00010400
                          DCD      0x01010000
                          DCD      0x01010000
                          DCD      0x01000404
                          DCD      0x00010004
                          DCD      0x01000004
                          DCD      0x01000004
                          DCD      0x00010004
                          DCD      0x00000000
                          DCD      0x00000404
                          DCD      0x00010404
                          DCD      0x01000000
                          DCD      0x00010000
                          DCD      0x01010404
                          DCD      0x00000004
                          DCD      0x01010000
                          DCD      0x01010400
                          DCD      0x01000000
                          DCD      0x01000000
                          DCD      0x00000400
                          DCD      0x01010004
                          DCD      0x00010000
                          DCD      0x00010400
                          DCD      0x01000004
                          DCD      0x00000400
                          DCD      0x00000004
                          DCD      0x01000404
                          DCD      0x00010404
                          DCD      0x01010404
                          DCD      0x00010004
                          DCD      0x01010000
                          DCD      0x01000404
                          DCD      0x01000004
                          DCD      0x00000404
                          DCD      0x00010404
                          DCD      0x01010400
                          DCD      0x00000404
                          DCD      0x01000400
                          DCD      0x01000400
                          DCD      0x00000000
                          DCD      0x00010004
                          DCD      0x00010400
                          DCD      0x00000000
                          DCD      0x01010004
                  ||SP2||
                          DCD      0x80108020
                          DCD      0x80008000
                          DCD      0x00008000
                          DCD      0x00108020
                          DCD      0x00100000
                          DCD      0x00000020
                          DCD      0x80100020
                          DCD      0x80008020
                          DCD      0x80000020
                          DCD      0x80108020
                          DCD      0x80108000
                          DCD      0x80000000
                          DCD      0x80008000
                          DCD      0x00100000
                          DCD      0x00000020
                          DCD      0x80100020
                          DCD      0x00108000
                          DCD      0x00100020
                          DCD      0x80008020
                          DCD      0x00000000
                          DCD      0x80000000
                          DCD      0x00008000
                          DCD      0x00108020
                          DCD      0x80100000
                          DCD      0x00100020
                          DCD      0x80000020
                          DCD      0x00000000
                          DCD      0x00108000
                          DCD      0x00008020
                          DCD      0x80108000
                          DCD      0x80100000
                          DCD      0x00008020
                          DCD      0x00000000
                          DCD      0x00108020
                          DCD      0x80100020
                          DCD      0x00100000
                          DCD      0x80008020
                          DCD      0x80100000
                          DCD      0x80108000
                          DCD      0x00008000
                          DCD      0x80100000
                          DCD      0x80008000
                          DCD      0x00000020
                          DCD      0x80108020
                          DCD      0x00108020
                          DCD      0x00000020
                          DCD      0x00008000
                          DCD      0x80000000
                          DCD      0x00008020
                          DCD      0x80108000
                          DCD      0x00100000
                          DCD      0x80000020
                          DCD      0x00100020
                          DCD      0x80008020
                          DCD      0x80000020
                          DCD      0x00100020
                          DCD      0x00108000
                          DCD      0x00000000
                          DCD      0x80008000
                          DCD      0x00008020
                          DCD      0x80000000
                          DCD      0x80100020
                          DCD      0x80108020
                          DCD      0x00108000
                  ||SP3||
                          DCD      0x00000208
                          DCD      0x08020200
                          DCD      0x00000000
                          DCD      0x08020008
                          DCD      0x08000200
                          DCD      0x00000000
                          DCD      0x00020208
                          DCD      0x08000200
                          DCD      0x00020008
                          DCD      0x08000008
                          DCD      0x08000008
                          DCD      0x00020000
                          DCD      0x08020208
                          DCD      0x00020008
                          DCD      0x08020000
                          DCD      0x00000208
                          DCD      0x08000000
                          DCD      0x00000008
                          DCD      0x08020200
                          DCD      0x00000200
                          DCD      0x00020200
                          DCD      0x08020000
                          DCD      0x08020008
                          DCD      0x00020208
                          DCD      0x08000208
                          DCD      0x00020200
                          DCD      0x00020000
                          DCD      0x08000208
                          DCD      0x00000008
                          DCD      0x08020208
                          DCD      0x00000200
                          DCD      0x08000000
                          DCD      0x08020200
                          DCD      0x08000000
                          DCD      0x00020008
                          DCD      0x00000208
                          DCD      0x00020000
                          DCD      0x08020200
                          DCD      0x08000200
                          DCD      0x00000000
                          DCD      0x00000200
                          DCD      0x00020008
                          DCD      0x08020208
                          DCD      0x08000200
                          DCD      0x08000008
                          DCD      0x00000200
                          DCD      0x00000000
                          DCD      0x08020008
                          DCD      0x08000208
                          DCD      0x00020000
                          DCD      0x08000000
                          DCD      0x08020208
                          DCD      0x00000008
                          DCD      0x00020208
                          DCD      0x00020200
                          DCD      0x08000008
                          DCD      0x08020000
                          DCD      0x08000208
                          DCD      0x00000208
                          DCD      0x08020000
                          DCD      0x00020208
                          DCD      0x00000008
                          DCD      0x08020008
                          DCD      0x00020200
                  ||SP4||
                          DCD      0x00802001
                          DCD      0x00002081
                          DCD      0x00002081
                          DCD      0x00000080
                          DCD      0x00802080
                          DCD      0x00800081
                          DCD      0x00800001
                          DCD      0x00002001
                          DCD      0x00000000
                          DCD      0x00802000
                          DCD      0x00802000
                          DCD      0x00802081
                          DCD      0x00000081
                          DCD      0x00000000
                          DCD      0x00800080
                          DCD      0x00800001
                          DCD      0x00000001
                          DCD      0x00002000
                          DCD      0x00800000
                          DCD      0x00802001
                          DCD      0x00000080
                          DCD      0x00800000
                          DCD      0x00002001
                          DCD      0x00002080
                          DCD      0x00800081
                          DCD      0x00000001
                          DCD      0x00002080
                          DCD      0x00800080
                          DCD      0x00002000
                          DCD      0x00802080
                          DCD      0x00802081
                          DCD      0x00000081
                          DCD      0x00800080
                          DCD      0x00800001
                          DCD      0x00802000
                          DCD      0x00802081
                          DCD      0x00000081
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00802000
                          DCD      0x00002080
                          DCD      0x00800080
                          DCD      0x00800081
                          DCD      0x00000001
                          DCD      0x00802001
                          DCD      0x00002081
                          DCD      0x00002081
                          DCD      0x00000080
                          DCD      0x00802081
                          DCD      0x00000081
                          DCD      0x00000001
                          DCD      0x00002000
                          DCD      0x00800001
                          DCD      0x00002001
                          DCD      0x00802080
                          DCD      0x00800081
                          DCD      0x00002001
                          DCD      0x00002080
                          DCD      0x00800000
                          DCD      0x00802001
                          DCD      0x00000080
                          DCD      0x00800000
                          DCD      0x00002000
                          DCD      0x00802080
                  ||SP5||
                          DCD      0x00000100
                          DCD      0x02080100
                          DCD      0x02080000
                          DCD      0x42000100
                          DCD      0x00080000
                          DCD      0x00000100
                          DCD      0x40000000
                          DCD      0x02080000
                          DCD      0x40080100
                          DCD      0x00080000
                          DCD      0x02000100
                          DCD      0x40080100
                          DCD      0x42000100
                          DCD      0x42080000
                          DCD      0x00080100
                          DCD      0x40000000
                          DCD      0x02000000
                          DCD      0x40080000
                          DCD      0x40080000
                          DCD      0x00000000
                          DCD      0x40000100
                          DCD      0x42080100
                          DCD      0x42080100
                          DCD      0x02000100
                          DCD      0x42080000
                          DCD      0x40000100
                          DCD      0x00000000
                          DCD      0x42000000
                          DCD      0x02080100
                          DCD      0x02000000
                          DCD      0x42000000
                          DCD      0x00080100
                          DCD      0x00080000
                          DCD      0x42000100
                          DCD      0x00000100
                          DCD      0x02000000
                          DCD      0x40000000
                          DCD      0x02080000
                          DCD      0x42000100
                          DCD      0x40080100
                          DCD      0x02000100
                          DCD      0x40000000
                          DCD      0x42080000
                          DCD      0x02080100
                          DCD      0x40080100
                          DCD      0x00000100
                          DCD      0x02000000
                          DCD      0x42080000
                          DCD      0x42080100
                          DCD      0x00080100
                          DCD      0x42000000
                          DCD      0x42080100
                          DCD      0x02080000
                          DCD      0x00000000
                          DCD      0x40080000
                          DCD      0x42000000
                          DCD      0x00080100
                          DCD      0x02000100
                          DCD      0x40000100
                          DCD      0x00080000
                          DCD      0x00000000
                          DCD      0x40080000
                          DCD      0x02080100
                          DCD      0x40000100
                  ||SP6||
                          DCD      0x20000010
                          DCD      0x20400000
                          DCD      0x00004000
                          DCD      0x20404010
                          DCD      0x20400000
                          DCD      0x00000010
                          DCD      0x20404010
                          DCD      0x00400000
                          DCD      0x20004000
                          DCD      0x00404010
                          DCD      0x00400000
                          DCD      0x20000010
                          DCD      0x00400010
                          DCD      0x20004000
                          DCD      0x20000000
                          DCD      0x00004010
                          DCD      0x00000000
                          DCD      0x00400010
                          DCD      0x20004010
                          DCD      0x00004000
                          DCD      0x00404000
                          DCD      0x20004010
                          DCD      0x00000010
                          DCD      0x20400010
                          DCD      0x20400010
                          DCD      0x00000000
                          DCD      0x00404010
                          DCD      0x20404000
                          DCD      0x00004010
                          DCD      0x00404000
                          DCD      0x20404000
                          DCD      0x20000000
                          DCD      0x20004000
                          DCD      0x00000010
                          DCD      0x20400010
                          DCD      0x00404000
                          DCD      0x20404010
                          DCD      0x00400000
                          DCD      0x00004010
                          DCD      0x20000010
                          DCD      0x00400000
                          DCD      0x20004000
                          DCD      0x20000000
                          DCD      0x00004010
                          DCD      0x20000010
                          DCD      0x20404010
                          DCD      0x00404000
                          DCD      0x20400000
                          DCD      0x00404010
                          DCD      0x20404000
                          DCD      0x00000000
                          DCD      0x20400010
                          DCD      0x00000010
                          DCD      0x00004000
                          DCD      0x20400000
                          DCD      0x00404010
                          DCD      0x00004000
                          DCD      0x00400010
                          DCD      0x20004010
                          DCD      0x00000000
                          DCD      0x20404000
                          DCD      0x20000000
                          DCD      0x00400010
                          DCD      0x20004010
                  ||SP7||
                          DCD      0x00200000
                          DCD      0x04200002
                          DCD      0x04000802
                          DCD      0x00000000
                          DCD      0x00000800
                          DCD      0x04000802
                          DCD      0x00200802
                          DCD      0x04200800
                          DCD      0x04200802
                          DCD      0x00200000
                          DCD      0x00000000
                          DCD      0x04000002
                          DCD      0x00000002
                          DCD      0x04000000
                          DCD      0x04200002
                          DCD      0x00000802
                          DCD      0x04000800
                          DCD      0x00200802
                          DCD      0x00200002
                          DCD      0x04000800
                          DCD      0x04000002
                          DCD      0x04200000
                          DCD      0x04200800
                          DCD      0x00200002
                          DCD      0x04200000
                          DCD      0x00000800
                          DCD      0x00000802
                          DCD      0x04200802
                          DCD      0x00200800
                          DCD      0x00000002
                          DCD      0x04000000
                          DCD      0x00200800
                          DCD      0x04000000
                          DCD      0x00200800
                          DCD      0x00200000
                          DCD      0x04000802
                          DCD      0x04000802
                          DCD      0x04200002
                          DCD      0x04200002
                          DCD      0x00000002
                          DCD      0x00200002
                          DCD      0x04000000
                          DCD      0x04000800
                          DCD      0x00200000
                          DCD      0x04200800
                          DCD      0x00000802
                          DCD      0x00200802
                          DCD      0x04200800
                          DCD      0x00000802
                          DCD      0x04000002
                          DCD      0x04200802
                          DCD      0x04200000
                          DCD      0x00200800
                          DCD      0x00000000
                          DCD      0x00000002
                          DCD      0x04200802
                          DCD      0x00000000
                          DCD      0x00200802
                          DCD      0x04200000
                          DCD      0x00000800
                          DCD      0x04000002
                          DCD      0x04000800
                          DCD      0x00000800
                          DCD      0x00200002
                  ||SP8||
                          DCD      0x10001040
                          DCD      0x00001000
                          DCD      0x00040000
                          DCD      0x10041040
                          DCD      0x10000000
                          DCD      0x10001040
                          DCD      0x00000040
                          DCD      0x10000000
                          DCD      0x00040040
                          DCD      0x10040000
                          DCD      0x10041040
                          DCD      0x00041000
                          DCD      0x10041000
                          DCD      0x00041040
                          DCD      0x00001000
                          DCD      0x00000040
                          DCD      0x10040000
                          DCD      0x10000040
                          DCD      0x10001000
                          DCD      0x00001040
                          DCD      0x00041000
                          DCD      0x00040040
                          DCD      0x10040040
                          DCD      0x10041000
                          DCD      0x00001040
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x10040040
                          DCD      0x10000040
                          DCD      0x10001000
                          DCD      0x00041040
                          DCD      0x00040000
                          DCD      0x00041040
                          DCD      0x00040000
                          DCD      0x10041000
                          DCD      0x00001000
                          DCD      0x00000040
                          DCD      0x10040040
                          DCD      0x00001000
                          DCD      0x00041040
                          DCD      0x10001000
                          DCD      0x00000040
                          DCD      0x10000040
                          DCD      0x10040000
                          DCD      0x10040040
                          DCD      0x10000000
                          DCD      0x00040000
                          DCD      0x10001040
                          DCD      0x00000000
                          DCD      0x10041040
                          DCD      0x00040040
                          DCD      0x10000040
                          DCD      0x10040000
                          DCD      0x10001000
                          DCD      0x10001040
                          DCD      0x00000000
                          DCD      0x10041040
                          DCD      0x00041000
                          DCD      0x00041000
                          DCD      0x00001040
                          DCD      0x00001040
                          DCD      0x00040040
                          DCD      0x10000000
                          DCD      0x10041000
