; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_gtc.o --depend=.\obj\eap_gtc.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_gtc.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_gtc.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_gtc_deinit||, CODE, READONLY, ALIGN=1

                  eap_gtc_deinit PROC
;;;42     
;;;43     static void eap_gtc_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;44     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;45     	struct eap_gtc_data *data = priv;
000006  4625              MOV      r5,r4
;;;46     	os_free(data);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       os_free
;;;47     }
00000e  bd70              POP      {r4-r6,pc}
;;;48     
                          ENDP


                          AREA ||i.eap_gtc_init||, CODE, READONLY, ALIGN=2

                  eap_gtc_init PROC
;;;25     
;;;26     static void * eap_gtc_init(struct eap_sm *sm)
000000  b570              PUSH     {r4-r6,lr}
;;;27     {
000002  4604              MOV      r4,r0
;;;28     	struct eap_gtc_data *data;
;;;29     	data = os_zalloc(sizeof(*data));
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       os_zalloc
00000a  4605              MOV      r5,r0
;;;30     	if (data == NULL)
00000c  b90d              CBNZ     r5,|L3.18|
;;;31     		return NULL;
00000e  2000              MOVS     r0,#0
                  |L3.16|
;;;32     
;;;33     	if (sm->m && sm->m->vendor == EAP_VENDOR_IETF &&
;;;34     	    sm->m->method == EAP_TYPE_FAST) {
;;;35     		wpa_printf(MSG_DEBUG, "EAP-GTC: EAP-FAST tunnel - use prefix "
;;;36     			   "with challenge/response");
;;;37     		data->prefix = 1;
;;;38     	}
;;;39     	return data;
;;;40     }
000010  bd70              POP      {r4-r6,pc}
                  |L3.18|
000012  6ca0              LDR      r0,[r4,#0x48]         ;33
000014  b160              CBZ      r0,|L3.48|
000016  6ca0              LDR      r0,[r4,#0x48]         ;33
000018  6800              LDR      r0,[r0,#0]            ;33
00001a  b948              CBNZ     r0,|L3.48|
00001c  6ca0              LDR      r0,[r4,#0x48]         ;34
00001e  7900              LDRB     r0,[r0,#4]            ;34
000020  282b              CMP      r0,#0x2b              ;34
000022  d105              BNE      |L3.48|
000024  a103              ADR      r1,|L3.52|
000026  2000              MOVS     r0,#0                 ;35
000028  f7fffffe          BL       wpa_printf
00002c  2001              MOVS     r0,#1                 ;37
00002e  6028              STR      r0,[r5,#0]            ;37
                  |L3.48|
000030  4628              MOV      r0,r5                 ;39
000032  e7ed              B        |L3.16|
;;;41     
                          ENDP

                  |L3.52|
000034  4541502d          DCB      "EAP-GTC: EAP-FAST tunnel - use prefix with challenge/re"
000038  4754433a
00003c  20454150
000040  2d464153
000044  54207475
000048  6e6e656c
00004c  202d2075
000050  73652070
000054  72656669
000058  78207769
00005c  74682063
000060  68616c6c
000064  656e6765
000068  2f7265  
00006b  73706f6e          DCB      "sponse",0
00006f  736500  
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.eap_gtc_process||, CODE, READONLY, ALIGN=2

                  eap_gtc_process PROC
;;;49     
;;;50     static struct wpabuf * eap_gtc_process(struct eap_sm *sm, void *priv,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;51     				       struct eap_method_ret *ret,
;;;52     				       const struct wpabuf *reqData)
;;;53     {
000004  b087              SUB      sp,sp,#0x1c
000006  4614              MOV      r4,r2
000008  469b              MOV      r11,r3
;;;54     	struct eap_gtc_data *data = priv;
00000a  9e08              LDR      r6,[sp,#0x20]
;;;55     	struct wpabuf *resp;
;;;56     	const u8 *pos, *password, *identity;
;;;57     	size_t password_len, identity_len, len, plen;
;;;58     	int otp;
;;;59     	u8 id;
;;;60     
;;;61     	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_GTC, reqData, &len);
00000c  ab04              ADD      r3,sp,#0x10
00000e  465a              MOV      r2,r11
000010  2106              MOVS     r1,#6
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       eap_hdr_validate
000018  4680              MOV      r8,r0
;;;62     	if (pos == NULL) {
00001a  f1b80f00          CMP      r8,#0
00001e  d105              BNE      |L4.44|
;;;63     		ret->ignore = TRUE;
000020  2001              MOVS     r0,#1
000022  6020              STR      r0,[r4,#0]
;;;64     		return NULL;
000024  2000              MOVS     r0,#0
                  |L4.38|
;;;65     	}
;;;66     	id = eap_get_id(reqData);
;;;67     
;;;68     	wpa_hexdump_ascii(MSG_MSGDUMP, "EAP-GTC: Request message", pos, len);
;;;69     	if (data->prefix &&
;;;70     	    (len < 10 || os_memcmp(pos, "CHALLENGE=", 10) != 0)) {
;;;71     		wpa_printf(MSG_DEBUG, "EAP-GTC: Challenge did not start with "
;;;72     			   "expected prefix");
;;;73     
;;;74     		/* Send an empty response in order to allow tunneled
;;;75     		 * acknowledgement of the failure. This will also cover the
;;;76     		 * error case which seems to use EAP-MSCHAPv2 like error
;;;77     		 * reporting with EAP-GTC inside EAP-FAST tunnel. */
;;;78     		resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_GTC,
;;;79     				     0, EAP_CODE_RESPONSE, id);
;;;80     		return resp;
;;;81     	}
;;;82     
;;;83     	password = eap_get_config_otp(sm, &password_len);
;;;84     	if (password)
;;;85     		otp = 1;
;;;86     	else {
;;;87     		password = eap_get_config_password(sm, &password_len);
;;;88     		otp = 0;
;;;89     	}
;;;90     
;;;91     	if (password == NULL) {
;;;92     		wpa_printf(MSG_INFO, "EAP-GTC: Password not configured");
;;;93     		eap_sm_request_otp(sm, (const char *) pos, len);
;;;94     		ret->ignore = TRUE;
;;;95     		return NULL;
;;;96     	}
;;;97     
;;;98     	ret->ignore = FALSE;
;;;99     
;;;100    	ret->methodState = data->prefix ? METHOD_MAY_CONT : METHOD_DONE;
;;;101    	ret->decision = DECISION_COND_SUCC;
;;;102    	ret->allowNotifications = FALSE;
;;;103    
;;;104    	plen = password_len;
;;;105    	identity = eap_get_config_identity(sm, &identity_len);
;;;106    	if (identity == NULL)
;;;107    		return NULL;
;;;108    	if (data->prefix)
;;;109    		plen += 9 + identity_len + 1;
;;;110    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_GTC, plen,
;;;111    			     EAP_CODE_RESPONSE, id);
;;;112    	if (resp == NULL)
;;;113    		return NULL;
;;;114    	if (data->prefix) {
;;;115    		wpabuf_put_data(resp, "RESPONSE=", 9);
;;;116    		wpabuf_put_data(resp, identity, identity_len);
;;;117    		wpabuf_put_u8(resp, '\0');
;;;118    	}
;;;119    	wpabuf_put_data(resp, password, password_len);
;;;120    	wpa_hexdump_ascii_key(MSG_MSGDUMP, "EAP-GTC: Response",
;;;121    			      wpabuf_head_u8(resp) + sizeof(struct eap_hdr) +
;;;122    			      1, plen);
;;;123    
;;;124    	if (otp) {
;;;125    		wpa_printf(MSG_DEBUG, "EAP-GTC: Forgetting used password");
;;;126    		eap_clear_config_otp(sm);
;;;127    	}
;;;128    
;;;129    	return resp;
;;;130    }
000026  b00b              ADD      sp,sp,#0x2c
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.44|
00002c  4658              MOV      r0,r11                ;66
00002e  f7fffffe          BL       eap_get_id
000032  9002              STR      r0,[sp,#8]            ;66
000034  4642              MOV      r2,r8                 ;68
000036  a148              ADR      r1,|L4.344|
000038  2000              MOVS     r0,#0                 ;68
00003a  9b04              LDR      r3,[sp,#0x10]         ;68
00003c  f7fffffe          BL       wpa_hexdump_ascii
000040  6830              LDR      r0,[r6,#0]            ;69
000042  b1b8              CBZ      r0,|L4.116|
000044  9804              LDR      r0,[sp,#0x10]         ;70
000046  280a              CMP      r0,#0xa               ;70
000048  d305              BCC      |L4.86|
00004a  220a              MOVS     r2,#0xa               ;70
00004c  a149              ADR      r1,|L4.372|
00004e  4640              MOV      r0,r8                 ;70
000050  f7fffffe          BL       os_memcmp
000054  b170              CBZ      r0,|L4.116|
                  |L4.86|
000056  a14a              ADR      r1,|L4.384|
000058  2000              MOVS     r0,#0                 ;71
00005a  f7fffffe          BL       wpa_printf
00005e  9b02              LDR      r3,[sp,#8]            ;78
000060  9300              STR      r3,[sp,#0]            ;78
000062  2302              MOVS     r3,#2                 ;78
000064  2200              MOVS     r2,#0                 ;78
000066  2106              MOVS     r1,#6                 ;78
000068  4610              MOV      r0,r2                 ;78
00006a  f7fffffe          BL       eap_msg_alloc
00006e  4607              MOV      r7,r0                 ;78
000070  4638              MOV      r0,r7                 ;80
000072  e7d8              B        |L4.38|
                  |L4.116|
000074  a906              ADD      r1,sp,#0x18           ;83
000076  9807              LDR      r0,[sp,#0x1c]         ;83
000078  f7fffffe          BL       eap_get_config_otp
00007c  4605              MOV      r5,r0                 ;83
00007e  b115              CBZ      r5,|L4.134|
000080  2001              MOVS     r0,#1                 ;85
000082  9003              STR      r0,[sp,#0xc]          ;85
000084  e006              B        |L4.148|
                  |L4.134|
000086  a906              ADD      r1,sp,#0x18           ;87
000088  9807              LDR      r0,[sp,#0x1c]         ;87
00008a  f7fffffe          BL       eap_get_config_password
00008e  4605              MOV      r5,r0                 ;87
000090  2000              MOVS     r0,#0                 ;88
000092  9003              STR      r0,[sp,#0xc]          ;88
                  |L4.148|
000094  b965              CBNZ     r5,|L4.176|
000096  a148              ADR      r1,|L4.440|
000098  2000              MOVS     r0,#0                 ;92
00009a  f7fffffe          BL       wpa_printf
00009e  4641              MOV      r1,r8                 ;93
0000a0  9a04              LDR      r2,[sp,#0x10]         ;93
0000a2  9807              LDR      r0,[sp,#0x1c]         ;93
0000a4  f7fffffe          BL       eap_sm_request_otp
0000a8  2001              MOVS     r0,#1                 ;94
0000aa  6020              STR      r0,[r4,#0]            ;94
0000ac  2000              MOVS     r0,#0                 ;95
0000ae  e7ba              B        |L4.38|
                  |L4.176|
0000b0  2000              MOVS     r0,#0                 ;98
0000b2  6020              STR      r0,[r4,#0]            ;98
0000b4  6830              LDR      r0,[r6,#0]            ;100
0000b6  b108              CBZ      r0,|L4.188|
0000b8  2003              MOVS     r0,#3                 ;100
0000ba  e000              B        |L4.190|
                  |L4.188|
0000bc  2004              MOVS     r0,#4                 ;100
                  |L4.190|
0000be  7120              STRB     r0,[r4,#4]            ;100
0000c0  2001              MOVS     r0,#1                 ;101
0000c2  7160              STRB     r0,[r4,#5]            ;101
0000c4  2000              MOVS     r0,#0                 ;102
0000c6  60a0              STR      r0,[r4,#8]            ;102
0000c8  f8dda018          LDR      r10,[sp,#0x18]        ;104
0000cc  a905              ADD      r1,sp,#0x14           ;105
0000ce  9807              LDR      r0,[sp,#0x1c]         ;105
0000d0  f7fffffe          BL       eap_get_config_identity
0000d4  4681              MOV      r9,r0                 ;105
0000d6  f1b90f00          CMP      r9,#0                 ;106
0000da  d101              BNE      |L4.224|
0000dc  2000              MOVS     r0,#0                 ;107
0000de  e7a2              B        |L4.38|
                  |L4.224|
0000e0  6830              LDR      r0,[r6,#0]            ;108
0000e2  b110              CBZ      r0,|L4.234|
0000e4  9805              LDR      r0,[sp,#0x14]         ;109
0000e6  300a              ADDS     r0,r0,#0xa            ;109
0000e8  4482              ADD      r10,r10,r0            ;109
                  |L4.234|
0000ea  9b02              LDR      r3,[sp,#8]            ;110
0000ec  9300              STR      r3,[sp,#0]            ;110
0000ee  2302              MOVS     r3,#2                 ;110
0000f0  4652              MOV      r2,r10                ;110
0000f2  2106              MOVS     r1,#6                 ;110
0000f4  2000              MOVS     r0,#0                 ;110
0000f6  f7fffffe          BL       eap_msg_alloc
0000fa  4607              MOV      r7,r0                 ;110
0000fc  b90f              CBNZ     r7,|L4.258|
0000fe  2000              MOVS     r0,#0                 ;113
000100  e791              B        |L4.38|
                  |L4.258|
000102  6830              LDR      r0,[r6,#0]            ;114
000104  b168              CBZ      r0,|L4.290|
000106  2209              MOVS     r2,#9                 ;115
000108  a134              ADR      r1,|L4.476|
00010a  4638              MOV      r0,r7                 ;115
00010c  f7fffffe          BL       wpabuf_put_data
000110  4649              MOV      r1,r9                 ;116
000112  4638              MOV      r0,r7                 ;116
000114  9a05              LDR      r2,[sp,#0x14]         ;116
000116  f7fffffe          BL       wpabuf_put_data
00011a  2100              MOVS     r1,#0                 ;117
00011c  4638              MOV      r0,r7                 ;117
00011e  f7fffffe          BL       wpabuf_put_u8
                  |L4.290|
000122  4629              MOV      r1,r5                 ;119
000124  4638              MOV      r0,r7                 ;119
000126  9a06              LDR      r2,[sp,#0x18]         ;119
000128  f7fffffe          BL       wpabuf_put_data
00012c  4638              MOV      r0,r7                 ;120
00012e  f7fffffe          BL       wpabuf_head_u8
000132  1d40              ADDS     r0,r0,#5              ;120
000134  4653              MOV      r3,r10                ;120
000136  4602              MOV      r2,r0                 ;120
000138  a12b              ADR      r1,|L4.488|
00013a  9001              STR      r0,[sp,#4]            ;120
00013c  2000              MOVS     r0,#0                 ;120
00013e  f7fffffe          BL       wpa_hexdump_ascii_key
000142  9803              LDR      r0,[sp,#0xc]          ;124
000144  b130              CBZ      r0,|L4.340|
000146  a12d              ADR      r1,|L4.508|
000148  2000              MOVS     r0,#0                 ;125
00014a  f7fffffe          BL       wpa_printf
00014e  9807              LDR      r0,[sp,#0x1c]         ;126
000150  f7fffffe          BL       eap_clear_config_otp
                  |L4.340|
000154  4638              MOV      r0,r7                 ;129
000156  e766              B        |L4.38|
;;;131    
                          ENDP

                  |L4.344|
000158  4541502d          DCB      "EAP-GTC: Request message",0
00015c  4754433a
000160  20526571
000164  75657374
000168  206d6573
00016c  73616765
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0
                  |L4.372|
000174  4348414c          DCB      "CHALLENGE=",0
000178  4c454e47
00017c  453d00  
00017f  00                DCB      0
                  |L4.384|
000180  4541502d          DCB      "EAP-GTC: Challenge did not start with expected prefix",0
000184  4754433a
000188  20436861
00018c  6c6c656e
000190  67652064
000194  6964206e
000198  6f742073
00019c  74617274
0001a0  20776974
0001a4  68206578
0001a8  70656374
0001ac  65642070
0001b0  72656669
0001b4  7800    
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L4.440|
0001b8  4541502d          DCB      "EAP-GTC: Password not configured",0
0001bc  4754433a
0001c0  20506173
0001c4  73776f72
0001c8  64206e6f
0001cc  7420636f
0001d0  6e666967
0001d4  75726564
0001d8  00      
0001d9  00                DCB      0
0001da  00                DCB      0
0001db  00                DCB      0
                  |L4.476|
0001dc  52455350          DCB      "RESPONSE=",0
0001e0  4f4e5345
0001e4  3d00    
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L4.488|
0001e8  4541502d          DCB      "EAP-GTC: Response",0
0001ec  4754433a
0001f0  20526573
0001f4  706f6e73
0001f8  6500    
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L4.508|
0001fc  4541502d          DCB      "EAP-GTC: Forgetting used password",0
000200  4754433a
000204  20466f72
000208  67657474
00020c  696e6720
000210  75736564
000214  20706173
000218  73776f72
00021c  6400    
00021e  00                DCB      0
00021f  00                DCB      0

                          AREA ||i.eap_peer_gtc_register||, CODE, READONLY, ALIGN=2

                  eap_peer_gtc_register PROC
;;;132    
;;;133    int eap_peer_gtc_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;134    {
;;;135    	struct eap_method *eap;
;;;136    	int ret;
;;;137    
;;;138    	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a30d              ADR      r3,|L5.56|
000004  2206              MOVS     r2,#6
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;139    				    EAP_VENDOR_IETF, EAP_TYPE_GTC, "GTC");
;;;140    	if (eap == NULL)
000010  b914              CBNZ     r4,|L5.24|
;;;141    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L5.22|
;;;142    
;;;143    	eap->init = eap_gtc_init;
;;;144    	eap->deinit = eap_gtc_deinit;
;;;145    	eap->process = eap_gtc_process;
;;;146    
;;;147    	ret = eap_peer_method_register(eap);
;;;148    	if (ret)
;;;149    		eap_peer_method_free(eap);
;;;150    	return ret;
;;;151    }
000016  bd70              POP      {r4-r6,pc}
                  |L5.24|
000018  4808              LDR      r0,|L5.60|
00001a  60e0              STR      r0,[r4,#0xc]          ;143
00001c  4808              LDR      r0,|L5.64|
00001e  6120              STR      r0,[r4,#0x10]         ;144
000020  4808              LDR      r0,|L5.68|
000022  6160              STR      r0,[r4,#0x14]         ;145
000024  4620              MOV      r0,r4                 ;147
000026  f7fffffe          BL       eap_peer_method_register
00002a  4605              MOV      r5,r0                 ;147
00002c  b115              CBZ      r5,|L5.52|
00002e  4620              MOV      r0,r4                 ;149
000030  f7fffffe          BL       eap_peer_method_free
                  |L5.52|
000034  4628              MOV      r0,r5                 ;150
000036  e7ee              B        |L5.22|
                          ENDP

                  |L5.56|
000038  47544300          DCB      "GTC",0
                  |L5.60|
                          DCD      eap_gtc_init
                  |L5.64|
                          DCD      eap_gtc_deinit
                  |L5.68|
                          DCD      eap_gtc_process

                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L8.30|
00001a  2001              MOVS     r0,#1
                  |L8.28|
;;;495    }
00001c  4770              BX       lr
                  |L8.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L8.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L13.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L13.14|
                  |L13.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L13.12|
;;;70     }
00000c  4770              BX       lr
                  |L13.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L13.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L14.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L14.16|
                  |L14.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L14.14|
;;;76     }
00000e  4770              BX       lr
                  |L14.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L14.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L15.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L15.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L15.18|
                  |L15.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L15.16|
;;;57     }
000010  4770              BX       lr
                  |L15.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L15.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L16.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L16.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L16.20|
                  |L16.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L16.18|
;;;64     }
000012  4770              BX       lr
                  |L16.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L16.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L17.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L17.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L17.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L17.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L20.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L20.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L20.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L20.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L26.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L26.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

