; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_fast_common.o --depend=.\obj\eap_fast_common.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_fast_common.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_common\eap_fast_common.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_fast_derive_eap_emsk||, CODE, READONLY, ALIGN=2

                  eap_fast_derive_eap_emsk PROC
;;;165    
;;;166    void eap_fast_derive_eap_emsk(const u8 *simck, u8 *emsk)
000000  b53e              PUSH     {r1-r5,lr}
;;;167    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;168    	/*
;;;169    	 * RFC 4851, Section 5.4: EAP Master Session Key Genreration
;;;170    	 * EMSK = T-PRF(S-IMCK[j],
;;;171    	 *        "Extended Session Key Generating Function", 64)
;;;172    	 */
;;;173    
;;;174    	sha1_t_prf(simck, EAP_FAST_SIMCK_LEN,
000006  2340              MOVS     r3,#0x40
000008  2100              MOVS     r1,#0
00000a  e9cd4301          STRD     r4,r3,[sp,#4]
00000e  9100              STR      r1,[sp,#0]
000010  a306              ADR      r3,|L2.44|
000012  a207              ADR      r2,|L2.48|
000014  2128              MOVS     r1,#0x28
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       sha1_t_prf
;;;175    		   "Extended Session Key Generating Function", (u8 *) "", 0,
;;;176    		   emsk, EAP_EMSK_LEN);
;;;177    	wpa_hexdump_key(MSG_DEBUG, "EAP-FAST: Derived key (EMSK)",
00001c  2340              MOVS     r3,#0x40
00001e  4622              MOV      r2,r4
000020  a10e              ADR      r1,|L2.92|
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       wpa_hexdump_key
;;;178    			emsk, EAP_EMSK_LEN);
;;;179    }
000028  bd3e              POP      {r1-r5,pc}
;;;180    
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
00002c  00                DCB      0
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
                  |L2.48|
000030  45787465          DCB      "Extended Session Key Generating Function",0
000034  6e646564
000038  20536573
00003c  73696f6e
000040  204b6579
000044  2047656e
000048  65726174
00004c  696e6720
000050  46756e63
000054  74696f6e
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L2.92|
00005c  4541502d          DCB      "EAP-FAST: Derived key (EMSK)",0
000060  46415354
000064  3a204465
000068  72697665
00006c  64206b65
000070  79202845
000074  4d534b29
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||i.eap_fast_derive_eap_msk||, CODE, READONLY, ALIGN=2

                  eap_fast_derive_eap_msk PROC
;;;150    
;;;151    void eap_fast_derive_eap_msk(const u8 *simck, u8 *msk)
000000  b53e              PUSH     {r1-r5,lr}
;;;152    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;153    	/*
;;;154    	 * RFC 4851, Section 5.4: EAP Master Session Key Generation
;;;155    	 * MSK = T-PRF(S-IMCK[j], "Session Key Generating Function", 64)
;;;156    	 */
;;;157    
;;;158    	sha1_t_prf(simck, EAP_FAST_SIMCK_LEN,
000006  2340              MOVS     r3,#0x40
000008  2100              MOVS     r1,#0
00000a  e9cd4301          STRD     r4,r3,[sp,#4]
00000e  9100              STR      r1,[sp,#0]
000010  a306              ADR      r3,|L3.44|
000012  a207              ADR      r2,|L3.48|
000014  2128              MOVS     r1,#0x28
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       sha1_t_prf
;;;159    		   "Session Key Generating Function", (u8 *) "", 0,
;;;160    		   msk, EAP_FAST_KEY_LEN);
;;;161    	wpa_hexdump_key(MSG_DEBUG, "EAP-FAST: Derived key (MSK)",
00001c  2340              MOVS     r3,#0x40
00001e  4622              MOV      r2,r4
000020  a10b              ADR      r1,|L3.80|
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       wpa_hexdump_key
;;;162    			msk, EAP_FAST_KEY_LEN);
;;;163    }
000028  bd3e              POP      {r1-r5,pc}
;;;164    
                          ENDP

00002a  0000              DCW      0x0000
                  |L3.44|
00002c  00                DCB      0
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
                  |L3.48|
000030  53657373          DCB      "Session Key Generating Function",0
000034  696f6e20
000038  4b657920
00003c  47656e65
000040  72617469
000044  6e672046
000048  756e6374
00004c  696f6e00
                  |L3.80|
000050  4541502d          DCB      "EAP-FAST: Derived key (MSK)",0
000054  46415354
000058  3a204465
00005c  72697665
000060  64206b65
000064  7920284d
000068  534b2900

                          AREA ||i.eap_fast_derive_key||, CODE, READONLY, ALIGN=2

                  eap_fast_derive_key PROC
;;;101    
;;;102    u8 * eap_fast_derive_key(void *ssl_ctx, struct tls_connection *conn,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;103    			 const char *label, size_t len)
;;;104    {
000004  b08c              SUB      sp,sp,#0x30
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  461e              MOV      r6,r3
;;;105    	struct tls_keys keys;
;;;106    	u8 *rnd = NULL, *out;
00000e  2700              MOVS     r7,#0
;;;107    	int block_size;
;;;108    
;;;109    	block_size = tls_connection_get_keyblock_size(ssl_ctx, conn);
000010  4649              MOV      r1,r9
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       tls_connection_get_keyblock_size
000018  4605              MOV      r5,r0
;;;110    	if (block_size < 0)
00001a  2d00              CMP      r5,#0
00001c  da03              BGE      |L4.38|
;;;111    		return NULL;
00001e  2000              MOVS     r0,#0
                  |L4.32|
;;;112    
;;;113    	out = os_malloc(block_size + len);
;;;114    	if (out == NULL)
;;;115    		return NULL;
;;;116    
;;;117    	if (tls_connection_prf(ssl_ctx, conn, label, 1, out, block_size + len)
;;;118    	    == 0) {
;;;119    		os_memmove(out, out + block_size, len);
;;;120    		return out;
;;;121    	}
;;;122    
;;;123    	if (tls_connection_get_keys(ssl_ctx, conn, &keys))
;;;124    		goto fail;
;;;125    
;;;126    	rnd = os_malloc(keys.client_random_len + keys.server_random_len);
;;;127    	if (rnd == NULL)
;;;128    		goto fail;
;;;129    
;;;130    	os_memcpy(rnd, keys.server_random, keys.server_random_len);
;;;131    	os_memcpy(rnd + keys.server_random_len, keys.client_random,
;;;132    		  keys.client_random_len);
;;;133    
;;;134    	wpa_hexdump_key(MSG_MSGDUMP, "EAP-FAST: master_secret for key "
;;;135    			"expansion", keys.master_key, keys.master_key_len);
;;;136    	if (tls_prf(keys.master_key, keys.master_key_len,
;;;137    		    label, rnd, keys.client_random_len +
;;;138    		    keys.server_random_len, out, block_size + len))
;;;139    		goto fail;
;;;140    	os_free(rnd);
;;;141    	os_memmove(out, out + block_size, len);
;;;142    	return out;
;;;143    
;;;144    fail:
;;;145    	os_free(rnd);
;;;146    	os_free(out);
;;;147    	return NULL;
;;;148    }
000020  b00c              ADD      sp,sp,#0x30
000022  e8bd87f0          POP      {r4-r10,pc}
                  |L4.38|
000026  19a8              ADDS     r0,r5,r6              ;113
000028  f7fffffe          BL       os_malloc
00002c  4604              MOV      r4,r0                 ;113
00002e  b90c              CBNZ     r4,|L4.52|
000030  2000              MOVS     r0,#0                 ;115
000032  e7f5              B        |L4.32|
                  |L4.52|
000034  19ab              ADDS     r3,r5,r6              ;117
000036  e9cd4300          STRD     r4,r3,[sp,#0]         ;117
00003a  2301              MOVS     r3,#1                 ;117
00003c  4652              MOV      r2,r10                ;117
00003e  4649              MOV      r1,r9                 ;117
000040  4640              MOV      r0,r8                 ;117
000042  f7fffffe          BL       tls_connection_prf
000046  b930              CBNZ     r0,|L4.86|
000048  1961              ADDS     r1,r4,r5              ;119
00004a  4632              MOV      r2,r6                 ;119
00004c  4620              MOV      r0,r4                 ;119
00004e  f7fffffe          BL       os_memmove
000052  4620              MOV      r0,r4                 ;120
000054  e7e4              B        |L4.32|
                  |L4.86|
000056  aa04              ADD      r2,sp,#0x10           ;123
000058  4649              MOV      r1,r9                 ;123
00005a  4640              MOV      r0,r8                 ;123
00005c  f7fffffe          BL       tls_connection_get_keys
000060  b100              CBZ      r0,|L4.100|
000062  e031              B        |L4.200|
                  |L4.100|
000064  9a09              LDR      r2,[sp,#0x24]         ;126
000066  9907              LDR      r1,[sp,#0x1c]         ;126
000068  1888              ADDS     r0,r1,r2              ;126
00006a  f7fffffe          BL       os_malloc
00006e  4607              MOV      r7,r0                 ;126
000070  b907              CBNZ     r7,|L4.116|
000072  e029              B        |L4.200|
                  |L4.116|
000074  4638              MOV      r0,r7                 ;130
000076  e9dd1208          LDRD     r1,r2,[sp,#0x20]      ;130
00007a  f7fffffe          BL       os_memcpy
00007e  9b09              LDR      r3,[sp,#0x24]         ;131
000080  19d8              ADDS     r0,r3,r7              ;131
000082  e9dd1206          LDRD     r1,r2,[sp,#0x18]      ;131
000086  f7fffffe          BL       os_memcpy
00008a  a113              ADR      r1,|L4.216|
00008c  2000              MOVS     r0,#0                 ;134
00008e  e9dd2304          LDRD     r2,r3,[sp,#0x10]      ;134
000092  f7fffffe          BL       wpa_hexdump_key
000096  19ab              ADDS     r3,r5,r6              ;136
000098  9909              LDR      r1,[sp,#0x24]         ;136
00009a  9807              LDR      r0,[sp,#0x1c]         ;136
00009c  4401              ADD      r1,r1,r0              ;136
00009e  e9cd4301          STRD     r4,r3,[sp,#4]         ;136
0000a2  9100              STR      r1,[sp,#0]            ;136
0000a4  463b              MOV      r3,r7                 ;136
0000a6  4652              MOV      r2,r10                ;136
0000a8  e9dd0104          LDRD     r0,r1,[sp,#0x10]      ;136
0000ac  f7fffffe          BL       tls_prf
0000b0  b100              CBZ      r0,|L4.180|
0000b2  e009              B        |L4.200|
                  |L4.180|
0000b4  4638              MOV      r0,r7                 ;140
0000b6  f7fffffe          BL       os_free
0000ba  1961              ADDS     r1,r4,r5              ;141
0000bc  4632              MOV      r2,r6                 ;141
0000be  4620              MOV      r0,r4                 ;141
0000c0  f7fffffe          BL       os_memmove
0000c4  4620              MOV      r0,r4                 ;142
0000c6  e7ab              B        |L4.32|
                  |L4.200|
0000c8  4638              MOV      r0,r7                 ;145
0000ca  f7fffffe          BL       os_free
0000ce  4620              MOV      r0,r4                 ;146
0000d0  f7fffffe          BL       os_free
0000d4  2000              MOVS     r0,#0                 ;147
0000d6  e7a3              B        |L4.32|
;;;149    
                          ENDP

                  |L4.216|
0000d8  4541502d          DCB      "EAP-FAST: master_secret for key expansion",0
0000dc  46415354
0000e0  3a206d61
0000e4  73746572
0000e8  5f736563
0000ec  72657420
0000f0  666f7220
0000f4  6b657920
0000f8  65787061
0000fc  6e73696f
000100  6e00    
000102  00                DCB      0
000103  00                DCB      0

                          AREA ||i.eap_fast_derive_master_secret||, CODE, READONLY, ALIGN=2

                  eap_fast_derive_master_secret PROC
;;;73     
;;;74     void eap_fast_derive_master_secret(const u8 *pac_key, const u8 *server_random,
000000  b5f0              PUSH     {r4-r7,lr}
;;;75     				   const u8 *client_random, u8 *master_secret)
;;;76     {
000002  b093              SUB      sp,sp,#0x4c
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;77     #define TLS_RANDOM_LEN 32
;;;78     #define TLS_MASTER_SECRET_LEN 48
;;;79     	u8 seed[2 * TLS_RANDOM_LEN];
;;;80     
;;;81     	wpa_hexdump(MSG_DEBUG, "EAP-FAST: client_random",
00000c  2320              MOVS     r3,#0x20
00000e  462a              MOV      r2,r5
000010  a113              ADR      r1,|L5.96|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_hexdump
;;;82     		    client_random, TLS_RANDOM_LEN);
;;;83     	wpa_hexdump(MSG_DEBUG, "EAP-FAST: server_random",
000018  2320              MOVS     r3,#0x20
00001a  4622              MOV      r2,r4
00001c  a116              ADR      r1,|L5.120|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       wpa_hexdump
;;;84     		    server_random, TLS_RANDOM_LEN);
;;;85     
;;;86     	/*
;;;87     	 * RFC 4851, Section 5.1:
;;;88     	 * master_secret = T-PRF(PAC-Key, "PAC to master secret label hash", 
;;;89     	 *                       server_random + client_random, 48)
;;;90     	 */
;;;91     	os_memcpy(seed, server_random, TLS_RANDOM_LEN);
000024  2220              MOVS     r2,#0x20
000026  4621              MOV      r1,r4
000028  a803              ADD      r0,sp,#0xc
00002a  f7fffffe          BL       os_memcpy
;;;92     	os_memcpy(seed + TLS_RANDOM_LEN, client_random, TLS_RANDOM_LEN);
00002e  2220              MOVS     r2,#0x20
000030  4629              MOV      r1,r5
000032  a80b              ADD      r0,sp,#0x2c
000034  f7fffffe          BL       os_memcpy
;;;93     	sha1_t_prf(pac_key, EAP_FAST_PAC_KEY_LEN,
000038  2330              MOVS     r3,#0x30
00003a  2140              MOVS     r1,#0x40
00003c  e9cd6301          STRD     r6,r3,[sp,#4]
000040  9100              STR      r1,[sp,#0]
000042  ab03              ADD      r3,sp,#0xc
000044  a212              ADR      r2,|L5.144|
000046  2120              MOVS     r1,#0x20
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       sha1_t_prf
;;;94     		   "PAC to master secret label hash",
;;;95     		   seed, sizeof(seed), master_secret, TLS_MASTER_SECRET_LEN);
;;;96     
;;;97     	wpa_hexdump_key(MSG_DEBUG, "EAP-FAST: master_secret",
00004e  2330              MOVS     r3,#0x30
000050  4632              MOV      r2,r6
000052  a117              ADR      r1,|L5.176|
000054  2000              MOVS     r0,#0
000056  f7fffffe          BL       wpa_hexdump_key
;;;98     			master_secret, TLS_MASTER_SECRET_LEN);
;;;99     }
00005a  b013              ADD      sp,sp,#0x4c
00005c  bdf0              POP      {r4-r7,pc}
;;;100    
                          ENDP

00005e  0000              DCW      0x0000
                  |L5.96|
000060  4541502d          DCB      "EAP-FAST: client_random",0
000064  46415354
000068  3a20636c
00006c  69656e74
000070  5f72616e
000074  646f6d00
                  |L5.120|
000078  4541502d          DCB      "EAP-FAST: server_random",0
00007c  46415354
000080  3a207365
000084  72766572
000088  5f72616e
00008c  646f6d00
                  |L5.144|
000090  50414320          DCB      "PAC to master secret label hash",0
000094  746f206d
000098  61737465
00009c  72207365
0000a0  63726574
0000a4  206c6162
0000a8  656c2068
0000ac  61736800
                  |L5.176|
0000b0  4541502d          DCB      "EAP-FAST: master_secret",0
0000b4  46415354
0000b8  3a206d61
0000bc  73746572
0000c0  5f736563
0000c4  72657400

                          AREA ||i.eap_fast_parse_tlv||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_tlv PROC
;;;181    
;;;182    int eap_fast_parse_tlv(struct eap_fast_tlv_parse *tlv,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;183    		       int tlv_type, u8 *pos, int len)
;;;184    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;185    	switch (tlv_type) {
00000c  2f0b              CMP      r7,#0xb
00000e  d070              BEQ      |L6.242|
000010  dc06              BGT      |L6.32|
000012  2f03              CMP      r7,#3
000014  d01d              BEQ      |L6.82|
000016  2f09              CMP      r7,#9
000018  d007              BEQ      |L6.42|
00001a  2f0a              CMP      r7,#0xa
00001c  d16a              BNE      |L6.244|
00001e  e04f              B        |L6.192|
                  |L6.32|
000020  2f0c              CMP      r7,#0xc
000022  d068              BEQ      |L6.246|
000024  2f13              CMP      r7,#0x13
000026  d165              BNE      |L6.244|
000028  e0a4              B        |L6.372|
                  |L6.42|
;;;186    	case EAP_TLV_EAP_PAYLOAD_TLV:
;;;187    		wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: EAP-Payload TLV",
00002a  4633              MOV      r3,r6
00002c  462a              MOV      r2,r5
00002e  a170              ADR      r1,|L6.496|
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       wpa_hexdump
;;;188    			    pos, len);
;;;189    		if (tlv->eap_payload_tlv) {
000036  6820              LDR      r0,[r4,#0]
000038  b140              CBZ      r0,|L6.76|
;;;190    			wpa_printf(MSG_DEBUG, "EAP-FAST: More than one "
00003a  a174              ADR      r1,|L6.524|
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       wpa_printf
;;;191    				   "EAP-Payload TLV in the message");
;;;192    			tlv->iresult = EAP_TLV_RESULT_FAILURE;
000042  2002              MOVS     r0,#2
000044  6120              STR      r0,[r4,#0x10]
;;;193    			return -2;
000046  1f00              SUBS     r0,r0,#4
                  |L6.72|
;;;194    		}
;;;195    		tlv->eap_payload_tlv = pos;
;;;196    		tlv->eap_payload_tlv_len = len;
;;;197    		break;
;;;198    	case EAP_TLV_RESULT_TLV:
;;;199    		wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: Result TLV", pos, len);
;;;200    		if (tlv->result) {
;;;201    			wpa_printf(MSG_DEBUG, "EAP-FAST: More than one "
;;;202    				   "Result TLV in the message");
;;;203    			tlv->result = EAP_TLV_RESULT_FAILURE;
;;;204    			return -2;
;;;205    		}
;;;206    		if (len < 2) {
;;;207    			wpa_printf(MSG_DEBUG, "EAP-FAST: Too short "
;;;208    				   "Result TLV");
;;;209    			tlv->result = EAP_TLV_RESULT_FAILURE;
;;;210    			break;
;;;211    		}
;;;212    		tlv->result = WPA_GET_BE16(pos);
;;;213    		if (tlv->result != EAP_TLV_RESULT_SUCCESS &&
;;;214    		    tlv->result != EAP_TLV_RESULT_FAILURE) {
;;;215    			wpa_printf(MSG_DEBUG, "EAP-FAST: Unknown Result %d",
;;;216    				   tlv->result);
;;;217    			tlv->result = EAP_TLV_RESULT_FAILURE;
;;;218    		}
;;;219    		wpa_printf(MSG_DEBUG, "EAP-FAST: Result: %s",
;;;220    			   tlv->result == EAP_TLV_RESULT_SUCCESS ?
;;;221    			   "Success" : "Failure");
;;;222    		break;
;;;223    	case EAP_TLV_INTERMEDIATE_RESULT_TLV:
;;;224    		wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: Intermediate Result TLV",
;;;225    			    pos, len);
;;;226    		if (len < 2) {
;;;227    			wpa_printf(MSG_DEBUG, "EAP-FAST: Too short "
;;;228    				   "Intermediate-Result TLV");
;;;229    			tlv->iresult = EAP_TLV_RESULT_FAILURE;
;;;230    			break;
;;;231    		}
;;;232    		if (tlv->iresult) {
;;;233    			wpa_printf(MSG_DEBUG, "EAP-FAST: More than one "
;;;234    				   "Intermediate-Result TLV in the message");
;;;235    			tlv->iresult = EAP_TLV_RESULT_FAILURE;
;;;236    			return -2;
;;;237    		}
;;;238    		tlv->iresult = WPA_GET_BE16(pos);
;;;239    		if (tlv->iresult != EAP_TLV_RESULT_SUCCESS &&
;;;240    		    tlv->iresult != EAP_TLV_RESULT_FAILURE) {
;;;241    			wpa_printf(MSG_DEBUG, "EAP-FAST: Unknown Intermediate "
;;;242    				   "Result %d", tlv->iresult);
;;;243    			tlv->iresult = EAP_TLV_RESULT_FAILURE;
;;;244    		}
;;;245    		wpa_printf(MSG_DEBUG, "EAP-FAST: Intermediate Result: %s",
;;;246    			   tlv->iresult == EAP_TLV_RESULT_SUCCESS ?
;;;247    			   "Success" : "Failure");
;;;248    		break;
;;;249    	case EAP_TLV_CRYPTO_BINDING_TLV:
;;;250    		wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: Crypto-Binding TLV",
;;;251    			    pos, len);
;;;252    		if (tlv->crypto_binding) {
;;;253    			wpa_printf(MSG_DEBUG, "EAP-FAST: More than one "
;;;254    				   "Crypto-Binding TLV in the message");
;;;255    			tlv->iresult = EAP_TLV_RESULT_FAILURE;
;;;256    			return -2;
;;;257    		}
;;;258    		tlv->crypto_binding_len = sizeof(struct eap_tlv_hdr) + len;
;;;259    		if (tlv->crypto_binding_len < sizeof(*tlv->crypto_binding)) {
;;;260    			wpa_printf(MSG_DEBUG, "EAP-FAST: Too short "
;;;261    				   "Crypto-Binding TLV");
;;;262    			tlv->iresult = EAP_TLV_RESULT_FAILURE;
;;;263    			return -2;
;;;264    		}
;;;265    		tlv->crypto_binding = (struct eap_tlv_crypto_binding_tlv *)
;;;266    			(pos - sizeof(struct eap_tlv_hdr));
;;;267    		break;
;;;268    	case EAP_TLV_REQUEST_ACTION_TLV:
;;;269    		wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: Request-Action TLV",
;;;270    			    pos, len);
;;;271    		if (tlv->request_action) {
;;;272    			wpa_printf(MSG_DEBUG, "EAP-FAST: More than one "
;;;273    				   "Request-Action TLV in the message");
;;;274    			tlv->iresult = EAP_TLV_RESULT_FAILURE;
;;;275    			return -2;
;;;276    		}
;;;277    		if (len < 2) {
;;;278    			wpa_printf(MSG_DEBUG, "EAP-FAST: Too short "
;;;279    				   "Request-Action TLV");
;;;280    			tlv->iresult = EAP_TLV_RESULT_FAILURE;
;;;281    			break;
;;;282    		}
;;;283    		tlv->request_action = WPA_GET_BE16(pos);
;;;284    		wpa_printf(MSG_DEBUG, "EAP-FAST: Request-Action: %d",
;;;285    			   tlv->request_action);
;;;286    		break;
;;;287    	case EAP_TLV_PAC_TLV:
;;;288    		wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: PAC TLV", pos, len);
;;;289    		if (tlv->pac) {
;;;290    			wpa_printf(MSG_DEBUG, "EAP-FAST: More than one "
;;;291    				   "PAC TLV in the message");
;;;292    			tlv->iresult = EAP_TLV_RESULT_FAILURE;
;;;293    			return -2;
;;;294    		}
;;;295    		tlv->pac = pos;
;;;296    		tlv->pac_len = len;
;;;297    		break;
;;;298    	default:
;;;299    		/* Unknown TLV */
;;;300    		return -1;
;;;301    	}
;;;302    
;;;303    	return 0;
;;;304    }
000048  e8bd81f0          POP      {r4-r8,pc}
                  |L6.76|
00004c  6025              STR      r5,[r4,#0]            ;195
00004e  6066              STR      r6,[r4,#4]            ;196
000050  e0ca              B        |L6.488|
                  |L6.82|
000052  4633              MOV      r3,r6                 ;199
000054  462a              MOV      r2,r5                 ;199
000056  a17b              ADR      r1,|L6.580|
000058  2000              MOVS     r0,#0                 ;199
00005a  f7fffffe          BL       wpa_hexdump
00005e  6960              LDR      r0,[r4,#0x14]         ;200
000060  b138              CBZ      r0,|L6.114|
000062  a17e              ADR      r1,|L6.604|
000064  2000              MOVS     r0,#0                 ;201
000066  f7fffffe          BL       wpa_printf
00006a  2002              MOVS     r0,#2                 ;203
00006c  6160              STR      r0,[r4,#0x14]         ;203
00006e  1f00              SUBS     r0,r0,#4              ;204
000070  e7ea              B        |L6.72|
                  |L6.114|
000072  2e02              CMP      r6,#2                 ;206
000074  da06              BGE      |L6.132|
000076  a186              ADR      r1,|L6.656|
000078  2000              MOVS     r0,#0                 ;207
00007a  f7fffffe          BL       wpa_printf
00007e  2002              MOVS     r0,#2                 ;209
000080  6160              STR      r0,[r4,#0x14]         ;209
000082  e0b1              B        |L6.488|
                  |L6.132|
000084  7868              LDRB     r0,[r5,#1]            ;212
000086  7829              LDRB     r1,[r5,#0]            ;212
000088  ea402001          ORR      r0,r0,r1,LSL #8       ;212
00008c  6160              STR      r0,[r4,#0x14]         ;212
00008e  6960              LDR      r0,[r4,#0x14]         ;213
000090  2801              CMP      r0,#1                 ;213
000092  d009              BEQ      |L6.168|
000094  6960              LDR      r0,[r4,#0x14]         ;214
000096  2802              CMP      r0,#2                 ;214
000098  d006              BEQ      |L6.168|
00009a  a185              ADR      r1,|L6.688|
00009c  2000              MOVS     r0,#0                 ;215
00009e  6962              LDR      r2,[r4,#0x14]         ;215
0000a0  f7fffffe          BL       wpa_printf
0000a4  2002              MOVS     r0,#2                 ;217
0000a6  6160              STR      r0,[r4,#0x14]         ;217
                  |L6.168|
0000a8  6960              LDR      r0,[r4,#0x14]         ;219
0000aa  2801              CMP      r0,#1                 ;219
0000ac  d101              BNE      |L6.178|
0000ae  a087              ADR      r0,|L6.716|
0000b0  e000              B        |L6.180|
                  |L6.178|
0000b2  a088              ADR      r0,|L6.724|
                  |L6.180|
0000b4  4602              MOV      r2,r0                 ;221
0000b6  a189              ADR      r1,|L6.732|
0000b8  2000              MOVS     r0,#0                 ;221
0000ba  f7fffffe          BL       wpa_printf
0000be  e093              B        |L6.488|
                  |L6.192|
0000c0  4633              MOV      r3,r6                 ;224
0000c2  462a              MOV      r2,r5                 ;224
0000c4  a18b              ADR      r1,|L6.756|
0000c6  2000              MOVS     r0,#0                 ;224
0000c8  f7fffffe          BL       wpa_hexdump
0000cc  2e02              CMP      r6,#2                 ;226
0000ce  da06              BGE      |L6.222|
0000d0  a191              ADR      r1,|L6.792|
0000d2  2000              MOVS     r0,#0                 ;227
0000d4  f7fffffe          BL       wpa_printf
0000d8  2002              MOVS     r0,#2                 ;229
0000da  6120              STR      r0,[r4,#0x10]         ;229
0000dc  e084              B        |L6.488|
                  |L6.222|
0000de  6920              LDR      r0,[r4,#0x10]         ;232
0000e0  b150              CBZ      r0,|L6.248|
0000e2  a198              ADR      r1,|L6.836|
0000e4  2000              MOVS     r0,#0                 ;233
0000e6  f7fffffe          BL       wpa_printf
0000ea  2002              MOVS     r0,#2                 ;235
0000ec  6120              STR      r0,[r4,#0x10]         ;235
0000ee  1f00              SUBS     r0,r0,#4              ;236
0000f0  e7aa              B        |L6.72|
                  |L6.242|
0000f2  e063              B        |L6.444|
                  |L6.244|
0000f4  e075              B        |L6.482|
                  |L6.246|
0000f6  e01d              B        |L6.308|
                  |L6.248|
0000f8  7868              LDRB     r0,[r5,#1]            ;238
0000fa  7829              LDRB     r1,[r5,#0]            ;238
0000fc  ea402001          ORR      r0,r0,r1,LSL #8       ;238
000100  6120              STR      r0,[r4,#0x10]         ;238
000102  6920              LDR      r0,[r4,#0x10]         ;239
000104  2801              CMP      r0,#1                 ;239
000106  d009              BEQ      |L6.284|
000108  6920              LDR      r0,[r4,#0x10]         ;240
00010a  2802              CMP      r0,#2                 ;240
00010c  d006              BEQ      |L6.284|
00010e  a19d              ADR      r1,|L6.900|
000110  2000              MOVS     r0,#0                 ;241
000112  6922              LDR      r2,[r4,#0x10]         ;241
000114  f7fffffe          BL       wpa_printf
000118  2002              MOVS     r0,#2                 ;243
00011a  6120              STR      r0,[r4,#0x10]         ;243
                  |L6.284|
00011c  6920              LDR      r0,[r4,#0x10]         ;245
00011e  2801              CMP      r0,#1                 ;245
000120  d101              BNE      |L6.294|
000122  a06a              ADR      r0,|L6.716|
000124  e000              B        |L6.296|
                  |L6.294|
000126  a06b              ADR      r0,|L6.724|
                  |L6.296|
000128  4602              MOV      r2,r0                 ;247
00012a  a1a1              ADR      r1,|L6.944|
00012c  2000              MOVS     r0,#0                 ;247
00012e  f7fffffe          BL       wpa_printf
000132  e059              B        |L6.488|
                  |L6.308|
000134  4633              MOV      r3,r6                 ;250
000136  462a              MOV      r2,r5                 ;250
000138  a1a6              ADR      r1,|L6.980|
00013a  2000              MOVS     r0,#0                 ;250
00013c  f7fffffe          BL       wpa_hexdump
000140  68a0              LDR      r0,[r4,#8]            ;252
000142  b138              CBZ      r0,|L6.340|
000144  a1ab              ADR      r1,|L6.1012|
000146  2000              MOVS     r0,#0                 ;253
000148  f7fffffe          BL       wpa_printf
00014c  2002              MOVS     r0,#2                 ;255
00014e  6120              STR      r0,[r4,#0x10]         ;255
000150  1f00              SUBS     r0,r0,#4              ;256
000152  e779              B        |L6.72|
                  |L6.340|
000154  1d30              ADDS     r0,r6,#4              ;258
000156  60e0              STR      r0,[r4,#0xc]          ;258
000158  68e0              LDR      r0,[r4,#0xc]          ;259
00015a  283c              CMP      r0,#0x3c              ;259
00015c  d207              BCS      |L6.366|
00015e  a1b4              ADR      r1,|L6.1072|
000160  2000              MOVS     r0,#0                 ;260
000162  f7fffffe          BL       wpa_printf
000166  2002              MOVS     r0,#2                 ;262
000168  6120              STR      r0,[r4,#0x10]         ;262
00016a  1f00              SUBS     r0,r0,#4              ;263
00016c  e76c              B        |L6.72|
                  |L6.366|
00016e  1f28              SUBS     r0,r5,#4              ;265
000170  60a0              STR      r0,[r4,#8]            ;265
000172  e039              B        |L6.488|
                  |L6.372|
000174  4633              MOV      r3,r6                 ;269
000176  462a              MOV      r2,r5                 ;269
000178  a1b7              ADR      r1,|L6.1112|
00017a  2000              MOVS     r0,#0                 ;269
00017c  f7fffffe          BL       wpa_hexdump
000180  69a0              LDR      r0,[r4,#0x18]         ;271
000182  b138              CBZ      r0,|L6.404|
000184  a1bc              ADR      r1,|L6.1144|
000186  2000              MOVS     r0,#0                 ;272
000188  f7fffffe          BL       wpa_printf
00018c  2002              MOVS     r0,#2                 ;274
00018e  6120              STR      r0,[r4,#0x10]         ;274
000190  1f00              SUBS     r0,r0,#4              ;275
000192  e759              B        |L6.72|
                  |L6.404|
000194  2e02              CMP      r6,#2                 ;277
000196  da06              BGE      |L6.422|
000198  a1c6              ADR      r1,|L6.1204|
00019a  2000              MOVS     r0,#0                 ;278
00019c  f7fffffe          BL       wpa_printf
0001a0  2002              MOVS     r0,#2                 ;280
0001a2  6120              STR      r0,[r4,#0x10]         ;280
0001a4  e020              B        |L6.488|
                  |L6.422|
0001a6  7868              LDRB     r0,[r5,#1]            ;283
0001a8  7829              LDRB     r1,[r5,#0]            ;283
0001aa  ea402001          ORR      r0,r0,r1,LSL #8       ;283
0001ae  61a0              STR      r0,[r4,#0x18]         ;283
0001b0  a1ca              ADR      r1,|L6.1244|
0001b2  2000              MOVS     r0,#0                 ;284
0001b4  69a2              LDR      r2,[r4,#0x18]         ;284
0001b6  f7fffffe          BL       wpa_printf
0001ba  e015              B        |L6.488|
                  |L6.444|
0001bc  4633              MOV      r3,r6                 ;288
0001be  462a              MOV      r2,r5                 ;288
0001c0  a1ce              ADR      r1,|L6.1276|
0001c2  2000              MOVS     r0,#0                 ;288
0001c4  f7fffffe          BL       wpa_hexdump
0001c8  69e0              LDR      r0,[r4,#0x1c]         ;289
0001ca  b138              CBZ      r0,|L6.476|
0001cc  a1d0              ADR      r1,|L6.1296|
0001ce  2000              MOVS     r0,#0                 ;290
0001d0  f7fffffe          BL       wpa_printf
0001d4  2002              MOVS     r0,#2                 ;292
0001d6  6120              STR      r0,[r4,#0x10]         ;292
0001d8  1f00              SUBS     r0,r0,#4              ;293
0001da  e735              B        |L6.72|
                  |L6.476|
0001dc  61e5              STR      r5,[r4,#0x1c]         ;295
0001de  6226              STR      r6,[r4,#0x20]         ;296
0001e0  e002              B        |L6.488|
                  |L6.482|
0001e2  f04f30ff          MOV      r0,#0xffffffff        ;300
0001e6  e72f              B        |L6.72|
                  |L6.488|
0001e8  bf00              NOP                            ;197
0001ea  2000              MOVS     r0,#0                 ;303
0001ec  e72c              B        |L6.72|
                          ENDP

0001ee  0000              DCW      0x0000
                  |L6.496|
0001f0  4541502d          DCB      "EAP-FAST: EAP-Payload TLV",0
0001f4  46415354
0001f8  3a204541
0001fc  502d5061
000200  796c6f61
000204  6420544c
000208  5600    
00020a  00                DCB      0
00020b  00                DCB      0
                  |L6.524|
00020c  4541502d          DCB      "EAP-FAST: More than one EAP-Payload TLV in the message",0
000210  46415354
000214  3a204d6f
000218  72652074
00021c  68616e20
000220  6f6e6520
000224  4541502d
000228  5061796c
00022c  6f616420
000230  544c5620
000234  696e2074
000238  6865206d
00023c  65737361
000240  676500  
000243  00                DCB      0
                  |L6.580|
000244  4541502d          DCB      "EAP-FAST: Result TLV",0
000248  46415354
00024c  3a205265
000250  73756c74
000254  20544c56
000258  00      
000259  00                DCB      0
00025a  00                DCB      0
00025b  00                DCB      0
                  |L6.604|
00025c  4541502d          DCB      "EAP-FAST: More than one Result TLV in the message",0
000260  46415354
000264  3a204d6f
000268  72652074
00026c  68616e20
000270  6f6e6520
000274  52657375
000278  6c742054
00027c  4c562069
000280  6e207468
000284  65206d65
000288  73736167
00028c  6500    
00028e  00                DCB      0
00028f  00                DCB      0
                  |L6.656|
000290  4541502d          DCB      "EAP-FAST: Too short Result TLV",0
000294  46415354
000298  3a20546f
00029c  6f207368
0002a0  6f727420
0002a4  52657375
0002a8  6c742054
0002ac  4c5600  
0002af  00                DCB      0
                  |L6.688|
0002b0  4541502d          DCB      "EAP-FAST: Unknown Result %d",0
0002b4  46415354
0002b8  3a20556e
0002bc  6b6e6f77
0002c0  6e205265
0002c4  73756c74
0002c8  20256400
                  |L6.716|
0002cc  53756363          DCB      "Success",0
0002d0  65737300
                  |L6.724|
0002d4  4661696c          DCB      "Failure",0
0002d8  75726500
                  |L6.732|
0002dc  4541502d          DCB      "EAP-FAST: Result: %s",0
0002e0  46415354
0002e4  3a205265
0002e8  73756c74
0002ec  3a202573
0002f0  00      
0002f1  00                DCB      0
0002f2  00                DCB      0
0002f3  00                DCB      0
                  |L6.756|
0002f4  4541502d          DCB      "EAP-FAST: Intermediate Result TLV",0
0002f8  46415354
0002fc  3a20496e
000300  7465726d
000304  65646961
000308  74652052
00030c  6573756c
000310  7420544c
000314  5600    
000316  00                DCB      0
000317  00                DCB      0
                  |L6.792|
000318  4541502d          DCB      "EAP-FAST: Too short Intermediate-Result TLV",0
00031c  46415354
000320  3a20546f
000324  6f207368
000328  6f727420
00032c  496e7465
000330  726d6564
000334  69617465
000338  2d526573
00033c  756c7420
000340  544c5600
                  |L6.836|
000344  4541502d          DCB      "EAP-FAST: More than one Intermediate-Result TLV in the "
000348  46415354
00034c  3a204d6f
000350  72652074
000354  68616e20
000358  6f6e6520
00035c  496e7465
000360  726d6564
000364  69617465
000368  2d526573
00036c  756c7420
000370  544c5620
000374  696e2074
000378  686520  
00037b  6d657373          DCB      "message",0
00037f  61676500
000383  00                DCB      0
                  |L6.900|
000384  4541502d          DCB      "EAP-FAST: Unknown Intermediate Result %d",0
000388  46415354
00038c  3a20556e
000390  6b6e6f77
000394  6e20496e
000398  7465726d
00039c  65646961
0003a0  74652052
0003a4  6573756c
0003a8  74202564
0003ac  00      
0003ad  00                DCB      0
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L6.944|
0003b0  4541502d          DCB      "EAP-FAST: Intermediate Result: %s",0
0003b4  46415354
0003b8  3a20496e
0003bc  7465726d
0003c0  65646961
0003c4  74652052
0003c8  6573756c
0003cc  743a2025
0003d0  7300    
0003d2  00                DCB      0
0003d3  00                DCB      0
                  |L6.980|
0003d4  4541502d          DCB      "EAP-FAST: Crypto-Binding TLV",0
0003d8  46415354
0003dc  3a204372
0003e0  7970746f
0003e4  2d42696e
0003e8  64696e67
0003ec  20544c56
0003f0  00      
0003f1  00                DCB      0
0003f2  00                DCB      0
0003f3  00                DCB      0
                  |L6.1012|
0003f4  4541502d          DCB      "EAP-FAST: More than one Crypto-Binding TLV in the messa"
0003f8  46415354
0003fc  3a204d6f
000400  72652074
000404  68616e20
000408  6f6e6520
00040c  43727970
000410  746f2d42
000414  696e6469
000418  6e672054
00041c  4c562069
000420  6e207468
000424  65206d65
000428  737361  
00042b  676500            DCB      "ge",0
00042e  00                DCB      0
00042f  00                DCB      0
                  |L6.1072|
000430  4541502d          DCB      "EAP-FAST: Too short Crypto-Binding TLV",0
000434  46415354
000438  3a20546f
00043c  6f207368
000440  6f727420
000444  43727970
000448  746f2d42
00044c  696e6469
000450  6e672054
000454  4c5600  
000457  00                DCB      0
                  |L6.1112|
000458  4541502d          DCB      "EAP-FAST: Request-Action TLV",0
00045c  46415354
000460  3a205265
000464  71756573
000468  742d4163
00046c  74696f6e
000470  20544c56
000474  00      
000475  00                DCB      0
000476  00                DCB      0
000477  00                DCB      0
                  |L6.1144|
000478  4541502d          DCB      "EAP-FAST: More than one Request-Action TLV in the messa"
00047c  46415354
000480  3a204d6f
000484  72652074
000488  68616e20
00048c  6f6e6520
000490  52657175
000494  6573742d
000498  41637469
00049c  6f6e2054
0004a0  4c562069
0004a4  6e207468
0004a8  65206d65
0004ac  737361  
0004af  676500            DCB      "ge",0
0004b2  00                DCB      0
0004b3  00                DCB      0
                  |L6.1204|
0004b4  4541502d          DCB      "EAP-FAST: Too short Request-Action TLV",0
0004b8  46415354
0004bc  3a20546f
0004c0  6f207368
0004c4  6f727420
0004c8  52657175
0004cc  6573742d
0004d0  41637469
0004d4  6f6e2054
0004d8  4c5600  
0004db  00                DCB      0
                  |L6.1244|
0004dc  4541502d          DCB      "EAP-FAST: Request-Action: %d",0
0004e0  46415354
0004e4  3a205265
0004e8  71756573
0004ec  742d4163
0004f0  74696f6e
0004f4  3a202564
0004f8  00      
0004f9  00                DCB      0
0004fa  00                DCB      0
0004fb  00                DCB      0
                  |L6.1276|
0004fc  4541502d          DCB      "EAP-FAST: PAC TLV",0
000500  46415354
000504  3a205041
000508  4320544c
00050c  5600    
00050e  00                DCB      0
00050f  00                DCB      0
                  |L6.1296|
000510  4541502d          DCB      "EAP-FAST: More than one PAC TLV in the message",0
000514  46415354
000518  3a204d6f
00051c  72652074
000520  68616e20
000524  6f6e6520
000528  50414320
00052c  544c5620
000530  696e2074
000534  6865206d
000538  65737361
00053c  676500  
00053f  00                DCB      0

                          AREA ||i.eap_fast_put_tlv||, CODE, READONLY, ALIGN=1

                  eap_fast_put_tlv PROC
;;;33     
;;;34     void eap_fast_put_tlv(struct wpabuf *buf, u16 type, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;35     			     u16 len)
;;;36     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;37     	eap_fast_put_tlv_hdr(buf, type, len);
00000c  462a              MOV      r2,r5
00000e  4639              MOV      r1,r7
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       eap_fast_put_tlv_hdr
;;;38     	wpabuf_put_data(buf, data, len);
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       wpabuf_put_data
;;;39     }
000020  e8bd81f0          POP      {r4-r8,pc}
;;;40     
                          ENDP


                          AREA ||i.eap_fast_put_tlv_buf||, CODE, READONLY, ALIGN=1

                  eap_fast_put_tlv_buf PROC
;;;41     
;;;42     void eap_fast_put_tlv_buf(struct wpabuf *buf, u16 type,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;43     				 const struct wpabuf *data)
;;;44     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;45     	eap_fast_put_tlv_hdr(buf, type, wpabuf_len(data));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  b287              UXTH     r7,r0
000012  463a              MOV      r2,r7
000014  4631              MOV      r1,r6
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       eap_fast_put_tlv_hdr
;;;46     	wpabuf_put_buf(buf, data);
00001c  4621              MOV      r1,r4
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       wpabuf_put_buf
;;;47     }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;48     
                          ENDP


                          AREA ||i.eap_fast_put_tlv_hdr||, CODE, READONLY, ALIGN=1

                  eap_fast_put_tlv_hdr PROC
;;;24     
;;;25     void eap_fast_put_tlv_hdr(struct wpabuf *buf, u16 type, u16 len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;26     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;27     	struct pac_tlv_hdr hdr;
;;;28     	hdr.type = host_to_be16(type);
000008  f44f407f          MOV      r0,#0xff00
00000c  ea002004          AND      r0,r0,r4,LSL #8
000010  ea402014          ORR      r0,r0,r4,LSR #8
000014  f8ad0000          STRH     r0,[sp,#0]
;;;29     	hdr.len = host_to_be16(len);
000018  f44f407f          MOV      r0,#0xff00
00001c  ea002005          AND      r0,r0,r5,LSL #8
000020  ea402015          ORR      r0,r0,r5,LSR #8
000024  f8ad0002          STRH     r0,[sp,#2]
;;;30     	wpabuf_put_data(buf, &hdr, sizeof(hdr));
000028  2204              MOVS     r2,#4
00002a  4669              MOV      r1,sp
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       wpabuf_put_data
;;;31     }
000032  bdf8              POP      {r3-r7,pc}
;;;32     
                          ENDP


                          AREA ||i.eap_fast_tlv_eap_payload||, CODE, READONLY, ALIGN=2

                  eap_fast_tlv_eap_payload PROC
;;;49     
;;;50     struct wpabuf * eap_fast_tlv_eap_payload(struct wpabuf *buf)
000000  b570              PUSH     {r4-r6,lr}
;;;51     {
000002  4604              MOV      r4,r0
;;;52     	struct wpabuf *e;
;;;53     
;;;54     	if (buf == NULL)
000004  b90c              CBNZ     r4,|L10.10|
;;;55     		return NULL;
000006  2000              MOVS     r0,#0
                  |L10.8|
;;;56     
;;;57     	/* Encapsulate EAP packet in EAP-Payload TLV */
;;;58     	wpa_printf(MSG_DEBUG, "EAP-FAST: Add EAP-Payload TLV");
;;;59     	e = wpabuf_alloc(sizeof(struct pac_tlv_hdr) + wpabuf_len(buf));
;;;60     	if (e == NULL) {
;;;61     		wpa_printf(MSG_DEBUG, "EAP-FAST: Failed to allocate memory "
;;;62     			   "for TLV encapsulation");
;;;63     		wpabuf_free(buf);
;;;64     		return NULL;
;;;65     	}
;;;66     	eap_fast_put_tlv_buf(e,
;;;67     			     EAP_TLV_TYPE_MANDATORY | EAP_TLV_EAP_PAYLOAD_TLV,
;;;68     			     buf);
;;;69     	wpabuf_free(buf);
;;;70     	return e;
;;;71     }
000008  bd70              POP      {r4-r6,pc}
                  |L10.10|
00000a  a110              ADR      r1,|L10.76|
00000c  2000              MOVS     r0,#0                 ;58
00000e  f7fffffe          BL       wpa_printf
000012  4620              MOV      r0,r4                 ;59
000014  f7fffffe          BL       wpabuf_len
000018  1d06              ADDS     r6,r0,#4              ;59
00001a  4630              MOV      r0,r6                 ;59
00001c  f7fffffe          BL       wpabuf_alloc
000020  4605              MOV      r5,r0                 ;59
000022  b945              CBNZ     r5,|L10.54|
000024  a111              ADR      r1,|L10.108|
000026  2000              MOVS     r0,#0                 ;61
000028  f7fffffe          BL       wpa_printf
00002c  4620              MOV      r0,r4                 ;63
00002e  f7fffffe          BL       wpabuf_free
000032  2000              MOVS     r0,#0                 ;64
000034  e7e8              B        |L10.8|
                  |L10.54|
000036  4622              MOV      r2,r4                 ;66
000038  f2480109          MOV      r1,#0x8009            ;66
00003c  4628              MOV      r0,r5                 ;66
00003e  f7fffffe          BL       eap_fast_put_tlv_buf
000042  4620              MOV      r0,r4                 ;69
000044  f7fffffe          BL       wpabuf_free
000048  4628              MOV      r0,r5                 ;70
00004a  e7dd              B        |L10.8|
;;;72     
                          ENDP

                  |L10.76|
00004c  4541502d          DCB      "EAP-FAST: Add EAP-Payload TLV",0
000050  46415354
000054  3a204164
000058  64204541
00005c  502d5061
000060  796c6f61
000064  6420544c
000068  5600    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L10.108|
00006c  4541502d          DCB      "EAP-FAST: Failed to allocate memory for TLV encapsulati"
000070  46415354
000074  3a204661
000078  696c6564
00007c  20746f20
000080  616c6c6f
000084  63617465
000088  206d656d
00008c  6f727920
000090  666f7220
000094  544c5620
000098  656e6361
00009c  7073756c
0000a0  617469  
0000a3  6f6e00            DCB      "on",0
0000a6  00                DCB      0
0000a7  00                DCB      0

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L11.30|
00001a  2001              MOVS     r0,#1
                  |L11.28|
;;;495    }
00001c  4770              BX       lr
                  |L11.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L11.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L16.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L16.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L16.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L16.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L19.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L19.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L19.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L19.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L25.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L25.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

