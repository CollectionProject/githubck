; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_common.o --depend=.\obj\eap_common.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_common.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_common\eap_common.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_get_id||, CODE, READONLY, ALIGN=1

                  eap_get_id PROC
;;;160     */
;;;161    u8 eap_get_id(const struct wpabuf *msg)
000000  b570              PUSH     {r4-r6,lr}
;;;162    {
000002  4605              MOV      r5,r0
;;;163    	const struct eap_hdr *eap;
;;;164    
;;;165    	if (wpabuf_len(msg) < sizeof(*eap))
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       wpabuf_len
00000a  2804              CMP      r0,#4
00000c  d201              BCS      |L2.18|
;;;166    		return 0;
00000e  2000              MOVS     r0,#0
                  |L2.16|
;;;167    
;;;168    	eap = wpabuf_head(msg);
;;;169    	return eap->identifier;
;;;170    }
000010  bd70              POP      {r4-r6,pc}
                  |L2.18|
000012  4628              MOV      r0,r5                 ;168
000014  f7fffffe          BL       wpabuf_head
000018  4604              MOV      r4,r0                 ;168
00001a  7860              LDRB     r0,[r4,#1]            ;169
00001c  e7f8              B        |L2.16|
;;;171    
                          ENDP


                          AREA ||i.eap_get_type||, CODE, READONLY, ALIGN=1

                  eap_get_type PROC
;;;177     */
;;;178    EapType eap_get_type(const struct wpabuf *msg)
000000  b510              PUSH     {r4,lr}
;;;179    {
000002  4604              MOV      r4,r0
;;;180    	if (wpabuf_len(msg) < sizeof(struct eap_hdr) + 1)
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_len
00000a  2805              CMP      r0,#5
00000c  d201              BCS      |L3.18|
;;;181    		return EAP_TYPE_NONE;
00000e  2000              MOVS     r0,#0
                  |L3.16|
;;;182    
;;;183    	return ((const u8 *) wpabuf_head(msg))[sizeof(struct eap_hdr)];
;;;184    }
000010  bd10              POP      {r4,pc}
                  |L3.18|
000012  4620              MOV      r0,r4                 ;183
000014  f7fffffe          BL       wpabuf_head
000018  7900              LDRB     r0,[r0,#4]            ;183
00001a  e7f9              B        |L3.16|
                          ENDP


                          AREA ||i.eap_hdr_validate||, CODE, READONLY, ALIGN=2

                  eap_hdr_validate PROC
;;;36      */
;;;37     const u8 * eap_hdr_validate(int vendor, EapType eap_type,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;38     			    const struct wpabuf *msg, size_t *plen)
;;;39     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4698              MOV      r8,r3
;;;40     	const struct eap_hdr *hdr;
;;;41     	const u8 *pos;
;;;42     	size_t len;
;;;43     
;;;44     	hdr = wpabuf_head(msg);
00000a  9802              LDR      r0,[sp,#8]
00000c  f7fffffe          BL       wpabuf_head
000010  4681              MOV      r9,r0
;;;45     
;;;46     	if (wpabuf_len(msg) < sizeof(*hdr)) {
000012  9802              LDR      r0,[sp,#8]
000014  f7fffffe          BL       wpabuf_len
000018  2804              CMP      r0,#4
00001a  d207              BCS      |L4.44|
;;;47     		wpa_printf(MSG_INFO, "EAP: Too short EAP frame");
00001c  a130              ADR      r1,|L4.224|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       wpa_printf
;;;48     		return NULL;
000024  2000              MOVS     r0,#0
                  |L4.38|
;;;49     	}
;;;50     
;;;51     	len = be_to_host16(hdr->length);
;;;52     	if (len < sizeof(*hdr) + 1 || len > wpabuf_len(msg)) {
;;;53     		wpa_printf(MSG_INFO, "EAP: Invalid EAP length");
;;;54     		return NULL;
;;;55     	}
;;;56     
;;;57     	pos = (const u8 *) (hdr + 1);
;;;58     
;;;59     	if (*pos == EAP_TYPE_EXPANDED) {
;;;60     		int exp_vendor;
;;;61     		u32 exp_type;
;;;62     		if (len < sizeof(*hdr) + 8) {
;;;63     			wpa_printf(MSG_INFO, "EAP: Invalid expanded EAP "
;;;64     				   "length");
;;;65     			return NULL;
;;;66     		}
;;;67     		pos++;
;;;68     		exp_vendor = WPA_GET_BE24(pos);
;;;69     		pos += 3;
;;;70     		exp_type = WPA_GET_BE32(pos);
;;;71     		pos += 4;
;;;72     		if (exp_vendor != vendor || exp_type != (u32) eap_type) {
;;;73     			wpa_printf(MSG_INFO, "EAP: Invalid expanded frame "
;;;74     				   "type");
;;;75     			return NULL;
;;;76     		}
;;;77     
;;;78     		*plen = len - sizeof(*hdr) - 8;
;;;79     		return pos;
;;;80     	} else {
;;;81     		if (vendor != EAP_VENDOR_IETF || *pos != eap_type) {
;;;82     			wpa_printf(MSG_INFO, "EAP: Invalid frame type");
;;;83     			return NULL;
;;;84     		}
;;;85     		*plen = len - sizeof(*hdr) - 1;
;;;86     		return pos + 1;
;;;87     	}
;;;88     }
000026  b004              ADD      sp,sp,#0x10
000028  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.44|
00002c  f8b90002          LDRH     r0,[r9,#2]            ;51
000030  f44f417f          MOV      r1,#0xff00            ;51
000034  ea012000          AND      r0,r1,r0,LSL #8       ;51
000038  f8b91002          LDRH     r1,[r9,#2]            ;51
00003c  ea402511          ORR      r5,r0,r1,LSR #8       ;51
000040  2d05              CMP      r5,#5                 ;52
000042  d304              BCC      |L4.78|
000044  9802              LDR      r0,[sp,#8]            ;52
000046  f7fffffe          BL       wpabuf_len
00004a  42a8              CMP      r0,r5                 ;52
00004c  d205              BCS      |L4.90|
                  |L4.78|
00004e  a12b              ADR      r1,|L4.252|
000050  2000              MOVS     r0,#0                 ;53
000052  f7fffffe          BL       wpa_printf
000056  2000              MOVS     r0,#0                 ;54
000058  e7e5              B        |L4.38|
                  |L4.90|
00005a  f1090404          ADD      r4,r9,#4              ;57
00005e  7820              LDRB     r0,[r4,#0]            ;59
000060  28fe              CMP      r0,#0xfe              ;59
000062  d12d              BNE      |L4.192|
000064  2d0c              CMP      r5,#0xc               ;62
000066  d205              BCS      |L4.116|
000068  a12a              ADR      r1,|L4.276|
00006a  2000              MOVS     r0,#0                 ;63
00006c  f7fffffe          BL       wpa_printf
000070  2000              MOVS     r0,#0                 ;65
000072  e7d8              B        |L4.38|
                  |L4.116|
000074  1c64              ADDS     r4,r4,#1              ;67
000076  7820              LDRB     r0,[r4,#0]            ;68
000078  0400              LSLS     r0,r0,#16             ;68
00007a  7861              LDRB     r1,[r4,#1]            ;68
00007c  ea402001          ORR      r0,r0,r1,LSL #8       ;68
000080  78a1              LDRB     r1,[r4,#2]            ;68
000082  ea400a01          ORR      r10,r0,r1             ;68
000086  1ce4              ADDS     r4,r4,#3              ;69
000088  7820              LDRB     r0,[r4,#0]            ;70
00008a  0600              LSLS     r0,r0,#24             ;70
00008c  7861              LDRB     r1,[r4,#1]            ;70
00008e  ea404001          ORR      r0,r0,r1,LSL #16      ;70
000092  78a1              LDRB     r1,[r4,#2]            ;70
000094  ea402001          ORR      r0,r0,r1,LSL #8       ;70
000098  78e1              LDRB     r1,[r4,#3]            ;70
00009a  ea400b01          ORR      r11,r0,r1             ;70
00009e  1d24              ADDS     r4,r4,#4              ;71
0000a0  45b2              CMP      r10,r6                ;72
0000a2  d101              BNE      |L4.168|
0000a4  45bb              CMP      r11,r7                ;72
0000a6  d005              BEQ      |L4.180|
                  |L4.168|
0000a8  a123              ADR      r1,|L4.312|
0000aa  2000              MOVS     r0,#0                 ;73
0000ac  f7fffffe          BL       wpa_printf
0000b0  2000              MOVS     r0,#0                 ;75
0000b2  e7b8              B        |L4.38|
                  |L4.180|
0000b4  f1a5000c          SUB      r0,r5,#0xc            ;78
0000b8  f8c80000          STR      r0,[r8,#0]            ;78
0000bc  4620              MOV      r0,r4                 ;79
0000be  e7b2              B        |L4.38|
                  |L4.192|
0000c0  b916              CBNZ     r6,|L4.200|
0000c2  7820              LDRB     r0,[r4,#0]            ;81
0000c4  42b8              CMP      r0,r7                 ;81
0000c6  d005              BEQ      |L4.212|
                  |L4.200|
0000c8  a124              ADR      r1,|L4.348|
0000ca  2000              MOVS     r0,#0                 ;82
0000cc  f7fffffe          BL       wpa_printf
0000d0  2000              MOVS     r0,#0                 ;83
0000d2  e7a8              B        |L4.38|
                  |L4.212|
0000d4  1f68              SUBS     r0,r5,#5              ;85
0000d6  f8c80000          STR      r0,[r8,#0]            ;85
0000da  1c60              ADDS     r0,r4,#1              ;86
0000dc  e7a3              B        |L4.38|
;;;89     
                          ENDP

0000de  0000              DCW      0x0000
                  |L4.224|
0000e0  4541503a          DCB      "EAP: Too short EAP frame",0
0000e4  20546f6f
0000e8  2073686f
0000ec  72742045
0000f0  41502066
0000f4  72616d65
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L4.252|
0000fc  4541503a          DCB      "EAP: Invalid EAP length",0
000100  20496e76
000104  616c6964
000108  20454150
00010c  206c656e
000110  67746800
                  |L4.276|
000114  4541503a          DCB      "EAP: Invalid expanded EAP length",0
000118  20496e76
00011c  616c6964
000120  20657870
000124  616e6465
000128  64204541
00012c  50206c65
000130  6e677468
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0
                  |L4.312|
000138  4541503a          DCB      "EAP: Invalid expanded frame type",0
00013c  20496e76
000140  616c6964
000144  20657870
000148  616e6465
00014c  64206672
000150  616d6520
000154  74797065
000158  00      
000159  00                DCB      0
00015a  00                DCB      0
00015b  00                DCB      0
                  |L4.348|
00015c  4541503a          DCB      "EAP: Invalid frame type",0
000160  20496e76
000164  616c6964
000168  20667261
00016c  6d652074
000170  79706500

                          AREA ||i.eap_msg_alloc||, CODE, READONLY, ALIGN=1

                  eap_msg_alloc PROC
;;;106     */
;;;107    struct wpabuf * eap_msg_alloc(int vendor, EapType type, size_t payload_len,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;108    			      u8 code, u8 identifier)
;;;109    {
000004  4605              MOV      r5,r0
000006  468a              MOV      r10,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;110    	struct wpabuf *buf;
;;;111    	struct eap_hdr *hdr;
;;;112    	size_t len;
;;;113    
;;;114    	len = sizeof(struct eap_hdr) + (vendor == EAP_VENDOR_IETF ? 1 : 8) +
000010  b90d              CBNZ     r5,|L5.22|
000012  2001              MOVS     r0,#1
000014  e000              B        |L5.24|
                  |L5.22|
000016  2008              MOVS     r0,#8
                  |L5.24|
000018  1d00              ADDS     r0,r0,#4
00001a  eb000608          ADD      r6,r0,r8
;;;115    		payload_len;
;;;116    	buf = wpabuf_alloc(len);
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       wpabuf_alloc
000024  4607              MOV      r7,r0
;;;117    	if (buf == NULL)
000026  b917              CBNZ     r7,|L5.46|
;;;118    		return NULL;
000028  2000              MOVS     r0,#0
                  |L5.42|
;;;119    
;;;120    	hdr = wpabuf_put(buf, sizeof(*hdr));
;;;121    	hdr->code = code;
;;;122    	hdr->identifier = identifier;
;;;123    	hdr->length = host_to_be16(len);
;;;124    
;;;125    	if (vendor == EAP_VENDOR_IETF) {
;;;126    		wpabuf_put_u8(buf, type);
;;;127    	} else {
;;;128    		wpabuf_put_u8(buf, EAP_TYPE_EXPANDED);
;;;129    		wpabuf_put_be24(buf, vendor);
;;;130    		wpabuf_put_be32(buf, type);
;;;131    	}
;;;132    
;;;133    	return buf;
;;;134    }
00002a  e8bd9ff0          POP      {r4-r12,pc}
                  |L5.46|
00002e  2104              MOVS     r1,#4                 ;120
000030  4638              MOV      r0,r7                 ;120
000032  f7fffffe          BL       wpabuf_put
000036  4604              MOV      r4,r0                 ;120
000038  f8849000          STRB     r9,[r4,#0]            ;121
00003c  f884b001          STRB     r11,[r4,#1]           ;122
000040  b2b0              UXTH     r0,r6                 ;123
000042  f44f417f          MOV      r1,#0xff00            ;123
000046  ea012000          AND      r0,r1,r0,LSL #8       ;123
00004a  f3c62107          UBFX     r1,r6,#8,#8           ;123
00004e  4301              ORRS     r1,r1,r0              ;123
000050  8061              STRH     r1,[r4,#2]            ;123
000052  b925              CBNZ     r5,|L5.94|
000054  4651              MOV      r1,r10                ;126
000056  4638              MOV      r0,r7                 ;126
000058  f7fffffe          BL       wpabuf_put_u8
00005c  e00b              B        |L5.118|
                  |L5.94|
00005e  21fe              MOVS     r1,#0xfe              ;128
000060  4638              MOV      r0,r7                 ;128
000062  f7fffffe          BL       wpabuf_put_u8
000066  4629              MOV      r1,r5                 ;129
000068  4638              MOV      r0,r7                 ;129
00006a  f7fffffe          BL       wpabuf_put_be24
00006e  4651              MOV      r1,r10                ;130
000070  4638              MOV      r0,r7                 ;130
000072  f7fffffe          BL       wpabuf_put_be32
                  |L5.118|
000076  4638              MOV      r0,r7                 ;133
000078  e7d7              B        |L5.42|
;;;135    
                          ENDP


                          AREA ||i.eap_update_len||, CODE, READONLY, ALIGN=1

                  eap_update_len PROC
;;;145     */
;;;146    void eap_update_len(struct wpabuf *msg)
000000  b570              PUSH     {r4-r6,lr}
;;;147    {
000002  4604              MOV      r4,r0
;;;148    	struct eap_hdr *hdr;
;;;149    	hdr = wpabuf_mhead(msg);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
00000a  4605              MOV      r5,r0
;;;150    	if (wpabuf_len(msg) < sizeof(*hdr))
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       wpabuf_len
000012  2804              CMP      r0,#4
000014  d200              BCS      |L6.24|
                  |L6.22|
;;;151    		return;
;;;152    	hdr->length = host_to_be16(wpabuf_len(msg));
;;;153    }
000016  bd70              POP      {r4-r6,pc}
                  |L6.24|
000018  4620              MOV      r0,r4                 ;152
00001a  f7fffffe          BL       wpabuf_len
00001e  b280              UXTH     r0,r0                 ;152
000020  f44f417f          MOV      r1,#0xff00            ;152
000024  ea012600          AND      r6,r1,r0,LSL #8       ;152
000028  4620              MOV      r0,r4                 ;152
00002a  f7fffffe          BL       wpabuf_len
00002e  f3c02007          UBFX     r0,r0,#8,#8           ;152
000032  4330              ORRS     r0,r0,r6              ;152
000034  8068              STRH     r0,[r5,#2]            ;152
000036  bf00              NOP      
000038  e7ed              B        |L6.22|
;;;154    
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L7.30|
00001a  2001              MOVS     r0,#1
                  |L7.28|
;;;495    }
00001c  4770              BX       lr
                  |L7.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L7.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L12.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L12.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L12.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L12.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L15.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L15.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L15.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L15.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L21.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L21.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

