; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_gpsk.o --depend=.\obj\eap_gpsk.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_gpsk.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_gpsk.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_gpsk_deinit||, CODE, READONLY, ALIGN=1

                  eap_gpsk_deinit PROC
;;;122    
;;;123    static void eap_gpsk_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	struct eap_gpsk_data *data = priv;
000006  4625              MOV      r5,r4
;;;126    	os_free(data->id_server);
000008  f8d5011c          LDR      r0,[r5,#0x11c]
00000c  f7fffffe          BL       os_free
;;;127    	os_free(data->id_peer);
000010  f8d50114          LDR      r0,[r5,#0x114]
000014  f7fffffe          BL       os_free
;;;128    	os_free(data->psk);
000018  f8d5012c          LDR      r0,[r5,#0x12c]
00001c  f7fffffe          BL       os_free
;;;129    	os_free(data);
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       os_free
;;;130    }
000026  bd70              POP      {r4-r6,pc}
;;;131    
                          ENDP


                          AREA ||i.eap_gpsk_getKey||, CODE, READONLY, ALIGN=1

                  eap_gpsk_getKey PROC
;;;679    
;;;680    static u8 * eap_gpsk_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;681    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;682    	struct eap_gpsk_data *data = priv;
00000a  4627              MOV      r7,r4
;;;683    	u8 *key;
;;;684    
;;;685    	if (data->state != SUCCESS)
00000c  7838              LDRB     r0,[r7,#0]
00000e  2802              CMP      r0,#2
000010  d002              BEQ      |L3.24|
;;;686    		return NULL;
000012  2000              MOVS     r0,#0
                  |L3.20|
;;;687    
;;;688    	key = os_malloc(EAP_MSK_LEN);
;;;689    	if (key == NULL)
;;;690    		return NULL;
;;;691    	os_memcpy(key, data->msk, EAP_MSK_LEN);
;;;692    	*len = EAP_MSK_LEN;
;;;693    
;;;694    	return key;
;;;695    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L3.24|
000018  2040              MOVS     r0,#0x40              ;688
00001a  f7fffffe          BL       os_malloc
00001e  4605              MOV      r5,r0                 ;688
000020  b90d              CBNZ     r5,|L3.38|
000022  2000              MOVS     r0,#0                 ;690
000024  e7f6              B        |L3.20|
                  |L3.38|
000026  2240              MOVS     r2,#0x40              ;691
000028  f1070141          ADD      r1,r7,#0x41           ;691
00002c  4628              MOV      r0,r5                 ;691
00002e  f7fffffe          BL       os_memcpy
000032  2040              MOVS     r0,#0x40              ;692
000034  6030              STR      r0,[r6,#0]            ;692
000036  4628              MOV      r0,r5                 ;694
000038  e7ec              B        |L3.20|
;;;696    
                          ENDP


                          AREA ||i.eap_gpsk_get_emsk||, CODE, READONLY, ALIGN=1

                  eap_gpsk_get_emsk PROC
;;;697    
;;;698    static u8 * eap_gpsk_get_emsk(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;699    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;700    	struct eap_gpsk_data *data = priv;
00000a  4627              MOV      r7,r4
;;;701    	u8 *key;
;;;702    
;;;703    	if (data->state != SUCCESS)
00000c  7838              LDRB     r0,[r7,#0]
00000e  2802              CMP      r0,#2
000010  d002              BEQ      |L4.24|
;;;704    		return NULL;
000012  2000              MOVS     r0,#0
                  |L4.20|
;;;705    
;;;706    	key = os_malloc(EAP_EMSK_LEN);
;;;707    	if (key == NULL)
;;;708    		return NULL;
;;;709    	os_memcpy(key, data->emsk, EAP_EMSK_LEN);
;;;710    	*len = EAP_EMSK_LEN;
;;;711    
;;;712    	return key;
;;;713    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L4.24|
000018  2040              MOVS     r0,#0x40              ;706
00001a  f7fffffe          BL       os_malloc
00001e  4605              MOV      r5,r0                 ;706
000020  b90d              CBNZ     r5,|L4.38|
000022  2000              MOVS     r0,#0                 ;708
000024  e7f6              B        |L4.20|
                  |L4.38|
000026  2240              MOVS     r2,#0x40              ;709
000028  f1070181          ADD      r1,r7,#0x81           ;709
00002c  4628              MOV      r0,r5                 ;709
00002e  f7fffffe          BL       os_memcpy
000032  2040              MOVS     r0,#0x40              ;710
000034  6030              STR      r0,[r6,#0]            ;710
000036  4628              MOV      r0,r5                 ;712
000038  e7ec              B        |L4.20|
;;;714    
                          ENDP


                          AREA ||i.eap_gpsk_init||, CODE, READONLY, ALIGN=2

                  eap_gpsk_init PROC
;;;82     
;;;83     static void * eap_gpsk_init(struct eap_sm *sm)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;84     {
000004  4607              MOV      r7,r0
;;;85     	struct eap_gpsk_data *data;
;;;86     	const u8 *identity, *password;
;;;87     	size_t identity_len, password_len;
;;;88     
;;;89     	password = eap_get_config_password(sm, &password_len);
000006  4669              MOV      r1,sp
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       eap_get_config_password
00000e  4606              MOV      r6,r0
;;;90     	if (password == NULL) {
000010  b936              CBNZ     r6,|L5.32|
;;;91     		wpa_printf(MSG_INFO, "EAP-GPSK: No key (password) configured");
000012  a123              ADR      r1,|L5.160|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;92     		return NULL;
00001a  2000              MOVS     r0,#0
                  |L5.28|
;;;93     	}
;;;94     
;;;95     	data = os_zalloc(sizeof(*data));
;;;96     	if (data == NULL)
;;;97     		return NULL;
;;;98     	data->state = GPSK_1;
;;;99     
;;;100    	identity = eap_get_config_identity(sm, &identity_len);
;;;101    	if (identity) {
;;;102    		data->id_peer = os_malloc(identity_len);
;;;103    		if (data->id_peer == NULL) {
;;;104    			eap_gpsk_deinit(sm, data);
;;;105    			return NULL;
;;;106    		}
;;;107    		os_memcpy(data->id_peer, identity, identity_len);
;;;108    		data->id_peer_len = identity_len;
;;;109    	}
;;;110    
;;;111    	data->psk = os_malloc(password_len);
;;;112    	if (data->psk == NULL) {
;;;113    		eap_gpsk_deinit(sm, data);
;;;114    		return NULL;
;;;115    	}
;;;116    	os_memcpy(data->psk, password, password_len);
;;;117    	data->psk_len = password_len;
;;;118    
;;;119    	return data;
;;;120    }
00001c  e8bd81fc          POP      {r2-r8,pc}
                  |L5.32|
000020  f44f709a          MOV      r0,#0x134             ;95
000024  f7fffffe          BL       os_zalloc
000028  4604              MOV      r4,r0                 ;95
00002a  b90c              CBNZ     r4,|L5.48|
00002c  2000              MOVS     r0,#0                 ;97
00002e  e7f5              B        |L5.28|
                  |L5.48|
000030  2000              MOVS     r0,#0                 ;98
000032  7020              STRB     r0,[r4,#0]            ;98
000034  a901              ADD      r1,sp,#4              ;100
000036  4638              MOV      r0,r7                 ;100
000038  f7fffffe          BL       eap_get_config_identity
00003c  4605              MOV      r5,r0                 ;100
00003e  b1b5              CBZ      r5,|L5.110|
000040  9801              LDR      r0,[sp,#4]            ;102
000042  f7fffffe          BL       os_malloc
000046  f8c40114          STR      r0,[r4,#0x114]        ;102
00004a  f8d40114          LDR      r0,[r4,#0x114]        ;103
00004e  b928              CBNZ     r0,|L5.92|
000050  4621              MOV      r1,r4                 ;104
000052  4638              MOV      r0,r7                 ;104
000054  f7fffffe          BL       eap_gpsk_deinit
000058  2000              MOVS     r0,#0                 ;105
00005a  e7df              B        |L5.28|
                  |L5.92|
00005c  f8d40114          LDR      r0,[r4,#0x114]        ;107
000060  4629              MOV      r1,r5                 ;107
000062  9a01              LDR      r2,[sp,#4]            ;107
000064  f7fffffe          BL       os_memcpy
000068  9801              LDR      r0,[sp,#4]            ;108
00006a  f8c40118          STR      r0,[r4,#0x118]        ;108
                  |L5.110|
00006e  9800              LDR      r0,[sp,#0]            ;111
000070  f7fffffe          BL       os_malloc
000074  f8c4012c          STR      r0,[r4,#0x12c]        ;111
000078  f8d4012c          LDR      r0,[r4,#0x12c]        ;112
00007c  b928              CBNZ     r0,|L5.138|
00007e  4621              MOV      r1,r4                 ;113
000080  4638              MOV      r0,r7                 ;113
000082  f7fffffe          BL       eap_gpsk_deinit
000086  2000              MOVS     r0,#0                 ;114
000088  e7c8              B        |L5.28|
                  |L5.138|
00008a  f8d4012c          LDR      r0,[r4,#0x12c]        ;116
00008e  4631              MOV      r1,r6                 ;116
000090  9a00              LDR      r2,[sp,#0]            ;116
000092  f7fffffe          BL       os_memcpy
000096  9800              LDR      r0,[sp,#0]            ;117
000098  f8c40130          STR      r0,[r4,#0x130]        ;117
00009c  4620              MOV      r0,r4                 ;119
00009e  e7bd              B        |L5.28|
;;;121    
                          ENDP

                  |L5.160|
0000a0  4541502d          DCB      "EAP-GPSK: No key (password) configured",0
0000a4  4750534b
0000a8  3a204e6f
0000ac  206b6579
0000b0  20287061
0000b4  7373776f
0000b8  72642920
0000bc  636f6e66
0000c0  69677572
0000c4  656400  
0000c7  00                DCB      0

                          AREA ||i.eap_gpsk_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_gpsk_isKeyAvailable PROC
;;;672    
;;;673    static Boolean eap_gpsk_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;674    {
;;;675    	struct eap_gpsk_data *data = priv;
000002  460a              MOV      r2,r1
;;;676    	return data->state == SUCCESS;
000004  7810              LDRB     r0,[r2,#0]
000006  2802              CMP      r0,#2
000008  d101              BNE      |L6.14|
00000a  2001              MOVS     r0,#1
                  |L6.12|
;;;677    }
00000c  4770              BX       lr
                  |L6.14|
00000e  2000              MOVS     r0,#0                 ;676
000010  e7fc              B        |L6.12|
;;;678    
                          ENDP


                          AREA ||i.eap_gpsk_process||, CODE, READONLY, ALIGN=2

                  eap_gpsk_process PROC
;;;630    
;;;631    static struct wpabuf * eap_gpsk_process(struct eap_sm *sm, void *priv,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;632    					struct eap_method_ret *ret,
;;;633    					const struct wpabuf *reqData)
;;;634    {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  4698              MOV      r8,r3
;;;635    	struct eap_gpsk_data *data = priv;
00000c  46ba              MOV      r10,r7
;;;636    	struct wpabuf *resp;
;;;637    	const u8 *pos;
;;;638    	size_t len;
;;;639    
;;;640    	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_GPSK, reqData, &len);
00000e  ab02              ADD      r3,sp,#8
000010  4642              MOV      r2,r8
000012  2133              MOVS     r1,#0x33
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       eap_hdr_validate
00001a  4605              MOV      r5,r0
;;;641    	if (pos == NULL || len < 1) {
00001c  b10d              CBZ      r5,|L7.34|
00001e  9802              LDR      r0,[sp,#8]
000020  b920              CBNZ     r0,|L7.44|
                  |L7.34|
;;;642    		ret->ignore = TRUE;
000022  2001              MOVS     r0,#1
000024  6020              STR      r0,[r4,#0]
;;;643    		return NULL;
000026  2000              MOVS     r0,#0
                  |L7.40|
;;;644    	}
;;;645    
;;;646    	wpa_printf(MSG_DEBUG, "EAP-GPSK: Received frame: opcode %d", *pos);
;;;647    
;;;648    	ret->ignore = FALSE;
;;;649    	ret->methodState = METHOD_MAY_CONT;
;;;650    	ret->decision = DECISION_FAIL;
;;;651    	ret->allowNotifications = FALSE;
;;;652    
;;;653    	switch (*pos) {
;;;654    	case EAP_GPSK_OPCODE_GPSK_1:
;;;655    		resp = eap_gpsk_process_gpsk_1(sm, data, ret, reqData,
;;;656    					       pos + 1, len - 1);
;;;657    		break;
;;;658    	case EAP_GPSK_OPCODE_GPSK_3:
;;;659    		resp = eap_gpsk_process_gpsk_3(sm, data, ret, reqData,
;;;660    					       pos + 1, len - 1);
;;;661    		break;
;;;662    	default:
;;;663    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Ignoring message with "
;;;664    			   "unknown opcode %d", *pos);
;;;665    		ret->ignore = TRUE;
;;;666    		return NULL;
;;;667    	}
;;;668    
;;;669    	return resp;
;;;670    }
000028  e8bd8ffe          POP      {r1-r11,pc}
                  |L7.44|
00002c  782a              LDRB     r2,[r5,#0]            ;646
00002e  a11b              ADR      r1,|L7.156|
000030  2000              MOVS     r0,#0                 ;646
000032  f7fffffe          BL       wpa_printf
000036  2000              MOVS     r0,#0                 ;648
000038  6020              STR      r0,[r4,#0]            ;648
00003a  2003              MOVS     r0,#3                 ;649
00003c  7120              STRB     r0,[r4,#4]            ;649
00003e  2000              MOVS     r0,#0                 ;650
000040  7160              STRB     r0,[r4,#5]            ;650
000042  60a0              STR      r0,[r4,#8]            ;651
000044  7828              LDRB     r0,[r5,#0]            ;653
000046  2801              CMP      r0,#1                 ;653
000048  d002              BEQ      |L7.80|
00004a  2803              CMP      r0,#3                 ;653
00004c  d11a              BNE      |L7.132|
00004e  e00c              B        |L7.106|
                  |L7.80|
000050  9b02              LDR      r3,[sp,#8]            ;655
000052  1e5b              SUBS     r3,r3,#1              ;655
000054  1c6a              ADDS     r2,r5,#1              ;655
000056  e9cd2300          STRD     r2,r3,[sp,#0]         ;655
00005a  4643              MOV      r3,r8                 ;655
00005c  4622              MOV      r2,r4                 ;655
00005e  4651              MOV      r1,r10                ;655
000060  4648              MOV      r0,r9                 ;655
000062  f7fffffe          BL       eap_gpsk_process_gpsk_1
000066  4606              MOV      r6,r0                 ;655
000068  e015              B        |L7.150|
                  |L7.106|
00006a  9b02              LDR      r3,[sp,#8]            ;659
00006c  1e5b              SUBS     r3,r3,#1              ;659
00006e  1c6a              ADDS     r2,r5,#1              ;659
000070  e9cd2300          STRD     r2,r3,[sp,#0]         ;659
000074  4643              MOV      r3,r8                 ;659
000076  4622              MOV      r2,r4                 ;659
000078  4651              MOV      r1,r10                ;659
00007a  4648              MOV      r0,r9                 ;659
00007c  f7fffffe          BL       eap_gpsk_process_gpsk_3
000080  4606              MOV      r6,r0                 ;659
000082  e008              B        |L7.150|
                  |L7.132|
000084  782a              LDRB     r2,[r5,#0]            ;663
000086  a10e              ADR      r1,|L7.192|
000088  2000              MOVS     r0,#0                 ;663
00008a  f7fffffe          BL       wpa_printf
00008e  2001              MOVS     r0,#1                 ;665
000090  6020              STR      r0,[r4,#0]            ;665
000092  2000              MOVS     r0,#0                 ;666
000094  e7c8              B        |L7.40|
                  |L7.150|
000096  bf00              NOP                            ;657
000098  4630              MOV      r0,r6                 ;669
00009a  e7c5              B        |L7.40|
;;;671    
                          ENDP

                  |L7.156|
00009c  4541502d          DCB      "EAP-GPSK: Received frame: opcode %d",0
0000a0  4750534b
0000a4  3a205265
0000a8  63656976
0000ac  65642066
0000b0  72616d65
0000b4  3a206f70
0000b8  636f6465
0000bc  20256400
                  |L7.192|
0000c0  4541502d          DCB      "EAP-GPSK: Ignoring message with unknown opcode %d",0
0000c4  4750534b
0000c8  3a204967
0000cc  6e6f7269
0000d0  6e67206d
0000d4  65737361
0000d8  67652077
0000dc  69746820
0000e0  756e6b6e
0000e4  6f776e20
0000e8  6f70636f
0000ec  64652025
0000f0  6400    
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||i.eap_gpsk_process_csuite_list||, CODE, READONLY, ALIGN=2

                  eap_gpsk_process_csuite_list PROC
;;;221    
;;;222    static const u8 * eap_gpsk_process_csuite_list(struct eap_sm *sm,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;223    					       struct eap_gpsk_data *data,
;;;224    					       const u8 **list,
;;;225    					       size_t *list_len,
;;;226    					       const u8 *pos, const u8 *end)
;;;227    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
00000c  e9dd4708          LDRD     r4,r7,[sp,#0x20]
;;;228    	if (pos == NULL)
000010  b914              CBNZ     r4,|L8.24|
;;;229    		return NULL;
000012  2000              MOVS     r0,#0
                  |L8.20|
;;;230    
;;;231    	if (end - pos < 2) {
;;;232    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Too short GPSK-1 packet");
;;;233    		return NULL;
;;;234    	}
;;;235    	*list_len = WPA_GET_BE16(pos);
;;;236    	pos += 2;
;;;237    	if (end - pos < (int) *list_len) {
;;;238    		wpa_printf(MSG_DEBUG, "EAP-GPSK: CSuite_List overflow");
;;;239    		return NULL;
;;;240    	}
;;;241    	if (*list_len == 0 || (*list_len % sizeof(struct eap_gpsk_csuite))) {
;;;242    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Invalid CSuite_List len %lu",
;;;243    			   (unsigned long) *list_len);
;;;244    		return NULL;
;;;245    	}
;;;246    	*list = pos;
;;;247    	pos += *list_len;
;;;248    
;;;249    	if (eap_gpsk_select_csuite(sm, data, *list, *list_len) < 0)
;;;250    		return NULL;
;;;251    
;;;252    	return pos;
;;;253    }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L8.24|
000018  1b38              SUBS     r0,r7,r4              ;231
00001a  2802              CMP      r0,#2                 ;231
00001c  da05              BGE      |L8.42|
00001e  a11a              ADR      r1,|L8.136|
000020  2000              MOVS     r0,#0                 ;232
000022  f7fffffe          BL       wpa_printf
000026  2000              MOVS     r0,#0                 ;233
000028  e7f4              B        |L8.20|
                  |L8.42|
00002a  7860              LDRB     r0,[r4,#1]            ;235
00002c  7821              LDRB     r1,[r4,#0]            ;235
00002e  ea402001          ORR      r0,r0,r1,LSL #8       ;235
000032  6028              STR      r0,[r5,#0]            ;235
000034  1ca4              ADDS     r4,r4,#2              ;236
000036  1b38              SUBS     r0,r7,r4              ;237
000038  6829              LDR      r1,[r5,#0]            ;237
00003a  4288              CMP      r0,r1                 ;237
00003c  da05              BGE      |L8.74|
00003e  a11b              ADR      r1,|L8.172|
000040  2000              MOVS     r0,#0                 ;238
000042  f7fffffe          BL       wpa_printf
000046  2000              MOVS     r0,#0                 ;239
000048  e7e4              B        |L8.20|
                  |L8.74|
00004a  6828              LDR      r0,[r5,#0]            ;241
00004c  b130              CBZ      r0,|L8.92|
00004e  2106              MOVS     r1,#6                 ;241
000050  6828              LDR      r0,[r5,#0]            ;241
000052  fbb0f2f1          UDIV     r2,r0,r1              ;241
000056  fb010012          MLS      r0,r1,r2,r0           ;241
00005a  b130              CBZ      r0,|L8.106|
                  |L8.92|
00005c  a11b              ADR      r1,|L8.204|
00005e  2000              MOVS     r0,#0                 ;242
000060  682a              LDR      r2,[r5,#0]            ;242
000062  f7fffffe          BL       wpa_printf
000066  2000              MOVS     r0,#0                 ;244
000068  e7d4              B        |L8.20|
                  |L8.106|
00006a  6034              STR      r4,[r6,#0]            ;246
00006c  6828              LDR      r0,[r5,#0]            ;247
00006e  4404              ADD      r4,r4,r0              ;247
000070  682b              LDR      r3,[r5,#0]            ;249
000072  4649              MOV      r1,r9                 ;249
000074  4640              MOV      r0,r8                 ;249
000076  6832              LDR      r2,[r6,#0]            ;249
000078  f7fffffe          BL       eap_gpsk_select_csuite
00007c  2800              CMP      r0,#0                 ;249
00007e  da01              BGE      |L8.132|
000080  2000              MOVS     r0,#0                 ;250
000082  e7c7              B        |L8.20|
                  |L8.132|
000084  4620              MOV      r0,r4                 ;252
000086  e7c5              B        |L8.20|
;;;254    
                          ENDP

                  |L8.136|
000088  4541502d          DCB      "EAP-GPSK: Too short GPSK-1 packet",0
00008c  4750534b
000090  3a20546f
000094  6f207368
000098  6f727420
00009c  4750534b
0000a0  2d312070
0000a4  61636b65
0000a8  7400    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L8.172|
0000ac  4541502d          DCB      "EAP-GPSK: CSuite_List overflow",0
0000b0  4750534b
0000b4  3a204353
0000b8  75697465
0000bc  5f4c6973
0000c0  74206f76
0000c4  6572666c
0000c8  6f7700  
0000cb  00                DCB      0
                  |L8.204|
0000cc  4541502d          DCB      "EAP-GPSK: Invalid CSuite_List len %lu",0
0000d0  4750534b
0000d4  3a20496e
0000d8  76616c69
0000dc  64204353
0000e0  75697465
0000e4  5f4c6973
0000e8  74206c65
0000ec  6e20256c
0000f0  7500    
0000f2  00                DCB      0
0000f3  00                DCB      0

                          AREA ||i.eap_gpsk_process_gpsk_1||, CODE, READONLY, ALIGN=2

                  eap_gpsk_process_gpsk_1 PROC
;;;255    
;;;256    static struct wpabuf * eap_gpsk_process_gpsk_1(struct eap_sm *sm,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;257    					       struct eap_gpsk_data *data,
;;;258    					       struct eap_method_ret *ret,
;;;259    					       const struct wpabuf *reqData,
;;;260    					       const u8 *payload,
;;;261    					       size_t payload_len)
;;;262    {
000004  b085              SUB      sp,sp,#0x14
000006  4683              MOV      r11,r0
000008  460c              MOV      r4,r1
00000a  4690              MOV      r8,r2
00000c  4699              MOV      r9,r3
00000e  f8dda048          LDR      r10,[sp,#0x48]
;;;263    	size_t csuite_list_len;
;;;264    	const u8 *csuite_list, *pos, *end;
;;;265    	struct wpabuf *resp;
;;;266    
;;;267    	if (data->state != GPSK_1) {
000012  7820              LDRB     r0,[r4,#0]
000014  b130              CBZ      r0,|L9.36|
;;;268    		ret->ignore = TRUE;
000016  2001              MOVS     r0,#1
000018  f8c80000          STR      r0,[r8,#0]
;;;269    		return NULL;
00001c  2000              MOVS     r0,#0
                  |L9.30|
;;;270    	}
;;;271    
;;;272    	wpa_printf(MSG_DEBUG, "EAP-GPSK: Received Request/GPSK-1");
;;;273    
;;;274    	end = payload + payload_len;
;;;275    
;;;276    	pos = eap_gpsk_process_id_server(data, payload, end);
;;;277    	pos = eap_gpsk_process_rand_server(data, pos, end);
;;;278    	pos = eap_gpsk_process_csuite_list(sm, data, &csuite_list,
;;;279    					   &csuite_list_len, pos, end);
;;;280    	if (pos == NULL) {
;;;281    		eap_gpsk_state(data, FAILURE);
;;;282    		return NULL;
;;;283    	}
;;;284    
;;;285    	resp = eap_gpsk_send_gpsk_2(data, eap_get_id(reqData),
;;;286    				    csuite_list, csuite_list_len);
;;;287    	if (resp == NULL)
;;;288    		return NULL;
;;;289    
;;;290    	eap_gpsk_state(data, GPSK_3);
;;;291    
;;;292    	return resp;
;;;293    }
00001e  b009              ADD      sp,sp,#0x24
000020  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.36|
000024  a11b              ADR      r1,|L9.148|
000026  2000              MOVS     r0,#0                 ;272
000028  f7fffffe          BL       wpa_printf
00002c  9813              LDR      r0,[sp,#0x4c]         ;274
00002e  eb0a0600          ADD      r6,r10,r0             ;274
000032  4632              MOV      r2,r6                 ;276
000034  4651              MOV      r1,r10                ;276
000036  4620              MOV      r0,r4                 ;276
000038  f7fffffe          BL       eap_gpsk_process_id_server
00003c  4605              MOV      r5,r0                 ;276
00003e  4632              MOV      r2,r6                 ;277
000040  4629              MOV      r1,r5                 ;277
000042  4620              MOV      r0,r4                 ;277
000044  f7fffffe          BL       eap_gpsk_process_rand_server
000048  4605              MOV      r5,r0                 ;277
00004a  ab04              ADD      r3,sp,#0x10           ;278
00004c  aa03              ADD      r2,sp,#0xc            ;278
00004e  4621              MOV      r1,r4                 ;278
000050  4658              MOV      r0,r11                ;278
000052  e9cd5600          STRD     r5,r6,[sp,#0]         ;278
000056  f7fffffe          BL       eap_gpsk_process_csuite_list
00005a  4605              MOV      r5,r0                 ;278
00005c  b92d              CBNZ     r5,|L9.106|
00005e  2103              MOVS     r1,#3                 ;281
000060  4620              MOV      r0,r4                 ;281
000062  f7fffffe          BL       eap_gpsk_state
000066  2000              MOVS     r0,#0                 ;282
000068  e7d9              B        |L9.30|
                  |L9.106|
00006a  4648              MOV      r0,r9                 ;285
00006c  f7fffffe          BL       eap_get_id
000070  9002              STR      r0,[sp,#8]            ;285
000072  4601              MOV      r1,r0                 ;285
000074  4620              MOV      r0,r4                 ;285
000076  e9dd2303          LDRD     r2,r3,[sp,#0xc]       ;285
00007a  f7fffffe          BL       eap_gpsk_send_gpsk_2
00007e  4607              MOV      r7,r0                 ;285
000080  b90f              CBNZ     r7,|L9.134|
000082  2000              MOVS     r0,#0                 ;288
000084  e7cb              B        |L9.30|
                  |L9.134|
000086  2101              MOVS     r1,#1                 ;290
000088  4620              MOV      r0,r4                 ;290
00008a  f7fffffe          BL       eap_gpsk_state
00008e  4638              MOV      r0,r7                 ;292
000090  e7c5              B        |L9.30|
;;;294    
                          ENDP

000092  0000              DCW      0x0000
                  |L9.148|
000094  4541502d          DCB      "EAP-GPSK: Received Request/GPSK-1",0
000098  4750534b
00009c  3a205265
0000a0  63656976
0000a4  65642052
0000a8  65717565
0000ac  73742f47
0000b0  50534b2d
0000b4  3100    
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.eap_gpsk_process_gpsk_3||, CODE, READONLY, ALIGN=2

                  eap_gpsk_process_gpsk_3 PROC
;;;548    
;;;549    static struct wpabuf * eap_gpsk_process_gpsk_3(struct eap_sm *sm,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;550    					       struct eap_gpsk_data *data,
;;;551    					       struct eap_method_ret *ret,
;;;552    					       const struct wpabuf *reqData,
;;;553    					       const u8 *payload,
;;;554    					       size_t payload_len)
;;;555    {
000004  460f              MOV      r7,r1
000006  4616              MOV      r6,r2
000008  4699              MOV      r9,r3
00000a  e9ddab0a          LDRD     r10,r11,[sp,#0x28]
;;;556    	struct wpabuf *resp;
;;;557    	const u8 *pos, *end;
;;;558    
;;;559    	if (data->state != GPSK_3) {
00000e  7838              LDRB     r0,[r7,#0]
000010  2801              CMP      r0,#1
000012  d004              BEQ      |L10.30|
;;;560    		ret->ignore = TRUE;
000014  2001              MOVS     r0,#1
000016  6030              STR      r0,[r6,#0]
;;;561    		return NULL;
000018  2000              MOVS     r0,#0
                  |L10.26|
;;;562    	}
;;;563    
;;;564    	wpa_printf(MSG_DEBUG, "EAP-GPSK: Received Request/GPSK-3");
;;;565    
;;;566    	end = payload + payload_len;
;;;567    
;;;568    	pos = eap_gpsk_validate_rand(data, payload, end);
;;;569    	pos = eap_gpsk_validate_id_server(data, pos, end);
;;;570    	pos = eap_gpsk_validate_csuite(data, pos, end);
;;;571    	pos = eap_gpsk_validate_pd_payload_2(data, pos, end);
;;;572    	pos = eap_gpsk_validate_gpsk_3_mic(data, payload, pos, end);
;;;573    
;;;574    	if (pos == NULL) {
;;;575    		eap_gpsk_state(data, FAILURE);
;;;576    		return NULL;
;;;577    	}
;;;578    	if (pos != end) {
;;;579    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Ignored %lu bytes of extra "
;;;580    			   "data in the end of GPSK-2",
;;;581    			   (unsigned long) (end - pos));
;;;582    	}
;;;583    
;;;584    	resp = eap_gpsk_send_gpsk_4(data, eap_get_id(reqData));
;;;585    	if (resp == NULL)
;;;586    		return NULL;
;;;587    
;;;588    	eap_gpsk_state(data, SUCCESS);
;;;589    	ret->methodState = METHOD_DONE;
;;;590    	ret->decision = DECISION_UNCOND_SUCC;
;;;591    
;;;592    	return resp;
;;;593    }
00001a  e8bd8ff8          POP      {r3-r11,pc}
                  |L10.30|
00001e  a125              ADR      r1,|L10.180|
000020  2000              MOVS     r0,#0                 ;564
000022  f7fffffe          BL       wpa_printf
000026  eb0a050b          ADD      r5,r10,r11            ;566
00002a  462a              MOV      r2,r5                 ;568
00002c  4651              MOV      r1,r10                ;568
00002e  4638              MOV      r0,r7                 ;568
000030  f7fffffe          BL       eap_gpsk_validate_rand
000034  4604              MOV      r4,r0                 ;568
000036  462a              MOV      r2,r5                 ;569
000038  4621              MOV      r1,r4                 ;569
00003a  4638              MOV      r0,r7                 ;569
00003c  f7fffffe          BL       eap_gpsk_validate_id_server
000040  4604              MOV      r4,r0                 ;569
000042  462a              MOV      r2,r5                 ;570
000044  4621              MOV      r1,r4                 ;570
000046  4638              MOV      r0,r7                 ;570
000048  f7fffffe          BL       eap_gpsk_validate_csuite
00004c  4604              MOV      r4,r0                 ;570
00004e  462a              MOV      r2,r5                 ;571
000050  4621              MOV      r1,r4                 ;571
000052  4638              MOV      r0,r7                 ;571
000054  f7fffffe          BL       eap_gpsk_validate_pd_payload_2
000058  4604              MOV      r4,r0                 ;571
00005a  462b              MOV      r3,r5                 ;572
00005c  4622              MOV      r2,r4                 ;572
00005e  4651              MOV      r1,r10                ;572
000060  4638              MOV      r0,r7                 ;572
000062  f7fffffe          BL       eap_gpsk_validate_gpsk_3_mic
000066  4604              MOV      r4,r0                 ;572
000068  b92c              CBNZ     r4,|L10.118|
00006a  2103              MOVS     r1,#3                 ;575
00006c  4638              MOV      r0,r7                 ;575
00006e  f7fffffe          BL       eap_gpsk_state
000072  2000              MOVS     r0,#0                 ;576
000074  e7d1              B        |L10.26|
                  |L10.118|
000076  42ac              CMP      r4,r5                 ;578
000078  d004              BEQ      |L10.132|
00007a  1b2a              SUBS     r2,r5,r4              ;579
00007c  a116              ADR      r1,|L10.216|
00007e  2000              MOVS     r0,#0                 ;579
000080  f7fffffe          BL       wpa_printf
                  |L10.132|
000084  4648              MOV      r0,r9                 ;584
000086  f7fffffe          BL       eap_get_id
00008a  4601              MOV      r1,r0                 ;584
00008c  9000              STR      r0,[sp,#0]            ;584
00008e  4638              MOV      r0,r7                 ;584
000090  f7fffffe          BL       eap_gpsk_send_gpsk_4
000094  4680              MOV      r8,r0                 ;584
000096  f1b80f00          CMP      r8,#0                 ;585
00009a  d101              BNE      |L10.160|
00009c  2000              MOVS     r0,#0                 ;586
00009e  e7bc              B        |L10.26|
                  |L10.160|
0000a0  2102              MOVS     r1,#2                 ;588
0000a2  4638              MOV      r0,r7                 ;588
0000a4  f7fffffe          BL       eap_gpsk_state
0000a8  2004              MOVS     r0,#4                 ;589
0000aa  7130              STRB     r0,[r6,#4]            ;589
0000ac  2002              MOVS     r0,#2                 ;590
0000ae  7170              STRB     r0,[r6,#5]            ;590
0000b0  4640              MOV      r0,r8                 ;592
0000b2  e7b2              B        |L10.26|
;;;594    
                          ENDP

                  |L10.180|
0000b4  4541502d          DCB      "EAP-GPSK: Received Request/GPSK-3",0
0000b8  4750534b
0000bc  3a205265
0000c0  63656976
0000c4  65642052
0000c8  65717565
0000cc  73742f47
0000d0  50534b2d
0000d4  3300    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L10.216|
0000d8  4541502d          DCB      "EAP-GPSK: Ignored %lu bytes of extra data in the end of"
0000dc  4750534b
0000e0  3a204967
0000e4  6e6f7265
0000e8  6420256c
0000ec  75206279
0000f0  74657320
0000f4  6f662065
0000f8  78747261
0000fc  20646174
000100  6120696e
000104  20746865
000108  20656e64
00010c  206f66  
00010f  20475053          DCB      " GPSK-2",0
000113  4b2d3200
000117  00                DCB      0

                          AREA ||i.eap_gpsk_process_id_server||, CODE, READONLY, ALIGN=2

                  eap_gpsk_process_id_server PROC
;;;132    
;;;133    static const u8 * eap_gpsk_process_id_server(struct eap_gpsk_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;134    					     const u8 *pos, const u8 *end)
;;;135    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
;;;136    	u16 alen;
;;;137    
;;;138    	if (end - pos < 2) {
00000a  1b78              SUBS     r0,r7,r5
00000c  2802              CMP      r0,#2
00000e  da06              BGE      |L11.30|
;;;139    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Too short GPSK-1 packet");
000010  a11c              ADR      r1,|L11.132|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;140    		return NULL;
000018  2000              MOVS     r0,#0
                  |L11.26|
;;;141    	}
;;;142    	alen = WPA_GET_BE16(pos);
;;;143    	pos += 2;
;;;144    	if (end - pos < alen) {
;;;145    		wpa_printf(MSG_DEBUG, "EAP-GPSK: ID_Server overflow");
;;;146    		return NULL;
;;;147    	}
;;;148    	os_free(data->id_server);
;;;149    	data->id_server = os_malloc(alen);
;;;150    	if (data->id_server == NULL) {
;;;151    		wpa_printf(MSG_DEBUG, "EAP-GPSK: No memory for ID_Server");
;;;152    		return NULL;
;;;153    	}
;;;154    	os_memcpy(data->id_server, pos, alen);
;;;155    	data->id_server_len = alen;
;;;156    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-GPSK: ID_Server",
;;;157    			  data->id_server, data->id_server_len);
;;;158    	pos += alen;
;;;159    
;;;160    	return pos;
;;;161    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L11.30|
00001e  7868              LDRB     r0,[r5,#1]            ;142
000020  7829              LDRB     r1,[r5,#0]            ;142
000022  ea402601          ORR      r6,r0,r1,LSL #8       ;142
000026  1cad              ADDS     r5,r5,#2              ;143
000028  1b78              SUBS     r0,r7,r5              ;144
00002a  42b0              CMP      r0,r6                 ;144
00002c  da05              BGE      |L11.58|
00002e  a11e              ADR      r1,|L11.168|
000030  2000              MOVS     r0,#0                 ;145
000032  f7fffffe          BL       wpa_printf
000036  2000              MOVS     r0,#0                 ;146
000038  e7ef              B        |L11.26|
                  |L11.58|
00003a  f8d4011c          LDR      r0,[r4,#0x11c]        ;148
00003e  f7fffffe          BL       os_free
000042  4630              MOV      r0,r6                 ;149
000044  f7fffffe          BL       os_malloc
000048  f8c4011c          STR      r0,[r4,#0x11c]        ;149
00004c  f8d4011c          LDR      r0,[r4,#0x11c]        ;150
000050  b928              CBNZ     r0,|L11.94|
000052  a11d              ADR      r1,|L11.200|
000054  2000              MOVS     r0,#0                 ;151
000056  f7fffffe          BL       wpa_printf
00005a  2000              MOVS     r0,#0                 ;152
00005c  e7dd              B        |L11.26|
                  |L11.94|
00005e  4632              MOV      r2,r6                 ;154
000060  4629              MOV      r1,r5                 ;154
000062  f8d4011c          LDR      r0,[r4,#0x11c]        ;154
000066  f7fffffe          BL       os_memcpy
00006a  f8c46120          STR      r6,[r4,#0x120]        ;155
00006e  a11f              ADR      r1,|L11.236|
000070  2000              MOVS     r0,#0                 ;156
000072  f504728e          ADD      r2,r4,#0x11c          ;156
000076  ca0c              LDM      r2,{r2,r3}            ;156
000078  f7fffffe          BL       wpa_hexdump_ascii
00007c  4435              ADD      r5,r5,r6              ;158
00007e  4628              MOV      r0,r5                 ;160
000080  e7cb              B        |L11.26|
;;;162    
                          ENDP

000082  0000              DCW      0x0000
                  |L11.132|
000084  4541502d          DCB      "EAP-GPSK: Too short GPSK-1 packet",0
000088  4750534b
00008c  3a20546f
000090  6f207368
000094  6f727420
000098  4750534b
00009c  2d312070
0000a0  61636b65
0000a4  7400    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L11.168|
0000a8  4541502d          DCB      "EAP-GPSK: ID_Server overflow",0
0000ac  4750534b
0000b0  3a204944
0000b4  5f536572
0000b8  76657220
0000bc  6f766572
0000c0  666c6f77
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L11.200|
0000c8  4541502d          DCB      "EAP-GPSK: No memory for ID_Server",0
0000cc  4750534b
0000d0  3a204e6f
0000d4  206d656d
0000d8  6f727920
0000dc  666f7220
0000e0  49445f53
0000e4  65727665
0000e8  7200    
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L11.236|
0000ec  4541502d          DCB      "EAP-GPSK: ID_Server",0
0000f0  4750534b
0000f4  3a204944
0000f8  5f536572
0000fc  76657200

                          AREA ||i.eap_gpsk_process_rand_server||, CODE, READONLY, ALIGN=2

                  eap_gpsk_process_rand_server PROC
;;;163    
;;;164    static const u8 * eap_gpsk_process_rand_server(struct eap_gpsk_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;165    					       const u8 *pos, const u8 *end)
;;;166    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;167    	if (pos == NULL)
000008  b90c              CBNZ     r4,|L12.14|
;;;168    		return NULL;
00000a  2000              MOVS     r0,#0
                  |L12.12|
;;;169    
;;;170    	if (end - pos < EAP_GPSK_RAND_LEN) {
;;;171    		wpa_printf(MSG_DEBUG, "EAP-GPSK: RAND_Server overflow");
;;;172    		return NULL;
;;;173    	}
;;;174    	os_memcpy(data->rand_server, pos, EAP_GPSK_RAND_LEN);
;;;175    	wpa_hexdump(MSG_DEBUG, "EAP-GPSK: RAND_Server",
;;;176    		    data->rand_server, EAP_GPSK_RAND_LEN);
;;;177    	pos += EAP_GPSK_RAND_LEN;
;;;178    
;;;179    	return pos;
;;;180    }
00000c  bd70              POP      {r4-r6,pc}
                  |L12.14|
00000e  1b30              SUBS     r0,r6,r4              ;170
000010  2820              CMP      r0,#0x20              ;170
000012  da05              BGE      |L12.32|
000014  a109              ADR      r1,|L12.60|
000016  2000              MOVS     r0,#0                 ;171
000018  f7fffffe          BL       wpa_printf
00001c  2000              MOVS     r0,#0                 ;172
00001e  e7f5              B        |L12.12|
                  |L12.32|
000020  2220              MOVS     r2,#0x20              ;174
000022  4621              MOV      r1,r4                 ;174
000024  1c68              ADDS     r0,r5,#1              ;174
000026  f7fffffe          BL       os_memcpy
00002a  2320              MOVS     r3,#0x20              ;175
00002c  1c6a              ADDS     r2,r5,#1              ;175
00002e  a10b              ADR      r1,|L12.92|
000030  2000              MOVS     r0,#0                 ;175
000032  f7fffffe          BL       wpa_hexdump
000036  3420              ADDS     r4,r4,#0x20           ;177
000038  4620              MOV      r0,r4                 ;179
00003a  e7e7              B        |L12.12|
;;;181    
                          ENDP

                  |L12.60|
00003c  4541502d          DCB      "EAP-GPSK: RAND_Server overflow",0
000040  4750534b
000044  3a205241
000048  4e445f53
00004c  65727665
000050  72206f76
000054  6572666c
000058  6f7700  
00005b  00                DCB      0
                  |L12.92|
00005c  4541502d          DCB      "EAP-GPSK: RAND_Server",0
000060  4750534b
000064  3a205241
000068  4e445f53
00006c  65727665
000070  7200    
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.eap_gpsk_select_csuite||, CODE, READONLY, ALIGN=2

                  eap_gpsk_select_csuite PROC
;;;182    
;;;183    static int eap_gpsk_select_csuite(struct eap_sm *sm,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;184    				  struct eap_gpsk_data *data,
;;;185    				  const u8 *csuite_list,
;;;186    				  size_t csuite_list_len)
;;;187    {
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
000008  4692              MOV      r10,r2
00000a  469b              MOV      r11,r3
;;;188    	struct eap_gpsk_csuite *csuite;
;;;189    	int i, count;
;;;190    
;;;191    	count = csuite_list_len / sizeof(struct eap_gpsk_csuite);
00000c  2006              MOVS     r0,#6
00000e  fbbbf0f0          UDIV     r0,r11,r0
000012  9001              STR      r0,[sp,#4]
;;;192    	data->vendor = EAP_GPSK_VENDOR_IETF;
000014  2000              MOVS     r0,#0
000016  f8c40124          STR      r0,[r4,#0x124]
;;;193    	data->specifier = EAP_GPSK_CIPHER_RESERVED;
00001a  f8c40128          STR      r0,[r4,#0x128]
;;;194    	csuite = (struct eap_gpsk_csuite *) csuite_list;
00001e  4655              MOV      r5,r10
;;;195    	for (i = 0; i < count; i++) {
000020  2600              MOVS     r6,#0
000022  e027              B        |L13.116|
                  |L13.36|
;;;196    		int vendor, specifier;
;;;197    		vendor = WPA_GET_BE32(csuite->vendor);
000024  7828              LDRB     r0,[r5,#0]
000026  0600              LSLS     r0,r0,#24
000028  7869              LDRB     r1,[r5,#1]
00002a  ea404001          ORR      r0,r0,r1,LSL #16
00002e  78a9              LDRB     r1,[r5,#2]
000030  ea402001          ORR      r0,r0,r1,LSL #8
000034  78e9              LDRB     r1,[r5,#3]
000036  ea400701          ORR      r7,r0,r1
;;;198    		specifier = WPA_GET_BE16(csuite->specifier);
00003a  7968              LDRB     r0,[r5,#5]
00003c  7929              LDRB     r1,[r5,#4]
00003e  ea402801          ORR      r8,r0,r1,LSL #8
;;;199    		wpa_printf(MSG_DEBUG, "EAP-GPSK: CSuite[%d]: %d:%d",
000042  463b              MOV      r3,r7
000044  4632              MOV      r2,r6
000046  a119              ADR      r1,|L13.172|
000048  2000              MOVS     r0,#0
00004a  f8cd8000          STR      r8,[sp,#0]
00004e  f7fffffe          BL       wpa_printf
;;;200    			   i, vendor, specifier);
;;;201    		if (data->vendor == EAP_GPSK_VENDOR_IETF &&
000052  f8d40124          LDR      r0,[r4,#0x124]
000056  b958              CBNZ     r0,|L13.112|
;;;202    		    data->specifier == EAP_GPSK_CIPHER_RESERVED &&
000058  f8d40128          LDR      r0,[r4,#0x128]
00005c  b940              CBNZ     r0,|L13.112|
;;;203    		    eap_gpsk_supported_ciphersuite(vendor, specifier)) {
00005e  4641              MOV      r1,r8
000060  4638              MOV      r0,r7
000062  f7fffffe          BL       eap_gpsk_supported_ciphersuite
000066  b118              CBZ      r0,|L13.112|
;;;204    			data->vendor = vendor;
000068  f8c47124          STR      r7,[r4,#0x124]
;;;205    			data->specifier = specifier;
00006c  f8c48128          STR      r8,[r4,#0x128]
                  |L13.112|
;;;206    		}
;;;207    		csuite++;
000070  1dad              ADDS     r5,r5,#6
000072  1c76              ADDS     r6,r6,#1              ;195
                  |L13.116|
000074  9801              LDR      r0,[sp,#4]            ;195
000076  4286              CMP      r6,r0                 ;195
000078  dbd4              BLT      |L13.36|
;;;208    	}
;;;209    	if (data->vendor == EAP_GPSK_VENDOR_IETF &&
00007a  f8d40124          LDR      r0,[r4,#0x124]
00007e  b960              CBNZ     r0,|L13.154|
;;;210    	    data->specifier == EAP_GPSK_CIPHER_RESERVED) {
000080  f8d40128          LDR      r0,[r4,#0x128]
000084  b948              CBNZ     r0,|L13.154|
;;;211    		wpa_msg(sm->msg_ctx, MSG_INFO, "EAP-GPSK: No supported "
000086  a210              ADR      r2,|L13.200|
000088  2100              MOVS     r1,#0
00008a  f8d90090          LDR      r0,[r9,#0x90]
00008e  f7fffffe          BL       wpa_msg
;;;212    			"ciphersuite found");
;;;213    		return -1;
000092  f04f30ff          MOV      r0,#0xffffffff
                  |L13.150|
;;;214    	}
;;;215    	wpa_printf(MSG_DEBUG, "EAP-GPSK: Selected ciphersuite %d:%d",
;;;216    		   data->vendor, data->specifier);
;;;217    
;;;218    	return 0;
;;;219    }
000096  e8bd9ffc          POP      {r2-r12,pc}
                  |L13.154|
00009a  a116              ADR      r1,|L13.244|
00009c  2000              MOVS     r0,#0                 ;215
00009e  f5047292          ADD      r2,r4,#0x124          ;215
0000a2  ca0c              LDM      r2,{r2,r3}            ;215
0000a4  f7fffffe          BL       wpa_printf
0000a8  2000              MOVS     r0,#0                 ;218
0000aa  e7f4              B        |L13.150|
;;;220    
                          ENDP

                  |L13.172|
0000ac  4541502d          DCB      "EAP-GPSK: CSuite[%d]: %d:%d",0
0000b0  4750534b
0000b4  3a204353
0000b8  75697465
0000bc  5b25645d
0000c0  3a202564
0000c4  3a256400
                  |L13.200|
0000c8  4541502d          DCB      "EAP-GPSK: No supported ciphersuite found",0
0000cc  4750534b
0000d0  3a204e6f
0000d4  20737570
0000d8  706f7274
0000dc  65642063
0000e0  69706865
0000e4  72737569
0000e8  74652066
0000ec  6f756e64
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L13.244|
0000f4  4541502d          DCB      "EAP-GPSK: Selected ciphersuite %d:%d",0
0000f8  4750534b
0000fc  3a205365
000100  6c656374
000104  65642063
000108  69706865
00010c  72737569
000110  74652025
000114  643a2564
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0

                          AREA ||i.eap_gpsk_send_gpsk_2||, CODE, READONLY, ALIGN=2

                  eap_gpsk_send_gpsk_2 PROC
;;;295    
;;;296    static struct wpabuf * eap_gpsk_send_gpsk_2(struct eap_gpsk_data *data,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;297    					    u8 identifier,
;;;298    					    const u8 *csuite_list,
;;;299    					    size_t csuite_list_len)
;;;300    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  461e              MOV      r6,r3
;;;301    	struct wpabuf *resp;
;;;302    	size_t len, miclen;
;;;303    	u8 *rpos, *start;
;;;304    	struct eap_gpsk_csuite *csuite;
;;;305    
;;;306    	wpa_printf(MSG_DEBUG, "EAP-GPSK: Sending Response/GPSK-2");
00000e  a177              ADR      r1,|L14.492|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       wpa_printf
;;;307    
;;;308    	miclen = eap_gpsk_mic_len(data->vendor, data->specifier);
000016  f5047092          ADD      r0,r4,#0x124
00001a  c803              LDM      r0,{r0,r1}
00001c  f7fffffe          BL       eap_gpsk_mic_len
000020  900d              STR      r0,[sp,#0x34]
;;;309    	len = 1 + 2 + data->id_peer_len + 2 + data->id_server_len +
000022  f8d40118          LDR      r0,[r4,#0x118]
000026  1d40              ADDS     r0,r0,#5
000028  f8d41120          LDR      r1,[r4,#0x120]
00002c  4408              ADD      r0,r0,r1
00002e  3042              ADDS     r0,r0,#0x42
000030  4430              ADD      r0,r0,r6
000032  3008              ADDS     r0,r0,#8
000034  990d              LDR      r1,[sp,#0x34]
000036  4408              ADD      r0,r0,r1
000038  900e              STR      r0,[sp,#0x38]
;;;310    		2 * EAP_GPSK_RAND_LEN + 2 + csuite_list_len +
;;;311    		sizeof(struct eap_gpsk_csuite) + 2 + miclen;
;;;312    
;;;313    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_GPSK, len,
00003a  2302              MOVS     r3,#2
00003c  f8cd9000          STR      r9,[sp,#0]
000040  2133              MOVS     r1,#0x33
000042  2000              MOVS     r0,#0
000044  9a0e              LDR      r2,[sp,#0x38]
000046  f7fffffe          BL       eap_msg_alloc
00004a  4683              MOV      r11,r0
;;;314    			     EAP_CODE_RESPONSE, identifier);
;;;315    	if (resp == NULL)
00004c  f1bb0f00          CMP      r11,#0
000050  d103              BNE      |L14.90|
;;;316    		return NULL;
000052  2000              MOVS     r0,#0
                  |L14.84|
;;;317    
;;;318    	wpabuf_put_u8(resp, EAP_GPSK_OPCODE_GPSK_2);
;;;319    	start = wpabuf_put(resp, 0);
;;;320    
;;;321    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-GPSK: ID_Peer",
;;;322    			  data->id_peer, data->id_peer_len);
;;;323    	wpabuf_put_be16(resp, data->id_peer_len);
;;;324    	wpabuf_put_data(resp, data->id_peer, data->id_peer_len);
;;;325    
;;;326    	wpabuf_put_be16(resp, data->id_server_len);
;;;327    	wpabuf_put_data(resp, data->id_server, data->id_server_len);
;;;328    
;;;329    	if (os_get_random(data->rand_peer, EAP_GPSK_RAND_LEN)) {
;;;330    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Failed to get random data "
;;;331    			   "for RAND_Peer");
;;;332    		eap_gpsk_state(data, FAILURE);
;;;333    		wpabuf_free(resp);
;;;334    		return NULL;
;;;335    	}
;;;336    	wpa_hexdump(MSG_DEBUG, "EAP-GPSK: RAND_Peer",
;;;337    		    data->rand_peer, EAP_GPSK_RAND_LEN);
;;;338    	wpabuf_put_data(resp, data->rand_peer, EAP_GPSK_RAND_LEN);
;;;339    	wpabuf_put_data(resp, data->rand_server, EAP_GPSK_RAND_LEN);
;;;340    
;;;341    	wpabuf_put_be16(resp, csuite_list_len);
;;;342    	wpabuf_put_data(resp, csuite_list, csuite_list_len);
;;;343    
;;;344    	csuite = wpabuf_put(resp, sizeof(*csuite));
;;;345    	WPA_PUT_BE32(csuite->vendor, data->vendor);
;;;346    	WPA_PUT_BE16(csuite->specifier, data->specifier);
;;;347    
;;;348    	if (eap_gpsk_derive_keys(data->psk, data->psk_len,
;;;349    				 data->vendor, data->specifier,
;;;350    				 data->rand_peer, data->rand_server,
;;;351    				 data->id_peer, data->id_peer_len,
;;;352    				 data->id_server, data->id_server_len,
;;;353    				 data->msk, data->emsk,
;;;354    				 data->sk, &data->sk_len,
;;;355    				 data->pk, &data->pk_len) < 0) {
;;;356    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Failed to derive keys");
;;;357    		eap_gpsk_state(data, FAILURE);
;;;358    		wpabuf_free(resp);
;;;359    		return NULL;
;;;360    	}
;;;361    
;;;362    	/* No PD_Payload_1 */
;;;363    	wpabuf_put_be16(resp, 0);
;;;364    
;;;365    	rpos = wpabuf_put(resp, miclen);
;;;366    	if (eap_gpsk_compute_mic(data->sk, data->sk_len, data->vendor,
;;;367    				 data->specifier, start, rpos - start, rpos) <
;;;368    	    0) {
;;;369    		eap_gpsk_state(data, FAILURE);
;;;370    		wpabuf_free(resp);
;;;371    		return NULL;
;;;372    	}
;;;373    
;;;374    	return resp;
;;;375    }
000054  b00f              ADD      sp,sp,#0x3c
000056  e8bd8ff0          POP      {r4-r11,pc}
                  |L14.90|
00005a  2102              MOVS     r1,#2                 ;318
00005c  4658              MOV      r0,r11                ;318
00005e  f7fffffe          BL       wpabuf_put_u8
000062  2100              MOVS     r1,#0                 ;319
000064  4658              MOV      r0,r11                ;319
000066  f7fffffe          BL       wpabuf_put
00006a  4680              MOV      r8,r0                 ;319
00006c  f504748a          ADD      r4,r4,#0x114          ;321
000070  a167              ADR      r1,|L14.528|
000072  f04f0000          MOV      r0,#0                 ;321
000076  e9d42300          LDRD     r2,r3,[r4,#0]         ;321
00007a  f7fffffe          BL       wpa_hexdump_ascii
00007e  6860              LDR      r0,[r4,#4]            ;323
000080  b281              UXTH     r1,r0                 ;323
000082  4658              MOV      r0,r11                ;323
000084  f7fffffe          BL       wpabuf_put_be16
000088  4658              MOV      r0,r11                ;324
00008a  e9d41200          LDRD     r1,r2,[r4,#0]         ;324
00008e  f7fffffe          BL       wpabuf_put_data
000092  68e0              LDR      r0,[r4,#0xc]          ;326
000094  b281              UXTH     r1,r0                 ;326
000096  4658              MOV      r0,r11                ;326
000098  f7fffffe          BL       wpabuf_put_be16
00009c  e9d41202          LDRD     r1,r2,[r4,#8]         ;327
0000a0  f5a4748a          SUB      r4,r4,#0x114          ;327
0000a4  4658              MOV      r0,r11                ;327
0000a6  f7fffffe          BL       wpabuf_put_data
0000aa  2120              MOVS     r1,#0x20              ;329
0000ac  f1040021          ADD      r0,r4,#0x21           ;329
0000b0  f7fffffe          BL       os_get_random
0000b4  b160              CBZ      r0,|L14.208|
0000b6  a15b              ADR      r1,|L14.548|
0000b8  2000              MOVS     r0,#0                 ;330
0000ba  f7fffffe          BL       wpa_printf
0000be  2103              MOVS     r1,#3                 ;332
0000c0  4620              MOV      r0,r4                 ;332
0000c2  f7fffffe          BL       eap_gpsk_state
0000c6  4658              MOV      r0,r11                ;333
0000c8  f7fffffe          BL       wpabuf_free
0000cc  2000              MOVS     r0,#0                 ;334
0000ce  e7c1              B        |L14.84|
                  |L14.208|
0000d0  2320              MOVS     r3,#0x20              ;336
0000d2  f1040221          ADD      r2,r4,#0x21           ;336
0000d6  a160              ADR      r1,|L14.600|
0000d8  2000              MOVS     r0,#0                 ;336
0000da  f7fffffe          BL       wpa_hexdump
0000de  2220              MOVS     r2,#0x20              ;338
0000e0  f1040121          ADD      r1,r4,#0x21           ;338
0000e4  4658              MOV      r0,r11                ;338
0000e6  f7fffffe          BL       wpabuf_put_data
0000ea  2220              MOVS     r2,#0x20              ;339
0000ec  1c61              ADDS     r1,r4,#1              ;339
0000ee  4658              MOV      r0,r11                ;339
0000f0  f7fffffe          BL       wpabuf_put_data
0000f4  b2b1              UXTH     r1,r6                 ;341
0000f6  4658              MOV      r0,r11                ;341
0000f8  f7fffffe          BL       wpabuf_put_be16
0000fc  4632              MOV      r2,r6                 ;342
0000fe  4651              MOV      r1,r10                ;342
000100  4658              MOV      r0,r11                ;342
000102  f7fffffe          BL       wpabuf_put_data
000106  2106              MOVS     r1,#6                 ;344
000108  4658              MOV      r0,r11                ;344
00010a  f7fffffe          BL       wpabuf_put
00010e  4605              MOV      r5,r0                 ;344
000110  bf00              NOP                            ;345
000112  f8d40124          LDR      r0,[r4,#0x124]        ;345
000116  0e00              LSRS     r0,r0,#24             ;345
000118  7028              STRB     r0,[r5,#0]            ;345
00011a  f8d40124          LDR      r0,[r4,#0x124]        ;345
00011e  0c00              LSRS     r0,r0,#16             ;345
000120  7068              STRB     r0,[r5,#1]            ;345
000122  f8d40124          LDR      r0,[r4,#0x124]        ;345
000126  0a00              LSRS     r0,r0,#8              ;345
000128  70a8              STRB     r0,[r5,#2]            ;345
00012a  f8d40124          LDR      r0,[r4,#0x124]        ;345
00012e  70e8              STRB     r0,[r5,#3]            ;345
000130  bf00              NOP                            ;345
000132  bf00              NOP                            ;346
000134  f8d40128          LDR      r0,[r4,#0x128]        ;346
000138  0a00              LSRS     r0,r0,#8              ;346
00013a  7128              STRB     r0,[r5,#4]            ;346
00013c  f8d40128          LDR      r0,[r4,#0x128]        ;346
000140  7168              STRB     r0,[r5,#5]            ;346
000142  bf00              NOP                            ;346
000144  f5047384          ADD      r3,r4,#0x108          ;348
000148  f10402e8          ADD      r2,r4,#0xe8           ;348
00014c  1f11              SUBS     r1,r2,#4              ;348
00014e  f10400c1          ADD      r0,r4,#0xc1           ;348
000152  af08              ADD      r7,sp,#0x20           ;348
000154  c70f              STM      r7!,{r0-r3}           ;348
000156  3b87              SUBS     r3,r3,#0x87           ;348
000158  3aa7              SUBS     r2,r2,#0xa7           ;348
00015a  f504708e          ADD      r0,r4,#0x11c          ;348
00015e  c803              LDM      r0,{r0,r1}            ;348
000160  af04              ADD      r7,sp,#0x10           ;348
000162  c70f              STM      r7!,{r0-r3}           ;348
000164  1c61              ADDS     r1,r4,#1              ;348
000166  f1040021          ADD      r0,r4,#0x21           ;348
00016a  f504728a          ADD      r2,r4,#0x114          ;348
00016e  ca0c              LDM      r2,{r2,r3}            ;348
000170  e88d000f          STM      sp,{r0-r3}            ;348
000174  f5047292          ADD      r2,r4,#0x124          ;348
000178  ca0c              LDM      r2,{r2,r3}            ;348
00017a  f5047096          ADD      r0,r4,#0x12c          ;348
00017e  c803              LDM      r0,{r0,r1}            ;348
000180  f7fffffe          BL       eap_gpsk_derive_keys
000184  2800              CMP      r0,#0                 ;348
000186  da0c              BGE      |L14.418|
000188  a138              ADR      r1,|L14.620|
00018a  2000              MOVS     r0,#0                 ;356
00018c  f7fffffe          BL       wpa_printf
000190  2103              MOVS     r1,#3                 ;357
000192  4620              MOV      r0,r4                 ;357
000194  f7fffffe          BL       eap_gpsk_state
000198  4658              MOV      r0,r11                ;358
00019a  f7fffffe          BL       wpabuf_free
00019e  2000              MOVS     r0,#0                 ;359
0001a0  e758              B        |L14.84|
                  |L14.418|
0001a2  2100              MOVS     r1,#0                 ;363
0001a4  4658              MOV      r0,r11                ;363
0001a6  f7fffffe          BL       wpabuf_put_be16
0001aa  4658              MOV      r0,r11                ;365
0001ac  990d              LDR      r1,[sp,#0x34]         ;365
0001ae  f7fffffe          BL       wpabuf_put
0001b2  4607              MOV      r7,r0                 ;365
0001b4  eba70208          SUB      r2,r7,r8              ;366
0001b8  f10404e4          ADD      r4,r4,#0xe4           ;366
0001bc  e9cd8200          STRD     r8,r2,[sp,#0]         ;366
0001c0  9702              STR      r7,[sp,#8]            ;366
0001c2  e9d42310          LDRD     r2,r3,[r4,#0x40]      ;366
0001c6  f85419e4          LDR      r1,[r4],#-0xe4        ;366
0001ca  f10400c1          ADD      r0,r4,#0xc1           ;366
0001ce  f7fffffe          BL       eap_gpsk_compute_mic
0001d2  2800              CMP      r0,#0                 ;366
0001d4  da08              BGE      |L14.488|
0001d6  2103              MOVS     r1,#3                 ;369
0001d8  4620              MOV      r0,r4                 ;369
0001da  f7fffffe          BL       eap_gpsk_state
0001de  4658              MOV      r0,r11                ;370
0001e0  f7fffffe          BL       wpabuf_free
0001e4  2000              MOVS     r0,#0                 ;371
0001e6  e735              B        |L14.84|
                  |L14.488|
0001e8  4658              MOV      r0,r11                ;374
0001ea  e733              B        |L14.84|
;;;376    
                          ENDP

                  |L14.492|
0001ec  4541502d          DCB      "EAP-GPSK: Sending Response/GPSK-2",0
0001f0  4750534b
0001f4  3a205365
0001f8  6e64696e
0001fc  67205265
000200  73706f6e
000204  73652f47
000208  50534b2d
00020c  3200    
00020e  00                DCB      0
00020f  00                DCB      0
                  |L14.528|
000210  4541502d          DCB      "EAP-GPSK: ID_Peer",0
000214  4750534b
000218  3a204944
00021c  5f506565
000220  7200    
000222  00                DCB      0
000223  00                DCB      0
                  |L14.548|
000224  4541502d          DCB      "EAP-GPSK: Failed to get random data for RAND_Peer",0
000228  4750534b
00022c  3a204661
000230  696c6564
000234  20746f20
000238  67657420
00023c  72616e64
000240  6f6d2064
000244  61746120
000248  666f7220
00024c  52414e44
000250  5f506565
000254  7200    
000256  00                DCB      0
000257  00                DCB      0
                  |L14.600|
000258  4541502d          DCB      "EAP-GPSK: RAND_Peer",0
00025c  4750534b
000260  3a205241
000264  4e445f50
000268  65657200
                  |L14.620|
00026c  4541502d          DCB      "EAP-GPSK: Failed to derive keys",0
000270  4750534b
000274  3a204661
000278  696c6564
00027c  20746f20
000280  64657269
000284  7665206b
000288  65797300

                          AREA ||i.eap_gpsk_send_gpsk_4||, CODE, READONLY, ALIGN=2

                  eap_gpsk_send_gpsk_4 PROC
;;;595    
;;;596    static struct wpabuf * eap_gpsk_send_gpsk_4(struct eap_gpsk_data *data,
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;597    					    u8 identifier)
;;;598    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;599    	struct wpabuf *resp;
;;;600    	u8 *rpos, *start;
;;;601    	size_t mlen;
;;;602    
;;;603    	wpa_printf(MSG_DEBUG, "EAP-GPSK: Sending Response/GPSK-4");
000008  a122              ADR      r1,|L15.148|
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       wpa_printf
;;;604    
;;;605    	mlen = eap_gpsk_mic_len(data->vendor, data->specifier);
000010  f5047092          ADD      r0,r4,#0x124
000014  c803              LDM      r0,{r0,r1}
000016  f7fffffe          BL       eap_gpsk_mic_len
00001a  4681              MOV      r9,r0
;;;606    
;;;607    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_GPSK, 1 + 2 + mlen,
00001c  f1090203          ADD      r2,r9,#3
000020  2302              MOVS     r3,#2
000022  2133              MOVS     r1,#0x33
000024  2000              MOVS     r0,#0
000026  9700              STR      r7,[sp,#0]
000028  f7fffffe          BL       eap_msg_alloc
00002c  4680              MOV      r8,r0
;;;608    			     EAP_CODE_RESPONSE, identifier);
;;;609    	if (resp == NULL)
00002e  f1b80f00          CMP      r8,#0
000032  d102              BNE      |L15.58|
;;;610    		return NULL;
000034  2000              MOVS     r0,#0
                  |L15.54|
;;;611    
;;;612    	wpabuf_put_u8(resp, EAP_GPSK_OPCODE_GPSK_4);
;;;613    	start = wpabuf_put(resp, 0);
;;;614    
;;;615    	/* No PD_Payload_3 */
;;;616    	wpabuf_put_be16(resp, 0);
;;;617    
;;;618    	rpos = wpabuf_put(resp, mlen);
;;;619    	if (eap_gpsk_compute_mic(data->sk, data->sk_len, data->vendor,
;;;620    				 data->specifier, start, rpos - start, rpos) <
;;;621    	    0) {
;;;622    		eap_gpsk_state(data, FAILURE);
;;;623    		wpabuf_free(resp);
;;;624    		return NULL;
;;;625    	}
;;;626    
;;;627    	return resp;
;;;628    }
000036  e8bd83fe          POP      {r1-r9,pc}
                  |L15.58|
00003a  2104              MOVS     r1,#4                 ;612
00003c  4640              MOV      r0,r8                 ;612
00003e  f7fffffe          BL       wpabuf_put_u8
000042  2100              MOVS     r1,#0                 ;613
000044  4640              MOV      r0,r8                 ;613
000046  f7fffffe          BL       wpabuf_put
00004a  4606              MOV      r6,r0                 ;613
00004c  2100              MOVS     r1,#0                 ;616
00004e  4640              MOV      r0,r8                 ;616
000050  f7fffffe          BL       wpabuf_put_be16
000054  4649              MOV      r1,r9                 ;618
000056  4640              MOV      r0,r8                 ;618
000058  f7fffffe          BL       wpabuf_put
00005c  4605              MOV      r5,r0                 ;618
00005e  1baa              SUBS     r2,r5,r6              ;619
000060  f10404e4          ADD      r4,r4,#0xe4           ;619
000064  e9cd6200          STRD     r6,r2,[sp,#0]         ;619
000068  9502              STR      r5,[sp,#8]            ;619
00006a  e9d42310          LDRD     r2,r3,[r4,#0x40]      ;619
00006e  f85419e4          LDR      r1,[r4],#-0xe4        ;619
000072  f10400c1          ADD      r0,r4,#0xc1           ;619
000076  f7fffffe          BL       eap_gpsk_compute_mic
00007a  2800              CMP      r0,#0                 ;619
00007c  da08              BGE      |L15.144|
00007e  2103              MOVS     r1,#3                 ;622
000080  4620              MOV      r0,r4                 ;622
000082  f7fffffe          BL       eap_gpsk_state
000086  4640              MOV      r0,r8                 ;623
000088  f7fffffe          BL       wpabuf_free
00008c  2000              MOVS     r0,#0                 ;624
00008e  e7d2              B        |L15.54|
                  |L15.144|
000090  4640              MOV      r0,r8                 ;627
000092  e7d0              B        |L15.54|
;;;629    
                          ENDP

                  |L15.148|
000094  4541502d          DCB      "EAP-GPSK: Sending Response/GPSK-4",0
000098  4750534b
00009c  3a205365
0000a0  6e64696e
0000a4  67205265
0000a8  73706f6e
0000ac  73652f47
0000b0  50534b2d
0000b4  3400    
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.eap_gpsk_state||, CODE, READONLY, ALIGN=2

                  eap_gpsk_state PROC
;;;70     
;;;71     static void eap_gpsk_state(struct eap_gpsk_data *data, int state)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;72     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;73     	wpa_printf(MSG_DEBUG, "EAP-GPSK: %s -> %s",
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       eap_gpsk_state_txt
00000e  4606              MOV      r6,r0
000010  7820              LDRB     r0,[r4,#0]
000012  f7fffffe          BL       eap_gpsk_state_txt
000016  4607              MOV      r7,r0
000018  4633              MOV      r3,r6
00001a  4602              MOV      r2,r0
00001c  a103              ADR      r1,|L16.44|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       wpa_printf
;;;74     		   eap_gpsk_state_txt(data->state),
;;;75     		   eap_gpsk_state_txt(state));
;;;76     	data->state = state;
000024  7025              STRB     r5,[r4,#0]
;;;77     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;78     
                          ENDP

00002a  0000              DCW      0x0000
                  |L16.44|
00002c  4541502d          DCB      "EAP-GPSK: %s -> %s",0
000030  4750534b
000034  3a202573
000038  202d3e20
00003c  257300  
00003f  00                DCB      0

                          AREA ||i.eap_gpsk_state_txt||, CODE, READONLY, ALIGN=2

                  eap_gpsk_state_txt PROC
;;;52     #ifndef CONFIG_NO_STDOUT_DEBUG
;;;53     static const char * eap_gpsk_state_txt(int state)
000000  4601              MOV      r1,r0
;;;54     {
;;;55     	switch (state) {
000002  b131              CBZ      r1,|L17.18|
000004  2901              CMP      r1,#1
000006  d006              BEQ      |L17.22|
000008  2902              CMP      r1,#2
00000a  d006              BEQ      |L17.26|
00000c  2903              CMP      r1,#3
00000e  d108              BNE      |L17.34|
000010  e005              B        |L17.30|
                  |L17.18|
;;;56     	case GPSK_1:
;;;57     		return "GPSK-1";
000012  a005              ADR      r0,|L17.40|
                  |L17.20|
;;;58     	case GPSK_3:
;;;59     		return "GPSK-3";
;;;60     	case SUCCESS:
;;;61     		return "SUCCESS";
;;;62     	case FAILURE:
;;;63     		return "FAILURE";
;;;64     	default:
;;;65     		return "?";
;;;66     	}
;;;67     }
000014  4770              BX       lr
                  |L17.22|
000016  a006              ADR      r0,|L17.48|
000018  e7fc              B        |L17.20|
                  |L17.26|
00001a  a007              ADR      r0,|L17.56|
00001c  e7fa              B        |L17.20|
                  |L17.30|
00001e  a008              ADR      r0,|L17.64|
000020  e7f8              B        |L17.20|
                  |L17.34|
000022  a009              ADR      r0,|L17.72|
000024  e7f6              B        |L17.20|
;;;68     #endif /* CONFIG_NO_STDOUT_DEBUG */
                          ENDP

000026  0000              DCW      0x0000
                  |L17.40|
000028  4750534b          DCB      "GPSK-1",0
00002c  2d3100  
00002f  00                DCB      0
                  |L17.48|
000030  4750534b          DCB      "GPSK-3",0
000034  2d3300  
000037  00                DCB      0
                  |L17.56|
000038  53554343          DCB      "SUCCESS",0
00003c  45535300
                  |L17.64|
000040  4641494c          DCB      "FAILURE",0
000044  55524500
                  |L17.72|
000048  3f00              DCB      "?",0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||i.eap_gpsk_validate_csuite||, CODE, READONLY, ALIGN=2

                  eap_gpsk_validate_csuite PROC
;;;456    
;;;457    static const u8 * eap_gpsk_validate_csuite(struct eap_gpsk_data *data,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;458    					   const u8 *pos, const u8 *end)
;;;459    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4691              MOV      r9,r2
;;;460    	int vendor, specifier;
;;;461    	const struct eap_gpsk_csuite *csuite;
;;;462    
;;;463    	if (pos == NULL)
00000a  b914              CBNZ     r4,|L18.18|
;;;464    		return NULL;
00000c  2000              MOVS     r0,#0
                  |L18.14|
;;;465    
;;;466    	if (end - pos < (int) sizeof(*csuite)) {
;;;467    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Message too short for "
;;;468    			   "CSuite_Sel");
;;;469    		return NULL;
;;;470    	}
;;;471    	csuite = (const struct eap_gpsk_csuite *) pos;
;;;472    	vendor = WPA_GET_BE32(csuite->vendor);
;;;473    	specifier = WPA_GET_BE16(csuite->specifier);
;;;474    	pos += sizeof(*csuite);
;;;475    	if (vendor != data->vendor || specifier != data->specifier) {
;;;476    		wpa_printf(MSG_DEBUG, "EAP-GPSK: CSuite_Sel (%d:%d) does not "
;;;477    			   "match with the one sent in GPSK-2 (%d:%d)",
;;;478    			   vendor, specifier, data->vendor, data->specifier);
;;;479    		return NULL;
;;;480    	}
;;;481    
;;;482    	return pos;
;;;483    }
00000e  e8bd87fc          POP      {r2-r10,pc}
                  |L18.18|
000012  eba90004          SUB      r0,r9,r4              ;466
000016  2806              CMP      r0,#6                 ;466
000018  da05              BGE      |L18.38|
00001a  a117              ADR      r1,|L18.120|
00001c  2000              MOVS     r0,#0                 ;467
00001e  f7fffffe          BL       wpa_printf
000022  2000              MOVS     r0,#0                 ;469
000024  e7f3              B        |L18.14|
                  |L18.38|
000026  4625              MOV      r5,r4                 ;471
000028  7828              LDRB     r0,[r5,#0]            ;472
00002a  0600              LSLS     r0,r0,#24             ;472
00002c  7869              LDRB     r1,[r5,#1]            ;472
00002e  ea404001          ORR      r0,r0,r1,LSL #16      ;472
000032  78a9              LDRB     r1,[r5,#2]            ;472
000034  ea402001          ORR      r0,r0,r1,LSL #8       ;472
000038  78e9              LDRB     r1,[r5,#3]            ;472
00003a  ea400801          ORR      r8,r0,r1              ;472
00003e  462c              MOV      r4,r5                 ;473
000040  7968              LDRB     r0,[r5,#5]            ;473
000042  7929              LDRB     r1,[r5,#4]            ;473
000044  ea402701          ORR      r7,r0,r1,LSL #8       ;473
000048  1da4              ADDS     r4,r4,#6              ;474
00004a  f8d60124          LDR      r0,[r6,#0x124]        ;475
00004e  4540              CMP      r0,r8                 ;475
000050  d103              BNE      |L18.90|
000052  f8d60128          LDR      r0,[r6,#0x128]        ;475
000056  42b8              CMP      r0,r7                 ;475
000058  d00c              BEQ      |L18.116|
                  |L18.90|
00005a  f5067292          ADD      r2,r6,#0x124          ;476
00005e  ca0c              LDM      r2,{r2,r3}            ;476
000060  e9cd2300          STRD     r2,r3,[sp,#0]         ;476
000064  463b              MOV      r3,r7                 ;476
000066  4642              MOV      r2,r8                 ;476
000068  490e              LDR      r1,|L18.164|
00006a  2000              MOVS     r0,#0                 ;476
00006c  f7fffffe          BL       wpa_printf
000070  2000              MOVS     r0,#0                 ;479
000072  e7cc              B        |L18.14|
                  |L18.116|
000074  4620              MOV      r0,r4                 ;482
000076  e7ca              B        |L18.14|
;;;484    
                          ENDP

                  |L18.120|
000078  4541502d          DCB      "EAP-GPSK: Message too short for CSuite_Sel",0
00007c  4750534b
000080  3a204d65
000084  73736167
000088  6520746f
00008c  6f207368
000090  6f727420
000094  666f7220
000098  43537569
00009c  74655f53
0000a0  656c00  
0000a3  00                DCB      0
                  |L18.164|
                          DCD      ||.constdata||

                          AREA ||i.eap_gpsk_validate_gpsk_3_mic||, CODE, READONLY, ALIGN=2

                  eap_gpsk_validate_gpsk_3_mic PROC
;;;512    
;;;513    static const u8 * eap_gpsk_validate_gpsk_3_mic(struct eap_gpsk_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;514    					       const u8 *payload,
;;;515    					       const u8 *pos, const u8 *end)
;;;516    {
000004  b08c              SUB      sp,sp,#0x30
000006  4605              MOV      r5,r0
000008  4688              MOV      r8,r1
00000a  4614              MOV      r4,r2
00000c  461f              MOV      r7,r3
;;;517    	size_t miclen;
;;;518    	u8 mic[EAP_GPSK_MAX_MIC_LEN];
;;;519    
;;;520    	if (pos == NULL)
00000e  b91c              CBNZ     r4,|L19.24|
;;;521    		return NULL;
000010  2000              MOVS     r0,#0
                  |L19.18|
;;;522    
;;;523    	miclen = eap_gpsk_mic_len(data->vendor, data->specifier);
;;;524    	if (end - pos < (int) miclen) {
;;;525    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Message too short for MIC "
;;;526    			   "(left=%lu miclen=%lu)",
;;;527    			   (unsigned long) (end - pos),
;;;528    			   (unsigned long) miclen);
;;;529    		return NULL;
;;;530    	}
;;;531    	if (eap_gpsk_compute_mic(data->sk, data->sk_len, data->vendor,
;;;532    				 data->specifier, payload, pos - payload, mic)
;;;533    	    < 0) {
;;;534    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Failed to compute MIC");
;;;535    		return NULL;
;;;536    	}
;;;537    	if (os_memcmp(mic, pos, miclen) != 0) {
;;;538    		wpa_printf(MSG_INFO, "EAP-GPSK: Incorrect MIC in GPSK-3");
;;;539    		wpa_hexdump(MSG_DEBUG, "EAP-GPSK: Received MIC", pos, miclen);
;;;540    		wpa_hexdump(MSG_DEBUG, "EAP-GPSK: Computed MIC", mic, miclen);
;;;541    		return NULL;
;;;542    	}
;;;543    	pos += miclen;
;;;544    
;;;545    	return pos;
;;;546    }
000012  b00c              ADD      sp,sp,#0x30
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L19.24|
000018  f5057092          ADD      r0,r5,#0x124          ;523
00001c  c803              LDM      r0,{r0,r1}            ;523
00001e  f7fffffe          BL       eap_gpsk_mic_len
000022  4606              MOV      r6,r0                 ;523
000024  1b39              SUBS     r1,r7,r4              ;524
000026  42b1              CMP      r1,r6                 ;524
000028  da07              BGE      |L19.58|
00002a  1b3a              SUBS     r2,r7,r4              ;525
00002c  4633              MOV      r3,r6                 ;525
00002e  a11c              ADR      r1,|L19.160|
000030  2000              MOVS     r0,#0                 ;525
000032  f7fffffe          BL       wpa_printf
000036  2000              MOVS     r0,#0                 ;529
000038  e7eb              B        |L19.18|
                  |L19.58|
00003a  ab04              ADD      r3,sp,#0x10           ;531
00003c  eba40208          SUB      r2,r4,r8              ;531
000040  f10505e4          ADD      r5,r5,#0xe4           ;531
000044  e9cd8200          STRD     r8,r2,[sp,#0]         ;531
000048  9302              STR      r3,[sp,#8]            ;531
00004a  e9d52310          LDRD     r2,r3,[r5,#0x40]      ;531
00004e  f85519e4          LDR      r1,[r5],#-0xe4        ;531
000052  f10500c1          ADD      r0,r5,#0xc1           ;531
000056  f7fffffe          BL       eap_gpsk_compute_mic
00005a  2800              CMP      r0,#0                 ;531
00005c  da05              BGE      |L19.106|
00005e  a11f              ADR      r1,|L19.220|
000060  2000              MOVS     r0,#0                 ;534
000062  f7fffffe          BL       wpa_printf
000066  2000              MOVS     r0,#0                 ;535
000068  e7d3              B        |L19.18|
                  |L19.106|
00006a  4632              MOV      r2,r6                 ;537
00006c  4621              MOV      r1,r4                 ;537
00006e  a804              ADD      r0,sp,#0x10           ;537
000070  f7fffffe          BL       os_memcmp
000074  b188              CBZ      r0,|L19.154|
000076  a121              ADR      r1,|L19.252|
000078  2000              MOVS     r0,#0                 ;538
00007a  f7fffffe          BL       wpa_printf
00007e  4633              MOV      r3,r6                 ;539
000080  4622              MOV      r2,r4                 ;539
000082  a127              ADR      r1,|L19.288|
000084  2000              MOVS     r0,#0                 ;539
000086  f7fffffe          BL       wpa_hexdump
00008a  4633              MOV      r3,r6                 ;540
00008c  aa04              ADD      r2,sp,#0x10           ;540
00008e  a12a              ADR      r1,|L19.312|
000090  2000              MOVS     r0,#0                 ;540
000092  f7fffffe          BL       wpa_hexdump
000096  2000              MOVS     r0,#0                 ;541
000098  e7bb              B        |L19.18|
                  |L19.154|
00009a  4434              ADD      r4,r4,r6              ;543
00009c  4620              MOV      r0,r4                 ;545
00009e  e7b8              B        |L19.18|
;;;547    
                          ENDP

                  |L19.160|
0000a0  4541502d          DCB      "EAP-GPSK: Message too short for MIC (left=%lu miclen=%l"
0000a4  4750534b
0000a8  3a204d65
0000ac  73736167
0000b0  6520746f
0000b4  6f207368
0000b8  6f727420
0000bc  666f7220
0000c0  4d494320
0000c4  286c6566
0000c8  743d256c
0000cc  75206d69
0000d0  636c656e
0000d4  3d256c  
0000d7  752900            DCB      "u)",0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L19.220|
0000dc  4541502d          DCB      "EAP-GPSK: Failed to compute MIC",0
0000e0  4750534b
0000e4  3a204661
0000e8  696c6564
0000ec  20746f20
0000f0  636f6d70
0000f4  75746520
0000f8  4d494300
                  |L19.252|
0000fc  4541502d          DCB      "EAP-GPSK: Incorrect MIC in GPSK-3",0
000100  4750534b
000104  3a20496e
000108  636f7272
00010c  65637420
000110  4d494320
000114  696e2047
000118  50534b2d
00011c  3300    
00011e  00                DCB      0
00011f  00                DCB      0
                  |L19.288|
000120  4541502d          DCB      "EAP-GPSK: Received MIC",0
000124  4750534b
000128  3a205265
00012c  63656976
000130  6564204d
000134  494300  
000137  00                DCB      0
                  |L19.312|
000138  4541502d          DCB      "EAP-GPSK: Computed MIC",0
00013c  4750534b
000140  3a20436f
000144  6d707574
000148  6564204d
00014c  494300  
00014f  00                DCB      0

                          AREA ||i.eap_gpsk_validate_id_server||, CODE, READONLY, ALIGN=2

                  eap_gpsk_validate_id_server PROC
;;;416    
;;;417    static const u8 * eap_gpsk_validate_id_server(struct eap_gpsk_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;418    					      const u8 *pos, const u8 *end)
;;;419    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;420    	size_t len;
;;;421    
;;;422    	if (pos == NULL)
00000a  b914              CBNZ     r4,|L20.18|
;;;423    		return NULL;
00000c  2000              MOVS     r0,#0
                  |L20.14|
;;;424    
;;;425    	if (end - pos < (int) 2) {
;;;426    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Message too short for "
;;;427    			   "length(ID_Server)");
;;;428    		return NULL;
;;;429    	}
;;;430    
;;;431    	len = WPA_GET_BE16(pos);
;;;432    	pos += 2;
;;;433    
;;;434    	if (end - pos < (int) len) {
;;;435    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Message too short for "
;;;436    			   "ID_Server");
;;;437    		return NULL;
;;;438    	}
;;;439    
;;;440    	if (len != data->id_server_len ||
;;;441    	    os_memcmp(pos, data->id_server, len) != 0) {
;;;442    		wpa_printf(MSG_INFO, "EAP-GPSK: ID_Server did not match with "
;;;443    			   "the one used in GPSK-1");
;;;444    		wpa_hexdump_ascii(MSG_DEBUG, "EAP-GPSK: ID_Server in GPSK-1",
;;;445    				  data->id_server, data->id_server_len);
;;;446    		wpa_hexdump_ascii(MSG_DEBUG, "EAP-GPSK: ID_Server in GPSK-3",
;;;447    				  pos, len);
;;;448    		return NULL;
;;;449    	}
;;;450    
;;;451    	pos += len;
;;;452    
;;;453    	return pos;
;;;454    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L20.18|
000012  1b38              SUBS     r0,r7,r4              ;425
000014  2802              CMP      r0,#2                 ;425
000016  da05              BGE      |L20.36|
000018  a11a              ADR      r1,|L20.132|
00001a  2000              MOVS     r0,#0                 ;426
00001c  f7fffffe          BL       wpa_printf
000020  2000              MOVS     r0,#0                 ;428
000022  e7f4              B        |L20.14|
                  |L20.36|
000024  7860              LDRB     r0,[r4,#1]            ;431
000026  7821              LDRB     r1,[r4,#0]            ;431
000028  ea402501          ORR      r5,r0,r1,LSL #8       ;431
00002c  1ca4              ADDS     r4,r4,#2              ;432
00002e  1b38              SUBS     r0,r7,r4              ;434
000030  42a8              CMP      r0,r5                 ;434
000032  da05              BGE      |L20.64|
000034  a120              ADR      r1,|L20.184|
000036  2000              MOVS     r0,#0                 ;435
000038  f7fffffe          BL       wpa_printf
00003c  2000              MOVS     r0,#0                 ;437
00003e  e7e6              B        |L20.14|
                  |L20.64|
000040  f8d60120          LDR      r0,[r6,#0x120]        ;440
000044  42a8              CMP      r0,r5                 ;440
000046  d106              BNE      |L20.86|
000048  462a              MOV      r2,r5                 ;441
00004a  4620              MOV      r0,r4                 ;441
00004c  f8d6111c          LDR      r1,[r6,#0x11c]        ;441
000050  f7fffffe          BL       os_memcmp
000054  b190              CBZ      r0,|L20.124|
                  |L20.86|
000056  a123              ADR      r1,|L20.228|
000058  2000              MOVS     r0,#0                 ;442
00005a  f7fffffe          BL       wpa_printf
00005e  a131              ADR      r1,|L20.292|
000060  2000              MOVS     r0,#0                 ;444
000062  f506728e          ADD      r2,r6,#0x11c          ;444
000066  ca0c              LDM      r2,{r2,r3}            ;444
000068  f7fffffe          BL       wpa_hexdump_ascii
00006c  462b              MOV      r3,r5                 ;446
00006e  4622              MOV      r2,r4                 ;446
000070  a134              ADR      r1,|L20.324|
000072  2000              MOVS     r0,#0                 ;446
000074  f7fffffe          BL       wpa_hexdump_ascii
000078  2000              MOVS     r0,#0                 ;448
00007a  e7c8              B        |L20.14|
                  |L20.124|
00007c  442c              ADD      r4,r4,r5              ;451
00007e  4620              MOV      r0,r4                 ;453
000080  e7c5              B        |L20.14|
;;;455    
                          ENDP

000082  0000              DCW      0x0000
                  |L20.132|
000084  4541502d          DCB      "EAP-GPSK: Message too short for length(ID_Server)",0
000088  4750534b
00008c  3a204d65
000090  73736167
000094  6520746f
000098  6f207368
00009c  6f727420
0000a0  666f7220
0000a4  6c656e67
0000a8  74682849
0000ac  445f5365
0000b0  72766572
0000b4  2900    
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L20.184|
0000b8  4541502d          DCB      "EAP-GPSK: Message too short for ID_Server",0
0000bc  4750534b
0000c0  3a204d65
0000c4  73736167
0000c8  6520746f
0000cc  6f207368
0000d0  6f727420
0000d4  666f7220
0000d8  49445f53
0000dc  65727665
0000e0  7200    
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L20.228|
0000e4  4541502d          DCB      "EAP-GPSK: ID_Server did not match with the one used in "
0000e8  4750534b
0000ec  3a204944
0000f0  5f536572
0000f4  76657220
0000f8  64696420
0000fc  6e6f7420
000100  6d617463
000104  68207769
000108  74682074
00010c  6865206f
000110  6e652075
000114  73656420
000118  696e20  
00011b  4750534b          DCB      "GPSK-1",0
00011f  2d3100  
000122  00                DCB      0
000123  00                DCB      0
                  |L20.292|
000124  4541502d          DCB      "EAP-GPSK: ID_Server in GPSK-1",0
000128  4750534b
00012c  3a204944
000130  5f536572
000134  76657220
000138  696e2047
00013c  50534b2d
000140  3100    
000142  00                DCB      0
000143  00                DCB      0
                  |L20.324|
000144  4541502d          DCB      "EAP-GPSK: ID_Server in GPSK-3",0
000148  4750534b
00014c  3a204944
000150  5f536572
000154  76657220
000158  696e2047
00015c  50534b2d
000160  3300    
000162  00                DCB      0
000163  00                DCB      0

                          AREA ||i.eap_gpsk_validate_pd_payload_2||, CODE, READONLY, ALIGN=2

                  eap_gpsk_validate_pd_payload_2 PROC
;;;485    
;;;486    static const u8 * eap_gpsk_validate_pd_payload_2(struct eap_gpsk_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;487    						 const u8 *pos, const u8 *end)
;;;488    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;489    	u16 alen;
;;;490    
;;;491    	if (pos == NULL)
00000a  b914              CBNZ     r4,|L21.18|
;;;492    		return NULL;
00000c  2000              MOVS     r0,#0
                  |L21.14|
;;;493    
;;;494    	if (end - pos < 2) {
;;;495    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Message too short for "
;;;496    			   "PD_Payload_2 length");
;;;497    		return NULL;
;;;498    	}
;;;499    	alen = WPA_GET_BE16(pos);
;;;500    	pos += 2;
;;;501    	if (end - pos < alen) {
;;;502    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Message too short for "
;;;503    			   "%d-octet PD_Payload_2", alen);
;;;504    		return NULL;
;;;505    	}
;;;506    	wpa_hexdump(MSG_DEBUG, "EAP-GPSK: PD_Payload_2", pos, alen);
;;;507    	pos += alen;
;;;508    
;;;509    	return pos;
;;;510    }
00000e  e8bd81f0          POP      {r4-r8,pc}
                  |L21.18|
000012  1b30              SUBS     r0,r6,r4              ;494
000014  2802              CMP      r0,#2                 ;494
000016  da05              BGE      |L21.36|
000018  a10e              ADR      r1,|L21.84|
00001a  2000              MOVS     r0,#0                 ;495
00001c  f7fffffe          BL       wpa_printf
000020  2000              MOVS     r0,#0                 ;497
000022  e7f4              B        |L21.14|
                  |L21.36|
000024  7860              LDRB     r0,[r4,#1]            ;499
000026  7821              LDRB     r1,[r4,#0]            ;499
000028  ea402501          ORR      r5,r0,r1,LSL #8       ;499
00002c  1ca4              ADDS     r4,r4,#2              ;500
00002e  1b30              SUBS     r0,r6,r4              ;501
000030  42a8              CMP      r0,r5                 ;501
000032  da06              BGE      |L21.66|
000034  462a              MOV      r2,r5                 ;502
000036  a114              ADR      r1,|L21.136|
000038  2000              MOVS     r0,#0                 ;502
00003a  f7fffffe          BL       wpa_printf
00003e  2000              MOVS     r0,#0                 ;504
000040  e7e5              B        |L21.14|
                  |L21.66|
000042  462b              MOV      r3,r5                 ;506
000044  4622              MOV      r2,r4                 ;506
000046  a11e              ADR      r1,|L21.192|
000048  2000              MOVS     r0,#0                 ;506
00004a  f7fffffe          BL       wpa_hexdump
00004e  442c              ADD      r4,r4,r5              ;507
000050  4620              MOV      r0,r4                 ;509
000052  e7dc              B        |L21.14|
;;;511    
                          ENDP

                  |L21.84|
000054  4541502d          DCB      "EAP-GPSK: Message too short for PD_Payload_2 length",0
000058  4750534b
00005c  3a204d65
000060  73736167
000064  6520746f
000068  6f207368
00006c  6f727420
000070  666f7220
000074  50445f50
000078  61796c6f
00007c  61645f32
000080  206c656e
000084  67746800
                  |L21.136|
000088  4541502d          DCB      "EAP-GPSK: Message too short for %d-octet PD_Payload_2",0
00008c  4750534b
000090  3a204d65
000094  73736167
000098  6520746f
00009c  6f207368
0000a0  6f727420
0000a4  666f7220
0000a8  25642d6f
0000ac  63746574
0000b0  2050445f
0000b4  5061796c
0000b8  6f61645f
0000bc  3200    
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L21.192|
0000c0  4541502d          DCB      "EAP-GPSK: PD_Payload_2",0
0000c4  4750534b
0000c8  3a205044
0000cc  5f506179
0000d0  6c6f6164
0000d4  5f3200  
0000d7  00                DCB      0

                          AREA ||i.eap_gpsk_validate_rand||, CODE, READONLY, ALIGN=2

                  eap_gpsk_validate_rand PROC
;;;377    
;;;378    static const u8 * eap_gpsk_validate_rand(struct eap_gpsk_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;379    					 const u8 *pos, const u8 *end)
;;;380    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
;;;381    	if (end - pos < EAP_GPSK_RAND_LEN) {
000008  1b30              SUBS     r0,r6,r4
00000a  2820              CMP      r0,#0x20
00000c  da05              BGE      |L22.26|
;;;382    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Message too short for "
00000e  a122              ADR      r1,|L22.152|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       wpa_printf
;;;383    			   "RAND_Peer");
;;;384    		return NULL;
000016  2000              MOVS     r0,#0
                  |L22.24|
;;;385    	}
;;;386    	if (os_memcmp(pos, data->rand_peer, EAP_GPSK_RAND_LEN) != 0) {
;;;387    		wpa_printf(MSG_DEBUG, "EAP-GPSK: RAND_Peer in GPSK-2 and "
;;;388    			   "GPSK-3 did not match");
;;;389    		wpa_hexdump(MSG_DEBUG, "EAP-GPSK: RAND_Peer in GPSK-2",
;;;390    			    data->rand_peer, EAP_GPSK_RAND_LEN);
;;;391    		wpa_hexdump(MSG_DEBUG, "EAP-GPSK: RAND_Peer in GPSK-3",
;;;392    			    pos, EAP_GPSK_RAND_LEN);
;;;393    		return NULL;
;;;394    	}
;;;395    	pos += EAP_GPSK_RAND_LEN;
;;;396    
;;;397    	if (end - pos < EAP_GPSK_RAND_LEN) {
;;;398    		wpa_printf(MSG_DEBUG, "EAP-GPSK: Message too short for "
;;;399    			   "RAND_Server");
;;;400    		return NULL;
;;;401    	}
;;;402    	if (os_memcmp(pos, data->rand_server, EAP_GPSK_RAND_LEN) != 0) {
;;;403    		wpa_printf(MSG_DEBUG, "EAP-GPSK: RAND_Server in GPSK-1 and "
;;;404    			   "GPSK-3 did not match");
;;;405    		wpa_hexdump(MSG_DEBUG, "EAP-GPSK: RAND_Server in GPSK-1",
;;;406    			    data->rand_server, EAP_GPSK_RAND_LEN);
;;;407    		wpa_hexdump(MSG_DEBUG, "EAP-GPSK: RAND_Server in GPSK-3",
;;;408    			    pos, EAP_GPSK_RAND_LEN);
;;;409    		return NULL;
;;;410    	}
;;;411    	pos += EAP_GPSK_RAND_LEN;
;;;412    
;;;413    	return pos;
;;;414    }
000018  bd70              POP      {r4-r6,pc}
                  |L22.26|
00001a  2220              MOVS     r2,#0x20              ;386
00001c  f1050121          ADD      r1,r5,#0x21           ;386
000020  4620              MOV      r0,r4                 ;386
000022  f7fffffe          BL       os_memcmp
000026  b190              CBZ      r0,|L22.78|
000028  a126              ADR      r1,|L22.196|
00002a  2000              MOVS     r0,#0                 ;387
00002c  f7fffffe          BL       wpa_printf
000030  2320              MOVS     r3,#0x20              ;389
000032  f1050221          ADD      r2,r5,#0x21           ;389
000036  a131              ADR      r1,|L22.252|
000038  2000              MOVS     r0,#0                 ;389
00003a  f7fffffe          BL       wpa_hexdump
00003e  2320              MOVS     r3,#0x20              ;391
000040  4622              MOV      r2,r4                 ;391
000042  a136              ADR      r1,|L22.284|
000044  2000              MOVS     r0,#0                 ;391
000046  f7fffffe          BL       wpa_hexdump
00004a  2000              MOVS     r0,#0                 ;393
00004c  e7e4              B        |L22.24|
                  |L22.78|
00004e  3420              ADDS     r4,r4,#0x20           ;395
000050  1b30              SUBS     r0,r6,r4              ;397
000052  2820              CMP      r0,#0x20              ;397
000054  da05              BGE      |L22.98|
000056  a139              ADR      r1,|L22.316|
000058  2000              MOVS     r0,#0                 ;398
00005a  f7fffffe          BL       wpa_printf
00005e  2000              MOVS     r0,#0                 ;400
000060  e7da              B        |L22.24|
                  |L22.98|
000062  2220              MOVS     r2,#0x20              ;402
000064  1c69              ADDS     r1,r5,#1              ;402
000066  4620              MOV      r0,r4                 ;402
000068  f7fffffe          BL       os_memcmp
00006c  b188              CBZ      r0,|L22.146|
00006e  a13e              ADR      r1,|L22.360|
000070  2000              MOVS     r0,#0                 ;403
000072  f7fffffe          BL       wpa_printf
000076  2320              MOVS     r3,#0x20              ;405
000078  1c6a              ADDS     r2,r5,#1              ;405
00007a  a14a              ADR      r1,|L22.420|
00007c  2000              MOVS     r0,#0                 ;405
00007e  f7fffffe          BL       wpa_hexdump
000082  2320              MOVS     r3,#0x20              ;407
000084  4622              MOV      r2,r4                 ;407
000086  a14f              ADR      r1,|L22.452|
000088  2000              MOVS     r0,#0                 ;407
00008a  f7fffffe          BL       wpa_hexdump
00008e  2000              MOVS     r0,#0                 ;409
000090  e7c2              B        |L22.24|
                  |L22.146|
000092  3420              ADDS     r4,r4,#0x20           ;411
000094  4620              MOV      r0,r4                 ;413
000096  e7bf              B        |L22.24|
;;;415    
                          ENDP

                  |L22.152|
000098  4541502d          DCB      "EAP-GPSK: Message too short for RAND_Peer",0
00009c  4750534b
0000a0  3a204d65
0000a4  73736167
0000a8  6520746f
0000ac  6f207368
0000b0  6f727420
0000b4  666f7220
0000b8  52414e44
0000bc  5f506565
0000c0  7200    
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L22.196|
0000c4  4541502d          DCB      "EAP-GPSK: RAND_Peer in GPSK-2 and GPSK-3 did not match",0
0000c8  4750534b
0000cc  3a205241
0000d0  4e445f50
0000d4  65657220
0000d8  696e2047
0000dc  50534b2d
0000e0  3220616e
0000e4  64204750
0000e8  534b2d33
0000ec  20646964
0000f0  206e6f74
0000f4  206d6174
0000f8  636800  
0000fb  00                DCB      0
                  |L22.252|
0000fc  4541502d          DCB      "EAP-GPSK: RAND_Peer in GPSK-2",0
000100  4750534b
000104  3a205241
000108  4e445f50
00010c  65657220
000110  696e2047
000114  50534b2d
000118  3200    
00011a  00                DCB      0
00011b  00                DCB      0
                  |L22.284|
00011c  4541502d          DCB      "EAP-GPSK: RAND_Peer in GPSK-3",0
000120  4750534b
000124  3a205241
000128  4e445f50
00012c  65657220
000130  696e2047
000134  50534b2d
000138  3300    
00013a  00                DCB      0
00013b  00                DCB      0
                  |L22.316|
00013c  4541502d          DCB      "EAP-GPSK: Message too short for RAND_Server",0
000140  4750534b
000144  3a204d65
000148  73736167
00014c  6520746f
000150  6f207368
000154  6f727420
000158  666f7220
00015c  52414e44
000160  5f536572
000164  76657200
                  |L22.360|
000168  4541502d          DCB      "EAP-GPSK: RAND_Server in GPSK-1 and GPSK-3 did not matc"
00016c  4750534b
000170  3a205241
000174  4e445f53
000178  65727665
00017c  7220696e
000180  20475053
000184  4b2d3120
000188  616e6420
00018c  4750534b
000190  2d332064
000194  6964206e
000198  6f74206d
00019c  617463  
00019f  6800              DCB      "h",0
0001a1  00                DCB      0
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L22.420|
0001a4  4541502d          DCB      "EAP-GPSK: RAND_Server in GPSK-1",0
0001a8  4750534b
0001ac  3a205241
0001b0  4e445f53
0001b4  65727665
0001b8  7220696e
0001bc  20475053
0001c0  4b2d3100
                  |L22.452|
0001c4  4541502d          DCB      "EAP-GPSK: RAND_Server in GPSK-3",0
0001c8  4750534b
0001cc  3a205241
0001d0  4e445f53
0001d4  65727665
0001d8  7220696e
0001dc  20475053
0001e0  4b2d3300

                          AREA ||i.eap_peer_gpsk_register||, CODE, READONLY, ALIGN=2

                  eap_peer_gpsk_register PROC
;;;715    
;;;716    int eap_peer_gpsk_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;717    {
;;;718    	struct eap_method *eap;
;;;719    	int ret;
;;;720    
;;;721    	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a310              ADR      r3,|L23.68|
000004  2233              MOVS     r2,#0x33
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;722    				    EAP_VENDOR_IETF, EAP_TYPE_GPSK, "GPSK");
;;;723    	if (eap == NULL)
000010  b914              CBNZ     r4,|L23.24|
;;;724    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L23.22|
;;;725    
;;;726    	eap->init = eap_gpsk_init;
;;;727    	eap->deinit = eap_gpsk_deinit;
;;;728    	eap->process = eap_gpsk_process;
;;;729    	eap->isKeyAvailable = eap_gpsk_isKeyAvailable;
;;;730    	eap->getKey = eap_gpsk_getKey;
;;;731    	eap->get_emsk = eap_gpsk_get_emsk;
;;;732    
;;;733    	ret = eap_peer_method_register(eap);
;;;734    	if (ret)
;;;735    		eap_peer_method_free(eap);
;;;736    	return ret;
;;;737    }
000016  bd70              POP      {r4-r6,pc}
                  |L23.24|
000018  480c              LDR      r0,|L23.76|
00001a  60e0              STR      r0,[r4,#0xc]          ;726
00001c  480c              LDR      r0,|L23.80|
00001e  6120              STR      r0,[r4,#0x10]         ;727
000020  480c              LDR      r0,|L23.84|
000022  6160              STR      r0,[r4,#0x14]         ;728
000024  480c              LDR      r0,|L23.88|
000026  61a0              STR      r0,[r4,#0x18]         ;729
000028  480c              LDR      r0,|L23.92|
00002a  61e0              STR      r0,[r4,#0x1c]         ;730
00002c  480c              LDR      r0,|L23.96|
00002e  6420              STR      r0,[r4,#0x40]         ;731
000030  4620              MOV      r0,r4                 ;733
000032  f7fffffe          BL       eap_peer_method_register
000036  4605              MOV      r5,r0                 ;733
000038  b115              CBZ      r5,|L23.64|
00003a  4620              MOV      r0,r4                 ;735
00003c  f7fffffe          BL       eap_peer_method_free
                  |L23.64|
000040  4628              MOV      r0,r5                 ;736
000042  e7e8              B        |L23.22|
                          ENDP

                  |L23.68|
000044  4750534b          DCB      "GPSK",0
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L23.76|
                          DCD      eap_gpsk_init
                  |L23.80|
                          DCD      eap_gpsk_deinit
                  |L23.84|
                          DCD      eap_gpsk_process
                  |L23.88|
                          DCD      eap_gpsk_isKeyAvailable
                  |L23.92|
                          DCD      eap_gpsk_getKey
                  |L23.96|
                          DCD      eap_gpsk_get_emsk

                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L26.30|
00001a  2001              MOVS     r0,#1
                  |L26.28|
;;;495    }
00001c  4770              BX       lr
                  |L26.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L26.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L31.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L31.14|
                  |L31.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L31.12|
;;;70     }
00000c  4770              BX       lr
                  |L31.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L31.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L32.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L32.16|
                  |L32.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L32.14|
;;;76     }
00000e  4770              BX       lr
                  |L32.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L32.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L33.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L33.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L33.18|
                  |L33.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L33.16|
;;;57     }
000010  4770              BX       lr
                  |L33.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L33.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L34.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L34.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L34.20|
                  |L34.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L34.18|
;;;64     }
000012  4770              BX       lr
                  |L34.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L34.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L35.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L35.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L35.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L35.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L38.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L38.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L38.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L38.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L44.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L44.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  4750534b          DCB      0x47,0x50,0x53,0x4b
000008  3a204353          DCB      0x3a,0x20,0x43,0x53
00000c  75697465          DCB      0x75,0x69,0x74,0x65
000010  5f53656c          DCB      0x5f,0x53,0x65,0x6c
000014  20282564          DCB      0x20,0x28,0x25,0x64
000018  3a256429          DCB      0x3a,0x25,0x64,0x29
00001c  20646f65          DCB      0x20,0x64,0x6f,0x65
000020  73206e6f          DCB      0x73,0x20,0x6e,0x6f
000024  74206d61          DCB      0x74,0x20,0x6d,0x61
000028  74636820          DCB      0x74,0x63,0x68,0x20
00002c  77697468          DCB      0x77,0x69,0x74,0x68
000030  20746865          DCB      0x20,0x74,0x68,0x65
000034  206f6e65          DCB      0x20,0x6f,0x6e,0x65
000038  2073656e          DCB      0x20,0x73,0x65,0x6e
00003c  7420696e          DCB      0x74,0x20,0x69,0x6e
000040  20475053          DCB      0x20,0x47,0x50,0x53
000044  4b2d3220          DCB      0x4b,0x2d,0x32,0x20
000048  2825643a          DCB      0x28,0x25,0x64,0x3a
00004c  25642900          DCB      0x25,0x64,0x29,0x00
