; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_pax_common.o --depend=.\obj\eap_pax_common.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_pax_common.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_common\eap_pax_common.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_pax_initial_key_derivation||, CODE, READONLY, ALIGN=2

                  eap_pax_initial_key_derivation PROC
;;;131     */
;;;132    int eap_pax_initial_key_derivation(u8 mac_id, const u8 *ak, const u8 *e,
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;133    				   u8 *mk, u8 *ck, u8 *ick)
;;;134    {
000004  4681              MOV      r9,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
00000c  e9dd780c          LDRD     r7,r8,[sp,#0x30]
;;;135    	wpa_printf(MSG_DEBUG, "EAP-PAX: initial key derivation");
000010  a122              ADR      r1,|L2.156|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;136    	if (eap_pax_kdf(mac_id, ak, EAP_PAX_AK_LEN, "Master Key",
000018  2210              MOVS     r2,#0x10
00001a  2140              MOVS     r1,#0x40
00001c  a327              ADR      r3,|L2.188|
00001e  e9cd6100          STRD     r6,r1,[sp,#0]
000022  e9cd2402          STRD     r2,r4,[sp,#8]
000026  4629              MOV      r1,r5
000028  4648              MOV      r0,r9
00002a  f7fffffe          BL       eap_pax_kdf
00002e  b9b0              CBNZ     r0,|L2.94|
;;;137    			e, 2 * EAP_PAX_RAND_LEN, EAP_PAX_MK_LEN, mk) ||
;;;138    	    eap_pax_kdf(mac_id, mk, EAP_PAX_MK_LEN, "Confirmation Key",
000030  2210              MOVS     r2,#0x10
000032  2140              MOVS     r1,#0x40
000034  a324              ADR      r3,|L2.200|
000036  a801              ADD      r0,sp,#4
000038  c086              STM      r0!,{r1,r2,r7}
00003a  9600              STR      r6,[sp,#0]
00003c  4621              MOV      r1,r4
00003e  4648              MOV      r0,r9
000040  f7fffffe          BL       eap_pax_kdf
000044  b958              CBNZ     r0,|L2.94|
;;;139    			e, 2 * EAP_PAX_RAND_LEN, EAP_PAX_CK_LEN, ck) ||
;;;140    	    eap_pax_kdf(mac_id, mk, EAP_PAX_MK_LEN, "Integrity Check Key",
000046  2210              MOVS     r2,#0x10
000048  2140              MOVS     r1,#0x40
00004a  a324              ADR      r3,|L2.220|
00004c  e9cd2802          STRD     r2,r8,[sp,#8]
000050  e9cd6100          STRD     r6,r1,[sp,#0]
000054  4621              MOV      r1,r4
000056  4648              MOV      r0,r9
000058  f7fffffe          BL       eap_pax_kdf
00005c  b120              CBZ      r0,|L2.104|
                  |L2.94|
;;;141    			e, 2 * EAP_PAX_RAND_LEN, EAP_PAX_ICK_LEN, ick))
;;;142    		return -1;
00005e  f04f30ff          MOV      r0,#0xffffffff
                  |L2.98|
;;;143    
;;;144    	wpa_hexdump_key(MSG_MSGDUMP, "EAP-PAX: AK", ak, EAP_PAX_AK_LEN);
;;;145    	wpa_hexdump_key(MSG_MSGDUMP, "EAP-PAX: MK", mk, EAP_PAX_MK_LEN);
;;;146    	wpa_hexdump_key(MSG_MSGDUMP, "EAP-PAX: CK", ck, EAP_PAX_CK_LEN);
;;;147    	wpa_hexdump_key(MSG_MSGDUMP, "EAP-PAX: ICK", ick, EAP_PAX_ICK_LEN);
;;;148    
;;;149    	return 0;
;;;150    }
000062  b004              ADD      sp,sp,#0x10
000064  e8bd87f0          POP      {r4-r10,pc}
                  |L2.104|
000068  2310              MOVS     r3,#0x10              ;144
00006a  462a              MOV      r2,r5                 ;144
00006c  a120              ADR      r1,|L2.240|
00006e  2000              MOVS     r0,#0                 ;144
000070  f7fffffe          BL       wpa_hexdump_key
000074  2310              MOVS     r3,#0x10              ;145
000076  4622              MOV      r2,r4                 ;145
000078  a120              ADR      r1,|L2.252|
00007a  2000              MOVS     r0,#0                 ;145
00007c  f7fffffe          BL       wpa_hexdump_key
000080  2310              MOVS     r3,#0x10              ;146
000082  463a              MOV      r2,r7                 ;146
000084  a120              ADR      r1,|L2.264|
000086  2000              MOVS     r0,#0                 ;146
000088  f7fffffe          BL       wpa_hexdump_key
00008c  2310              MOVS     r3,#0x10              ;147
00008e  4642              MOV      r2,r8                 ;147
000090  a120              ADR      r1,|L2.276|
000092  2000              MOVS     r0,#0                 ;147
000094  f7fffffe          BL       wpa_hexdump_key
000098  2000              MOVS     r0,#0                 ;149
00009a  e7e2              B        |L2.98|
                          ENDP

                  |L2.156|
00009c  4541502d          DCB      "EAP-PAX: initial key derivation",0
0000a0  5041583a
0000a4  20696e69
0000a8  7469616c
0000ac  206b6579
0000b0  20646572
0000b4  69766174
0000b8  696f6e00
                  |L2.188|
0000bc  4d617374          DCB      "Master Key",0
0000c0  6572204b
0000c4  657900  
0000c7  00                DCB      0
                  |L2.200|
0000c8  436f6e66          DCB      "Confirmation Key",0
0000cc  69726d61
0000d0  74696f6e
0000d4  204b6579
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L2.220|
0000dc  496e7465          DCB      "Integrity Check Key",0
0000e0  67726974
0000e4  79204368
0000e8  65636b20
0000ec  4b657900
                  |L2.240|
0000f0  4541502d          DCB      "EAP-PAX: AK",0
0000f4  5041583a
0000f8  20414b00
                  |L2.252|
0000fc  4541502d          DCB      "EAP-PAX: MK",0
000100  5041583a
000104  204d4b00
                  |L2.264|
000108  4541502d          DCB      "EAP-PAX: CK",0
00010c  5041583a
000110  20434b00
                  |L2.276|
000114  4541502d          DCB      "EAP-PAX: ICK",0
000118  5041583a
00011c  2049434b
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0

                          AREA ||i.eap_pax_kdf||, CODE, READONLY, ALIGN=1

                  eap_pax_kdf PROC
;;;35      */
;;;36     int eap_pax_kdf(u8 mac_id, const u8 *key, size_t key_len,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;37     		const char *identifier,
;;;38     		const u8 *entropy, size_t entropy_len,
;;;39     		size_t output_len, u8 *output)
;;;40     {
000004  b08f              SUB      sp,sp,#0x3c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  461c              MOV      r4,r3
00000e  f8ddb078          LDR      r11,[sp,#0x78]
;;;41     	u8 mac[SHA1_MAC_LEN];
;;;42     	u8 counter, *pos;
;;;43     	const u8 *addr[3];
;;;44     	size_t len[3];
;;;45     	size_t num_blocks, left;
;;;46     
;;;47     	num_blocks = (output_len + EAP_PAX_MAC_LEN - 1) / EAP_PAX_MAC_LEN;
000012  f10b000f          ADD      r0,r11,#0xf
000016  0900              LSRS     r0,r0,#4
000018  9002              STR      r0,[sp,#8]
;;;48     	if (identifier == NULL || num_blocks >= 255)
00001a  b114              CBZ      r4,|L3.34|
00001c  9802              LDR      r0,[sp,#8]
00001e  28ff              CMP      r0,#0xff
000020  d304              BCC      |L3.44|
                  |L3.34|
;;;49     		return -1;
000022  f04f30ff          MOV      r0,#0xffffffff
                  |L3.38|
;;;50     
;;;51     	/* TODO: add support for EAP_PAX_HMAC_SHA256_128 */
;;;52     	if (mac_id != EAP_PAX_MAC_HMAC_SHA1_128)
;;;53     		return -1;
;;;54     
;;;55     	addr[0] = (const u8 *) identifier;
;;;56     	len[0] = os_strlen(identifier);
;;;57     	addr[1] = entropy;
;;;58     	len[1] = entropy_len;
;;;59     	addr[2] = &counter;
;;;60     	len[2] = 1;
;;;61     
;;;62     	pos = output;
;;;63     	left = output_len;
;;;64     	for (counter = 1; counter <= (u8) num_blocks; counter++) {
;;;65     		size_t clen = left > EAP_PAX_MAC_LEN ? EAP_PAX_MAC_LEN : left;
;;;66     		hmac_sha1_vector(key, key_len, 3, addr, len, mac);
;;;67     		os_memcpy(pos, mac, clen);
;;;68     		pos += clen;
;;;69     		left -= clen;
;;;70     	}
;;;71     
;;;72     	return 0;
;;;73     }
000026  b013              ADD      sp,sp,#0x4c
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.44|
00002c  f1b80f01          CMP      r8,#1                 ;52
000030  d002              BEQ      |L3.56|
000032  f04f30ff          MOV      r0,#0xffffffff        ;53
000036  e7f6              B        |L3.38|
                  |L3.56|
000038  9406              STR      r4,[sp,#0x18]         ;55
00003a  4620              MOV      r0,r4                 ;56
00003c  f7fffffe          BL       os_strlen
000040  9003              STR      r0,[sp,#0xc]          ;56
000042  981c              LDR      r0,[sp,#0x70]         ;57
000044  9007              STR      r0,[sp,#0x1c]         ;57
000046  981d              LDR      r0,[sp,#0x74]         ;58
000048  9004              STR      r0,[sp,#0x10]         ;58
00004a  a809              ADD      r0,sp,#0x24           ;59
00004c  9008              STR      r0,[sp,#0x20]         ;59
00004e  2001              MOVS     r0,#1                 ;60
000050  9005              STR      r0,[sp,#0x14]         ;60
000052  9d1f              LDR      r5,[sp,#0x7c]         ;62
000054  465e              MOV      r6,r11                ;63
000056  9009              STR      r0,[sp,#0x24]         ;64
000058  e01b              B        |L3.146|
                  |L3.90|
00005a  2e10              CMP      r6,#0x10              ;65
00005c  d901              BLS      |L3.98|
00005e  2010              MOVS     r0,#0x10              ;65
000060  e000              B        |L3.100|
                  |L3.98|
000062  4630              MOV      r0,r6                 ;65
                  |L3.100|
000064  4607              MOV      r7,r0                 ;65
000066  ab0a              ADD      r3,sp,#0x28           ;66
000068  aa03              ADD      r2,sp,#0xc            ;66
00006a  e9cd2300          STRD     r2,r3,[sp,#0]         ;66
00006e  ab06              ADD      r3,sp,#0x18           ;66
000070  2203              MOVS     r2,#3                 ;66
000072  4651              MOV      r1,r10                ;66
000074  4648              MOV      r0,r9                 ;66
000076  f7fffffe          BL       hmac_sha1_vector
00007a  463a              MOV      r2,r7                 ;67
00007c  a90a              ADD      r1,sp,#0x28           ;67
00007e  4628              MOV      r0,r5                 ;67
000080  f7fffffe          BL       os_memcpy
000084  443d              ADD      r5,r5,r7              ;68
000086  1bf6              SUBS     r6,r6,r7              ;69
000088  f89d0024          LDRB     r0,[sp,#0x24]         ;64
00008c  1c40              ADDS     r0,r0,#1              ;64
00008e  b2c0              UXTB     r0,r0                 ;64
000090  9009              STR      r0,[sp,#0x24]         ;64
                  |L3.146|
000092  f89d1024          LDRB     r1,[sp,#0x24]         ;64
000096  9802              LDR      r0,[sp,#8]            ;64
000098  b2c0              UXTB     r0,r0                 ;64
00009a  4281              CMP      r1,r0                 ;64
00009c  dddd              BLE      |L3.90|
00009e  2000              MOVS     r0,#0                 ;72
0000a0  e7c1              B        |L3.38|
;;;74     
                          ENDP


                          AREA ||i.eap_pax_mac||, CODE, READONLY, ALIGN=1

                  eap_pax_mac PROC
;;;91      */
;;;92     int eap_pax_mac(u8 mac_id, const u8 *key, size_t key_len,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;93     		const u8 *data1, size_t data1_len,
;;;94     		const u8 *data2, size_t data2_len,
;;;95     		const u8 *data3, size_t data3_len,
;;;96     		u8 *mac)
;;;97     {
000004  b08d              SUB      sp,sp,#0x34
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  461c              MOV      r4,r3
00000e  e9ddb81a          LDRD     r11,r8,[sp,#0x68]
000012  f8dd9074          LDR      r9,[sp,#0x74]
;;;98     	u8 hash[SHA1_MAC_LEN];
;;;99     	const u8 *addr[3];
;;;100    	size_t len[3];
;;;101    	size_t count;
;;;102    
;;;103    	/* TODO: add support for EAP_PAX_HMAC_SHA256_128 */
;;;104    	if (mac_id != EAP_PAX_MAC_HMAC_SHA1_128)
000016  2d01              CMP      r5,#1
000018  d004              BEQ      |L4.36|
;;;105    		return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L4.30|
;;;106    
;;;107    	addr[0] = data1;
;;;108    	len[0] = data1_len;
;;;109    	addr[1] = data2;
;;;110    	len[1] = data2_len;
;;;111    	addr[2] = data3;
;;;112    	len[2] = data3_len;
;;;113    
;;;114    	count = (data1 ? 1 : 0) + (data2 ? 1 : 0) + (data3 ? 1 : 0);
;;;115    	hmac_sha1_vector(key, key_len, count, addr, len, hash);
;;;116    	os_memcpy(mac, hash, EAP_PAX_MAC_LEN);
;;;117    
;;;118    	return 0;
;;;119    }
00001e  b011              ADD      sp,sp,#0x44
000020  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.36|
000024  9405              STR      r4,[sp,#0x14]         ;107
000026  f8cdb008          STR      r11,[sp,#8]           ;108
00002a  f8cd8018          STR      r8,[sp,#0x18]         ;109
00002e  981c              LDR      r0,[sp,#0x70]         ;110
000030  9003              STR      r0,[sp,#0xc]          ;110
000032  f8cd901c          STR      r9,[sp,#0x1c]         ;111
000036  981e              LDR      r0,[sp,#0x78]         ;112
000038  9004              STR      r0,[sp,#0x10]         ;112
00003a  b10c              CBZ      r4,|L4.64|
00003c  2001              MOVS     r0,#1                 ;114
00003e  e000              B        |L4.66|
                  |L4.64|
000040  2000              MOVS     r0,#0                 ;114
                  |L4.66|
000042  f1b80f00          CMP      r8,#0                 ;114
000046  d001              BEQ      |L4.76|
000048  2101              MOVS     r1,#1                 ;114
00004a  e000              B        |L4.78|
                  |L4.76|
00004c  2100              MOVS     r1,#0                 ;114
                  |L4.78|
00004e  4408              ADD      r0,r0,r1              ;114
000050  f1b90f00          CMP      r9,#0                 ;114
000054  d001              BEQ      |L4.90|
000056  2101              MOVS     r1,#1                 ;114
000058  e000              B        |L4.92|
                  |L4.90|
00005a  2100              MOVS     r1,#0                 ;114
                  |L4.92|
00005c  eb000a01          ADD      r10,r0,r1             ;114
000060  ab08              ADD      r3,sp,#0x20           ;115
000062  aa02              ADD      r2,sp,#8              ;115
000064  e9cd2300          STRD     r2,r3,[sp,#0]         ;115
000068  ab05              ADD      r3,sp,#0x14           ;115
00006a  4652              MOV      r2,r10                ;115
00006c  4639              MOV      r1,r7                 ;115
00006e  4630              MOV      r0,r6                 ;115
000070  f7fffffe          BL       hmac_sha1_vector
000074  2210              MOVS     r2,#0x10              ;116
000076  a908              ADD      r1,sp,#0x20           ;116
000078  981f              LDR      r0,[sp,#0x7c]         ;116
00007a  f7fffffe          BL       os_memcpy
00007e  2000              MOVS     r0,#0                 ;118
000080  e7cd              B        |L4.30|
;;;120    
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L5.30|
00001a  2001              MOVS     r0,#1
                  |L5.28|
;;;495    }
00001c  4770              BX       lr
                  |L5.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L5.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L10.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L10.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L10.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L10.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L13.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L13.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L13.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L13.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L19.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L19.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

