; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\aes-internal.o --depend=.\obj\aes-internal.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\aes-internal.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\aes-internal.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L2.30|
00001a  2001              MOVS     r0,#1
                  |L2.28|
;;;495    }
00001c  4770              BX       lr
                  |L2.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L2.28|
;;;496    
                          ENDP


                          AREA ||i.rijndaelKeySetupEnc||, CODE, READONLY, ALIGN=2

                  rijndaelKeySetupEnc PROC
;;;785     */
;;;786    void rijndaelKeySetupEnc(u32 rk[/*44*/], const u8 cipherKey[])
000000  b570              PUSH     {r4-r6,lr}
;;;787    {
;;;788    	int i;
;;;789    	u32 temp;
;;;790    
;;;791    	rk[0] = GETU32(cipherKey     );
000002  780c              LDRB     r4,[r1,#0]
000004  0624              LSLS     r4,r4,#24
000006  784d              LDRB     r5,[r1,#1]
000008  ea844405          EOR      r4,r4,r5,LSL #16
00000c  788d              LDRB     r5,[r1,#2]
00000e  ea842405          EOR      r4,r4,r5,LSL #8
000012  78cd              LDRB     r5,[r1,#3]
000014  406c              EORS     r4,r4,r5
000016  6004              STR      r4,[r0,#0]
;;;792    	rk[1] = GETU32(cipherKey +  4);
000018  790c              LDRB     r4,[r1,#4]
00001a  0625              LSLS     r5,r4,#24
00001c  794c              LDRB     r4,[r1,#5]
00001e  ea854504          EOR      r5,r5,r4,LSL #16
000022  798c              LDRB     r4,[r1,#6]
000024  ea852404          EOR      r4,r5,r4,LSL #8
000028  79cd              LDRB     r5,[r1,#7]
00002a  406c              EORS     r4,r4,r5
00002c  6044              STR      r4,[r0,#4]
;;;793    	rk[2] = GETU32(cipherKey +  8);
00002e  7a0c              LDRB     r4,[r1,#8]
000030  0625              LSLS     r5,r4,#24
000032  7a4c              LDRB     r4,[r1,#9]
000034  ea854504          EOR      r5,r5,r4,LSL #16
000038  7a8c              LDRB     r4,[r1,#0xa]
00003a  ea852404          EOR      r4,r5,r4,LSL #8
00003e  7acd              LDRB     r5,[r1,#0xb]
000040  406c              EORS     r4,r4,r5
000042  6084              STR      r4,[r0,#8]
;;;794    	rk[3] = GETU32(cipherKey + 12);
000044  7b0c              LDRB     r4,[r1,#0xc]
000046  0625              LSLS     r5,r4,#24
000048  7b4c              LDRB     r4,[r1,#0xd]
00004a  ea854504          EOR      r5,r5,r4,LSL #16
00004e  7b8c              LDRB     r4,[r1,#0xe]
000050  ea852404          EOR      r4,r5,r4,LSL #8
000054  7bcd              LDRB     r5,[r1,#0xf]
000056  406c              EORS     r4,r4,r5
000058  60c4              STR      r4,[r0,#0xc]
;;;795    	for (i = 0; i < 10; i++) {
00005a  2300              MOVS     r3,#0
00005c  e032              B        |L3.196|
                  |L3.94|
;;;796    		temp  = rk[3];
00005e  68c2              LDR      r2,[r0,#0xc]
;;;797    		rk[4] = rk[0] ^
000060  f3c24507          UBFX     r5,r2,#16,#8
000064  4e19              LDR      r6,|L3.204|
000066  f8565025          LDR      r5,[r6,r5,LSL #2]
00006a  f04f467f          MOV      r6,#0xff000000
00006e  ea062505          AND      r5,r6,r5,LSL #8
000072  6804              LDR      r4,[r0,#0]
000074  406c              EORS     r4,r4,r5
000076  f3c22507          UBFX     r5,r2,#8,#8
00007a  4e14              LDR      r6,|L3.204|
00007c  f8565025          LDR      r5,[r6,r5,LSL #2]
000080  f405057f          AND      r5,r5,#0xff0000
000084  406c              EORS     r4,r4,r5
000086  b2d5              UXTB     r5,r2
000088  f8565025          LDR      r5,[r6,r5,LSL #2]
00008c  f405457f          AND      r5,r5,#0xff00
000090  406c              EORS     r4,r4,r5
000092  0e15              LSRS     r5,r2,#24
000094  f8565025          LDR      r5,[r6,r5,LSL #2]
000098  f3c52507          UBFX     r5,r5,#8,#8
00009c  406c              EORS     r4,r4,r5
00009e  4d0c              LDR      r5,|L3.208|
0000a0  5ced              LDRB     r5,[r5,r3]
0000a2  ea846405          EOR      r4,r4,r5,LSL #24
0000a6  6104              STR      r4,[r0,#0x10]
;;;798    			TE421(temp) ^ TE432(temp) ^ TE443(temp) ^ TE414(temp) ^
;;;799    			RCON(i);
;;;800    		rk[5] = rk[1] ^ rk[4];
0000a8  6905              LDR      r5,[r0,#0x10]
0000aa  6844              LDR      r4,[r0,#4]
0000ac  406c              EORS     r4,r4,r5
0000ae  6144              STR      r4,[r0,#0x14]
;;;801    		rk[6] = rk[2] ^ rk[5];
0000b0  6945              LDR      r5,[r0,#0x14]
0000b2  6884              LDR      r4,[r0,#8]
0000b4  406c              EORS     r4,r4,r5
0000b6  6184              STR      r4,[r0,#0x18]
;;;802    		rk[7] = rk[3] ^ rk[6];
0000b8  6985              LDR      r5,[r0,#0x18]
0000ba  68c4              LDR      r4,[r0,#0xc]
0000bc  406c              EORS     r4,r4,r5
0000be  61c4              STR      r4,[r0,#0x1c]
;;;803    		rk += 4;
0000c0  3010              ADDS     r0,r0,#0x10
0000c2  1c5b              ADDS     r3,r3,#1              ;795
                  |L3.196|
0000c4  2b0a              CMP      r3,#0xa               ;795
0000c6  dbca              BLT      |L3.94|
;;;804    	}
;;;805    }
0000c8  bd70              POP      {r4-r6,pc}
                          ENDP

0000ca  0000              DCW      0x0000
                  |L3.204|
                          DCD      Te0
                  |L3.208|
                          DCD      rcons

                          AREA ||i.rotr||, CODE, READONLY, ALIGN=1

                  rotr PROC
;;;71     
;;;72     static inline u32 rotr(u32 val, int bits)
000000  4602              MOV      r2,r0
;;;73     {
;;;74     	return (val >> bits) | (val << (32 - bits));
000002  fa22f001          LSR      r0,r2,r1
000006  f1c10320          RSB      r3,r1,#0x20
00000a  fa02f303          LSL      r3,r2,r3
00000e  4318              ORRS     r0,r0,r3
;;;75     }
000010  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L9.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L9.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L9.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L9.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L12.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L12.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L12.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L12.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L18.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L18.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Te0
                          DCD      0xc66363a5
                          DCD      0xf87c7c84
                          DCD      0xee777799
                          DCD      0xf67b7b8d
                          DCD      0xfff2f20d
                          DCD      0xd66b6bbd
                          DCD      0xde6f6fb1
                          DCD      0x91c5c554
                          DCD      0x60303050
                          DCD      0x02010103
                          DCD      0xce6767a9
                          DCD      0x562b2b7d
                          DCD      0xe7fefe19
                          DCD      0xb5d7d762
                          DCD      0x4dababe6
                          DCD      0xec76769a
                          DCD      0x8fcaca45
                          DCD      0x1f82829d
                          DCD      0x89c9c940
                          DCD      0xfa7d7d87
                          DCD      0xeffafa15
                          DCD      0xb25959eb
                          DCD      0x8e4747c9
                          DCD      0xfbf0f00b
                          DCD      0x41adadec
                          DCD      0xb3d4d467
                          DCD      0x5fa2a2fd
                          DCD      0x45afafea
                          DCD      0x239c9cbf
                          DCD      0x53a4a4f7
                          DCD      0xe4727296
                          DCD      0x9bc0c05b
                          DCD      0x75b7b7c2
                          DCD      0xe1fdfd1c
                          DCD      0x3d9393ae
                          DCD      0x4c26266a
                          DCD      0x6c36365a
                          DCD      0x7e3f3f41
                          DCD      0xf5f7f702
                          DCD      0x83cccc4f
                          DCD      0x6834345c
                          DCD      0x51a5a5f4
                          DCD      0xd1e5e534
                          DCD      0xf9f1f108
                          DCD      0xe2717193
                          DCD      0xabd8d873
                          DCD      0x62313153
                          DCD      0x2a15153f
                          DCD      0x0804040c
                          DCD      0x95c7c752
                          DCD      0x46232365
                          DCD      0x9dc3c35e
                          DCD      0x30181828
                          DCD      0x379696a1
                          DCD      0x0a05050f
                          DCD      0x2f9a9ab5
                          DCD      0x0e070709
                          DCD      0x24121236
                          DCD      0x1b80809b
                          DCD      0xdfe2e23d
                          DCD      0xcdebeb26
                          DCD      0x4e272769
                          DCD      0x7fb2b2cd
                          DCD      0xea75759f
                          DCD      0x1209091b
                          DCD      0x1d83839e
                          DCD      0x582c2c74
                          DCD      0x341a1a2e
                          DCD      0x361b1b2d
                          DCD      0xdc6e6eb2
                          DCD      0xb45a5aee
                          DCD      0x5ba0a0fb
                          DCD      0xa45252f6
                          DCD      0x763b3b4d
                          DCD      0xb7d6d661
                          DCD      0x7db3b3ce
                          DCD      0x5229297b
                          DCD      0xdde3e33e
                          DCD      0x5e2f2f71
                          DCD      0x13848497
                          DCD      0xa65353f5
                          DCD      0xb9d1d168
                          DCD      0x00000000
                          DCD      0xc1eded2c
                          DCD      0x40202060
                          DCD      0xe3fcfc1f
                          DCD      0x79b1b1c8
                          DCD      0xb65b5bed
                          DCD      0xd46a6abe
                          DCD      0x8dcbcb46
                          DCD      0x67bebed9
                          DCD      0x7239394b
                          DCD      0x944a4ade
                          DCD      0x984c4cd4
                          DCD      0xb05858e8
                          DCD      0x85cfcf4a
                          DCD      0xbbd0d06b
                          DCD      0xc5efef2a
                          DCD      0x4faaaae5
                          DCD      0xedfbfb16
                          DCD      0x864343c5
                          DCD      0x9a4d4dd7
                          DCD      0x66333355
                          DCD      0x11858594
                          DCD      0x8a4545cf
                          DCD      0xe9f9f910
                          DCD      0x04020206
                          DCD      0xfe7f7f81
                          DCD      0xa05050f0
                          DCD      0x783c3c44
                          DCD      0x259f9fba
                          DCD      0x4ba8a8e3
                          DCD      0xa25151f3
                          DCD      0x5da3a3fe
                          DCD      0x804040c0
                          DCD      0x058f8f8a
                          DCD      0x3f9292ad
                          DCD      0x219d9dbc
                          DCD      0x70383848
                          DCD      0xf1f5f504
                          DCD      0x63bcbcdf
                          DCD      0x77b6b6c1
                          DCD      0xafdada75
                          DCD      0x42212163
                          DCD      0x20101030
                          DCD      0xe5ffff1a
                          DCD      0xfdf3f30e
                          DCD      0xbfd2d26d
                          DCD      0x81cdcd4c
                          DCD      0x180c0c14
                          DCD      0x26131335
                          DCD      0xc3ecec2f
                          DCD      0xbe5f5fe1
                          DCD      0x359797a2
                          DCD      0x884444cc
                          DCD      0x2e171739
                          DCD      0x93c4c457
                          DCD      0x55a7a7f2
                          DCD      0xfc7e7e82
                          DCD      0x7a3d3d47
                          DCD      0xc86464ac
                          DCD      0xba5d5de7
                          DCD      0x3219192b
                          DCD      0xe6737395
                          DCD      0xc06060a0
                          DCD      0x19818198
                          DCD      0x9e4f4fd1
                          DCD      0xa3dcdc7f
                          DCD      0x44222266
                          DCD      0x542a2a7e
                          DCD      0x3b9090ab
                          DCD      0x0b888883
                          DCD      0x8c4646ca
                          DCD      0xc7eeee29
                          DCD      0x6bb8b8d3
                          DCD      0x2814143c
                          DCD      0xa7dede79
                          DCD      0xbc5e5ee2
                          DCD      0x160b0b1d
                          DCD      0xaddbdb76
                          DCD      0xdbe0e03b
                          DCD      0x64323256
                          DCD      0x743a3a4e
                          DCD      0x140a0a1e
                          DCD      0x924949db
                          DCD      0x0c06060a
                          DCD      0x4824246c
                          DCD      0xb85c5ce4
                          DCD      0x9fc2c25d
                          DCD      0xbdd3d36e
                          DCD      0x43acacef
                          DCD      0xc46262a6
                          DCD      0x399191a8
                          DCD      0x319595a4
                          DCD      0xd3e4e437
                          DCD      0xf279798b
                          DCD      0xd5e7e732
                          DCD      0x8bc8c843
                          DCD      0x6e373759
                          DCD      0xda6d6db7
                          DCD      0x018d8d8c
                          DCD      0xb1d5d564
                          DCD      0x9c4e4ed2
                          DCD      0x49a9a9e0
                          DCD      0xd86c6cb4
                          DCD      0xac5656fa
                          DCD      0xf3f4f407
                          DCD      0xcfeaea25
                          DCD      0xca6565af
                          DCD      0xf47a7a8e
                          DCD      0x47aeaee9
                          DCD      0x10080818
                          DCD      0x6fbabad5
                          DCD      0xf0787888
                          DCD      0x4a25256f
                          DCD      0x5c2e2e72
                          DCD      0x381c1c24
                          DCD      0x57a6a6f1
                          DCD      0x73b4b4c7
                          DCD      0x97c6c651
                          DCD      0xcbe8e823
                          DCD      0xa1dddd7c
                          DCD      0xe874749c
                          DCD      0x3e1f1f21
                          DCD      0x964b4bdd
                          DCD      0x61bdbddc
                          DCD      0x0d8b8b86
                          DCD      0x0f8a8a85
                          DCD      0xe0707090
                          DCD      0x7c3e3e42
                          DCD      0x71b5b5c4
                          DCD      0xcc6666aa
                          DCD      0x904848d8
                          DCD      0x06030305
                          DCD      0xf7f6f601
                          DCD      0x1c0e0e12
                          DCD      0xc26161a3
                          DCD      0x6a35355f
                          DCD      0xae5757f9
                          DCD      0x69b9b9d0
                          DCD      0x17868691
                          DCD      0x99c1c158
                          DCD      0x3a1d1d27
                          DCD      0x279e9eb9
                          DCD      0xd9e1e138
                          DCD      0xebf8f813
                          DCD      0x2b9898b3
                          DCD      0x22111133
                          DCD      0xd26969bb
                          DCD      0xa9d9d970
                          DCD      0x078e8e89
                          DCD      0x339494a7
                          DCD      0x2d9b9bb6
                          DCD      0x3c1e1e22
                          DCD      0x15878792
                          DCD      0xc9e9e920
                          DCD      0x87cece49
                          DCD      0xaa5555ff
                          DCD      0x50282878
                          DCD      0xa5dfdf7a
                          DCD      0x038c8c8f
                          DCD      0x59a1a1f8
                          DCD      0x09898980
                          DCD      0x1a0d0d17
                          DCD      0x65bfbfda
                          DCD      0xd7e6e631
                          DCD      0x844242c6
                          DCD      0xd06868b8
                          DCD      0x824141c3
                          DCD      0x299999b0
                          DCD      0x5a2d2d77
                          DCD      0x1e0f0f11
                          DCD      0x7bb0b0cb
                          DCD      0xa85454fc
                          DCD      0x6dbbbbd6
                          DCD      0x2c16163a
                  Td0
                          DCD      0x51f4a750
                          DCD      0x7e416553
                          DCD      0x1a17a4c3
                          DCD      0x3a275e96
                          DCD      0x3bab6bcb
                          DCD      0x1f9d45f1
                          DCD      0xacfa58ab
                          DCD      0x4be30393
                          DCD      0x2030fa55
                          DCD      0xad766df6
                          DCD      0x88cc7691
                          DCD      0xf5024c25
                          DCD      0x4fe5d7fc
                          DCD      0xc52acbd7
                          DCD      0x26354480
                          DCD      0xb562a38f
                          DCD      0xdeb15a49
                          DCD      0x25ba1b67
                          DCD      0x45ea0e98
                          DCD      0x5dfec0e1
                          DCD      0xc32f7502
                          DCD      0x814cf012
                          DCD      0x8d4697a3
                          DCD      0x6bd3f9c6
                          DCD      0x038f5fe7
                          DCD      0x15929c95
                          DCD      0xbf6d7aeb
                          DCD      0x955259da
                          DCD      0xd4be832d
                          DCD      0x587421d3
                          DCD      0x49e06929
                          DCD      0x8ec9c844
                          DCD      0x75c2896a
                          DCD      0xf48e7978
                          DCD      0x99583e6b
                          DCD      0x27b971dd
                          DCD      0xbee14fb6
                          DCD      0xf088ad17
                          DCD      0xc920ac66
                          DCD      0x7dce3ab4
                          DCD      0x63df4a18
                          DCD      0xe51a3182
                          DCD      0x97513360
                          DCD      0x62537f45
                          DCD      0xb16477e0
                          DCD      0xbb6bae84
                          DCD      0xfe81a01c
                          DCD      0xf9082b94
                          DCD      0x70486858
                          DCD      0x8f45fd19
                          DCD      0x94de6c87
                          DCD      0x527bf8b7
                          DCD      0xab73d323
                          DCD      0x724b02e2
                          DCD      0xe31f8f57
                          DCD      0x6655ab2a
                          DCD      0xb2eb2807
                          DCD      0x2fb5c203
                          DCD      0x86c57b9a
                          DCD      0xd33708a5
                          DCD      0x302887f2
                          DCD      0x23bfa5b2
                          DCD      0x02036aba
                          DCD      0xed16825c
                          DCD      0x8acf1c2b
                          DCD      0xa779b492
                          DCD      0xf307f2f0
                          DCD      0x4e69e2a1
                          DCD      0x65daf4cd
                          DCD      0x0605bed5
                          DCD      0xd134621f
                          DCD      0xc4a6fe8a
                          DCD      0x342e539d
                          DCD      0xa2f355a0
                          DCD      0x058ae132
                          DCD      0xa4f6eb75
                          DCD      0x0b83ec39
                          DCD      0x4060efaa
                          DCD      0x5e719f06
                          DCD      0xbd6e1051
                          DCD      0x3e218af9
                          DCD      0x96dd063d
                          DCD      0xdd3e05ae
                          DCD      0x4de6bd46
                          DCD      0x91548db5
                          DCD      0x71c45d05
                          DCD      0x0406d46f
                          DCD      0x605015ff
                          DCD      0x1998fb24
                          DCD      0xd6bde997
                          DCD      0x894043cc
                          DCD      0x67d99e77
                          DCD      0xb0e842bd
                          DCD      0x07898b88
                          DCD      0xe7195b38
                          DCD      0x79c8eedb
                          DCD      0xa17c0a47
                          DCD      0x7c420fe9
                          DCD      0xf8841ec9
                          DCD      0x00000000
                          DCD      0x09808683
                          DCD      0x322bed48
                          DCD      0x1e1170ac
                          DCD      0x6c5a724e
                          DCD      0xfd0efffb
                          DCD      0x0f853856
                          DCD      0x3daed51e
                          DCD      0x362d3927
                          DCD      0x0a0fd964
                          DCD      0x685ca621
                          DCD      0x9b5b54d1
                          DCD      0x24362e3a
                          DCD      0x0c0a67b1
                          DCD      0x9357e70f
                          DCD      0xb4ee96d2
                          DCD      0x1b9b919e
                          DCD      0x80c0c54f
                          DCD      0x61dc20a2
                          DCD      0x5a774b69
                          DCD      0x1c121a16
                          DCD      0xe293ba0a
                          DCD      0xc0a02ae5
                          DCD      0x3c22e043
                          DCD      0x121b171d
                          DCD      0x0e090d0b
                          DCD      0xf28bc7ad
                          DCD      0x2db6a8b9
                          DCD      0x141ea9c8
                          DCD      0x57f11985
                          DCD      0xaf75074c
                          DCD      0xee99ddbb
                          DCD      0xa37f60fd
                          DCD      0xf701269f
                          DCD      0x5c72f5bc
                          DCD      0x44663bc5
                          DCD      0x5bfb7e34
                          DCD      0x8b432976
                          DCD      0xcb23c6dc
                          DCD      0xb6edfc68
                          DCD      0xb8e4f163
                          DCD      0xd731dcca
                          DCD      0x42638510
                          DCD      0x13972240
                          DCD      0x84c61120
                          DCD      0x854a247d
                          DCD      0xd2bb3df8
                          DCD      0xaef93211
                          DCD      0xc729a16d
                          DCD      0x1d9e2f4b
                          DCD      0xdcb230f3
                          DCD      0x0d8652ec
                          DCD      0x77c1e3d0
                          DCD      0x2bb3166c
                          DCD      0xa970b999
                          DCD      0x119448fa
                          DCD      0x47e96422
                          DCD      0xa8fc8cc4
                          DCD      0xa0f03f1a
                          DCD      0x567d2cd8
                          DCD      0x223390ef
                          DCD      0x87494ec7
                          DCD      0xd938d1c1
                          DCD      0x8ccaa2fe
                          DCD      0x98d40b36
                          DCD      0xa6f581cf
                          DCD      0xa57ade28
                          DCD      0xdab78e26
                          DCD      0x3fadbfa4
                          DCD      0x2c3a9de4
                          DCD      0x5078920d
                          DCD      0x6a5fcc9b
                          DCD      0x547e4662
                          DCD      0xf68d13c2
                          DCD      0x90d8b8e8
                          DCD      0x2e39f75e
                          DCD      0x82c3aff5
                          DCD      0x9f5d80be
                          DCD      0x69d0937c
                          DCD      0x6fd52da9
                          DCD      0xcf2512b3
                          DCD      0xc8ac993b
                          DCD      0x10187da7
                          DCD      0xe89c636e
                          DCD      0xdb3bbb7b
                          DCD      0xcd267809
                          DCD      0x6e5918f4
                          DCD      0xec9ab701
                          DCD      0x834f9aa8
                          DCD      0xe6956e65
                          DCD      0xaaffe67e
                          DCD      0x21bccf08
                          DCD      0xef15e8e6
                          DCD      0xbae79bd9
                          DCD      0x4a6f36ce
                          DCD      0xea9f09d4
                          DCD      0x29b07cd6
                          DCD      0x31a4b2af
                          DCD      0x2a3f2331
                          DCD      0xc6a59430
                          DCD      0x35a266c0
                          DCD      0x744ebc37
                          DCD      0xfc82caa6
                          DCD      0xe090d0b0
                          DCD      0x33a7d815
                          DCD      0xf104984a
                          DCD      0x41ecdaf7
                          DCD      0x7fcd500e
                          DCD      0x1791f62f
                          DCD      0x764dd68d
                          DCD      0x43efb04d
                          DCD      0xccaa4d54
                          DCD      0xe49604df
                          DCD      0x9ed1b5e3
                          DCD      0x4c6a881b
                          DCD      0xc12c1fb8
                          DCD      0x4665517f
                          DCD      0x9d5eea04
                          DCD      0x018c355d
                          DCD      0xfa877473
                          DCD      0xfb0b412e
                          DCD      0xb3671d5a
                          DCD      0x92dbd252
                          DCD      0xe9105633
                          DCD      0x6dd64713
                          DCD      0x9ad7618c
                          DCD      0x37a10c7a
                          DCD      0x59f8148e
                          DCD      0xeb133c89
                          DCD      0xcea927ee
                          DCD      0xb761c935
                          DCD      0xe11ce5ed
                          DCD      0x7a47b13c
                          DCD      0x9cd2df59
                          DCD      0x55f2733f
                          DCD      0x1814ce79
                          DCD      0x73c737bf
                          DCD      0x53f7cdea
                          DCD      0x5ffdaa5b
                          DCD      0xdf3d6f14
                          DCD      0x7844db86
                          DCD      0xcaaff381
                          DCD      0xb968c43e
                          DCD      0x3824342c
                          DCD      0xc2a3405f
                          DCD      0x161dc372
                          DCD      0xbce2250c
                          DCD      0x283c498b
                          DCD      0xff0d9541
                          DCD      0x39a80171
                          DCD      0x080cb3de
                          DCD      0xd8b4e49c
                          DCD      0x6456c190
                          DCD      0x7bcb8461
                          DCD      0xd532b670
                          DCD      0x486c5c74
                          DCD      0xd0b85742
                  Td4s
000800  52096ad5          DCB      0x52,0x09,0x6a,0xd5
000804  3036a538          DCB      0x30,0x36,0xa5,0x38
000808  bf40a39e          DCB      0xbf,0x40,0xa3,0x9e
00080c  81f3d7fb          DCB      0x81,0xf3,0xd7,0xfb
000810  7ce33982          DCB      0x7c,0xe3,0x39,0x82
000814  9b2fff87          DCB      0x9b,0x2f,0xff,0x87
000818  348e4344          DCB      0x34,0x8e,0x43,0x44
00081c  c4dee9cb          DCB      0xc4,0xde,0xe9,0xcb
000820  547b9432          DCB      0x54,0x7b,0x94,0x32
000824  a6c2233d          DCB      0xa6,0xc2,0x23,0x3d
000828  ee4c950b          DCB      0xee,0x4c,0x95,0x0b
00082c  42fac34e          DCB      0x42,0xfa,0xc3,0x4e
000830  082ea166          DCB      0x08,0x2e,0xa1,0x66
000834  28d924b2          DCB      0x28,0xd9,0x24,0xb2
000838  765ba249          DCB      0x76,0x5b,0xa2,0x49
00083c  6d8bd125          DCB      0x6d,0x8b,0xd1,0x25
000840  72f8f664          DCB      0x72,0xf8,0xf6,0x64
000844  86689816          DCB      0x86,0x68,0x98,0x16
000848  d4a45ccc          DCB      0xd4,0xa4,0x5c,0xcc
00084c  5d65b692          DCB      0x5d,0x65,0xb6,0x92
000850  6c704850          DCB      0x6c,0x70,0x48,0x50
000854  fdedb9da          DCB      0xfd,0xed,0xb9,0xda
000858  5e154657          DCB      0x5e,0x15,0x46,0x57
00085c  a78d9d84          DCB      0xa7,0x8d,0x9d,0x84
000860  90d8ab00          DCB      0x90,0xd8,0xab,0x00
000864  8cbcd30a          DCB      0x8c,0xbc,0xd3,0x0a
000868  f7e45805          DCB      0xf7,0xe4,0x58,0x05
00086c  b8b34506          DCB      0xb8,0xb3,0x45,0x06
000870  d02c1e8f          DCB      0xd0,0x2c,0x1e,0x8f
000874  ca3f0f02          DCB      0xca,0x3f,0x0f,0x02
000878  c1afbd03          DCB      0xc1,0xaf,0xbd,0x03
00087c  01138a6b          DCB      0x01,0x13,0x8a,0x6b
000880  3a911141          DCB      0x3a,0x91,0x11,0x41
000884  4f67dcea          DCB      0x4f,0x67,0xdc,0xea
000888  97f2cfce          DCB      0x97,0xf2,0xcf,0xce
00088c  f0b4e673          DCB      0xf0,0xb4,0xe6,0x73
000890  96ac7422          DCB      0x96,0xac,0x74,0x22
000894  e7ad3585          DCB      0xe7,0xad,0x35,0x85
000898  e2f937e8          DCB      0xe2,0xf9,0x37,0xe8
00089c  1c75df6e          DCB      0x1c,0x75,0xdf,0x6e
0008a0  47f11a71          DCB      0x47,0xf1,0x1a,0x71
0008a4  1d29c589          DCB      0x1d,0x29,0xc5,0x89
0008a8  6fb7620e          DCB      0x6f,0xb7,0x62,0x0e
0008ac  aa18be1b          DCB      0xaa,0x18,0xbe,0x1b
0008b0  fc563e4b          DCB      0xfc,0x56,0x3e,0x4b
0008b4  c6d27920          DCB      0xc6,0xd2,0x79,0x20
0008b8  9adbc0fe          DCB      0x9a,0xdb,0xc0,0xfe
0008bc  78cd5af4          DCB      0x78,0xcd,0x5a,0xf4
0008c0  1fdda833          DCB      0x1f,0xdd,0xa8,0x33
0008c4  8807c731          DCB      0x88,0x07,0xc7,0x31
0008c8  b1121059          DCB      0xb1,0x12,0x10,0x59
0008cc  2780ec5f          DCB      0x27,0x80,0xec,0x5f
0008d0  60517fa9          DCB      0x60,0x51,0x7f,0xa9
0008d4  19b54a0d          DCB      0x19,0xb5,0x4a,0x0d
0008d8  2de57a9f          DCB      0x2d,0xe5,0x7a,0x9f
0008dc  93c99cef          DCB      0x93,0xc9,0x9c,0xef
0008e0  a0e03b4d          DCB      0xa0,0xe0,0x3b,0x4d
0008e4  ae2af5b0          DCB      0xae,0x2a,0xf5,0xb0
0008e8  c8ebbb3c          DCB      0xc8,0xeb,0xbb,0x3c
0008ec  83539961          DCB      0x83,0x53,0x99,0x61
0008f0  172b047e          DCB      0x17,0x2b,0x04,0x7e
0008f4  ba77d626          DCB      0xba,0x77,0xd6,0x26
0008f8  e1691463          DCB      0xe1,0x69,0x14,0x63
0008fc  55210c7d          DCB      0x55,0x21,0x0c,0x7d
                  rcons
000900  01020408          DCB      0x01,0x02,0x04,0x08
000904  10204080          DCB      0x10,0x20,0x40,0x80
000908  1b36              DCB      0x1b,0x36
