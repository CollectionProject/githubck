; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_sake.o --depend=.\obj\eap_sake.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_sake.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_sake.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.eap_peer_sake_register||, CODE, READONLY, ALIGN=2

                  eap_peer_sake_register PROC
;;;477    
;;;478    int eap_peer_sake_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;479    {
;;;480    	struct eap_method *eap;
;;;481    	int ret;
;;;482    
;;;483    	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a310              ADR      r3,|L4.68|
000004  2230              MOVS     r2,#0x30
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;484    				    EAP_VENDOR_IETF, EAP_TYPE_SAKE, "SAKE");
;;;485    	if (eap == NULL)
000010  b914              CBNZ     r4,|L4.24|
;;;486    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L4.22|
;;;487    
;;;488    	eap->init = eap_sake_init;
;;;489    	eap->deinit = eap_sake_deinit;
;;;490    	eap->process = eap_sake_process;
;;;491    	eap->isKeyAvailable = eap_sake_isKeyAvailable;
;;;492    	eap->getKey = eap_sake_getKey;
;;;493    	eap->get_emsk = eap_sake_get_emsk;
;;;494    
;;;495    	ret = eap_peer_method_register(eap);
;;;496    	if (ret)
;;;497    		eap_peer_method_free(eap);
;;;498    	return ret;
;;;499    }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  480c              LDR      r0,|L4.76|
00001a  60e0              STR      r0,[r4,#0xc]          ;488
00001c  480c              LDR      r0,|L4.80|
00001e  6120              STR      r0,[r4,#0x10]         ;489
000020  480c              LDR      r0,|L4.84|
000022  6160              STR      r0,[r4,#0x14]         ;490
000024  480c              LDR      r0,|L4.88|
000026  61a0              STR      r0,[r4,#0x18]         ;491
000028  480c              LDR      r0,|L4.92|
00002a  61e0              STR      r0,[r4,#0x1c]         ;492
00002c  480c              LDR      r0,|L4.96|
00002e  6420              STR      r0,[r4,#0x40]         ;493
000030  4620              MOV      r0,r4                 ;495
000032  f7fffffe          BL       eap_peer_method_register
000036  4605              MOV      r5,r0                 ;495
000038  b115              CBZ      r5,|L4.64|
00003a  4620              MOV      r0,r4                 ;497
00003c  f7fffffe          BL       eap_peer_method_free
                  |L4.64|
000040  4628              MOV      r0,r5                 ;498
000042  e7e8              B        |L4.22|
                          ENDP

                  |L4.68|
000044  53414b45          DCB      "SAKE",0
000048  00      
000049  00                DCB      0
00004a  00                DCB      0
00004b  00                DCB      0
                  |L4.76|
                          DCD      eap_sake_init
                  |L4.80|
                          DCD      eap_sake_deinit
                  |L4.84|
                          DCD      eap_sake_process
                  |L4.88|
                          DCD      eap_sake_isKeyAvailable
                  |L4.92|
                          DCD      eap_sake_getKey
                  |L4.96|
                          DCD      eap_sake_get_emsk

                          AREA ||i.eap_sake_build_msg||, CODE, READONLY, ALIGN=2

                  eap_sake_build_msg PROC
;;;119    
;;;120    static struct wpabuf * eap_sake_build_msg(struct eap_sake_data *data,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;121    					  int id, size_t length, u8 subtype)
;;;122    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;123    	struct eap_sake_hdr *sake;
;;;124    	struct wpabuf *msg;
;;;125    	size_t plen;
;;;126    
;;;127    	plen = length + sizeof(struct eap_sake_hdr);
00000c  f1070a03          ADD      r10,r7,#3
;;;128    
;;;129    	msg = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_SAKE, plen,
000010  b2f3              UXTB     r3,r6
000012  9300              STR      r3,[sp,#0]
000014  2302              MOVS     r3,#2
000016  4652              MOV      r2,r10
000018  2130              MOVS     r1,#0x30
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       eap_msg_alloc
000020  4681              MOV      r9,r0
;;;130    			    EAP_CODE_RESPONSE, id);
;;;131    	if (msg == NULL) {
000022  f1b90f00          CMP      r9,#0
000026  d106              BNE      |L5.54|
;;;132    		wpa_printf(MSG_ERROR, "EAP-SAKE: Failed to allocate memory "
000028  a10a              ADR      r1,|L5.84|
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       wpa_printf
;;;133    			   "request");
;;;134    		return NULL;
000030  2000              MOVS     r0,#0
                  |L5.50|
;;;135    	}
;;;136    
;;;137    	sake = wpabuf_put(msg, sizeof(*sake));
;;;138    	sake->version = EAP_SAKE_VERSION;
;;;139    	sake->session_id = data->session_id;
;;;140    	sake->subtype = subtype;
;;;141    
;;;142    	return msg;
;;;143    }
000032  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.54|
000036  2103              MOVS     r1,#3                 ;137
000038  4648              MOV      r0,r9                 ;137
00003a  f7fffffe          BL       wpabuf_put
00003e  4604              MOV      r4,r0                 ;137
000040  2002              MOVS     r0,#2                 ;138
000042  7020              STRB     r0,[r4,#0]            ;138
000044  f89500e1          LDRB     r0,[r5,#0xe1]         ;139
000048  7060              STRB     r0,[r4,#1]            ;139
00004a  f8848002          STRB     r8,[r4,#2]            ;140
00004e  4648              MOV      r0,r9                 ;142
000050  e7ef              B        |L5.50|
;;;144    
                          ENDP

000052  0000              DCW      0x0000
                  |L5.84|
000054  4541502d          DCB      "EAP-SAKE: Failed to allocate memory request",0
000058  53414b45
00005c  3a204661
000060  696c6564
000064  20746f20
000068  616c6c6f
00006c  63617465
000070  206d656d
000074  6f727920
000078  72657175
00007c  65737400

                          AREA ||i.eap_sake_deinit||, CODE, READONLY, ALIGN=1

                  eap_sake_deinit PROC
;;;110    
;;;111    static void eap_sake_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;113    	struct eap_sake_data *data = priv;
000006  4625              MOV      r5,r4
;;;114    	os_free(data->serverid);
000008  f8d500f0          LDR      r0,[r5,#0xf0]
00000c  f7fffffe          BL       os_free
;;;115    	os_free(data->peerid);
000010  f8d500e8          LDR      r0,[r5,#0xe8]
000014  f7fffffe          BL       os_free
;;;116    	os_free(data);
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       os_free
;;;117    }
00001e  bd70              POP      {r4-r6,pc}
;;;118    
                          ENDP


                          AREA ||i.eap_sake_getKey||, CODE, READONLY, ALIGN=1

                  eap_sake_getKey PROC
;;;441    
;;;442    static u8 * eap_sake_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;443    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;444    	struct eap_sake_data *data = priv;
00000a  4627              MOV      r7,r4
;;;445    	u8 *key;
;;;446    
;;;447    	if (data->state != SUCCESS)
00000c  7838              LDRB     r0,[r7,#0]
00000e  2803              CMP      r0,#3
000010  d002              BEQ      |L7.24|
;;;448    		return NULL;
000012  2000              MOVS     r0,#0
                  |L7.20|
;;;449    
;;;450    	key = os_malloc(EAP_MSK_LEN);
;;;451    	if (key == NULL)
;;;452    		return NULL;
;;;453    	os_memcpy(key, data->msk, EAP_MSK_LEN);
;;;454    	*len = EAP_MSK_LEN;
;;;455    
;;;456    	return key;
;;;457    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L7.24|
000018  2040              MOVS     r0,#0x40              ;450
00001a  f7fffffe          BL       os_malloc
00001e  4605              MOV      r5,r0                 ;450
000020  b90d              CBNZ     r5,|L7.38|
000022  2000              MOVS     r0,#0                 ;452
000024  e7f6              B        |L7.20|
                  |L7.38|
000026  2240              MOVS     r2,#0x40              ;453
000028  f1070161          ADD      r1,r7,#0x61           ;453
00002c  4628              MOV      r0,r5                 ;453
00002e  f7fffffe          BL       os_memcpy
000032  2040              MOVS     r0,#0x40              ;454
000034  6030              STR      r0,[r6,#0]            ;454
000036  4628              MOV      r0,r5                 ;456
000038  e7ec              B        |L7.20|
;;;458    
                          ENDP


                          AREA ||i.eap_sake_get_emsk||, CODE, READONLY, ALIGN=1

                  eap_sake_get_emsk PROC
;;;459    
;;;460    static u8 * eap_sake_get_emsk(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;461    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;462    	struct eap_sake_data *data = priv;
00000a  4627              MOV      r7,r4
;;;463    	u8 *key;
;;;464    
;;;465    	if (data->state != SUCCESS)
00000c  7838              LDRB     r0,[r7,#0]
00000e  2803              CMP      r0,#3
000010  d002              BEQ      |L8.24|
;;;466    		return NULL;
000012  2000              MOVS     r0,#0
                  |L8.20|
;;;467    
;;;468    	key = os_malloc(EAP_EMSK_LEN);
;;;469    	if (key == NULL)
;;;470    		return NULL;
;;;471    	os_memcpy(key, data->emsk, EAP_EMSK_LEN);
;;;472    	*len = EAP_EMSK_LEN;
;;;473    
;;;474    	return key;
;;;475    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L8.24|
000018  2040              MOVS     r0,#0x40              ;468
00001a  f7fffffe          BL       os_malloc
00001e  4605              MOV      r5,r0                 ;468
000020  b90d              CBNZ     r5,|L8.38|
000022  2000              MOVS     r0,#0                 ;470
000024  e7f6              B        |L8.20|
                  |L8.38|
000026  2240              MOVS     r2,#0x40              ;471
000028  f10701a1          ADD      r1,r7,#0xa1           ;471
00002c  4628              MOV      r0,r5                 ;471
00002e  f7fffffe          BL       os_memcpy
000032  2040              MOVS     r0,#0x40              ;472
000034  6030              STR      r0,[r6,#0]            ;472
000036  4628              MOV      r0,r5                 ;474
000038  e7ec              B        |L8.20|
;;;476    
                          ENDP


                          AREA ||i.eap_sake_init||, CODE, READONLY, ALIGN=2

                  eap_sake_init PROC
;;;72     
;;;73     static void * eap_sake_init(struct eap_sm *sm)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;74     {
000004  4607              MOV      r7,r0
;;;75     	struct eap_sake_data *data;
;;;76     	const u8 *identity, *password;
;;;77     	size_t identity_len, password_len;
;;;78     
;;;79     	password = eap_get_config_password(sm, &password_len);
000006  4669              MOV      r1,sp
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       eap_get_config_password
00000e  4606              MOV      r6,r0
;;;80     	if (!password || password_len != 2 * EAP_SAKE_ROOT_SECRET_LEN) {
000010  b116              CBZ      r6,|L9.24|
000012  9800              LDR      r0,[sp,#0]
000014  2820              CMP      r0,#0x20
000016  d006              BEQ      |L9.38|
                  |L9.24|
;;;81     		wpa_printf(MSG_INFO, "EAP-SAKE: No key of correct length "
000018  a11d              ADR      r1,|L9.144|
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       wpa_printf
;;;82     			   "configured");
;;;83     		return NULL;
000020  2000              MOVS     r0,#0
                  |L9.34|
;;;84     	}
;;;85     
;;;86     	data = os_zalloc(sizeof(*data));
;;;87     	if (data == NULL)
;;;88     		return NULL;
;;;89     	data->state = IDENTITY;
;;;90     
;;;91     	identity = eap_get_config_identity(sm, &identity_len);
;;;92     	if (identity) {
;;;93     		data->peerid = os_malloc(identity_len);
;;;94     		if (data->peerid == NULL) {
;;;95     			eap_sake_deinit(sm, data);
;;;96     			return NULL;
;;;97     		}
;;;98     		os_memcpy(data->peerid, identity, identity_len);
;;;99     		data->peerid_len = identity_len;
;;;100    	}
;;;101    
;;;102    	os_memcpy(data->root_secret_a, password, EAP_SAKE_ROOT_SECRET_LEN);
;;;103    	os_memcpy(data->root_secret_b,
;;;104    		  password + EAP_SAKE_ROOT_SECRET_LEN,
;;;105    		  EAP_SAKE_ROOT_SECRET_LEN);
;;;106    
;;;107    	return data;
;;;108    }
000022  e8bd81fc          POP      {r2-r8,pc}
                  |L9.38|
000026  20f8              MOVS     r0,#0xf8              ;86
000028  f7fffffe          BL       os_zalloc
00002c  4604              MOV      r4,r0                 ;86
00002e  b90c              CBNZ     r4,|L9.52|
000030  2000              MOVS     r0,#0                 ;88
000032  e7f6              B        |L9.34|
                  |L9.52|
000034  2000              MOVS     r0,#0                 ;89
000036  7020              STRB     r0,[r4,#0]            ;89
000038  a901              ADD      r1,sp,#4              ;91
00003a  4638              MOV      r0,r7                 ;91
00003c  f7fffffe          BL       eap_get_config_identity
000040  4605              MOV      r5,r0                 ;91
000042  b1b5              CBZ      r5,|L9.114|
000044  9801              LDR      r0,[sp,#4]            ;93
000046  f7fffffe          BL       os_malloc
00004a  f8c400e8          STR      r0,[r4,#0xe8]         ;93
00004e  f8d400e8          LDR      r0,[r4,#0xe8]         ;94
000052  b928              CBNZ     r0,|L9.96|
000054  4621              MOV      r1,r4                 ;95
000056  4638              MOV      r0,r7                 ;95
000058  f7fffffe          BL       eap_sake_deinit
00005c  2000              MOVS     r0,#0                 ;96
00005e  e7e0              B        |L9.34|
                  |L9.96|
000060  f8d400e8          LDR      r0,[r4,#0xe8]         ;98
000064  4629              MOV      r1,r5                 ;98
000066  9a01              LDR      r2,[sp,#4]            ;98
000068  f7fffffe          BL       os_memcpy
00006c  9801              LDR      r0,[sp,#4]            ;99
00006e  f8c400ec          STR      r0,[r4,#0xec]         ;99
                  |L9.114|
000072  2210              MOVS     r2,#0x10              ;102
000074  4631              MOV      r1,r6                 ;102
000076  1c60              ADDS     r0,r4,#1              ;102
000078  f7fffffe          BL       os_memcpy
00007c  2210              MOVS     r2,#0x10              ;103
00007e  f1060110          ADD      r1,r6,#0x10           ;103
000082  f1040011          ADD      r0,r4,#0x11           ;103
000086  f7fffffe          BL       os_memcpy
00008a  4620              MOV      r0,r4                 ;107
00008c  e7c9              B        |L9.34|
;;;109    
                          ENDP

00008e  0000              DCW      0x0000
                  |L9.144|
000090  4541502d          DCB      "EAP-SAKE: No key of correct length configured",0
000094  53414b45
000098  3a204e6f
00009c  206b6579
0000a0  206f6620
0000a4  636f7272
0000a8  65637420
0000ac  6c656e67
0000b0  74682063
0000b4  6f6e6669
0000b8  67757265
0000bc  6400    
0000be  00                DCB      0
0000bf  00                DCB      0

                          AREA ||i.eap_sake_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_sake_isKeyAvailable PROC
;;;434    
;;;435    static Boolean eap_sake_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;436    {
;;;437    	struct eap_sake_data *data = priv;
000002  460a              MOV      r2,r1
;;;438    	return data->state == SUCCESS;
000004  7810              LDRB     r0,[r2,#0]
000006  2803              CMP      r0,#3
000008  d101              BNE      |L10.14|
00000a  2001              MOVS     r0,#1
                  |L10.12|
;;;439    }
00000c  4770              BX       lr
                  |L10.14|
00000e  2000              MOVS     r0,#0                 ;438
000010  e7fc              B        |L10.12|
;;;440    
                          ENDP


                          AREA ||i.eap_sake_process||, CODE, READONLY, ALIGN=2

                  eap_sake_process PROC
;;;365    
;;;366    static struct wpabuf * eap_sake_process(struct eap_sm *sm, void *priv,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;367    					struct eap_method_ret *ret,
;;;368    					const struct wpabuf *reqData)
;;;369    {
000004  b083              SUB      sp,sp,#0xc
000006  4615              MOV      r5,r2
;;;370    	struct eap_sake_data *data = priv;
000008  9e04              LDR      r6,[sp,#0x10]
;;;371    	const struct eap_sake_hdr *req;
;;;372    	struct wpabuf *resp;
;;;373    	const u8 *pos, *end;
;;;374    	size_t len;
;;;375    	u8 subtype, session_id;
;;;376    
;;;377    	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_SAKE, reqData, &len);
00000a  ab02              ADD      r3,sp,#8
00000c  2130              MOVS     r1,#0x30
00000e  2000              MOVS     r0,#0
000010  9a06              LDR      r2,[sp,#0x18]
000012  f7fffffe          BL       eap_hdr_validate
000016  4604              MOV      r4,r0
;;;378    	if (pos == NULL || len < sizeof(struct eap_sake_hdr)) {
000018  b114              CBZ      r4,|L11.32|
00001a  9802              LDR      r0,[sp,#8]
00001c  2803              CMP      r0,#3
00001e  d205              BCS      |L11.44|
                  |L11.32|
;;;379    		ret->ignore = TRUE;
000020  2001              MOVS     r0,#1
000022  6028              STR      r0,[r5,#0]
;;;380    		return NULL;
000024  2000              MOVS     r0,#0
                  |L11.38|
;;;381    	}
;;;382    
;;;383    	req = (const struct eap_sake_hdr *) pos;
;;;384    	end = pos + len;
;;;385    	subtype = req->subtype;
;;;386    	session_id = req->session_id;
;;;387    	pos = (const u8 *) (req + 1);
;;;388    
;;;389    	wpa_printf(MSG_DEBUG, "EAP-SAKE: Received frame: subtype %d "
;;;390    		   "session_id %d", subtype, session_id);
;;;391    	wpa_hexdump(MSG_DEBUG, "EAP-SAKE: Received attributes",
;;;392    		    pos, end - pos);
;;;393    
;;;394    	if (data->session_id_set && data->session_id != session_id) {
;;;395    		wpa_printf(MSG_INFO, "EAP-SAKE: Session ID mismatch (%d,%d)",
;;;396    			   session_id, data->session_id);
;;;397    		ret->ignore = TRUE;
;;;398    		return NULL;
;;;399    	}
;;;400    	data->session_id = session_id;
;;;401    	data->session_id_set = 1;
;;;402    
;;;403    	ret->ignore = FALSE;
;;;404    	ret->methodState = METHOD_MAY_CONT;
;;;405    	ret->decision = DECISION_FAIL;
;;;406    	ret->allowNotifications = TRUE;
;;;407    
;;;408    	switch (subtype) {
;;;409    	case EAP_SAKE_SUBTYPE_IDENTITY:
;;;410    		resp = eap_sake_process_identity(sm, data, ret, reqData,
;;;411    						 pos, end - pos);
;;;412    		break;
;;;413    	case EAP_SAKE_SUBTYPE_CHALLENGE:
;;;414    		resp = eap_sake_process_challenge(sm, data, ret, reqData,
;;;415    						  pos, end - pos);
;;;416    		break;
;;;417    	case EAP_SAKE_SUBTYPE_CONFIRM:
;;;418    		resp = eap_sake_process_confirm(sm, data, ret, reqData,
;;;419    						pos, end - pos);
;;;420    		break;
;;;421    	default:
;;;422    		wpa_printf(MSG_DEBUG, "EAP-SAKE: Ignoring message with "
;;;423    			   "unknown subtype %d", subtype);
;;;424    		ret->ignore = TRUE;
;;;425    		return NULL;
;;;426    	}
;;;427    
;;;428    	if (ret->methodState == METHOD_DONE)
;;;429    		ret->allowNotifications = FALSE;
;;;430    
;;;431    	return resp;
;;;432    }
000026  b007              ADD      sp,sp,#0x1c
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.44|
00002c  4627              MOV      r7,r4                 ;383
00002e  9802              LDR      r0,[sp,#8]            ;384
000030  eb040800          ADD      r8,r4,r0              ;384
000034  463c              MOV      r4,r7                 ;385
000036  f897b002          LDRB     r11,[r7,#2]           ;385
00003a  f8979001          LDRB     r9,[r7,#1]            ;386
00003e  1cf8              ADDS     r0,r7,#3              ;387
000040  4604              MOV      r4,r0                 ;387
000042  464b              MOV      r3,r9                 ;389
000044  465a              MOV      r2,r11                ;389
000046  a134              ADR      r1,|L11.280|
000048  2000              MOVS     r0,#0                 ;389
00004a  f7fffffe          BL       wpa_printf
00004e  eba80304          SUB      r3,r8,r4              ;391
000052  4622              MOV      r2,r4                 ;391
000054  a13d              ADR      r1,|L11.332|
000056  2000              MOVS     r0,#0                 ;391
000058  f7fffffe          BL       wpa_hexdump
00005c  f8d600e4          LDR      r0,[r6,#0xe4]         ;394
000060  b170              CBZ      r0,|L11.128|
000062  f89600e1          LDRB     r0,[r6,#0xe1]         ;394
000066  4548              CMP      r0,r9                 ;394
000068  d00a              BEQ      |L11.128|
00006a  f89630e1          LDRB     r3,[r6,#0xe1]         ;395
00006e  464a              MOV      r2,r9                 ;395
000070  a13e              ADR      r1,|L11.364|
000072  2000              MOVS     r0,#0                 ;395
000074  f7fffffe          BL       wpa_printf
000078  2001              MOVS     r0,#1                 ;397
00007a  6028              STR      r0,[r5,#0]            ;397
00007c  2000              MOVS     r0,#0                 ;398
00007e  e7d2              B        |L11.38|
                  |L11.128|
000080  f88690e1          STRB     r9,[r6,#0xe1]         ;400
000084  2001              MOVS     r0,#1                 ;401
000086  f8c600e4          STR      r0,[r6,#0xe4]         ;401
00008a  2000              MOVS     r0,#0                 ;403
00008c  6028              STR      r0,[r5,#0]            ;403
00008e  2003              MOVS     r0,#3                 ;404
000090  7128              STRB     r0,[r5,#4]            ;404
000092  2000              MOVS     r0,#0                 ;405
000094  7168              STRB     r0,[r5,#5]            ;405
000096  2001              MOVS     r0,#1                 ;406
000098  60a8              STR      r0,[r5,#8]            ;406
00009a  f1bb0f01          CMP      r11,#1                ;408
00009e  d011              BEQ      |L11.196|
0000a0  f1bb0f02          CMP      r11,#2                ;408
0000a4  d01a              BEQ      |L11.220|
0000a6  f1bb0f04          CMP      r11,#4                ;408
0000aa  d123              BNE      |L11.244|
0000ac  eba80304          SUB      r3,r8,r4              ;410
0000b0  e9cd4300          STRD     r4,r3,[sp,#0]         ;410
0000b4  462a              MOV      r2,r5                 ;410
0000b6  4631              MOV      r1,r6                 ;410
0000b8  9b06              LDR      r3,[sp,#0x18]         ;410
0000ba  9803              LDR      r0,[sp,#0xc]          ;410
0000bc  f7fffffe          BL       eap_sake_process_identity
0000c0  4682              MOV      r10,r0                ;410
0000c2  e020              B        |L11.262|
                  |L11.196|
0000c4  eba80304          SUB      r3,r8,r4              ;414
0000c8  e9cd4300          STRD     r4,r3,[sp,#0]         ;414
0000cc  462a              MOV      r2,r5                 ;414
0000ce  4631              MOV      r1,r6                 ;414
0000d0  9b06              LDR      r3,[sp,#0x18]         ;414
0000d2  9803              LDR      r0,[sp,#0xc]          ;414
0000d4  f7fffffe          BL       eap_sake_process_challenge
0000d8  4682              MOV      r10,r0                ;414
0000da  e014              B        |L11.262|
                  |L11.220|
0000dc  eba80304          SUB      r3,r8,r4              ;418
0000e0  e9cd4300          STRD     r4,r3,[sp,#0]         ;418
0000e4  462a              MOV      r2,r5                 ;418
0000e6  4631              MOV      r1,r6                 ;418
0000e8  9b06              LDR      r3,[sp,#0x18]         ;418
0000ea  9803              LDR      r0,[sp,#0xc]          ;418
0000ec  f7fffffe          BL       eap_sake_process_confirm
0000f0  4682              MOV      r10,r0                ;418
0000f2  e008              B        |L11.262|
                  |L11.244|
0000f4  465a              MOV      r2,r11                ;422
0000f6  a127              ADR      r1,|L11.404|
0000f8  2000              MOVS     r0,#0                 ;422
0000fa  f7fffffe          BL       wpa_printf
0000fe  2001              MOVS     r0,#1                 ;424
000100  6028              STR      r0,[r5,#0]            ;424
000102  2000              MOVS     r0,#0                 ;425
000104  e78f              B        |L11.38|
                  |L11.262|
000106  bf00              NOP                            ;412
000108  7928              LDRB     r0,[r5,#4]            ;428
00010a  2804              CMP      r0,#4                 ;428
00010c  d101              BNE      |L11.274|
00010e  2000              MOVS     r0,#0                 ;429
000110  60a8              STR      r0,[r5,#8]            ;429
                  |L11.274|
000112  4650              MOV      r0,r10                ;431
000114  e787              B        |L11.38|
;;;433    
                          ENDP

000116  0000              DCW      0x0000
                  |L11.280|
000118  4541502d          DCB      "EAP-SAKE: Received frame: subtype %d session_id %d",0
00011c  53414b45
000120  3a205265
000124  63656976
000128  65642066
00012c  72616d65
000130  3a207375
000134  62747970
000138  65202564
00013c  20736573
000140  73696f6e
000144  5f696420
000148  256400  
00014b  00                DCB      0
                  |L11.332|
00014c  4541502d          DCB      "EAP-SAKE: Received attributes",0
000150  53414b45
000154  3a205265
000158  63656976
00015c  65642061
000160  74747269
000164  62757465
000168  7300    
00016a  00                DCB      0
00016b  00                DCB      0
                  |L11.364|
00016c  4541502d          DCB      "EAP-SAKE: Session ID mismatch (%d,%d)",0
000170  53414b45
000174  3a205365
000178  7373696f
00017c  6e204944
000180  206d6973
000184  6d617463
000188  68202825
00018c  642c2564
000190  2900    
000192  00                DCB      0
000193  00                DCB      0
                  |L11.404|
000194  4541502d          DCB      "EAP-SAKE: Ignoring message with unknown subtype %d",0
000198  53414b45
00019c  3a204967
0001a0  6e6f7269
0001a4  6e67206d
0001a8  65737361
0001ac  67652077
0001b0  69746820
0001b4  756e6b6e
0001b8  6f776e20
0001bc  73756274
0001c0  79706520
0001c4  256400  
0001c7  00                DCB      0

                          AREA ||i.eap_sake_process_challenge||, CODE, READONLY, ALIGN=2

                  eap_sake_process_challenge PROC
;;;189    
;;;190    static struct wpabuf * eap_sake_process_challenge(struct eap_sm *sm,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;191    						  struct eap_sake_data *data,
;;;192    						  struct eap_method_ret *ret,
;;;193    						  const struct wpabuf *reqData,
;;;194    						  const u8 *payload,
;;;195    						  size_t payload_len)
;;;196    {
000004  b09f              SUB      sp,sp,#0x7c
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dd9a28          LDRD     r9,r10,[sp,#0xa0]
;;;197    	struct eap_sake_parse_attr attr;
;;;198    	struct wpabuf *resp;
;;;199    	u8 *rpos;
;;;200    	size_t rlen;
;;;201    
;;;202    	if (data->state != IDENTITY && data->state != CHALLENGE) {
000010  7820              LDRB     r0,[r4,#0]
000012  b168              CBZ      r0,|L12.48|
000014  7820              LDRB     r0,[r4,#0]
000016  2801              CMP      r0,#1
000018  d00a              BEQ      |L12.48|
;;;203    		wpa_printf(MSG_DEBUG, "EAP-SAKE: Request/Challenge received "
00001a  7822              LDRB     r2,[r4,#0]
00001c  a174              ADR      r1,|L12.496|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       wpa_printf
;;;204    			   "in unexpected state (%d)", data->state);
;;;205    		ret->ignore = TRUE;
000024  2001              MOVS     r0,#1
000026  6038              STR      r0,[r7,#0]
;;;206    		return NULL;
000028  2000              MOVS     r0,#0
                  |L12.42|
;;;207    	}
;;;208    	if (data->state == IDENTITY)
;;;209    		eap_sake_state(data, CHALLENGE);
;;;210    
;;;211    	wpa_printf(MSG_DEBUG, "EAP-SAKE: Received Request/Challenge");
;;;212    
;;;213    	if (eap_sake_parse_attributes(payload, payload_len, &attr))
;;;214    		return NULL;
;;;215    
;;;216    	if (!attr.rand_s) {
;;;217    		wpa_printf(MSG_INFO, "EAP-SAKE: Request/Challenge did not "
;;;218    			   "include AT_RAND_S");
;;;219    		return NULL;
;;;220    	}
;;;221    
;;;222    	os_memcpy(data->rand_s, attr.rand_s, EAP_SAKE_RAND_LEN);
;;;223    	wpa_hexdump(MSG_MSGDUMP, "EAP-SAKE: RAND_S (server rand)",
;;;224    		    data->rand_s, EAP_SAKE_RAND_LEN);
;;;225    
;;;226    	if (os_get_random(data->rand_p, EAP_SAKE_RAND_LEN)) {
;;;227    		wpa_printf(MSG_ERROR, "EAP-SAKE: Failed to get random data");
;;;228    		return NULL;
;;;229    	}
;;;230    	wpa_hexdump(MSG_MSGDUMP, "EAP-SAKE: RAND_P (peer rand)",
;;;231    		    data->rand_p, EAP_SAKE_RAND_LEN);
;;;232    
;;;233    	os_free(data->serverid);
;;;234    	data->serverid = NULL;
;;;235    	data->serverid_len = 0;
;;;236    	if (attr.serverid) {
;;;237    		wpa_hexdump_ascii(MSG_MSGDUMP, "EAP-SAKE: SERVERID",
;;;238    				  attr.serverid, attr.serverid_len);
;;;239    		data->serverid = os_malloc(attr.serverid_len);
;;;240    		if (data->serverid == NULL)
;;;241    			return NULL;
;;;242    		os_memcpy(data->serverid, attr.serverid, attr.serverid_len);
;;;243    		data->serverid_len = attr.serverid_len;
;;;244    	}
;;;245    
;;;246    	eap_sake_derive_keys(data->root_secret_a, data->root_secret_b,
;;;247    			     data->rand_s, data->rand_p,
;;;248    			     (u8 *) &data->tek, data->msk, data->emsk);
;;;249    
;;;250    	wpa_printf(MSG_DEBUG, "EAP-SAKE: Sending Response/Challenge");
;;;251    
;;;252    	rlen = 2 + EAP_SAKE_RAND_LEN + 2 + EAP_SAKE_MIC_LEN;
;;;253    	if (data->peerid)
;;;254    		rlen += 2 + data->peerid_len;
;;;255    	resp = eap_sake_build_msg(data, eap_get_id(reqData), rlen,
;;;256    				  EAP_SAKE_SUBTYPE_CHALLENGE);
;;;257    	if (resp == NULL)
;;;258    		return NULL;
;;;259    
;;;260    	wpa_printf(MSG_DEBUG, "EAP-SAKE: * AT_RAND_P");
;;;261    	eap_sake_add_attr(resp, EAP_SAKE_AT_RAND_P,
;;;262    			  data->rand_p, EAP_SAKE_RAND_LEN);
;;;263    
;;;264    	if (data->peerid) {
;;;265    		wpa_printf(MSG_DEBUG, "EAP-SAKE: * AT_PEERID");
;;;266    		eap_sake_add_attr(resp, EAP_SAKE_AT_PEERID,
;;;267    				  data->peerid, data->peerid_len);
;;;268    	}
;;;269    
;;;270    	wpa_printf(MSG_DEBUG, "EAP-SAKE: * AT_MIC_P");
;;;271    	wpabuf_put_u8(resp, EAP_SAKE_AT_MIC_P);
;;;272    	wpabuf_put_u8(resp, 2 + EAP_SAKE_MIC_LEN);
;;;273    	rpos = wpabuf_put(resp, EAP_SAKE_MIC_LEN);
;;;274    	if (eap_sake_compute_mic(data->tek.auth, data->rand_s, data->rand_p,
;;;275    				 data->serverid, data->serverid_len,
;;;276    				 data->peerid, data->peerid_len, 1,
;;;277    				 wpabuf_head(resp), wpabuf_len(resp), rpos,
;;;278    				 rpos)) {
;;;279    		wpa_printf(MSG_INFO, "EAP-SAKE: Failed to compute MIC");
;;;280    		wpabuf_free(resp);
;;;281    		return NULL;
;;;282    	}
;;;283    
;;;284    	eap_sake_state(data, CONFIRM);
;;;285    
;;;286    	return resp;
;;;287    }
00002a  b01f              ADD      sp,sp,#0x7c
00002c  e8bd8ff0          POP      {r4-r11,pc}
                  |L12.48|
000030  7820              LDRB     r0,[r4,#0]            ;208
000032  b918              CBNZ     r0,|L12.60|
000034  2101              MOVS     r1,#1                 ;209
000036  4620              MOV      r0,r4                 ;209
000038  f7fffffe          BL       eap_sake_state
                  |L12.60|
00003c  a17c              ADR      r1,|L12.560|
00003e  2000              MOVS     r0,#0                 ;211
000040  f7fffffe          BL       wpa_printf
000044  aa0a              ADD      r2,sp,#0x28           ;213
000046  4651              MOV      r1,r10                ;213
000048  4648              MOV      r0,r9                 ;213
00004a  f7fffffe          BL       eap_sake_parse_attributes
00004e  b108              CBZ      r0,|L12.84|
000050  2000              MOVS     r0,#0                 ;214
000052  e7ea              B        |L12.42|
                  |L12.84|
000054  980a              LDR      r0,[sp,#0x28]         ;216
000056  b928              CBNZ     r0,|L12.100|
000058  a17f              ADR      r1,|L12.600|
00005a  2000              MOVS     r0,#0                 ;217
00005c  f7fffffe          BL       wpa_printf
000060  2000              MOVS     r0,#0                 ;219
000062  e7e2              B        |L12.42|
                  |L12.100|
000064  2210              MOVS     r2,#0x10              ;222
000066  f1040021          ADD      r0,r4,#0x21           ;222
00006a  990a              LDR      r1,[sp,#0x28]         ;222
00006c  f7fffffe          BL       os_memcpy
000070  2310              MOVS     r3,#0x10              ;223
000072  f1040221          ADD      r2,r4,#0x21           ;223
000076  a186              ADR      r1,|L12.656|
000078  2000              MOVS     r0,#0                 ;223
00007a  f7fffffe          BL       wpa_hexdump
00007e  2110              MOVS     r1,#0x10              ;226
000080  f1040031          ADD      r0,r4,#0x31           ;226
000084  f7fffffe          BL       os_get_random
000088  b128              CBZ      r0,|L12.150|
00008a  a189              ADR      r1,|L12.688|
00008c  2000              MOVS     r0,#0                 ;227
00008e  f7fffffe          BL       wpa_printf
000092  2000              MOVS     r0,#0                 ;228
000094  e7c9              B        |L12.42|
                  |L12.150|
000096  2310              MOVS     r3,#0x10              ;230
000098  f1040231          ADD      r2,r4,#0x31           ;230
00009c  a18d              ADR      r1,|L12.724|
00009e  2000              MOVS     r0,#0                 ;230
0000a0  f7fffffe          BL       wpa_hexdump
0000a4  f8540ff0          LDR      r0,[r4,#0xf0]!        ;233
0000a8  f7fffffe          BL       os_free
0000ac  2000              MOVS     r0,#0                 ;234
0000ae  6020              STR      r0,[r4,#0]            ;234
0000b0  6060              STR      r0,[r4,#4]            ;235
0000b2  f1a404f0          SUB      r4,r4,#0xf0           ;235
0000b6  980e              LDR      r0,[sp,#0x38]         ;236
0000b8  b1c0              CBZ      r0,|L12.236|
0000ba  a18e              ADR      r1,|L12.756|
0000bc  2000              MOVS     r0,#0                 ;237
0000be  e9dd230e          LDRD     r2,r3,[sp,#0x38]      ;237
0000c2  f7fffffe          BL       wpa_hexdump_ascii
0000c6  980f              LDR      r0,[sp,#0x3c]         ;239
0000c8  f7fffffe          BL       os_malloc
0000cc  f8c400f0          STR      r0,[r4,#0xf0]         ;239
0000d0  f8d400f0          LDR      r0,[r4,#0xf0]         ;240
0000d4  b908              CBNZ     r0,|L12.218|
0000d6  2000              MOVS     r0,#0                 ;241
0000d8  e7a7              B        |L12.42|
                  |L12.218|
0000da  e9dd120e          LDRD     r1,r2,[sp,#0x38]      ;242
0000de  f8d400f0          LDR      r0,[r4,#0xf0]         ;242
0000e2  f7fffffe          BL       os_memcpy
0000e6  980f              LDR      r0,[sp,#0x3c]         ;243
0000e8  f8c400f4          STR      r0,[r4,#0xf4]         ;243
                  |L12.236|
0000ec  f10403a1          ADD      r3,r4,#0xa1           ;246
0000f0  f1040261          ADD      r2,r4,#0x61           ;246
0000f4  f1040141          ADD      r1,r4,#0x41           ;246
0000f8  e88d000e          STM      sp,{r1-r3}            ;246
0000fc  3b70              SUBS     r3,r3,#0x70           ;246
0000fe  3a40              SUBS     r2,r2,#0x40           ;246
000100  3930              SUBS     r1,r1,#0x30           ;246
000102  1c60              ADDS     r0,r4,#1              ;246
000104  f7fffffe          BL       eap_sake_derive_keys
000108  a17f              ADR      r1,|L12.776|
00010a  2000              MOVS     r0,#0                 ;250
00010c  f7fffffe          BL       wpa_printf
000110  2624              MOVS     r6,#0x24              ;252
000112  f8d400e8          LDR      r0,[r4,#0xe8]         ;253
000116  b118              CBZ      r0,|L12.288|
000118  f8d400ec          LDR      r0,[r4,#0xec]         ;254
00011c  1c80              ADDS     r0,r0,#2              ;254
00011e  4406              ADD      r6,r6,r0              ;254
                  |L12.288|
000120  4640              MOV      r0,r8                 ;255
000122  f7fffffe          BL       eap_get_id
000126  2301              MOVS     r3,#1                 ;255
000128  4632              MOV      r2,r6                 ;255
00012a  4601              MOV      r1,r0                 ;255
00012c  9009              STR      r0,[sp,#0x24]         ;255
00012e  4620              MOV      r0,r4                 ;255
000130  f7fffffe          BL       eap_sake_build_msg
000134  4605              MOV      r5,r0                 ;255
000136  b90d              CBNZ     r5,|L12.316|
000138  2000              MOVS     r0,#0                 ;258
00013a  e776              B        |L12.42|
                  |L12.316|
00013c  a17c              ADR      r1,|L12.816|
00013e  2000              MOVS     r0,#0                 ;260
000140  f7fffffe          BL       wpa_printf
000144  2310              MOVS     r3,#0x10              ;261
000146  f1040231          ADD      r2,r4,#0x31           ;261
00014a  2102              MOVS     r1,#2                 ;261
00014c  4628              MOV      r0,r5                 ;261
00014e  f7fffffe          BL       eap_sake_add_attr
000152  f8d400e8          LDR      r0,[r4,#0xe8]         ;264
000156  b148              CBZ      r0,|L12.364|
000158  a17b              ADR      r1,|L12.840|
00015a  2000              MOVS     r0,#0                 ;265
00015c  f7fffffe          BL       wpa_printf
000160  2106              MOVS     r1,#6                 ;266
000162  4628              MOV      r0,r5                 ;266
000164  e9d4233a          LDRD     r2,r3,[r4,#0xe8]      ;266
000168  f7fffffe          BL       eap_sake_add_attr
                  |L12.364|
00016c  a17c              ADR      r1,|L12.864|
00016e  2000              MOVS     r0,#0                 ;270
000170  f7fffffe          BL       wpa_printf
000174  2104              MOVS     r1,#4                 ;271
000176  4628              MOV      r0,r5                 ;271
000178  f7fffffe          BL       wpabuf_put_u8
00017c  2112              MOVS     r1,#0x12              ;272
00017e  4628              MOV      r0,r5                 ;272
000180  f7fffffe          BL       wpabuf_put_u8
000184  2110              MOVS     r1,#0x10              ;273
000186  4628              MOV      r0,r5                 ;273
000188  f7fffffe          BL       wpabuf_put
00018c  4683              MOV      r11,r0                ;273
00018e  4628              MOV      r0,r5                 ;274
000190  f7fffffe          BL       wpabuf_len
000194  9009              STR      r0,[sp,#0x24]         ;274
000196  4628              MOV      r0,r5                 ;274
000198  f7fffffe          BL       wpabuf_head
00019c  9008              STR      r0,[sp,#0x20]         ;274
00019e  9909              LDR      r1,[sp,#0x24]         ;274
0001a0  e9cd1b05          STRD     r1,r11,[sp,#0x14]     ;274
0001a4  2301              MOVS     r3,#1                 ;274
0001a6  f10404e8          ADD      r4,r4,#0xe8           ;274
0001aa  f8cdb01c          STR      r11,[sp,#0x1c]        ;274
0001ae  9004              STR      r0,[sp,#0x10]         ;274
0001b0  e9d41200          LDRD     r1,r2,[r4,#0]         ;274
0001b4  68e0              LDR      r0,[r4,#0xc]          ;274
0001b6  e88d000f          STM      sp,{r0-r3}            ;274
0001ba  68a3              LDR      r3,[r4,#8]            ;274
0001bc  f1a404e8          SUB      r4,r4,#0xe8           ;274
0001c0  f1040231          ADD      r2,r4,#0x31           ;274
0001c4  f1040121          ADD      r1,r4,#0x21           ;274
0001c8  f1040041          ADD      r0,r4,#0x41           ;274
0001cc  f7fffffe          BL       eap_sake_compute_mic
0001d0  b140              CBZ      r0,|L12.484|
0001d2  a169              ADR      r1,|L12.888|
0001d4  2000              MOVS     r0,#0                 ;279
0001d6  f7fffffe          BL       wpa_printf
0001da  4628              MOV      r0,r5                 ;280
0001dc  f7fffffe          BL       wpabuf_free
0001e0  2000              MOVS     r0,#0                 ;281
0001e2  e722              B        |L12.42|
                  |L12.484|
0001e4  2102              MOVS     r1,#2                 ;284
0001e6  4620              MOV      r0,r4                 ;284
0001e8  f7fffffe          BL       eap_sake_state
0001ec  4628              MOV      r0,r5                 ;286
0001ee  e71c              B        |L12.42|
;;;288    
                          ENDP

                  |L12.496|
0001f0  4541502d          DCB      "EAP-SAKE: Request/Challenge received in unexpected stat"
0001f4  53414b45
0001f8  3a205265
0001fc  71756573
000200  742f4368
000204  616c6c65
000208  6e676520
00020c  72656365
000210  69766564
000214  20696e20
000218  756e6578
00021c  70656374
000220  65642073
000224  746174  
000227  65202825          DCB      "e (%d)",0
00022b  642900  
00022e  00                DCB      0
00022f  00                DCB      0
                  |L12.560|
000230  4541502d          DCB      "EAP-SAKE: Received Request/Challenge",0
000234  53414b45
000238  3a205265
00023c  63656976
000240  65642052
000244  65717565
000248  73742f43
00024c  68616c6c
000250  656e6765
000254  00      
000255  00                DCB      0
000256  00                DCB      0
000257  00                DCB      0
                  |L12.600|
000258  4541502d          DCB      "EAP-SAKE: Request/Challenge did not include AT_RAND_S",0
00025c  53414b45
000260  3a205265
000264  71756573
000268  742f4368
00026c  616c6c65
000270  6e676520
000274  64696420
000278  6e6f7420
00027c  696e636c
000280  75646520
000284  41545f52
000288  414e445f
00028c  5300    
00028e  00                DCB      0
00028f  00                DCB      0
                  |L12.656|
000290  4541502d          DCB      "EAP-SAKE: RAND_S (server rand)",0
000294  53414b45
000298  3a205241
00029c  4e445f53
0002a0  20287365
0002a4  72766572
0002a8  2072616e
0002ac  642900  
0002af  00                DCB      0
                  |L12.688|
0002b0  4541502d          DCB      "EAP-SAKE: Failed to get random data",0
0002b4  53414b45
0002b8  3a204661
0002bc  696c6564
0002c0  20746f20
0002c4  67657420
0002c8  72616e64
0002cc  6f6d2064
0002d0  61746100
                  |L12.724|
0002d4  4541502d          DCB      "EAP-SAKE: RAND_P (peer rand)",0
0002d8  53414b45
0002dc  3a205241
0002e0  4e445f50
0002e4  20287065
0002e8  65722072
0002ec  616e6429
0002f0  00      
0002f1  00                DCB      0
0002f2  00                DCB      0
0002f3  00                DCB      0
                  |L12.756|
0002f4  4541502d          DCB      "EAP-SAKE: SERVERID",0
0002f8  53414b45
0002fc  3a205345
000300  52564552
000304  494400  
000307  00                DCB      0
                  |L12.776|
000308  4541502d          DCB      "EAP-SAKE: Sending Response/Challenge",0
00030c  53414b45
000310  3a205365
000314  6e64696e
000318  67205265
00031c  73706f6e
000320  73652f43
000324  68616c6c
000328  656e6765
00032c  00      
00032d  00                DCB      0
00032e  00                DCB      0
00032f  00                DCB      0
                  |L12.816|
000330  4541502d          DCB      "EAP-SAKE: * AT_RAND_P",0
000334  53414b45
000338  3a202a20
00033c  41545f52
000340  414e445f
000344  5000    
000346  00                DCB      0
000347  00                DCB      0
                  |L12.840|
000348  4541502d          DCB      "EAP-SAKE: * AT_PEERID",0
00034c  53414b45
000350  3a202a20
000354  41545f50
000358  45455249
00035c  4400    
00035e  00                DCB      0
00035f  00                DCB      0
                  |L12.864|
000360  4541502d          DCB      "EAP-SAKE: * AT_MIC_P",0
000364  53414b45
000368  3a202a20
00036c  41545f4d
000370  49435f50
000374  00      
000375  00                DCB      0
000376  00                DCB      0
000377  00                DCB      0
                  |L12.888|
000378  4541502d          DCB      "EAP-SAKE: Failed to compute MIC",0
00037c  53414b45
000380  3a204661
000384  696c6564
000388  20746f20
00038c  636f6d70
000390  75746520
000394  4d494300

                          AREA ||i.eap_sake_process_confirm||, CODE, READONLY, ALIGN=2

                  eap_sake_process_confirm PROC
;;;289    
;;;290    static struct wpabuf * eap_sake_process_confirm(struct eap_sm *sm,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;291    						struct eap_sake_data *data,
;;;292    						struct eap_method_ret *ret,
;;;293    						const struct wpabuf *reqData,
;;;294    						const u8 *payload,
;;;295    						size_t payload_len)
;;;296    {
000004  b0a3              SUB      sp,sp,#0x8c
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
00000c  e9dd892c          LDRD     r8,r9,[sp,#0xb0]
;;;297    	struct eap_sake_parse_attr attr;
;;;298    	u8 mic_s[EAP_SAKE_MIC_LEN];
;;;299    	struct wpabuf *resp;
;;;300    	u8 *rpos;
;;;301    
;;;302    	if (data->state != CONFIRM) {
000010  7820              LDRB     r0,[r4,#0]
000012  2802              CMP      r0,#2
000014  d005              BEQ      |L13.34|
;;;303    		ret->ignore = TRUE;
000016  2001              MOVS     r0,#1
000018  6028              STR      r0,[r5,#0]
;;;304    		return NULL;
00001a  2000              MOVS     r0,#0
                  |L13.28|
;;;305    	}
;;;306    
;;;307    	wpa_printf(MSG_DEBUG, "EAP-SAKE: Received Request/Confirm");
;;;308    
;;;309    	if (eap_sake_parse_attributes(payload, payload_len, &attr))
;;;310    		return NULL;
;;;311    
;;;312    	if (!attr.mic_s) {
;;;313    		wpa_printf(MSG_INFO, "EAP-SAKE: Request/Confirm did not "
;;;314    			   "include AT_MIC_S");
;;;315    		return NULL;
;;;316    	}
;;;317    
;;;318    	eap_sake_compute_mic(data->tek.auth, data->rand_s, data->rand_p,
;;;319    			     data->serverid, data->serverid_len,
;;;320    			     data->peerid, data->peerid_len, 0,
;;;321    			     wpabuf_head(reqData), wpabuf_len(reqData),
;;;322    			     attr.mic_s, mic_s);
;;;323    	if (os_memcmp(attr.mic_s, mic_s, EAP_SAKE_MIC_LEN) != 0) {
;;;324    		wpa_printf(MSG_INFO, "EAP-SAKE: Incorrect AT_MIC_S");
;;;325    		eap_sake_state(data, FAILURE);
;;;326    		ret->methodState = METHOD_DONE;
;;;327    		ret->decision = DECISION_FAIL;
;;;328    		ret->allowNotifications = FALSE;
;;;329    		wpa_printf(MSG_DEBUG, "EAP-SAKE: Sending "
;;;330    			   "Response/Auth-Reject");
;;;331    		return eap_sake_build_msg(data, eap_get_id(reqData), 0,
;;;332    					  EAP_SAKE_SUBTYPE_AUTH_REJECT);
;;;333    	}
;;;334    
;;;335    	wpa_printf(MSG_DEBUG, "EAP-SAKE: Sending Response/Confirm");
;;;336    
;;;337    	resp = eap_sake_build_msg(data, eap_get_id(reqData),
;;;338    				  2 + EAP_SAKE_MIC_LEN,
;;;339    				  EAP_SAKE_SUBTYPE_CONFIRM);
;;;340    	if (resp == NULL)
;;;341    		return NULL;
;;;342    
;;;343    	wpa_printf(MSG_DEBUG, "EAP-SAKE: * AT_MIC_P");
;;;344    	wpabuf_put_u8(resp, EAP_SAKE_AT_MIC_P);
;;;345    	wpabuf_put_u8(resp, 2 + EAP_SAKE_MIC_LEN);
;;;346    	rpos = wpabuf_put(resp, EAP_SAKE_MIC_LEN);
;;;347    	if (eap_sake_compute_mic(data->tek.auth, data->rand_s, data->rand_p,
;;;348    				 data->serverid, data->serverid_len,
;;;349    				 data->peerid, data->peerid_len, 1,
;;;350    				 wpabuf_head(resp), wpabuf_len(resp), rpos,
;;;351    				 rpos)) {
;;;352    		wpa_printf(MSG_INFO, "EAP-SAKE: Failed to compute MIC");
;;;353    		wpabuf_free(resp);
;;;354    		return NULL;
;;;355    	}
;;;356    
;;;357    	eap_sake_state(data, SUCCESS);
;;;358    	ret->methodState = METHOD_DONE;
;;;359    	ret->decision = DECISION_UNCOND_SUCC;
;;;360    	ret->allowNotifications = FALSE;
;;;361    
;;;362    	return resp;
;;;363    }
00001c  b023              ADD      sp,sp,#0x8c
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L13.34|
000022  a157              ADR      r1,|L13.384|
000024  2000              MOVS     r0,#0                 ;307
000026  f7fffffe          BL       wpa_printf
00002a  aa0e              ADD      r2,sp,#0x38           ;309
00002c  4649              MOV      r1,r9                 ;309
00002e  4640              MOV      r0,r8                 ;309
000030  f7fffffe          BL       eap_sake_parse_attributes
000034  b108              CBZ      r0,|L13.58|
000036  2000              MOVS     r0,#0                 ;310
000038  e7f0              B        |L13.28|
                  |L13.58|
00003a  9810              LDR      r0,[sp,#0x40]         ;312
00003c  b928              CBNZ     r0,|L13.74|
00003e  a159              ADR      r1,|L13.420|
000040  2000              MOVS     r0,#0                 ;313
000042  f7fffffe          BL       wpa_printf
000046  2000              MOVS     r0,#0                 ;315
000048  e7e8              B        |L13.28|
                  |L13.74|
00004a  4638              MOV      r0,r7                 ;318
00004c  f7fffffe          BL       wpabuf_len
000050  4683              MOV      r11,r0                ;318
000052  4638              MOV      r0,r7                 ;318
000054  f7fffffe          BL       wpabuf_head
000058  ab0a              ADD      r3,sp,#0x28           ;318
00005a  9009              STR      r0,[sp,#0x24]         ;318
00005c  9a10              LDR      r2,[sp,#0x40]         ;318
00005e  e9cdb205          STRD     r11,r2,[sp,#0x14]     ;318
000062  9307              STR      r3,[sp,#0x1c]         ;318
000064  9004              STR      r0,[sp,#0x10]         ;318
000066  2300              MOVS     r3,#0                 ;318
000068  f10404e8          ADD      r4,r4,#0xe8           ;318
00006c  e9d41200          LDRD     r1,r2,[r4,#0]         ;318
000070  68e0              LDR      r0,[r4,#0xc]          ;318
000072  e88d000f          STM      sp,{r0-r3}            ;318
000076  68a3              LDR      r3,[r4,#8]            ;318
000078  f1a404e8          SUB      r4,r4,#0xe8           ;318
00007c  f1040231          ADD      r2,r4,#0x31           ;318
000080  f1040121          ADD      r1,r4,#0x21           ;318
000084  f1040041          ADD      r0,r4,#0x41           ;318
000088  f7fffffe          BL       eap_sake_compute_mic
00008c  2210              MOVS     r2,#0x10              ;323
00008e  a90a              ADD      r1,sp,#0x28           ;323
000090  9810              LDR      r0,[sp,#0x40]         ;323
000092  f7fffffe          BL       os_memcmp
000096  b1d0              CBZ      r0,|L13.206|
000098  a14f              ADR      r1,|L13.472|
00009a  2000              MOVS     r0,#0                 ;324
00009c  f7fffffe          BL       wpa_printf
0000a0  2104              MOVS     r1,#4                 ;325
0000a2  4620              MOV      r0,r4                 ;325
0000a4  f7fffffe          BL       eap_sake_state
0000a8  2004              MOVS     r0,#4                 ;326
0000aa  7128              STRB     r0,[r5,#4]            ;326
0000ac  2000              MOVS     r0,#0                 ;327
0000ae  7168              STRB     r0,[r5,#5]            ;327
0000b0  60a8              STR      r0,[r5,#8]            ;328
0000b2  a151              ADR      r1,|L13.504|
0000b4  f7fffffe          BL       wpa_printf
0000b8  4638              MOV      r0,r7                 ;331
0000ba  f7fffffe          BL       eap_get_id
0000be  4683              MOV      r11,r0                ;331
0000c0  2303              MOVS     r3,#3                 ;331
0000c2  2200              MOVS     r2,#0                 ;331
0000c4  4601              MOV      r1,r0                 ;331
0000c6  4620              MOV      r0,r4                 ;331
0000c8  f7fffffe          BL       eap_sake_build_msg
0000cc  e7a6              B        |L13.28|
                  |L13.206|
0000ce  a154              ADR      r1,|L13.544|
0000d0  2000              MOVS     r0,#0                 ;335
0000d2  f7fffffe          BL       wpa_printf
0000d6  4638              MOV      r0,r7                 ;337
0000d8  f7fffffe          BL       eap_get_id
0000dc  4683              MOV      r11,r0                ;337
0000de  2302              MOVS     r3,#2                 ;337
0000e0  2212              MOVS     r2,#0x12              ;337
0000e2  4601              MOV      r1,r0                 ;337
0000e4  4620              MOV      r0,r4                 ;337
0000e6  f7fffffe          BL       eap_sake_build_msg
0000ea  4606              MOV      r6,r0                 ;337
0000ec  b90e              CBNZ     r6,|L13.242|
0000ee  2000              MOVS     r0,#0                 ;341
0000f0  e794              B        |L13.28|
                  |L13.242|
0000f2  a154              ADR      r1,|L13.580|
0000f4  2000              MOVS     r0,#0                 ;343
0000f6  f7fffffe          BL       wpa_printf
0000fa  2104              MOVS     r1,#4                 ;344
0000fc  4630              MOV      r0,r6                 ;344
0000fe  f7fffffe          BL       wpabuf_put_u8
000102  2112              MOVS     r1,#0x12              ;345
000104  4630              MOV      r0,r6                 ;345
000106  f7fffffe          BL       wpabuf_put_u8
00010a  2110              MOVS     r1,#0x10              ;346
00010c  4630              MOV      r0,r6                 ;346
00010e  f7fffffe          BL       wpabuf_put
000112  4682              MOV      r10,r0                ;346
000114  4630              MOV      r0,r6                 ;347
000116  f7fffffe          BL       wpabuf_len
00011a  4683              MOV      r11,r0                ;347
00011c  4630              MOV      r0,r6                 ;347
00011e  f7fffffe          BL       wpabuf_head
000122  9009              STR      r0,[sp,#0x24]         ;347
000124  e9cdba05          STRD     r11,r10,[sp,#0x14]    ;347
000128  2301              MOVS     r3,#1                 ;347
00012a  f10404e8          ADD      r4,r4,#0xe8           ;347
00012e  f8cda01c          STR      r10,[sp,#0x1c]        ;347
000132  9004              STR      r0,[sp,#0x10]         ;347
000134  e9d41200          LDRD     r1,r2,[r4,#0]         ;347
000138  68e0              LDR      r0,[r4,#0xc]          ;347
00013a  e88d000f          STM      sp,{r0-r3}            ;347
00013e  68a3              LDR      r3,[r4,#8]            ;347
000140  f1a404e8          SUB      r4,r4,#0xe8           ;347
000144  f1040231          ADD      r2,r4,#0x31           ;347
000148  f1040121          ADD      r1,r4,#0x21           ;347
00014c  f1040041          ADD      r0,r4,#0x41           ;347
000150  f7fffffe          BL       eap_sake_compute_mic
000154  b140              CBZ      r0,|L13.360|
000156  a141              ADR      r1,|L13.604|
000158  2000              MOVS     r0,#0                 ;352
00015a  f7fffffe          BL       wpa_printf
00015e  4630              MOV      r0,r6                 ;353
000160  f7fffffe          BL       wpabuf_free
000164  2000              MOVS     r0,#0                 ;354
000166  e759              B        |L13.28|
                  |L13.360|
000168  2103              MOVS     r1,#3                 ;357
00016a  4620              MOV      r0,r4                 ;357
00016c  f7fffffe          BL       eap_sake_state
000170  2004              MOVS     r0,#4                 ;358
000172  7128              STRB     r0,[r5,#4]            ;358
000174  2002              MOVS     r0,#2                 ;359
000176  7168              STRB     r0,[r5,#5]            ;359
000178  2000              MOVS     r0,#0                 ;360
00017a  60a8              STR      r0,[r5,#8]            ;360
00017c  4630              MOV      r0,r6                 ;362
00017e  e74d              B        |L13.28|
;;;364    
                          ENDP

                  |L13.384|
000180  4541502d          DCB      "EAP-SAKE: Received Request/Confirm",0
000184  53414b45
000188  3a205265
00018c  63656976
000190  65642052
000194  65717565
000198  73742f43
00019c  6f6e6669
0001a0  726d00  
0001a3  00                DCB      0
                  |L13.420|
0001a4  4541502d          DCB      "EAP-SAKE: Request/Confirm did not include AT_MIC_S",0
0001a8  53414b45
0001ac  3a205265
0001b0  71756573
0001b4  742f436f
0001b8  6e666972
0001bc  6d206469
0001c0  64206e6f
0001c4  7420696e
0001c8  636c7564
0001cc  65204154
0001d0  5f4d4943
0001d4  5f5300  
0001d7  00                DCB      0
                  |L13.472|
0001d8  4541502d          DCB      "EAP-SAKE: Incorrect AT_MIC_S",0
0001dc  53414b45
0001e0  3a20496e
0001e4  636f7272
0001e8  65637420
0001ec  41545f4d
0001f0  49435f53
0001f4  00      
0001f5  00                DCB      0
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L13.504|
0001f8  4541502d          DCB      "EAP-SAKE: Sending Response/Auth-Reject",0
0001fc  53414b45
000200  3a205365
000204  6e64696e
000208  67205265
00020c  73706f6e
000210  73652f41
000214  7574682d
000218  52656a65
00021c  637400  
00021f  00                DCB      0
                  |L13.544|
000220  4541502d          DCB      "EAP-SAKE: Sending Response/Confirm",0
000224  53414b45
000228  3a205365
00022c  6e64696e
000230  67205265
000234  73706f6e
000238  73652f43
00023c  6f6e6669
000240  726d00  
000243  00                DCB      0
                  |L13.580|
000244  4541502d          DCB      "EAP-SAKE: * AT_MIC_P",0
000248  53414b45
00024c  3a202a20
000250  41545f4d
000254  49435f50
000258  00      
000259  00                DCB      0
00025a  00                DCB      0
00025b  00                DCB      0
                  |L13.604|
00025c  4541502d          DCB      "EAP-SAKE: Failed to compute MIC",0
000260  53414b45
000264  3a204661
000268  696c6564
00026c  20746f20
000270  636f6d70
000274  75746520
000278  4d494300

                          AREA ||i.eap_sake_process_identity||, CODE, READONLY, ALIGN=2

                  eap_sake_process_identity PROC
;;;145    
;;;146    static struct wpabuf * eap_sake_process_identity(struct eap_sm *sm,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;147    						 struct eap_sake_data *data,
;;;148    						 struct eap_method_ret *ret,
;;;149    						 const struct wpabuf *reqData,
;;;150    						 const u8 *payload,
;;;151    						 size_t payload_len)
;;;152    {
000004  b095              SUB      sp,sp,#0x54
000006  4683              MOV      r11,r0
000008  460c              MOV      r4,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  e9dd891e          LDRD     r8,r9,[sp,#0x78]
;;;153    	struct eap_sake_parse_attr attr;
;;;154    	struct wpabuf *resp;
;;;155    
;;;156    	if (data->state != IDENTITY) {
000012  7820              LDRB     r0,[r4,#0]
000014  b128              CBZ      r0,|L14.34|
;;;157    		ret->ignore = TRUE;
000016  2001              MOVS     r0,#1
000018  6030              STR      r0,[r6,#0]
;;;158    		return NULL;
00001a  2000              MOVS     r0,#0
                  |L14.28|
;;;159    	}
;;;160    
;;;161    	wpa_printf(MSG_DEBUG, "EAP-SAKE: Received Request/Identity");
;;;162    
;;;163    	if (eap_sake_parse_attributes(payload, payload_len, &attr))
;;;164    		return NULL;
;;;165    
;;;166    	if (!attr.perm_id_req && !attr.any_id_req) {
;;;167    		wpa_printf(MSG_INFO, "EAP-SAKE: No AT_PERM_ID_REQ or "
;;;168    			   "AT_ANY_ID_REQ in Request/Identity");
;;;169    		return NULL;
;;;170    	}
;;;171    
;;;172    	wpa_printf(MSG_DEBUG, "EAP-SAKE: Sending Response/Identity");
;;;173    
;;;174    	resp = eap_sake_build_msg(data, eap_get_id(reqData),
;;;175    				  2 + data->peerid_len,
;;;176    				  EAP_SAKE_SUBTYPE_IDENTITY);
;;;177    	if (resp == NULL)
;;;178    		return NULL;
;;;179    
;;;180    	wpa_printf(MSG_DEBUG, "EAP-SAKE: * AT_PEERID");
;;;181    	eap_sake_add_attr(resp, EAP_SAKE_AT_PEERID,
;;;182    			  data->peerid, data->peerid_len);
;;;183    
;;;184    	eap_sake_state(data, CHALLENGE);
;;;185    
;;;186    	return resp;
;;;187    }
00001c  b015              ADD      sp,sp,#0x54
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L14.34|
000022  a11d              ADR      r1,|L14.152|
000024  2000              MOVS     r0,#0                 ;161
000026  f7fffffe          BL       wpa_printf
00002a  466a              MOV      r2,sp                 ;163
00002c  4649              MOV      r1,r9                 ;163
00002e  4640              MOV      r0,r8                 ;163
000030  f7fffffe          BL       eap_sake_parse_attributes
000034  b108              CBZ      r0,|L14.58|
000036  2000              MOVS     r0,#0                 ;164
000038  e7f0              B        |L14.28|
                  |L14.58|
00003a  980d              LDR      r0,[sp,#0x34]         ;166
00003c  b938              CBNZ     r0,|L14.78|
00003e  980c              LDR      r0,[sp,#0x30]         ;166
000040  b928              CBNZ     r0,|L14.78|
000042  491e              LDR      r1,|L14.188|
000044  2000              MOVS     r0,#0                 ;167
000046  f7fffffe          BL       wpa_printf
00004a  2000              MOVS     r0,#0                 ;169
00004c  e7e6              B        |L14.28|
                  |L14.78|
00004e  a11c              ADR      r1,|L14.192|
000050  2000              MOVS     r0,#0                 ;172
000052  f7fffffe          BL       wpa_printf
000056  4638              MOV      r0,r7                 ;174
000058  f7fffffe          BL       eap_get_id
00005c  4682              MOV      r10,r0                ;174
00005e  f8d400ec          LDR      r0,[r4,#0xec]         ;174
000062  1c82              ADDS     r2,r0,#2              ;174
000064  2304              MOVS     r3,#4                 ;174
000066  4651              MOV      r1,r10                ;174
000068  4620              MOV      r0,r4                 ;174
00006a  f7fffffe          BL       eap_sake_build_msg
00006e  4605              MOV      r5,r0                 ;174
000070  b90d              CBNZ     r5,|L14.118|
000072  2000              MOVS     r0,#0                 ;178
000074  e7d2              B        |L14.28|
                  |L14.118|
000076  a11b              ADR      r1,|L14.228|
000078  2000              MOVS     r0,#0                 ;180
00007a  f7fffffe          BL       wpa_printf
00007e  2106              MOVS     r1,#6                 ;181
000080  4628              MOV      r0,r5                 ;181
000082  e9d4233a          LDRD     r2,r3,[r4,#0xe8]      ;181
000086  f7fffffe          BL       eap_sake_add_attr
00008a  2101              MOVS     r1,#1                 ;184
00008c  4620              MOV      r0,r4                 ;184
00008e  f7fffffe          BL       eap_sake_state
000092  4628              MOV      r0,r5                 ;186
000094  e7c2              B        |L14.28|
;;;188    
                          ENDP

000096  0000              DCW      0x0000
                  |L14.152|
000098  4541502d          DCB      "EAP-SAKE: Received Request/Identity",0
00009c  53414b45
0000a0  3a205265
0000a4  63656976
0000a8  65642052
0000ac  65717565
0000b0  73742f49
0000b4  64656e74
0000b8  69747900
                  |L14.188|
                          DCD      ||.constdata||
                  |L14.192|
0000c0  4541502d          DCB      "EAP-SAKE: Sending Response/Identity",0
0000c4  53414b45
0000c8  3a205365
0000cc  6e64696e
0000d0  67205265
0000d4  73706f6e
0000d8  73652f49
0000dc  64656e74
0000e0  69747900
                  |L14.228|
0000e4  4541502d          DCB      "EAP-SAKE: * AT_PEERID",0
0000e8  53414b45
0000ec  3a202a20
0000f0  41545f50
0000f4  45455249
0000f8  4400    
0000fa  00                DCB      0
0000fb  00                DCB      0

                          AREA ||i.eap_sake_state||, CODE, READONLY, ALIGN=2

                  eap_sake_state PROC
;;;60     
;;;61     static void eap_sake_state(struct eap_sake_data *data, int state)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;62     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;63     	wpa_printf(MSG_DEBUG, "EAP-SAKE: %s -> %s",
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       eap_sake_state_txt
00000e  4606              MOV      r6,r0
000010  7820              LDRB     r0,[r4,#0]
000012  f7fffffe          BL       eap_sake_state_txt
000016  4607              MOV      r7,r0
000018  4633              MOV      r3,r6
00001a  4602              MOV      r2,r0
00001c  a103              ADR      r1,|L15.44|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       wpa_printf
;;;64     		   eap_sake_state_txt(data->state),
;;;65     		   eap_sake_state_txt(state));
;;;66     	data->state = state;
000024  7025              STRB     r5,[r4,#0]
;;;67     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;68     
                          ENDP

00002a  0000              DCW      0x0000
                  |L15.44|
00002c  4541502d          DCB      "EAP-SAKE: %s -> %s",0
000030  53414b45
000034  3a202573
000038  202d3e20
00003c  257300  
00003f  00                DCB      0

                          AREA ||i.eap_sake_state_txt||, CODE, READONLY, ALIGN=2

                  eap_sake_state_txt PROC
;;;41     
;;;42     static const char * eap_sake_state_txt(int state)
000000  4601              MOV      r1,r0
;;;43     {
;;;44     	switch (state) {
000002  2905              CMP      r1,#5
000004  d20e              BCS      |L16.36|
000006  e8dff001          TBB      [pc,r1]
00000a  0305              DCB      0x03,0x05
00000c  07090b00          DCB      0x07,0x09,0x0b,0x00
;;;45     	case IDENTITY:
;;;46     		return "IDENTITY";
000010  a005              ADR      r0,|L16.40|
                  |L16.18|
;;;47     	case CHALLENGE:
;;;48     		return "CHALLENGE";
;;;49     	case CONFIRM:
;;;50     		return "CONFIRM";
;;;51     	case SUCCESS:
;;;52     		return "SUCCESS";
;;;53     	case FAILURE:
;;;54     		return "FAILURE";
;;;55     	default:
;;;56     		return "?";
;;;57     	}
;;;58     }
000012  4770              BX       lr
000014  a007              ADR      r0,|L16.52|
000016  e7fc              B        |L16.18|
000018  a009              ADR      r0,|L16.64|
00001a  e7fa              B        |L16.18|
00001c  a00a              ADR      r0,|L16.72|
00001e  e7f8              B        |L16.18|
000020  a00b              ADR      r0,|L16.80|
000022  e7f6              B        |L16.18|
                  |L16.36|
000024  a00c              ADR      r0,|L16.88|
000026  e7f4              B        |L16.18|
;;;59     
                          ENDP

                  |L16.40|
000028  4944454e          DCB      "IDENTITY",0
00002c  54495459
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
                  |L16.52|
000034  4348414c          DCB      "CHALLENGE",0
000038  4c454e47
00003c  4500    
00003e  00                DCB      0
00003f  00                DCB      0
                  |L16.64|
000040  434f4e46          DCB      "CONFIRM",0
000044  49524d00
                  |L16.72|
000048  53554343          DCB      "SUCCESS",0
00004c  45535300
                  |L16.80|
000050  4641494c          DCB      "FAILURE",0
000054  55524500
                  |L16.88|
000058  3f00              DCB      "?",0
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L17.30|
00001a  2001              MOVS     r0,#1
                  |L17.28|
;;;495    }
00001c  4770              BX       lr
                  |L17.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L17.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L22.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L22.14|
                  |L22.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L22.12|
;;;70     }
00000c  4770              BX       lr
                  |L22.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L22.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L23.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L23.16|
                  |L23.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L23.14|
;;;76     }
00000e  4770              BX       lr
                  |L23.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L23.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L24.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L24.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L24.18|
                  |L24.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L24.16|
;;;57     }
000010  4770              BX       lr
                  |L24.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L24.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L25.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L25.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L25.20|
                  |L25.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L25.18|
;;;64     }
000012  4770              BX       lr
                  |L25.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L25.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L26.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L26.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L26.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L26.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L29.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L29.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L29.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L29.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L35.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L35.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  53414b45          DCB      0x53,0x41,0x4b,0x45
000008  3a204e6f          DCB      0x3a,0x20,0x4e,0x6f
00000c  2041545f          DCB      0x20,0x41,0x54,0x5f
000010  5045524d          DCB      0x50,0x45,0x52,0x4d
000014  5f49445f          DCB      0x5f,0x49,0x44,0x5f
000018  52455120          DCB      0x52,0x45,0x51,0x20
00001c  6f722041          DCB      0x6f,0x72,0x20,0x41
000020  545f414e          DCB      0x54,0x5f,0x41,0x4e
000024  595f4944          DCB      0x59,0x5f,0x49,0x44
000028  5f524551          DCB      0x5f,0x52,0x45,0x51
00002c  20696e20          DCB      0x20,0x69,0x6e,0x20
000030  52657175          DCB      0x52,0x65,0x71,0x75
000034  6573742f          DCB      0x65,0x73,0x74,0x2f
000038  4964656e          DCB      0x49,0x64,0x65,0x6e
00003c  74697479          DCB      0x74,0x69,0x74,0x79
000040  00                DCB      0x00
