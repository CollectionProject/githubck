; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\md5-internal.o --depend=.\obj\md5-internal.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\md5-internal.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\md5-internal.c]
                          THUMB

                          AREA ||i.MD5Final||, CODE, READONLY, ALIGN=1

                  MD5Final PROC
;;;152     */
;;;153    void MD5Final(unsigned char digest[16], struct MD5Context *ctx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;154    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
;;;155        unsigned count;
;;;156        unsigned char *p;
;;;157    
;;;158        /* Compute number of bytes mod 64 */
;;;159        count = (ctx->bits[0] >> 3) & 0x3F;
000008  6920              LDR      r0,[r4,#0x10]
00000a  f3c005c5          UBFX     r5,r0,#3,#6
;;;160    
;;;161        /* Set the first char of padding to 0x80.  This is safe since there is
;;;162           always at least one byte free */
;;;163        p = ctx->in + count;
00000e  f1040018          ADD      r0,r4,#0x18
000012  1946              ADDS     r6,r0,r5
;;;164        *p++ = 0x80;
000014  2080              MOVS     r0,#0x80
000016  f8060b01          STRB     r0,[r6],#1
;;;165    
;;;166        /* Bytes of padding needed to make 64 bytes */
;;;167        count = 64 - 1 - count;
00001a  f1c5053f          RSB      r5,r5,#0x3f
;;;168    
;;;169        /* Pad out to 56 mod 64 */
;;;170        if (count < 8) {
00001e  2d08              CMP      r5,#8
000020  d210              BCS      |L1.68|
;;;171    	/* Two lots of padding:  Pad the first block to 64 bytes */
;;;172    	os_memset(p, 0, count);
000022  462a              MOV      r2,r5
000024  2100              MOVS     r1,#0
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       os_memset
;;;173    	byteReverse(ctx->in, 16);
;;;174    	MD5Transform(ctx->buf, (u32 *) ctx->in);
00002c  f1040118          ADD      r1,r4,#0x18
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       MD5Transform
;;;175    
;;;176    	/* Now fill the next block with 56 bytes */
;;;177    	os_memset(ctx->in, 0, 56);
000036  2238              MOVS     r2,#0x38
000038  2100              MOVS     r1,#0
00003a  f1040018          ADD      r0,r4,#0x18
00003e  f7fffffe          BL       os_memset
000042  e005              B        |L1.80|
                  |L1.68|
;;;178        } else {
;;;179    	/* Pad block to 56 bytes */
;;;180    	os_memset(p, 0, count - 8);
000044  f1a50208          SUB      r2,r5,#8
000048  2100              MOVS     r1,#0
00004a  4630              MOV      r0,r6
00004c  f7fffffe          BL       os_memset
                  |L1.80|
;;;181        }
;;;182        byteReverse(ctx->in, 14);
;;;183    
;;;184        /* Append length in bits and transform */
;;;185        ((u32 *) ctx->in)[14] = ctx->bits[0];
000050  6921              LDR      r1,[r4,#0x10]
000052  6521              STR      r1,[r4,#0x50]
;;;186        ((u32 *) ctx->in)[15] = ctx->bits[1];
000054  6961              LDR      r1,[r4,#0x14]
000056  6561              STR      r1,[r4,#0x54]
;;;187    
;;;188        MD5Transform(ctx->buf, (u32 *) ctx->in);
000058  f1040118          ADD      r1,r4,#0x18
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       MD5Transform
;;;189        byteReverse((unsigned char *) ctx->buf, 4);
;;;190        os_memcpy(digest, ctx->buf, 16);
000062  2210              MOVS     r2,#0x10
000064  4621              MOV      r1,r4
000066  4638              MOV      r0,r7
000068  f7fffffe          BL       os_memcpy
;;;191        os_memset(ctx, 0, sizeof(ctx));	/* In case it's sensitive */
00006c  2204              MOVS     r2,#4
00006e  2100              MOVS     r1,#0
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       os_memset
;;;192    }
000076  e8bd81f0          POP      {r4-r8,pc}
;;;193    
                          ENDP


                          AREA ||i.MD5Init||, CODE, READONLY, ALIGN=2

                  MD5Init PROC
;;;89      */
;;;90     void MD5Init(struct MD5Context *ctx)
000000  4907              LDR      r1,|L2.32|
;;;91     {
;;;92         ctx->buf[0] = 0x67452301;
000002  6001              STR      r1,[r0,#0]
;;;93         ctx->buf[1] = 0xefcdab89;
000004  4907              LDR      r1,|L2.36|
000006  6041              STR      r1,[r0,#4]
;;;94         ctx->buf[2] = 0x98badcfe;
000008  4905              LDR      r1,|L2.32|
00000a  43c9              MVNS     r1,r1
00000c  6081              STR      r1,[r0,#8]
;;;95         ctx->buf[3] = 0x10325476;
00000e  4905              LDR      r1,|L2.36|
000010  43c9              MVNS     r1,r1
000012  60c1              STR      r1,[r0,#0xc]
;;;96     
;;;97         ctx->bits[0] = 0;
000014  2100              MOVS     r1,#0
000016  6101              STR      r1,[r0,#0x10]
;;;98         ctx->bits[1] = 0;
000018  2200              MOVS     r2,#0
00001a  6142              STR      r2,[r0,#0x14]
;;;99     }
00001c  4770              BX       lr
;;;100    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0x67452301
                  |L2.36|
                          DCD      0xefcdab89

                          AREA ||i.MD5Transform||, CODE, READONLY, ALIGN=2

                  MD5Transform PROC
;;;210     */
;;;211    static void MD5Transform(u32 buf[4], u32 const in[16])
000000  b5f0              PUSH     {r4-r7,lr}
;;;212    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;213        register u32 a, b, c, d;
;;;214    
;;;215        a = buf[0];
000006  6828              LDR      r0,[r5,#0]
;;;216        b = buf[1];
000008  6869              LDR      r1,[r5,#4]
;;;217        c = buf[2];
00000a  68aa              LDR      r2,[r5,#8]
;;;218        d = buf[3];
00000c  68eb              LDR      r3,[r5,#0xc]
;;;219    
;;;220        MD5STEP(F1, a, b, c, d, in[0] + 0xd76aa478, 7);
00000e  ea820603          EOR      r6,r2,r3
000012  400e              ANDS     r6,r6,r1
000014  405e              EORS     r6,r6,r3
000016  6827              LDR      r7,[r4,#0]
000018  443e              ADD      r6,r6,r7
00001a  4fff              LDR      r7,|L3.1048|
00001c  443e              ADD      r6,r6,r7
00001e  4430              ADD      r0,r0,r6
000020  01c6              LSLS     r6,r0,#7
000022  ea466050          ORR      r0,r6,r0,LSR #25
000026  4408              ADD      r0,r0,r1
;;;221        MD5STEP(F1, d, a, b, c, in[1] + 0xe8c7b756, 12);
000028  ea810602          EOR      r6,r1,r2
00002c  4006              ANDS     r6,r6,r0
00002e  4056              EORS     r6,r6,r2
000030  6867              LDR      r7,[r4,#4]
000032  443e              ADD      r6,r6,r7
000034  4ff9              LDR      r7,|L3.1052|
000036  443e              ADD      r6,r6,r7
000038  4433              ADD      r3,r3,r6
00003a  031e              LSLS     r6,r3,#12
00003c  ea465313          ORR      r3,r6,r3,LSR #20
000040  4403              ADD      r3,r3,r0
;;;222        MD5STEP(F1, c, d, a, b, in[2] + 0x242070db, 17);
000042  ea800601          EOR      r6,r0,r1
000046  401e              ANDS     r6,r6,r3
000048  404e              EORS     r6,r6,r1
00004a  68a7              LDR      r7,[r4,#8]
00004c  443e              ADD      r6,r6,r7
00004e  4ff4              LDR      r7,|L3.1056|
000050  443e              ADD      r6,r6,r7
000052  4432              ADD      r2,r2,r6
000054  0456              LSLS     r6,r2,#17
000056  ea4632d2          ORR      r2,r6,r2,LSR #15
00005a  441a              ADD      r2,r2,r3
;;;223        MD5STEP(F1, b, c, d, a, in[3] + 0xc1bdceee, 22);
00005c  ea830600          EOR      r6,r3,r0
000060  4016              ANDS     r6,r6,r2
000062  4046              EORS     r6,r6,r0
000064  68e7              LDR      r7,[r4,#0xc]
000066  443e              ADD      r6,r6,r7
000068  4fee              LDR      r7,|L3.1060|
00006a  443e              ADD      r6,r6,r7
00006c  4431              ADD      r1,r1,r6
00006e  058e              LSLS     r6,r1,#22
000070  ea462191          ORR      r1,r6,r1,LSR #10
000074  4411              ADD      r1,r1,r2
;;;224        MD5STEP(F1, a, b, c, d, in[4] + 0xf57c0faf, 7);
000076  ea820603          EOR      r6,r2,r3
00007a  400e              ANDS     r6,r6,r1
00007c  405e              EORS     r6,r6,r3
00007e  6927              LDR      r7,[r4,#0x10]
000080  443e              ADD      r6,r6,r7
000082  4fe9              LDR      r7,|L3.1064|
000084  443e              ADD      r6,r6,r7
000086  4430              ADD      r0,r0,r6
000088  01c6              LSLS     r6,r0,#7
00008a  ea466050          ORR      r0,r6,r0,LSR #25
00008e  4408              ADD      r0,r0,r1
;;;225        MD5STEP(F1, d, a, b, c, in[5] + 0x4787c62a, 12);
000090  ea810602          EOR      r6,r1,r2
000094  4006              ANDS     r6,r6,r0
000096  4056              EORS     r6,r6,r2
000098  6967              LDR      r7,[r4,#0x14]
00009a  443e              ADD      r6,r6,r7
00009c  4fe3              LDR      r7,|L3.1068|
00009e  443e              ADD      r6,r6,r7
0000a0  4433              ADD      r3,r3,r6
0000a2  031e              LSLS     r6,r3,#12
0000a4  ea465313          ORR      r3,r6,r3,LSR #20
0000a8  4403              ADD      r3,r3,r0
;;;226        MD5STEP(F1, c, d, a, b, in[6] + 0xa8304613, 17);
0000aa  ea800601          EOR      r6,r0,r1
0000ae  401e              ANDS     r6,r6,r3
0000b0  404e              EORS     r6,r6,r1
0000b2  69a7              LDR      r7,[r4,#0x18]
0000b4  443e              ADD      r6,r6,r7
0000b6  4fde              LDR      r7,|L3.1072|
0000b8  443e              ADD      r6,r6,r7
0000ba  4432              ADD      r2,r2,r6
0000bc  0456              LSLS     r6,r2,#17
0000be  ea4632d2          ORR      r2,r6,r2,LSR #15
0000c2  441a              ADD      r2,r2,r3
;;;227        MD5STEP(F1, b, c, d, a, in[7] + 0xfd469501, 22);
0000c4  ea830600          EOR      r6,r3,r0
0000c8  4016              ANDS     r6,r6,r2
0000ca  4046              EORS     r6,r6,r0
0000cc  69e7              LDR      r7,[r4,#0x1c]
0000ce  443e              ADD      r6,r6,r7
0000d0  4fd8              LDR      r7,|L3.1076|
0000d2  443e              ADD      r6,r6,r7
0000d4  4431              ADD      r1,r1,r6
0000d6  058e              LSLS     r6,r1,#22
0000d8  ea462191          ORR      r1,r6,r1,LSR #10
0000dc  4411              ADD      r1,r1,r2
;;;228        MD5STEP(F1, a, b, c, d, in[8] + 0x698098d8, 7);
0000de  ea820603          EOR      r6,r2,r3
0000e2  400e              ANDS     r6,r6,r1
0000e4  405e              EORS     r6,r6,r3
0000e6  6a27              LDR      r7,[r4,#0x20]
0000e8  443e              ADD      r6,r6,r7
0000ea  4fd3              LDR      r7,|L3.1080|
0000ec  443e              ADD      r6,r6,r7
0000ee  4430              ADD      r0,r0,r6
0000f0  01c6              LSLS     r6,r0,#7
0000f2  ea466050          ORR      r0,r6,r0,LSR #25
0000f6  4408              ADD      r0,r0,r1
;;;229        MD5STEP(F1, d, a, b, c, in[9] + 0x8b44f7af, 12);
0000f8  ea810602          EOR      r6,r1,r2
0000fc  4006              ANDS     r6,r6,r0
0000fe  4056              EORS     r6,r6,r2
000100  6a67              LDR      r7,[r4,#0x24]
000102  443e              ADD      r6,r6,r7
000104  4fcd              LDR      r7,|L3.1084|
000106  443e              ADD      r6,r6,r7
000108  4433              ADD      r3,r3,r6
00010a  031e              LSLS     r6,r3,#12
00010c  ea465313          ORR      r3,r6,r3,LSR #20
000110  4403              ADD      r3,r3,r0
;;;230        MD5STEP(F1, c, d, a, b, in[10] + 0xffff5bb1, 17);
000112  ea800601          EOR      r6,r0,r1
000116  401e              ANDS     r6,r6,r3
000118  404e              EORS     r6,r6,r1
00011a  6aa7              LDR      r7,[r4,#0x28]
00011c  443e              ADD      r6,r6,r7
00011e  f5a64624          SUB      r6,r6,#0xa400
000122  3e4f              SUBS     r6,r6,#0x4f
000124  4432              ADD      r2,r2,r6
000126  0456              LSLS     r6,r2,#17
000128  ea4632d2          ORR      r2,r6,r2,LSR #15
00012c  441a              ADD      r2,r2,r3
;;;231        MD5STEP(F1, b, c, d, a, in[11] + 0x895cd7be, 22);
00012e  ea830600          EOR      r6,r3,r0
000132  4016              ANDS     r6,r6,r2
000134  4046              EORS     r6,r6,r0
000136  6ae7              LDR      r7,[r4,#0x2c]
000138  443e              ADD      r6,r6,r7
00013a  4fc1              LDR      r7,|L3.1088|
00013c  443e              ADD      r6,r6,r7
00013e  4431              ADD      r1,r1,r6
000140  058e              LSLS     r6,r1,#22
000142  ea462191          ORR      r1,r6,r1,LSR #10
000146  4411              ADD      r1,r1,r2
;;;232        MD5STEP(F1, a, b, c, d, in[12] + 0x6b901122, 7);
000148  ea820603          EOR      r6,r2,r3
00014c  400e              ANDS     r6,r6,r1
00014e  405e              EORS     r6,r6,r3
000150  6b27              LDR      r7,[r4,#0x30]
000152  443e              ADD      r6,r6,r7
000154  4fbb              LDR      r7,|L3.1092|
000156  443e              ADD      r6,r6,r7
000158  4430              ADD      r0,r0,r6
00015a  01c6              LSLS     r6,r0,#7
00015c  ea466050          ORR      r0,r6,r0,LSR #25
000160  4408              ADD      r0,r0,r1
;;;233        MD5STEP(F1, d, a, b, c, in[13] + 0xfd987193, 12);
000162  ea810602          EOR      r6,r1,r2
000166  4006              ANDS     r6,r6,r0
000168  4056              EORS     r6,r6,r2
00016a  6b67              LDR      r7,[r4,#0x34]
00016c  443e              ADD      r6,r6,r7
00016e  4fb6              LDR      r7,|L3.1096|
000170  443e              ADD      r6,r6,r7
000172  4433              ADD      r3,r3,r6
000174  031e              LSLS     r6,r3,#12
000176  ea465313          ORR      r3,r6,r3,LSR #20
00017a  4403              ADD      r3,r3,r0
;;;234        MD5STEP(F1, c, d, a, b, in[14] + 0xa679438e, 17);
00017c  ea800601          EOR      r6,r0,r1
000180  401e              ANDS     r6,r6,r3
000182  404e              EORS     r6,r6,r1
000184  6ba7              LDR      r7,[r4,#0x38]
000186  443e              ADD      r6,r6,r7
000188  4fb0              LDR      r7,|L3.1100|
00018a  443e              ADD      r6,r6,r7
00018c  4432              ADD      r2,r2,r6
00018e  0456              LSLS     r6,r2,#17
000190  ea4632d2          ORR      r2,r6,r2,LSR #15
000194  441a              ADD      r2,r2,r3
;;;235        MD5STEP(F1, b, c, d, a, in[15] + 0x49b40821, 22);
000196  ea830600          EOR      r6,r3,r0
00019a  4016              ANDS     r6,r6,r2
00019c  4046              EORS     r6,r6,r0
00019e  6be7              LDR      r7,[r4,#0x3c]
0001a0  443e              ADD      r6,r6,r7
0001a2  4fab              LDR      r7,|L3.1104|
0001a4  443e              ADD      r6,r6,r7
0001a6  4431              ADD      r1,r1,r6
0001a8  058e              LSLS     r6,r1,#22
0001aa  ea462191          ORR      r1,r6,r1,LSR #10
0001ae  4411              ADD      r1,r1,r2
;;;236    
;;;237        MD5STEP(F2, a, b, c, d, in[1] + 0xf61e2562, 5);
0001b0  ea810602          EOR      r6,r1,r2
0001b4  401e              ANDS     r6,r6,r3
0001b6  4056              EORS     r6,r6,r2
0001b8  6867              LDR      r7,[r4,#4]
0001ba  443e              ADD      r6,r6,r7
0001bc  4fa5              LDR      r7,|L3.1108|
0001be  443e              ADD      r6,r6,r7
0001c0  4430              ADD      r0,r0,r6
0001c2  0146              LSLS     r6,r0,#5
0001c4  ea4660d0          ORR      r0,r6,r0,LSR #27
0001c8  4408              ADD      r0,r0,r1
;;;238        MD5STEP(F2, d, a, b, c, in[6] + 0xc040b340, 9);
0001ca  ea800601          EOR      r6,r0,r1
0001ce  4016              ANDS     r6,r6,r2
0001d0  404e              EORS     r6,r6,r1
0001d2  69a7              LDR      r7,[r4,#0x18]
0001d4  443e              ADD      r6,r6,r7
0001d6  4fa0              LDR      r7,|L3.1112|
0001d8  443e              ADD      r6,r6,r7
0001da  4433              ADD      r3,r3,r6
0001dc  025e              LSLS     r6,r3,#9
0001de  ea4653d3          ORR      r3,r6,r3,LSR #23
0001e2  4403              ADD      r3,r3,r0
;;;239        MD5STEP(F2, c, d, a, b, in[11] + 0x265e5a51, 14);
0001e4  ea830600          EOR      r6,r3,r0
0001e8  400e              ANDS     r6,r6,r1
0001ea  4046              EORS     r6,r6,r0
0001ec  6ae7              LDR      r7,[r4,#0x2c]
0001ee  443e              ADD      r6,r6,r7
0001f0  4f9a              LDR      r7,|L3.1116|
0001f2  443e              ADD      r6,r6,r7
0001f4  4432              ADD      r2,r2,r6
0001f6  0396              LSLS     r6,r2,#14
0001f8  ea464292          ORR      r2,r6,r2,LSR #18
0001fc  441a              ADD      r2,r2,r3
;;;240        MD5STEP(F2, b, c, d, a, in[0] + 0xe9b6c7aa, 20);
0001fe  ea820603          EOR      r6,r2,r3
000202  4006              ANDS     r6,r6,r0
000204  405e              EORS     r6,r6,r3
000206  6827              LDR      r7,[r4,#0]
000208  443e              ADD      r6,r6,r7
00020a  4f95              LDR      r7,|L3.1120|
00020c  443e              ADD      r6,r6,r7
00020e  4431              ADD      r1,r1,r6
000210  050e              LSLS     r6,r1,#20
000212  ea463111          ORR      r1,r6,r1,LSR #12
000216  4411              ADD      r1,r1,r2
;;;241        MD5STEP(F2, a, b, c, d, in[5] + 0xd62f105d, 5);
000218  ea810602          EOR      r6,r1,r2
00021c  401e              ANDS     r6,r6,r3
00021e  4056              EORS     r6,r6,r2
000220  6967              LDR      r7,[r4,#0x14]
000222  443e              ADD      r6,r6,r7
000224  4f8f              LDR      r7,|L3.1124|
000226  443e              ADD      r6,r6,r7
000228  4430              ADD      r0,r0,r6
00022a  0146              LSLS     r6,r0,#5
00022c  ea4660d0          ORR      r0,r6,r0,LSR #27
000230  4408              ADD      r0,r0,r1
;;;242        MD5STEP(F2, d, a, b, c, in[10] + 0x02441453, 9);
000232  ea800601          EOR      r6,r0,r1
000236  4016              ANDS     r6,r6,r2
000238  404e              EORS     r6,r6,r1
00023a  6aa7              LDR      r7,[r4,#0x28]
00023c  443e              ADD      r6,r6,r7
00023e  4f8a              LDR      r7,|L3.1128|
000240  443e              ADD      r6,r6,r7
000242  4433              ADD      r3,r3,r6
000244  025e              LSLS     r6,r3,#9
000246  ea4653d3          ORR      r3,r6,r3,LSR #23
00024a  4403              ADD      r3,r3,r0
;;;243        MD5STEP(F2, c, d, a, b, in[15] + 0xd8a1e681, 14);
00024c  ea830600          EOR      r6,r3,r0
000250  400e              ANDS     r6,r6,r1
000252  4046              EORS     r6,r6,r0
000254  6be7              LDR      r7,[r4,#0x3c]
000256  443e              ADD      r6,r6,r7
000258  4f84              LDR      r7,|L3.1132|
00025a  443e              ADD      r6,r6,r7
00025c  4432              ADD      r2,r2,r6
00025e  0396              LSLS     r6,r2,#14
000260  ea464292          ORR      r2,r6,r2,LSR #18
000264  441a              ADD      r2,r2,r3
;;;244        MD5STEP(F2, b, c, d, a, in[4] + 0xe7d3fbc8, 20);
000266  ea820603          EOR      r6,r2,r3
00026a  4006              ANDS     r6,r6,r0
00026c  405e              EORS     r6,r6,r3
00026e  6927              LDR      r7,[r4,#0x10]
000270  443e              ADD      r6,r6,r7
000272  4f7f              LDR      r7,|L3.1136|
000274  443e              ADD      r6,r6,r7
000276  4431              ADD      r1,r1,r6
000278  050e              LSLS     r6,r1,#20
00027a  ea463111          ORR      r1,r6,r1,LSR #12
00027e  4411              ADD      r1,r1,r2
;;;245        MD5STEP(F2, a, b, c, d, in[9] + 0x21e1cde6, 5);
000280  ea810602          EOR      r6,r1,r2
000284  401e              ANDS     r6,r6,r3
000286  4056              EORS     r6,r6,r2
000288  6a67              LDR      r7,[r4,#0x24]
00028a  443e              ADD      r6,r6,r7
00028c  4f79              LDR      r7,|L3.1140|
00028e  443e              ADD      r6,r6,r7
000290  4430              ADD      r0,r0,r6
000292  0146              LSLS     r6,r0,#5
000294  ea4660d0          ORR      r0,r6,r0,LSR #27
000298  4408              ADD      r0,r0,r1
;;;246        MD5STEP(F2, d, a, b, c, in[14] + 0xc33707d6, 9);
00029a  ea800601          EOR      r6,r0,r1
00029e  4016              ANDS     r6,r6,r2
0002a0  404e              EORS     r6,r6,r1
0002a2  6ba7              LDR      r7,[r4,#0x38]
0002a4  443e              ADD      r6,r6,r7
0002a6  4f74              LDR      r7,|L3.1144|
0002a8  443e              ADD      r6,r6,r7
0002aa  4433              ADD      r3,r3,r6
0002ac  025e              LSLS     r6,r3,#9
0002ae  ea4653d3          ORR      r3,r6,r3,LSR #23
0002b2  4403              ADD      r3,r3,r0
;;;247        MD5STEP(F2, c, d, a, b, in[3] + 0xf4d50d87, 14);
0002b4  ea830600          EOR      r6,r3,r0
0002b8  400e              ANDS     r6,r6,r1
0002ba  4046              EORS     r6,r6,r0
0002bc  68e7              LDR      r7,[r4,#0xc]
0002be  443e              ADD      r6,r6,r7
0002c0  4f6e              LDR      r7,|L3.1148|
0002c2  443e              ADD      r6,r6,r7
0002c4  4432              ADD      r2,r2,r6
0002c6  0396              LSLS     r6,r2,#14
0002c8  ea464292          ORR      r2,r6,r2,LSR #18
0002cc  441a              ADD      r2,r2,r3
;;;248        MD5STEP(F2, b, c, d, a, in[8] + 0x455a14ed, 20);
0002ce  ea820603          EOR      r6,r2,r3
0002d2  4006              ANDS     r6,r6,r0
0002d4  405e              EORS     r6,r6,r3
0002d6  6a27              LDR      r7,[r4,#0x20]
0002d8  443e              ADD      r6,r6,r7
0002da  4f69              LDR      r7,|L3.1152|
0002dc  443e              ADD      r6,r6,r7
0002de  4431              ADD      r1,r1,r6
0002e0  050e              LSLS     r6,r1,#20
0002e2  ea463111          ORR      r1,r6,r1,LSR #12
0002e6  4411              ADD      r1,r1,r2
;;;249        MD5STEP(F2, a, b, c, d, in[13] + 0xa9e3e905, 5);
0002e8  ea810602          EOR      r6,r1,r2
0002ec  401e              ANDS     r6,r6,r3
0002ee  4056              EORS     r6,r6,r2
0002f0  6b67              LDR      r7,[r4,#0x34]
0002f2  443e              ADD      r6,r6,r7
0002f4  4f63              LDR      r7,|L3.1156|
0002f6  443e              ADD      r6,r6,r7
0002f8  4430              ADD      r0,r0,r6
0002fa  0146              LSLS     r6,r0,#5
0002fc  ea4660d0          ORR      r0,r6,r0,LSR #27
000300  4408              ADD      r0,r0,r1
;;;250        MD5STEP(F2, d, a, b, c, in[2] + 0xfcefa3f8, 9);
000302  ea800601          EOR      r6,r0,r1
000306  4016              ANDS     r6,r6,r2
000308  404e              EORS     r6,r6,r1
00030a  68a7              LDR      r7,[r4,#8]
00030c  443e              ADD      r6,r6,r7
00030e  4f5e              LDR      r7,|L3.1160|
000310  443e              ADD      r6,r6,r7
000312  4433              ADD      r3,r3,r6
000314  025e              LSLS     r6,r3,#9
000316  ea4653d3          ORR      r3,r6,r3,LSR #23
00031a  4403              ADD      r3,r3,r0
;;;251        MD5STEP(F2, c, d, a, b, in[7] + 0x676f02d9, 14);
00031c  ea830600          EOR      r6,r3,r0
000320  400e              ANDS     r6,r6,r1
000322  4046              EORS     r6,r6,r0
000324  69e7              LDR      r7,[r4,#0x1c]
000326  443e              ADD      r6,r6,r7
000328  4f58              LDR      r7,|L3.1164|
00032a  443e              ADD      r6,r6,r7
00032c  4432              ADD      r2,r2,r6
00032e  0396              LSLS     r6,r2,#14
000330  ea464292          ORR      r2,r6,r2,LSR #18
000334  441a              ADD      r2,r2,r3
;;;252        MD5STEP(F2, b, c, d, a, in[12] + 0x8d2a4c8a, 20);
000336  ea820603          EOR      r6,r2,r3
00033a  4006              ANDS     r6,r6,r0
00033c  405e              EORS     r6,r6,r3
00033e  6b27              LDR      r7,[r4,#0x30]
000340  443e              ADD      r6,r6,r7
000342  4f53              LDR      r7,|L3.1168|
000344  443e              ADD      r6,r6,r7
000346  4431              ADD      r1,r1,r6
000348  050e              LSLS     r6,r1,#20
00034a  ea463111          ORR      r1,r6,r1,LSR #12
00034e  4411              ADD      r1,r1,r2
;;;253    
;;;254        MD5STEP(F3, a, b, c, d, in[5] + 0xfffa3942, 4);
000350  ea810602          EOR      r6,r1,r2
000354  405e              EORS     r6,r6,r3
000356  6967              LDR      r7,[r4,#0x14]
000358  443e              ADD      r6,r6,r7
00035a  4f4e              LDR      r7,|L3.1172|
00035c  443e              ADD      r6,r6,r7
00035e  4430              ADD      r0,r0,r6
000360  0106              LSLS     r6,r0,#4
000362  ea467010          ORR      r0,r6,r0,LSR #28
000366  4408              ADD      r0,r0,r1
;;;255        MD5STEP(F3, d, a, b, c, in[8] + 0x8771f681, 11);
000368  ea800601          EOR      r6,r0,r1
00036c  4056              EORS     r6,r6,r2
00036e  6a27              LDR      r7,[r4,#0x20]
000370  443e              ADD      r6,r6,r7
000372  4f49              LDR      r7,|L3.1176|
000374  443e              ADD      r6,r6,r7
000376  4433              ADD      r3,r3,r6
000378  02de              LSLS     r6,r3,#11
00037a  ea465353          ORR      r3,r6,r3,LSR #21
00037e  4403              ADD      r3,r3,r0
;;;256        MD5STEP(F3, c, d, a, b, in[11] + 0x6d9d6122, 16);
000380  ea830600          EOR      r6,r3,r0
000384  404e              EORS     r6,r6,r1
000386  6ae7              LDR      r7,[r4,#0x2c]
000388  443e              ADD      r6,r6,r7
00038a  4f44              LDR      r7,|L3.1180|
00038c  443e              ADD      r6,r6,r7
00038e  4432              ADD      r2,r2,r6
000390  0416              LSLS     r6,r2,#16
000392  ea464212          ORR      r2,r6,r2,LSR #16
000396  441a              ADD      r2,r2,r3
;;;257        MD5STEP(F3, b, c, d, a, in[14] + 0xfde5380c, 23);
000398  ea820603          EOR      r6,r2,r3
00039c  4046              EORS     r6,r6,r0
00039e  6ba7              LDR      r7,[r4,#0x38]
0003a0  443e              ADD      r6,r6,r7
0003a2  4f3f              LDR      r7,|L3.1184|
0003a4  443e              ADD      r6,r6,r7
0003a6  4431              ADD      r1,r1,r6
0003a8  05ce              LSLS     r6,r1,#23
0003aa  ea462151          ORR      r1,r6,r1,LSR #9
0003ae  4411              ADD      r1,r1,r2
;;;258        MD5STEP(F3, a, b, c, d, in[1] + 0xa4beea44, 4);
0003b0  ea810602          EOR      r6,r1,r2
0003b4  405e              EORS     r6,r6,r3
0003b6  6867              LDR      r7,[r4,#4]
0003b8  443e              ADD      r6,r6,r7
0003ba  4f3a              LDR      r7,|L3.1188|
0003bc  443e              ADD      r6,r6,r7
0003be  4430              ADD      r0,r0,r6
0003c0  0106              LSLS     r6,r0,#4
0003c2  ea467010          ORR      r0,r6,r0,LSR #28
0003c6  4408              ADD      r0,r0,r1
;;;259        MD5STEP(F3, d, a, b, c, in[4] + 0x4bdecfa9, 11);
0003c8  ea800601          EOR      r6,r0,r1
0003cc  4056              EORS     r6,r6,r2
0003ce  6927              LDR      r7,[r4,#0x10]
0003d0  443e              ADD      r6,r6,r7
0003d2  4f35              LDR      r7,|L3.1192|
0003d4  443e              ADD      r6,r6,r7
0003d6  4433              ADD      r3,r3,r6
0003d8  02de              LSLS     r6,r3,#11
0003da  ea465353          ORR      r3,r6,r3,LSR #21
0003de  4403              ADD      r3,r3,r0
;;;260        MD5STEP(F3, c, d, a, b, in[7] + 0xf6bb4b60, 16);
0003e0  ea830600          EOR      r6,r3,r0
0003e4  404e              EORS     r6,r6,r1
0003e6  69e7              LDR      r7,[r4,#0x1c]
0003e8  443e              ADD      r6,r6,r7
0003ea  4f30              LDR      r7,|L3.1196|
0003ec  443e              ADD      r6,r6,r7
0003ee  4432              ADD      r2,r2,r6
0003f0  0416              LSLS     r6,r2,#16
0003f2  ea464212          ORR      r2,r6,r2,LSR #16
0003f6  441a              ADD      r2,r2,r3
;;;261        MD5STEP(F3, b, c, d, a, in[10] + 0xbebfbc70, 23);
0003f8  ea820603          EOR      r6,r2,r3
0003fc  4046              EORS     r6,r6,r0
0003fe  6aa7              LDR      r7,[r4,#0x28]
000400  443e              ADD      r6,r6,r7
000402  4f2b              LDR      r7,|L3.1200|
000404  443e              ADD      r6,r6,r7
000406  4431              ADD      r1,r1,r6
000408  05ce              LSLS     r6,r1,#23
00040a  ea462151          ORR      r1,r6,r1,LSR #9
00040e  4411              ADD      r1,r1,r2
;;;262        MD5STEP(F3, a, b, c, d, in[13] + 0x289b7ec6, 4);
000410  ea810602          EOR      r6,r1,r2
000414  405e              EORS     r6,r6,r3
000416  e04d              B        |L3.1204|
                  |L3.1048|
                          DCD      0xd76aa478
                  |L3.1052|
                          DCD      0xe8c7b756
                  |L3.1056|
                          DCD      0x242070db
                  |L3.1060|
                          DCD      0xc1bdceee
                  |L3.1064|
                          DCD      0xf57c0faf
                  |L3.1068|
                          DCD      0x4787c62a
                  |L3.1072|
                          DCD      0xa8304613
                  |L3.1076|
                          DCD      0xfd469501
                  |L3.1080|
                          DCD      0x698098d8
                  |L3.1084|
                          DCD      0x8b44f7af
                  |L3.1088|
                          DCD      0x895cd7be
                  |L3.1092|
                          DCD      0x6b901122
                  |L3.1096|
                          DCD      0xfd987193
                  |L3.1100|
                          DCD      0xa679438e
                  |L3.1104|
                          DCD      0x49b40821
                  |L3.1108|
                          DCD      0xf61e2562
                  |L3.1112|
                          DCD      0xc040b340
                  |L3.1116|
                          DCD      0x265e5a51
                  |L3.1120|
                          DCD      0xe9b6c7aa
                  |L3.1124|
                          DCD      0xd62f105d
                  |L3.1128|
                          DCD      0x02441453
                  |L3.1132|
                          DCD      0xd8a1e681
                  |L3.1136|
                          DCD      0xe7d3fbc8
                  |L3.1140|
                          DCD      0x21e1cde6
                  |L3.1144|
                          DCD      0xc33707d6
                  |L3.1148|
                          DCD      0xf4d50d87
                  |L3.1152|
                          DCD      0x455a14ed
                  |L3.1156|
                          DCD      0xa9e3e905
                  |L3.1160|
                          DCD      0xfcefa3f8
                  |L3.1164|
                          DCD      0x676f02d9
                  |L3.1168|
                          DCD      0x8d2a4c8a
                  |L3.1172|
                          DCD      0xfffa3942
                  |L3.1176|
                          DCD      0x8771f681
                  |L3.1180|
                          DCD      0x6d9d6122
                  |L3.1184|
                          DCD      0xfde5380c
                  |L3.1188|
                          DCD      0xa4beea44
                  |L3.1192|
                          DCD      0x4bdecfa9
                  |L3.1196|
                          DCD      0xf6bb4b60
                  |L3.1200|
                          DCD      0xbebfbc70
                  |L3.1204|
0004b4  6b67              LDR      r7,[r4,#0x34]
0004b6  443e              ADD      r6,r6,r7
0004b8  4f93              LDR      r7,|L3.1800|
0004ba  443e              ADD      r6,r6,r7
0004bc  4430              ADD      r0,r0,r6
0004be  0106              LSLS     r6,r0,#4
0004c0  ea467010          ORR      r0,r6,r0,LSR #28
0004c4  4408              ADD      r0,r0,r1
;;;263        MD5STEP(F3, d, a, b, c, in[0] + 0xeaa127fa, 11);
0004c6  ea800601          EOR      r6,r0,r1
0004ca  4056              EORS     r6,r6,r2
0004cc  6827              LDR      r7,[r4,#0]
0004ce  443e              ADD      r6,r6,r7
0004d0  4f8e              LDR      r7,|L3.1804|
0004d2  443e              ADD      r6,r6,r7
0004d4  4433              ADD      r3,r3,r6
0004d6  02de              LSLS     r6,r3,#11
0004d8  ea465353          ORR      r3,r6,r3,LSR #21
0004dc  4403              ADD      r3,r3,r0
;;;264        MD5STEP(F3, c, d, a, b, in[3] + 0xd4ef3085, 16);
0004de  ea830600          EOR      r6,r3,r0
0004e2  404e              EORS     r6,r6,r1
0004e4  68e7              LDR      r7,[r4,#0xc]
0004e6  443e              ADD      r6,r6,r7
0004e8  4f89              LDR      r7,|L3.1808|
0004ea  443e              ADD      r6,r6,r7
0004ec  4432              ADD      r2,r2,r6
0004ee  0416              LSLS     r6,r2,#16
0004f0  ea464212          ORR      r2,r6,r2,LSR #16
0004f4  441a              ADD      r2,r2,r3
;;;265        MD5STEP(F3, b, c, d, a, in[6] + 0x04881d05, 23);
0004f6  ea820603          EOR      r6,r2,r3
0004fa  4046              EORS     r6,r6,r0
0004fc  69a7              LDR      r7,[r4,#0x18]
0004fe  443e              ADD      r6,r6,r7
000500  4f84              LDR      r7,|L3.1812|
000502  443e              ADD      r6,r6,r7
000504  4431              ADD      r1,r1,r6
000506  05ce              LSLS     r6,r1,#23
000508  ea462151          ORR      r1,r6,r1,LSR #9
00050c  4411              ADD      r1,r1,r2
;;;266        MD5STEP(F3, a, b, c, d, in[9] + 0xd9d4d039, 4);
00050e  ea810602          EOR      r6,r1,r2
000512  405e              EORS     r6,r6,r3
000514  6a67              LDR      r7,[r4,#0x24]
000516  443e              ADD      r6,r6,r7
000518  4f7f              LDR      r7,|L3.1816|
00051a  443e              ADD      r6,r6,r7
00051c  4430              ADD      r0,r0,r6
00051e  0106              LSLS     r6,r0,#4
000520  ea467010          ORR      r0,r6,r0,LSR #28
000524  4408              ADD      r0,r0,r1
;;;267        MD5STEP(F3, d, a, b, c, in[12] + 0xe6db99e5, 11);
000526  ea800601          EOR      r6,r0,r1
00052a  4056              EORS     r6,r6,r2
00052c  6b27              LDR      r7,[r4,#0x30]
00052e  443e              ADD      r6,r6,r7
000530  4f7a              LDR      r7,|L3.1820|
000532  443e              ADD      r6,r6,r7
000534  4433              ADD      r3,r3,r6
000536  02de              LSLS     r6,r3,#11
000538  ea465353          ORR      r3,r6,r3,LSR #21
00053c  4403              ADD      r3,r3,r0
;;;268        MD5STEP(F3, c, d, a, b, in[15] + 0x1fa27cf8, 16);
00053e  ea830600          EOR      r6,r3,r0
000542  404e              EORS     r6,r6,r1
000544  6be7              LDR      r7,[r4,#0x3c]
000546  443e              ADD      r6,r6,r7
000548  4f75              LDR      r7,|L3.1824|
00054a  443e              ADD      r6,r6,r7
00054c  4432              ADD      r2,r2,r6
00054e  0416              LSLS     r6,r2,#16
000550  ea464212          ORR      r2,r6,r2,LSR #16
000554  441a              ADD      r2,r2,r3
;;;269        MD5STEP(F3, b, c, d, a, in[2] + 0xc4ac5665, 23);
000556  ea820603          EOR      r6,r2,r3
00055a  4046              EORS     r6,r6,r0
00055c  68a7              LDR      r7,[r4,#8]
00055e  443e              ADD      r6,r6,r7
000560  4f70              LDR      r7,|L3.1828|
000562  443e              ADD      r6,r6,r7
000564  4431              ADD      r1,r1,r6
000566  05ce              LSLS     r6,r1,#23
000568  ea462151          ORR      r1,r6,r1,LSR #9
00056c  4411              ADD      r1,r1,r2
;;;270    
;;;271        MD5STEP(F4, a, b, c, d, in[0] + 0xf4292244, 6);
00056e  ea610603          ORN      r6,r1,r3
000572  4056              EORS     r6,r6,r2
000574  6827              LDR      r7,[r4,#0]
000576  443e              ADD      r6,r6,r7
000578  4f6b              LDR      r7,|L3.1832|
00057a  443e              ADD      r6,r6,r7
00057c  4430              ADD      r0,r0,r6
00057e  0186              LSLS     r6,r0,#6
000580  ea466090          ORR      r0,r6,r0,LSR #26
000584  4408              ADD      r0,r0,r1
;;;272        MD5STEP(F4, d, a, b, c, in[7] + 0x432aff97, 10);
000586  ea600602          ORN      r6,r0,r2
00058a  404e              EORS     r6,r6,r1
00058c  69e7              LDR      r7,[r4,#0x1c]
00058e  443e              ADD      r6,r6,r7
000590  4f66              LDR      r7,|L3.1836|
000592  443e              ADD      r6,r6,r7
000594  4433              ADD      r3,r3,r6
000596  029e              LSLS     r6,r3,#10
000598  ea465393          ORR      r3,r6,r3,LSR #22
00059c  4403              ADD      r3,r3,r0
;;;273        MD5STEP(F4, c, d, a, b, in[14] + 0xab9423a7, 15);
00059e  ea630601          ORN      r6,r3,r1
0005a2  4046              EORS     r6,r6,r0
0005a4  6ba7              LDR      r7,[r4,#0x38]
0005a6  443e              ADD      r6,r6,r7
0005a8  4f61              LDR      r7,|L3.1840|
0005aa  443e              ADD      r6,r6,r7
0005ac  4432              ADD      r2,r2,r6
0005ae  03d6              LSLS     r6,r2,#15
0005b0  ea464252          ORR      r2,r6,r2,LSR #17
0005b4  441a              ADD      r2,r2,r3
;;;274        MD5STEP(F4, b, c, d, a, in[5] + 0xfc93a039, 21);
0005b6  ea620600          ORN      r6,r2,r0
0005ba  405e              EORS     r6,r6,r3
0005bc  6967              LDR      r7,[r4,#0x14]
0005be  443e              ADD      r6,r6,r7
0005c0  4f5c              LDR      r7,|L3.1844|
0005c2  443e              ADD      r6,r6,r7
0005c4  4431              ADD      r1,r1,r6
0005c6  054e              LSLS     r6,r1,#21
0005c8  ea4621d1          ORR      r1,r6,r1,LSR #11
0005cc  4411              ADD      r1,r1,r2
;;;275        MD5STEP(F4, a, b, c, d, in[12] + 0x655b59c3, 6);
0005ce  ea610603          ORN      r6,r1,r3
0005d2  4056              EORS     r6,r6,r2
0005d4  6b27              LDR      r7,[r4,#0x30]
0005d6  443e              ADD      r6,r6,r7
0005d8  4f57              LDR      r7,|L3.1848|
0005da  443e              ADD      r6,r6,r7
0005dc  4430              ADD      r0,r0,r6
0005de  0186              LSLS     r6,r0,#6
0005e0  ea466090          ORR      r0,r6,r0,LSR #26
0005e4  4408              ADD      r0,r0,r1
;;;276        MD5STEP(F4, d, a, b, c, in[3] + 0x8f0ccc92, 10);
0005e6  ea600602          ORN      r6,r0,r2
0005ea  404e              EORS     r6,r6,r1
0005ec  68e7              LDR      r7,[r4,#0xc]
0005ee  443e              ADD      r6,r6,r7
0005f0  4f52              LDR      r7,|L3.1852|
0005f2  443e              ADD      r6,r6,r7
0005f4  4433              ADD      r3,r3,r6
0005f6  029e              LSLS     r6,r3,#10
0005f8  ea465393          ORR      r3,r6,r3,LSR #22
0005fc  4403              ADD      r3,r3,r0
;;;277        MD5STEP(F4, c, d, a, b, in[10] + 0xffeff47d, 15);
0005fe  ea630601          ORN      r6,r3,r1
000602  4046              EORS     r6,r6,r0
000604  6aa7              LDR      r7,[r4,#0x28]
000606  443e              ADD      r6,r6,r7
000608  4f4d              LDR      r7,|L3.1856|
00060a  443e              ADD      r6,r6,r7
00060c  4432              ADD      r2,r2,r6
00060e  03d6              LSLS     r6,r2,#15
000610  ea464252          ORR      r2,r6,r2,LSR #17
000614  441a              ADD      r2,r2,r3
;;;278        MD5STEP(F4, b, c, d, a, in[1] + 0x85845dd1, 21);
000616  ea620600          ORN      r6,r2,r0
00061a  405e              EORS     r6,r6,r3
00061c  6867              LDR      r7,[r4,#4]
00061e  443e              ADD      r6,r6,r7
000620  4f48              LDR      r7,|L3.1860|
000622  443e              ADD      r6,r6,r7
000624  4431              ADD      r1,r1,r6
000626  054e              LSLS     r6,r1,#21
000628  ea4621d1          ORR      r1,r6,r1,LSR #11
00062c  4411              ADD      r1,r1,r2
;;;279        MD5STEP(F4, a, b, c, d, in[8] + 0x6fa87e4f, 6);
00062e  ea610603          ORN      r6,r1,r3
000632  4056              EORS     r6,r6,r2
000634  6a27              LDR      r7,[r4,#0x20]
000636  443e              ADD      r6,r6,r7
000638  4f43              LDR      r7,|L3.1864|
00063a  443e              ADD      r6,r6,r7
00063c  4430              ADD      r0,r0,r6
00063e  0186              LSLS     r6,r0,#6
000640  ea466090          ORR      r0,r6,r0,LSR #26
000644  4408              ADD      r0,r0,r1
;;;280        MD5STEP(F4, d, a, b, c, in[15] + 0xfe2ce6e0, 10);
000646  ea600602          ORN      r6,r0,r2
00064a  404e              EORS     r6,r6,r1
00064c  6be7              LDR      r7,[r4,#0x3c]
00064e  443e              ADD      r6,r6,r7
000650  4f3e              LDR      r7,|L3.1868|
000652  443e              ADD      r6,r6,r7
000654  4433              ADD      r3,r3,r6
000656  029e              LSLS     r6,r3,#10
000658  ea465393          ORR      r3,r6,r3,LSR #22
00065c  4403              ADD      r3,r3,r0
;;;281        MD5STEP(F4, c, d, a, b, in[6] + 0xa3014314, 15);
00065e  ea630601          ORN      r6,r3,r1
000662  4046              EORS     r6,r6,r0
000664  69a7              LDR      r7,[r4,#0x18]
000666  443e              ADD      r6,r6,r7
000668  4f39              LDR      r7,|L3.1872|
00066a  443e              ADD      r6,r6,r7
00066c  4432              ADD      r2,r2,r6
00066e  03d6              LSLS     r6,r2,#15
000670  ea464252          ORR      r2,r6,r2,LSR #17
000674  441a              ADD      r2,r2,r3
;;;282        MD5STEP(F4, b, c, d, a, in[13] + 0x4e0811a1, 21);
000676  ea620600          ORN      r6,r2,r0
00067a  405e              EORS     r6,r6,r3
00067c  6b67              LDR      r7,[r4,#0x34]
00067e  443e              ADD      r6,r6,r7
000680  4f34              LDR      r7,|L3.1876|
000682  443e              ADD      r6,r6,r7
000684  4431              ADD      r1,r1,r6
000686  054e              LSLS     r6,r1,#21
000688  ea4621d1          ORR      r1,r6,r1,LSR #11
00068c  4411              ADD      r1,r1,r2
;;;283        MD5STEP(F4, a, b, c, d, in[4] + 0xf7537e82, 6);
00068e  ea610603          ORN      r6,r1,r3
000692  4056              EORS     r6,r6,r2
000694  6927              LDR      r7,[r4,#0x10]
000696  443e              ADD      r6,r6,r7
000698  4f2f              LDR      r7,|L3.1880|
00069a  443e              ADD      r6,r6,r7
00069c  4430              ADD      r0,r0,r6
00069e  0186              LSLS     r6,r0,#6
0006a0  ea466090          ORR      r0,r6,r0,LSR #26
0006a4  4408              ADD      r0,r0,r1
;;;284        MD5STEP(F4, d, a, b, c, in[11] + 0xbd3af235, 10);
0006a6  ea600602          ORN      r6,r0,r2
0006aa  404e              EORS     r6,r6,r1
0006ac  6ae7              LDR      r7,[r4,#0x2c]
0006ae  443e              ADD      r6,r6,r7
0006b0  4f2a              LDR      r7,|L3.1884|
0006b2  443e              ADD      r6,r6,r7
0006b4  4433              ADD      r3,r3,r6
0006b6  029e              LSLS     r6,r3,#10
0006b8  ea465393          ORR      r3,r6,r3,LSR #22
0006bc  4403              ADD      r3,r3,r0
;;;285        MD5STEP(F4, c, d, a, b, in[2] + 0x2ad7d2bb, 15);
0006be  ea630601          ORN      r6,r3,r1
0006c2  4046              EORS     r6,r6,r0
0006c4  68a7              LDR      r7,[r4,#8]
0006c6  443e              ADD      r6,r6,r7
0006c8  4f25              LDR      r7,|L3.1888|
0006ca  443e              ADD      r6,r6,r7
0006cc  4432              ADD      r2,r2,r6
0006ce  03d6              LSLS     r6,r2,#15
0006d0  ea464252          ORR      r2,r6,r2,LSR #17
0006d4  441a              ADD      r2,r2,r3
;;;286        MD5STEP(F4, b, c, d, a, in[9] + 0xeb86d391, 21);
0006d6  ea620600          ORN      r6,r2,r0
0006da  405e              EORS     r6,r6,r3
0006dc  6a67              LDR      r7,[r4,#0x24]
0006de  443e              ADD      r6,r6,r7
0006e0  4f20              LDR      r7,|L3.1892|
0006e2  443e              ADD      r6,r6,r7
0006e4  4431              ADD      r1,r1,r6
0006e6  054e              LSLS     r6,r1,#21
0006e8  ea4621d1          ORR      r1,r6,r1,LSR #11
0006ec  4411              ADD      r1,r1,r2
;;;287    
;;;288        buf[0] += a;
0006ee  682e              LDR      r6,[r5,#0]
0006f0  4406              ADD      r6,r6,r0
0006f2  602e              STR      r6,[r5,#0]
;;;289        buf[1] += b;
0006f4  686e              LDR      r6,[r5,#4]
0006f6  440e              ADD      r6,r6,r1
0006f8  606e              STR      r6,[r5,#4]
;;;290        buf[2] += c;
0006fa  68ae              LDR      r6,[r5,#8]
0006fc  4416              ADD      r6,r6,r2
0006fe  60ae              STR      r6,[r5,#8]
;;;291        buf[3] += d;
000700  68ee              LDR      r6,[r5,#0xc]
000702  441e              ADD      r6,r6,r3
000704  60ee              STR      r6,[r5,#0xc]
;;;292    }
000706  bdf0              POP      {r4-r7,pc}
;;;293    /* ===== end - public domain MD5 implementation ===== */
                          ENDP

                  |L3.1800|
                          DCD      0x289b7ec6
                  |L3.1804|
                          DCD      0xeaa127fa
                  |L3.1808|
                          DCD      0xd4ef3085
                  |L3.1812|
                          DCD      0x04881d05
                  |L3.1816|
                          DCD      0xd9d4d039
                  |L3.1820|
                          DCD      0xe6db99e5
                  |L3.1824|
                          DCD      0x1fa27cf8
                  |L3.1828|
                          DCD      0xc4ac5665
                  |L3.1832|
                          DCD      0xf4292244
                  |L3.1836|
                          DCD      0x432aff97
                  |L3.1840|
                          DCD      0xab9423a7
                  |L3.1844|
                          DCD      0xfc93a039
                  |L3.1848|
                          DCD      0x655b59c3
                  |L3.1852|
                          DCD      0x8f0ccc92
                  |L3.1856|
                          DCD      0xffeff47d
                  |L3.1860|
                          DCD      0x85845dd1
                  |L3.1864|
                          DCD      0x6fa87e4f
                  |L3.1868|
                          DCD      0xfe2ce6e0
                  |L3.1872|
                          DCD      0xa3014314
                  |L3.1876|
                          DCD      0x4e0811a1
                  |L3.1880|
                          DCD      0xf7537e82
                  |L3.1884|
                          DCD      0xbd3af235
                  |L3.1888|
                          DCD      0x2ad7d2bb
                  |L3.1892|
                          DCD      0xeb86d391

                          AREA ||i.MD5Update||, CODE, READONLY, ALIGN=1

                  MD5Update PROC
;;;104     */
;;;105    void MD5Update(struct MD5Context *ctx, unsigned char const *buf, unsigned len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;106    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;107        u32 t;
;;;108    
;;;109        /* Update bitcount */
;;;110    
;;;111        t = ctx->bits[0];
00000a  6925              LDR      r5,[r4,#0x10]
;;;112        if ((ctx->bits[0] = t + ((u32) len << 3)) < t)
00000c  eb0500c6          ADD      r0,r5,r6,LSL #3
000010  6120              STR      r0,[r4,#0x10]
000012  42a8              CMP      r0,r5
000014  d202              BCS      |L4.28|
;;;113    	ctx->bits[1]++;		/* Carry from low to high */
000016  6960              LDR      r0,[r4,#0x14]
000018  1c40              ADDS     r0,r0,#1
00001a  6160              STR      r0,[r4,#0x14]
                  |L4.28|
;;;114        ctx->bits[1] += len >> 29;
00001c  6960              LDR      r0,[r4,#0x14]
00001e  eb007156          ADD      r1,r0,r6,LSR #29
000022  6161              STR      r1,[r4,#0x14]
;;;115    
;;;116        t = (t >> 3) & 0x3f;	/* Bytes already in shsInfo->data */
000024  f3c505c5          UBFX     r5,r5,#3,#6
;;;117    
;;;118        /* Handle any leading odd-sized chunks */
;;;119    
;;;120        if (t) {
000028  b1dd              CBZ      r5,|L4.98|
;;;121    	unsigned char *p = (unsigned char *) ctx->in + t;
00002a  f1040018          ADD      r0,r4,#0x18
00002e  eb000805          ADD      r8,r0,r5
;;;122    
;;;123    	t = 64 - t;
000032  f1c50540          RSB      r5,r5,#0x40
;;;124    	if (len < t) {
000036  42ae              CMP      r6,r5
000038  d206              BCS      |L4.72|
;;;125    	    os_memcpy(p, buf, len);
00003a  4632              MOV      r2,r6
00003c  4639              MOV      r1,r7
00003e  4640              MOV      r0,r8
000040  f7fffffe          BL       os_memcpy
                  |L4.68|
;;;126    	    return;
;;;127    	}
;;;128    	os_memcpy(p, buf, t);
;;;129    	byteReverse(ctx->in, 16);
;;;130    	MD5Transform(ctx->buf, (u32 *) ctx->in);
;;;131    	buf += t;
;;;132    	len -= t;
;;;133        }
;;;134        /* Process data in 64-byte chunks */
;;;135    
;;;136        while (len >= 64) {
;;;137    	os_memcpy(ctx->in, buf, 64);
;;;138    	byteReverse(ctx->in, 16);
;;;139    	MD5Transform(ctx->buf, (u32 *) ctx->in);
;;;140    	buf += 64;
;;;141    	len -= 64;
;;;142        }
;;;143    
;;;144        /* Handle any remaining bytes of data. */
;;;145    
;;;146        os_memcpy(ctx->in, buf, len);
;;;147    }
000044  e8bd81f0          POP      {r4-r8,pc}
                  |L4.72|
000048  462a              MOV      r2,r5                 ;128
00004a  4639              MOV      r1,r7                 ;128
00004c  4640              MOV      r0,r8                 ;128
00004e  f7fffffe          BL       os_memcpy
000052  f1040118          ADD      r1,r4,#0x18           ;130
000056  4620              MOV      r0,r4                 ;130
000058  f7fffffe          BL       MD5Transform
00005c  442f              ADD      r7,r7,r5              ;131
00005e  1b76              SUBS     r6,r6,r5              ;132
000060  bf00              NOP                            ;133
                  |L4.98|
000062  e00c              B        |L4.126|
                  |L4.100|
000064  2240              MOVS     r2,#0x40              ;137
000066  4639              MOV      r1,r7                 ;137
000068  f1040018          ADD      r0,r4,#0x18           ;137
00006c  f7fffffe          BL       os_memcpy
000070  f1040118          ADD      r1,r4,#0x18           ;139
000074  4620              MOV      r0,r4                 ;139
000076  f7fffffe          BL       MD5Transform
00007a  3740              ADDS     r7,r7,#0x40           ;140
00007c  3e40              SUBS     r6,r6,#0x40           ;141
                  |L4.126|
00007e  2e40              CMP      r6,#0x40              ;136
000080  d2f0              BCS      |L4.100|
000082  4632              MOV      r2,r6                 ;146
000084  4639              MOV      r1,r7                 ;146
000086  f1040018          ADD      r0,r4,#0x18           ;146
00008a  f7fffffe          BL       os_memcpy
00008e  bf00              NOP      
000090  e7d8              B        |L4.68|
;;;148    
                          ENDP


                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L6.30|
00001a  2001              MOVS     r0,#1
                  |L6.28|
;;;495    }
00001c  4770              BX       lr
                  |L6.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L6.28|
;;;496    
                          ENDP


                          AREA ||i.md5_vector||, CODE, READONLY, ALIGN=1

                  md5_vector PROC
;;;36      */
;;;37     int md5_vector(size_t num_elem, const u8 *addr[], const size_t *len, u8 *mac)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;38     {
000004  b096              SUB      sp,sp,#0x58
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
;;;39     	MD5_CTX ctx;
;;;40     	size_t i;
;;;41     
;;;42     	MD5Init(&ctx);
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       MD5Init
;;;43     	for (i = 0; i < num_elem; i++)
000014  2400              MOVS     r4,#0
000016  e007              B        |L7.40|
                  |L7.24|
;;;44     		MD5Update(&ctx, addr[i], len[i]);
000018  f8572024          LDR      r2,[r7,r4,LSL #2]
00001c  f8561024          LDR      r1,[r6,r4,LSL #2]
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       MD5Update
000026  1c64              ADDS     r4,r4,#1              ;43
                  |L7.40|
000028  42ac              CMP      r4,r5                 ;43
00002a  d3f5              BCC      |L7.24|
;;;45     	MD5Final(mac, &ctx);
00002c  4669              MOV      r1,sp
00002e  4640              MOV      r0,r8
000030  f7fffffe          BL       MD5Final
;;;46     	return 0;
000034  2000              MOVS     r0,#0
;;;47     }
000036  b016              ADD      sp,sp,#0x58
000038  e8bd81f0          POP      {r4-r8,pc}
;;;48     
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L12.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L12.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L12.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L12.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L15.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L15.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L15.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L15.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L21.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L21.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

