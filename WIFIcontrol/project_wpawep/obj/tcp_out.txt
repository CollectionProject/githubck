; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\tcp_out.o --depend=.\obj\tcp_out.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\tcp_out.crf ..\lwIP\src\core\tcp_out.c]
                          THUMB

                          AREA ||i.tcp_enqueue||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_x
                          REQUIRE _printf_p
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                          REQUIRE _printf_sizespec
                  tcp_enqueue PROC
;;;154    err_t
;;;155    tcp_enqueue(struct tcp_pcb *pcb, void *arg, u16_t len,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;156                u8_t flags, u8_t apiflags, u8_t optflags)
;;;157    {
000004  b087              SUB      sp,sp,#0x1c
000006  4605              MOV      r5,r0
000008  4691              MOV      r9,r2
;;;158      struct pbuf *p;
;;;159      struct tcp_seg *seg, *useg, *queue;
;;;160      u32_t seqno;
;;;161      u16_t left, seglen;
;;;162      void *ptr;
;;;163      u16_t queuelen;
;;;164      u8_t optlen;
;;;165    
;;;166      LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  9b14              LDR      r3,[sp,#0x50]
000010  9a0a              LDR      r2,[sp,#0x28]
000012  e9cd2300          STRD     r2,r3,[sp,#0]
000016  464b              MOV      r3,r9
000018  4629              MOV      r1,r5
00001a  a0ea              ADR      r0,|L1.964|
00001c  9a08              LDR      r2,[sp,#0x20]
00001e  f7fffffe          BL       __2printf
000022  bf00              NOP      
000024  bf00              NOP      
;;;167                  ("tcp_enqueue(pcb=%p, arg=%p, len=%"U16_F", flags=%"X16_F", apiflags=%"U16_F")\n",
;;;168                   (void *)pcb, arg, len, (u16_t)flags, (u16_t)apiflags));
;;;169      LWIP_ERROR("tcp_enqueue: packet needs payload, options, or SYN/FIN (programmer violates API)",
000026  bf00              NOP      
000028  f1b90f00          CMP      r9,#0
00002c  d112              BNE      |L1.84|
00002e  9815              LDR      r0,[sp,#0x54]
000030  b980              CBNZ     r0,|L1.84|
000032  980a              LDR      r0,[sp,#0x28]
000034  f0100f03          TST      r0,#3
000038  d10c              BNE      |L1.84|
00003a  bf00              NOP      
00003c  a3f1              ADR      r3,|L1.1028|
00003e  22a9              MOVS     r2,#0xa9
000040  49f7              LDR      r1,|L1.1056|
000042  a0f8              ADR      r0,|L1.1060|
000044  f7fffffe          BL       __2printf
000048  bf00              NOP      
00004a  f06f0009          MVN      r0,#9
                  |L1.78|
;;;170                 ((len != 0) || (optflags != 0) || ((flags & (TCP_SYN | TCP_FIN)) != 0)),
;;;171                 return ERR_ARG;);
;;;172      LWIP_ERROR("tcp_enqueue: len != 0 || arg == NULL (programmer violates API)", 
;;;173                 ((len != 0) || (arg == NULL)), return ERR_ARG;);
;;;174    
;;;175      /* fail on too much data */
;;;176      if (len > pcb->snd_buf) {
;;;177        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue: too much data (len=%"U16_F" > snd_buf=%"U16_F")\n", len, pcb->snd_buf));
;;;178        pcb->flags |= TF_NAGLEMEMERR;
;;;179        return ERR_MEM;
;;;180      }
;;;181      left = len;
;;;182      ptr = arg;
;;;183    
;;;184      optlen = LWIP_TCP_OPT_LENGTH(optflags);
;;;185    
;;;186      /* seqno will be the sequence number of the first segment enqueued
;;;187       * by the call to this function. */
;;;188      seqno = pcb->snd_lbb;
;;;189    
;;;190      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));
;;;191    
;;;192      /* If total number of pbufs on the unsent/unacked queues exceeds the
;;;193       * configured maximum, return an error */
;;;194      queuelen = pcb->snd_queuelen;
;;;195      /* check for configured max queuelen and possible overflow */
;;;196      if ((queuelen >= TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
;;;197        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 3, ("tcp_enqueue: too long queue %"U16_F" (max %"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
;;;198        TCP_STATS_INC(tcp.memerr);
;;;199        pcb->flags |= TF_NAGLEMEMERR;
;;;200        return ERR_MEM;
;;;201      }
;;;202      if (queuelen != 0) {
;;;203        LWIP_ASSERT("tcp_enqueue: pbufs on queue => at least one queue non-empty",
;;;204          pcb->unacked != NULL || pcb->unsent != NULL);
;;;205      } else {
;;;206        LWIP_ASSERT("tcp_enqueue: no pbufs on queue => both queues empty",
;;;207          pcb->unacked == NULL && pcb->unsent == NULL);
;;;208      }
;;;209    
;;;210      /* First, break up the data into segments and tuck them together in
;;;211       * the local "queue" variable. */
;;;212      useg = queue = seg = NULL;
;;;213      seglen = 0;
;;;214      while (queue == NULL || left > 0) {
;;;215        /* The segment length (including options) should be at most the MSS */
;;;216        seglen = left > (pcb->mss - optlen) ? (pcb->mss - optlen) : left;
;;;217    
;;;218        /* Allocate memory for tcp_seg, and fill in fields. */
;;;219        seg = memp_malloc(MEMP_TCP_SEG);
;;;220        if (seg == NULL) {
;;;221          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, 
;;;222                      ("tcp_enqueue: could not allocate memory for tcp_seg\n"));
;;;223          goto memerr;
;;;224        }
;;;225        seg->next = NULL;
;;;226        seg->p = NULL;
;;;227    
;;;228        /* first segment of to-be-queued data? */
;;;229        if (queue == NULL) {
;;;230          queue = seg;
;;;231        }
;;;232        /* subsequent segments of to-be-queued data */
;;;233        else {
;;;234          /* Attach the segment to the end of the queued segments */
;;;235          LWIP_ASSERT("useg != NULL", useg != NULL);
;;;236          useg->next = seg;
;;;237        }
;;;238        /* remember last segment of to-be-queued data for next iteration */
;;;239        useg = seg;
;;;240    
;;;241        /* If copy is set, memory should be allocated
;;;242         * and data copied into pbuf, otherwise data comes from
;;;243         * ROM or other static memory, and need not be copied.  */
;;;244        if (apiflags & TCP_WRITE_FLAG_COPY) {
;;;245          if ((seg->p = pbuf_alloc(PBUF_TRANSPORT, seglen + optlen, PBUF_RAM)) == NULL) {
;;;246            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, 
;;;247                        ("tcp_enqueue : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
;;;248            goto memerr;
;;;249          }
;;;250          LWIP_ASSERT("check that first pbuf can hold the complete seglen",
;;;251                      (seg->p->len >= seglen + optlen));
;;;252          queuelen += pbuf_clen(seg->p);
;;;253          if (arg != NULL) {
;;;254            MEMCPY((char *)seg->p->payload + optlen, ptr, seglen);
;;;255          }
;;;256          seg->dataptr = seg->p->payload;
;;;257        }
;;;258        /* do not copy data */
;;;259        else {
;;;260          /* First, allocate a pbuf for the headers. */
;;;261          if ((seg->p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
;;;262            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, 
;;;263                        ("tcp_enqueue: could not allocate memory for header pbuf\n"));
;;;264            goto memerr;
;;;265          }
;;;266          queuelen += pbuf_clen(seg->p);
;;;267    
;;;268          /* Second, allocate a pbuf for holding the data.
;;;269           * since the referenced data is available at least until it is sent out on the
;;;270           * link (as it has to be ACKed by the remote party) we can safely use PBUF_ROM
;;;271           * instead of PBUF_REF here.
;;;272           */
;;;273          if (left > 0) {
;;;274            if ((p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
;;;275              /* If allocation fails, we have to deallocate the header pbuf as well. */
;;;276              pbuf_free(seg->p);
;;;277              seg->p = NULL;
;;;278              LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, 
;;;279                          ("tcp_enqueue: could not allocate memory for zero-copy pbuf\n"));
;;;280              goto memerr;
;;;281            }
;;;282            ++queuelen;
;;;283            /* reference the non-volatile payload data */
;;;284            p->payload = ptr;
;;;285            seg->dataptr = ptr;
;;;286    
;;;287            /* Concatenate the headers and data pbufs together. */
;;;288            pbuf_cat(seg->p/*header*/, p/*data*/);
;;;289            p = NULL;
;;;290          }
;;;291        }
;;;292    
;;;293        /* Now that there are more segments queued, we check again if the
;;;294        length of the queue exceeds the configured maximum or overflows. */
;;;295        if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
;;;296          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_enqueue: queue too long %"U16_F" (%"U16_F")\n", queuelen, TCP_SND_QUEUELEN));
;;;297          goto memerr;
;;;298        }
;;;299    
;;;300        seg->len = seglen;
;;;301    
;;;302        /* build TCP header */
;;;303        if (pbuf_header(seg->p, TCP_HLEN)) {
;;;304          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | 2, ("tcp_enqueue: no room for TCP header in pbuf.\n"));
;;;305          TCP_STATS_INC(tcp.err);
;;;306          goto memerr;
;;;307        }
;;;308        seg->tcphdr = seg->p->payload;
;;;309        seg->tcphdr->src = htons(pcb->local_port);
;;;310        seg->tcphdr->dest = htons(pcb->remote_port);
;;;311        seg->tcphdr->seqno = htonl(seqno);
;;;312        seg->tcphdr->urgp = 0;
;;;313        TCPH_FLAGS_SET(seg->tcphdr, flags);
;;;314        /* don't fill in tcphdr->ackno and tcphdr->wnd until later */
;;;315    
;;;316        seg->flags = optflags;
;;;317    
;;;318        /* Set the length of the header */
;;;319        TCPH_HDRLEN_SET(seg->tcphdr, (5 + optlen / 4));
;;;320        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_enqueue: queueing %"U32_F":%"U32_F" (0x%"X16_F")\n",
;;;321          ntohl(seg->tcphdr->seqno),
;;;322          ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
;;;323          (u16_t)flags));
;;;324    
;;;325        left -= seglen;
;;;326        seqno += seglen;
;;;327        ptr = (void *)((u8_t *)ptr + seglen);
;;;328      }
;;;329    
;;;330      /* Now that the data to be enqueued has been broken up into TCP
;;;331      segments in the queue variable, we add them to the end of the
;;;332      pcb->unsent queue. */
;;;333      if (pcb->unsent == NULL) {
;;;334        useg = NULL;
;;;335      }
;;;336      else {
;;;337        for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
;;;338      }
;;;339      /* { useg is last segment on the unsent queue, NULL if list is empty } */
;;;340    
;;;341      /* If there is room in the last pbuf on the unsent queue,
;;;342      chain the first pbuf on the queue together with that. */
;;;343      if (useg != NULL &&
;;;344        TCP_TCPLEN(useg) != 0 &&
;;;345        !(TCPH_FLAGS(useg->tcphdr) & (TCP_SYN | TCP_FIN)) &&
;;;346        !(flags & (TCP_SYN | TCP_FIN)) &&
;;;347        /* fit within max seg size */
;;;348        (useg->len + queue->len <= pcb->mss) &&
;;;349        /* only concatenate segments with the same options */
;;;350        (useg->flags == queue->flags)) {
;;;351        /* Remove TCP header from first segment of our to-be-queued list */
;;;352        if(pbuf_header(queue->p, -(TCP_HLEN + optlen))) {
;;;353          /* Can we cope with this failing?  Just assert for now */
;;;354          LWIP_ASSERT("pbuf_header failed\n", 0);
;;;355          TCP_STATS_INC(tcp.err);
;;;356          goto memerr;
;;;357        }
;;;358        if (queue->p->len == 0) {
;;;359          /* free the first (header-only) pbuf if it is now empty (contained only headers) */
;;;360          struct pbuf *old_q = queue->p;
;;;361          queue->p = queue->p->next;
;;;362          old_q->next = NULL;
;;;363          queuelen--;
;;;364          pbuf_free(old_q);
;;;365        }
;;;366        LWIP_ASSERT("zero-length pbuf", (queue->p != NULL) && (queue->p->len > 0));
;;;367        pbuf_cat(useg->p, queue->p);
;;;368        useg->len += queue->len;
;;;369        useg->next = queue->next;
;;;370    
;;;371        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("tcp_enqueue: chaining segments, new len %"U16_F"\n", useg->len));
;;;372        if (seg == queue) {
;;;373          seg = useg;
;;;374          seglen = useg->len;
;;;375        }
;;;376        memp_free(MEMP_TCP_SEG, queue);
;;;377      }
;;;378      else {
;;;379        /* empty list */
;;;380        if (useg == NULL) {
;;;381          /* initialize list with this segment */
;;;382          pcb->unsent = queue;
;;;383        }
;;;384        /* enqueue segment */
;;;385        else {
;;;386          useg->next = queue;
;;;387        }
;;;388      }
;;;389      if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
;;;390        ++len;
;;;391      }
;;;392      if (flags & TCP_FIN) {
;;;393        pcb->flags |= TF_FIN;
;;;394      }
;;;395      pcb->snd_lbb += len;
;;;396    
;;;397      pcb->snd_buf -= len;
;;;398    
;;;399      /* update number of segments on the queues */
;;;400      pcb->snd_queuelen = queuelen;
;;;401      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
;;;402      if (pcb->snd_queuelen != 0) {
;;;403        LWIP_ASSERT("tcp_enqueue: valid queue length",
;;;404          pcb->unacked != NULL || pcb->unsent != NULL);
;;;405      }
;;;406    
;;;407      /* Set the PSH flag in the last segment that we enqueued, but only
;;;408      if the segment has data (indicated by seglen > 0). */
;;;409      if (seg != NULL && seglen > 0 && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
;;;410        TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
;;;411      }
;;;412    
;;;413      return ERR_OK;
;;;414    memerr:
;;;415      pcb->flags |= TF_NAGLEMEMERR;
;;;416      TCP_STATS_INC(tcp.memerr);
;;;417    
;;;418      if (queue != NULL) {
;;;419        tcp_segs_free(queue);
;;;420      }
;;;421      if (pcb->snd_queuelen != 0) {
;;;422        LWIP_ASSERT("tcp_enqueue: valid queue length", pcb->unacked != NULL ||
;;;423          pcb->unsent != NULL);
;;;424      }
;;;425      LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_enqueue: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
;;;426      return ERR_MEM;
;;;427    }
00004e  b00b              ADD      sp,sp,#0x2c
000050  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.84|
000054  bf00              NOP                            ;169
000056  bf00              NOP                            ;172
000058  f1b90f00          CMP      r9,#0                 ;172
00005c  d10c              BNE      |L1.120|
00005e  9808              LDR      r0,[sp,#0x20]         ;172
000060  b150              CBZ      r0,|L1.120|
000062  bf00              NOP                            ;172
000064  a3e7              ADR      r3,|L1.1028|
000066  22ac              MOVS     r2,#0xac              ;172
000068  a1f8              ADR      r1,|L1.1100|
00006a  a0ee              ADR      r0,|L1.1060|
00006c  f7fffffe          BL       __2printf
000070  bf00              NOP                            ;172
000072  f06f0009          MVN      r0,#9                 ;172
000076  e7ea              B        |L1.78|
                  |L1.120|
000078  bf00              NOP                            ;172
00007a  f8b5006e          LDRH     r0,[r5,#0x6e]         ;176
00007e  4548              CMP      r0,r9                 ;176
000080  da12              BGE      |L1.168|
000082  bf00              NOP                            ;177
000084  bf00              NOP                            ;177
000086  f8b5206e          LDRH     r2,[r5,#0x6e]         ;177
00008a  4649              MOV      r1,r9                 ;177
00008c  a0ff              ADR      r0,|L1.1164|
00008e  f7fffffe          BL       __2printf
000092  bf00              NOP                            ;177
000094  bf00              NOP                            ;177
000096  f8950022          LDRB     r0,[r5,#0x22]         ;178
00009a  f0400080          ORR      r0,r0,#0x80           ;178
00009e  f8850022          STRB     r0,[r5,#0x22]         ;178
0000a2  f04f30ff          MOV      r0,#0xffffffff        ;179
0000a6  e7d2              B        |L1.78|
                  |L1.168|
0000a8  f8cd9010          STR      r9,[sp,#0x10]         ;181
0000ac  9808              LDR      r0,[sp,#0x20]         ;182
0000ae  9002              STR      r0,[sp,#8]            ;182
0000b0  9815              LDR      r0,[sp,#0x54]         ;184
0000b2  f0100f01          TST      r0,#1                 ;184
0000b6  d001              BEQ      |L1.188|
0000b8  2104              MOVS     r1,#4                 ;184
0000ba  e000              B        |L1.190|
                  |L1.188|
0000bc  2100              MOVS     r1,#0                 ;184
                  |L1.190|
0000be  9815              LDR      r0,[sp,#0x54]         ;184
0000c0  f0100f02          TST      r0,#2                 ;184
0000c4  d001              BEQ      |L1.202|
0000c6  200c              MOVS     r0,#0xc               ;184
0000c8  e000              B        |L1.204|
                  |L1.202|
0000ca  2000              MOVS     r0,#0                 ;184
                  |L1.204|
0000cc  4408              ADD      r0,r0,r1              ;184
0000ce  f0000aff          AND      r10,r0,#0xff          ;184
0000d2  6ea8              LDR      r0,[r5,#0x68]         ;188
0000d4  9005              STR      r0,[sp,#0x14]         ;188
0000d6  bf00              NOP                            ;190
0000d8  bf00              NOP                            ;190
0000da  f8b51070          LDRH     r1,[r5,#0x70]         ;190
0000de  a0f8              ADR      r0,|L1.1216|
0000e0  f7fffffe          BL       __2printf
0000e4  bf00              NOP                            ;190
0000e6  bf00              NOP                            ;190
0000e8  f8b58070          LDRH     r8,[r5,#0x70]         ;194
0000ec  f1b80f06          CMP      r8,#6                 ;196
0000f0  da03              BGE      |L1.250|
0000f2  f64f70fc          MOV      r0,#0xfffc            ;196
0000f6  4580              CMP      r8,r0                 ;196
0000f8  dd11              BLE      |L1.286|
                  |L1.250|
0000fa  bf00              NOP                            ;197
0000fc  bf00              NOP                            ;197
0000fe  2206              MOVS     r2,#6                 ;197
000100  4641              MOV      r1,r8                 ;197
000102  a0f6              ADR      r0,|L1.1244|
000104  f7fffffe          BL       __2printf
000108  bf00              NOP                            ;197
00010a  bf00              NOP                            ;197
00010c  f8950022          LDRB     r0,[r5,#0x22]         ;199
000110  f0400080          ORR      r0,r0,#0x80           ;199
000114  f8850022          STRB     r0,[r5,#0x22]         ;199
000118  f04f30ff          MOV      r0,#0xffffffff        ;200
00011c  e797              B        |L1.78|
                  |L1.286|
00011e  2400              MOVS     r4,#0                 ;212
000120  4627              MOV      r7,r4                 ;212
000122  4626              MOV      r6,r4                 ;212
000124  2000              MOVS     r0,#0                 ;213
000126  9003              STR      r0,[sp,#0xc]          ;213
000128  e116              B        |L1.856|
                  |L1.298|
00012a  8f28              LDRH     r0,[r5,#0x38]         ;216
00012c  eba0010a          SUB      r1,r0,r10             ;216
000130  9804              LDR      r0,[sp,#0x10]         ;216
000132  4281              CMP      r1,r0                 ;216
000134  da03              BGE      |L1.318|
000136  8f28              LDRH     r0,[r5,#0x38]         ;216
000138  eba0000a          SUB      r0,r0,r10             ;216
00013c  e000              B        |L1.320|
                  |L1.318|
00013e  9804              LDR      r0,[sp,#0x10]         ;216
                  |L1.320|
000140  b280              UXTH     r0,r0                 ;216
000142  9003              STR      r0,[sp,#0xc]          ;216
000144  2004              MOVS     r0,#4                 ;219
000146  f7fffffe          BL       memp_malloc
00014a  4604              MOV      r4,r0                 ;219
00014c  b93c              CBNZ     r4,|L1.350|
00014e  bf00              NOP                            ;221
000150  bf00              NOP                            ;221
000152  a0ed              ADR      r0,|L1.1288|
000154  f7fffffe          BL       __2printf
000158  bf00              NOP                            ;221
00015a  bf00              NOP                            ;221
00015c  e30d              B        |L1.1914|
                  |L1.350|
00015e  2000              MOVS     r0,#0                 ;225
000160  6020              STR      r0,[r4,#0]            ;225
000162  6060              STR      r0,[r4,#4]            ;226
000164  b90f              CBNZ     r7,|L1.362|
000166  4627              MOV      r7,r4                 ;230
000168  e000              B        |L1.364|
                  |L1.362|
00016a  6034              STR      r4,[r6,#0]            ;236
                  |L1.364|
00016c  4626              MOV      r6,r4                 ;239
00016e  9814              LDR      r0,[sp,#0x50]         ;244
000170  f0100f01          TST      r0,#1                 ;244
000174  d025              BEQ      |L1.450|
000176  9803              LDR      r0,[sp,#0xc]          ;245
000178  4450              ADD      r0,r0,r10             ;245
00017a  b281              UXTH     r1,r0                 ;245
00017c  2200              MOVS     r2,#0                 ;245
00017e  4610              MOV      r0,r2                 ;245
000180  f7fffffe          BL       pbuf_alloc
000184  6060              STR      r0,[r4,#4]            ;245
000186  b940              CBNZ     r0,|L1.410|
000188  bf00              NOP                            ;246
00018a  bf00              NOP                            ;246
00018c  a0eb              ADR      r0,|L1.1340|
00018e  9903              LDR      r1,[sp,#0xc]          ;246
000190  f7fffffe          BL       __2printf
000194  bf00              NOP                            ;246
000196  bf00              NOP                            ;246
000198  e2ef              B        |L1.1914|
                  |L1.410|
00019a  6860              LDR      r0,[r4,#4]            ;252
00019c  f7fffffe          BL       pbuf_clen
0001a0  4440              ADD      r0,r0,r8              ;252
0001a2  fa1ff880          UXTH     r8,r0                 ;252
0001a6  9808              LDR      r0,[sp,#0x20]         ;253
0001a8  b138              CBZ      r0,|L1.442|
0001aa  6861              LDR      r1,[r4,#4]            ;254
0001ac  6849              LDR      r1,[r1,#4]            ;254
0001ae  eb01000a          ADD      r0,r1,r10             ;254
0001b2  e9dd1202          LDRD     r1,r2,[sp,#8]         ;254
0001b6  f7fffffe          BL       __aeabi_memcpy
                  |L1.442|
0001ba  6860              LDR      r0,[r4,#4]            ;256
0001bc  6840              LDR      r0,[r0,#4]            ;256
0001be  60a0              STR      r0,[r4,#8]            ;256
0001c0  e03a              B        |L1.568|
                  |L1.450|
0001c2  2200              MOVS     r2,#0                 ;261
0001c4  4651              MOV      r1,r10                ;261
0001c6  4610              MOV      r0,r2                 ;261
0001c8  f7fffffe          BL       pbuf_alloc
0001cc  6060              STR      r0,[r4,#4]            ;261
0001ce  b938              CBNZ     r0,|L1.480|
0001d0  bf00              NOP                            ;262
0001d2  bf00              NOP                            ;262
0001d4  a0e9              ADR      r0,|L1.1404|
0001d6  f7fffffe          BL       __2printf
0001da  bf00              NOP                            ;262
0001dc  bf00              NOP                            ;262
0001de  e2cc              B        |L1.1914|
                  |L1.480|
0001e0  6860              LDR      r0,[r4,#4]            ;266
0001e2  f7fffffe          BL       pbuf_clen
0001e6  4440              ADD      r0,r0,r8              ;266
0001e8  fa1ff880          UXTH     r8,r0                 ;266
0001ec  9804              LDR      r0,[sp,#0x10]         ;273
0001ee  2800              CMP      r0,#0                 ;273
0001f0  dd22              BLE      |L1.568|
0001f2  2201              MOVS     r2,#1                 ;274
0001f4  2003              MOVS     r0,#3                 ;274
0001f6  9903              LDR      r1,[sp,#0xc]          ;274
0001f8  f7fffffe          BL       pbuf_alloc
0001fc  9006              STR      r0,[sp,#0x18]         ;274
0001fe  b960              CBNZ     r0,|L1.538|
000200  6860              LDR      r0,[r4,#4]            ;276
000202  f7fffffe          BL       pbuf_free
000206  2000              MOVS     r0,#0                 ;277
000208  6060              STR      r0,[r4,#4]            ;277
00020a  bf00              NOP                            ;278
00020c  bf00              NOP                            ;278
00020e  a0e9              ADR      r0,|L1.1460|
000210  f7fffffe          BL       __2printf
000214  bf00              NOP                            ;278
000216  bf00              NOP                            ;278
000218  e2af              B        |L1.1914|
                  |L1.538|
00021a  f1080001          ADD      r0,r8,#1              ;282
00021e  fa1ff880          UXTH     r8,r0                 ;282
000222  9906              LDR      r1,[sp,#0x18]         ;284
000224  9802              LDR      r0,[sp,#8]            ;284
000226  6048              STR      r0,[r1,#4]            ;284
000228  9802              LDR      r0,[sp,#8]            ;285
00022a  60a0              STR      r0,[r4,#8]            ;285
00022c  6860              LDR      r0,[r4,#4]            ;288
00022e  9906              LDR      r1,[sp,#0x18]         ;288
000230  f7fffffe          BL       pbuf_cat
000234  2000              MOVS     r0,#0                 ;289
000236  9006              STR      r0,[sp,#0x18]         ;289
                  |L1.568|
000238  f1b80f06          CMP      r8,#6                 ;295
00023c  dc03              BGT      |L1.582|
00023e  f64f70fc          MOV      r0,#0xfffc            ;295
000242  4580              CMP      r8,r0                 ;295
000244  dd09              BLE      |L1.602|
                  |L1.582|
000246  bf00              NOP                            ;296
000248  bf00              NOP                            ;296
00024a  2206              MOVS     r2,#6                 ;296
00024c  4641              MOV      r1,r8                 ;296
00024e  a0e8              ADR      r0,|L1.1520|
000250  f7fffffe          BL       __2printf
000254  bf00              NOP                            ;296
000256  bf00              NOP                            ;296
000258  e28f              B        |L1.1914|
                  |L1.602|
00025a  9803              LDR      r0,[sp,#0xc]          ;300
00025c  81a0              STRH     r0,[r4,#0xc]          ;300
00025e  2114              MOVS     r1,#0x14              ;303
000260  6860              LDR      r0,[r4,#4]            ;303
000262  f7fffffe          BL       pbuf_header
000266  b138              CBZ      r0,|L1.632|
000268  bf00              NOP                            ;304
00026a  bf00              NOP                            ;304
00026c  a0ea              ADR      r0,|L1.1560|
00026e  f7fffffe          BL       __2printf
000272  bf00              NOP                            ;304
000274  bf00              NOP                            ;304
000276  e280              B        |L1.1914|
                  |L1.632|
000278  6860              LDR      r0,[r4,#4]            ;308
00027a  6840              LDR      r0,[r0,#4]            ;308
00027c  6120              STR      r0,[r4,#0x10]         ;308
00027e  8b28              LDRH     r0,[r5,#0x18]         ;309
000280  f7fffffe          BL       htons
000284  6921              LDR      r1,[r4,#0x10]         ;309
000286  8008              STRH     r0,[r1,#0]            ;309
000288  8c28              LDRH     r0,[r5,#0x20]         ;310
00028a  f7fffffe          BL       htons
00028e  6921              LDR      r1,[r4,#0x10]         ;310
000290  8048              STRH     r0,[r1,#2]            ;310
000292  9805              LDR      r0,[sp,#0x14]         ;311
000294  f7fffffe          BL       htonl
000298  6921              LDR      r1,[r4,#0x10]         ;311
00029a  6048              STR      r0,[r1,#4]            ;311
00029c  2000              MOVS     r0,#0                 ;312
00029e  6921              LDR      r1,[r4,#0x10]         ;312
0002a0  8248              STRH     r0,[r1,#0x12]         ;312
0002a2  6921              LDR      r1,[r4,#0x10]         ;313
0002a4  8988              LDRH     r0,[r1,#0xc]          ;313
0002a6  f7fffffe          BL       ntohs
0002aa  f020003f          BIC      r0,r0,#0x3f           ;313
0002ae  990a              LDR      r1,[sp,#0x28]         ;313
0002b0  ea400b01          ORR      r11,r0,r1             ;313
0002b4  4658              MOV      r0,r11                ;313
0002b6  f7fffffe          BL       htons
0002ba  6921              LDR      r1,[r4,#0x10]         ;313
0002bc  8188              STRH     r0,[r1,#0xc]          ;313
0002be  9815              LDR      r0,[sp,#0x54]         ;316
0002c0  73a0              STRB     r0,[r4,#0xe]          ;316
0002c2  6921              LDR      r1,[r4,#0x10]         ;319
0002c4  8988              LDRH     r0,[r1,#0xc]          ;319
0002c6  f7fffffe          BL       ntohs
0002ca  f000013f          AND      r1,r0,#0x3f           ;319
0002ce  46d3              MOV      r11,r10               ;319
0002d0  ea4f70ea          ASR      r0,r10,#31            ;319
0002d4  eb0a7090          ADD      r0,r10,r0,LSR #30     ;319
0002d8  1080              ASRS     r0,r0,#2              ;319
0002da  1d40              ADDS     r0,r0,#5              ;319
0002dc  ea413000          ORR      r0,r1,r0,LSL #12      ;319
0002e0  b280              UXTH     r0,r0                 ;319
0002e2  9001              STR      r0,[sp,#4]            ;319
0002e4  f7fffffe          BL       htons
0002e8  6921              LDR      r1,[r4,#0x10]         ;319
0002ea  8188              STRH     r0,[r1,#0xc]          ;319
0002ec  bf00              NOP                            ;320
0002ee  bf00              NOP                            ;320
0002f0  6921              LDR      r1,[r4,#0x10]         ;320
0002f2  6848              LDR      r0,[r1,#4]            ;320
0002f4  f7fffffe          BL       ntohl
0002f8  4683              MOV      r11,r0                ;320
0002fa  6921              LDR      r1,[r4,#0x10]         ;320
0002fc  8988              LDRH     r0,[r1,#0xc]          ;320
0002fe  f7fffffe          BL       ntohs
000302  f0100f01          TST      r0,#1                 ;320
000306  d106              BNE      |L1.790|
000308  6921              LDR      r1,[r4,#0x10]         ;320
00030a  8988              LDRH     r0,[r1,#0xc]          ;320
00030c  f7fffffe          BL       ntohs
000310  f0100f02          TST      r0,#2                 ;320
000314  d001              BEQ      |L1.794|
                  |L1.790|
000316  2001              MOVS     r0,#1                 ;320
000318  e000              B        |L1.796|
                  |L1.794|
00031a  2000              MOVS     r0,#0                 ;320
                  |L1.796|
00031c  89a1              LDRH     r1,[r4,#0xc]          ;320
00031e  4408              ADD      r0,r0,r1              ;320
000320  4458              ADD      r0,r0,r11             ;320
000322  9001              STR      r0,[sp,#4]            ;320
000324  6921              LDR      r1,[r4,#0x10]         ;320
000326  6848              LDR      r0,[r1,#4]            ;320
000328  f7fffffe          BL       ntohl
00032c  9000              STR      r0,[sp,#0]            ;320
00032e  4601              MOV      r1,r0                 ;320
000330  a0c5              ADR      r0,|L1.1608|
000332  9b0a              LDR      r3,[sp,#0x28]         ;320
000334  9a01              LDR      r2,[sp,#4]            ;320
000336  f7fffffe          BL       __2printf
00033a  bf00              NOP                            ;320
00033c  bf00              NOP                            ;320
00033e  e9dd1003          LDRD     r1,r0,[sp,#0xc]       ;325
000342  1a40              SUBS     r0,r0,r1              ;325
000344  b280              UXTH     r0,r0                 ;325
000346  9004              STR      r0,[sp,#0x10]         ;325
000348  9903              LDR      r1,[sp,#0xc]          ;326
00034a  9805              LDR      r0,[sp,#0x14]         ;326
00034c  4408              ADD      r0,r0,r1              ;326
00034e  9005              STR      r0,[sp,#0x14]         ;326
000350  e9dd0102          LDRD     r0,r1,[sp,#8]         ;327
000354  4408              ADD      r0,r0,r1              ;327
000356  9002              STR      r0,[sp,#8]            ;327
                  |L1.856|
000358  2f00              CMP      r7,#0                 ;214
00035a  f43faee6          BEQ      |L1.298|
00035e  9804              LDR      r0,[sp,#0x10]         ;214
000360  2800              CMP      r0,#0                 ;214
000362  f73faee2          BGT      |L1.298|
000366  6f68              LDR      r0,[r5,#0x74]         ;333
000368  b908              CBNZ     r0,|L1.878|
00036a  2600              MOVS     r6,#0                 ;334
00036c  e005              B        |L1.890|
                  |L1.878|
00036e  6f6e              LDR      r6,[r5,#0x74]         ;337
000370  e000              B        |L1.884|
                  |L1.882|
000372  6836              LDR      r6,[r6,#0]            ;337
                  |L1.884|
000374  6830              LDR      r0,[r6,#0]            ;337
000376  2800              CMP      r0,#0                 ;337
000378  d1fb              BNE      |L1.882|
                  |L1.890|
00037a  b316              CBZ      r6,|L1.962|
00037c  6931              LDR      r1,[r6,#0x10]         ;344
00037e  8988              LDRH     r0,[r1,#0xc]          ;344
000380  f7fffffe          BL       ntohs
000384  f0100f01          TST      r0,#1                 ;344
000388  d106              BNE      |L1.920|
00038a  6931              LDR      r1,[r6,#0x10]         ;344
00038c  8988              LDRH     r0,[r1,#0xc]          ;344
00038e  f7fffffe          BL       ntohs
000392  f0100f02          TST      r0,#2                 ;344
000396  d001              BEQ      |L1.924|
                  |L1.920|
000398  2001              MOVS     r0,#1                 ;344
00039a  e000              B        |L1.926|
                  |L1.924|
00039c  2000              MOVS     r0,#0                 ;344
                  |L1.926|
00039e  89b1              LDRH     r1,[r6,#0xc]          ;344
0003a0  1840              ADDS     r0,r0,r1              ;344
0003a2  d00e              BEQ      |L1.962|
0003a4  6931              LDR      r1,[r6,#0x10]         ;345
0003a6  8988              LDRH     r0,[r1,#0xc]          ;345
0003a8  f7fffffe          BL       ntohs
0003ac  f0100f03          TST      r0,#3                 ;345
0003b0  d107              BNE      |L1.962|
0003b2  980a              LDR      r0,[sp,#0x28]         ;346
0003b4  f0100f03          TST      r0,#3                 ;346
0003b8  d103              BNE      |L1.962|
0003ba  89b0              LDRH     r0,[r6,#0xc]          ;348
0003bc  89b9              LDRH     r1,[r7,#0xc]          ;348
0003be  4408              ADD      r0,r0,r1              ;348
0003c0  e158              B        |L1.1652|
                  |L1.962|
0003c2  e195              B        |L1.1776|
                  |L1.964|
0003c4  7463705f          DCB      "tcp_enqueue(pcb=%p, arg=%p, len=%4d, flags=%4x, apiflag"
0003c8  656e7175
0003cc  65756528
0003d0  7063623d
0003d4  25702c20
0003d8  6172673d
0003dc  25702c20
0003e0  6c656e3d
0003e4  2534642c
0003e8  20666c61
0003ec  67733d25
0003f0  34782c20
0003f4  61706966
0003f8  6c6167  
0003fb  733d2534          DCB      "s=%4d)\n",0
0003ff  64290a00
000403  00                DCB      0
                  |L1.1028|
000404  2e2e5c6c          DCB      "..\\lwIP\\src\\core\\tcp_out.c",0
000408  7749505c
00040c  7372635c
000410  636f7265
000414  5c746370
000418  5f6f7574
00041c  2e6300  
00041f  00                DCB      0
                  |L1.1056|
                          DCD      ||.constdata||
                  |L1.1060|
000424  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000428  7274696f
00042c  6e202225
000430  73222066
000434  61696c65
000438  64206174
00043c  206c696e
000440  65202564
000444  20696e20
000448  25730a00
                  |L1.1100|
00044c  7463705f          DCB      "tcp_enqueue: len != 0 || arg == NULL (programmer violat"
000450  656e7175
000454  6575653a
000458  206c656e
00045c  20213d20
000460  30207c7c
000464  20617267
000468  203d3d20
00046c  4e554c4c
000470  20287072
000474  6f677261
000478  6d6d6572
00047c  2076696f
000480  6c6174  
000483  65732041          DCB      "es API)",0
000487  50492900
00048b  00                DCB      0
                  |L1.1164|
00048c  7463705f          DCB      "tcp_enqueue: too much data (len=%4d > snd_buf=%4d)\n",0
000490  656e7175
000494  6575653a
000498  20746f6f
00049c  206d7563
0004a0  68206461
0004a4  74612028
0004a8  6c656e3d
0004ac  25346420
0004b0  3e20736e
0004b4  645f6275
0004b8  663d2534
0004bc  64290a00
                  |L1.1216|
0004c0  7463705f          DCB      "tcp_enqueue: queuelen: %4d\n",0
0004c4  656e7175
0004c8  6575653a
0004cc  20717565
0004d0  75656c65
0004d4  6e3a2025
0004d8  34640a00
                  |L1.1244|
0004dc  7463705f          DCB      "tcp_enqueue: too long queue %4d (max %4d)\n",0
0004e0  656e7175
0004e4  6575653a
0004e8  20746f6f
0004ec  206c6f6e
0004f0  67207175
0004f4  65756520
0004f8  25346420
0004fc  286d6178
000500  20253464
000504  290a00  
000507  00                DCB      0
                  |L1.1288|
000508  7463705f          DCB      "tcp_enqueue: could not allocate memory for tcp_seg\n",0
00050c  656e7175
000510  6575653a
000514  20636f75
000518  6c64206e
00051c  6f742061
000520  6c6c6f63
000524  61746520
000528  6d656d6f
00052c  72792066
000530  6f722074
000534  63705f73
000538  65670a00
                  |L1.1340|
00053c  7463705f          DCB      "tcp_enqueue : could not allocate memory for pbuf copy s"
000540  656e7175
000544  65756520
000548  3a20636f
00054c  756c6420
000550  6e6f7420
000554  616c6c6f
000558  63617465
00055c  206d656d
000560  6f727920
000564  666f7220
000568  70627566
00056c  20636f70
000570  792073  
000573  697a6520          DCB      "ize %4d\n",0
000577  2534640a
00057b  00      
                  |L1.1404|
00057c  7463705f          DCB      "tcp_enqueue: could not allocate memory for header pbuf\n"
000580  656e7175
000584  6575653a
000588  20636f75
00058c  6c64206e
000590  6f742061
000594  6c6c6f63
000598  61746520
00059c  6d656d6f
0005a0  72792066
0005a4  6f722068
0005a8  65616465
0005ac  72207062
0005b0  75660a  
0005b3  00                DCB      0
                  |L1.1460|
0005b4  7463705f          DCB      "tcp_enqueue: could not allocate memory for zero-copy pb"
0005b8  656e7175
0005bc  6575653a
0005c0  20636f75
0005c4  6c64206e
0005c8  6f742061
0005cc  6c6c6f63
0005d0  61746520
0005d4  6d656d6f
0005d8  72792066
0005dc  6f72207a
0005e0  65726f2d
0005e4  636f7079
0005e8  207062  
0005eb  75660a00          DCB      "uf\n",0
0005ef  00                DCB      0
                  |L1.1520|
0005f0  7463705f          DCB      "tcp_enqueue: queue too long %4d (%4d)\n",0
0005f4  656e7175
0005f8  6575653a
0005fc  20717565
000600  75652074
000604  6f6f206c
000608  6f6e6720
00060c  25346420
000610  28253464
000614  290a00  
000617  00                DCB      0
                  |L1.1560|
000618  7463705f          DCB      "tcp_enqueue: no room for TCP header in pbuf.\n",0
00061c  656e7175
000620  6575653a
000624  206e6f20
000628  726f6f6d
00062c  20666f72
000630  20544350
000634  20686561
000638  64657220
00063c  696e2070
000640  6275662e
000644  0a00    
000646  00                DCB      0
000647  00                DCB      0
                  |L1.1608|
000648  7463705f          DCB      "tcp_enqueue: queueing %8ld:%8ld (0x%4x)\n",0
00064c  656e7175
000650  6575653a
000654  20717565
000658  7565696e
00065c  67202538
000660  6c643a25
000664  386c6420
000668  28307825
00066c  3478290a
000670  00      
000671  00                DCB      0
000672  00                DCB      0
000673  00                DCB      0
                  |L1.1652|
000674  8f29              LDRH     r1,[r5,#0x38]         ;348
000676  4288              CMP      r0,r1                 ;348
000678  dc3a              BGT      |L1.1776|
00067a  7bb0              LDRB     r0,[r6,#0xe]          ;350
00067c  7bb9              LDRB     r1,[r7,#0xe]          ;350
00067e  4288              CMP      r0,r1                 ;350
000680  d136              BNE      |L1.1776|
000682  f10a0214          ADD      r2,r10,#0x14          ;352
000686  4251              RSBS     r1,r2,#0              ;352
000688  6878              LDR      r0,[r7,#4]            ;352
00068a  f7fffffe          BL       pbuf_header
00068e  b100              CBZ      r0,|L1.1682|
000690  e073              B        |L1.1914|
                  |L1.1682|
000692  6878              LDR      r0,[r7,#4]            ;358
000694  8940              LDRH     r0,[r0,#0xa]          ;358
000696  b978              CBNZ     r0,|L1.1720|
000698  f8d7b004          LDR      r11,[r7,#4]           ;360
00069c  6878              LDR      r0,[r7,#4]            ;361
00069e  6800              LDR      r0,[r0,#0]            ;361
0006a0  6078              STR      r0,[r7,#4]            ;361
0006a2  2000              MOVS     r0,#0                 ;362
0006a4  f8cb0000          STR      r0,[r11,#0]           ;362
0006a8  f1a80001          SUB      r0,r8,#1              ;363
0006ac  fa1ff880          UXTH     r8,r0                 ;363
0006b0  4658              MOV      r0,r11                ;364
0006b2  f7fffffe          BL       pbuf_free
0006b6  bf00              NOP                            ;365
                  |L1.1720|
0006b8  6879              LDR      r1,[r7,#4]            ;367
0006ba  6870              LDR      r0,[r6,#4]            ;367
0006bc  f7fffffe          BL       pbuf_cat
0006c0  89b0              LDRH     r0,[r6,#0xc]          ;368
0006c2  89b9              LDRH     r1,[r7,#0xc]          ;368
0006c4  4408              ADD      r0,r0,r1              ;368
0006c6  81b0              STRH     r0,[r6,#0xc]          ;368
0006c8  6838              LDR      r0,[r7,#0]            ;369
0006ca  6030              STR      r0,[r6,#0]            ;369
0006cc  bf00              NOP                            ;371
0006ce  bf00              NOP                            ;371
0006d0  89b1              LDRH     r1,[r6,#0xc]          ;371
0006d2  a035              ADR      r0,|L1.1960|
0006d4  f7fffffe          BL       __2printf
0006d8  bf00              NOP                            ;371
0006da  bf00              NOP                            ;371
0006dc  42bc              CMP      r4,r7                 ;372
0006de  d102              BNE      |L1.1766|
0006e0  4634              MOV      r4,r6                 ;373
0006e2  89b0              LDRH     r0,[r6,#0xc]          ;374
0006e4  9003              STR      r0,[sp,#0xc]          ;374
                  |L1.1766|
0006e6  4639              MOV      r1,r7                 ;376
0006e8  2004              MOVS     r0,#4                 ;376
0006ea  f7fffffe          BL       memp_free
0006ee  e003              B        |L1.1784|
                  |L1.1776|
0006f0  b90e              CBNZ     r6,|L1.1782|
0006f2  676f              STR      r7,[r5,#0x74]         ;382
0006f4  e000              B        |L1.1784|
                  |L1.1782|
0006f6  6037              STR      r7,[r6,#0]            ;386
                  |L1.1784|
0006f8  980a              LDR      r0,[sp,#0x28]         ;389
0006fa  f0100f02          TST      r0,#2                 ;389
0006fe  d103              BNE      |L1.1800|
000700  980a              LDR      r0,[sp,#0x28]         ;389
000702  f0100f01          TST      r0,#1                 ;389
000706  d003              BEQ      |L1.1808|
                  |L1.1800|
000708  f1090001          ADD      r0,r9,#1              ;390
00070c  fa1ff980          UXTH     r9,r0                 ;390
                  |L1.1808|
000710  980a              LDR      r0,[sp,#0x28]         ;392
000712  f0100f01          TST      r0,#1                 ;392
000716  d005              BEQ      |L1.1828|
000718  f8950022          LDRB     r0,[r5,#0x22]         ;393
00071c  f0400020          ORR      r0,r0,#0x20           ;393
000720  f8850022          STRB     r0,[r5,#0x22]         ;393
                  |L1.1828|
000724  6ea8              LDR      r0,[r5,#0x68]         ;395
000726  4448              ADD      r0,r0,r9              ;395
000728  66a8              STR      r0,[r5,#0x68]         ;395
00072a  f8b5006e          LDRH     r0,[r5,#0x6e]         ;397
00072e  eba00009          SUB      r0,r0,r9              ;397
000732  f8a5006e          STRH     r0,[r5,#0x6e]         ;397
000736  f8a58070          STRH     r8,[r5,#0x70]         ;400
00073a  bf00              NOP                            ;401
00073c  bf00              NOP                            ;401
00073e  f8b51070          LDRH     r1,[r5,#0x70]         ;401
000742  a025              ADR      r0,|L1.2008|
000744  f7fffffe          BL       __2printf
000748  bf00              NOP                            ;401
00074a  bf00              NOP                            ;401
00074c  b19c              CBZ      r4,|L1.1910|
00074e  9803              LDR      r0,[sp,#0xc]          ;409
000750  2800              CMP      r0,#0                 ;409
000752  dd10              BLE      |L1.1910|
000754  6920              LDR      r0,[r4,#0x10]         ;409
000756  b170              CBZ      r0,|L1.1910|
000758  9814              LDR      r0,[sp,#0x50]         ;409
00075a  f0100f02          TST      r0,#2                 ;409
00075e  d10a              BNE      |L1.1910|
000760  6921              LDR      r1,[r4,#0x10]         ;410
000762  8988              LDRH     r0,[r1,#0xc]          ;410
000764  f7fffffe          BL       ntohs
000768  f0400b08          ORR      r11,r0,#8             ;410
00076c  4658              MOV      r0,r11                ;410
00076e  f7fffffe          BL       htons
000772  6921              LDR      r1,[r4,#0x10]         ;410
000774  8188              STRH     r0,[r1,#0xc]          ;410
                  |L1.1910|
000776  2000              MOVS     r0,#0                 ;413
000778  e469              B        |L1.78|
                  |L1.1914|
00077a  f8950022          LDRB     r0,[r5,#0x22]         ;415
00077e  f0400080          ORR      r0,r0,#0x80           ;415
000782  f8850022          STRB     r0,[r5,#0x22]         ;415
000786  b117              CBZ      r7,|L1.1934|
000788  4638              MOV      r0,r7                 ;419
00078a  f7fffffe          BL       tcp_segs_free
                  |L1.1934|
00078e  bf00              NOP                            ;425
000790  bf00              NOP                            ;425
000792  f8b51070          LDRH     r1,[r5,#0x70]         ;425
000796  a019              ADR      r0,|L1.2044|
000798  f7fffffe          BL       __2printf
00079c  bf00              NOP                            ;425
00079e  bf00              NOP                            ;425
0007a0  f04f30ff          MOV      r0,#0xffffffff        ;426
0007a4  e453              B        |L1.78|
;;;428    
                          ENDP

0007a6  0000              DCW      0x0000
                  |L1.1960|
0007a8  7463705f          DCB      "tcp_enqueue: chaining segments, new len %4d\n",0
0007ac  656e7175
0007b0  6575653a
0007b4  20636861
0007b8  696e696e
0007bc  67207365
0007c0  676d656e
0007c4  74732c20
0007c8  6e657720
0007cc  6c656e20
0007d0  2534640a
0007d4  00      
0007d5  00                DCB      0
0007d6  00                DCB      0
0007d7  00                DCB      0
                  |L1.2008|
0007d8  7463705f          DCB      "tcp_enqueue: %4d (after enqueued)\n",0
0007dc  656e7175
0007e0  6575653a
0007e4  20253464
0007e8  20286166
0007ec  74657220
0007f0  656e7175
0007f4  65756564
0007f8  290a00  
0007fb  00                DCB      0
                  |L1.2044|
0007fc  7463705f          DCB      "tcp_enqueue: %4d (with mem err)\n",0
000800  656e7175
000804  6575653a
000808  20253464
00080c  20287769
000810  7468206d
000814  656d2065
000818  7272290a
00081c  00      
00081d  00                DCB      0
00081e  00                DCB      0
00081f  00                DCB      0

                          AREA ||i.tcp_keepalive||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_sizespec
                  tcp_keepalive PROC
;;;867    void
;;;868    tcp_keepalive(struct tcp_pcb *pcb)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;869    {
000004  4604              MOV      r4,r0
;;;870      struct pbuf *p;
;;;871      struct tcp_hdr *tcphdr;
;;;872    
;;;873      LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: sending KEEPALIVE probe to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
000006  bf00              NOP      
000008  bf00              NOP      
00000a  6860              LDR      r0,[r4,#4]
00000c  f7fffffe          BL       ntohl
000010  b2c7              UXTB     r7,r0
000012  6860              LDR      r0,[r4,#4]
000014  f7fffffe          BL       ntohl
000018  f3c02807          UBFX     r8,r0,#8,#8
00001c  6860              LDR      r0,[r4,#4]
00001e  f7fffffe          BL       ntohl
000022  f3c04907          UBFX     r9,r0,#16,#8
000026  6860              LDR      r0,[r4,#4]
000028  f7fffffe          BL       ntohl
00002c  ea4f6a10          LSR      r10,r0,#24
000030  4643              MOV      r3,r8
000032  464a              MOV      r2,r9
000034  4651              MOV      r1,r10
000036  a028              ADR      r0,|L2.216|
000038  9700              STR      r7,[sp,#0]
00003a  f7fffffe          BL       __2printf
00003e  bf00              NOP      
000040  bf00              NOP      
;;;874                              ip4_addr1(&pcb->remote_ip), ip4_addr2(&pcb->remote_ip),
;;;875                              ip4_addr3(&pcb->remote_ip), ip4_addr4(&pcb->remote_ip)));
;;;876    
;;;877      LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
000042  bf00              NOP      
000044  bf00              NOP      
000046  f894309d          LDRB     r3,[r4,#0x9d]
00004a  4832              LDR      r0,|L2.276|
00004c  6b22              LDR      r2,[r4,#0x30]
00004e  6801              LDR      r1,[r0,#0]  ; tcp_ticks
000050  4831              LDR      r0,|L2.280|
000052  f7fffffe          BL       __2printf
000056  bf00              NOP      
000058  bf00              NOP      
;;;878                              tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
;;;879       
;;;880      p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
00005a  2200              MOVS     r2,#0
00005c  2114              MOVS     r1,#0x14
00005e  2001              MOVS     r0,#1
000060  f7fffffe          BL       pbuf_alloc
000064  4605              MOV      r5,r0
;;;881       
;;;882      if(p == NULL) {
000066  b945              CBNZ     r5,|L2.122|
;;;883        LWIP_DEBUGF(TCP_DEBUG, 
000068  bf00              NOP      
00006a  bf00              NOP      
00006c  a02b              ADR      r0,|L2.284|
00006e  f7fffffe          BL       __2printf
000072  bf00              NOP      
000074  bf00              NOP      
                  |L2.118|
;;;884                    ("tcp_keepalive: could not allocate memory for pbuf\n"));
;;;885        return;
;;;886      }
;;;887      LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
;;;888                  (p->len >= sizeof(struct tcp_hdr)));
;;;889    
;;;890      tcphdr = tcp_output_set_header(pcb, p, 0, htonl(pcb->snd_nxt - 1));
;;;891    
;;;892    #if CHECKSUM_GEN_TCP
;;;893      tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
;;;894                                          IP_PROTO_TCP, p->tot_len);
;;;895    #endif
;;;896      TCP_STATS_INC(tcp.xmit);
;;;897    
;;;898      /* Send output to IP */
;;;899    #if LWIP_NETIF_HWADDRHINT
;;;900      ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
;;;901        &(pcb->addr_hint));
;;;902    #else /* LWIP_NETIF_HWADDRHINT*/
;;;903      ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
;;;904    #endif /* LWIP_NETIF_HWADDRHINT*/
;;;905    
;;;906      pbuf_free(p);
;;;907    
;;;908      LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F".\n",
;;;909                              pcb->snd_nxt - 1, pcb->rcv_nxt));
;;;910    }
000076  e8bd87fc          POP      {r2-r10,pc}
                  |L2.122|
00007a  6da1              LDR      r1,[r4,#0x58]         ;890
00007c  1e48              SUBS     r0,r1,#1              ;890
00007e  f7fffffe          BL       htonl
000082  4607              MOV      r7,r0                 ;890
000084  4603              MOV      r3,r0                 ;890
000086  2200              MOVS     r2,#0                 ;890
000088  4629              MOV      r1,r5                 ;890
00008a  4620              MOV      r0,r4                 ;890
00008c  f7fffffe          BL       tcp_output_set_header
000090  4606              MOV      r6,r0                 ;890
000092  892b              LDRH     r3,[r5,#8]            ;893
000094  9300              STR      r3,[sp,#0]            ;893
000096  2306              MOVS     r3,#6                 ;893
000098  1d22              ADDS     r2,r4,#4              ;893
00009a  4621              MOV      r1,r4                 ;893
00009c  4628              MOV      r0,r5                 ;893
00009e  f7fffffe          BL       inet_chksum_pseudo
0000a2  8230              STRH     r0,[r6,#0x10]         ;893
0000a4  2306              MOVS     r3,#6                 ;903
0000a6  2200              MOVS     r2,#0                 ;903
0000a8  e9cd2300          STRD     r2,r3,[sp,#0]         ;903
0000ac  7ae3              LDRB     r3,[r4,#0xb]          ;903
0000ae  1d22              ADDS     r2,r4,#4              ;903
0000b0  4621              MOV      r1,r4                 ;903
0000b2  4628              MOV      r0,r5                 ;903
0000b4  f7fffffe          BL       ip_output
0000b8  4628              MOV      r0,r5                 ;906
0000ba  f7fffffe          BL       pbuf_free
0000be  bf00              NOP                            ;908
0000c0  bf00              NOP                            ;908
0000c2  6da0              LDR      r0,[r4,#0x58]         ;908
0000c4  1e41              SUBS     r1,r0,#1              ;908
0000c6  a022              ADR      r0,|L2.336|
0000c8  6a62              LDR      r2,[r4,#0x24]         ;908
0000ca  f7fffffe          BL       __2printf
0000ce  bf00              NOP                            ;908
0000d0  bf00              NOP                            ;908
0000d2  bf00              NOP      
0000d4  e7cf              B        |L2.118|
;;;911    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L2.216|
0000d8  7463705f          DCB      "tcp_keepalive: sending KEEPALIVE probe to %4d.%4d.%4d.%"
0000dc  6b656570
0000e0  616c6976
0000e4  653a2073
0000e8  656e6469
0000ec  6e67204b
0000f0  45455041
0000f4  4c495645
0000f8  2070726f
0000fc  62652074
000100  6f202534
000104  642e2534
000108  642e2534
00010c  642e25  
00010f  34640a00          DCB      "4d\n",0
000113  00                DCB      0
                  |L2.276|
                          DCD      tcp_ticks
                  |L2.280|
                          DCD      ||.constdata||+0x140
                  |L2.284|
00011c  7463705f          DCB      "tcp_keepalive: could not allocate memory for pbuf\n",0
000120  6b656570
000124  616c6976
000128  653a2063
00012c  6f756c64
000130  206e6f74
000134  20616c6c
000138  6f636174
00013c  65206d65
000140  6d6f7279
000144  20666f72
000148  20706275
00014c  660a00  
00014f  00                DCB      0
                  |L2.336|
000150  7463705f          DCB      "tcp_keepalive: seqno %8ld ackno %8ld.\n",0
000154  6b656570
000158  616c6976
00015c  653a2073
000160  65716e6f
000164  2025386c
000168  64206163
00016c  6b6e6f20
000170  25386c64
000174  2e0a00  
000177  00                DCB      0

                          AREA ||i.tcp_output||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_p
                          REQUIRE _printf_longlong_hex
                  tcp_output PROC
;;;454    err_t
;;;455    tcp_output(struct tcp_pcb *pcb)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;456    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
;;;457      struct pbuf *p;
;;;458      struct tcp_hdr *tcphdr;
;;;459      struct tcp_seg *seg, *useg;
;;;460      u32_t wnd, snd_nxt;
;;;461    #if TCP_CWND_DEBUG
;;;462      s16_t i = 0;
000008  2000              MOVS     r0,#0
00000a  9005              STR      r0,[sp,#0x14]
;;;463    #endif /* TCP_CWND_DEBUG */
;;;464      u8_t optlen = 0;
00000c  9004              STR      r0,[sp,#0x10]
;;;465    
;;;466      /* First, check if we are invoked by the TCP input processing
;;;467         code. If so, we do not output anything. Instead, we rely on the
;;;468         input processing code to call us when input processing is done
;;;469         with. */
;;;470      if (tcp_input_pcb == pcb) {
00000e  48cc              LDR      r0,|L3.832|
000010  6800              LDR      r0,[r0,#0]  ; tcp_input_pcb
000012  42a0              CMP      r0,r4
000014  d103              BNE      |L3.30|
;;;471        return ERR_OK;
000016  2000              MOVS     r0,#0
                  |L3.24|
;;;472      }
;;;473    
;;;474      wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
;;;475    
;;;476      seg = pcb->unsent;
;;;477    
;;;478      /* useg should point to last segment on unacked queue */
;;;479      useg = pcb->unacked;
;;;480      if (useg != NULL) {
;;;481        for (; useg->next != NULL; useg = useg->next);
;;;482      }
;;;483    
;;;484      /* If the TF_ACK_NOW flag is set and no data will be sent (either
;;;485       * because the ->unsent queue is empty or because the window does
;;;486       * not allow it), construct an empty ACK segment and send it.
;;;487       *
;;;488       * If data is to be sent, we will just piggyback the ACK (see below).
;;;489       */
;;;490      if (pcb->flags & TF_ACK_NOW &&
;;;491         (seg == NULL ||
;;;492          ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
;;;493    #if LWIP_TCP_TIMESTAMPS
;;;494        if (pcb->flags & TF_TIMESTAMP)
;;;495          optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
;;;496    #endif
;;;497        p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen, PBUF_RAM);
;;;498        if (p == NULL) {
;;;499          LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
;;;500          return ERR_BUF;
;;;501        }
;;;502        LWIP_DEBUGF(TCP_OUTPUT_DEBUG, 
;;;503                    ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
;;;504        /* remove ACK flags from the PCB, as we send an empty ACK now */
;;;505        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
;;;506    
;;;507        tcphdr = tcp_output_set_header(pcb, p, optlen, htonl(pcb->snd_nxt));
;;;508    
;;;509        /* NB. MSS option is only sent on SYNs, so ignore it here */
;;;510    #if LWIP_TCP_TIMESTAMPS
;;;511        pcb->ts_lastacksent = pcb->rcv_nxt;
;;;512    
;;;513        if (pcb->flags & TF_TIMESTAMP)
;;;514          tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
;;;515    #endif 
;;;516    
;;;517    #if CHECKSUM_GEN_TCP
;;;518        tcphdr->chksum = inet_chksum_pseudo(p, &(pcb->local_ip), &(pcb->remote_ip),
;;;519              IP_PROTO_TCP, p->tot_len);
;;;520    #endif
;;;521    #if LWIP_NETIF_HWADDRHINT
;;;522        ip_output_hinted(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
;;;523            IP_PROTO_TCP, &(pcb->addr_hint));
;;;524    #else /* LWIP_NETIF_HWADDRHINT*/
;;;525        ip_output(p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
;;;526            IP_PROTO_TCP);
;;;527    #endif /* LWIP_NETIF_HWADDRHINT*/
;;;528        pbuf_free(p);
;;;529    
;;;530        return ERR_OK;
;;;531      }
;;;532    
;;;533    #if TCP_OUTPUT_DEBUG
;;;534      if (seg == NULL) {
;;;535        LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: nothing to send (%p)\n",
;;;536                                       (void*)pcb->unsent));
;;;537      }
;;;538    #endif /* TCP_OUTPUT_DEBUG */
;;;539    #if TCP_CWND_DEBUG
;;;540      if (seg == NULL) {
;;;541        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"U16_F
;;;542                                     ", cwnd %"U16_F", wnd %"U32_F
;;;543                                     ", seg == NULL, ack %"U32_F"\n",
;;;544                                     pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));
;;;545      } else {
;;;546        LWIP_DEBUGF(TCP_CWND_DEBUG, 
;;;547                    ("tcp_output: snd_wnd %"U16_F", cwnd %"U16_F", wnd %"U32_F
;;;548                     ", effwnd %"U32_F", seq %"U32_F", ack %"U32_F"\n",
;;;549                     pcb->snd_wnd, pcb->cwnd, wnd,
;;;550                     ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
;;;551                     ntohl(seg->tcphdr->seqno), pcb->lastack));
;;;552      }
;;;553    #endif /* TCP_CWND_DEBUG */
;;;554      /* data available and window allows it to be sent? */
;;;555      while (seg != NULL &&
;;;556             ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
;;;557        LWIP_ASSERT("RST not expected here!", 
;;;558                    (TCPH_FLAGS(seg->tcphdr) & TCP_RST) == 0);
;;;559        /* Stop sending if the nagle algorithm would prevent it
;;;560         * Don't stop:
;;;561         * - if tcp_enqueue had a memory error before (prevent delayed ACK timeout) or
;;;562         * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
;;;563         *   either seg->next != NULL or pcb->unacked == NULL;
;;;564         *   RST is no sent using tcp_enqueue/tcp_output.
;;;565         */
;;;566        if((tcp_do_output_nagle(pcb) == 0) &&
;;;567          ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)){
;;;568          break;
;;;569        }
;;;570    #if TCP_CWND_DEBUG
;;;571        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"U16_F", cwnd %"U16_F", wnd %"U32_F", effwnd %"U32_F", seq %"U32_F", ack %"U32_F", i %"S16_F"\n",
;;;572                                pcb->snd_wnd, pcb->cwnd, wnd,
;;;573                                ntohl(seg->tcphdr->seqno) + seg->len -
;;;574                                pcb->lastack,
;;;575                                ntohl(seg->tcphdr->seqno), pcb->lastack, i));
;;;576        ++i;
;;;577    #endif /* TCP_CWND_DEBUG */
;;;578    
;;;579        pcb->unsent = seg->next;
;;;580    
;;;581        if (pcb->state != SYN_SENT) {
;;;582          TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
;;;583          pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
;;;584        }
;;;585    
;;;586        tcp_output_segment(seg, pcb);
;;;587        snd_nxt = ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
;;;588        if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
;;;589          pcb->snd_nxt = snd_nxt;
;;;590        }
;;;591        /* put segment on unacknowledged list if length > 0 */
;;;592        if (TCP_TCPLEN(seg) > 0) {
;;;593          seg->next = NULL;
;;;594          /* unacked list is empty? */
;;;595          if (pcb->unacked == NULL) {
;;;596            pcb->unacked = seg;
;;;597            useg = seg;
;;;598          /* unacked list is not empty? */
;;;599          } else {
;;;600            /* In the case of fast retransmit, the packet should not go to the tail
;;;601             * of the unacked queue, but rather somewhere before it. We need to check for
;;;602             * this case. -STJ Jul 27, 2004 */
;;;603            if (TCP_SEQ_LT(ntohl(seg->tcphdr->seqno), ntohl(useg->tcphdr->seqno))){
;;;604              /* add segment to before tail of unacked list, keeping the list sorted */
;;;605              struct tcp_seg **cur_seg = &(pcb->unacked);
;;;606              while (*cur_seg &&
;;;607                TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
;;;608                  cur_seg = &((*cur_seg)->next );
;;;609              }
;;;610              seg->next = (*cur_seg);
;;;611              (*cur_seg) = seg;
;;;612            } else {
;;;613              /* add segment to tail of unacked list */
;;;614              useg->next = seg;
;;;615              useg = useg->next;
;;;616            }
;;;617          }
;;;618        /* do not queue empty segments on the unacked list */
;;;619        } else {
;;;620          tcp_seg_free(seg);
;;;621        }
;;;622        seg = pcb->unsent;
;;;623      }
;;;624    
;;;625      if (seg != NULL && pcb->persist_backoff == 0 && 
;;;626          ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > pcb->snd_wnd) {
;;;627        /* prepare for persist timer */
;;;628        pcb->persist_cnt = 0;
;;;629        pcb->persist_backoff = 1;
;;;630      }
;;;631    
;;;632      pcb->flags &= ~TF_NAGLEMEMERR;
;;;633      return ERR_OK;
;;;634    }
000018  b007              ADD      sp,sp,#0x1c
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.30|
00001e  f8b4005c          LDRH     r0,[r4,#0x5c]         ;474
000022  f8b41052          LDRH     r1,[r4,#0x52]         ;474
000026  4288              CMP      r0,r1                 ;474
000028  da02              BGE      |L3.48|
00002a  f8b4005c          LDRH     r0,[r4,#0x5c]         ;474
00002e  e001              B        |L3.52|
                  |L3.48|
000030  f8b40052          LDRH     r0,[r4,#0x52]         ;474
                  |L3.52|
000034  4681              MOV      r9,r0                 ;474
000036  6f65              LDR      r5,[r4,#0x74]         ;476
000038  6fa6              LDR      r6,[r4,#0x78]         ;479
00003a  b126              CBZ      r6,|L3.70|
00003c  e000              B        |L3.64|
                  |L3.62|
00003e  6836              LDR      r6,[r6,#0]            ;481
                  |L3.64|
000040  6830              LDR      r0,[r6,#0]            ;481
000042  2800              CMP      r0,#0                 ;481
000044  d1fb              BNE      |L3.62|
                  |L3.70|
000046  f8940022          LDRB     r0,[r4,#0x22]         ;490
00004a  f0100f02          TST      r0,#2                 ;490
00004e  d050              BEQ      |L3.242|
000050  b14d              CBZ      r5,|L3.102|
000052  6929              LDR      r1,[r5,#0x10]         ;492
000054  6848              LDR      r0,[r1,#4]            ;492
000056  f7fffffe          BL       ntohl
00005a  6ce1              LDR      r1,[r4,#0x4c]         ;492
00005c  1a40              SUBS     r0,r0,r1              ;492
00005e  89a9              LDRH     r1,[r5,#0xc]          ;492
000060  4408              ADD      r0,r0,r1              ;492
000062  4548              CMP      r0,r9                 ;492
000064  d945              BLS      |L3.242|
                  |L3.102|
000066  9804              LDR      r0,[sp,#0x10]         ;497
000068  f1000114          ADD      r1,r0,#0x14           ;497
00006c  2200              MOVS     r2,#0                 ;497
00006e  2001              MOVS     r0,#1                 ;497
000070  f7fffffe          BL       pbuf_alloc
000074  4607              MOV      r7,r0                 ;497
000076  b94f              CBNZ     r7,|L3.140|
000078  bf00              NOP                            ;499
00007a  bf00              NOP                            ;499
00007c  a0b1              ADR      r0,|L3.836|
00007e  f7fffffe          BL       __2printf
000082  bf00              NOP                            ;499
000084  bf00              NOP                            ;499
000086  f06f0001          MVN      r0,#1                 ;500
00008a  e7c5              B        |L3.24|
                  |L3.140|
00008c  bf00              NOP                            ;502
00008e  bf00              NOP                            ;502
000090  a0b7              ADR      r0,|L3.880|
000092  6a61              LDR      r1,[r4,#0x24]         ;502
000094  f7fffffe          BL       __2printf
000098  bf00              NOP                            ;502
00009a  bf00              NOP                            ;502
00009c  f8940022          LDRB     r0,[r4,#0x22]         ;505
0000a0  f0200003          BIC      r0,r0,#3              ;505
0000a4  f8840022          STRB     r0,[r4,#0x22]         ;505
0000a8  6da0              LDR      r0,[r4,#0x58]         ;507
0000aa  f7fffffe          BL       htonl
0000ae  4680              MOV      r8,r0                 ;507
0000b0  4603              MOV      r3,r0                 ;507
0000b2  4639              MOV      r1,r7                 ;507
0000b4  4620              MOV      r0,r4                 ;507
0000b6  9a04              LDR      r2,[sp,#0x10]         ;507
0000b8  f7fffffe          BL       tcp_output_set_header
0000bc  9006              STR      r0,[sp,#0x18]         ;507
0000be  893b              LDRH     r3,[r7,#8]            ;518
0000c0  9300              STR      r3,[sp,#0]            ;518
0000c2  2306              MOVS     r3,#6                 ;518
0000c4  1d22              ADDS     r2,r4,#4              ;518
0000c6  4621              MOV      r1,r4                 ;518
0000c8  4638              MOV      r0,r7                 ;518
0000ca  f7fffffe          BL       inet_chksum_pseudo
0000ce  4601              MOV      r1,r0                 ;518
0000d0  9806              LDR      r0,[sp,#0x18]         ;518
0000d2  8201              STRH     r1,[r0,#0x10]         ;518
0000d4  2306              MOVS     r3,#6                 ;525
0000d6  7aa2              LDRB     r2,[r4,#0xa]          ;525
0000d8  e9cd2300          STRD     r2,r3,[sp,#0]         ;525
0000dc  7ae3              LDRB     r3,[r4,#0xb]          ;525
0000de  1d22              ADDS     r2,r4,#4              ;525
0000e0  4621              MOV      r1,r4                 ;525
0000e2  4638              MOV      r0,r7                 ;525
0000e4  f7fffffe          BL       ip_output
0000e8  4638              MOV      r0,r7                 ;528
0000ea  f7fffffe          BL       pbuf_free
0000ee  2000              MOVS     r0,#0                 ;530
0000f0  e792              B        |L3.24|
                  |L3.242|
0000f2  b93d              CBNZ     r5,|L3.260|
0000f4  bf00              NOP                            ;535
0000f6  bf00              NOP                            ;535
0000f8  a0a6              ADR      r0,|L3.916|
0000fa  6f61              LDR      r1,[r4,#0x74]         ;535
0000fc  f7fffffe          BL       __2printf
000100  bf00              NOP                            ;535
000102  bf00              NOP                            ;535
                  |L3.260|
000104  b96d              CBNZ     r5,|L3.290|
000106  bf00              NOP                            ;541
000108  bf00              NOP                            ;541
00010a  6ce3              LDR      r3,[r4,#0x4c]         ;541
00010c  9300              STR      r3,[sp,#0]            ;541
00010e  f8b42052          LDRH     r2,[r4,#0x52]         ;541
000112  f8b4105c          LDRH     r1,[r4,#0x5c]         ;541
000116  464b              MOV      r3,r9                 ;541
000118  48a7              LDR      r0,|L3.952|
00011a  f7fffffe          BL       __2printf
00011e  bf00              NOP                            ;541
000120  e01e              B        |L3.352|
                  |L3.290|
000122  bf00              NOP                            ;546
000124  bf00              NOP                            ;546
000126  6929              LDR      r1,[r5,#0x10]         ;546
000128  6848              LDR      r0,[r1,#4]            ;546
00012a  f7fffffe          BL       ntohl
00012e  4683              MOV      r11,r0                ;546
000130  6929              LDR      r1,[r5,#0x10]         ;546
000132  6848              LDR      r0,[r1,#4]            ;546
000134  f7fffffe          BL       ntohl
000138  6ce1              LDR      r1,[r4,#0x4c]         ;546
00013a  1a40              SUBS     r0,r0,r1              ;546
00013c  89a9              LDRH     r1,[r5,#0xc]          ;546
00013e  eb000801          ADD      r8,r0,r1              ;546
000142  6ce3              LDR      r3,[r4,#0x4c]         ;546
000144  e9cd8b00          STRD     r8,r11,[sp,#0]        ;546
000148  9302              STR      r3,[sp,#8]            ;546
00014a  f8b42052          LDRH     r2,[r4,#0x52]         ;546
00014e  f8b4105c          LDRH     r1,[r4,#0x5c]         ;546
000152  464b              MOV      r3,r9                 ;546
000154  4898              LDR      r0,|L3.952|
000156  3044              ADDS     r0,r0,#0x44           ;546
000158  f7fffffe          BL       __2printf
00015c  bf00              NOP                            ;546
00015e  bf00              NOP                            ;546
                  |L3.352|
000160  e0c3              B        |L3.746|
                  |L3.354|
000162  6fa0              LDR      r0,[r4,#0x78]         ;566
000164  b170              CBZ      r0,|L3.388|
000166  f8940022          LDRB     r0,[r4,#0x22]         ;566
00016a  f0100f40          TST      r0,#0x40              ;566
00016e  d109              BNE      |L3.388|
000170  6f60              LDR      r0,[r4,#0x74]         ;566
000172  b148              CBZ      r0,|L3.392|
000174  6f60              LDR      r0,[r4,#0x74]         ;566
000176  6800              LDR      r0,[r0,#0]            ;566
000178  b920              CBNZ     r0,|L3.388|
00017a  6f60              LDR      r0,[r4,#0x74]         ;566
00017c  8980              LDRH     r0,[r0,#0xc]          ;566
00017e  8f21              LDRH     r1,[r4,#0x38]         ;566
000180  4288              CMP      r0,r1                 ;566
000182  db01              BLT      |L3.392|
                  |L3.388|
000184  2001              MOVS     r0,#1                 ;566
000186  e000              B        |L3.394|
                  |L3.392|
000188  2000              MOVS     r0,#0                 ;566
                  |L3.394|
00018a  b928              CBNZ     r0,|L3.408|
00018c  f8940022          LDRB     r0,[r4,#0x22]         ;567
000190  f0100fa0          TST      r0,#0xa0              ;567
000194  d100              BNE      |L3.408|
000196  e0b4              B        |L3.770|
                  |L3.408|
000198  bf00              NOP                            ;571
00019a  bf00              NOP                            ;571
00019c  6929              LDR      r1,[r5,#0x10]         ;571
00019e  6848              LDR      r0,[r1,#4]            ;571
0001a0  f7fffffe          BL       ntohl
0001a4  4683              MOV      r11,r0                ;571
0001a6  6929              LDR      r1,[r5,#0x10]         ;571
0001a8  6848              LDR      r0,[r1,#4]            ;571
0001aa  f7fffffe          BL       ntohl
0001ae  89a9              LDRH     r1,[r5,#0xc]          ;571
0001b0  4408              ADD      r0,r0,r1              ;571
0001b2  6ce1              LDR      r1,[r4,#0x4c]         ;571
0001b4  eba00801          SUB      r8,r0,r1              ;571
0001b8  9b05              LDR      r3,[sp,#0x14]         ;571
0001ba  e9cd8b00          STRD     r8,r11,[sp,#0]        ;571
0001be  e9cd1302          STRD     r1,r3,[sp,#8]         ;571
0001c2  f8b42052          LDRH     r2,[r4,#0x52]         ;571
0001c6  f8b4105c          LDRH     r1,[r4,#0x5c]         ;571
0001ca  464b              MOV      r3,r9                 ;571
0001cc  487a              LDR      r0,|L3.952|
0001ce  3094              ADDS     r0,r0,#0x94           ;571
0001d0  f7fffffe          BL       __2printf
0001d4  bf00              NOP                            ;571
0001d6  bf00              NOP                            ;571
0001d8  9805              LDR      r0,[sp,#0x14]         ;576
0001da  1c40              ADDS     r0,r0,#1              ;576
0001dc  b200              SXTH     r0,r0                 ;576
0001de  9005              STR      r0,[sp,#0x14]         ;576
0001e0  6828              LDR      r0,[r5,#0]            ;579
0001e2  6760              STR      r0,[r4,#0x74]         ;579
0001e4  7c20              LDRB     r0,[r4,#0x10]         ;581
0001e6  2802              CMP      r0,#2                 ;581
0001e8  d010              BEQ      |L3.524|
0001ea  6929              LDR      r1,[r5,#0x10]         ;582
0001ec  8988              LDRH     r0,[r1,#0xc]          ;582
0001ee  f7fffffe          BL       ntohs
0001f2  f0400810          ORR      r8,r0,#0x10           ;582
0001f6  4640              MOV      r0,r8                 ;582
0001f8  f7fffffe          BL       htons
0001fc  6929              LDR      r1,[r5,#0x10]         ;582
0001fe  8188              STRH     r0,[r1,#0xc]          ;582
000200  f8940022          LDRB     r0,[r4,#0x22]         ;583
000204  f0200003          BIC      r0,r0,#3              ;583
000208  f8840022          STRB     r0,[r4,#0x22]         ;583
                  |L3.524|
00020c  4621              MOV      r1,r4                 ;586
00020e  4628              MOV      r0,r5                 ;586
000210  f7fffffe          BL       tcp_output_segment
000214  6929              LDR      r1,[r5,#0x10]         ;587
000216  6848              LDR      r0,[r1,#4]            ;587
000218  f7fffffe          BL       ntohl
00021c  4680              MOV      r8,r0                 ;587
00021e  6929              LDR      r1,[r5,#0x10]         ;587
000220  8988              LDRH     r0,[r1,#0xc]          ;587
000222  f7fffffe          BL       ntohs
000226  f0100f01          TST      r0,#1                 ;587
00022a  d106              BNE      |L3.570|
00022c  6929              LDR      r1,[r5,#0x10]         ;587
00022e  8988              LDRH     r0,[r1,#0xc]          ;587
000230  f7fffffe          BL       ntohs
000234  f0100f02          TST      r0,#2                 ;587
000238  d001              BEQ      |L3.574|
                  |L3.570|
00023a  2001              MOVS     r0,#1                 ;587
00023c  e000              B        |L3.576|
                  |L3.574|
00023e  2000              MOVS     r0,#0                 ;587
                  |L3.576|
000240  89a9              LDRH     r1,[r5,#0xc]          ;587
000242  4408              ADD      r0,r0,r1              ;587
000244  eb080a00          ADD      r10,r8,r0             ;587
000248  6da0              LDR      r0,[r4,#0x58]         ;588
00024a  ebb0000a          SUBS     r0,r0,r10             ;588
00024e  d501              BPL      |L3.596|
000250  f8c4a058          STR      r10,[r4,#0x58]        ;589
                  |L3.596|
000254  6929              LDR      r1,[r5,#0x10]         ;592
000256  8988              LDRH     r0,[r1,#0xc]          ;592
000258  f7fffffe          BL       ntohs
00025c  f0100f01          TST      r0,#1                 ;592
000260  d106              BNE      |L3.624|
000262  6929              LDR      r1,[r5,#0x10]         ;592
000264  8988              LDRH     r0,[r1,#0xc]          ;592
000266  f7fffffe          BL       ntohs
00026a  f0100f02          TST      r0,#2                 ;592
00026e  d001              BEQ      |L3.628|
                  |L3.624|
000270  2001              MOVS     r0,#1                 ;592
000272  e000              B        |L3.630|
                  |L3.628|
000274  2000              MOVS     r0,#0                 ;592
                  |L3.630|
000276  89a9              LDRH     r1,[r5,#0xc]          ;592
000278  4408              ADD      r0,r0,r1              ;592
00027a  2800              CMP      r0,#0                 ;592
00027c  dd31              BLE      |L3.738|
00027e  2000              MOVS     r0,#0                 ;593
000280  6028              STR      r0,[r5,#0]            ;593
000282  6fa0              LDR      r0,[r4,#0x78]         ;595
000284  b910              CBNZ     r0,|L3.652|
000286  67a5              STR      r5,[r4,#0x78]         ;596
000288  462e              MOV      r6,r5                 ;597
00028a  e02d              B        |L3.744|
                  |L3.652|
00028c  6929              LDR      r1,[r5,#0x10]         ;603
00028e  6848              LDR      r0,[r1,#4]            ;603
000290  f7fffffe          BL       ntohl
000294  4680              MOV      r8,r0                 ;603
000296  6931              LDR      r1,[r6,#0x10]         ;603
000298  6848              LDR      r0,[r1,#4]            ;603
00029a  f7fffffe          BL       ntohl
00029e  ebb80000          SUBS     r0,r8,r0              ;603
0002a2  d51b              BPL      |L3.732|
0002a4  f1040878          ADD      r8,r4,#0x78           ;605
0002a8  e001              B        |L3.686|
                  |L3.682|
0002aa  f8d88000          LDR      r8,[r8,#0]            ;608
                  |L3.686|
0002ae  f8d80000          LDR      r0,[r8,#0]            ;606
0002b2  b168              CBZ      r0,|L3.720|
0002b4  f8d81000          LDR      r1,[r8,#0]            ;607
0002b8  6909              LDR      r1,[r1,#0x10]         ;607
0002ba  6848              LDR      r0,[r1,#4]            ;607
0002bc  f7fffffe          BL       ntohl
0002c0  4683              MOV      r11,r0                ;607
0002c2  6929              LDR      r1,[r5,#0x10]         ;607
0002c4  6848              LDR      r0,[r1,#4]            ;607
0002c6  f7fffffe          BL       ntohl
0002ca  ebbb0000          SUBS     r0,r11,r0             ;607
0002ce  d4ec              BMI      |L3.682|
                  |L3.720|
0002d0  f8d80000          LDR      r0,[r8,#0]            ;610
0002d4  6028              STR      r0,[r5,#0]            ;610
0002d6  f8c85000          STR      r5,[r8,#0]            ;611
0002da  e005              B        |L3.744|
                  |L3.732|
0002dc  6035              STR      r5,[r6,#0]            ;614
0002de  6836              LDR      r6,[r6,#0]            ;615
0002e0  e002              B        |L3.744|
                  |L3.738|
0002e2  4628              MOV      r0,r5                 ;620
0002e4  f7fffffe          BL       tcp_seg_free
                  |L3.744|
0002e8  6f65              LDR      r5,[r4,#0x74]         ;622
                  |L3.746|
0002ea  b155              CBZ      r5,|L3.770|
0002ec  6929              LDR      r1,[r5,#0x10]         ;556
0002ee  6848              LDR      r0,[r1,#4]            ;556
0002f0  f7fffffe          BL       ntohl
0002f4  6ce1              LDR      r1,[r4,#0x4c]         ;556
0002f6  1a40              SUBS     r0,r0,r1              ;556
0002f8  89a9              LDRH     r1,[r5,#0xc]          ;556
0002fa  4408              ADD      r0,r0,r1              ;556
0002fc  4548              CMP      r0,r9                 ;556
0002fe  f67faf30          BLS      |L3.354|
                  |L3.770|
000302  bf00              NOP                            ;568
000304  b1a5              CBZ      r5,|L3.816|
000306  f894009c          LDRB     r0,[r4,#0x9c]         ;625
00030a  b988              CBNZ     r0,|L3.816|
00030c  6929              LDR      r1,[r5,#0x10]         ;626
00030e  6848              LDR      r0,[r1,#4]            ;626
000310  f7fffffe          BL       ntohl
000314  6ce1              LDR      r1,[r4,#0x4c]         ;626
000316  1a40              SUBS     r0,r0,r1              ;626
000318  89a9              LDRH     r1,[r5,#0xc]          ;626
00031a  4408              ADD      r0,r0,r1              ;626
00031c  f8b4105c          LDRH     r1,[r4,#0x5c]         ;626
000320  4288              CMP      r0,r1                 ;626
000322  d905              BLS      |L3.816|
000324  2000              MOVS     r0,#0                 ;628
000326  f8c40098          STR      r0,[r4,#0x98]         ;628
00032a  2001              MOVS     r0,#1                 ;629
00032c  f884009c          STRB     r0,[r4,#0x9c]         ;629
                  |L3.816|
000330  f8940022          LDRB     r0,[r4,#0x22]         ;632
000334  f0200080          BIC      r0,r0,#0x80           ;632
000338  f8840022          STRB     r0,[r4,#0x22]         ;632
00033c  2000              MOVS     r0,#0                 ;633
00033e  e66b              B        |L3.24|
;;;635    
                          ENDP

                  |L3.832|
                          DCD      tcp_input_pcb
                  |L3.836|
000344  7463705f          DCB      "tcp_output: (ACK) could not allocate pbuf\n",0
000348  6f757470
00034c  75743a20
000350  2841434b
000354  2920636f
000358  756c6420
00035c  6e6f7420
000360  616c6c6f
000364  63617465
000368  20706275
00036c  660a00  
00036f  00                DCB      0
                  |L3.880|
000370  7463705f          DCB      "tcp_output: sending ACK for %8ld\n",0
000374  6f757470
000378  75743a20
00037c  73656e64
000380  696e6720
000384  41434b20
000388  666f7220
00038c  25386c64
000390  0a00    
000392  00                DCB      0
000393  00                DCB      0
                  |L3.916|
000394  7463705f          DCB      "tcp_output: nothing to send (%p)\n",0
000398  6f757470
00039c  75743a20
0003a0  6e6f7468
0003a4  696e6720
0003a8  746f2073
0003ac  656e6420
0003b0  28257029
0003b4  0a00    
0003b6  00                DCB      0
0003b7  00                DCB      0
                  |L3.952|
                          DCD      ||.constdata||+0x54

                          AREA ||i.tcp_output_segment||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  tcp_output_segment PROC
;;;642    static void
;;;643    tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;644    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;645      u16_t len;
;;;646      struct netif *netif;
;;;647      u32_t *opts;
;;;648    
;;;649      /** @bug Exclude retransmitted segments from this count. */
;;;650      snmp_inc_tcpoutsegs();
;;;651    
;;;652      /* The TCP header has already been constructed, but the ackno and
;;;653       wnd fields remain. */
;;;654      seg->tcphdr->ackno = htonl(pcb->rcv_nxt);
000008  6a68              LDR      r0,[r5,#0x24]
00000a  f7fffffe          BL       htonl
00000e  6921              LDR      r1,[r4,#0x10]
000010  6088              STR      r0,[r1,#8]
;;;655    
;;;656      /* advertise our receive window size in this TCP segment */
;;;657      seg->tcphdr->wnd = htons(pcb->rcv_ann_wnd);
000012  8d68              LDRH     r0,[r5,#0x2a]
000014  f7fffffe          BL       htons
000018  6921              LDR      r1,[r4,#0x10]
00001a  81c8              STRH     r0,[r1,#0xe]
;;;658    
;;;659      pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
00001c  8d69              LDRH     r1,[r5,#0x2a]
00001e  6a68              LDR      r0,[r5,#0x24]
000020  4408              ADD      r0,r0,r1
000022  62e8              STR      r0,[r5,#0x2c]
;;;660    
;;;661      /* Add any requested options.  NB MSS option is only set on SYN
;;;662         packets, so ignore it here */
;;;663      opts = (u32_t *)(seg->tcphdr + 1);
000024  6920              LDR      r0,[r4,#0x10]
000026  f1000814          ADD      r8,r0,#0x14
;;;664      if (seg->flags & TF_SEG_OPTS_MSS) {
00002a  7ba0              LDRB     r0,[r4,#0xe]
00002c  f0100f01          TST      r0,#1
000030  d006              BEQ      |L4.64|
;;;665        TCP_BUILD_MSS_OPTION(*opts);
000032  4837              LDR      r0,|L4.272|
000034  f7fffffe          BL       htonl
000038  f8c80000          STR      r0,[r8,#0]
;;;666        opts += 1;
00003c  f1080804          ADD      r8,r8,#4
                  |L4.64|
;;;667      }
;;;668    #if LWIP_TCP_TIMESTAMPS
;;;669      pcb->ts_lastacksent = pcb->rcv_nxt;
;;;670    
;;;671      if (seg->flags & TF_SEG_OPTS_TS) {
;;;672        tcp_build_timestamp_option(pcb, opts);
;;;673        opts += 3;
;;;674      }
;;;675    #endif
;;;676    
;;;677      /* If we don't have a local IP address, we get one by
;;;678         calling ip_route(). */
;;;679      if (ip_addr_isany(&(pcb->local_ip))) {
000040  b10d              CBZ      r5,|L4.70|
000042  6828              LDR      r0,[r5,#0]
000044  b958              CBNZ     r0,|L4.94|
                  |L4.70|
;;;680        netif = ip_route(&(pcb->remote_ip));
000046  1d28              ADDS     r0,r5,#4
000048  f7fffffe          BL       ip_route
00004c  4606              MOV      r6,r0
;;;681        if (netif == NULL) {
00004e  b90e              CBNZ     r6,|L4.84|
                  |L4.80|
;;;682          return;
;;;683        }
;;;684        ip_addr_set(&(pcb->local_ip), &(netif->ip_addr));
;;;685      }
;;;686    
;;;687      /* Set retransmission timer running if it is not currently enabled */
;;;688      if(pcb->rtime == -1)
;;;689        pcb->rtime = 0;
;;;690    
;;;691      if (pcb->rttest == 0) {
;;;692        pcb->rttest = tcp_ticks;
;;;693        pcb->rtseq = ntohl(seg->tcphdr->seqno);
;;;694    
;;;695        LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_output_segment: rtseq %"U32_F"\n", pcb->rtseq));
;;;696      }
;;;697      LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
;;;698              htonl(seg->tcphdr->seqno), htonl(seg->tcphdr->seqno) +
;;;699              seg->len));
;;;700    
;;;701      len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
;;;702    
;;;703      seg->p->len -= len;
;;;704      seg->p->tot_len -= len;
;;;705    
;;;706      seg->p->payload = seg->tcphdr;
;;;707    
;;;708      seg->tcphdr->chksum = 0;
;;;709    #if CHECKSUM_GEN_TCP
;;;710      seg->tcphdr->chksum = inet_chksum_pseudo(seg->p,
;;;711                 &(pcb->local_ip),
;;;712                 &(pcb->remote_ip),
;;;713                 IP_PROTO_TCP, seg->p->tot_len);
;;;714    #endif
;;;715      TCP_STATS_INC(tcp.xmit);
;;;716    
;;;717    #if LWIP_NETIF_HWADDRHINT
;;;718      ip_output_hinted(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
;;;719          IP_PROTO_TCP, &(pcb->addr_hint));
;;;720    #else /* LWIP_NETIF_HWADDRHINT*/
;;;721      ip_output(seg->p, &(pcb->local_ip), &(pcb->remote_ip), pcb->ttl, pcb->tos,
;;;722          IP_PROTO_TCP);
;;;723    #endif /* LWIP_NETIF_HWADDRHINT*/
;;;724    }
000050  e8bd87fc          POP      {r2-r10,pc}
                  |L4.84|
000054  1d30              ADDS     r0,r6,#4              ;684
000056  d100              BNE      |L4.90|
000058  e000              B        |L4.92|
                  |L4.90|
00005a  6870              LDR      r0,[r6,#4]            ;684
                  |L4.92|
00005c  6028              STR      r0,[r5,#0]            ;684
                  |L4.94|
00005e  f9b50036          LDRSH    r0,[r5,#0x36]         ;688
000062  1c40              ADDS     r0,r0,#1              ;688
000064  d100              BNE      |L4.104|
000066  86e8              STRH     r0,[r5,#0x36]         ;689
                  |L4.104|
000068  6be8              LDR      r0,[r5,#0x3c]         ;691
00006a  b978              CBNZ     r0,|L4.140|
00006c  4829              LDR      r0,|L4.276|
00006e  6800              LDR      r0,[r0,#0]            ;692  ; tcp_ticks
000070  63e8              STR      r0,[r5,#0x3c]         ;692
000072  6921              LDR      r1,[r4,#0x10]         ;693
000074  6848              LDR      r0,[r1,#4]            ;693
000076  f7fffffe          BL       ntohl
00007a  6428              STR      r0,[r5,#0x40]         ;693
00007c  bf00              NOP                            ;695
00007e  bf00              NOP                            ;695
000080  a025              ADR      r0,|L4.280|
000082  6c29              LDR      r1,[r5,#0x40]         ;695
000084  f7fffffe          BL       __2printf
000088  bf00              NOP                            ;695
00008a  bf00              NOP                            ;695
                  |L4.140|
00008c  bf00              NOP                            ;697
00008e  bf00              NOP                            ;697
000090  6921              LDR      r1,[r4,#0x10]         ;697
000092  6848              LDR      r0,[r1,#4]            ;697
000094  f7fffffe          BL       htonl
000098  89a1              LDRH     r1,[r4,#0xc]          ;697
00009a  eb000901          ADD      r9,r0,r1              ;697
00009e  6921              LDR      r1,[r4,#0x10]         ;697
0000a0  6848              LDR      r0,[r1,#4]            ;697
0000a2  f7fffffe          BL       htonl
0000a6  4682              MOV      r10,r0                ;697
0000a8  464a              MOV      r2,r9                 ;697
0000aa  4601              MOV      r1,r0                 ;697
0000ac  a022              ADR      r0,|L4.312|
0000ae  f7fffffe          BL       __2printf
0000b2  bf00              NOP                            ;697
0000b4  bf00              NOP                            ;697
0000b6  6861              LDR      r1,[r4,#4]            ;701
0000b8  6920              LDR      r0,[r4,#0x10]         ;701
0000ba  6849              LDR      r1,[r1,#4]            ;701
0000bc  1a40              SUBS     r0,r0,r1              ;701
0000be  b287              UXTH     r7,r0                 ;701
0000c0  6860              LDR      r0,[r4,#4]            ;703
0000c2  8940              LDRH     r0,[r0,#0xa]          ;703
0000c4  1bc0              SUBS     r0,r0,r7              ;703
0000c6  6861              LDR      r1,[r4,#4]            ;703
0000c8  8148              STRH     r0,[r1,#0xa]          ;703
0000ca  6860              LDR      r0,[r4,#4]            ;704
0000cc  8900              LDRH     r0,[r0,#8]            ;704
0000ce  1bc0              SUBS     r0,r0,r7              ;704
0000d0  6861              LDR      r1,[r4,#4]            ;704
0000d2  8108              STRH     r0,[r1,#8]            ;704
0000d4  6861              LDR      r1,[r4,#4]            ;706
0000d6  6920              LDR      r0,[r4,#0x10]         ;706
0000d8  6048              STR      r0,[r1,#4]            ;706
0000da  2000              MOVS     r0,#0                 ;708
0000dc  6921              LDR      r1,[r4,#0x10]         ;708
0000de  8208              STRH     r0,[r1,#0x10]         ;708
0000e0  6860              LDR      r0,[r4,#4]            ;710
0000e2  8903              LDRH     r3,[r0,#8]            ;710
0000e4  9300              STR      r3,[sp,#0]            ;710
0000e6  2306              MOVS     r3,#6                 ;710
0000e8  1d2a              ADDS     r2,r5,#4              ;710
0000ea  4629              MOV      r1,r5                 ;710
0000ec  6860              LDR      r0,[r4,#4]            ;710
0000ee  f7fffffe          BL       inet_chksum_pseudo
0000f2  6921              LDR      r1,[r4,#0x10]         ;710
0000f4  8208              STRH     r0,[r1,#0x10]         ;710
0000f6  2306              MOVS     r3,#6                 ;721
0000f8  7aaa              LDRB     r2,[r5,#0xa]          ;721
0000fa  e9cd2300          STRD     r2,r3,[sp,#0]         ;721
0000fe  7aeb              LDRB     r3,[r5,#0xb]          ;721
000100  1d2a              ADDS     r2,r5,#4              ;721
000102  4629              MOV      r1,r5                 ;721
000104  6860              LDR      r0,[r4,#4]            ;721
000106  f7fffffe          BL       ip_output
00010a  bf00              NOP      
00010c  e7a0              B        |L4.80|
;;;725    
                          ENDP

00010e  0000              DCW      0x0000
                  |L4.272|
                          DCD      0x020405b4
                  |L4.276|
                          DCD      tcp_ticks
                  |L4.280|
000118  7463705f          DCB      "tcp_output_segment: rtseq %8ld\n",0
00011c  6f757470
000120  75745f73
000124  65676d65
000128  6e743a20
00012c  72747365
000130  71202538
000134  6c640a00
                  |L4.312|
000138  7463705f          DCB      "tcp_output_segment: %8ld:%8ld\n",0
00013c  6f757470
000140  75745f73
000144  65676d65
000148  6e743a20
00014c  25386c64
000150  3a25386c
000154  640a00  
000157  00                DCB      0

                          AREA ||i.tcp_output_set_header||, CODE, READONLY, ALIGN=1

                  tcp_output_set_header PROC
;;;62     static struct tcp_hdr *
;;;63     tcp_output_set_header(struct tcp_pcb *pcb, struct pbuf *p, int optlen,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;64                           u32_t seqno_be /* already in network byte order */)
;;;65     {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  4698              MOV      r8,r3
;;;66       struct tcp_hdr *tcphdr = p->payload;
00000c  687c              LDR      r4,[r7,#4]
;;;67       tcphdr->src = htons(pcb->local_port);
00000e  8b28              LDRH     r0,[r5,#0x18]
000010  f7fffffe          BL       htons
000014  8020              STRH     r0,[r4,#0]
;;;68       tcphdr->dest = htons(pcb->remote_port);
000016  8c28              LDRH     r0,[r5,#0x20]
000018  f7fffffe          BL       htons
00001c  8060              STRH     r0,[r4,#2]
;;;69       tcphdr->seqno = seqno_be;
00001e  f8c48004          STR      r8,[r4,#4]
;;;70       tcphdr->ackno = htonl(pcb->rcv_nxt);
000022  6a68              LDR      r0,[r5,#0x24]
000024  f7fffffe          BL       htonl
000028  60a0              STR      r0,[r4,#8]
;;;71       TCPH_FLAGS_SET(tcphdr, TCP_ACK);
00002a  89a0              LDRH     r0,[r4,#0xc]
00002c  f7fffffe          BL       ntohs
000030  f020003f          BIC      r0,r0,#0x3f
000034  f0400910          ORR      r9,r0,#0x10
000038  4648              MOV      r0,r9
00003a  f7fffffe          BL       htons
00003e  81a0              STRH     r0,[r4,#0xc]
;;;72       tcphdr->wnd = htons(pcb->rcv_ann_wnd);
000040  8d68              LDRH     r0,[r5,#0x2a]
000042  f7fffffe          BL       htons
000046  81e0              STRH     r0,[r4,#0xe]
;;;73       tcphdr->urgp = 0;
000048  2000              MOVS     r0,#0
00004a  8260              STRH     r0,[r4,#0x12]
;;;74       TCPH_HDRLEN_SET(tcphdr, (5 + optlen / 4));
00004c  89a0              LDRH     r0,[r4,#0xc]
00004e  f7fffffe          BL       ntohs
000052  f000013f          AND      r1,r0,#0x3f
000056  46b1              MOV      r9,r6
000058  17f0              ASRS     r0,r6,#31
00005a  eb067090          ADD      r0,r6,r0,LSR #30
00005e  1080              ASRS     r0,r0,#2
000060  1d40              ADDS     r0,r0,#5
000062  ea413000          ORR      r0,r1,r0,LSL #12
000066  fa1ffa80          UXTH     r10,r0
00006a  4650              MOV      r0,r10
00006c  f7fffffe          BL       htons
000070  81a0              STRH     r0,[r4,#0xc]
;;;75       tcphdr->chksum = 0;
000072  2000              MOVS     r0,#0
000074  8220              STRH     r0,[r4,#0x10]
;;;76     
;;;77       /* If we're sending a packet, update the announced right window edge */
;;;78       pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
000076  8d69              LDRH     r1,[r5,#0x2a]
000078  6a68              LDR      r0,[r5,#0x24]
00007a  4408              ADD      r0,r0,r1
00007c  62e8              STR      r0,[r5,#0x2c]
;;;79     
;;;80       return tcphdr;
00007e  4620              MOV      r0,r4
;;;81     }
000080  e8bd87f0          POP      {r4-r10,pc}
;;;82     
                          ENDP


                          AREA ||i.tcp_rexmit||, CODE, READONLY, ALIGN=1

                  tcp_rexmit PROC
;;;826    void
;;;827    tcp_rexmit(struct tcp_pcb *pcb)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;828    {
000004  4604              MOV      r4,r0
;;;829      struct tcp_seg *seg;
;;;830      struct tcp_seg **cur_seg;
;;;831    
;;;832      if (pcb->unacked == NULL) {
000006  6fa0              LDR      r0,[r4,#0x78]
000008  b908              CBNZ     r0,|L6.14|
                  |L6.10|
;;;833        return;
;;;834      }
;;;835    
;;;836      /* Move the first unacked segment to the unsent queue */
;;;837      /* Keep the unsent queue sorted. */
;;;838      seg = pcb->unacked;
;;;839      pcb->unacked = seg->next;
;;;840    
;;;841      cur_seg = &(pcb->unsent);
;;;842      while (*cur_seg &&
;;;843        TCP_SEQ_LT(ntohl((*cur_seg)->tcphdr->seqno), ntohl(seg->tcphdr->seqno))) {
;;;844          cur_seg = &((*cur_seg)->next );
;;;845      }
;;;846      seg->next = *cur_seg;
;;;847      *cur_seg = seg;
;;;848    
;;;849      ++pcb->nrtx;
;;;850    
;;;851      /* Don't take any rtt measurements after retransmitting. */
;;;852      pcb->rttest = 0;
;;;853    
;;;854      /* Do the actual retransmission. */
;;;855      snmp_inc_tcpretranssegs();
;;;856      tcp_output(pcb);
;;;857    }
00000a  e8bd81f0          POP      {r4-r8,pc}
                  |L6.14|
00000e  6fa6              LDR      r6,[r4,#0x78]         ;838
000010  6830              LDR      r0,[r6,#0]            ;839
000012  67a0              STR      r0,[r4,#0x78]         ;839
000014  f1040574          ADD      r5,r4,#0x74           ;841
000018  e000              B        |L6.28|
                  |L6.26|
00001a  682d              LDR      r5,[r5,#0]            ;844
                  |L6.28|
00001c  6828              LDR      r0,[r5,#0]            ;842
00001e  b158              CBZ      r0,|L6.56|
000020  6829              LDR      r1,[r5,#0]            ;843
000022  6909              LDR      r1,[r1,#0x10]         ;843
000024  6848              LDR      r0,[r1,#4]            ;843
000026  f7fffffe          BL       ntohl
00002a  4607              MOV      r7,r0                 ;843
00002c  6931              LDR      r1,[r6,#0x10]         ;843
00002e  6848              LDR      r0,[r1,#4]            ;843
000030  f7fffffe          BL       ntohl
000034  1a38              SUBS     r0,r7,r0              ;843
000036  d4f0              BMI      |L6.26|
                  |L6.56|
000038  6828              LDR      r0,[r5,#0]            ;846
00003a  6030              STR      r0,[r6,#0]            ;846
00003c  602e              STR      r6,[r5,#0]            ;847
00003e  f894004a          LDRB     r0,[r4,#0x4a]         ;849
000042  1c40              ADDS     r0,r0,#1              ;849
000044  f884004a          STRB     r0,[r4,#0x4a]         ;849
000048  2000              MOVS     r0,#0                 ;852
00004a  63e0              STR      r0,[r4,#0x3c]         ;852
00004c  4620              MOV      r0,r4                 ;856
00004e  f7fffffe          BL       tcp_output
000052  bf00              NOP      
000054  e7d9              B        |L6.10|
;;;858    
                          ENDP


                          AREA ||i.tcp_rexmit_rto||, CODE, READONLY, ALIGN=1

                  tcp_rexmit_rto PROC
;;;791    void
;;;792    tcp_rexmit_rto(struct tcp_pcb *pcb)
000000  b570              PUSH     {r4-r6,lr}
;;;793    {
000002  4604              MOV      r4,r0
;;;794      struct tcp_seg *seg;
;;;795    
;;;796      if (pcb->unacked == NULL) {
000004  6fa0              LDR      r0,[r4,#0x78]
000006  b900              CBNZ     r0,|L7.10|
                  |L7.8|
;;;797        return;
;;;798      }
;;;799    
;;;800      /* Move all unacked segments to the head of the unsent queue */
;;;801      for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
;;;802      /* concatenate unsent queue after unacked queue */
;;;803      seg->next = pcb->unsent;
;;;804      /* unsent queue is the concatenated queue (of unacked, unsent) */
;;;805      pcb->unsent = pcb->unacked;
;;;806      /* unacked queue is now empty */
;;;807      pcb->unacked = NULL;
;;;808    
;;;809      /* increment number of retransmissions */
;;;810      ++pcb->nrtx;
;;;811    
;;;812      /* Don't take any RTT measurements after retransmitting. */
;;;813      pcb->rttest = 0;
;;;814    
;;;815      /* Do the actual retransmission */
;;;816      tcp_output(pcb);
;;;817    }
000008  bd70              POP      {r4-r6,pc}
                  |L7.10|
00000a  6fa5              LDR      r5,[r4,#0x78]         ;801
00000c  e000              B        |L7.16|
                  |L7.14|
00000e  682d              LDR      r5,[r5,#0]            ;801
                  |L7.16|
000010  6828              LDR      r0,[r5,#0]            ;801
000012  2800              CMP      r0,#0                 ;801
000014  d1fb              BNE      |L7.14|
000016  6f60              LDR      r0,[r4,#0x74]         ;803
000018  6028              STR      r0,[r5,#0]            ;803
00001a  6fa0              LDR      r0,[r4,#0x78]         ;805
00001c  6760              STR      r0,[r4,#0x74]         ;805
00001e  2000              MOVS     r0,#0                 ;807
000020  67a0              STR      r0,[r4,#0x78]         ;807
000022  f894004a          LDRB     r0,[r4,#0x4a]         ;810
000026  1c40              ADDS     r0,r0,#1              ;810
000028  f884004a          STRB     r0,[r4,#0x4a]         ;810
00002c  2000              MOVS     r0,#0                 ;813
00002e  63e0              STR      r0,[r4,#0x3c]         ;813
000030  4620              MOV      r0,r4                 ;816
000032  f7fffffe          BL       tcp_output
000036  bf00              NOP      
000038  e7e6              B        |L7.8|
;;;818    
                          ENDP


                          AREA ||i.tcp_rst||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_sizespec
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  tcp_rst PROC
;;;746    void
;;;747    tcp_rst(u32_t seqno, u32_t ackno,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;748      struct ip_addr *local_ip, struct ip_addr *remote_ip,
;;;749      u16_t local_port, u16_t remote_port)
;;;750    {
000004  b083              SUB      sp,sp,#0xc
000006  4607              MOV      r7,r0
000008  460e              MOV      r6,r1
00000a  4690              MOV      r8,r2
00000c  4699              MOV      r9,r3
00000e  f8dda040          LDR      r10,[sp,#0x40]
;;;751      struct pbuf *p;
;;;752      struct tcp_hdr *tcphdr;
;;;753      p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
000012  2200              MOVS     r2,#0
000014  2114              MOVS     r1,#0x14
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       pbuf_alloc
00001c  4605              MOV      r5,r0
;;;754      if (p == NULL) {
00001e  b94d              CBNZ     r5,|L8.52|
;;;755          LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
000020  bf00              NOP      
000022  bf00              NOP      
000024  a02c              ADR      r0,|L8.216|
000026  f7fffffe          BL       __2printf
00002a  bf00              NOP      
00002c  bf00              NOP      
                  |L8.46|
;;;756          return;
;;;757      }
;;;758      LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
;;;759                  (p->len >= sizeof(struct tcp_hdr)));
;;;760    
;;;761      tcphdr = p->payload;
;;;762      tcphdr->src = htons(local_port);
;;;763      tcphdr->dest = htons(remote_port);
;;;764      tcphdr->seqno = htonl(seqno);
;;;765      tcphdr->ackno = htonl(ackno);
;;;766      TCPH_FLAGS_SET(tcphdr, TCP_RST | TCP_ACK);
;;;767      tcphdr->wnd = htons(TCP_WND);
;;;768      tcphdr->urgp = 0;
;;;769      TCPH_HDRLEN_SET(tcphdr, 5);
;;;770    
;;;771      tcphdr->chksum = 0;
;;;772    #if CHECKSUM_GEN_TCP
;;;773      tcphdr->chksum = inet_chksum_pseudo(p, local_ip, remote_ip,
;;;774                  IP_PROTO_TCP, p->tot_len);
;;;775    #endif
;;;776      TCP_STATS_INC(tcp.xmit);
;;;777      snmp_inc_tcpoutrsts();
;;;778       /* Send output with hardcoded TTL since we have no access to the pcb */
;;;779      ip_output(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP);
;;;780      pbuf_free(p);
;;;781      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
;;;782    }
00002e  b007              ADD      sp,sp,#0x1c
000030  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.52|
000034  686c              LDR      r4,[r5,#4]            ;761
000036  4650              MOV      r0,r10                ;762
000038  f7fffffe          BL       htons
00003c  8020              STRH     r0,[r4,#0]            ;762
00003e  9811              LDR      r0,[sp,#0x44]         ;763
000040  f7fffffe          BL       htons
000044  8060              STRH     r0,[r4,#2]            ;763
000046  4638              MOV      r0,r7                 ;764
000048  f7fffffe          BL       htonl
00004c  6060              STR      r0,[r4,#4]            ;764
00004e  4630              MOV      r0,r6                 ;765
000050  f7fffffe          BL       htonl
000054  60a0              STR      r0,[r4,#8]            ;765
000056  89a0              LDRH     r0,[r4,#0xc]          ;766
000058  f7fffffe          BL       ntohs
00005c  f020003f          BIC      r0,r0,#0x3f           ;766
000060  f0400b14          ORR      r11,r0,#0x14          ;766
000064  4658              MOV      r0,r11                ;766
000066  f7fffffe          BL       htons
00006a  81a0              STRH     r0,[r4,#0xc]          ;766
00006c  f6403068          MOV      r0,#0xb68             ;767
000070  f7fffffe          BL       htons
000074  81e0              STRH     r0,[r4,#0xe]          ;767
000076  2000              MOVS     r0,#0                 ;768
000078  8260              STRH     r0,[r4,#0x12]         ;768
00007a  89a0              LDRH     r0,[r4,#0xc]          ;769
00007c  f7fffffe          BL       ntohs
000080  f000003f          AND      r0,r0,#0x3f           ;769
000084  f4404ba0          ORR      r11,r0,#0x5000        ;769
000088  4658              MOV      r0,r11                ;769
00008a  f7fffffe          BL       htons
00008e  81a0              STRH     r0,[r4,#0xc]          ;769
000090  2000              MOVS     r0,#0                 ;771
000092  8220              STRH     r0,[r4,#0x10]         ;771
000094  892b              LDRH     r3,[r5,#8]            ;773
000096  9300              STR      r3,[sp,#0]            ;773
000098  2306              MOVS     r3,#6                 ;773
00009a  464a              MOV      r2,r9                 ;773
00009c  4641              MOV      r1,r8                 ;773
00009e  4628              MOV      r0,r5                 ;773
0000a0  f7fffffe          BL       inet_chksum_pseudo
0000a4  8220              STRH     r0,[r4,#0x10]         ;773
0000a6  2306              MOVS     r3,#6                 ;779
0000a8  2200              MOVS     r2,#0                 ;779
0000aa  e9cd2300          STRD     r2,r3,[sp,#0]         ;779
0000ae  23ff              MOVS     r3,#0xff              ;779
0000b0  464a              MOV      r2,r9                 ;779
0000b2  4641              MOV      r1,r8                 ;779
0000b4  4628              MOV      r0,r5                 ;779
0000b6  f7fffffe          BL       ip_output
0000ba  4628              MOV      r0,r5                 ;780
0000bc  f7fffffe          BL       pbuf_free
0000c0  bf00              NOP                            ;781
0000c2  bf00              NOP                            ;781
0000c4  4632              MOV      r2,r6                 ;781
0000c6  4639              MOV      r1,r7                 ;781
0000c8  a00f              ADR      r0,|L8.264|
0000ca  f7fffffe          BL       __2printf
0000ce  bf00              NOP                            ;781
0000d0  bf00              NOP                            ;781
0000d2  bf00              NOP      
0000d4  e7ab              B        |L8.46|
;;;783    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L8.216|
0000d8  7463705f          DCB      "tcp_rst: could not allocate memory for pbuf\n",0
0000dc  7273743a
0000e0  20636f75
0000e4  6c64206e
0000e8  6f742061
0000ec  6c6c6f63
0000f0  61746520
0000f4  6d656d6f
0000f8  72792066
0000fc  6f722070
000100  6275660a
000104  00      
000105  00                DCB      0
000106  00                DCB      0
000107  00                DCB      0
                  |L8.264|
000108  7463705f          DCB      "tcp_rst: seqno %8ld ackno %8ld.\n",0
00010c  7273743a
000110  20736571
000114  6e6f2025
000118  386c6420
00011c  61636b6e
000120  6f202538
000124  6c642e0a
000128  00      
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0

                          AREA ||i.tcp_send_ctrl||, CODE, READONLY, ALIGN=1

                  tcp_send_ctrl PROC
;;;90     err_t
;;;91     tcp_send_ctrl(struct tcp_pcb *pcb, u8_t flags)
000000  b57c              PUSH     {r2-r6,lr}
;;;92     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;93       /* no data, no length, flags, copy=1, no optdata */
;;;94       return tcp_enqueue(pcb, NULL, 0, flags, TCP_WRITE_FLAG_COPY, 0);
000006  2300              MOVS     r3,#0
000008  2201              MOVS     r2,#1
00000a  e9cd2300          STRD     r2,r3,[sp,#0]
00000e  4623              MOV      r3,r4
000010  2200              MOVS     r2,#0
000012  4611              MOV      r1,r2
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       tcp_enqueue
;;;95     }
00001a  bd7c              POP      {r2-r6,pc}
;;;96     
                          ENDP


                          AREA ||i.tcp_write||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_p
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_longlong_hex
                  tcp_write PROC
;;;115    err_t
;;;116    tcp_write(struct tcp_pcb *pcb, const void *data, u16_t len, u8_t apiflags)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;117    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;118      LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n", (void *)pcb,
00000c  bf00              NOP      
00000e  bf00              NOP      
000010  462b              MOV      r3,r5
000012  4632              MOV      r2,r6
000014  4621              MOV      r1,r4
000016  a015              ADR      r0,|L10.108|
000018  9700              STR      r7,[sp,#0]
00001a  f7fffffe          BL       __2printf
00001e  bf00              NOP      
000020  bf00              NOP      
;;;119        data, len, (u16_t)apiflags));
;;;120      /* connection is in valid state for data transmission? */
;;;121      if (pcb->state == ESTABLISHED ||
000022  7c20              LDRB     r0,[r4,#0x10]
000024  2804              CMP      r0,#4
000026  d008              BEQ      |L10.58|
;;;122         pcb->state == CLOSE_WAIT ||
000028  7c20              LDRB     r0,[r4,#0x10]
00002a  2807              CMP      r0,#7
00002c  d005              BEQ      |L10.58|
;;;123         pcb->state == SYN_SENT ||
00002e  7c20              LDRB     r0,[r4,#0x10]
000030  2802              CMP      r0,#2
000032  d002              BEQ      |L10.58|
;;;124         pcb->state == SYN_RCVD) {
000034  7c20              LDRB     r0,[r4,#0x10]
000036  2803              CMP      r0,#3
000038  d10d              BNE      |L10.86|
                  |L10.58|
;;;125        if (len > 0) {
00003a  2d00              CMP      r5,#0
00003c  dd09              BLE      |L10.82|
;;;126    #if LWIP_TCP_TIMESTAMPS
;;;127          return tcp_enqueue(pcb, (void *)data, len, 0, apiflags, 
;;;128                             pcb->flags & TF_TIMESTAMP ? TF_SEG_OPTS_TS : 0);
;;;129    #else
;;;130          return tcp_enqueue(pcb, (void *)data, len, 0, apiflags, 0);
00003e  2300              MOVS     r3,#0
000040  462a              MOV      r2,r5
000042  4631              MOV      r1,r6
000044  4620              MOV      r0,r4
000046  e9cd7300          STRD     r7,r3,[sp,#0]
00004a  f7fffffe          BL       tcp_enqueue
                  |L10.78|
;;;131    #endif
;;;132        }
;;;133        return ERR_OK;
;;;134      } else {
;;;135        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | 3, ("tcp_write() called in invalid state\n"));
;;;136        return ERR_CONN;
;;;137      }
;;;138    }
00004e  e8bd81fc          POP      {r2-r8,pc}
                  |L10.82|
000052  2000              MOVS     r0,#0                 ;133
000054  e7fb              B        |L10.78|
                  |L10.86|
000056  bf00              NOP                            ;135
000058  bf00              NOP                            ;135
00005a  a011              ADR      r0,|L10.160|
00005c  f7fffffe          BL       __2printf
000060  bf00              NOP                            ;135
000062  bf00              NOP                            ;135
000064  f06f0007          MVN      r0,#7                 ;136
000068  e7f1              B        |L10.78|
;;;139    
                          ENDP

00006a  0000              DCW      0x0000
                  |L10.108|
00006c  7463705f          DCB      "tcp_write(pcb=%p, data=%p, len=%4d, apiflags=%4d)\n",0
000070  77726974
000074  65287063
000078  623d2570
00007c  2c206461
000080  74613d25
000084  702c206c
000088  656e3d25
00008c  34642c20
000090  61706966
000094  6c616773
000098  3d253464
00009c  290a00  
00009f  00                DCB      0
                  |L10.160|
0000a0  7463705f          DCB      "tcp_write() called in invalid state\n",0
0000a4  77726974
0000a8  65282920
0000ac  63616c6c
0000b0  65642069
0000b4  6e20696e
0000b8  76616c69
0000bc  64207374
0000c0  6174650a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||i.tcp_zero_window_probe||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_sizespec
                  tcp_zero_window_probe PROC
;;;921    void
;;;922    tcp_zero_window_probe(struct tcp_pcb *pcb)
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;923    {
000004  4604              MOV      r4,r0
;;;924      struct pbuf *p;
;;;925      struct tcp_hdr *tcphdr;
;;;926      struct tcp_seg *seg;
;;;927    
;;;928      LWIP_DEBUGF(TCP_DEBUG, 
000006  bf00              NOP      
000008  bf00              NOP      
00000a  6860              LDR      r0,[r4,#4]
00000c  f7fffffe          BL       ntohl
000010  f00008ff          AND      r8,r0,#0xff
000014  6860              LDR      r0,[r4,#4]
000016  f7fffffe          BL       ntohl
00001a  f3c02907          UBFX     r9,r0,#8,#8
00001e  6860              LDR      r0,[r4,#4]
000020  f7fffffe          BL       ntohl
000024  f3c04a07          UBFX     r10,r0,#16,#8
000028  6860              LDR      r0,[r4,#4]
00002a  f7fffffe          BL       ntohl
00002e  ea4f6b10          LSR      r11,r0,#24
000032  464b              MOV      r3,r9
000034  4652              MOV      r2,r10
000036  4659              MOV      r1,r11
000038  482b              LDR      r0,|L11.232|
00003a  f8cd8000          STR      r8,[sp,#0]
00003e  f7fffffe          BL       __2printf
000042  bf00              NOP      
000044  bf00              NOP      
;;;929                  ("tcp_zero_window_probe: sending ZERO WINDOW probe to %"
;;;930                   U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
;;;931                   ip4_addr1(&pcb->remote_ip), ip4_addr2(&pcb->remote_ip),
;;;932                   ip4_addr3(&pcb->remote_ip), ip4_addr4(&pcb->remote_ip)));
;;;933    
;;;934      LWIP_DEBUGF(TCP_DEBUG, 
000046  bf00              NOP      
000048  bf00              NOP      
00004a  f894309d          LDRB     r3,[r4,#0x9d]
00004e  4827              LDR      r0,|L11.236|
000050  6b22              LDR      r2,[r4,#0x30]
000052  6801              LDR      r1,[r0,#0]  ; tcp_ticks
000054  4824              LDR      r0,|L11.232|
000056  3048              ADDS     r0,r0,#0x48
000058  f7fffffe          BL       __2printf
00005c  bf00              NOP      
00005e  bf00              NOP      
;;;935                  ("tcp_zero_window_probe: tcp_ticks %"U32_F
;;;936                   "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n", 
;;;937                   tcp_ticks, pcb->tmr, pcb->keep_cnt_sent));
;;;938    
;;;939      seg = pcb->unacked;
000060  6fa6              LDR      r6,[r4,#0x78]
;;;940    
;;;941      if(seg == NULL)
000062  b906              CBNZ     r6,|L11.102|
;;;942        seg = pcb->unsent;
000064  6f66              LDR      r6,[r4,#0x74]
                  |L11.102|
;;;943    
;;;944      if(seg == NULL)
000066  b90e              CBNZ     r6,|L11.108|
                  |L11.104|
;;;945        return;
;;;946    
;;;947      p = pbuf_alloc(PBUF_IP, TCP_HLEN + 1, PBUF_RAM);
;;;948       
;;;949      if(p == NULL) {
;;;950        LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
;;;951        return;
;;;952      }
;;;953      LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
;;;954                  (p->len >= sizeof(struct tcp_hdr)));
;;;955    
;;;956      tcphdr = tcp_output_set_header(pcb, p, 0, seg->tcphdr->seqno);
;;;957    
;;;958      /* Copy in one byte from the head of the unacked queue */
;;;959      *((char *)p->payload + sizeof(struct tcp_hdr)) = *(char *)seg->dataptr;
;;;960    
;;;961    #if CHECKSUM_GEN_TCP
;;;962      tcphdr->chksum = inet_chksum_pseudo(p, &pcb->local_ip, &pcb->remote_ip,
;;;963                                          IP_PROTO_TCP, p->tot_len);
;;;964    #endif
;;;965      TCP_STATS_INC(tcp.xmit);
;;;966    
;;;967      /* Send output to IP */
;;;968    #if LWIP_NETIF_HWADDRHINT
;;;969      ip_output_hinted(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP,
;;;970        &(pcb->addr_hint));
;;;971    #else /* LWIP_NETIF_HWADDRHINT*/
;;;972      ip_output(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP);
;;;973    #endif /* LWIP_NETIF_HWADDRHINT*/
;;;974    
;;;975      pbuf_free(p);
;;;976    
;;;977      LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
;;;978                              " ackno %"U32_F".\n",
;;;979                              pcb->snd_nxt - 1, pcb->rcv_nxt));
;;;980    }
000068  e8bd9ffc          POP      {r2-r12,pc}
                  |L11.108|
00006c  2200              MOVS     r2,#0                 ;947
00006e  2115              MOVS     r1,#0x15              ;947
000070  2001              MOVS     r0,#1                 ;947
000072  f7fffffe          BL       pbuf_alloc
000076  4605              MOV      r5,r0                 ;947
000078  b93d              CBNZ     r5,|L11.138|
00007a  bf00              NOP                            ;950
00007c  bf00              NOP                            ;950
00007e  a01c              ADR      r0,|L11.240|
000080  f7fffffe          BL       __2printf
000084  bf00              NOP                            ;950
000086  bf00              NOP                            ;950
000088  e7ee              B        |L11.104|
                  |L11.138|
00008a  6930              LDR      r0,[r6,#0x10]         ;956
00008c  6843              LDR      r3,[r0,#4]            ;956
00008e  2200              MOVS     r2,#0                 ;956
000090  4629              MOV      r1,r5                 ;956
000092  4620              MOV      r0,r4                 ;956
000094  f7fffffe          BL       tcp_output_set_header
000098  4607              MOV      r7,r0                 ;956
00009a  68b0              LDR      r0,[r6,#8]            ;959
00009c  7800              LDRB     r0,[r0,#0]            ;959
00009e  6869              LDR      r1,[r5,#4]            ;959
0000a0  7508              STRB     r0,[r1,#0x14]         ;959
0000a2  892b              LDRH     r3,[r5,#8]            ;962
0000a4  9300              STR      r3,[sp,#0]            ;962
0000a6  2306              MOVS     r3,#6                 ;962
0000a8  1d22              ADDS     r2,r4,#4              ;962
0000aa  4621              MOV      r1,r4                 ;962
0000ac  4628              MOV      r0,r5                 ;962
0000ae  f7fffffe          BL       inet_chksum_pseudo
0000b2  8238              STRH     r0,[r7,#0x10]         ;962
0000b4  2306              MOVS     r3,#6                 ;972
0000b6  2200              MOVS     r2,#0                 ;972
0000b8  e9cd2300          STRD     r2,r3,[sp,#0]         ;972
0000bc  7ae3              LDRB     r3,[r4,#0xb]          ;972
0000be  1d22              ADDS     r2,r4,#4              ;972
0000c0  4621              MOV      r1,r4                 ;972
0000c2  4628              MOV      r0,r5                 ;972
0000c4  f7fffffe          BL       ip_output
0000c8  4628              MOV      r0,r5                 ;975
0000ca  f7fffffe          BL       pbuf_free
0000ce  bf00              NOP                            ;977
0000d0  bf00              NOP                            ;977
0000d2  6da0              LDR      r0,[r4,#0x58]         ;977
0000d4  1e41              SUBS     r1,r0,#1              ;977
0000d6  a011              ADR      r0,|L11.284|
0000d8  6a62              LDR      r2,[r4,#0x24]         ;977
0000da  f7fffffe          BL       __2printf
0000de  bf00              NOP                            ;977
0000e0  bf00              NOP                            ;977
0000e2  bf00              NOP      
0000e4  e7c0              B        |L11.104|
;;;981    #endif /* LWIP_TCP */
                          ENDP

0000e6  0000              DCW      0x0000
                  |L11.232|
                          DCD      ||.constdata||+0x188
                  |L11.236|
                          DCD      tcp_ticks
                  |L11.240|
0000f0  7463705f          DCB      "tcp_zero_window_probe: no memory for pbuf\n",0
0000f4  7a65726f
0000f8  5f77696e
0000fc  646f775f
000100  70726f62
000104  653a206e
000108  6f206d65
00010c  6d6f7279
000110  20666f72
000114  20706275
000118  660a00  
00011b  00                DCB      0
                  |L11.284|
00011c  7463705f          DCB      "tcp_zero_window_probe: seqno %8ld ackno %8ld.\n",0
000120  7a65726f
000124  5f77696e
000128  646f775f
00012c  70726f62
000130  653a2073
000134  65716e6f
000138  2025386c
00013c  64206163
000140  6b6e6f20
000144  25386c64
000148  2e0a00  
00014b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  7463705f          DCB      0x74,0x63,0x70,0x5f
000004  656e7175          DCB      0x65,0x6e,0x71,0x75
000008  6575653a          DCB      0x65,0x75,0x65,0x3a
00000c  20706163          DCB      0x20,0x70,0x61,0x63
000010  6b657420          DCB      0x6b,0x65,0x74,0x20
000014  6e656564          DCB      0x6e,0x65,0x65,0x64
000018  73207061          DCB      0x73,0x20,0x70,0x61
00001c  796c6f61          DCB      0x79,0x6c,0x6f,0x61
000020  642c206f          DCB      0x64,0x2c,0x20,0x6f
000024  7074696f          DCB      0x70,0x74,0x69,0x6f
000028  6e732c20          DCB      0x6e,0x73,0x2c,0x20
00002c  6f722053          DCB      0x6f,0x72,0x20,0x53
000030  594e2f46          DCB      0x59,0x4e,0x2f,0x46
000034  494e2028          DCB      0x49,0x4e,0x20,0x28
000038  70726f67          DCB      0x70,0x72,0x6f,0x67
00003c  72616d6d          DCB      0x72,0x61,0x6d,0x6d
000040  65722076          DCB      0x65,0x72,0x20,0x76
000044  696f6c61          DCB      0x69,0x6f,0x6c,0x61
000048  74657320          DCB      0x74,0x65,0x73,0x20
00004c  41504929          DCB      0x41,0x50,0x49,0x29
000050  00000000          DCB      0x00,0x00,0x00,0x00
000054  7463705f          DCB      0x74,0x63,0x70,0x5f
000058  6f757470          DCB      0x6f,0x75,0x74,0x70
00005c  75743a20          DCB      0x75,0x74,0x3a,0x20
000060  736e645f          DCB      0x73,0x6e,0x64,0x5f
000064  776e6420          DCB      0x77,0x6e,0x64,0x20
000068  2534642c          DCB      0x25,0x34,0x64,0x2c
00006c  2063776e          DCB      0x20,0x63,0x77,0x6e
000070  64202534          DCB      0x64,0x20,0x25,0x34
000074  642c2077          DCB      0x64,0x2c,0x20,0x77
000078  6e642025          DCB      0x6e,0x64,0x20,0x25
00007c  386c642c          DCB      0x38,0x6c,0x64,0x2c
000080  20736567          DCB      0x20,0x73,0x65,0x67
000084  203d3d20          DCB      0x20,0x3d,0x3d,0x20
000088  4e554c4c          DCB      0x4e,0x55,0x4c,0x4c
00008c  2c206163          DCB      0x2c,0x20,0x61,0x63
000090  6b202538          DCB      0x6b,0x20,0x25,0x38
000094  6c640a00          DCB      0x6c,0x64,0x0a,0x00
000098  7463705f          DCB      0x74,0x63,0x70,0x5f
00009c  6f757470          DCB      0x6f,0x75,0x74,0x70
0000a0  75743a20          DCB      0x75,0x74,0x3a,0x20
0000a4  736e645f          DCB      0x73,0x6e,0x64,0x5f
0000a8  776e6420          DCB      0x77,0x6e,0x64,0x20
0000ac  2534642c          DCB      0x25,0x34,0x64,0x2c
0000b0  2063776e          DCB      0x20,0x63,0x77,0x6e
0000b4  64202534          DCB      0x64,0x20,0x25,0x34
0000b8  642c2077          DCB      0x64,0x2c,0x20,0x77
0000bc  6e642025          DCB      0x6e,0x64,0x20,0x25
0000c0  386c642c          DCB      0x38,0x6c,0x64,0x2c
0000c4  20656666          DCB      0x20,0x65,0x66,0x66
0000c8  776e6420          DCB      0x77,0x6e,0x64,0x20
0000cc  25386c64          DCB      0x25,0x38,0x6c,0x64
0000d0  2c207365          DCB      0x2c,0x20,0x73,0x65
0000d4  71202538          DCB      0x71,0x20,0x25,0x38
0000d8  6c642c20          DCB      0x6c,0x64,0x2c,0x20
0000dc  61636b20          DCB      0x61,0x63,0x6b,0x20
0000e0  25386c64          DCB      0x25,0x38,0x6c,0x64
0000e4  0a000000          DCB      0x0a,0x00,0x00,0x00
0000e8  7463705f          DCB      0x74,0x63,0x70,0x5f
0000ec  6f757470          DCB      0x6f,0x75,0x74,0x70
0000f0  75743a20          DCB      0x75,0x74,0x3a,0x20
0000f4  736e645f          DCB      0x73,0x6e,0x64,0x5f
0000f8  776e6420          DCB      0x77,0x6e,0x64,0x20
0000fc  2534642c          DCB      0x25,0x34,0x64,0x2c
000100  2063776e          DCB      0x20,0x63,0x77,0x6e
000104  64202534          DCB      0x64,0x20,0x25,0x34
000108  642c2077          DCB      0x64,0x2c,0x20,0x77
00010c  6e642025          DCB      0x6e,0x64,0x20,0x25
000110  386c642c          DCB      0x38,0x6c,0x64,0x2c
000114  20656666          DCB      0x20,0x65,0x66,0x66
000118  776e6420          DCB      0x77,0x6e,0x64,0x20
00011c  25386c64          DCB      0x25,0x38,0x6c,0x64
000120  2c207365          DCB      0x2c,0x20,0x73,0x65
000124  71202538          DCB      0x71,0x20,0x25,0x38
000128  6c642c20          DCB      0x6c,0x64,0x2c,0x20
00012c  61636b20          DCB      0x61,0x63,0x6b,0x20
000130  25386c64          DCB      0x25,0x38,0x6c,0x64
000134  2c206920          DCB      0x2c,0x20,0x69,0x20
000138  2534640a          DCB      0x25,0x34,0x64,0x0a
00013c  00000000          DCB      0x00,0x00,0x00,0x00
000140  7463705f          DCB      0x74,0x63,0x70,0x5f
000144  6b656570          DCB      0x6b,0x65,0x65,0x70
000148  616c6976          DCB      0x61,0x6c,0x69,0x76
00014c  653a2074          DCB      0x65,0x3a,0x20,0x74
000150  63705f74          DCB      0x63,0x70,0x5f,0x74
000154  69636b73          DCB      0x69,0x63,0x6b,0x73
000158  2025386c          DCB      0x20,0x25,0x38,0x6c
00015c  64202020          DCB      0x64,0x20,0x20,0x20
000160  7063622d          DCB      0x70,0x63,0x62,0x2d
000164  3e746d72          DCB      0x3e,0x74,0x6d,0x72
000168  2025386c          DCB      0x20,0x25,0x38,0x6c
00016c  64207063          DCB      0x64,0x20,0x70,0x63
000170  622d3e6b          DCB      0x62,0x2d,0x3e,0x6b
000174  6565705f          DCB      0x65,0x65,0x70,0x5f
000178  636e745f          DCB      0x63,0x6e,0x74,0x5f
00017c  73656e74          DCB      0x73,0x65,0x6e,0x74
000180  20253464          DCB      0x20,0x25,0x34,0x64
000184  0a000000          DCB      0x0a,0x00,0x00,0x00
000188  7463705f          DCB      0x74,0x63,0x70,0x5f
00018c  7a65726f          DCB      0x7a,0x65,0x72,0x6f
000190  5f77696e          DCB      0x5f,0x77,0x69,0x6e
000194  646f775f          DCB      0x64,0x6f,0x77,0x5f
000198  70726f62          DCB      0x70,0x72,0x6f,0x62
00019c  653a2073          DCB      0x65,0x3a,0x20,0x73
0001a0  656e6469          DCB      0x65,0x6e,0x64,0x69
0001a4  6e67205a          DCB      0x6e,0x67,0x20,0x5a
0001a8  45524f20          DCB      0x45,0x52,0x4f,0x20
0001ac  57494e44          DCB      0x57,0x49,0x4e,0x44
0001b0  4f572070          DCB      0x4f,0x57,0x20,0x70
0001b4  726f6265          DCB      0x72,0x6f,0x62,0x65
0001b8  20746f20          DCB      0x20,0x74,0x6f,0x20
0001bc  2534642e          DCB      0x25,0x34,0x64,0x2e
0001c0  2534642e          DCB      0x25,0x34,0x64,0x2e
0001c4  2534642e          DCB      0x25,0x34,0x64,0x2e
0001c8  2534640a          DCB      0x25,0x34,0x64,0x0a
0001cc  00000000          DCB      0x00,0x00,0x00,0x00
0001d0  7463705f          DCB      0x74,0x63,0x70,0x5f
0001d4  7a65726f          DCB      0x7a,0x65,0x72,0x6f
0001d8  5f77696e          DCB      0x5f,0x77,0x69,0x6e
0001dc  646f775f          DCB      0x64,0x6f,0x77,0x5f
0001e0  70726f62          DCB      0x70,0x72,0x6f,0x62
0001e4  653a2074          DCB      0x65,0x3a,0x20,0x74
0001e8  63705f74          DCB      0x63,0x70,0x5f,0x74
0001ec  69636b73          DCB      0x69,0x63,0x6b,0x73
0001f0  2025386c          DCB      0x20,0x25,0x38,0x6c
0001f4  64202020          DCB      0x64,0x20,0x20,0x20
0001f8  7063622d          DCB      0x70,0x63,0x62,0x2d
0001fc  3e746d72          DCB      0x3e,0x74,0x6d,0x72
000200  2025386c          DCB      0x20,0x25,0x38,0x6c
000204  64207063          DCB      0x64,0x20,0x70,0x63
000208  622d3e6b          DCB      0x62,0x2d,0x3e,0x6b
00020c  6565705f          DCB      0x65,0x65,0x70,0x5f
000210  636e745f          DCB      0x63,0x6e,0x74,0x5f
000214  73656e74          DCB      0x73,0x65,0x6e,0x74
000218  20253464          DCB      0x20,0x25,0x34,0x64
00021c  0a00              DCB      0x0a,0x00
