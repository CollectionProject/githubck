; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_leap.o --depend=.\obj\eap_leap.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_leap.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_leap.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_leap_deinit||, CODE, READONLY, ALIGN=1

                  eap_leap_deinit PROC
;;;57     
;;;58     static void eap_leap_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;59     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;60     	os_free(priv);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_free
;;;61     }
00000c  bd70              POP      {r4-r6,pc}
;;;62     
                          ENDP


                          AREA ||i.eap_leap_getKey||, CODE, READONLY, ALIGN=2

                  eap_leap_getKey PROC
;;;334    
;;;335    static u8 * eap_leap_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;336    {
000004  b095              SUB      sp,sp,#0x54
000006  4681              MOV      r9,r0
000008  460e              MOV      r6,r1
00000a  4690              MOV      r8,r2
;;;337    	struct eap_leap_data *data = priv;
00000c  4634              MOV      r4,r6
;;;338    	u8 *key, pw_hash_hash[16], pw_hash[16];
;;;339    	const u8 *addr[5], *password;
;;;340    	size_t elen[5], password_len;
;;;341    	int pwhash;
;;;342    
;;;343    	if (data->state != LEAP_DONE)
00000e  7820              LDRB     r0,[r4,#0]
000010  2803              CMP      r0,#3
000012  d003              BEQ      |L3.28|
;;;344    		return NULL;
000014  2000              MOVS     r0,#0
                  |L3.22|
;;;345    
;;;346    	password = eap_get_config_password2(sm, &password_len, &pwhash);
;;;347    	if (password == NULL)
;;;348    		return NULL;
;;;349    
;;;350    	key = os_malloc(LEAP_KEY_LEN);
;;;351    	if (key == NULL)
;;;352    		return NULL;
;;;353    
;;;354    	if (pwhash) {
;;;355    		if (hash_nt_password_hash(password, pw_hash_hash)) {
;;;356    			os_free(key);
;;;357    			return NULL;
;;;358    		}
;;;359    	} else {
;;;360    		if (nt_password_hash(password, password_len, pw_hash) ||
;;;361    		    hash_nt_password_hash(pw_hash, pw_hash_hash)) {
;;;362    			os_free(key);
;;;363    			return NULL;
;;;364    		}
;;;365    	}
;;;366    	wpa_hexdump_key(MSG_DEBUG, "EAP-LEAP: pw_hash_hash",
;;;367    			pw_hash_hash, 16);
;;;368    	wpa_hexdump(MSG_DEBUG, "EAP-LEAP: peer_challenge",
;;;369    		    data->peer_challenge, LEAP_CHALLENGE_LEN);
;;;370    	wpa_hexdump(MSG_DEBUG, "EAP-LEAP: peer_response",
;;;371    		    data->peer_response, LEAP_RESPONSE_LEN);
;;;372    	wpa_hexdump(MSG_DEBUG, "EAP-LEAP: ap_challenge",
;;;373    		    data->ap_challenge, LEAP_CHALLENGE_LEN);
;;;374    	wpa_hexdump(MSG_DEBUG, "EAP-LEAP: ap_response",
;;;375    		    data->ap_response, LEAP_RESPONSE_LEN);
;;;376    
;;;377    	addr[0] = pw_hash_hash;
;;;378    	elen[0] = 16;
;;;379    	addr[1] = data->ap_challenge;
;;;380    	elen[1] = LEAP_CHALLENGE_LEN;
;;;381    	addr[2] = data->ap_response;
;;;382    	elen[2] = LEAP_RESPONSE_LEN;
;;;383    	addr[3] = data->peer_challenge;
;;;384    	elen[3] = LEAP_CHALLENGE_LEN;
;;;385    	addr[4] = data->peer_response;
;;;386    	elen[4] = LEAP_RESPONSE_LEN;
;;;387    	md5_vector(5, addr, elen, key);
;;;388    	wpa_hexdump_key(MSG_DEBUG, "EAP-LEAP: master key", key, LEAP_KEY_LEN);
;;;389    	*len = LEAP_KEY_LEN;
;;;390    
;;;391    	return key;
;;;392    }
000016  b015              ADD      sp,sp,#0x54
000018  e8bd83f0          POP      {r4-r9,pc}
                  |L3.28|
00001c  aa01              ADD      r2,sp,#4              ;346
00001e  a902              ADD      r1,sp,#8              ;346
000020  4648              MOV      r0,r9                 ;346
000022  f7fffffe          BL       eap_get_config_password2
000026  4607              MOV      r7,r0                 ;346
000028  b90f              CBNZ     r7,|L3.46|
00002a  2000              MOVS     r0,#0                 ;348
00002c  e7f3              B        |L3.22|
                  |L3.46|
00002e  2010              MOVS     r0,#0x10              ;350
000030  f7fffffe          BL       os_malloc
000034  4605              MOV      r5,r0                 ;350
000036  b90d              CBNZ     r5,|L3.60|
000038  2000              MOVS     r0,#0                 ;352
00003a  e7ec              B        |L3.22|
                  |L3.60|
00003c  9801              LDR      r0,[sp,#4]            ;354
00003e  b148              CBZ      r0,|L3.84|
000040  a911              ADD      r1,sp,#0x44           ;355
000042  4638              MOV      r0,r7                 ;355
000044  f7fffffe          BL       hash_nt_password_hash
000048  b1a0              CBZ      r0,|L3.116|
00004a  4628              MOV      r0,r5                 ;356
00004c  f7fffffe          BL       os_free
000050  2000              MOVS     r0,#0                 ;357
000052  e7e0              B        |L3.22|
                  |L3.84|
000054  aa0d              ADD      r2,sp,#0x34           ;360
000056  4638              MOV      r0,r7                 ;360
000058  9902              LDR      r1,[sp,#8]            ;360
00005a  f7fffffe          BL       nt_password_hash
00005e  b920              CBNZ     r0,|L3.106|
000060  a911              ADD      r1,sp,#0x44           ;361
000062  a80d              ADD      r0,sp,#0x34           ;361
000064  f7fffffe          BL       hash_nt_password_hash
000068  b120              CBZ      r0,|L3.116|
                  |L3.106|
00006a  4628              MOV      r0,r5                 ;362
00006c  f7fffffe          BL       os_free
000070  2000              MOVS     r0,#0                 ;363
000072  e7d0              B        |L3.22|
                  |L3.116|
000074  2310              MOVS     r3,#0x10              ;366
000076  aa11              ADD      r2,sp,#0x44           ;366
000078  a123              ADR      r1,|L3.264|
00007a  2000              MOVS     r0,#0                 ;366
00007c  f7fffffe          BL       wpa_hexdump_key
000080  2308              MOVS     r3,#8                 ;368
000082  1c62              ADDS     r2,r4,#1              ;368
000084  a126              ADR      r1,|L3.288|
000086  2000              MOVS     r0,#0                 ;368
000088  f7fffffe          BL       wpa_hexdump
00008c  2318              MOVS     r3,#0x18              ;370
00008e  f1040209          ADD      r2,r4,#9              ;370
000092  a12a              ADR      r1,|L3.316|
000094  2000              MOVS     r0,#0                 ;370
000096  f7fffffe          BL       wpa_hexdump
00009a  2308              MOVS     r3,#8                 ;372
00009c  f1040221          ADD      r2,r4,#0x21           ;372
0000a0  a12c              ADR      r1,|L3.340|
0000a2  2000              MOVS     r0,#0                 ;372
0000a4  f7fffffe          BL       wpa_hexdump
0000a8  2318              MOVS     r3,#0x18              ;374
0000aa  f1040229          ADD      r2,r4,#0x29           ;374
0000ae  a12f              ADR      r1,|L3.364|
0000b0  2000              MOVS     r0,#0                 ;374
0000b2  f7fffffe          BL       wpa_hexdump
0000b6  a811              ADD      r0,sp,#0x44           ;377
0000b8  9008              STR      r0,[sp,#0x20]         ;377
0000ba  2010              MOVS     r0,#0x10              ;378
0000bc  9003              STR      r0,[sp,#0xc]          ;378
0000be  f1040021          ADD      r0,r4,#0x21           ;379
0000c2  9009              STR      r0,[sp,#0x24]         ;379
0000c4  2008              MOVS     r0,#8                 ;380
0000c6  9004              STR      r0,[sp,#0x10]         ;380
0000c8  f1040029          ADD      r0,r4,#0x29           ;381
0000cc  900a              STR      r0,[sp,#0x28]         ;381
0000ce  2018              MOVS     r0,#0x18              ;382
0000d0  9005              STR      r0,[sp,#0x14]         ;382
0000d2  1c60              ADDS     r0,r4,#1              ;383
0000d4  900b              STR      r0,[sp,#0x2c]         ;383
0000d6  2008              MOVS     r0,#8                 ;384
0000d8  9006              STR      r0,[sp,#0x18]         ;384
0000da  f1040009          ADD      r0,r4,#9              ;385
0000de  900c              STR      r0,[sp,#0x30]         ;385
0000e0  2018              MOVS     r0,#0x18              ;386
0000e2  9007              STR      r0,[sp,#0x1c]         ;386
0000e4  462b              MOV      r3,r5                 ;387
0000e6  aa03              ADD      r2,sp,#0xc            ;387
0000e8  a908              ADD      r1,sp,#0x20           ;387
0000ea  2005              MOVS     r0,#5                 ;387
0000ec  f7fffffe          BL       md5_vector
0000f0  2310              MOVS     r3,#0x10              ;388
0000f2  462a              MOV      r2,r5                 ;388
0000f4  a123              ADR      r1,|L3.388|
0000f6  2000              MOVS     r0,#0                 ;388
0000f8  f7fffffe          BL       wpa_hexdump_key
0000fc  2010              MOVS     r0,#0x10              ;389
0000fe  f8c80000          STR      r0,[r8,#0]            ;389
000102  4628              MOV      r0,r5                 ;391
000104  e787              B        |L3.22|
;;;393    
                          ENDP

000106  0000              DCW      0x0000
                  |L3.264|
000108  4541502d          DCB      "EAP-LEAP: pw_hash_hash",0
00010c  4c454150
000110  3a207077
000114  5f686173
000118  685f6861
00011c  736800  
00011f  00                DCB      0
                  |L3.288|
000120  4541502d          DCB      "EAP-LEAP: peer_challenge",0
000124  4c454150
000128  3a207065
00012c  65725f63
000130  68616c6c
000134  656e6765
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
                  |L3.316|
00013c  4541502d          DCB      "EAP-LEAP: peer_response",0
000140  4c454150
000144  3a207065
000148  65725f72
00014c  6573706f
000150  6e736500
                  |L3.340|
000154  4541502d          DCB      "EAP-LEAP: ap_challenge",0
000158  4c454150
00015c  3a206170
000160  5f636861
000164  6c6c656e
000168  676500  
00016b  00                DCB      0
                  |L3.364|
00016c  4541502d          DCB      "EAP-LEAP: ap_response",0
000170  4c454150
000174  3a206170
000178  5f726573
00017c  706f6e73
000180  6500    
000182  00                DCB      0
000183  00                DCB      0
                  |L3.388|
000184  4541502d          DCB      "EAP-LEAP: master key",0
000188  4c454150
00018c  3a206d61
000190  73746572
000194  206b6579
000198  00      
000199  00                DCB      0
00019a  00                DCB      0
00019b  00                DCB      0

                          AREA ||i.eap_leap_init||, CODE, READONLY, ALIGN=1

                  eap_leap_init PROC
;;;43     
;;;44     static void * eap_leap_init(struct eap_sm *sm)
000000  b570              PUSH     {r4-r6,lr}
;;;45     {
000002  4605              MOV      r5,r0
;;;46     	struct eap_leap_data *data;
;;;47     
;;;48     	data = os_zalloc(sizeof(*data));
000004  2041              MOVS     r0,#0x41
000006  f7fffffe          BL       os_zalloc
00000a  4604              MOV      r4,r0
;;;49     	if (data == NULL)
00000c  b90c              CBNZ     r4,|L4.18|
;;;50     		return NULL;
00000e  2000              MOVS     r0,#0
                  |L4.16|
;;;51     	data->state = LEAP_WAIT_CHALLENGE;
;;;52     
;;;53     	sm->leap_done = FALSE;
;;;54     	return data;
;;;55     }
000010  bd70              POP      {r4-r6,pc}
                  |L4.18|
000012  2000              MOVS     r0,#0                 ;51
000014  7020              STRB     r0,[r4,#0]            ;51
000016  66a8              STR      r0,[r5,#0x68]         ;53
000018  4620              MOV      r0,r4                 ;54
00001a  e7f9              B        |L4.16|
;;;56     
                          ENDP


                          AREA ||i.eap_leap_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_leap_isKeyAvailable PROC
;;;327    
;;;328    static Boolean eap_leap_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;329    {
;;;330    	struct eap_leap_data *data = priv;
000002  460a              MOV      r2,r1
;;;331    	return data->state == LEAP_DONE;
000004  7810              LDRB     r0,[r2,#0]
000006  2803              CMP      r0,#3
000008  d101              BNE      |L5.14|
00000a  2001              MOVS     r0,#1
                  |L5.12|
;;;332    }
00000c  4770              BX       lr
                  |L5.14|
00000e  2000              MOVS     r0,#0                 ;331
000010  e7fc              B        |L5.12|
;;;333    
                          ENDP


                          AREA ||i.eap_leap_process||, CODE, READONLY, ALIGN=2

                  eap_leap_process PROC
;;;274    
;;;275    static struct wpabuf * eap_leap_process(struct eap_sm *sm, void *priv,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;276    					struct eap_method_ret *ret,
;;;277    					const struct wpabuf *reqData)
;;;278    {
000004  4606              MOV      r6,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;279    	const struct eap_hdr *eap;
;;;280    	size_t password_len;
;;;281    	const u8 *password;
;;;282    
;;;283    	password = eap_get_config_password(sm, &password_len);
00000c  4669              MOV      r1,sp
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       eap_get_config_password
000014  4681              MOV      r9,r0
;;;284    	if (password == NULL) {
000016  f1b90f00          CMP      r9,#0
00001a  d10b              BNE      |L6.52|
;;;285    		wpa_printf(MSG_INFO, "EAP-LEAP: Password not configured");
00001c  a12c              ADR      r1,|L6.208|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       wpa_printf
;;;286    		eap_sm_request_password(sm);
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       eap_sm_request_password
;;;287    		ret->ignore = TRUE;
00002a  2001              MOVS     r0,#1
00002c  6020              STR      r0,[r4,#0]
;;;288    		return NULL;
00002e  2000              MOVS     r0,#0
                  |L6.48|
;;;289    	}
;;;290    
;;;291    	/*
;;;292    	 * LEAP needs to be able to handle EAP-Success frame which does not
;;;293    	 * include Type field. Consequently, eap_hdr_validate() cannot be used
;;;294    	 * here. This validation will be done separately for EAP-Request and
;;;295    	 * EAP-Response frames.
;;;296    	 */
;;;297    	eap = wpabuf_head(reqData);
;;;298    	if (wpabuf_len(reqData) < sizeof(*eap) ||
;;;299    	    be_to_host16(eap->length) > wpabuf_len(reqData)) {
;;;300    		wpa_printf(MSG_INFO, "EAP-LEAP: Invalid frame");
;;;301    		ret->ignore = TRUE;
;;;302    		return NULL;
;;;303    	}
;;;304    
;;;305    	ret->ignore = FALSE;
;;;306    	ret->allowNotifications = TRUE;
;;;307    	ret->methodState = METHOD_MAY_CONT;
;;;308    	ret->decision = DECISION_FAIL;
;;;309    
;;;310    	sm->leap_done = FALSE;
;;;311    
;;;312    	switch (eap->code) {
;;;313    	case EAP_CODE_REQUEST:
;;;314    		return eap_leap_process_request(sm, priv, ret, reqData);
;;;315    	case EAP_CODE_SUCCESS:
;;;316    		return eap_leap_process_success(sm, priv, ret, reqData);
;;;317    	case EAP_CODE_RESPONSE:
;;;318    		return eap_leap_process_response(sm, priv, ret, reqData);
;;;319    	default:
;;;320    		wpa_printf(MSG_INFO, "EAP-LEAP: Unexpected EAP code (%d) - "
;;;321    			   "ignored", eap->code);
;;;322    		ret->ignore = TRUE;
;;;323    		return NULL;
;;;324    	}
;;;325    }
000030  e8bd83f8          POP      {r3-r9,pc}
                  |L6.52|
000034  4638              MOV      r0,r7                 ;297
000036  f7fffffe          BL       wpabuf_head
00003a  4605              MOV      r5,r0                 ;297
00003c  4638              MOV      r0,r7                 ;298
00003e  f7fffffe          BL       wpabuf_len
000042  2804              CMP      r0,#4                 ;298
000044  d30c              BCC      |L6.96|
000046  4638              MOV      r0,r7                 ;299
000048  f7fffffe          BL       wpabuf_len
00004c  8869              LDRH     r1,[r5,#2]            ;299
00004e  f44f427f          MOV      r2,#0xff00            ;299
000052  ea022101          AND      r1,r2,r1,LSL #8       ;299
000056  886a              LDRH     r2,[r5,#2]            ;299
000058  ea412112          ORR      r1,r1,r2,LSR #8       ;299
00005c  4288              CMP      r0,r1                 ;299
00005e  d207              BCS      |L6.112|
                  |L6.96|
000060  a124              ADR      r1,|L6.244|
000062  2000              MOVS     r0,#0                 ;300
000064  f7fffffe          BL       wpa_printf
000068  2001              MOVS     r0,#1                 ;301
00006a  6020              STR      r0,[r4,#0]            ;301
00006c  2000              MOVS     r0,#0                 ;302
00006e  e7df              B        |L6.48|
                  |L6.112|
000070  2000              MOVS     r0,#0                 ;305
000072  6020              STR      r0,[r4,#0]            ;305
000074  2001              MOVS     r0,#1                 ;306
000076  60a0              STR      r0,[r4,#8]            ;306
000078  2003              MOVS     r0,#3                 ;307
00007a  7120              STRB     r0,[r4,#4]            ;307
00007c  2000              MOVS     r0,#0                 ;308
00007e  7160              STRB     r0,[r4,#5]            ;308
000080  66b0              STR      r0,[r6,#0x68]         ;310
000082  7828              LDRB     r0,[r5,#0]            ;312
000084  2801              CMP      r0,#1                 ;312
000086  d004              BEQ      |L6.146|
000088  2802              CMP      r0,#2                 ;312
00008a  d010              BEQ      |L6.174|
00008c  2803              CMP      r0,#3                 ;312
00008e  d115              BNE      |L6.188|
000090  e006              B        |L6.160|
                  |L6.146|
000092  463b              MOV      r3,r7                 ;314
000094  4622              MOV      r2,r4                 ;314
000096  4641              MOV      r1,r8                 ;314
000098  4630              MOV      r0,r6                 ;314
00009a  f7fffffe          BL       eap_leap_process_request
00009e  e7c7              B        |L6.48|
                  |L6.160|
0000a0  463b              MOV      r3,r7                 ;316
0000a2  4622              MOV      r2,r4                 ;316
0000a4  4641              MOV      r1,r8                 ;316
0000a6  4630              MOV      r0,r6                 ;316
0000a8  f7fffffe          BL       eap_leap_process_success
0000ac  e7c0              B        |L6.48|
                  |L6.174|
0000ae  463b              MOV      r3,r7                 ;318
0000b0  4622              MOV      r2,r4                 ;318
0000b2  4641              MOV      r1,r8                 ;318
0000b4  4630              MOV      r0,r6                 ;318
0000b6  f7fffffe          BL       eap_leap_process_response
0000ba  e7b9              B        |L6.48|
                  |L6.188|
0000bc  782a              LDRB     r2,[r5,#0]            ;320
0000be  a113              ADR      r1,|L6.268|
0000c0  2000              MOVS     r0,#0                 ;320
0000c2  f7fffffe          BL       wpa_printf
0000c6  2001              MOVS     r0,#1                 ;322
0000c8  6020              STR      r0,[r4,#0]            ;322
0000ca  2000              MOVS     r0,#0                 ;323
0000cc  e7b0              B        |L6.48|
;;;326    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L6.208|
0000d0  4541502d          DCB      "EAP-LEAP: Password not configured",0
0000d4  4c454150
0000d8  3a205061
0000dc  7373776f
0000e0  7264206e
0000e4  6f742063
0000e8  6f6e6669
0000ec  67757265
0000f0  6400    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L6.244|
0000f4  4541502d          DCB      "EAP-LEAP: Invalid frame",0
0000f8  4c454150
0000fc  3a20496e
000100  76616c69
000104  64206672
000108  616d6500
                  |L6.268|
00010c  4541502d          DCB      "EAP-LEAP: Unexpected EAP code (%d) - ignored",0
000110  4c454150
000114  3a20556e
000118  65787065
00011c  63746564
000120  20454150
000124  20636f64
000128  65202825
00012c  6429202d
000130  2069676e
000134  6f726564
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0

                          AREA ||i.eap_leap_process_request||, CODE, READONLY, ALIGN=2

                  eap_leap_process_request PROC
;;;63     
;;;64     static struct wpabuf * eap_leap_process_request(struct eap_sm *sm, void *priv,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;65     						struct eap_method_ret *ret,
;;;66     						const struct wpabuf *reqData)
;;;67     {
000004  b089              SUB      sp,sp,#0x24
000006  468b              MOV      r11,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
;;;68     	struct eap_leap_data *data = priv;
00000c  46d9              MOV      r9,r11
;;;69     	struct wpabuf *resp;
;;;70     	const u8 *pos, *challenge, *identity, *password;
;;;71     	u8 challenge_len, *rpos;
;;;72     	size_t identity_len, password_len, len;
;;;73     	int pwhash;
;;;74     
;;;75     	wpa_printf(MSG_DEBUG, "EAP-LEAP: Processing EAP-Request");
00000e  a153              ADR      r1,|L7.348|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       wpa_printf
;;;76     
;;;77     	identity = eap_get_config_identity(sm, &identity_len);
000016  a905              ADD      r1,sp,#0x14
000018  9809              LDR      r0,[sp,#0x24]
00001a  f7fffffe          BL       eap_get_config_identity
00001e  9008              STR      r0,[sp,#0x20]
;;;78     	password = eap_get_config_password2(sm, &password_len, &pwhash);
000020  aa02              ADD      r2,sp,#8
000022  a904              ADD      r1,sp,#0x10
000024  9809              LDR      r0,[sp,#0x24]
000026  f7fffffe          BL       eap_get_config_password2
00002a  9007              STR      r0,[sp,#0x1c]
;;;79     	if (identity == NULL || password == NULL)
00002c  9808              LDR      r0,[sp,#0x20]
00002e  b108              CBZ      r0,|L7.52|
000030  9807              LDR      r0,[sp,#0x1c]
000032  b918              CBNZ     r0,|L7.60|
                  |L7.52|
;;;80     		return NULL;
000034  2000              MOVS     r0,#0
                  |L7.54|
;;;81     
;;;82     	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_LEAP, reqData, &len);
;;;83     	if (pos == NULL || len < 3) {
;;;84     		wpa_printf(MSG_INFO, "EAP-LEAP: Invalid EAP-Request frame");
;;;85     		ret->ignore = TRUE;
;;;86     		return NULL;
;;;87     	}
;;;88     
;;;89     	if (*pos != LEAP_VERSION) {
;;;90     		wpa_printf(MSG_WARNING, "EAP-LEAP: Unsupported LEAP version "
;;;91     			   "%d", *pos);
;;;92     		ret->ignore = TRUE;
;;;93     		return NULL;
;;;94     	}
;;;95     	pos++;
;;;96     
;;;97     	pos++; /* skip unused byte */
;;;98     
;;;99     	challenge_len = *pos++;
;;;100    	if (challenge_len != LEAP_CHALLENGE_LEN || challenge_len > len - 3) {
;;;101    		wpa_printf(MSG_INFO, "EAP-LEAP: Invalid challenge "
;;;102    			   "(challenge_len=%d reqDataLen=%lu)",
;;;103    			   challenge_len, (unsigned long) wpabuf_len(reqData));
;;;104    		ret->ignore = TRUE;
;;;105    		return NULL;
;;;106    	}
;;;107    	challenge = pos;
;;;108    	os_memcpy(data->peer_challenge, challenge, LEAP_CHALLENGE_LEN);
;;;109    	wpa_hexdump(MSG_MSGDUMP, "EAP-LEAP: Challenge from AP",
;;;110    		    challenge, LEAP_CHALLENGE_LEN);
;;;111    
;;;112    	wpa_printf(MSG_DEBUG, "EAP-LEAP: Generating Challenge Response");
;;;113    
;;;114    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_LEAP,
;;;115    			     3 + LEAP_RESPONSE_LEN + identity_len,
;;;116    			     EAP_CODE_RESPONSE, eap_get_id(reqData));
;;;117    	if (resp == NULL)
;;;118    		return NULL;
;;;119    	wpabuf_put_u8(resp, LEAP_VERSION);
;;;120    	wpabuf_put_u8(resp, 0); /* unused */
;;;121    	wpabuf_put_u8(resp, LEAP_RESPONSE_LEN);
;;;122    	rpos = wpabuf_put(resp, LEAP_RESPONSE_LEN);
;;;123    	if (pwhash)
;;;124    		challenge_response(challenge, password, rpos);
;;;125    	else
;;;126    		nt_challenge_response(challenge, password, password_len, rpos);
;;;127    	os_memcpy(data->peer_response, rpos, LEAP_RESPONSE_LEN);
;;;128    	wpa_hexdump(MSG_MSGDUMP, "EAP-LEAP: Response",
;;;129    		    rpos, LEAP_RESPONSE_LEN);
;;;130    	wpabuf_put_data(resp, identity, identity_len);
;;;131    
;;;132    	data->state = LEAP_WAIT_SUCCESS;
;;;133    
;;;134    	return resp;
;;;135    }
000036  b00d              ADD      sp,sp,#0x34
000038  e8bd8ff0          POP      {r4-r11,pc}
                  |L7.60|
00003c  ab03              ADD      r3,sp,#0xc            ;82
00003e  4642              MOV      r2,r8                 ;82
000040  2111              MOVS     r1,#0x11              ;82
000042  2000              MOVS     r0,#0                 ;82
000044  f7fffffe          BL       eap_hdr_validate
000048  4604              MOV      r4,r0                 ;82
00004a  b114              CBZ      r4,|L7.82|
00004c  9803              LDR      r0,[sp,#0xc]          ;83
00004e  2803              CMP      r0,#3                 ;83
000050  d207              BCS      |L7.98|
                  |L7.82|
000052  a14b              ADR      r1,|L7.384|
000054  2000              MOVS     r0,#0                 ;84
000056  f7fffffe          BL       wpa_printf
00005a  2001              MOVS     r0,#1                 ;85
00005c  6028              STR      r0,[r5,#0]            ;85
00005e  2000              MOVS     r0,#0                 ;86
000060  e7e9              B        |L7.54|
                  |L7.98|
000062  7820              LDRB     r0,[r4,#0]            ;89
000064  2801              CMP      r0,#1                 ;89
000066  d008              BEQ      |L7.122|
000068  7822              LDRB     r2,[r4,#0]            ;90
00006a  a14e              ADR      r1,|L7.420|
00006c  2000              MOVS     r0,#0                 ;90
00006e  f7fffffe          BL       wpa_printf
000072  2001              MOVS     r0,#1                 ;92
000074  6028              STR      r0,[r5,#0]            ;92
000076  2000              MOVS     r0,#0                 ;93
000078  e7dd              B        |L7.54|
                  |L7.122|
00007a  1c64              ADDS     r4,r4,#1              ;95
00007c  1c64              ADDS     r4,r4,#1              ;97
00007e  f8147b01          LDRB     r7,[r4],#1            ;99
000082  2f08              CMP      r7,#8                 ;100
000084  d103              BNE      |L7.142|
000086  9803              LDR      r0,[sp,#0xc]          ;100
000088  1ec0              SUBS     r0,r0,#3              ;100
00008a  42b8              CMP      r0,r7                 ;100
00008c  d20d              BCS      |L7.170|
                  |L7.142|
00008e  4640              MOV      r0,r8                 ;101
000090  f7fffffe          BL       wpabuf_len
000094  4603              MOV      r3,r0                 ;101
000096  463a              MOV      r2,r7                 ;101
000098  a14c              ADR      r1,|L7.460|
00009a  9001              STR      r0,[sp,#4]            ;101
00009c  2000              MOVS     r0,#0                 ;101
00009e  f7fffffe          BL       wpa_printf
0000a2  2001              MOVS     r0,#1                 ;104
0000a4  6028              STR      r0,[r5,#0]            ;104
0000a6  2000              MOVS     r0,#0                 ;105
0000a8  e7c5              B        |L7.54|
                  |L7.170|
0000aa  4626              MOV      r6,r4                 ;107
0000ac  2208              MOVS     r2,#8                 ;108
0000ae  4631              MOV      r1,r6                 ;108
0000b0  f1090001          ADD      r0,r9,#1              ;108
0000b4  f7fffffe          BL       os_memcpy
0000b8  2308              MOVS     r3,#8                 ;109
0000ba  4632              MOV      r2,r6                 ;109
0000bc  a153              ADR      r1,|L7.524|
0000be  2000              MOVS     r0,#0                 ;109
0000c0  f7fffffe          BL       wpa_hexdump
0000c4  a158              ADR      r1,|L7.552|
0000c6  2000              MOVS     r0,#0                 ;112
0000c8  f7fffffe          BL       wpa_printf
0000cc  4640              MOV      r0,r8                 ;114
0000ce  f7fffffe          BL       eap_get_id
0000d2  9001              STR      r0,[sp,#4]            ;114
0000d4  9000              STR      r0,[sp,#0]            ;114
0000d6  9805              LDR      r0,[sp,#0x14]         ;114
0000d8  f100021b          ADD      r2,r0,#0x1b           ;114
0000dc  2302              MOVS     r3,#2                 ;114
0000de  2111              MOVS     r1,#0x11              ;114
0000e0  2000              MOVS     r0,#0                 ;114
0000e2  f7fffffe          BL       eap_msg_alloc
0000e6  4682              MOV      r10,r0                ;114
0000e8  f1ba0f00          CMP      r10,#0                ;117
0000ec  d101              BNE      |L7.242|
0000ee  2000              MOVS     r0,#0                 ;118
0000f0  e7a1              B        |L7.54|
                  |L7.242|
0000f2  2101              MOVS     r1,#1                 ;119
0000f4  4650              MOV      r0,r10                ;119
0000f6  f7fffffe          BL       wpabuf_put_u8
0000fa  2100              MOVS     r1,#0                 ;120
0000fc  4650              MOV      r0,r10                ;120
0000fe  f7fffffe          BL       wpabuf_put_u8
000102  2118              MOVS     r1,#0x18              ;121
000104  4650              MOV      r0,r10                ;121
000106  f7fffffe          BL       wpabuf_put_u8
00010a  2118              MOVS     r1,#0x18              ;122
00010c  4650              MOV      r0,r10                ;122
00010e  f7fffffe          BL       wpabuf_put
000112  9006              STR      r0,[sp,#0x18]         ;122
000114  9802              LDR      r0,[sp,#8]            ;123
000116  b128              CBZ      r0,|L7.292|
000118  4630              MOV      r0,r6                 ;124
00011a  e9dd2106          LDRD     r2,r1,[sp,#0x18]      ;124
00011e  f7fffffe          BL       challenge_response
000122  e005              B        |L7.304|
                  |L7.292|
000124  4630              MOV      r0,r6                 ;126
000126  e9dd3106          LDRD     r3,r1,[sp,#0x18]      ;126
00012a  9a04              LDR      r2,[sp,#0x10]         ;126
00012c  f7fffffe          BL       nt_challenge_response
                  |L7.304|
000130  2218              MOVS     r2,#0x18              ;127
000132  f1090009          ADD      r0,r9,#9              ;127
000136  9906              LDR      r1,[sp,#0x18]         ;127
000138  f7fffffe          BL       os_memcpy
00013c  2318              MOVS     r3,#0x18              ;128
00013e  a144              ADR      r1,|L7.592|
000140  2000              MOVS     r0,#0                 ;128
000142  9a06              LDR      r2,[sp,#0x18]         ;128
000144  f7fffffe          BL       wpa_hexdump
000148  4650              MOV      r0,r10                ;130
00014a  9a05              LDR      r2,[sp,#0x14]         ;130
00014c  9908              LDR      r1,[sp,#0x20]         ;130
00014e  f7fffffe          BL       wpabuf_put_data
000152  2001              MOVS     r0,#1                 ;132
000154  f8890000          STRB     r0,[r9,#0]            ;132
000158  4650              MOV      r0,r10                ;134
00015a  e76c              B        |L7.54|
;;;136    
                          ENDP

                  |L7.348|
00015c  4541502d          DCB      "EAP-LEAP: Processing EAP-Request",0
000160  4c454150
000164  3a205072
000168  6f636573
00016c  73696e67
000170  20454150
000174  2d526571
000178  75657374
00017c  00      
00017d  00                DCB      0
00017e  00                DCB      0
00017f  00                DCB      0
                  |L7.384|
000180  4541502d          DCB      "EAP-LEAP: Invalid EAP-Request frame",0
000184  4c454150
000188  3a20496e
00018c  76616c69
000190  64204541
000194  502d5265
000198  71756573
00019c  74206672
0001a0  616d6500
                  |L7.420|
0001a4  4541502d          DCB      "EAP-LEAP: Unsupported LEAP version %d",0
0001a8  4c454150
0001ac  3a20556e
0001b0  73757070
0001b4  6f727465
0001b8  64204c45
0001bc  41502076
0001c0  65727369
0001c4  6f6e2025
0001c8  6400    
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L7.460|
0001cc  4541502d          DCB      "EAP-LEAP: Invalid challenge (challenge_len=%d reqDataLe"
0001d0  4c454150
0001d4  3a20496e
0001d8  76616c69
0001dc  64206368
0001e0  616c6c65
0001e4  6e676520
0001e8  28636861
0001ec  6c6c656e
0001f0  67655f6c
0001f4  656e3d25
0001f8  64207265
0001fc  71446174
000200  614c65  
000203  6e3d256c          DCB      "n=%lu)",0
000207  752900  
00020a  00                DCB      0
00020b  00                DCB      0
                  |L7.524|
00020c  4541502d          DCB      "EAP-LEAP: Challenge from AP",0
000210  4c454150
000214  3a204368
000218  616c6c65
00021c  6e676520
000220  66726f6d
000224  20415000
                  |L7.552|
000228  4541502d          DCB      "EAP-LEAP: Generating Challenge Response",0
00022c  4c454150
000230  3a204765
000234  6e657261
000238  74696e67
00023c  20436861
000240  6c6c656e
000244  67652052
000248  6573706f
00024c  6e736500
                  |L7.592|
000250  4541502d          DCB      "EAP-LEAP: Response",0
000254  4c454150
000258  3a205265
00025c  73706f6e
000260  736500  
000263  00                DCB      0

                          AREA ||i.eap_leap_process_response||, CODE, READONLY, ALIGN=2

                  eap_leap_process_response PROC
;;;187    
;;;188    static struct wpabuf * eap_leap_process_response(struct eap_sm *sm, void *priv,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;189    						 struct eap_method_ret *ret,
;;;190    						 const struct wpabuf *reqData)
;;;191    {
000004  b093              SUB      sp,sp,#0x4c
000006  4681              MOV      r9,r0
000008  468a              MOV      r10,r1
00000a  4615              MOV      r5,r2
00000c  461f              MOV      r7,r3
;;;192    	struct eap_leap_data *data = priv;
00000e  46d0              MOV      r8,r10
;;;193    	const u8 *pos, *password;
;;;194    	u8 response_len, pw_hash[16], pw_hash_hash[16],
;;;195    		expected[LEAP_RESPONSE_LEN];
;;;196    	size_t password_len, len;
;;;197    	int pwhash;
;;;198    
;;;199    	wpa_printf(MSG_DEBUG, "EAP-LEAP: Processing EAP-Response");
000010  a14a              ADR      r1,|L8.316|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;200    
;;;201    	password = eap_get_config_password2(sm, &password_len, &pwhash);
000018  aa02              ADD      r2,sp,#8
00001a  a904              ADD      r1,sp,#0x10
00001c  4648              MOV      r0,r9
00001e  f7fffffe          BL       eap_get_config_password2
000022  4683              MOV      r11,r0
;;;202    	if (password == NULL)
000024  f1bb0f00          CMP      r11,#0
000028  d103              BNE      |L8.50|
;;;203    		return NULL;
00002a  2000              MOVS     r0,#0
                  |L8.44|
;;;204    
;;;205    	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_LEAP, reqData, &len);
;;;206    	if (pos == NULL || len < 3) {
;;;207    		wpa_printf(MSG_INFO, "EAP-LEAP: Invalid EAP-Response frame");
;;;208    		ret->ignore = TRUE;
;;;209    		return NULL;
;;;210    	}
;;;211    
;;;212    	if (*pos != LEAP_VERSION) {
;;;213    		wpa_printf(MSG_WARNING, "EAP-LEAP: Unsupported LEAP version "
;;;214    			   "%d", *pos);
;;;215    		ret->ignore = TRUE;
;;;216    		return NULL;
;;;217    	}
;;;218    	pos++;
;;;219    
;;;220    	pos++; /* skip unused byte */
;;;221    
;;;222    	response_len = *pos++;
;;;223    	if (response_len != LEAP_RESPONSE_LEN || response_len > len - 3) {
;;;224    		wpa_printf(MSG_INFO, "EAP-LEAP: Invalid response "
;;;225    			   "(response_len=%d reqDataLen=%lu)",
;;;226    			   response_len, (unsigned long) wpabuf_len(reqData));
;;;227    		ret->ignore = TRUE;
;;;228    		return NULL;
;;;229    	}
;;;230    
;;;231    	wpa_hexdump(MSG_DEBUG, "EAP-LEAP: Response from AP",
;;;232    		    pos, LEAP_RESPONSE_LEN);
;;;233    	os_memcpy(data->ap_response, pos, LEAP_RESPONSE_LEN);
;;;234    
;;;235    	if (pwhash) {
;;;236    		if (hash_nt_password_hash(password, pw_hash_hash)) {
;;;237    			ret->ignore = TRUE;
;;;238    			return NULL;
;;;239    		}
;;;240    	} else {
;;;241    		if (nt_password_hash(password, password_len, pw_hash) ||
;;;242    		    hash_nt_password_hash(pw_hash, pw_hash_hash)) {
;;;243    			ret->ignore = TRUE;
;;;244    			return NULL;
;;;245    		}
;;;246    	}
;;;247    	challenge_response(data->ap_challenge, pw_hash_hash, expected);
;;;248    
;;;249    	ret->methodState = METHOD_DONE;
;;;250    	ret->allowNotifications = FALSE;
;;;251    
;;;252    	if (os_memcmp(pos, expected, LEAP_RESPONSE_LEN) != 0) {
;;;253    		wpa_printf(MSG_WARNING, "EAP-LEAP: AP sent an invalid "
;;;254    			   "response - authentication failed");
;;;255    		wpa_hexdump(MSG_DEBUG, "EAP-LEAP: Expected response from AP",
;;;256    			    expected, LEAP_RESPONSE_LEN);
;;;257    		ret->decision = DECISION_FAIL;
;;;258    		return NULL;
;;;259    	}
;;;260    
;;;261    	ret->decision = DECISION_UNCOND_SUCC;
;;;262    
;;;263    	/* LEAP is somewhat odd method since it sends EAP-Success in the middle
;;;264    	 * of the authentication. Use special variable to transit EAP state
;;;265    	 * machine to SUCCESS state. */
;;;266    	sm->leap_done = TRUE;
;;;267    	data->state = LEAP_DONE;
;;;268    
;;;269    	/* No more authentication messages expected; AP will send EAPOL-Key
;;;270    	 * frames if encryption is enabled. */
;;;271    	return NULL;
;;;272    }
00002c  b013              ADD      sp,sp,#0x4c
00002e  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.50|
000032  ab03              ADD      r3,sp,#0xc            ;205
000034  463a              MOV      r2,r7                 ;205
000036  2111              MOVS     r1,#0x11              ;205
000038  2000              MOVS     r0,#0                 ;205
00003a  f7fffffe          BL       eap_hdr_validate
00003e  4604              MOV      r4,r0                 ;205
000040  b114              CBZ      r4,|L8.72|
000042  9803              LDR      r0,[sp,#0xc]          ;206
000044  2803              CMP      r0,#3                 ;206
000046  d207              BCS      |L8.88|
                  |L8.72|
000048  a145              ADR      r1,|L8.352|
00004a  2000              MOVS     r0,#0                 ;207
00004c  f7fffffe          BL       wpa_printf
000050  2001              MOVS     r0,#1                 ;208
000052  6028              STR      r0,[r5,#0]            ;208
000054  2000              MOVS     r0,#0                 ;209
000056  e7e9              B        |L8.44|
                  |L8.88|
000058  7820              LDRB     r0,[r4,#0]            ;212
00005a  2801              CMP      r0,#1                 ;212
00005c  d008              BEQ      |L8.112|
00005e  7822              LDRB     r2,[r4,#0]            ;213
000060  a149              ADR      r1,|L8.392|
000062  2000              MOVS     r0,#0                 ;213
000064  f7fffffe          BL       wpa_printf
000068  2001              MOVS     r0,#1                 ;215
00006a  6028              STR      r0,[r5,#0]            ;215
00006c  2000              MOVS     r0,#0                 ;216
00006e  e7dd              B        |L8.44|
                  |L8.112|
000070  1c64              ADDS     r4,r4,#1              ;218
000072  1c64              ADDS     r4,r4,#1              ;220
000074  f8146b01          LDRB     r6,[r4],#1            ;222
000078  2e18              CMP      r6,#0x18              ;223
00007a  d103              BNE      |L8.132|
00007c  9803              LDR      r0,[sp,#0xc]          ;223
00007e  1ec0              SUBS     r0,r0,#3              ;223
000080  42b0              CMP      r0,r6                 ;223
000082  d20d              BCS      |L8.160|
                  |L8.132|
000084  4638              MOV      r0,r7                 ;224
000086  f7fffffe          BL       wpabuf_len
00008a  4603              MOV      r3,r0                 ;224
00008c  4632              MOV      r2,r6                 ;224
00008e  a148              ADR      r1,|L8.432|
000090  9001              STR      r0,[sp,#4]            ;224
000092  2000              MOVS     r0,#0                 ;224
000094  f7fffffe          BL       wpa_printf
000098  2001              MOVS     r0,#1                 ;227
00009a  6028              STR      r0,[r5,#0]            ;227
00009c  2000              MOVS     r0,#0                 ;228
00009e  e7c5              B        |L8.44|
                  |L8.160|
0000a0  2318              MOVS     r3,#0x18              ;231
0000a2  4622              MOV      r2,r4                 ;231
0000a4  a151              ADR      r1,|L8.492|
0000a6  2000              MOVS     r0,#0                 ;231
0000a8  f7fffffe          BL       wpa_hexdump
0000ac  2218              MOVS     r2,#0x18              ;233
0000ae  4621              MOV      r1,r4                 ;233
0000b0  f1080029          ADD      r0,r8,#0x29           ;233
0000b4  f7fffffe          BL       os_memcpy
0000b8  9802              LDR      r0,[sp,#8]            ;235
0000ba  b140              CBZ      r0,|L8.206|
0000bc  a90b              ADD      r1,sp,#0x2c           ;236
0000be  4658              MOV      r0,r11                ;236
0000c0  f7fffffe          BL       hash_nt_password_hash
0000c4  b190              CBZ      r0,|L8.236|
0000c6  2001              MOVS     r0,#1                 ;237
0000c8  6028              STR      r0,[r5,#0]            ;237
0000ca  2000              MOVS     r0,#0                 ;238
0000cc  e7ae              B        |L8.44|
                  |L8.206|
0000ce  aa0f              ADD      r2,sp,#0x3c           ;241
0000d0  4658              MOV      r0,r11                ;241
0000d2  9904              LDR      r1,[sp,#0x10]         ;241
0000d4  f7fffffe          BL       nt_password_hash
0000d8  b920              CBNZ     r0,|L8.228|
0000da  a90b              ADD      r1,sp,#0x2c           ;242
0000dc  a80f              ADD      r0,sp,#0x3c           ;242
0000de  f7fffffe          BL       hash_nt_password_hash
0000e2  b118              CBZ      r0,|L8.236|
                  |L8.228|
0000e4  2001              MOVS     r0,#1                 ;243
0000e6  6028              STR      r0,[r5,#0]            ;243
0000e8  2000              MOVS     r0,#0                 ;244
0000ea  e79f              B        |L8.44|
                  |L8.236|
0000ec  aa05              ADD      r2,sp,#0x14           ;247
0000ee  a90b              ADD      r1,sp,#0x2c           ;247
0000f0  f1080021          ADD      r0,r8,#0x21           ;247
0000f4  f7fffffe          BL       challenge_response
0000f8  2004              MOVS     r0,#4                 ;249
0000fa  7128              STRB     r0,[r5,#4]            ;249
0000fc  2000              MOVS     r0,#0                 ;250
0000fe  60a8              STR      r0,[r5,#8]            ;250
000100  2218              MOVS     r2,#0x18              ;252
000102  a905              ADD      r1,sp,#0x14           ;252
000104  4620              MOV      r0,r4                 ;252
000106  f7fffffe          BL       os_memcmp
00010a  b160              CBZ      r0,|L8.294|
00010c  a13e              ADR      r1,|L8.520|
00010e  2000              MOVS     r0,#0                 ;253
000110  f7fffffe          BL       wpa_printf
000114  2318              MOVS     r3,#0x18              ;255
000116  aa05              ADD      r2,sp,#0x14           ;255
000118  a14b              ADR      r1,|L8.584|
00011a  2000              MOVS     r0,#0                 ;255
00011c  f7fffffe          BL       wpa_hexdump
000120  2000              MOVS     r0,#0                 ;257
000122  7168              STRB     r0,[r5,#5]            ;257
000124  e782              B        |L8.44|
                  |L8.294|
000126  2002              MOVS     r0,#2                 ;261
000128  7168              STRB     r0,[r5,#5]            ;261
00012a  2001              MOVS     r0,#1                 ;266
00012c  f8c90068          STR      r0,[r9,#0x68]         ;266
000130  2003              MOVS     r0,#3                 ;267
000132  f8880000          STRB     r0,[r8,#0]            ;267
000136  2000              MOVS     r0,#0                 ;271
000138  e778              B        |L8.44|
;;;273    
                          ENDP

00013a  0000              DCW      0x0000
                  |L8.316|
00013c  4541502d          DCB      "EAP-LEAP: Processing EAP-Response",0
000140  4c454150
000144  3a205072
000148  6f636573
00014c  73696e67
000150  20454150
000154  2d526573
000158  706f6e73
00015c  6500    
00015e  00                DCB      0
00015f  00                DCB      0
                  |L8.352|
000160  4541502d          DCB      "EAP-LEAP: Invalid EAP-Response frame",0
000164  4c454150
000168  3a20496e
00016c  76616c69
000170  64204541
000174  502d5265
000178  73706f6e
00017c  73652066
000180  72616d65
000184  00      
000185  00                DCB      0
000186  00                DCB      0
000187  00                DCB      0
                  |L8.392|
000188  4541502d          DCB      "EAP-LEAP: Unsupported LEAP version %d",0
00018c  4c454150
000190  3a20556e
000194  73757070
000198  6f727465
00019c  64204c45
0001a0  41502076
0001a4  65727369
0001a8  6f6e2025
0001ac  6400    
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L8.432|
0001b0  4541502d          DCB      "EAP-LEAP: Invalid response (response_len=%d reqDataLen="
0001b4  4c454150
0001b8  3a20496e
0001bc  76616c69
0001c0  64207265
0001c4  73706f6e
0001c8  73652028
0001cc  72657370
0001d0  6f6e7365
0001d4  5f6c656e
0001d8  3d256420
0001dc  72657144
0001e0  6174614c
0001e4  656e3d  
0001e7  256c7529          DCB      "%lu)",0
0001eb  00      
                  |L8.492|
0001ec  4541502d          DCB      "EAP-LEAP: Response from AP",0
0001f0  4c454150
0001f4  3a205265
0001f8  73706f6e
0001fc  73652066
000200  726f6d20
000204  415000  
000207  00                DCB      0
                  |L8.520|
000208  4541502d          DCB      "EAP-LEAP: AP sent an invalid response - authentication "
00020c  4c454150
000210  3a204150
000214  2073656e
000218  7420616e
00021c  20696e76
000220  616c6964
000224  20726573
000228  706f6e73
00022c  65202d20
000230  61757468
000234  656e7469
000238  63617469
00023c  6f6e20  
00023f  6661696c          DCB      "failed",0
000243  656400  
000246  00                DCB      0
000247  00                DCB      0
                  |L8.584|
000248  4541502d          DCB      "EAP-LEAP: Expected response from AP",0
00024c  4c454150
000250  3a204578
000254  70656374
000258  65642072
00025c  6573706f
000260  6e736520
000264  66726f6d
000268  20415000

                          AREA ||i.eap_leap_process_success||, CODE, READONLY, ALIGN=2

                  eap_leap_process_success PROC
;;;137    
;;;138    static struct wpabuf * eap_leap_process_success(struct eap_sm *sm, void *priv,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;139    						struct eap_method_ret *ret,
;;;140    						const struct wpabuf *reqData)
;;;141    {
000004  4682              MOV      r10,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
;;;142    	struct eap_leap_data *data = priv;
00000c  463c              MOV      r4,r7
;;;143    	struct wpabuf *resp;
;;;144    	u8 *pos;
;;;145    	const u8 *identity;
;;;146    	size_t identity_len;
;;;147    
;;;148    	wpa_printf(MSG_DEBUG, "EAP-LEAP: Processing EAP-Success");
00000e  a131              ADR      r1,|L9.212|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       wpa_printf
;;;149    
;;;150    	identity = eap_get_config_identity(sm, &identity_len);
000016  a902              ADD      r1,sp,#8
000018  4650              MOV      r0,r10
00001a  f7fffffe          BL       eap_get_config_identity
00001e  4681              MOV      r9,r0
;;;151    	if (identity == NULL)
000020  f1b90f00          CMP      r9,#0
000024  d102              BNE      |L9.44|
;;;152    		return NULL;
000026  2000              MOVS     r0,#0
                  |L9.40|
;;;153    
;;;154    	if (data->state != LEAP_WAIT_SUCCESS) {
;;;155    		wpa_printf(MSG_INFO, "EAP-LEAP: EAP-Success received in "
;;;156    			   "unexpected state (%d) - ignored", data->state);
;;;157    		ret->ignore = TRUE;
;;;158    		return NULL;
;;;159    	}
;;;160    
;;;161    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_LEAP,
;;;162    			     3 + LEAP_CHALLENGE_LEN + identity_len,
;;;163    			     EAP_CODE_REQUEST, eap_get_id(reqData));
;;;164    	if (resp == NULL)
;;;165    		return NULL;
;;;166    	wpabuf_put_u8(resp, LEAP_VERSION);
;;;167    	wpabuf_put_u8(resp, 0); /* unused */
;;;168    	wpabuf_put_u8(resp, LEAP_CHALLENGE_LEN);
;;;169    	pos = wpabuf_put(resp, LEAP_CHALLENGE_LEN);
;;;170    	if (os_get_random(pos, LEAP_CHALLENGE_LEN)) {
;;;171    		wpa_printf(MSG_WARNING, "EAP-LEAP: Failed to read random data "
;;;172    			   "for challenge");
;;;173    		wpabuf_free(resp);
;;;174    		ret->ignore = TRUE;
;;;175    		return NULL;
;;;176    	}
;;;177    	os_memcpy(data->ap_challenge, pos, LEAP_CHALLENGE_LEN);
;;;178    	wpa_hexdump(MSG_MSGDUMP, "EAP-LEAP: Challenge to AP/AS", pos,
;;;179    		    LEAP_CHALLENGE_LEN);
;;;180    	wpabuf_put_data(resp, identity, identity_len);
;;;181    
;;;182    	data->state = LEAP_WAIT_RESPONSE;
;;;183    
;;;184    	return resp;
;;;185    }
000028  e8bd8ffe          POP      {r1-r11,pc}
                  |L9.44|
00002c  7820              LDRB     r0,[r4,#0]            ;154
00002e  2801              CMP      r0,#1                 ;154
000030  d008              BEQ      |L9.68|
000032  7822              LDRB     r2,[r4,#0]            ;155
000034  4930              LDR      r1,|L9.248|
000036  2000              MOVS     r0,#0                 ;155
000038  f7fffffe          BL       wpa_printf
00003c  2001              MOVS     r0,#1                 ;157
00003e  6028              STR      r0,[r5,#0]            ;157
000040  2000              MOVS     r0,#0                 ;158
000042  e7f1              B        |L9.40|
                  |L9.68|
000044  4640              MOV      r0,r8                 ;161
000046  f7fffffe          BL       eap_get_id
00004a  9001              STR      r0,[sp,#4]            ;161
00004c  9000              STR      r0,[sp,#0]            ;161
00004e  9802              LDR      r0,[sp,#8]            ;161
000050  f100020b          ADD      r2,r0,#0xb            ;161
000054  2301              MOVS     r3,#1                 ;161
000056  2111              MOVS     r1,#0x11              ;161
000058  2000              MOVS     r0,#0                 ;161
00005a  f7fffffe          BL       eap_msg_alloc
00005e  4606              MOV      r6,r0                 ;161
000060  b90e              CBNZ     r6,|L9.102|
000062  2000              MOVS     r0,#0                 ;165
000064  e7e0              B        |L9.40|
                  |L9.102|
000066  2101              MOVS     r1,#1                 ;166
000068  4630              MOV      r0,r6                 ;166
00006a  f7fffffe          BL       wpabuf_put_u8
00006e  2100              MOVS     r1,#0                 ;167
000070  4630              MOV      r0,r6                 ;167
000072  f7fffffe          BL       wpabuf_put_u8
000076  2108              MOVS     r1,#8                 ;168
000078  4630              MOV      r0,r6                 ;168
00007a  f7fffffe          BL       wpabuf_put_u8
00007e  2108              MOVS     r1,#8                 ;169
000080  4630              MOV      r0,r6                 ;169
000082  f7fffffe          BL       wpabuf_put
000086  4683              MOV      r11,r0                ;169
000088  2108              MOVS     r1,#8                 ;170
00008a  4658              MOV      r0,r11                ;170
00008c  f7fffffe          BL       os_get_random
000090  b150              CBZ      r0,|L9.168|
000092  a11a              ADR      r1,|L9.252|
000094  2000              MOVS     r0,#0                 ;171
000096  f7fffffe          BL       wpa_printf
00009a  4630              MOV      r0,r6                 ;173
00009c  f7fffffe          BL       wpabuf_free
0000a0  2001              MOVS     r0,#1                 ;174
0000a2  6028              STR      r0,[r5,#0]            ;174
0000a4  2000              MOVS     r0,#0                 ;175
0000a6  e7bf              B        |L9.40|
                  |L9.168|
0000a8  2208              MOVS     r2,#8                 ;177
0000aa  4659              MOV      r1,r11                ;177
0000ac  f1040021          ADD      r0,r4,#0x21           ;177
0000b0  f7fffffe          BL       os_memcpy
0000b4  2308              MOVS     r3,#8                 ;178
0000b6  465a              MOV      r2,r11                ;178
0000b8  a11d              ADR      r1,|L9.304|
0000ba  2000              MOVS     r0,#0                 ;178
0000bc  f7fffffe          BL       wpa_hexdump
0000c0  4649              MOV      r1,r9                 ;180
0000c2  4630              MOV      r0,r6                 ;180
0000c4  9a02              LDR      r2,[sp,#8]            ;180
0000c6  f7fffffe          BL       wpabuf_put_data
0000ca  2002              MOVS     r0,#2                 ;182
0000cc  7020              STRB     r0,[r4,#0]            ;182
0000ce  4630              MOV      r0,r6                 ;184
0000d0  e7aa              B        |L9.40|
;;;186    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L9.212|
0000d4  4541502d          DCB      "EAP-LEAP: Processing EAP-Success",0
0000d8  4c454150
0000dc  3a205072
0000e0  6f636573
0000e4  73696e67
0000e8  20454150
0000ec  2d537563
0000f0  63657373
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L9.248|
                          DCD      ||.constdata||
                  |L9.252|
0000fc  4541502d          DCB      "EAP-LEAP: Failed to read random data for challenge",0
000100  4c454150
000104  3a204661
000108  696c6564
00010c  20746f20
000110  72656164
000114  2072616e
000118  646f6d20
00011c  64617461
000120  20666f72
000124  20636861
000128  6c6c656e
00012c  676500  
00012f  00                DCB      0
                  |L9.304|
000130  4541502d          DCB      "EAP-LEAP: Challenge to AP/AS",0
000134  4c454150
000138  3a204368
00013c  616c6c65
000140  6e676520
000144  746f2041
000148  502f4153
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0

                          AREA ||i.eap_peer_leap_register||, CODE, READONLY, ALIGN=2

                  eap_peer_leap_register PROC
;;;394    
;;;395    int eap_peer_leap_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;396    {
;;;397    	struct eap_method *eap;
;;;398    	int ret;
;;;399    
;;;400    	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a30f              ADR      r3,|L10.64|
000004  2211              MOVS     r2,#0x11
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;401    				    EAP_VENDOR_IETF, EAP_TYPE_LEAP, "LEAP");
;;;402    	if (eap == NULL)
000010  b914              CBNZ     r4,|L10.24|
;;;403    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L10.22|
;;;404    
;;;405    	eap->init = eap_leap_init;
;;;406    	eap->deinit = eap_leap_deinit;
;;;407    	eap->process = eap_leap_process;
;;;408    	eap->isKeyAvailable = eap_leap_isKeyAvailable;
;;;409    	eap->getKey = eap_leap_getKey;
;;;410    
;;;411    	ret = eap_peer_method_register(eap);
;;;412    	if (ret)
;;;413    		eap_peer_method_free(eap);
;;;414    	return ret;
;;;415    }
000016  bd70              POP      {r4-r6,pc}
                  |L10.24|
000018  480b              LDR      r0,|L10.72|
00001a  60e0              STR      r0,[r4,#0xc]          ;405
00001c  480b              LDR      r0,|L10.76|
00001e  6120              STR      r0,[r4,#0x10]         ;406
000020  480b              LDR      r0,|L10.80|
000022  6160              STR      r0,[r4,#0x14]         ;407
000024  480b              LDR      r0,|L10.84|
000026  61a0              STR      r0,[r4,#0x18]         ;408
000028  480b              LDR      r0,|L10.88|
00002a  61e0              STR      r0,[r4,#0x1c]         ;409
00002c  4620              MOV      r0,r4                 ;411
00002e  f7fffffe          BL       eap_peer_method_register
000032  4605              MOV      r5,r0                 ;411
000034  b115              CBZ      r5,|L10.60|
000036  4620              MOV      r0,r4                 ;413
000038  f7fffffe          BL       eap_peer_method_free
                  |L10.60|
00003c  4628              MOV      r0,r5                 ;414
00003e  e7ea              B        |L10.22|
                          ENDP

                  |L10.64|
000040  4c454150          DCB      "LEAP",0
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L10.72|
                          DCD      eap_leap_init
                  |L10.76|
                          DCD      eap_leap_deinit
                  |L10.80|
                          DCD      eap_leap_process
                  |L10.84|
                          DCD      eap_leap_isKeyAvailable
                  |L10.88|
                          DCD      eap_leap_getKey

                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L13.30|
00001a  2001              MOVS     r0,#1
                  |L13.28|
;;;495    }
00001c  4770              BX       lr
                  |L13.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L13.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L18.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L18.14|
                  |L18.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L18.12|
;;;70     }
00000c  4770              BX       lr
                  |L18.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L18.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L19.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L19.16|
                  |L19.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L19.14|
;;;76     }
00000e  4770              BX       lr
                  |L19.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L19.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L20.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L20.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L20.18|
                  |L20.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L20.16|
;;;57     }
000010  4770              BX       lr
                  |L20.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L20.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L21.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L21.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L21.20|
                  |L21.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L21.18|
;;;64     }
000012  4770              BX       lr
                  |L21.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L21.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L22.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L22.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L22.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L22.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L25.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L25.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L25.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L25.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L31.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L31.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  4c454150          DCB      0x4c,0x45,0x41,0x50
000008  3a204541          DCB      0x3a,0x20,0x45,0x41
00000c  502d5375          DCB      0x50,0x2d,0x53,0x75
000010  63636573          DCB      0x63,0x63,0x65,0x73
000014  73207265          DCB      0x73,0x20,0x72,0x65
000018  63656976          DCB      0x63,0x65,0x69,0x76
00001c  65642069          DCB      0x65,0x64,0x20,0x69
000020  6e20756e          DCB      0x6e,0x20,0x75,0x6e
000024  65787065          DCB      0x65,0x78,0x70,0x65
000028  63746564          DCB      0x63,0x74,0x65,0x64
00002c  20737461          DCB      0x20,0x73,0x74,0x61
000030  74652028          DCB      0x74,0x65,0x20,0x28
000034  25642920          DCB      0x25,0x64,0x29,0x20
000038  2d206967          DCB      0x2d,0x20,0x69,0x67
00003c  6e6f7265          DCB      0x6e,0x6f,0x72,0x65
000040  6400              DCB      0x64,0x00
