; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_psk.o --depend=.\obj\eap_psk.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_psk.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_psk.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.eap_peer_psk_register||, CODE, READONLY, ALIGN=2

                  eap_peer_psk_register PROC
;;;460    
;;;461    int eap_peer_psk_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;462    {
;;;463    	struct eap_method *eap;
;;;464    	int ret;
;;;465    
;;;466    	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a310              ADR      r3,|L4.68|
000004  222f              MOVS     r2,#0x2f
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;467    				    EAP_VENDOR_IETF, EAP_TYPE_PSK, "PSK");
;;;468    	if (eap == NULL)
000010  b914              CBNZ     r4,|L4.24|
;;;469    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L4.22|
;;;470    
;;;471    	eap->init = eap_psk_init;
;;;472    	eap->deinit = eap_psk_deinit;
;;;473    	eap->process = eap_psk_process;
;;;474    	eap->isKeyAvailable = eap_psk_isKeyAvailable;
;;;475    	eap->getKey = eap_psk_getKey;
;;;476    	eap->get_emsk = eap_psk_get_emsk;
;;;477    
;;;478    	ret = eap_peer_method_register(eap);
;;;479    	if (ret)
;;;480    		eap_peer_method_free(eap);
;;;481    	return ret;
;;;482    }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  480b              LDR      r0,|L4.72|
00001a  60e0              STR      r0,[r4,#0xc]          ;471
00001c  480b              LDR      r0,|L4.76|
00001e  6120              STR      r0,[r4,#0x10]         ;472
000020  480b              LDR      r0,|L4.80|
000022  6160              STR      r0,[r4,#0x14]         ;473
000024  480b              LDR      r0,|L4.84|
000026  61a0              STR      r0,[r4,#0x18]         ;474
000028  480b              LDR      r0,|L4.88|
00002a  61e0              STR      r0,[r4,#0x1c]         ;475
00002c  480b              LDR      r0,|L4.92|
00002e  6420              STR      r0,[r4,#0x40]         ;476
000030  4620              MOV      r0,r4                 ;478
000032  f7fffffe          BL       eap_peer_method_register
000036  4605              MOV      r5,r0                 ;478
000038  b115              CBZ      r5,|L4.64|
00003a  4620              MOV      r0,r4                 ;480
00003c  f7fffffe          BL       eap_peer_method_free
                  |L4.64|
000040  4628              MOV      r0,r5                 ;481
000042  e7e8              B        |L4.22|
                          ENDP

                  |L4.68|
000044  50534b00          DCB      "PSK",0
                  |L4.72|
                          DCD      eap_psk_init
                  |L4.76|
                          DCD      eap_psk_deinit
                  |L4.80|
                          DCD      eap_psk_process
                  |L4.84|
                          DCD      eap_psk_isKeyAvailable
                  |L4.88|
                          DCD      eap_psk_getKey
                  |L4.92|
                          DCD      eap_psk_get_emsk

                          AREA ||i.eap_psk_deinit||, CODE, READONLY, ALIGN=1

                  eap_psk_deinit PROC
;;;77     
;;;78     static void eap_psk_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;79     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;80     	struct eap_psk_data *data = priv;
000006  4625              MOV      r5,r4
;;;81     	os_free(data->id_s);
000008  6c68              LDR      r0,[r5,#0x44]
00000a  f7fffffe          BL       os_free
;;;82     	os_free(data->id_p);
00000e  6ca8              LDR      r0,[r5,#0x48]
000010  f7fffffe          BL       os_free
;;;83     	os_free(data);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       os_free
;;;84     }
00001a  bd70              POP      {r4-r6,pc}
;;;85     
                          ENDP


                          AREA ||i.eap_psk_getKey||, CODE, READONLY, ALIGN=1

                  eap_psk_getKey PROC
;;;422    
;;;423    static u8 * eap_psk_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;424    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;425    	struct eap_psk_data *data = priv;
00000a  4627              MOV      r7,r4
;;;426    	u8 *key;
;;;427    
;;;428    	if (data->state != PSK_DONE)
00000c  7838              LDRB     r0,[r7,#0]
00000e  2802              CMP      r0,#2
000010  d002              BEQ      |L6.24|
;;;429    		return NULL;
000012  2000              MOVS     r0,#0
                  |L6.20|
;;;430    
;;;431    	key = os_malloc(EAP_MSK_LEN);
;;;432    	if (key == NULL)
;;;433    		return NULL;
;;;434    
;;;435    	*len = EAP_MSK_LEN;
;;;436    	os_memcpy(key, data->msk, EAP_MSK_LEN);
;;;437    
;;;438    	return key;
;;;439    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L6.24|
000018  2040              MOVS     r0,#0x40              ;431
00001a  f7fffffe          BL       os_malloc
00001e  4605              MOV      r5,r0                 ;431
000020  b90d              CBNZ     r5,|L6.38|
000022  2000              MOVS     r0,#0                 ;433
000024  e7f6              B        |L6.20|
                  |L6.38|
000026  2040              MOVS     r0,#0x40              ;435
000028  6030              STR      r0,[r6,#0]            ;435
00002a  2240              MOVS     r2,#0x40              ;436
00002c  f1070154          ADD      r1,r7,#0x54           ;436
000030  4628              MOV      r0,r5                 ;436
000032  f7fffffe          BL       os_memcpy
000036  4628              MOV      r0,r5                 ;438
000038  e7ec              B        |L6.20|
;;;440    
                          ENDP


                          AREA ||i.eap_psk_get_emsk||, CODE, READONLY, ALIGN=1

                  eap_psk_get_emsk PROC
;;;441    
;;;442    static u8 * eap_psk_get_emsk(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;443    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;444    	struct eap_psk_data *data = priv;
00000a  4627              MOV      r7,r4
;;;445    	u8 *key;
;;;446    
;;;447    	if (data->state != PSK_DONE)
00000c  7838              LDRB     r0,[r7,#0]
00000e  2802              CMP      r0,#2
000010  d002              BEQ      |L7.24|
;;;448    		return NULL;
000012  2000              MOVS     r0,#0
                  |L7.20|
;;;449    
;;;450    	key = os_malloc(EAP_EMSK_LEN);
;;;451    	if (key == NULL)
;;;452    		return NULL;
;;;453    
;;;454    	*len = EAP_EMSK_LEN;
;;;455    	os_memcpy(key, data->emsk, EAP_EMSK_LEN);
;;;456    
;;;457    	return key;
;;;458    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L7.24|
000018  2040              MOVS     r0,#0x40              ;450
00001a  f7fffffe          BL       os_malloc
00001e  4605              MOV      r5,r0                 ;450
000020  b90d              CBNZ     r5,|L7.38|
000022  2000              MOVS     r0,#0                 ;452
000024  e7f6              B        |L7.20|
                  |L7.38|
000026  2040              MOVS     r0,#0x40              ;454
000028  6030              STR      r0,[r6,#0]            ;454
00002a  2240              MOVS     r2,#0x40              ;455
00002c  f1070194          ADD      r1,r7,#0x94           ;455
000030  4628              MOV      r0,r5                 ;455
000032  f7fffffe          BL       os_memcpy
000036  4628              MOV      r0,r5                 ;457
000038  e7ec              B        |L7.20|
;;;459    
                          ENDP


                          AREA ||i.eap_psk_init||, CODE, READONLY, ALIGN=2

                  eap_psk_init PROC
;;;36     
;;;37     static void * eap_psk_init(struct eap_sm *sm)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;38     {
000004  4607              MOV      r7,r0
;;;39     	struct eap_psk_data *data;
;;;40     	const u8 *identity, *password;
;;;41     	size_t identity_len, password_len;
;;;42     
;;;43     	password = eap_get_config_password(sm, &password_len);
000006  4669              MOV      r1,sp
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       eap_get_config_password
00000e  4606              MOV      r6,r0
;;;44     	if (!password || password_len != 16) {
000010  b116              CBZ      r6,|L8.24|
000012  9800              LDR      r0,[sp,#0]
000014  2810              CMP      r0,#0x10
000016  d006              BEQ      |L8.38|
                  |L8.24|
;;;45     		wpa_printf(MSG_INFO, "EAP-PSK: 16-octet pre-shared key not "
000018  a125              ADR      r1,|L8.176|
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       wpa_printf
;;;46     			   "configured");
;;;47     		return NULL;
000020  2000              MOVS     r0,#0
                  |L8.34|
;;;48     	}
;;;49     
;;;50     	data = os_zalloc(sizeof(*data));
;;;51     	if (data == NULL)
;;;52     		return NULL;
;;;53     	if (eap_psk_key_setup(password, data->ak, data->kdk)) {
;;;54     		os_free(data);
;;;55     		return NULL;
;;;56     	}
;;;57     	wpa_hexdump_key(MSG_DEBUG, "EAP-PSK: AK", data->ak, EAP_PSK_AK_LEN);
;;;58     	wpa_hexdump_key(MSG_DEBUG, "EAP-PSK: KDK", data->kdk, EAP_PSK_KDK_LEN);
;;;59     	data->state = PSK_INIT;
;;;60     
;;;61     	identity = eap_get_config_identity(sm, &identity_len);
;;;62     	if (identity) {
;;;63     		data->id_p = os_malloc(identity_len);
;;;64     		if (data->id_p)
;;;65     			os_memcpy(data->id_p, identity, identity_len);
;;;66     		data->id_p_len = identity_len;
;;;67     	}
;;;68     	if (data->id_p == NULL) {
;;;69     		wpa_printf(MSG_INFO, "EAP-PSK: could not get own identity");
;;;70     		os_free(data);
;;;71     		return NULL;
;;;72     	}
;;;73     
;;;74     	return data;
;;;75     }
000022  e8bd81fc          POP      {r2-r8,pc}
                  |L8.38|
000026  20d4              MOVS     r0,#0xd4              ;50
000028  f7fffffe          BL       os_zalloc
00002c  4604              MOV      r4,r0                 ;50
00002e  b90c              CBNZ     r4,|L8.52|
000030  2000              MOVS     r0,#0                 ;52
000032  e7f6              B        |L8.34|
                  |L8.52|
000034  f1040221          ADD      r2,r4,#0x21           ;53
000038  f1040111          ADD      r1,r4,#0x11           ;53
00003c  4630              MOV      r0,r6                 ;53
00003e  f7fffffe          BL       eap_psk_key_setup
000042  b120              CBZ      r0,|L8.78|
000044  4620              MOV      r0,r4                 ;54
000046  f7fffffe          BL       os_free
00004a  2000              MOVS     r0,#0                 ;55
00004c  e7e9              B        |L8.34|
                  |L8.78|
00004e  2310              MOVS     r3,#0x10              ;57
000050  f1040211          ADD      r2,r4,#0x11           ;57
000054  a122              ADR      r1,|L8.224|
000056  2000              MOVS     r0,#0                 ;57
000058  f7fffffe          BL       wpa_hexdump_key
00005c  2310              MOVS     r3,#0x10              ;58
00005e  f1040221          ADD      r2,r4,#0x21           ;58
000062  a122              ADR      r1,|L8.236|
000064  2000              MOVS     r0,#0                 ;58
000066  f7fffffe          BL       wpa_hexdump_key
00006a  2000              MOVS     r0,#0                 ;59
00006c  7020              STRB     r0,[r4,#0]            ;59
00006e  a901              ADD      r1,sp,#4              ;61
000070  4638              MOV      r0,r7                 ;61
000072  f7fffffe          BL       eap_get_config_identity
000076  4605              MOV      r5,r0                 ;61
000078  b165              CBZ      r5,|L8.148|
00007a  9801              LDR      r0,[sp,#4]            ;63
00007c  f7fffffe          BL       os_malloc
000080  64a0              STR      r0,[r4,#0x48]         ;63
000082  6ca0              LDR      r0,[r4,#0x48]         ;64
000084  b120              CBZ      r0,|L8.144|
000086  6ca0              LDR      r0,[r4,#0x48]         ;65
000088  4629              MOV      r1,r5                 ;65
00008a  9a01              LDR      r2,[sp,#4]            ;65
00008c  f7fffffe          BL       os_memcpy
                  |L8.144|
000090  9801              LDR      r0,[sp,#4]            ;66
000092  6520              STR      r0,[r4,#0x50]         ;66
                  |L8.148|
000094  6ca0              LDR      r0,[r4,#0x48]         ;68
000096  b940              CBNZ     r0,|L8.170|
000098  a118              ADR      r1,|L8.252|
00009a  2000              MOVS     r0,#0                 ;69
00009c  f7fffffe          BL       wpa_printf
0000a0  4620              MOV      r0,r4                 ;70
0000a2  f7fffffe          BL       os_free
0000a6  2000              MOVS     r0,#0                 ;71
0000a8  e7bb              B        |L8.34|
                  |L8.170|
0000aa  4620              MOV      r0,r4                 ;74
0000ac  e7b9              B        |L8.34|
;;;76     
                          ENDP

0000ae  0000              DCW      0x0000
                  |L8.176|
0000b0  4541502d          DCB      "EAP-PSK: 16-octet pre-shared key not configured",0
0000b4  50534b3a
0000b8  2031362d
0000bc  6f637465
0000c0  74207072
0000c4  652d7368
0000c8  61726564
0000cc  206b6579
0000d0  206e6f74
0000d4  20636f6e
0000d8  66696775
0000dc  72656400
                  |L8.224|
0000e0  4541502d          DCB      "EAP-PSK: AK",0
0000e4  50534b3a
0000e8  20414b00
                  |L8.236|
0000ec  4541502d          DCB      "EAP-PSK: KDK",0
0000f0  50534b3a
0000f4  204b444b
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L8.252|
0000fc  4541502d          DCB      "EAP-PSK: could not get own identity",0
000100  50534b3a
000104  20636f75
000108  6c64206e
00010c  6f742067
000110  6574206f
000114  776e2069
000118  64656e74
00011c  69747900

                          AREA ||i.eap_psk_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_psk_isKeyAvailable PROC
;;;415    
;;;416    static Boolean eap_psk_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;417    {
;;;418    	struct eap_psk_data *data = priv;
000002  460a              MOV      r2,r1
;;;419    	return data->state == PSK_DONE;
000004  7810              LDRB     r0,[r2,#0]
000006  2802              CMP      r0,#2
000008  d101              BNE      |L9.14|
00000a  2001              MOVS     r0,#1
                  |L9.12|
;;;420    }
00000c  4770              BX       lr
                  |L9.14|
00000e  2000              MOVS     r0,#0                 ;419
000010  e7fc              B        |L9.12|
;;;421    
                          ENDP


                          AREA ||i.eap_psk_process||, CODE, READONLY, ALIGN=2

                  eap_psk_process PROC
;;;373    
;;;374    static struct wpabuf * eap_psk_process(struct eap_sm *sm, void *priv,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;375    				       struct eap_method_ret *ret,
;;;376    				       const struct wpabuf *reqData)
;;;377    {
000004  4682              MOV      r10,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
;;;378    	struct eap_psk_data *data = priv;
00000c  462f              MOV      r7,r5
;;;379    	const u8 *pos;
;;;380    	struct wpabuf *resp = NULL;
00000e  f04f0900          MOV      r9,#0
;;;381    	size_t len;
;;;382    
;;;383    	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_PSK, reqData, &len);
000012  466b              MOV      r3,sp
000014  4632              MOV      r2,r6
000016  212f              MOVS     r1,#0x2f
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       eap_hdr_validate
00001e  4680              MOV      r8,r0
;;;384    	if (pos == NULL) {
000020  f1b80f00          CMP      r8,#0
000024  d104              BNE      |L10.48|
;;;385    		ret->ignore = TRUE;
000026  2001              MOVS     r0,#1
000028  6020              STR      r0,[r4,#0]
;;;386    		return NULL;
00002a  2000              MOVS     r0,#0
                  |L10.44|
;;;387    	}
;;;388    
;;;389    	ret->ignore = FALSE;
;;;390    	ret->methodState = METHOD_MAY_CONT;
;;;391    	ret->decision = DECISION_FAIL;
;;;392    	ret->allowNotifications = TRUE;
;;;393    
;;;394    	switch (data->state) {
;;;395    	case PSK_INIT:
;;;396    		resp = eap_psk_process_1(data, ret, reqData);
;;;397    		break;
;;;398    	case PSK_MAC_SENT:
;;;399    		resp = eap_psk_process_3(data, ret, reqData);
;;;400    		break;
;;;401    	case PSK_DONE:
;;;402    		wpa_printf(MSG_DEBUG, "EAP-PSK: in DONE state - ignore "
;;;403    			   "unexpected message");
;;;404    		ret->ignore = TRUE;
;;;405    		return NULL;
;;;406    	}
;;;407    
;;;408    	if (ret->methodState == METHOD_DONE) {
;;;409    		ret->allowNotifications = FALSE;
;;;410    	}
;;;411    
;;;412    	return resp;
;;;413    }
00002c  e8bd8ff8          POP      {r3-r11,pc}
                  |L10.48|
000030  2000              MOVS     r0,#0                 ;389
000032  6020              STR      r0,[r4,#0]            ;389
000034  2003              MOVS     r0,#3                 ;390
000036  7120              STRB     r0,[r4,#4]            ;390
000038  2000              MOVS     r0,#0                 ;391
00003a  7160              STRB     r0,[r4,#5]            ;391
00003c  2001              MOVS     r0,#1                 ;392
00003e  60a0              STR      r0,[r4,#8]            ;392
000040  7838              LDRB     r0,[r7,#0]            ;394
000042  b120              CBZ      r0,|L10.78|
000044  2801              CMP      r0,#1                 ;394
000046  d009              BEQ      |L10.92|
000048  2802              CMP      r0,#2                 ;394
00004a  d116              BNE      |L10.122|
00004c  e00d              B        |L10.106|
                  |L10.78|
00004e  4632              MOV      r2,r6                 ;396
000050  4621              MOV      r1,r4                 ;396
000052  4638              MOV      r0,r7                 ;396
000054  f7fffffe          BL       eap_psk_process_1
000058  4681              MOV      r9,r0                 ;396
00005a  e00e              B        |L10.122|
                  |L10.92|
00005c  4632              MOV      r2,r6                 ;399
00005e  4621              MOV      r1,r4                 ;399
000060  4638              MOV      r0,r7                 ;399
000062  f7fffffe          BL       eap_psk_process_3
000066  4681              MOV      r9,r0                 ;399
000068  e007              B        |L10.122|
                  |L10.106|
00006a  a108              ADR      r1,|L10.140|
00006c  2000              MOVS     r0,#0                 ;402
00006e  f7fffffe          BL       wpa_printf
000072  2001              MOVS     r0,#1                 ;404
000074  6020              STR      r0,[r4,#0]            ;404
000076  2000              MOVS     r0,#0                 ;405
000078  e7d8              B        |L10.44|
                  |L10.122|
00007a  bf00              NOP                            ;397
00007c  7920              LDRB     r0,[r4,#4]            ;408
00007e  2804              CMP      r0,#4                 ;408
000080  d101              BNE      |L10.134|
000082  2000              MOVS     r0,#0                 ;409
000084  60a0              STR      r0,[r4,#8]            ;409
                  |L10.134|
000086  4648              MOV      r0,r9                 ;412
000088  e7d0              B        |L10.44|
;;;414    
                          ENDP

00008a  0000              DCW      0x0000
                  |L10.140|
00008c  4541502d          DCB      "EAP-PSK: in DONE state - ignore unexpected message",0
000090  50534b3a
000094  20696e20
000098  444f4e45
00009c  20737461
0000a0  7465202d
0000a4  2069676e
0000a8  6f726520
0000ac  756e6578
0000b0  70656374
0000b4  6564206d
0000b8  65737361
0000bc  676500  
0000bf  00                DCB      0

                          AREA ||i.eap_psk_process_1||, CODE, READONLY, ALIGN=2

                  eap_psk_process_1 PROC
;;;86     
;;;87     static struct wpabuf * eap_psk_process_1(struct eap_psk_data *data,
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;88     					 struct eap_method_ret *ret,
;;;89     					 const struct wpabuf *reqData)
;;;90     {
000004  b084              SUB      sp,sp,#0x10
000006  4604              MOV      r4,r0
000008  460f              MOV      r7,r1
;;;91     	const struct eap_psk_hdr_1 *hdr1;
;;;92     	struct eap_psk_hdr_2 *hdr2;
;;;93     	struct wpabuf *resp;
;;;94     	u8 *buf, *pos;
;;;95     	size_t buflen, len;
;;;96     	const u8 *cpos;
;;;97     
;;;98     	wpa_printf(MSG_DEBUG, "EAP-PSK: in INIT state");
00000a  a173              ADR      r1,|L11.472|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       wpa_printf
;;;99     
;;;100    	cpos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_PSK, reqData, &len);
000012  ab03              ADD      r3,sp,#0xc
000014  212f              MOVS     r1,#0x2f
000016  2000              MOVS     r0,#0
000018  9a06              LDR      r2,[sp,#0x18]
00001a  f7fffffe          BL       eap_hdr_validate
00001e  9002              STR      r0,[sp,#8]
;;;101    	hdr1 = (const struct eap_psk_hdr_1 *) cpos;
000020  9d02              LDR      r5,[sp,#8]
;;;102    	if (cpos == NULL || len < sizeof(*hdr1)) {
000022  9d02              LDR      r5,[sp,#8]
000024  b115              CBZ      r5,|L11.44|
000026  9803              LDR      r0,[sp,#0xc]
000028  2811              CMP      r0,#0x11
00002a  d20b              BCS      |L11.68|
                  |L11.44|
;;;103    		wpa_printf(MSG_INFO, "EAP-PSK: Invalid first message "
00002c  2311              MOVS     r3,#0x11
00002e  4970              LDR      r1,|L11.496|
000030  2000              MOVS     r0,#0
000032  9a03              LDR      r2,[sp,#0xc]
000034  f7fffffe          BL       wpa_printf
;;;104    			   "length (%lu; expected %lu or more)",
;;;105    			   (unsigned long) len,
;;;106    			   (unsigned long) sizeof(*hdr1));
;;;107    		ret->ignore = TRUE;
000038  2001              MOVS     r0,#1
00003a  6038              STR      r0,[r7,#0]
;;;108    		return NULL;
00003c  2000              MOVS     r0,#0
                  |L11.62|
;;;109    	}
;;;110    	wpa_printf(MSG_DEBUG, "EAP-PSK: Flags=0x%x", hdr1->flags);
;;;111    	if (EAP_PSK_FLAGS_GET_T(hdr1->flags) != 0) {
;;;112    		wpa_printf(MSG_INFO, "EAP-PSK: Unexpected T=%d (expected 0)",
;;;113    			   EAP_PSK_FLAGS_GET_T(hdr1->flags));
;;;114    		ret->methodState = METHOD_DONE;
;;;115    		ret->decision = DECISION_FAIL;
;;;116    		return NULL;
;;;117    	}
;;;118    	wpa_hexdump(MSG_DEBUG, "EAP-PSK: RAND_S", hdr1->rand_s,
;;;119    		    EAP_PSK_RAND_LEN);
;;;120    	os_free(data->id_s);
;;;121    	data->id_s_len = len - sizeof(*hdr1);
;;;122    	data->id_s = os_malloc(data->id_s_len);
;;;123    	if (data->id_s == NULL) {
;;;124    		wpa_printf(MSG_ERROR, "EAP-PSK: Failed to allocate memory for "
;;;125    			   "ID_S (len=%lu)", (unsigned long) data->id_s_len);
;;;126    		ret->ignore = TRUE;
;;;127    		return NULL;
;;;128    	}
;;;129    	os_memcpy(data->id_s, (u8 *) (hdr1 + 1), data->id_s_len);
;;;130    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-PSK: ID_S",
;;;131    			  data->id_s, data->id_s_len);
;;;132    
;;;133    	if (os_get_random(data->rand_p, EAP_PSK_RAND_LEN)) {
;;;134    		wpa_printf(MSG_ERROR, "EAP-PSK: Failed to get random data");
;;;135    		ret->ignore = TRUE;
;;;136    		return NULL;
;;;137    	}
;;;138    
;;;139    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_PSK,
;;;140    			     sizeof(*hdr2) + data->id_p_len, EAP_CODE_RESPONSE,
;;;141    			     eap_get_id(reqData));
;;;142    	if (resp == NULL)
;;;143    		return NULL;
;;;144    	hdr2 = wpabuf_put(resp, sizeof(*hdr2));
;;;145    	hdr2->flags = EAP_PSK_FLAGS_SET_T(1); /* T=1 */
;;;146    	os_memcpy(hdr2->rand_s, hdr1->rand_s, EAP_PSK_RAND_LEN);
;;;147    	os_memcpy(hdr2->rand_p, data->rand_p, EAP_PSK_RAND_LEN);
;;;148    	wpabuf_put_data(resp, data->id_p, data->id_p_len);
;;;149    	/* MAC_P = OMAC1-AES-128(AK, ID_P||ID_S||RAND_S||RAND_P) */
;;;150    	buflen = data->id_p_len + data->id_s_len + 2 * EAP_PSK_RAND_LEN;
;;;151    	buf = os_malloc(buflen);
;;;152    	if (buf == NULL) {
;;;153    		wpabuf_free(resp);
;;;154    		return NULL;
;;;155    	}
;;;156    	os_memcpy(buf, data->id_p, data->id_p_len);
;;;157    	pos = buf + data->id_p_len;
;;;158    	os_memcpy(pos, data->id_s, data->id_s_len);
;;;159    	pos += data->id_s_len;
;;;160    	os_memcpy(pos, hdr1->rand_s, EAP_PSK_RAND_LEN);
;;;161    	pos += EAP_PSK_RAND_LEN;
;;;162    	os_memcpy(pos, data->rand_p, EAP_PSK_RAND_LEN);
;;;163    	if (omac1_aes_128(data->ak, buf, buflen, hdr2->mac_p)) {
;;;164    		os_free(buf);
;;;165    		wpabuf_free(resp);
;;;166    		return NULL;
;;;167    	}
;;;168    	os_free(buf);
;;;169    	wpa_hexdump(MSG_DEBUG, "EAP-PSK: RAND_P", hdr2->rand_p,
;;;170    		    EAP_PSK_RAND_LEN);
;;;171    	wpa_hexdump(MSG_DEBUG, "EAP-PSK: MAC_P", hdr2->mac_p, EAP_PSK_MAC_LEN);
;;;172    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-PSK: ID_P",
;;;173    			  data->id_p, data->id_p_len);
;;;174    
;;;175    	data->state = PSK_MAC_SENT;
;;;176    
;;;177    	return resp;
;;;178    }
00003e  b007              ADD      sp,sp,#0x1c
000040  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.68|
000044  782a              LDRB     r2,[r5,#0]            ;110
000046  a16b              ADR      r1,|L11.500|
000048  2000              MOVS     r0,#0                 ;110
00004a  f7fffffe          BL       wpa_printf
00004e  7828              LDRB     r0,[r5,#0]            ;111
000050  0980              LSRS     r0,r0,#6              ;111
000052  d00a              BEQ      |L11.106|
000054  7828              LDRB     r0,[r5,#0]            ;112
000056  0982              LSRS     r2,r0,#6              ;112
000058  a16b              ADR      r1,|L11.520|
00005a  2000              MOVS     r0,#0                 ;112
00005c  f7fffffe          BL       wpa_printf
000060  2004              MOVS     r0,#4                 ;114
000062  7138              STRB     r0,[r7,#4]            ;114
000064  2000              MOVS     r0,#0                 ;115
000066  7178              STRB     r0,[r7,#5]            ;115
000068  e7e9              B        |L11.62|
                  |L11.106|
00006a  2310              MOVS     r3,#0x10              ;118
00006c  1c6a              ADDS     r2,r5,#1              ;118
00006e  a170              ADR      r1,|L11.560|
000070  2000              MOVS     r0,#0                 ;118
000072  f7fffffe          BL       wpa_hexdump
000076  6c60              LDR      r0,[r4,#0x44]         ;120
000078  f7fffffe          BL       os_free
00007c  9803              LDR      r0,[sp,#0xc]          ;121
00007e  3811              SUBS     r0,r0,#0x11           ;121
000080  64e0              STR      r0,[r4,#0x4c]         ;121
000082  6ce0              LDR      r0,[r4,#0x4c]         ;122
000084  f7fffffe          BL       os_malloc
000088  6460              STR      r0,[r4,#0x44]         ;122
00008a  6c60              LDR      r0,[r4,#0x44]         ;123
00008c  b940              CBNZ     r0,|L11.160|
00008e  a16c              ADR      r1,|L11.576|
000090  2000              MOVS     r0,#0                 ;124
000092  6ce2              LDR      r2,[r4,#0x4c]         ;124
000094  f7fffffe          BL       wpa_printf
000098  2001              MOVS     r0,#1                 ;126
00009a  6038              STR      r0,[r7,#0]            ;126
00009c  2000              MOVS     r0,#0                 ;127
00009e  e7ce              B        |L11.62|
                  |L11.160|
0000a0  f1050111          ADD      r1,r5,#0x11           ;129
0000a4  6ce2              LDR      r2,[r4,#0x4c]         ;129
0000a6  6c60              LDR      r0,[r4,#0x44]         ;129
0000a8  f7fffffe          BL       os_memcpy
0000ac  a172              ADR      r1,|L11.632|
0000ae  2000              MOVS     r0,#0                 ;130
0000b0  6ce3              LDR      r3,[r4,#0x4c]         ;130
0000b2  6c62              LDR      r2,[r4,#0x44]         ;130
0000b4  f7fffffe          BL       wpa_hexdump_ascii
0000b8  2110              MOVS     r1,#0x10              ;133
0000ba  1c60              ADDS     r0,r4,#1              ;133
0000bc  f7fffffe          BL       os_get_random
0000c0  b138              CBZ      r0,|L11.210|
0000c2  a171              ADR      r1,|L11.648|
0000c4  2000              MOVS     r0,#0                 ;134
0000c6  f7fffffe          BL       wpa_printf
0000ca  2001              MOVS     r0,#1                 ;135
0000cc  6038              STR      r0,[r7,#0]            ;135
0000ce  2000              MOVS     r0,#0                 ;136
0000d0  e7b5              B        |L11.62|
                  |L11.210|
0000d2  9806              LDR      r0,[sp,#0x18]         ;139
0000d4  f7fffffe          BL       eap_get_id
0000d8  9001              STR      r0,[sp,#4]            ;139
0000da  9000              STR      r0,[sp,#0]            ;139
0000dc  6d20              LDR      r0,[r4,#0x50]         ;139
0000de  f1000231          ADD      r2,r0,#0x31           ;139
0000e2  2302              MOVS     r3,#2                 ;139
0000e4  212f              MOVS     r1,#0x2f              ;139
0000e6  2000              MOVS     r0,#0                 ;139
0000e8  f7fffffe          BL       eap_msg_alloc
0000ec  4681              MOV      r9,r0                 ;139
0000ee  f1b90f00          CMP      r9,#0                 ;142
0000f2  d101              BNE      |L11.248|
0000f4  2000              MOVS     r0,#0                 ;143
0000f6  e7a2              B        |L11.62|
                  |L11.248|
0000f8  2131              MOVS     r1,#0x31              ;144
0000fa  4648              MOV      r0,r9                 ;144
0000fc  f7fffffe          BL       wpabuf_put
000100  4606              MOV      r6,r0                 ;144
000102  2040              MOVS     r0,#0x40              ;145
000104  7030              STRB     r0,[r6,#0]            ;145
000106  2210              MOVS     r2,#0x10              ;146
000108  1c69              ADDS     r1,r5,#1              ;146
00010a  1c70              ADDS     r0,r6,#1              ;146
00010c  f7fffffe          BL       os_memcpy
000110  2210              MOVS     r2,#0x10              ;147
000112  1c61              ADDS     r1,r4,#1              ;147
000114  f1060011          ADD      r0,r6,#0x11           ;147
000118  f7fffffe          BL       os_memcpy
00011c  4648              MOV      r0,r9                 ;148
00011e  6d22              LDR      r2,[r4,#0x50]         ;148
000120  6ca1              LDR      r1,[r4,#0x48]         ;148
000122  f7fffffe          BL       wpabuf_put_data
000126  e9d41013          LDRD     r1,r0,[r4,#0x4c]      ;150
00012a  4408              ADD      r0,r0,r1              ;150
00012c  f1000b20          ADD      r11,r0,#0x20          ;150
000130  4658              MOV      r0,r11                ;151
000132  f7fffffe          BL       os_malloc
000136  4680              MOV      r8,r0                 ;151
000138  f1b80f00          CMP      r8,#0                 ;152
00013c  d104              BNE      |L11.328|
00013e  4648              MOV      r0,r9                 ;153
000140  f7fffffe          BL       wpabuf_free
000144  2000              MOVS     r0,#0                 ;154
000146  e77a              B        |L11.62|
                  |L11.328|
000148  4640              MOV      r0,r8                 ;156
00014a  6d22              LDR      r2,[r4,#0x50]         ;156
00014c  6ca1              LDR      r1,[r4,#0x48]         ;156
00014e  f7fffffe          BL       os_memcpy
000152  6d20              LDR      r0,[r4,#0x50]         ;157
000154  eb000a08          ADD      r10,r0,r8             ;157
000158  4650              MOV      r0,r10                ;158
00015a  6ce2              LDR      r2,[r4,#0x4c]         ;158
00015c  6c61              LDR      r1,[r4,#0x44]         ;158
00015e  f7fffffe          BL       os_memcpy
000162  6ce0              LDR      r0,[r4,#0x4c]         ;159
000164  4482              ADD      r10,r10,r0            ;159
000166  2210              MOVS     r2,#0x10              ;160
000168  1c69              ADDS     r1,r5,#1              ;160
00016a  4650              MOV      r0,r10                ;160
00016c  f7fffffe          BL       os_memcpy
000170  f10a0a10          ADD      r10,r10,#0x10         ;161
000174  2210              MOVS     r2,#0x10              ;162
000176  1c61              ADDS     r1,r4,#1              ;162
000178  4650              MOV      r0,r10                ;162
00017a  f7fffffe          BL       os_memcpy
00017e  f1060321          ADD      r3,r6,#0x21           ;163
000182  465a              MOV      r2,r11                ;163
000184  4641              MOV      r1,r8                 ;163
000186  f1040011          ADD      r0,r4,#0x11           ;163
00018a  f7fffffe          BL       omac1_aes_128
00018e  b138              CBZ      r0,|L11.416|
000190  4640              MOV      r0,r8                 ;164
000192  f7fffffe          BL       os_free
000196  4648              MOV      r0,r9                 ;165
000198  f7fffffe          BL       wpabuf_free
00019c  2000              MOVS     r0,#0                 ;166
00019e  e74e              B        |L11.62|
                  |L11.416|
0001a0  4640              MOV      r0,r8                 ;168
0001a2  f7fffffe          BL       os_free
0001a6  2310              MOVS     r3,#0x10              ;169
0001a8  f1060211          ADD      r2,r6,#0x11           ;169
0001ac  a13f              ADR      r1,|L11.684|
0001ae  2000              MOVS     r0,#0                 ;169
0001b0  f7fffffe          BL       wpa_hexdump
0001b4  2310              MOVS     r3,#0x10              ;171
0001b6  f1060221          ADD      r2,r6,#0x21           ;171
0001ba  a140              ADR      r1,|L11.700|
0001bc  2000              MOVS     r0,#0                 ;171
0001be  f7fffffe          BL       wpa_hexdump
0001c2  a142              ADR      r1,|L11.716|
0001c4  2000              MOVS     r0,#0                 ;172
0001c6  6d23              LDR      r3,[r4,#0x50]         ;172
0001c8  6ca2              LDR      r2,[r4,#0x48]         ;172
0001ca  f7fffffe          BL       wpa_hexdump_ascii
0001ce  2001              MOVS     r0,#1                 ;175
0001d0  7020              STRB     r0,[r4,#0]            ;175
0001d2  4648              MOV      r0,r9                 ;177
0001d4  e733              B        |L11.62|
;;;179    
                          ENDP

0001d6  0000              DCW      0x0000
                  |L11.472|
0001d8  4541502d          DCB      "EAP-PSK: in INIT state",0
0001dc  50534b3a
0001e0  20696e20
0001e4  494e4954
0001e8  20737461
0001ec  746500  
0001ef  00                DCB      0
                  |L11.496|
                          DCD      ||.constdata||
                  |L11.500|
0001f4  4541502d          DCB      "EAP-PSK: Flags=0x%x",0
0001f8  50534b3a
0001fc  20466c61
000200  67733d30
000204  78257800
                  |L11.520|
000208  4541502d          DCB      "EAP-PSK: Unexpected T=%d (expected 0)",0
00020c  50534b3a
000210  20556e65
000214  78706563
000218  74656420
00021c  543d2564
000220  20286578
000224  70656374
000228  65642030
00022c  2900    
00022e  00                DCB      0
00022f  00                DCB      0
                  |L11.560|
000230  4541502d          DCB      "EAP-PSK: RAND_S",0
000234  50534b3a
000238  2052414e
00023c  445f5300
                  |L11.576|
000240  4541502d          DCB      "EAP-PSK: Failed to allocate memory for ID_S (len=%lu)",0
000244  50534b3a
000248  20466169
00024c  6c656420
000250  746f2061
000254  6c6c6f63
000258  61746520
00025c  6d656d6f
000260  72792066
000264  6f722049
000268  445f5320
00026c  286c656e
000270  3d256c75
000274  2900    
000276  00                DCB      0
000277  00                DCB      0
                  |L11.632|
000278  4541502d          DCB      "EAP-PSK: ID_S",0
00027c  50534b3a
000280  2049445f
000284  5300    
000286  00                DCB      0
000287  00                DCB      0
                  |L11.648|
000288  4541502d          DCB      "EAP-PSK: Failed to get random data",0
00028c  50534b3a
000290  20466169
000294  6c656420
000298  746f2067
00029c  65742072
0002a0  616e646f
0002a4  6d206461
0002a8  746100  
0002ab  00                DCB      0
                  |L11.684|
0002ac  4541502d          DCB      "EAP-PSK: RAND_P",0
0002b0  50534b3a
0002b4  2052414e
0002b8  445f5000
                  |L11.700|
0002bc  4541502d          DCB      "EAP-PSK: MAC_P",0
0002c0  50534b3a
0002c4  204d4143
0002c8  5f5000  
0002cb  00                DCB      0
                  |L11.716|
0002cc  4541502d          DCB      "EAP-PSK: ID_P",0
0002d0  50534b3a
0002d4  2049445f
0002d8  5000    
0002da  00                DCB      0
0002db  00                DCB      0

                          AREA ||i.eap_psk_process_3||, CODE, READONLY, ALIGN=2

                  eap_psk_process_3 PROC
;;;180    
;;;181    static struct wpabuf * eap_psk_process_3(struct eap_psk_data *data,
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;182    					 struct eap_method_ret *ret,
;;;183    					 const struct wpabuf *reqData)
;;;184    {
000004  b098              SUB      sp,sp,#0x60
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;185    	const struct eap_psk_hdr_3 *hdr3;
;;;186    	struct eap_psk_hdr_4 *hdr4;
;;;187    	struct wpabuf *resp;
;;;188    	u8 *buf, *rpchannel, nonce[16], *decrypted;
;;;189    	const u8 *pchannel, *tag, *msg;
;;;190    	u8 mac[EAP_PSK_MAC_LEN];
;;;191    	size_t buflen, left, data_len, len, plen;
;;;192    	int failed = 0;
00000a  2000              MOVS     r0,#0
00000c  9007              STR      r0,[sp,#0x1c]
;;;193    	const u8 *pos;
;;;194    
;;;195    	wpa_printf(MSG_DEBUG, "EAP-PSK: in MAC_SENT state");
00000e  a1e8              ADR      r1,|L12.944|
000010  f7fffffe          BL       wpa_printf
;;;196    
;;;197    	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_PSK,
000014  ab09              ADD      r3,sp,#0x24
000016  212f              MOVS     r1,#0x2f
000018  2000              MOVS     r0,#0
00001a  9a1a              LDR      r2,[sp,#0x68]
00001c  f7fffffe          BL       eap_hdr_validate
000020  9006              STR      r0,[sp,#0x18]
;;;198    			       reqData, &len);
;;;199    	hdr3 = (const struct eap_psk_hdr_3 *) pos;
000022  9f06              LDR      r7,[sp,#0x18]
;;;200    	if (pos == NULL || len < sizeof(*hdr3)) {
000024  9f06              LDR      r7,[sp,#0x18]
000026  b117              CBZ      r7,|L12.46|
000028  9809              LDR      r0,[sp,#0x24]
00002a  2821              CMP      r0,#0x21
00002c  d20b              BCS      |L12.70|
                  |L12.46|
;;;201    		wpa_printf(MSG_INFO, "EAP-PSK: Invalid third message "
00002e  2321              MOVS     r3,#0x21
000030  49e6              LDR      r1,|L12.972|
000032  2000              MOVS     r0,#0
000034  9a09              LDR      r2,[sp,#0x24]
000036  f7fffffe          BL       wpa_printf
;;;202    			   "length (%lu; expected %lu or more)",
;;;203    			   (unsigned long) len,
;;;204    			   (unsigned long) sizeof(*hdr3));
;;;205    		ret->ignore = TRUE;
00003a  2001              MOVS     r0,#1
00003c  6028              STR      r0,[r5,#0]
;;;206    		return NULL;
00003e  2000              MOVS     r0,#0
                  |L12.64|
;;;207    	}
;;;208    	left = len - sizeof(*hdr3);
;;;209    	pchannel = (const u8 *) (hdr3 + 1);
;;;210    	wpa_printf(MSG_DEBUG, "EAP-PSK: Flags=0x%x", hdr3->flags);
;;;211    	if (EAP_PSK_FLAGS_GET_T(hdr3->flags) != 2) {
;;;212    		wpa_printf(MSG_INFO, "EAP-PSK: Unexpected T=%d (expected 2)",
;;;213    			   EAP_PSK_FLAGS_GET_T(hdr3->flags));
;;;214    		ret->methodState = METHOD_DONE;
;;;215    		ret->decision = DECISION_FAIL;
;;;216    		return NULL;
;;;217    	}
;;;218    	wpa_hexdump(MSG_DEBUG, "EAP-PSK: RAND_S", hdr3->rand_s,
;;;219    		    EAP_PSK_RAND_LEN);
;;;220    	wpa_hexdump(MSG_DEBUG, "EAP-PSK: MAC_S", hdr3->mac_s, EAP_PSK_MAC_LEN);
;;;221    	wpa_hexdump(MSG_DEBUG, "EAP-PSK: PCHANNEL", pchannel, left);
;;;222    
;;;223    	if (left < 4 + 16 + 1) {
;;;224    		wpa_printf(MSG_INFO, "EAP-PSK: Too short PCHANNEL data in "
;;;225    			   "third message (len=%lu, expected 21)",
;;;226    			   (unsigned long) left);
;;;227    		ret->ignore = TRUE;
;;;228    		return NULL;
;;;229    	}
;;;230    
;;;231    	/* MAC_S = OMAC1-AES-128(AK, ID_S||RAND_P) */
;;;232    	buflen = data->id_s_len + EAP_PSK_RAND_LEN;
;;;233    	buf = os_malloc(buflen);
;;;234    	if (buf == NULL)
;;;235    		return NULL;
;;;236    	os_memcpy(buf, data->id_s, data->id_s_len);
;;;237    	os_memcpy(buf + data->id_s_len, data->rand_p, EAP_PSK_RAND_LEN);
;;;238    	if (omac1_aes_128(data->ak, buf, buflen, mac)) {
;;;239    		os_free(buf);
;;;240    		return NULL;
;;;241    	}
;;;242    	os_free(buf);
;;;243    	if (os_memcmp(mac, hdr3->mac_s, EAP_PSK_MAC_LEN) != 0) {
;;;244    		wpa_printf(MSG_WARNING, "EAP-PSK: Invalid MAC_S in third "
;;;245    			   "message");
;;;246    		ret->methodState = METHOD_DONE;
;;;247    		ret->decision = DECISION_FAIL;
;;;248    		return NULL;
;;;249    	}
;;;250    	wpa_printf(MSG_DEBUG, "EAP-PSK: MAC_S verified successfully");
;;;251    
;;;252    	if (eap_psk_derive_keys(data->kdk, data->rand_p, data->tek,
;;;253    				data->msk, data->emsk)) {
;;;254    		ret->methodState = METHOD_DONE;
;;;255    		ret->decision = DECISION_FAIL;
;;;256    		return NULL;
;;;257    	}
;;;258    	wpa_hexdump_key(MSG_DEBUG, "EAP-PSK: TEK", data->tek, EAP_PSK_TEK_LEN);
;;;259    	wpa_hexdump_key(MSG_DEBUG, "EAP-PSK: MSK", data->msk, EAP_MSK_LEN);
;;;260    	wpa_hexdump_key(MSG_DEBUG, "EAP-PSK: EMSK", data->emsk, EAP_EMSK_LEN);
;;;261    
;;;262    	os_memset(nonce, 0, 12);
;;;263    	os_memcpy(nonce + 12, pchannel, 4);
;;;264    	pchannel += 4;
;;;265    	left -= 4;
;;;266    
;;;267    	tag = pchannel;
;;;268    	pchannel += 16;
;;;269    	left -= 16;
;;;270    
;;;271    	msg = pchannel;
;;;272    
;;;273    	wpa_hexdump(MSG_MSGDUMP, "EAP-PSK: PCHANNEL - nonce",
;;;274    		    nonce, sizeof(nonce));
;;;275    	wpa_hexdump(MSG_MSGDUMP, "EAP-PSK: PCHANNEL - hdr",
;;;276    		    wpabuf_head(reqData), 5);
;;;277    	wpa_hexdump(MSG_MSGDUMP, "EAP-PSK: PCHANNEL - cipher msg", msg, left);
;;;278    
;;;279    	decrypted = os_malloc(left);
;;;280    	if (decrypted == NULL) {
;;;281    		ret->methodState = METHOD_DONE;
;;;282    		ret->decision = DECISION_FAIL;
;;;283    		return NULL;
;;;284    	}
;;;285    	os_memcpy(decrypted, msg, left);
;;;286    
;;;287    	if (aes_128_eax_decrypt(data->tek, nonce, sizeof(nonce),
;;;288    				wpabuf_head(reqData),
;;;289    				sizeof(struct eap_hdr) + 1 +
;;;290    				sizeof(*hdr3) - EAP_PSK_MAC_LEN, decrypted,
;;;291    				left, tag)) {
;;;292    		wpa_printf(MSG_WARNING, "EAP-PSK: PCHANNEL decryption failed");
;;;293    		os_free(decrypted);
;;;294    		return NULL;
;;;295    	}
;;;296    	wpa_hexdump(MSG_DEBUG, "EAP-PSK: Decrypted PCHANNEL message",
;;;297    		    decrypted, left);
;;;298    
;;;299    	/* Verify R flag */
;;;300    	switch (decrypted[0] >> 6) {
;;;301    	case EAP_PSK_R_FLAG_CONT:
;;;302    		wpa_printf(MSG_DEBUG, "EAP-PSK: R flag - CONT - unsupported");
;;;303    		failed = 1;
;;;304    		break;
;;;305    	case EAP_PSK_R_FLAG_DONE_SUCCESS:
;;;306    		wpa_printf(MSG_DEBUG, "EAP-PSK: R flag - DONE_SUCCESS");
;;;307    		break;
;;;308    	case EAP_PSK_R_FLAG_DONE_FAILURE:
;;;309    		wpa_printf(MSG_DEBUG, "EAP-PSK: R flag - DONE_FAILURE");
;;;310    		wpa_printf(MSG_INFO, "EAP-PSK: Authentication server rejected "
;;;311    			   "authentication");
;;;312    		failed = 1;
;;;313    		break;
;;;314    	}
;;;315    
;;;316    	data_len = 1;
;;;317    	if ((decrypted[0] & EAP_PSK_E_FLAG) && left > 1)
;;;318    		data_len++;
;;;319    	plen = sizeof(*hdr4) + 4 + 16 + data_len;
;;;320    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_PSK, plen,
;;;321    			     EAP_CODE_RESPONSE, eap_get_id(reqData));
;;;322    	if (resp == NULL) {
;;;323    		os_free(decrypted);
;;;324    		return NULL;
;;;325    	}
;;;326    	hdr4 = wpabuf_put(resp, sizeof(*hdr4));
;;;327    	hdr4->flags = EAP_PSK_FLAGS_SET_T(3); /* T=3 */
;;;328    	os_memcpy(hdr4->rand_s, hdr3->rand_s, EAP_PSK_RAND_LEN);
;;;329    	rpchannel = wpabuf_put(resp, 4 + 16 + data_len);
;;;330    
;;;331    	/* nonce++ */
;;;332    	inc_byte_array(nonce, sizeof(nonce));
;;;333    	os_memcpy(rpchannel, nonce + 12, 4);
;;;334    
;;;335    	if (decrypted[0] & EAP_PSK_E_FLAG) {
;;;336    		wpa_printf(MSG_DEBUG, "EAP-PSK: Unsupported E (Ext) flag");
;;;337    		failed = 1;
;;;338    		rpchannel[4 + 16] = (EAP_PSK_R_FLAG_DONE_FAILURE << 6) |
;;;339    			EAP_PSK_E_FLAG;
;;;340    		if (left > 1) {
;;;341    			/* Add empty EXT_Payload with same EXT_Type */
;;;342    			rpchannel[4 + 16 + 1] = decrypted[1];
;;;343    		}
;;;344    	} else if (failed)
;;;345    		rpchannel[4 + 16] = EAP_PSK_R_FLAG_DONE_FAILURE << 6;
;;;346    	else
;;;347    		rpchannel[4 + 16] = EAP_PSK_R_FLAG_DONE_SUCCESS << 6;
;;;348    
;;;349    	wpa_hexdump(MSG_DEBUG, "EAP-PSK: reply message (plaintext)",
;;;350    		    rpchannel + 4 + 16, data_len);
;;;351    	if (aes_128_eax_encrypt(data->tek, nonce, sizeof(nonce),
;;;352    				wpabuf_head(resp),
;;;353    				sizeof(struct eap_hdr) + 1 + sizeof(*hdr4),
;;;354    				rpchannel + 4 + 16, data_len, rpchannel + 4)) {
;;;355    		os_free(decrypted);
;;;356    		wpabuf_free(resp);
;;;357    		return NULL;
;;;358    	}
;;;359    	wpa_hexdump(MSG_DEBUG, "EAP-PSK: reply message (PCHANNEL)",
;;;360    		    rpchannel, 4 + 16 + data_len);
;;;361    
;;;362    	wpa_printf(MSG_DEBUG, "EAP-PSK: Completed %ssuccessfully",
;;;363    		   failed ? "un" : "");
;;;364    	data->state = PSK_DONE;
;;;365    	ret->methodState = METHOD_DONE;
;;;366    	ret->decision = failed ? DECISION_FAIL : DECISION_UNCOND_SUCC;
;;;367    
;;;368    	os_free(decrypted);
;;;369    
;;;370    	return resp;
;;;371    }
000040  b01b              ADD      sp,sp,#0x6c
000042  e8bd8ff0          POP      {r4-r11,pc}
                  |L12.70|
000046  9809              LDR      r0,[sp,#0x24]         ;208
000048  f1a00921          SUB      r9,r0,#0x21           ;208
00004c  f1070a21          ADD      r10,r7,#0x21          ;209
000050  783a              LDRB     r2,[r7,#0]            ;210
000052  a1df              ADR      r1,|L12.976|
000054  2000              MOVS     r0,#0                 ;210
000056  f7fffffe          BL       wpa_printf
00005a  7838              LDRB     r0,[r7,#0]            ;211
00005c  0980              LSRS     r0,r0,#6              ;211
00005e  2802              CMP      r0,#2                 ;211
000060  d00a              BEQ      |L12.120|
000062  7838              LDRB     r0,[r7,#0]            ;212
000064  0982              LSRS     r2,r0,#6              ;212
000066  a1df              ADR      r1,|L12.996|
000068  2000              MOVS     r0,#0                 ;212
00006a  f7fffffe          BL       wpa_printf
00006e  2004              MOVS     r0,#4                 ;214
000070  7128              STRB     r0,[r5,#4]            ;214
000072  2000              MOVS     r0,#0                 ;215
000074  7168              STRB     r0,[r5,#5]            ;215
000076  e7e3              B        |L12.64|
                  |L12.120|
000078  2310              MOVS     r3,#0x10              ;218
00007a  1c7a              ADDS     r2,r7,#1              ;218
00007c  a1e3              ADR      r1,|L12.1036|
00007e  2000              MOVS     r0,#0                 ;218
000080  f7fffffe          BL       wpa_hexdump
000084  2310              MOVS     r3,#0x10              ;220
000086  f1070211          ADD      r2,r7,#0x11           ;220
00008a  a1e4              ADR      r1,|L12.1052|
00008c  2000              MOVS     r0,#0                 ;220
00008e  f7fffffe          BL       wpa_hexdump
000092  464b              MOV      r3,r9                 ;221
000094  4652              MOV      r2,r10                ;221
000096  a1e5              ADR      r1,|L12.1068|
000098  2000              MOVS     r0,#0                 ;221
00009a  f7fffffe          BL       wpa_hexdump
00009e  f1b90f15          CMP      r9,#0x15              ;223
0000a2  d209              BCS      |L12.184|
0000a4  464a              MOV      r2,r9                 ;224
0000a6  49c9              LDR      r1,|L12.972|
0000a8  3144              ADDS     r1,r1,#0x44           ;224
0000aa  2000              MOVS     r0,#0                 ;224
0000ac  f7fffffe          BL       wpa_printf
0000b0  2001              MOVS     r0,#1                 ;227
0000b2  6028              STR      r0,[r5,#0]            ;227
0000b4  2000              MOVS     r0,#0                 ;228
0000b6  e7c3              B        |L12.64|
                  |L12.184|
0000b8  6ce0              LDR      r0,[r4,#0x4c]         ;232
0000ba  3010              ADDS     r0,r0,#0x10           ;232
0000bc  900a              STR      r0,[sp,#0x28]         ;232
0000be  980a              LDR      r0,[sp,#0x28]         ;233
0000c0  f7fffffe          BL       os_malloc
0000c4  9015              STR      r0,[sp,#0x54]         ;233
0000c6  9815              LDR      r0,[sp,#0x54]         ;234
0000c8  b908              CBNZ     r0,|L12.206|
0000ca  2000              MOVS     r0,#0                 ;235
0000cc  e7b8              B        |L12.64|
                  |L12.206|
0000ce  6ce2              LDR      r2,[r4,#0x4c]         ;236
0000d0  6c61              LDR      r1,[r4,#0x44]         ;236
0000d2  9815              LDR      r0,[sp,#0x54]         ;236
0000d4  f7fffffe          BL       os_memcpy
0000d8  6ce2              LDR      r2,[r4,#0x4c]         ;237
0000da  9915              LDR      r1,[sp,#0x54]         ;237
0000dc  1850              ADDS     r0,r2,r1              ;237
0000de  2210              MOVS     r2,#0x10              ;237
0000e0  1c61              ADDS     r1,r4,#1              ;237
0000e2  f7fffffe          BL       os_memcpy
0000e6  ab0b              ADD      r3,sp,#0x2c           ;238
0000e8  f1040011          ADD      r0,r4,#0x11           ;238
0000ec  9a0a              LDR      r2,[sp,#0x28]         ;238
0000ee  9915              LDR      r1,[sp,#0x54]         ;238
0000f0  f7fffffe          BL       omac1_aes_128
0000f4  b120              CBZ      r0,|L12.256|
0000f6  9815              LDR      r0,[sp,#0x54]         ;239
0000f8  f7fffffe          BL       os_free
0000fc  2000              MOVS     r0,#0                 ;240
0000fe  e79f              B        |L12.64|
                  |L12.256|
000100  9815              LDR      r0,[sp,#0x54]         ;242
000102  f7fffffe          BL       os_free
000106  2210              MOVS     r2,#0x10              ;243
000108  f1070111          ADD      r1,r7,#0x11           ;243
00010c  a80b              ADD      r0,sp,#0x2c           ;243
00010e  f7fffffe          BL       os_memcmp
000112  b140              CBZ      r0,|L12.294|
000114  a1ca              ADR      r1,|L12.1088|
000116  2000              MOVS     r0,#0                 ;244
000118  f7fffffe          BL       wpa_printf
00011c  2004              MOVS     r0,#4                 ;246
00011e  7128              STRB     r0,[r5,#4]            ;246
000120  2000              MOVS     r0,#0                 ;247
000122  7168              STRB     r0,[r5,#5]            ;247
000124  e78c              B        |L12.64|
                  |L12.294|
000126  a1d0              ADR      r1,|L12.1128|
000128  2000              MOVS     r0,#0                 ;250
00012a  f7fffffe          BL       wpa_printf
00012e  f1040394          ADD      r3,r4,#0x94           ;252
000132  9300              STR      r3,[sp,#0]            ;252
000134  3b40              SUBS     r3,r3,#0x40           ;252
000136  f1040231          ADD      r2,r4,#0x31           ;252
00013a  1c61              ADDS     r1,r4,#1              ;252
00013c  f1040021          ADD      r0,r4,#0x21           ;252
000140  f7fffffe          BL       eap_psk_derive_keys
000144  b120              CBZ      r0,|L12.336|
000146  2004              MOVS     r0,#4                 ;254
000148  7128              STRB     r0,[r5,#4]            ;254
00014a  2000              MOVS     r0,#0                 ;255
00014c  7168              STRB     r0,[r5,#5]            ;255
00014e  e777              B        |L12.64|
                  |L12.336|
000150  2310              MOVS     r3,#0x10              ;258
000152  f1040231          ADD      r2,r4,#0x31           ;258
000156  a1ce              ADR      r1,|L12.1168|
000158  2000              MOVS     r0,#0                 ;258
00015a  f7fffffe          BL       wpa_hexdump_key
00015e  2340              MOVS     r3,#0x40              ;259
000160  f1040254          ADD      r2,r4,#0x54           ;259
000164  a1ce              ADR      r1,|L12.1184|
000166  2000              MOVS     r0,#0                 ;259
000168  f7fffffe          BL       wpa_hexdump_key
00016c  2340              MOVS     r3,#0x40              ;260
00016e  f1040294          ADD      r2,r4,#0x94           ;260
000172  a1cf              ADR      r1,|L12.1200|
000174  2000              MOVS     r0,#0                 ;260
000176  f7fffffe          BL       wpa_hexdump_key
00017a  220c              MOVS     r2,#0xc               ;262
00017c  2100              MOVS     r1,#0                 ;262
00017e  a811              ADD      r0,sp,#0x44           ;262
000180  f7fffffe          BL       os_memset
000184  2204              MOVS     r2,#4                 ;263
000186  4651              MOV      r1,r10                ;263
000188  a814              ADD      r0,sp,#0x50           ;263
00018a  f7fffffe          BL       os_memcpy
00018e  f10a0a04          ADD      r10,r10,#4            ;264
000192  f1a90904          SUB      r9,r9,#4              ;265
000196  f8cda040          STR      r10,[sp,#0x40]        ;267
00019a  f10a0a10          ADD      r10,r10,#0x10         ;268
00019e  f1a90910          SUB      r9,r9,#0x10           ;269
0001a2  f8cda03c          STR      r10,[sp,#0x3c]        ;271
0001a6  2310              MOVS     r3,#0x10              ;273
0001a8  aa11              ADD      r2,sp,#0x44           ;273
0001aa  a1c5              ADR      r1,|L12.1216|
0001ac  2000              MOVS     r0,#0                 ;273
0001ae  f7fffffe          BL       wpa_hexdump
0001b2  981a              LDR      r0,[sp,#0x68]         ;275
0001b4  f7fffffe          BL       wpabuf_head
0001b8  2305              MOVS     r3,#5                 ;275
0001ba  4602              MOV      r2,r0                 ;275
0001bc  a1c7              ADR      r1,|L12.1244|
0001be  9005              STR      r0,[sp,#0x14]         ;275
0001c0  2000              MOVS     r0,#0                 ;275
0001c2  f7fffffe          BL       wpa_hexdump
0001c6  464b              MOV      r3,r9                 ;277
0001c8  a1ca              ADR      r1,|L12.1268|
0001ca  2000              MOVS     r0,#0                 ;277
0001cc  9a0f              LDR      r2,[sp,#0x3c]         ;277
0001ce  f7fffffe          BL       wpa_hexdump
0001d2  4648              MOV      r0,r9                 ;279
0001d4  f7fffffe          BL       os_malloc
0001d8  4680              MOV      r8,r0                 ;279
0001da  f1b80f00          CMP      r8,#0                 ;280
0001de  d104              BNE      |L12.490|
0001e0  2004              MOVS     r0,#4                 ;281
0001e2  7128              STRB     r0,[r5,#4]            ;281
0001e4  2000              MOVS     r0,#0                 ;282
0001e6  7168              STRB     r0,[r5,#5]            ;282
0001e8  e72a              B        |L12.64|
                  |L12.490|
0001ea  464a              MOV      r2,r9                 ;285
0001ec  4640              MOV      r0,r8                 ;285
0001ee  990f              LDR      r1,[sp,#0x3c]         ;285
0001f0  f7fffffe          BL       os_memcpy
0001f4  981a              LDR      r0,[sp,#0x68]         ;287
0001f6  f7fffffe          BL       wpabuf_head
0001fa  9005              STR      r0,[sp,#0x14]         ;287
0001fc  2016              MOVS     r0,#0x16              ;287
0001fe  9b10              LDR      r3,[sp,#0x40]         ;287
000200  e88d0301          STM      sp,{r0,r8,r9}         ;287
000204  9303              STR      r3,[sp,#0xc]          ;287
000206  2210              MOVS     r2,#0x10              ;287
000208  a911              ADD      r1,sp,#0x44           ;287
00020a  f1040031          ADD      r0,r4,#0x31           ;287
00020e  9b05              LDR      r3,[sp,#0x14]         ;287
000210  f7fffffe          BL       aes_128_eax_decrypt
000214  b140              CBZ      r0,|L12.552|
000216  a1bf              ADR      r1,|L12.1300|
000218  2000              MOVS     r0,#0                 ;292
00021a  f7fffffe          BL       wpa_printf
00021e  4640              MOV      r0,r8                 ;293
000220  f7fffffe          BL       os_free
000224  2000              MOVS     r0,#0                 ;294
000226  e70b              B        |L12.64|
                  |L12.552|
000228  464b              MOV      r3,r9                 ;296
00022a  4642              MOV      r2,r8                 ;296
00022c  a1c2              ADR      r1,|L12.1336|
00022e  2000              MOVS     r0,#0                 ;296
000230  f7fffffe          BL       wpa_hexdump
000234  f8980000          LDRB     r0,[r8,#0]            ;300
000238  1180              ASRS     r0,r0,#6              ;300
00023a  2801              CMP      r0,#1                 ;300
00023c  d004              BEQ      |L12.584|
00023e  2802              CMP      r0,#2                 ;300
000240  d009              BEQ      |L12.598|
000242  2803              CMP      r0,#3                 ;300
000244  d117              BNE      |L12.630|
000246  e00b              B        |L12.608|
                  |L12.584|
000248  a1c4              ADR      r1,|L12.1372|
00024a  2000              MOVS     r0,#0                 ;302
00024c  f7fffffe          BL       wpa_printf
000250  2001              MOVS     r0,#1                 ;303
000252  9007              STR      r0,[sp,#0x1c]         ;303
000254  e00f              B        |L12.630|
                  |L12.598|
000256  a1cb              ADR      r1,|L12.1412|
000258  2000              MOVS     r0,#0                 ;306
00025a  f7fffffe          BL       wpa_printf
00025e  e00a              B        |L12.630|
                  |L12.608|
000260  a1d0              ADR      r1,|L12.1444|
000262  2000              MOVS     r0,#0                 ;309
000264  f7fffffe          BL       wpa_printf
000268  a1d6              ADR      r1,|L12.1476|
00026a  2000              MOVS     r0,#0                 ;310
00026c  f7fffffe          BL       wpa_printf
000270  2001              MOVS     r0,#1                 ;312
000272  9007              STR      r0,[sp,#0x1c]         ;312
000274  bf00              NOP                            ;313
                  |L12.630|
000276  bf00              NOP                            ;304
000278  f04f0b01          MOV      r11,#1                ;316
00027c  f8980000          LDRB     r0,[r8,#0]            ;317
000280  f0100f20          TST      r0,#0x20              ;317
000284  d004              BEQ      |L12.656|
000286  f1b90f01          CMP      r9,#1                 ;317
00028a  d901              BLS      |L12.656|
00028c  f10b0b01          ADD      r11,r11,#1            ;318
                  |L12.656|
000290  f10b0025          ADD      r0,r11,#0x25          ;319
000294  9008              STR      r0,[sp,#0x20]         ;319
000296  981a              LDR      r0,[sp,#0x68]         ;320
000298  f7fffffe          BL       eap_get_id
00029c  9005              STR      r0,[sp,#0x14]         ;320
00029e  2302              MOVS     r3,#2                 ;320
0002a0  9000              STR      r0,[sp,#0]            ;320
0002a2  212f              MOVS     r1,#0x2f              ;320
0002a4  2000              MOVS     r0,#0                 ;320
0002a6  9a08              LDR      r2,[sp,#0x20]         ;320
0002a8  f7fffffe          BL       eap_msg_alloc
0002ac  9016              STR      r0,[sp,#0x58]         ;320
0002ae  9816              LDR      r0,[sp,#0x58]         ;322
0002b0  b920              CBNZ     r0,|L12.700|
0002b2  4640              MOV      r0,r8                 ;323
0002b4  f7fffffe          BL       os_free
0002b8  2000              MOVS     r0,#0                 ;324
0002ba  e6c1              B        |L12.64|
                  |L12.700|
0002bc  2111              MOVS     r1,#0x11              ;326
0002be  9816              LDR      r0,[sp,#0x58]         ;326
0002c0  f7fffffe          BL       wpabuf_put
0002c4  9017              STR      r0,[sp,#0x5c]         ;326
0002c6  21c0              MOVS     r1,#0xc0              ;327
0002c8  9817              LDR      r0,[sp,#0x5c]         ;327
0002ca  7001              STRB     r1,[r0,#0]            ;327
0002cc  2210              MOVS     r2,#0x10              ;328
0002ce  1c79              ADDS     r1,r7,#1              ;328
0002d0  9817              LDR      r0,[sp,#0x5c]         ;328
0002d2  1c40              ADDS     r0,r0,#1              ;328
0002d4  f7fffffe          BL       os_memcpy
0002d8  f10b0114          ADD      r1,r11,#0x14          ;329
0002dc  9816              LDR      r0,[sp,#0x58]         ;329
0002de  f7fffffe          BL       wpabuf_put
0002e2  4606              MOV      r6,r0                 ;329
0002e4  2110              MOVS     r1,#0x10              ;332
0002e6  a811              ADD      r0,sp,#0x44           ;332
0002e8  f7fffffe          BL       inc_byte_array
0002ec  2204              MOVS     r2,#4                 ;333
0002ee  a914              ADD      r1,sp,#0x50           ;333
0002f0  4630              MOV      r0,r6                 ;333
0002f2  f7fffffe          BL       os_memcpy
0002f6  f8980000          LDRB     r0,[r8,#0]            ;335
0002fa  f0100f20          TST      r0,#0x20              ;335
0002fe  d00e              BEQ      |L12.798|
000300  a1be              ADR      r1,|L12.1532|
000302  2000              MOVS     r0,#0                 ;336
000304  f7fffffe          BL       wpa_printf
000308  2001              MOVS     r0,#1                 ;337
00030a  9007              STR      r0,[sp,#0x1c]         ;337
00030c  20e0              MOVS     r0,#0xe0              ;338
00030e  7530              STRB     r0,[r6,#0x14]         ;338
000310  f1b90f01          CMP      r9,#1                 ;340
000314  d90a              BLS      |L12.812|
000316  f8980001          LDRB     r0,[r8,#1]            ;342
00031a  7570              STRB     r0,[r6,#0x15]         ;342
00031c  e006              B        |L12.812|
                  |L12.798|
00031e  9807              LDR      r0,[sp,#0x1c]         ;344
000320  b110              CBZ      r0,|L12.808|
000322  20c0              MOVS     r0,#0xc0              ;345
000324  7530              STRB     r0,[r6,#0x14]         ;345
000326  e001              B        |L12.812|
                  |L12.808|
000328  2080              MOVS     r0,#0x80              ;347
00032a  7530              STRB     r0,[r6,#0x14]         ;347
                  |L12.812|
00032c  465b              MOV      r3,r11                ;349
00032e  f1060214          ADD      r2,r6,#0x14           ;349
000332  a1bb              ADR      r1,|L12.1568|
000334  2000              MOVS     r0,#0                 ;349
000336  f7fffffe          BL       wpa_hexdump
00033a  9816              LDR      r0,[sp,#0x58]         ;351
00033c  f7fffffe          BL       wpabuf_head
000340  1d33              ADDS     r3,r6,#4              ;351
000342  f1060114          ADD      r1,r6,#0x14           ;351
000346  9005              STR      r0,[sp,#0x14]         ;351
000348  2016              MOVS     r0,#0x16              ;351
00034a  e88d0803          STM      sp,{r0,r1,r11}        ;351
00034e  9303              STR      r3,[sp,#0xc]          ;351
000350  2210              MOVS     r2,#0x10              ;351
000352  a911              ADD      r1,sp,#0x44           ;351
000354  f1040031          ADD      r0,r4,#0x31           ;351
000358  9b05              LDR      r3,[sp,#0x14]         ;351
00035a  f7fffffe          BL       aes_128_eax_encrypt
00035e  b138              CBZ      r0,|L12.880|
000360  4640              MOV      r0,r8                 ;355
000362  f7fffffe          BL       os_free
000366  9816              LDR      r0,[sp,#0x58]         ;356
000368  f7fffffe          BL       wpabuf_free
00036c  2000              MOVS     r0,#0                 ;357
00036e  e667              B        |L12.64|
                  |L12.880|
000370  f10b0314          ADD      r3,r11,#0x14          ;359
000374  4632              MOV      r2,r6                 ;359
000376  a1b3              ADR      r1,|L12.1604|
000378  2000              MOVS     r0,#0                 ;359
00037a  f7fffffe          BL       wpa_hexdump
00037e  9807              LDR      r0,[sp,#0x1c]         ;362
000380  b108              CBZ      r0,|L12.902|
000382  a0b9              ADR      r0,|L12.1640|
000384  e000              B        |L12.904|
                  |L12.902|
000386  a041              ADR      r0,|L12.1164|
                  |L12.904|
000388  4602              MOV      r2,r0                 ;363
00038a  a1b8              ADR      r1,|L12.1644|
00038c  2000              MOVS     r0,#0                 ;363
00038e  f7fffffe          BL       wpa_printf
000392  2002              MOVS     r0,#2                 ;364
000394  7020              STRB     r0,[r4,#0]            ;364
000396  2004              MOVS     r0,#4                 ;365
000398  7128              STRB     r0,[r5,#4]            ;365
00039a  9807              LDR      r0,[sp,#0x1c]         ;366
00039c  b108              CBZ      r0,|L12.930|
00039e  2000              MOVS     r0,#0                 ;366
0003a0  e000              B        |L12.932|
                  |L12.930|
0003a2  2002              MOVS     r0,#2                 ;366
                  |L12.932|
0003a4  7168              STRB     r0,[r5,#5]            ;366
0003a6  4640              MOV      r0,r8                 ;368
0003a8  f7fffffe          BL       os_free
0003ac  9816              LDR      r0,[sp,#0x58]         ;370
0003ae  e647              B        |L12.64|
;;;372    
                          ENDP

                  |L12.944|
0003b0  4541502d          DCB      "EAP-PSK: in MAC_SENT state",0
0003b4  50534b3a
0003b8  20696e20
0003bc  4d41435f
0003c0  53454e54
0003c4  20737461
0003c8  746500  
0003cb  00                DCB      0
                  |L12.972|
                          DCD      ||.constdata||+0x44
                  |L12.976|
0003d0  4541502d          DCB      "EAP-PSK: Flags=0x%x",0
0003d4  50534b3a
0003d8  20466c61
0003dc  67733d30
0003e0  78257800
                  |L12.996|
0003e4  4541502d          DCB      "EAP-PSK: Unexpected T=%d (expected 2)",0
0003e8  50534b3a
0003ec  20556e65
0003f0  78706563
0003f4  74656420
0003f8  543d2564
0003fc  20286578
000400  70656374
000404  65642032
000408  2900    
00040a  00                DCB      0
00040b  00                DCB      0
                  |L12.1036|
00040c  4541502d          DCB      "EAP-PSK: RAND_S",0
000410  50534b3a
000414  2052414e
000418  445f5300
                  |L12.1052|
00041c  4541502d          DCB      "EAP-PSK: MAC_S",0
000420  50534b3a
000424  204d4143
000428  5f5300  
00042b  00                DCB      0
                  |L12.1068|
00042c  4541502d          DCB      "EAP-PSK: PCHANNEL",0
000430  50534b3a
000434  20504348
000438  414e4e45
00043c  4c00    
00043e  00                DCB      0
00043f  00                DCB      0
                  |L12.1088|
000440  4541502d          DCB      "EAP-PSK: Invalid MAC_S in third message",0
000444  50534b3a
000448  20496e76
00044c  616c6964
000450  204d4143
000454  5f532069
000458  6e207468
00045c  69726420
000460  6d657373
000464  61676500
                  |L12.1128|
000468  4541502d          DCB      "EAP-PSK: MAC_S verified successfully"
00046c  50534b3a
000470  204d4143
000474  5f532076
000478  65726966
00047c  69656420
000480  73756363
000484  65737366
000488  756c6c79
                  |L12.1164|
00048c  00                DCB      0
00048d  00                DCB      0
00048e  00                DCB      0
00048f  00                DCB      0
                  |L12.1168|
000490  4541502d          DCB      "EAP-PSK: TEK",0
000494  50534b3a
000498  2054454b
00049c  00      
00049d  00                DCB      0
00049e  00                DCB      0
00049f  00                DCB      0
                  |L12.1184|
0004a0  4541502d          DCB      "EAP-PSK: MSK",0
0004a4  50534b3a
0004a8  204d534b
0004ac  00      
0004ad  00                DCB      0
0004ae  00                DCB      0
0004af  00                DCB      0
                  |L12.1200|
0004b0  4541502d          DCB      "EAP-PSK: EMSK",0
0004b4  50534b3a
0004b8  20454d53
0004bc  4b00    
0004be  00                DCB      0
0004bf  00                DCB      0
                  |L12.1216|
0004c0  4541502d          DCB      "EAP-PSK: PCHANNEL - nonce",0
0004c4  50534b3a
0004c8  20504348
0004cc  414e4e45
0004d0  4c202d20
0004d4  6e6f6e63
0004d8  6500    
0004da  00                DCB      0
0004db  00                DCB      0
                  |L12.1244|
0004dc  4541502d          DCB      "EAP-PSK: PCHANNEL - hdr",0
0004e0  50534b3a
0004e4  20504348
0004e8  414e4e45
0004ec  4c202d20
0004f0  68647200
                  |L12.1268|
0004f4  4541502d          DCB      "EAP-PSK: PCHANNEL - cipher msg",0
0004f8  50534b3a
0004fc  20504348
000500  414e4e45
000504  4c202d20
000508  63697068
00050c  6572206d
000510  736700  
000513  00                DCB      0
                  |L12.1300|
000514  4541502d          DCB      "EAP-PSK: PCHANNEL decryption failed",0
000518  50534b3a
00051c  20504348
000520  414e4e45
000524  4c206465
000528  63727970
00052c  74696f6e
000530  20666169
000534  6c656400
                  |L12.1336|
000538  4541502d          DCB      "EAP-PSK: Decrypted PCHANNEL message",0
00053c  50534b3a
000540  20446563
000544  72797074
000548  65642050
00054c  4348414e
000550  4e454c20
000554  6d657373
000558  61676500
                  |L12.1372|
00055c  4541502d          DCB      "EAP-PSK: R flag - CONT - unsupported",0
000560  50534b3a
000564  20522066
000568  6c616720
00056c  2d20434f
000570  4e54202d
000574  20756e73
000578  7570706f
00057c  72746564
000580  00      
000581  00                DCB      0
000582  00                DCB      0
000583  00                DCB      0
                  |L12.1412|
000584  4541502d          DCB      "EAP-PSK: R flag - DONE_SUCCESS",0
000588  50534b3a
00058c  20522066
000590  6c616720
000594  2d20444f
000598  4e455f53
00059c  55434345
0005a0  535300  
0005a3  00                DCB      0
                  |L12.1444|
0005a4  4541502d          DCB      "EAP-PSK: R flag - DONE_FAILURE",0
0005a8  50534b3a
0005ac  20522066
0005b0  6c616720
0005b4  2d20444f
0005b8  4e455f46
0005bc  41494c55
0005c0  524500  
0005c3  00                DCB      0
                  |L12.1476|
0005c4  4541502d          DCB      "EAP-PSK: Authentication server rejected authentication",0
0005c8  50534b3a
0005cc  20417574
0005d0  68656e74
0005d4  69636174
0005d8  696f6e20
0005dc  73657276
0005e0  65722072
0005e4  656a6563
0005e8  74656420
0005ec  61757468
0005f0  656e7469
0005f4  63617469
0005f8  6f6e00  
0005fb  00                DCB      0
                  |L12.1532|
0005fc  4541502d          DCB      "EAP-PSK: Unsupported E (Ext) flag",0
000600  50534b3a
000604  20556e73
000608  7570706f
00060c  72746564
000610  20452028
000614  45787429
000618  20666c61
00061c  6700    
00061e  00                DCB      0
00061f  00                DCB      0
                  |L12.1568|
000620  4541502d          DCB      "EAP-PSK: reply message (plaintext)",0
000624  50534b3a
000628  20726570
00062c  6c79206d
000630  65737361
000634  67652028
000638  706c6169
00063c  6e746578
000640  742900  
000643  00                DCB      0
                  |L12.1604|
000644  4541502d          DCB      "EAP-PSK: reply message (PCHANNEL)",0
000648  50534b3a
00064c  20726570
000650  6c79206d
000654  65737361
000658  67652028
00065c  50434841
000660  4e4e454c
000664  2900    
000666  00                DCB      0
000667  00                DCB      0
                  |L12.1640|
000668  756e00            DCB      "un",0
00066b  00                DCB      0
                  |L12.1644|
00066c  4541502d          DCB      "EAP-PSK: Completed %ssuccessfully",0
000670  50534b3a
000674  20436f6d
000678  706c6574
00067c  65642025
000680  73737563
000684  63657373
000688  66756c6c
00068c  7900    
00068e  00                DCB      0
00068f  00                DCB      0

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L13.30|
00001a  2001              MOVS     r0,#1
                  |L13.28|
;;;495    }
00001c  4770              BX       lr
                  |L13.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L13.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L18.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L18.14|
                  |L18.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L18.12|
;;;70     }
00000c  4770              BX       lr
                  |L18.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L18.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L19.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L19.16|
                  |L19.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L19.14|
;;;76     }
00000e  4770              BX       lr
                  |L19.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L19.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L20.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L20.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L20.18|
                  |L20.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L20.16|
;;;57     }
000010  4770              BX       lr
                  |L20.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L20.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L21.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L21.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L21.20|
                  |L21.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L21.18|
;;;64     }
000012  4770              BX       lr
                  |L21.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L21.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L22.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L22.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L22.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L22.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L25.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L25.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L25.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L25.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L31.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L31.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  50534b3a          DCB      0x50,0x53,0x4b,0x3a
000008  20496e76          DCB      0x20,0x49,0x6e,0x76
00000c  616c6964          DCB      0x61,0x6c,0x69,0x64
000010  20666972          DCB      0x20,0x66,0x69,0x72
000014  7374206d          DCB      0x73,0x74,0x20,0x6d
000018  65737361          DCB      0x65,0x73,0x73,0x61
00001c  6765206c          DCB      0x67,0x65,0x20,0x6c
000020  656e6774          DCB      0x65,0x6e,0x67,0x74
000024  68202825          DCB      0x68,0x20,0x28,0x25
000028  6c753b20          DCB      0x6c,0x75,0x3b,0x20
00002c  65787065          DCB      0x65,0x78,0x70,0x65
000030  63746564          DCB      0x63,0x74,0x65,0x64
000034  20256c75          DCB      0x20,0x25,0x6c,0x75
000038  206f7220          DCB      0x20,0x6f,0x72,0x20
00003c  6d6f7265          DCB      0x6d,0x6f,0x72,0x65
000040  29000000          DCB      0x29,0x00,0x00,0x00
000044  4541502d          DCB      0x45,0x41,0x50,0x2d
000048  50534b3a          DCB      0x50,0x53,0x4b,0x3a
00004c  20496e76          DCB      0x20,0x49,0x6e,0x76
000050  616c6964          DCB      0x61,0x6c,0x69,0x64
000054  20746869          DCB      0x20,0x74,0x68,0x69
000058  7264206d          DCB      0x72,0x64,0x20,0x6d
00005c  65737361          DCB      0x65,0x73,0x73,0x61
000060  6765206c          DCB      0x67,0x65,0x20,0x6c
000064  656e6774          DCB      0x65,0x6e,0x67,0x74
000068  68202825          DCB      0x68,0x20,0x28,0x25
00006c  6c753b20          DCB      0x6c,0x75,0x3b,0x20
000070  65787065          DCB      0x65,0x78,0x70,0x65
000074  63746564          DCB      0x63,0x74,0x65,0x64
000078  20256c75          DCB      0x20,0x25,0x6c,0x75
00007c  206f7220          DCB      0x20,0x6f,0x72,0x20
000080  6d6f7265          DCB      0x6d,0x6f,0x72,0x65
000084  29000000          DCB      0x29,0x00,0x00,0x00
000088  4541502d          DCB      0x45,0x41,0x50,0x2d
00008c  50534b3a          DCB      0x50,0x53,0x4b,0x3a
000090  20546f6f          DCB      0x20,0x54,0x6f,0x6f
000094  2073686f          DCB      0x20,0x73,0x68,0x6f
000098  72742050          DCB      0x72,0x74,0x20,0x50
00009c  4348414e          DCB      0x43,0x48,0x41,0x4e
0000a0  4e454c20          DCB      0x4e,0x45,0x4c,0x20
0000a4  64617461          DCB      0x64,0x61,0x74,0x61
0000a8  20696e20          DCB      0x20,0x69,0x6e,0x20
0000ac  74686972          DCB      0x74,0x68,0x69,0x72
0000b0  64206d65          DCB      0x64,0x20,0x6d,0x65
0000b4  73736167          DCB      0x73,0x73,0x61,0x67
0000b8  6520286c          DCB      0x65,0x20,0x28,0x6c
0000bc  656e3d25          DCB      0x65,0x6e,0x3d,0x25
0000c0  6c752c20          DCB      0x6c,0x75,0x2c,0x20
0000c4  65787065          DCB      0x65,0x78,0x70,0x65
0000c8  63746564          DCB      0x63,0x74,0x65,0x64
0000cc  20323129          DCB      0x20,0x32,0x31,0x29
0000d0  00                DCB      0x00
