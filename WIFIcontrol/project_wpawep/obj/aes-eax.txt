; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\aes-eax.o --depend=.\obj\aes-eax.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\aes-eax.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\aes-eax.c]
                          THUMB

                          AREA ||i.aes_128_eax_decrypt||, CODE, READONLY, ALIGN=1

                  aes_128_eax_decrypt PROC
;;;86      */
;;;87     int aes_128_eax_decrypt(const u8 *key, const u8 *nonce, size_t nonce_len,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;88     			const u8 *hdr, size_t hdr_len,
;;;89     			u8 *data, size_t data_len, const u8 *tag)
;;;90     {
000004  b08d              SUB      sp,sp,#0x34
000006  4690              MOV      r8,r2
000008  469a              MOV      r10,r3
00000a  e9dd9b1a          LDRD     r9,r11,[sp,#0x68]
00000e  9e1c              LDR      r6,[sp,#0x70]
;;;91     	u8 *buf;
;;;92     	size_t buf_len;
;;;93     	u8 nonce_mac[AES_BLOCK_SIZE], hdr_mac[AES_BLOCK_SIZE],
;;;94     		data_mac[AES_BLOCK_SIZE];
;;;95     	int i;
;;;96     
;;;97     	if (nonce_len > data_len)
000010  45b0              CMP      r8,r6
000012  d901              BLS      |L1.24|
;;;98     		buf_len = nonce_len;
000014  4647              MOV      r7,r8
000016  e000              B        |L1.26|
                  |L1.24|
;;;99     	else
;;;100    		buf_len = data_len;
000018  4637              MOV      r7,r6
                  |L1.26|
;;;101    	if (hdr_len > buf_len)
00001a  45b9              CMP      r9,r7
00001c  d900              BLS      |L1.32|
;;;102    		buf_len = hdr_len;
00001e  464f              MOV      r7,r9
                  |L1.32|
;;;103    	buf_len += 16;
000020  3710              ADDS     r7,r7,#0x10
;;;104    
;;;105    	buf = os_malloc(buf_len);
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       os_malloc
000028  4604              MOV      r4,r0
;;;106    	if (buf == NULL)
00002a  b924              CBNZ     r4,|L1.54|
;;;107    		return -1;
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L1.48|
;;;108    
;;;109    	os_memset(buf, 0, 15);
;;;110    
;;;111    	buf[15] = 0;
;;;112    	os_memcpy(buf + 16, nonce, nonce_len);
;;;113    	if (omac1_aes_128(key, buf, 16 + nonce_len, nonce_mac)) {
;;;114    		os_free(buf);
;;;115    		return -1;
;;;116    	}
;;;117    
;;;118    	buf[15] = 1;
;;;119    	os_memcpy(buf + 16, hdr, hdr_len);
;;;120    	if (omac1_aes_128(key, buf, 16 + hdr_len, hdr_mac)) {
;;;121    		os_free(buf);
;;;122    		return -1;
;;;123    	}
;;;124    
;;;125    	buf[15] = 2;
;;;126    	os_memcpy(buf + 16, data, data_len);
;;;127    	if (omac1_aes_128(key, buf, 16 + data_len, data_mac)) {
;;;128    		os_free(buf);
;;;129    		return -1;
;;;130    	}
;;;131    
;;;132    	os_free(buf);
;;;133    
;;;134    	for (i = 0; i < AES_BLOCK_SIZE; i++) {
;;;135    		if (tag[i] != (nonce_mac[i] ^ data_mac[i] ^ hdr_mac[i]))
;;;136    			return -2;
;;;137    	}
;;;138    
;;;139    	return aes_128_ctr_encrypt(key, nonce_mac, data, data_len);
;;;140    }
000030  b011              ADD      sp,sp,#0x44
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.54|
000036  220f              MOVS     r2,#0xf               ;109
000038  2100              MOVS     r1,#0                 ;109
00003a  4620              MOV      r0,r4                 ;109
00003c  f7fffffe          BL       os_memset
000040  2000              MOVS     r0,#0                 ;111
000042  73e0              STRB     r0,[r4,#0xf]          ;111
000044  4642              MOV      r2,r8                 ;112
000046  f1040010          ADD      r0,r4,#0x10           ;112
00004a  990e              LDR      r1,[sp,#0x38]         ;112
00004c  f7fffffe          BL       os_memcpy
000050  f1080210          ADD      r2,r8,#0x10           ;113
000054  ab09              ADD      r3,sp,#0x24           ;113
000056  4621              MOV      r1,r4                 ;113
000058  980d              LDR      r0,[sp,#0x34]         ;113
00005a  f7fffffe          BL       omac1_aes_128
00005e  b128              CBZ      r0,|L1.108|
000060  4620              MOV      r0,r4                 ;114
000062  f7fffffe          BL       os_free
000066  f04f30ff          MOV      r0,#0xffffffff        ;115
00006a  e7e1              B        |L1.48|
                  |L1.108|
00006c  2001              MOVS     r0,#1                 ;118
00006e  73e0              STRB     r0,[r4,#0xf]          ;118
000070  464a              MOV      r2,r9                 ;119
000072  4651              MOV      r1,r10                ;119
000074  f1040010          ADD      r0,r4,#0x10           ;119
000078  f7fffffe          BL       os_memcpy
00007c  f1090210          ADD      r2,r9,#0x10           ;120
000080  ab05              ADD      r3,sp,#0x14           ;120
000082  4621              MOV      r1,r4                 ;120
000084  980d              LDR      r0,[sp,#0x34]         ;120
000086  f7fffffe          BL       omac1_aes_128
00008a  b128              CBZ      r0,|L1.152|
00008c  4620              MOV      r0,r4                 ;121
00008e  f7fffffe          BL       os_free
000092  f04f30ff          MOV      r0,#0xffffffff        ;122
000096  e7cb              B        |L1.48|
                  |L1.152|
000098  2002              MOVS     r0,#2                 ;125
00009a  73e0              STRB     r0,[r4,#0xf]          ;125
00009c  4632              MOV      r2,r6                 ;126
00009e  4659              MOV      r1,r11                ;126
0000a0  f1040010          ADD      r0,r4,#0x10           ;126
0000a4  f7fffffe          BL       os_memcpy
0000a8  f1060210          ADD      r2,r6,#0x10           ;127
0000ac  ab01              ADD      r3,sp,#4              ;127
0000ae  4621              MOV      r1,r4                 ;127
0000b0  980d              LDR      r0,[sp,#0x34]         ;127
0000b2  f7fffffe          BL       omac1_aes_128
0000b6  b128              CBZ      r0,|L1.196|
0000b8  4620              MOV      r0,r4                 ;128
0000ba  f7fffffe          BL       os_free
0000be  f04f30ff          MOV      r0,#0xffffffff        ;129
0000c2  e7b5              B        |L1.48|
                  |L1.196|
0000c4  4620              MOV      r0,r4                 ;132
0000c6  f7fffffe          BL       os_free
0000ca  2500              MOVS     r5,#0                 ;134
0000cc  e00f              B        |L1.238|
                  |L1.206|
0000ce  a809              ADD      r0,sp,#0x24           ;135
0000d0  5d40              LDRB     r0,[r0,r5]            ;135
0000d2  a901              ADD      r1,sp,#4              ;135
0000d4  5d49              LDRB     r1,[r1,r5]            ;135
0000d6  4048              EORS     r0,r0,r1              ;135
0000d8  a905              ADD      r1,sp,#0x14           ;135
0000da  5d49              LDRB     r1,[r1,r5]            ;135
0000dc  4041              EORS     r1,r1,r0              ;135
0000de  981d              LDR      r0,[sp,#0x74]         ;135
0000e0  5d40              LDRB     r0,[r0,r5]            ;135
0000e2  4281              CMP      r1,r0                 ;135
0000e4  d002              BEQ      |L1.236|
0000e6  f06f0001          MVN      r0,#1                 ;136
0000ea  e7a1              B        |L1.48|
                  |L1.236|
0000ec  1c6d              ADDS     r5,r5,#1              ;134
                  |L1.238|
0000ee  2d10              CMP      r5,#0x10              ;134
0000f0  dbed              BLT      |L1.206|
0000f2  4633              MOV      r3,r6                 ;139
0000f4  465a              MOV      r2,r11                ;139
0000f6  a909              ADD      r1,sp,#0x24           ;139
0000f8  980d              LDR      r0,[sp,#0x34]         ;139
0000fa  f7fffffe          BL       aes_128_ctr_encrypt
0000fe  e797              B        |L1.48|
                          ENDP


                          AREA ||i.aes_128_eax_encrypt||, CODE, READONLY, ALIGN=1

                  aes_128_eax_encrypt PROC
;;;33      */
;;;34     int aes_128_eax_encrypt(const u8 *key, const u8 *nonce, size_t nonce_len,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;35     			const u8 *hdr, size_t hdr_len,
;;;36     			u8 *data, size_t data_len, u8 *tag)
;;;37     {
000004  b089              SUB      sp,sp,#0x24
000006  4682              MOV      r10,r0
000008  468b              MOV      r11,r1
00000a  4616              MOV      r6,r2
00000c  4698              MOV      r8,r3
00000e  f8dd9050          LDR      r9,[sp,#0x50]
000012  9f12              LDR      r7,[sp,#0x48]
;;;38     	u8 *buf;
;;;39     	size_t buf_len;
;;;40     	u8 nonce_mac[AES_BLOCK_SIZE], hdr_mac[AES_BLOCK_SIZE],
;;;41     		data_mac[AES_BLOCK_SIZE];
;;;42     	int i, ret = -1;
000014  f04f30ff          MOV      r0,#0xffffffff
000018  9000              STR      r0,[sp,#0]
;;;43     
;;;44     	if (nonce_len > data_len)
00001a  454e              CMP      r6,r9
00001c  d901              BLS      |L2.34|
;;;45     		buf_len = nonce_len;
00001e  4635              MOV      r5,r6
000020  e000              B        |L2.36|
                  |L2.34|
;;;46     	else
;;;47     		buf_len = data_len;
000022  464d              MOV      r5,r9
                  |L2.36|
;;;48     	if (hdr_len > buf_len)
000024  42af              CMP      r7,r5
000026  d900              BLS      |L2.42|
;;;49     		buf_len = hdr_len;
000028  463d              MOV      r5,r7
                  |L2.42|
;;;50     	buf_len += 16;
00002a  3510              ADDS     r5,r5,#0x10
;;;51     
;;;52     	buf = os_malloc(buf_len);
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       os_malloc
000032  4604              MOV      r4,r0
;;;53     	if (buf == NULL)
000034  b924              CBNZ     r4,|L2.64|
;;;54     		return -1;
000036  f04f30ff          MOV      r0,#0xffffffff
                  |L2.58|
;;;55     
;;;56     	os_memset(buf, 0, 15);
;;;57     
;;;58     	buf[15] = 0;
;;;59     	os_memcpy(buf + 16, nonce, nonce_len);
;;;60     	if (omac1_aes_128(key, buf, 16 + nonce_len, nonce_mac))
;;;61     		goto fail;
;;;62     
;;;63     	buf[15] = 1;
;;;64     	os_memcpy(buf + 16, hdr, hdr_len);
;;;65     	if (omac1_aes_128(key, buf, 16 + hdr_len, hdr_mac))
;;;66     		goto fail;
;;;67     	ret = 0;
;;;68     fail:
;;;69     	os_free(buf);
;;;70     
;;;71     	return ret;
;;;72     }
00003a  b009              ADD      sp,sp,#0x24
00003c  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.64|
000040  220f              MOVS     r2,#0xf               ;56
000042  2100              MOVS     r1,#0                 ;56
000044  4620              MOV      r0,r4                 ;56
000046  f7fffffe          BL       os_memset
00004a  2000              MOVS     r0,#0                 ;58
00004c  73e0              STRB     r0,[r4,#0xf]          ;58
00004e  4632              MOV      r2,r6                 ;59
000050  4659              MOV      r1,r11                ;59
000052  f1040010          ADD      r0,r4,#0x10           ;59
000056  f7fffffe          BL       os_memcpy
00005a  f1060210          ADD      r2,r6,#0x10           ;60
00005e  ab05              ADD      r3,sp,#0x14           ;60
000060  4621              MOV      r1,r4                 ;60
000062  4650              MOV      r0,r10                ;60
000064  f7fffffe          BL       omac1_aes_128
000068  b100              CBZ      r0,|L2.108|
00006a  e013              B        |L2.148|
                  |L2.108|
00006c  2001              MOVS     r0,#1                 ;63
00006e  73e0              STRB     r0,[r4,#0xf]          ;63
000070  463a              MOV      r2,r7                 ;64
000072  4641              MOV      r1,r8                 ;64
000074  f1040010          ADD      r0,r4,#0x10           ;64
000078  f7fffffe          BL       os_memcpy
00007c  f1070210          ADD      r2,r7,#0x10           ;65
000080  ab01              ADD      r3,sp,#4              ;65
000082  4621              MOV      r1,r4                 ;65
000084  4650              MOV      r0,r10                ;65
000086  f7fffffe          BL       omac1_aes_128
00008a  b100              CBZ      r0,|L2.142|
00008c  e002              B        |L2.148|
                  |L2.142|
00008e  2000              MOVS     r0,#0                 ;67
000090  9000              STR      r0,[sp,#0]            ;67
000092  bf00              NOP                            ;68
                  |L2.148|
000094  4620              MOV      r0,r4                 ;69
000096  f7fffffe          BL       os_free
00009a  9800              LDR      r0,[sp,#0]            ;71
00009c  e7cd              B        |L2.58|
;;;73     
                          ENDP


                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L4.30|
00001a  2001              MOVS     r0,#1
                  |L4.28|
;;;495    }
00001c  4770              BX       lr
                  |L4.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L4.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L9.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L9.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L9.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L9.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L12.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L12.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L12.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L12.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L18.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L18.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

