; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\aes-internal-enc.o --depend=.\obj\aes-internal-enc.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\aes-internal-enc.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\aes-internal-enc.c]
                          THUMB

                          AREA ||i.aes_encrypt||, CODE, READONLY, ALIGN=1

                  aes_encrypt PROC
;;;110    
;;;111    void aes_encrypt(void *ctx, const u8 *plain, u8 *crypt)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;113    	rijndaelEncrypt(ctx, plain, crypt);
000008  4632              MOV      r2,r6
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       rijndaelEncrypt
;;;114    }
000012  bd70              POP      {r4-r6,pc}
;;;115    
                          ENDP


                          AREA ||i.aes_encrypt_deinit||, CODE, READONLY, ALIGN=1

                  aes_encrypt_deinit PROC
;;;116    
;;;117    void aes_encrypt_deinit(void *ctx)
000000  b510              PUSH     {r4,lr}
;;;118    {
000002  4604              MOV      r4,r0
;;;119    	os_memset(ctx, 0, AES_PRIV_SIZE);
000004  22b0              MOVS     r2,#0xb0
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       os_memset
;;;120    	os_free(ctx);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       os_free
;;;121    }
000014  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.aes_encrypt_init||, CODE, READONLY, ALIGN=1

                  aes_encrypt_init PROC
;;;97     
;;;98     void * aes_encrypt_init(const u8 *key, size_t len)
000000  b570              PUSH     {r4-r6,lr}
;;;99     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;100    	u32 *rk;
;;;101    	if (len != 16)
000006  2e10              CMP      r6,#0x10
000008  d001              BEQ      |L3.14|
;;;102    		return NULL;
00000a  2000              MOVS     r0,#0
                  |L3.12|
;;;103    	rk = os_malloc(AES_PRIV_SIZE);
;;;104    	if (rk == NULL)
;;;105    		return NULL;
;;;106    	rijndaelKeySetupEnc(rk, key);
;;;107    	return rk;
;;;108    }
00000c  bd70              POP      {r4-r6,pc}
                  |L3.14|
00000e  20b0              MOVS     r0,#0xb0              ;103
000010  f7fffffe          BL       os_malloc
000014  4604              MOV      r4,r0                 ;103
000016  b90c              CBNZ     r4,|L3.28|
000018  2000              MOVS     r0,#0                 ;105
00001a  e7f7              B        |L3.12|
                  |L3.28|
00001c  4629              MOV      r1,r5                 ;106
00001e  4620              MOV      r0,r4                 ;106
000020  f7fffffe          BL       rijndaelKeySetupEnc
000024  4620              MOV      r0,r4                 ;107
000026  e7f1              B        |L3.12|
;;;109    
                          ENDP


                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L5.30|
00001a  2001              MOVS     r0,#1
                  |L5.28|
;;;495    }
00001c  4770              BX       lr
                  |L5.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L5.28|
;;;496    
                          ENDP


                          AREA ||i.rijndaelEncrypt||, CODE, READONLY, ALIGN=2

                  rijndaelEncrypt PROC
;;;29     
;;;30     void rijndaelEncrypt(const u32 rk[/*44*/], const u8 pt[16], u8 ct[16])
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;31     {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
;;;32     	u32 s0, s1, s2, s3, t0, t1, t2, t3;
;;;33     	const int Nr = 10;
00000c  200a              MOVS     r0,#0xa
00000e  9002              STR      r0,[sp,#8]
;;;34     #ifndef FULL_UNROLL
;;;35     	int r;
;;;36     #endif /* ?FULL_UNROLL */
;;;37     
;;;38     	/*
;;;39     	 * map byte array block to cipher state
;;;40     	 * and add initial round key:
;;;41     	 */
;;;42     	s0 = GETU32(pt     ) ^ rk[0];
000010  7828              LDRB     r0,[r5,#0]
000012  0600              LSLS     r0,r0,#24
000014  7869              LDRB     r1,[r5,#1]
000016  ea804001          EOR      r0,r0,r1,LSL #16
00001a  78a9              LDRB     r1,[r5,#2]
00001c  ea802001          EOR      r0,r0,r1,LSL #8
000020  78e9              LDRB     r1,[r5,#3]
000022  4048              EORS     r0,r0,r1
000024  6821              LDR      r1,[r4,#0]
000026  4048              EORS     r0,r0,r1
000028  9006              STR      r0,[sp,#0x18]
;;;43     	s1 = GETU32(pt +  4) ^ rk[1];
00002a  7928              LDRB     r0,[r5,#4]
00002c  0601              LSLS     r1,r0,#24
00002e  7968              LDRB     r0,[r5,#5]
000030  ea814100          EOR      r1,r1,r0,LSL #16
000034  79a8              LDRB     r0,[r5,#6]
000036  ea812000          EOR      r0,r1,r0,LSL #8
00003a  79e9              LDRB     r1,[r5,#7]
00003c  4048              EORS     r0,r0,r1
00003e  6861              LDR      r1,[r4,#4]
000040  4048              EORS     r0,r0,r1
000042  9005              STR      r0,[sp,#0x14]
;;;44     	s2 = GETU32(pt +  8) ^ rk[2];
000044  7a28              LDRB     r0,[r5,#8]
000046  0601              LSLS     r1,r0,#24
000048  7a68              LDRB     r0,[r5,#9]
00004a  ea814100          EOR      r1,r1,r0,LSL #16
00004e  7aa8              LDRB     r0,[r5,#0xa]
000050  ea812000          EOR      r0,r1,r0,LSL #8
000054  7ae9              LDRB     r1,[r5,#0xb]
000056  4048              EORS     r0,r0,r1
000058  68a1              LDR      r1,[r4,#8]
00005a  4048              EORS     r0,r0,r1
00005c  9004              STR      r0,[sp,#0x10]
;;;45     	s3 = GETU32(pt + 12) ^ rk[3];
00005e  7b28              LDRB     r0,[r5,#0xc]
000060  0601              LSLS     r1,r0,#24
000062  7b68              LDRB     r0,[r5,#0xd]
000064  ea814100          EOR      r1,r1,r0,LSL #16
000068  7ba8              LDRB     r0,[r5,#0xe]
00006a  ea812000          EOR      r0,r1,r0,LSL #8
00006e  7be9              LDRB     r1,[r5,#0xf]
000070  4048              EORS     r0,r0,r1
000072  68e1              LDR      r1,[r4,#0xc]
000074  4048              EORS     r0,r0,r1
000076  9003              STR      r0,[sp,#0xc]
;;;46     
;;;47     #define ROUND(i,d,s) \
;;;48     d##0 = TE0(s##0) ^ TE1(s##1) ^ TE2(s##2) ^ TE3(s##3) ^ rk[4 * i]; \
;;;49     d##1 = TE0(s##1) ^ TE1(s##2) ^ TE2(s##3) ^ TE3(s##0) ^ rk[4 * i + 1]; \
;;;50     d##2 = TE0(s##2) ^ TE1(s##3) ^ TE2(s##0) ^ TE3(s##1) ^ rk[4 * i + 2]; \
;;;51     d##3 = TE0(s##3) ^ TE1(s##0) ^ TE2(s##1) ^ TE3(s##2) ^ rk[4 * i + 3]
;;;52     
;;;53     #ifdef FULL_UNROLL
;;;54     
;;;55     	ROUND(1,t,s);
;;;56     	ROUND(2,s,t);
;;;57     	ROUND(3,t,s);
;;;58     	ROUND(4,s,t);
;;;59     	ROUND(5,t,s);
;;;60     	ROUND(6,s,t);
;;;61     	ROUND(7,t,s);
;;;62     	ROUND(8,s,t);
;;;63     	ROUND(9,t,s);
;;;64     
;;;65     	rk += Nr << 2;
;;;66     
;;;67     #else  /* !FULL_UNROLL */
;;;68     
;;;69     	/* Nr - 1 full rounds: */
;;;70     	r = Nr >> 1;
000078  200a              MOVS     r0,#0xa
00007a  1040              ASRS     r0,r0,#1
00007c  9001              STR      r0,[sp,#4]
;;;71     	for (;;) {
00007e  bf00              NOP      
                  |L6.128|
;;;72     		ROUND(1,t,s);
000080  9905              LDR      r1,[sp,#0x14]
000082  f3c14107          UBFX     r1,r1,#16,#8
000086  4af6              LDR      r2,|L6.1120|
000088  f8520021          LDR      r0,[r2,r1,LSL #2]
00008c  2108              MOVS     r1,#8
00008e  f7fffffe          BL       rotr
000092  9906              LDR      r1,[sp,#0x18]
000094  0e09              LSRS     r1,r1,#24
000096  4af2              LDR      r2,|L6.1120|
000098  f8521021          LDR      r1,[r2,r1,LSL #2]
00009c  ea800b01          EOR      r11,r0,r1
0000a0  9904              LDR      r1,[sp,#0x10]
0000a2  f3c12107          UBFX     r1,r1,#8,#8
0000a6  f8520021          LDR      r0,[r2,r1,LSL #2]
0000aa  2110              MOVS     r1,#0x10
0000ac  f7fffffe          BL       rotr
0000b0  ea8b0b00          EOR      r11,r11,r0
0000b4  9903              LDR      r1,[sp,#0xc]
0000b6  b2c9              UXTB     r1,r1
0000b8  4ae9              LDR      r2,|L6.1120|
0000ba  f8520021          LDR      r0,[r2,r1,LSL #2]
0000be  2118              MOVS     r1,#0x18
0000c0  f7fffffe          BL       rotr
0000c4  ea8b0b00          EOR      r11,r11,r0
0000c8  6920              LDR      r0,[r4,#0x10]
0000ca  ea8b0700          EOR      r7,r11,r0
0000ce  9904              LDR      r1,[sp,#0x10]
0000d0  f3c14107          UBFX     r1,r1,#16,#8
0000d4  4ae2              LDR      r2,|L6.1120|
0000d6  f8520021          LDR      r0,[r2,r1,LSL #2]
0000da  2108              MOVS     r1,#8
0000dc  f7fffffe          BL       rotr
0000e0  9905              LDR      r1,[sp,#0x14]
0000e2  0e09              LSRS     r1,r1,#24
0000e4  4ade              LDR      r2,|L6.1120|
0000e6  f8521021          LDR      r1,[r2,r1,LSL #2]
0000ea  ea800b01          EOR      r11,r0,r1
0000ee  9903              LDR      r1,[sp,#0xc]
0000f0  f3c12107          UBFX     r1,r1,#8,#8
0000f4  f8520021          LDR      r0,[r2,r1,LSL #2]
0000f8  2110              MOVS     r1,#0x10
0000fa  f7fffffe          BL       rotr
0000fe  ea8b0b00          EOR      r11,r11,r0
000102  9906              LDR      r1,[sp,#0x18]
000104  b2c9              UXTB     r1,r1
000106  4ad6              LDR      r2,|L6.1120|
000108  f8520021          LDR      r0,[r2,r1,LSL #2]
00010c  2118              MOVS     r1,#0x18
00010e  f7fffffe          BL       rotr
000112  ea8b0b00          EOR      r11,r11,r0
000116  6960              LDR      r0,[r4,#0x14]
000118  ea8b0800          EOR      r8,r11,r0
00011c  9903              LDR      r1,[sp,#0xc]
00011e  f3c14107          UBFX     r1,r1,#16,#8
000122  4acf              LDR      r2,|L6.1120|
000124  f8520021          LDR      r0,[r2,r1,LSL #2]
000128  2108              MOVS     r1,#8
00012a  f7fffffe          BL       rotr
00012e  9904              LDR      r1,[sp,#0x10]
000130  0e09              LSRS     r1,r1,#24
000132  4acb              LDR      r2,|L6.1120|
000134  f8521021          LDR      r1,[r2,r1,LSL #2]
000138  ea800b01          EOR      r11,r0,r1
00013c  9906              LDR      r1,[sp,#0x18]
00013e  f3c12107          UBFX     r1,r1,#8,#8
000142  f8520021          LDR      r0,[r2,r1,LSL #2]
000146  2110              MOVS     r1,#0x10
000148  f7fffffe          BL       rotr
00014c  ea8b0b00          EOR      r11,r11,r0
000150  9905              LDR      r1,[sp,#0x14]
000152  b2c9              UXTB     r1,r1
000154  4ac2              LDR      r2,|L6.1120|
000156  f8520021          LDR      r0,[r2,r1,LSL #2]
00015a  2118              MOVS     r1,#0x18
00015c  f7fffffe          BL       rotr
000160  ea8b0b00          EOR      r11,r11,r0
000164  69a0              LDR      r0,[r4,#0x18]
000166  ea8b0900          EOR      r9,r11,r0
00016a  9906              LDR      r1,[sp,#0x18]
00016c  f3c14107          UBFX     r1,r1,#16,#8
000170  4abb              LDR      r2,|L6.1120|
000172  f8520021          LDR      r0,[r2,r1,LSL #2]
000176  2108              MOVS     r1,#8
000178  f7fffffe          BL       rotr
00017c  9903              LDR      r1,[sp,#0xc]
00017e  0e09              LSRS     r1,r1,#24
000180  4ab7              LDR      r2,|L6.1120|
000182  f8521021          LDR      r1,[r2,r1,LSL #2]
000186  ea800b01          EOR      r11,r0,r1
00018a  9905              LDR      r1,[sp,#0x14]
00018c  f3c12107          UBFX     r1,r1,#8,#8
000190  f8520021          LDR      r0,[r2,r1,LSL #2]
000194  2110              MOVS     r1,#0x10
000196  f7fffffe          BL       rotr
00019a  ea8b0b00          EOR      r11,r11,r0
00019e  9904              LDR      r1,[sp,#0x10]
0001a0  b2c9              UXTB     r1,r1
0001a2  4aaf              LDR      r2,|L6.1120|
0001a4  f8520021          LDR      r0,[r2,r1,LSL #2]
0001a8  2118              MOVS     r1,#0x18
0001aa  f7fffffe          BL       rotr
0001ae  ea8b0b00          EOR      r11,r11,r0
0001b2  69e0              LDR      r0,[r4,#0x1c]
0001b4  ea8b0a00          EOR      r10,r11,r0
;;;73     		rk += 8;
0001b8  3420              ADDS     r4,r4,#0x20
;;;74     		if (--r == 0)
0001ba  9801              LDR      r0,[sp,#4]
0001bc  1e40              SUBS     r0,r0,#1
0001be  9001              STR      r0,[sp,#4]
0001c0  d100              BNE      |L6.452|
;;;75     			break;
0001c2  e09a              B        |L6.762|
                  |L6.452|
;;;76     		ROUND(0,s,t);
0001c4  f3c84107          UBFX     r1,r8,#16,#8
0001c8  4aa5              LDR      r2,|L6.1120|
0001ca  f8520021          LDR      r0,[r2,r1,LSL #2]
0001ce  2108              MOVS     r1,#8
0001d0  f7fffffe          BL       rotr
0001d4  0e39              LSRS     r1,r7,#24
0001d6  4aa2              LDR      r2,|L6.1120|
0001d8  f8521021          LDR      r1,[r2,r1,LSL #2]
0001dc  ea800b01          EOR      r11,r0,r1
0001e0  f3c92107          UBFX     r1,r9,#8,#8
0001e4  f8520021          LDR      r0,[r2,r1,LSL #2]
0001e8  2110              MOVS     r1,#0x10
0001ea  f7fffffe          BL       rotr
0001ee  ea8b0b00          EOR      r11,r11,r0
0001f2  f00a01ff          AND      r1,r10,#0xff
0001f6  4a9a              LDR      r2,|L6.1120|
0001f8  f8520021          LDR      r0,[r2,r1,LSL #2]
0001fc  2118              MOVS     r1,#0x18
0001fe  f7fffffe          BL       rotr
000202  ea8b0b00          EOR      r11,r11,r0
000206  6820              LDR      r0,[r4,#0]
000208  ea8b0b00          EOR      r11,r11,r0
00020c  f8cdb018          STR      r11,[sp,#0x18]
000210  f3c94107          UBFX     r1,r9,#16,#8
000214  4a92              LDR      r2,|L6.1120|
000216  f8520021          LDR      r0,[r2,r1,LSL #2]
00021a  2108              MOVS     r1,#8
00021c  f7fffffe          BL       rotr
000220  ea4f6118          LSR      r1,r8,#24
000224  4a8e              LDR      r2,|L6.1120|
000226  f8521021          LDR      r1,[r2,r1,LSL #2]
00022a  ea800b01          EOR      r11,r0,r1
00022e  f3ca2107          UBFX     r1,r10,#8,#8
000232  f8520021          LDR      r0,[r2,r1,LSL #2]
000236  2110              MOVS     r1,#0x10
000238  f7fffffe          BL       rotr
00023c  ea8b0b00          EOR      r11,r11,r0
000240  b2f9              UXTB     r1,r7
000242  4a87              LDR      r2,|L6.1120|
000244  f8520021          LDR      r0,[r2,r1,LSL #2]
000248  2118              MOVS     r1,#0x18
00024a  f7fffffe          BL       rotr
00024e  ea8b0b00          EOR      r11,r11,r0
000252  6860              LDR      r0,[r4,#4]
000254  ea8b0b00          EOR      r11,r11,r0
000258  f8cdb014          STR      r11,[sp,#0x14]
00025c  f3ca4107          UBFX     r1,r10,#16,#8
000260  4a7f              LDR      r2,|L6.1120|
000262  f8520021          LDR      r0,[r2,r1,LSL #2]
000266  2108              MOVS     r1,#8
000268  f7fffffe          BL       rotr
00026c  ea4f6119          LSR      r1,r9,#24
000270  4a7b              LDR      r2,|L6.1120|
000272  f8521021          LDR      r1,[r2,r1,LSL #2]
000276  ea800b01          EOR      r11,r0,r1
00027a  f3c72107          UBFX     r1,r7,#8,#8
00027e  f8520021          LDR      r0,[r2,r1,LSL #2]
000282  2110              MOVS     r1,#0x10
000284  f7fffffe          BL       rotr
000288  ea8b0b00          EOR      r11,r11,r0
00028c  f00801ff          AND      r1,r8,#0xff
000290  4a73              LDR      r2,|L6.1120|
000292  f8520021          LDR      r0,[r2,r1,LSL #2]
000296  2118              MOVS     r1,#0x18
000298  f7fffffe          BL       rotr
00029c  ea8b0b00          EOR      r11,r11,r0
0002a0  68a0              LDR      r0,[r4,#8]
0002a2  ea8b0b00          EOR      r11,r11,r0
0002a6  f8cdb010          STR      r11,[sp,#0x10]
0002aa  f3c74107          UBFX     r1,r7,#16,#8
0002ae  4a6c              LDR      r2,|L6.1120|
0002b0  f8520021          LDR      r0,[r2,r1,LSL #2]
0002b4  2108              MOVS     r1,#8
0002b6  f7fffffe          BL       rotr
0002ba  ea4f611a          LSR      r1,r10,#24
0002be  4a68              LDR      r2,|L6.1120|
0002c0  f8521021          LDR      r1,[r2,r1,LSL #2]
0002c4  ea800b01          EOR      r11,r0,r1
0002c8  f3c82107          UBFX     r1,r8,#8,#8
0002cc  f8520021          LDR      r0,[r2,r1,LSL #2]
0002d0  2110              MOVS     r1,#0x10
0002d2  f7fffffe          BL       rotr
0002d6  ea8b0b00          EOR      r11,r11,r0
0002da  f00901ff          AND      r1,r9,#0xff
0002de  4a60              LDR      r2,|L6.1120|
0002e0  f8520021          LDR      r0,[r2,r1,LSL #2]
0002e4  2118              MOVS     r1,#0x18
0002e6  f7fffffe          BL       rotr
0002ea  ea8b0b00          EOR      r11,r11,r0
0002ee  68e0              LDR      r0,[r4,#0xc]
0002f0  ea8b0b00          EOR      r11,r11,r0
0002f4  f8cdb00c          STR      r11,[sp,#0xc]
0002f8  e6c2              B        |L6.128|
                  |L6.762|
0002fa  bf00              NOP                            ;75
;;;77     	}
;;;78     
;;;79     #endif /* ?FULL_UNROLL */
;;;80     
;;;81     #undef ROUND
;;;82     
;;;83     	/*
;;;84     	 * apply last round and
;;;85     	 * map cipher state to byte array block:
;;;86     	 */
;;;87     	s0 = TE41(t0) ^ TE42(t1) ^ TE43(t2) ^ TE44(t3) ^ rk[0];
0002fc  0e38              LSRS     r0,r7,#24
0002fe  4958              LDR      r1,|L6.1120|
000300  f8510020          LDR      r0,[r1,r0,LSL #2]
000304  f04f417f          MOV      r1,#0xff000000
000308  ea012000          AND      r0,r1,r0,LSL #8
00030c  f3c84107          UBFX     r1,r8,#16,#8
000310  4a53              LDR      r2,|L6.1120|
000312  f8521021          LDR      r1,[r2,r1,LSL #2]
000316  f401017f          AND      r1,r1,#0xff0000
00031a  4048              EORS     r0,r0,r1
00031c  f3c92107          UBFX     r1,r9,#8,#8
000320  f8521021          LDR      r1,[r2,r1,LSL #2]
000324  f401417f          AND      r1,r1,#0xff00
000328  4048              EORS     r0,r0,r1
00032a  f00a01ff          AND      r1,r10,#0xff
00032e  f8521021          LDR      r1,[r2,r1,LSL #2]
000332  f3c12107          UBFX     r1,r1,#8,#8
000336  4048              EORS     r0,r0,r1
000338  6821              LDR      r1,[r4,#0]
00033a  4048              EORS     r0,r0,r1
00033c  9006              STR      r0,[sp,#0x18]
;;;88     	PUTU32(ct     , s0);
00033e  9806              LDR      r0,[sp,#0x18]
000340  0e00              LSRS     r0,r0,#24
000342  7030              STRB     r0,[r6,#0]
000344  9806              LDR      r0,[sp,#0x18]
000346  0c00              LSRS     r0,r0,#16
000348  7070              STRB     r0,[r6,#1]
00034a  9806              LDR      r0,[sp,#0x18]
00034c  0a00              LSRS     r0,r0,#8
00034e  70b0              STRB     r0,[r6,#2]
000350  9806              LDR      r0,[sp,#0x18]
000352  70f0              STRB     r0,[r6,#3]
;;;89     	s1 = TE41(t1) ^ TE42(t2) ^ TE43(t3) ^ TE44(t0) ^ rk[1];
000354  ea4f6018          LSR      r0,r8,#24
000358  4611              MOV      r1,r2
00035a  f8510020          LDR      r0,[r1,r0,LSL #2]
00035e  f04f417f          MOV      r1,#0xff000000
000362  ea012000          AND      r0,r1,r0,LSL #8
000366  f3c94107          UBFX     r1,r9,#16,#8
00036a  f8521021          LDR      r1,[r2,r1,LSL #2]
00036e  f401017f          AND      r1,r1,#0xff0000
000372  4048              EORS     r0,r0,r1
000374  f3ca2107          UBFX     r1,r10,#8,#8
000378  f8521021          LDR      r1,[r2,r1,LSL #2]
00037c  f401417f          AND      r1,r1,#0xff00
000380  4048              EORS     r0,r0,r1
000382  b2f9              UXTB     r1,r7
000384  f8521021          LDR      r1,[r2,r1,LSL #2]
000388  f3c12107          UBFX     r1,r1,#8,#8
00038c  4048              EORS     r0,r0,r1
00038e  6861              LDR      r1,[r4,#4]
000390  4048              EORS     r0,r0,r1
000392  9005              STR      r0,[sp,#0x14]
;;;90     	PUTU32(ct +  4, s1);
000394  9805              LDR      r0,[sp,#0x14]
000396  0e00              LSRS     r0,r0,#24
000398  7130              STRB     r0,[r6,#4]
00039a  9805              LDR      r0,[sp,#0x14]
00039c  0c01              LSRS     r1,r0,#16
00039e  7171              STRB     r1,[r6,#5]
0003a0  9805              LDR      r0,[sp,#0x14]
0003a2  0a01              LSRS     r1,r0,#8
0003a4  71b1              STRB     r1,[r6,#6]
0003a6  9805              LDR      r0,[sp,#0x14]
0003a8  71f0              STRB     r0,[r6,#7]
;;;91     	s2 = TE41(t2) ^ TE42(t3) ^ TE43(t0) ^ TE44(t1) ^ rk[2];
0003aa  ea4f6019          LSR      r0,r9,#24
0003ae  4611              MOV      r1,r2
0003b0  f8510020          LDR      r0,[r1,r0,LSL #2]
0003b4  f04f417f          MOV      r1,#0xff000000
0003b8  ea012000          AND      r0,r1,r0,LSL #8
0003bc  f3ca4107          UBFX     r1,r10,#16,#8
0003c0  f8521021          LDR      r1,[r2,r1,LSL #2]
0003c4  f401017f          AND      r1,r1,#0xff0000
0003c8  4048              EORS     r0,r0,r1
0003ca  f3c72107          UBFX     r1,r7,#8,#8
0003ce  f8521021          LDR      r1,[r2,r1,LSL #2]
0003d2  f401417f          AND      r1,r1,#0xff00
0003d6  4048              EORS     r0,r0,r1
0003d8  f00801ff          AND      r1,r8,#0xff
0003dc  f8521021          LDR      r1,[r2,r1,LSL #2]
0003e0  f3c12107          UBFX     r1,r1,#8,#8
0003e4  4048              EORS     r0,r0,r1
0003e6  68a1              LDR      r1,[r4,#8]
0003e8  4048              EORS     r0,r0,r1
0003ea  9004              STR      r0,[sp,#0x10]
;;;92     	PUTU32(ct +  8, s2);
0003ec  9804              LDR      r0,[sp,#0x10]
0003ee  0e00              LSRS     r0,r0,#24
0003f0  7230              STRB     r0,[r6,#8]
0003f2  9804              LDR      r0,[sp,#0x10]
0003f4  0c01              LSRS     r1,r0,#16
0003f6  7271              STRB     r1,[r6,#9]
0003f8  9804              LDR      r0,[sp,#0x10]
0003fa  0a01              LSRS     r1,r0,#8
0003fc  72b1              STRB     r1,[r6,#0xa]
0003fe  9804              LDR      r0,[sp,#0x10]
000400  72f0              STRB     r0,[r6,#0xb]
;;;93     	s3 = TE41(t3) ^ TE42(t0) ^ TE43(t1) ^ TE44(t2) ^ rk[3];
000402  ea4f601a          LSR      r0,r10,#24
000406  4611              MOV      r1,r2
000408  f8510020          LDR      r0,[r1,r0,LSL #2]
00040c  f04f417f          MOV      r1,#0xff000000
000410  ea012000          AND      r0,r1,r0,LSL #8
000414  f3c74107          UBFX     r1,r7,#16,#8
000418  f8521021          LDR      r1,[r2,r1,LSL #2]
00041c  f401017f          AND      r1,r1,#0xff0000
000420  4048              EORS     r0,r0,r1
000422  f3c82107          UBFX     r1,r8,#8,#8
000426  f8521021          LDR      r1,[r2,r1,LSL #2]
00042a  f401417f          AND      r1,r1,#0xff00
00042e  4048              EORS     r0,r0,r1
000430  f00901ff          AND      r1,r9,#0xff
000434  f8521021          LDR      r1,[r2,r1,LSL #2]
000438  f3c12107          UBFX     r1,r1,#8,#8
00043c  4048              EORS     r0,r0,r1
00043e  68e1              LDR      r1,[r4,#0xc]
000440  4048              EORS     r0,r0,r1
000442  9003              STR      r0,[sp,#0xc]
;;;94     	PUTU32(ct + 12, s3);
000444  9803              LDR      r0,[sp,#0xc]
000446  0e00              LSRS     r0,r0,#24
000448  7330              STRB     r0,[r6,#0xc]
00044a  9803              LDR      r0,[sp,#0xc]
00044c  0c01              LSRS     r1,r0,#16
00044e  7371              STRB     r1,[r6,#0xd]
000450  9803              LDR      r0,[sp,#0xc]
000452  0a01              LSRS     r1,r0,#8
000454  73b1              STRB     r1,[r6,#0xe]
000456  9803              LDR      r0,[sp,#0xc]
000458  73f0              STRB     r0,[r6,#0xf]
;;;95     }
00045a  b007              ADD      sp,sp,#0x1c
00045c  e8bd8ff0          POP      {r4-r11,pc}
;;;96     
                          ENDP

                  |L6.1120|
                          DCD      Te0

                          AREA ||i.rotr||, CODE, READONLY, ALIGN=1

                  rotr PROC
;;;71     
;;;72     static inline u32 rotr(u32 val, int bits)
000000  4602              MOV      r2,r0
;;;73     {
;;;74     	return (val >> bits) | (val << (32 - bits));
000002  fa22f001          LSR      r0,r2,r1
000006  f1c10320          RSB      r3,r1,#0x20
00000a  fa02f303          LSL      r3,r2,r3
00000e  4318              ORRS     r0,r0,r3
;;;75     }
000010  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L12.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L12.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L12.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L12.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L15.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L15.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L15.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L15.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L21.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L21.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

