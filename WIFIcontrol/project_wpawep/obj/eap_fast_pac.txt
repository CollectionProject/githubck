; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_fast_pac.o --depend=.\obj\eap_fast_pac.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_fast_pac.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_fast_pac.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_fast_add_pac||, CODE, READONLY, ALIGN=1

                  eap_fast_add_pac PROC
;;;144     */
;;;145    int eap_fast_add_pac(struct eap_fast_pac **pac_root,
000000  b5f8              PUSH     {r3-r7,lr}
;;;146    		     struct eap_fast_pac **pac_current,
;;;147    		     struct eap_fast_pac *entry)
;;;148    {
000002  4606              MOV      r6,r0
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
;;;149    	struct eap_fast_pac *pac;
;;;150    
;;;151    	if (entry == NULL || entry->a_id == NULL)
000008  b10c              CBZ      r4,|L2.14|
00000a  6b60              LDR      r0,[r4,#0x34]
00000c  b910              CBNZ     r0,|L2.20|
                  |L2.14|
;;;152    		return -1;
00000e  f04f30ff          MOV      r0,#0xffffffff
                  |L2.18|
;;;153    
;;;154    	/* Remove a possible old entry for the matching A-ID. */
;;;155    	eap_fast_remove_pac(pac_root, pac_current,
;;;156    			    entry->a_id, entry->a_id_len, entry->pac_type);
;;;157    
;;;158    	/* Allocate a new entry and add it to the list of PACs. */
;;;159    	pac = os_zalloc(sizeof(*pac));
;;;160    	if (pac == NULL)
;;;161    		return -1;
;;;162    
;;;163    	pac->pac_type = entry->pac_type;
;;;164    	os_memcpy(pac->pac_key, entry->pac_key, EAP_FAST_PAC_KEY_LEN);
;;;165    	if (eap_fast_copy_buf(&pac->pac_opaque, &pac->pac_opaque_len,
;;;166    			      entry->pac_opaque, entry->pac_opaque_len) < 0 ||
;;;167    	    eap_fast_copy_buf(&pac->pac_info, &pac->pac_info_len,
;;;168    			      entry->pac_info, entry->pac_info_len) < 0 ||
;;;169    	    eap_fast_copy_buf(&pac->a_id, &pac->a_id_len,
;;;170    			      entry->a_id, entry->a_id_len) < 0 ||
;;;171    	    eap_fast_copy_buf(&pac->i_id, &pac->i_id_len,
;;;172    			      entry->i_id, entry->i_id_len) < 0 ||
;;;173    	    eap_fast_copy_buf(&pac->a_id_info, &pac->a_id_info_len,
;;;174    			      entry->a_id_info, entry->a_id_info_len) < 0) {
;;;175    		eap_fast_free_pac(pac);
;;;176    		return -1;
;;;177    	}
;;;178    
;;;179    	pac->next = *pac_root;
;;;180    	*pac_root = pac;
;;;181    
;;;182    	return 0;
;;;183    }
000012  bdf8              POP      {r3-r7,pc}
                  |L2.20|
000014  f8b4304c          LDRH     r3,[r4,#0x4c]         ;155
000018  9300              STR      r3,[sp,#0]            ;155
00001a  4639              MOV      r1,r7                 ;155
00001c  4630              MOV      r0,r6                 ;155
00001e  e9d4230d          LDRD     r2,r3,[r4,#0x34]      ;155
000022  f7fffffe          BL       eap_fast_remove_pac
000026  2050              MOVS     r0,#0x50              ;159
000028  f7fffffe          BL       os_zalloc
00002c  4605              MOV      r5,r0                 ;159
00002e  b915              CBNZ     r5,|L2.54|
000030  f04f30ff          MOV      r0,#0xffffffff        ;161
000034  e7ed              B        |L2.18|
                  |L2.54|
000036  f8b4004c          LDRH     r0,[r4,#0x4c]         ;163
00003a  f8a5004c          STRH     r0,[r5,#0x4c]         ;163
00003e  2220              MOVS     r2,#0x20              ;164
000040  1d21              ADDS     r1,r4,#4              ;164
000042  1d28              ADDS     r0,r5,#4              ;164
000044  f7fffffe          BL       os_memcpy
000048  f1050128          ADD      r1,r5,#0x28           ;165
00004c  1f08              SUBS     r0,r1,#4              ;165
00004e  e9d42309          LDRD     r2,r3,[r4,#0x24]      ;165
000052  f7fffffe          BL       eap_fast_copy_buf
000056  2800              CMP      r0,#0                 ;165
000058  db23              BLT      |L2.162|
00005a  f1050130          ADD      r1,r5,#0x30           ;167
00005e  1f08              SUBS     r0,r1,#4              ;167
000060  e9d4230b          LDRD     r2,r3,[r4,#0x2c]      ;167
000064  f7fffffe          BL       eap_fast_copy_buf
000068  2800              CMP      r0,#0                 ;167
00006a  db1a              BLT      |L2.162|
00006c  f1050138          ADD      r1,r5,#0x38           ;169
000070  1f08              SUBS     r0,r1,#4              ;169
000072  e9d4230d          LDRD     r2,r3,[r4,#0x34]      ;169
000076  f7fffffe          BL       eap_fast_copy_buf
00007a  2800              CMP      r0,#0                 ;169
00007c  db11              BLT      |L2.162|
00007e  f1050140          ADD      r1,r5,#0x40           ;171
000082  1f08              SUBS     r0,r1,#4              ;171
000084  e9d4230f          LDRD     r2,r3,[r4,#0x3c]      ;171
000088  f7fffffe          BL       eap_fast_copy_buf
00008c  2800              CMP      r0,#0                 ;171
00008e  db08              BLT      |L2.162|
000090  f1050148          ADD      r1,r5,#0x48           ;173
000094  1f08              SUBS     r0,r1,#4              ;173
000096  e9d42311          LDRD     r2,r3,[r4,#0x44]      ;173
00009a  f7fffffe          BL       eap_fast_copy_buf
00009e  2800              CMP      r0,#0                 ;173
0000a0  da05              BGE      |L2.174|
                  |L2.162|
0000a2  4628              MOV      r0,r5                 ;175
0000a4  f7fffffe          BL       eap_fast_free_pac
0000a8  f04f30ff          MOV      r0,#0xffffffff        ;176
0000ac  e7b1              B        |L2.18|
                  |L2.174|
0000ae  6830              LDR      r0,[r6,#0]            ;179
0000b0  6028              STR      r0,[r5,#0]            ;179
0000b2  6035              STR      r5,[r6,#0]            ;180
0000b4  2000              MOVS     r0,#0                 ;182
0000b6  e7ac              B        |L2.18|
;;;184    
                          ENDP


                          AREA ||i.eap_fast_add_pac_data||, CODE, READONLY, ALIGN=2

                  eap_fast_add_pac_data PROC
;;;572    
;;;573    static int eap_fast_add_pac_data(struct eap_fast_pac *pac, char **buf,
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;574    				 char **pos, size_t *buf_len)
;;;575    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;576    	int ret;
;;;577    
;;;578    	ret = os_snprintf(*pos, *buf + *buf_len - *pos,
00000c  6832              LDR      r2,[r6,#0]
00000e  f8d7c000          LDR      r12,[r7,#0]
000012  4462              ADD      r2,r2,r12
000014  f8d5c000          LDR      r12,[r5,#0]
000018  eba2010c          SUB      r1,r2,r12
00001c  f8b4304c          LDRH     r3,[r4,#0x4c]
000020  4660              MOV      r0,r12
000022  a23e              ADR      r2,|L3.284|
000024  f7fffffe          BL       os_snprintf
000028  4680              MOV      r8,r0
;;;579    			  "START\nPAC-Type=%d\n", pac->pac_type);
;;;580    	if (ret < 0 || ret >= *buf + *buf_len - *pos)
00002a  f1b80f00          CMP      r8,#0
00002e  db06              BLT      |L3.62|
000030  6830              LDR      r0,[r6,#0]
000032  6839              LDR      r1,[r7,#0]
000034  4408              ADD      r0,r0,r1
000036  6829              LDR      r1,[r5,#0]
000038  1a40              SUBS     r0,r0,r1
00003a  4540              CMP      r0,r8
00003c  dc03              BGT      |L3.70|
                  |L3.62|
;;;581    		return -1;
00003e  f04f30ff          MOV      r0,#0xffffffff
                  |L3.66|
;;;582    
;;;583    	*pos += ret;
;;;584    	eap_fast_write(buf, pos, buf_len, "PAC-Key",
;;;585    		       pac->pac_key, EAP_FAST_PAC_KEY_LEN, 0);
;;;586    	eap_fast_write(buf, pos, buf_len, "PAC-Opaque",
;;;587    		       pac->pac_opaque, pac->pac_opaque_len, 0);
;;;588    	eap_fast_write(buf, pos, buf_len, "PAC-Info",
;;;589    		       pac->pac_info, pac->pac_info_len, 0);
;;;590    	eap_fast_write(buf, pos, buf_len, "A-ID",
;;;591    		       pac->a_id, pac->a_id_len, 0);
;;;592    	eap_fast_write(buf, pos, buf_len, "I-ID",
;;;593    		       pac->i_id, pac->i_id_len, 1);
;;;594    	eap_fast_write(buf, pos, buf_len, "A-ID-Info",
;;;595    		       pac->a_id_info, pac->a_id_info_len, 1);
;;;596    	if (*buf == NULL) {
;;;597    		wpa_printf(MSG_DEBUG, "EAP-FAST: No memory for PAC "
;;;598    			   "data");
;;;599    		return -1;
;;;600    	}
;;;601    	ret = os_snprintf(*pos, *buf + *buf_len - *pos, "END\n");
;;;602    	if (ret < 0 || ret >= *buf + *buf_len - *pos)
;;;603    		return -1;
;;;604    	*pos += ret;
;;;605    
;;;606    	return 0;
;;;607    }
000042  e8bd83fe          POP      {r1-r9,pc}
                  |L3.70|
000046  6828              LDR      r0,[r5,#0]            ;583
000048  4440              ADD      r0,r0,r8              ;583
00004a  6028              STR      r0,[r5,#0]            ;583
00004c  2300              MOVS     r3,#0                 ;584
00004e  2220              MOVS     r2,#0x20              ;584
000050  1d21              ADDS     r1,r4,#4              ;584
000052  e88d000e          STM      sp,{r1-r3}            ;584
000056  a336              ADR      r3,|L3.304|
000058  463a              MOV      r2,r7                 ;584
00005a  4629              MOV      r1,r5                 ;584
00005c  4630              MOV      r0,r6                 ;584
00005e  f7fffffe          BL       eap_fast_write
000062  2300              MOVS     r3,#0                 ;586
000064  e9d41209          LDRD     r1,r2,[r4,#0x24]      ;586
000068  e88d000e          STM      sp,{r1-r3}            ;586
00006c  a332              ADR      r3,|L3.312|
00006e  463a              MOV      r2,r7                 ;586
000070  4629              MOV      r1,r5                 ;586
000072  4630              MOV      r0,r6                 ;586
000074  f7fffffe          BL       eap_fast_write
000078  2300              MOVS     r3,#0                 ;588
00007a  e9d4120b          LDRD     r1,r2,[r4,#0x2c]      ;588
00007e  e88d000e          STM      sp,{r1-r3}            ;588
000082  a330              ADR      r3,|L3.324|
000084  463a              MOV      r2,r7                 ;588
000086  4629              MOV      r1,r5                 ;588
000088  4630              MOV      r0,r6                 ;588
00008a  f7fffffe          BL       eap_fast_write
00008e  2300              MOVS     r3,#0                 ;590
000090  e9d4120d          LDRD     r1,r2,[r4,#0x34]      ;590
000094  e88d000e          STM      sp,{r1-r3}            ;590
000098  a32d              ADR      r3,|L3.336|
00009a  463a              MOV      r2,r7                 ;590
00009c  4629              MOV      r1,r5                 ;590
00009e  4630              MOV      r0,r6                 ;590
0000a0  f7fffffe          BL       eap_fast_write
0000a4  2301              MOVS     r3,#1                 ;592
0000a6  e9d4120f          LDRD     r1,r2,[r4,#0x3c]      ;592
0000aa  e88d000e          STM      sp,{r1-r3}            ;592
0000ae  a32a              ADR      r3,|L3.344|
0000b0  463a              MOV      r2,r7                 ;592
0000b2  4629              MOV      r1,r5                 ;592
0000b4  4630              MOV      r0,r6                 ;592
0000b6  f7fffffe          BL       eap_fast_write
0000ba  2301              MOVS     r3,#1                 ;594
0000bc  e9d41211          LDRD     r1,r2,[r4,#0x44]      ;594
0000c0  e88d000e          STM      sp,{r1-r3}            ;594
0000c4  a326              ADR      r3,|L3.352|
0000c6  463a              MOV      r2,r7                 ;594
0000c8  4629              MOV      r1,r5                 ;594
0000ca  4630              MOV      r0,r6                 ;594
0000cc  f7fffffe          BL       eap_fast_write
0000d0  6830              LDR      r0,[r6,#0]            ;596
0000d2  b930              CBNZ     r0,|L3.226|
0000d4  a125              ADR      r1,|L3.364|
0000d6  2000              MOVS     r0,#0                 ;597
0000d8  f7fffffe          BL       wpa_printf
0000dc  f04f30ff          MOV      r0,#0xffffffff        ;599
0000e0  e7af              B        |L3.66|
                  |L3.226|
0000e2  6832              LDR      r2,[r6,#0]            ;601
0000e4  683b              LDR      r3,[r7,#0]            ;601
0000e6  441a              ADD      r2,r2,r3              ;601
0000e8  682b              LDR      r3,[r5,#0]            ;601
0000ea  1ad1              SUBS     r1,r2,r3              ;601
0000ec  4618              MOV      r0,r3                 ;601
0000ee  a228              ADR      r2,|L3.400|
0000f0  f7fffffe          BL       os_snprintf
0000f4  4680              MOV      r8,r0                 ;601
0000f6  f1b80f00          CMP      r8,#0                 ;602
0000fa  db06              BLT      |L3.266|
0000fc  6830              LDR      r0,[r6,#0]            ;602
0000fe  6839              LDR      r1,[r7,#0]            ;602
000100  4408              ADD      r0,r0,r1              ;602
000102  6829              LDR      r1,[r5,#0]            ;602
000104  1a40              SUBS     r0,r0,r1              ;602
000106  4540              CMP      r0,r8                 ;602
000108  dc02              BGT      |L3.272|
                  |L3.266|
00010a  f04f30ff          MOV      r0,#0xffffffff        ;603
00010e  e798              B        |L3.66|
                  |L3.272|
000110  6828              LDR      r0,[r5,#0]            ;604
000112  4440              ADD      r0,r0,r8              ;604
000114  6028              STR      r0,[r5,#0]            ;604
000116  2000              MOVS     r0,#0                 ;606
000118  e793              B        |L3.66|
;;;608    
                          ENDP

00011a  0000              DCW      0x0000
                  |L3.284|
00011c  53544152          DCB      "START\nPAC-Type=%d\n",0
000120  540a5041
000124  432d5479
000128  70653d25
00012c  640a00  
00012f  00                DCB      0
                  |L3.304|
000130  5041432d          DCB      "PAC-Key",0
000134  4b657900
                  |L3.312|
000138  5041432d          DCB      "PAC-Opaque",0
00013c  4f706171
000140  756500  
000143  00                DCB      0
                  |L3.324|
000144  5041432d          DCB      "PAC-Info",0
000148  496e666f
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L3.336|
000150  412d4944          DCB      "A-ID",0
000154  00      
000155  00                DCB      0
000156  00                DCB      0
000157  00                DCB      0
                  |L3.344|
000158  492d4944          DCB      "I-ID",0
00015c  00      
00015d  00                DCB      0
00015e  00                DCB      0
00015f  00                DCB      0
                  |L3.352|
000160  412d4944          DCB      "A-ID-Info",0
000164  2d496e66
000168  6f00    
00016a  00                DCB      0
00016b  00                DCB      0
                  |L3.364|
00016c  4541502d          DCB      "EAP-FAST: No memory for PAC data",0
000170  46415354
000174  3a204e6f
000178  206d656d
00017c  6f727920
000180  666f7220
000184  50414320
000188  64617461
00018c  00      
00018d  00                DCB      0
00018e  00                DCB      0
00018f  00                DCB      0
                  |L3.400|
000190  454e440a          DCB      "END\n",0
000194  00      
000195  00                DCB      0
000196  00                DCB      0
000197  00                DCB      0

                          AREA ||i.eap_fast_copy_buf||, CODE, READONLY, ALIGN=1

                  eap_fast_copy_buf PROC
;;;118    
;;;119    static int eap_fast_copy_buf(u8 **dst, size_t *dst_len,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;120    			     const u8 *src, size_t src_len)
;;;121    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;122    	if (src) {
00000c  b17e              CBZ      r6,|L4.46|
;;;123    		*dst = os_malloc(src_len);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       os_malloc
000014  6020              STR      r0,[r4,#0]
;;;124    		if (*dst == NULL)
000016  6820              LDR      r0,[r4,#0]
000018  b918              CBNZ     r0,|L4.34|
;;;125    			return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L4.30|
;;;126    		os_memcpy(*dst, src, src_len);
;;;127    		*dst_len = src_len;
;;;128    	}
;;;129    	return 0;
;;;130    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L4.34|
000022  462a              MOV      r2,r5                 ;126
000024  4631              MOV      r1,r6                 ;126
000026  6820              LDR      r0,[r4,#0]            ;126
000028  f7fffffe          BL       os_memcpy
00002c  603d              STR      r5,[r7,#0]            ;127
                  |L4.46|
00002e  2000              MOVS     r0,#0                 ;129
000030  e7f5              B        |L4.30|
;;;131    
                          ENDP


                          AREA ||i.eap_fast_deinit_pac_data||, CODE, READONLY, ALIGN=1

                  eap_fast_deinit_pac_data PROC
;;;296    
;;;297    static void eap_fast_deinit_pac_data(struct eap_fast_read_ctx *rc)
000000  b510              PUSH     {r4,lr}
;;;298    {
000002  4604              MOV      r4,r0
;;;299    	os_free(rc->buf);
000004  6920              LDR      r0,[r4,#0x10]
000006  f7fffffe          BL       os_free
;;;300    	if (rc->f)
00000a  6820              LDR      r0,[r4,#0]
00000c  b110              CBZ      r0,|L5.20|
;;;301    		fclose(rc->f);
00000e  6820              LDR      r0,[r4,#0]
000010  f7fffffe          BL       fclose
                  |L5.20|
;;;302    }
000014  bd10              POP      {r4,pc}
;;;303    
                          ENDP


                          AREA ||i.eap_fast_free_pac||, CODE, READONLY, ALIGN=1

                  eap_fast_free_pac PROC
;;;55      */
;;;56     void eap_fast_free_pac(struct eap_fast_pac *pac)
000000  b510              PUSH     {r4,lr}
;;;57     {
000002  4604              MOV      r4,r0
;;;58     	os_free(pac->pac_opaque);
000004  6a60              LDR      r0,[r4,#0x24]
000006  f7fffffe          BL       os_free
;;;59     	os_free(pac->pac_info);
00000a  6ae0              LDR      r0,[r4,#0x2c]
00000c  f7fffffe          BL       os_free
;;;60     	os_free(pac->a_id);
000010  6b60              LDR      r0,[r4,#0x34]
000012  f7fffffe          BL       os_free
;;;61     	os_free(pac->i_id);
000016  6be0              LDR      r0,[r4,#0x3c]
000018  f7fffffe          BL       os_free
;;;62     	os_free(pac->a_id_info);
00001c  6c60              LDR      r0,[r4,#0x44]
00001e  f7fffffe          BL       os_free
;;;63     	os_free(pac);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       os_free
;;;64     }
000028  bd10              POP      {r4,pc}
;;;65     
                          ENDP


                          AREA ||i.eap_fast_get_pac||, CODE, READONLY, ALIGN=1

                  eap_fast_get_pac PROC
;;;74      */
;;;75     struct eap_fast_pac * eap_fast_get_pac(struct eap_fast_pac *pac_root,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;76     				       const u8 *a_id, size_t a_id_len,
;;;77     				       u16 pac_type)
;;;78     {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;79     	struct eap_fast_pac *pac = pac_root;
00000c  462c              MOV      r4,r5
;;;80     
;;;81     	while (pac) {
00000e  e010              B        |L7.50|
                  |L7.16|
;;;82     		if (pac->pac_type == pac_type && pac->a_id_len == a_id_len &&
000010  f8b4004c          LDRH     r0,[r4,#0x4c]
000014  42b8              CMP      r0,r7
000016  d10b              BNE      |L7.48|
000018  6ba0              LDR      r0,[r4,#0x38]
00001a  42b0              CMP      r0,r6
00001c  d108              BNE      |L7.48|
;;;83     		    os_memcmp(pac->a_id, a_id, a_id_len) == 0) {
00001e  4632              MOV      r2,r6
000020  4641              MOV      r1,r8
000022  6b60              LDR      r0,[r4,#0x34]
000024  f7fffffe          BL       os_memcmp
000028  b910              CBNZ     r0,|L7.48|
;;;84     			return pac;
00002a  4620              MOV      r0,r4
                  |L7.44|
;;;85     		}
;;;86     		pac = pac->next;
;;;87     	}
;;;88     	return NULL;
;;;89     }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L7.48|
000030  6824              LDR      r4,[r4,#0]            ;86
                  |L7.50|
000032  2c00              CMP      r4,#0                 ;81
000034  d1ec              BNE      |L7.16|
000036  2000              MOVS     r0,#0                 ;88
000038  e7f8              B        |L7.44|
;;;90     
                          ENDP


                          AREA ||i.eap_fast_init_pac_data||, CODE, READONLY, ALIGN=2

                  eap_fast_init_pac_data PROC
;;;259    
;;;260    static int eap_fast_init_pac_data(struct eap_sm *sm, const char *pac_file,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;261    				  struct eap_fast_read_ctx *rc)
;;;262    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;263    	os_memset(rc, 0, sizeof(*rc));
00000a  2218              MOVS     r2,#0x18
00000c  2100              MOVS     r1,#0
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       os_memset
;;;264    
;;;265    	rc->buf_len = 2048;
000014  f44f6000          MOV      r0,#0x800
000018  6160              STR      r0,[r4,#0x14]
;;;266    	rc->buf = os_malloc(rc->buf_len);
00001a  6960              LDR      r0,[r4,#0x14]
00001c  f7fffffe          BL       os_malloc
000020  6120              STR      r0,[r4,#0x10]
;;;267    	if (rc->buf == NULL)
000022  6920              LDR      r0,[r4,#0x10]
000024  b918              CBNZ     r0,|L8.46|
;;;268    		return -1;
000026  f04f30ff          MOV      r0,#0xffffffff
                  |L8.42|
;;;269    
;;;270    	if (os_strncmp(pac_file, "blob://", 7) == 0) {
;;;271    		const struct wpa_config_blob *blob;
;;;272    		blob = eap_get_config_blob(sm, pac_file + 7);
;;;273    		if (blob == NULL) {
;;;274    			wpa_printf(MSG_INFO, "EAP-FAST: No PAC blob '%s' - "
;;;275    				   "assume no PAC entries have been "
;;;276    				   "provisioned", pac_file + 7);
;;;277    			os_free(rc->buf);
;;;278    			return -1;
;;;279    		}
;;;280    		rc->pos = (char *) blob->data;
;;;281    		rc->end = (char *) blob->data + blob->len;
;;;282    	} else {
;;;283    		rc->f = fopen(pac_file, "rb");
;;;284    		if (rc->f == NULL) {
;;;285    			wpa_printf(MSG_INFO, "EAP-FAST: No PAC file '%s' - "
;;;286    				   "assume no PAC entries have been "
;;;287    				   "provisioned", pac_file);
;;;288    			os_free(rc->buf);
;;;289    			return -1;
;;;290    		}
;;;291    	}
;;;292    
;;;293    	return 0;
;;;294    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L8.46|
00002e  2207              MOVS     r2,#7                 ;270
000030  a118              ADR      r1,|L8.148|
000032  4628              MOV      r0,r5                 ;270
000034  f7fffffe          BL       os_strncmp
000038  b9b8              CBNZ     r0,|L8.106|
00003a  1de9              ADDS     r1,r5,#7              ;272
00003c  4638              MOV      r0,r7                 ;272
00003e  f7fffffe          BL       eap_get_config_blob
000042  4606              MOV      r6,r0                 ;272
000044  b956              CBNZ     r6,|L8.92|
000046  1dea              ADDS     r2,r5,#7              ;274
000048  4914              LDR      r1,|L8.156|
00004a  2000              MOVS     r0,#0                 ;274
00004c  f7fffffe          BL       wpa_printf
000050  6920              LDR      r0,[r4,#0x10]         ;277
000052  f7fffffe          BL       os_free
000056  f04f30ff          MOV      r0,#0xffffffff        ;278
00005a  e7e6              B        |L8.42|
                  |L8.92|
00005c  6870              LDR      r0,[r6,#4]            ;280
00005e  6060              STR      r0,[r4,#4]            ;280
000060  e9d60101          LDRD     r0,r1,[r6,#4]         ;281
000064  4408              ADD      r0,r0,r1              ;281
000066  60a0              STR      r0,[r4,#8]            ;281
000068  e012              B        |L8.144|
                  |L8.106|
00006a  a10d              ADR      r1,|L8.160|
00006c  4628              MOV      r0,r5                 ;283
00006e  f7fffffe          BL       fopen
000072  6020              STR      r0,[r4,#0]            ;283
000074  6820              LDR      r0,[r4,#0]            ;284
000076  b958              CBNZ     r0,|L8.144|
000078  462a              MOV      r2,r5                 ;285
00007a  4908              LDR      r1,|L8.156|
00007c  314c              ADDS     r1,r1,#0x4c           ;285
00007e  2000              MOVS     r0,#0                 ;285
000080  f7fffffe          BL       wpa_printf
000084  6920              LDR      r0,[r4,#0x10]         ;288
000086  f7fffffe          BL       os_free
00008a  f04f30ff          MOV      r0,#0xffffffff        ;289
00008e  e7cc              B        |L8.42|
                  |L8.144|
000090  2000              MOVS     r0,#0                 ;293
000092  e7ca              B        |L8.42|
;;;295    
                          ENDP

                  |L8.148|
000094  626c6f62          DCB      "blob://",0
000098  3a2f2f00
                  |L8.156|
                          DCD      ||.constdata||
                  |L8.160|
0000a0  726200            DCB      "rb",0
0000a3  00                DCB      0

                          AREA ||i.eap_fast_load_pac||, CODE, READONLY, ALIGN=2

                  eap_fast_load_pac PROC
;;;415     */
;;;416    int eap_fast_load_pac(struct eap_sm *sm, struct eap_fast_pac **pac_root,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;417    		      const char *pac_file)
;;;418    {
000004  b08a              SUB      sp,sp,#0x28
000006  4680              MOV      r8,r0
000008  460e              MOV      r6,r1
00000a  4614              MOV      r4,r2
;;;419    	struct eap_fast_read_ctx rc;
;;;420    	struct eap_fast_pac *pac = NULL;
00000c  2000              MOVS     r0,#0
00000e  9003              STR      r0,[sp,#0xc]
;;;421    	int count = 0;
000010  2700              MOVS     r7,#0
;;;422    	char *pos;
;;;423    	const char *err = NULL;
000012  2500              MOVS     r5,#0
;;;424    
;;;425    	if (pac_file == NULL)
000014  b91c              CBNZ     r4,|L9.30|
;;;426    		return -1;
000016  1e40              SUBS     r0,r0,#1
                  |L9.24|
;;;427    
;;;428    	if (eap_fast_init_pac_data(sm, pac_file, &rc) < 0)
;;;429    		return 0;
;;;430    
;;;431    	if (eap_fast_read_line(&rc, &pos) < 0 ||
;;;432    	    os_strcmp(pac_file_hdr, rc.buf) != 0)
;;;433    		err = "Unrecognized header line";
;;;434    
;;;435    	while (!err && eap_fast_read_line(&rc, &pos) == 0) {
;;;436    		if (os_strcmp(rc.buf, "START") == 0)
;;;437    			err = eap_fast_parse_start(&pac);
;;;438    		else if (os_strcmp(rc.buf, "END") == 0) {
;;;439    			err = eap_fast_parse_end(pac_root, &pac);
;;;440    			count++;
;;;441    		} else if (!pac)
;;;442    			err = "Unexpected line outside START/END block";
;;;443    		else if (os_strcmp(rc.buf, "PAC-Type") == 0)
;;;444    			err = eap_fast_parse_pac_type(pac, pos);
;;;445    		else if (os_strcmp(rc.buf, "PAC-Key") == 0)
;;;446    			err = eap_fast_parse_pac_key(pac, pos);
;;;447    		else if (os_strcmp(rc.buf, "PAC-Opaque") == 0)
;;;448    			err = eap_fast_parse_pac_opaque(pac, pos);
;;;449    		else if (os_strcmp(rc.buf, "A-ID") == 0)
;;;450    			err = eap_fast_parse_a_id(pac, pos);
;;;451    		else if (os_strcmp(rc.buf, "I-ID") == 0)
;;;452    			err = eap_fast_parse_i_id(pac, pos);
;;;453    		else if (os_strcmp(rc.buf, "A-ID-Info") == 0)
;;;454    			err = eap_fast_parse_a_id_info(pac, pos);
;;;455    	}
;;;456    
;;;457    	if (pac) {
;;;458    		err = "PAC block not terminated with END";
;;;459    		eap_fast_free_pac(pac);
;;;460    	}
;;;461    
;;;462    	eap_fast_deinit_pac_data(&rc);
;;;463    
;;;464    	if (err) {
;;;465    		wpa_printf(MSG_INFO, "EAP-FAST: %s in '%s:%d'",
;;;466    			   err, pac_file, rc.line);
;;;467    		return -1;
;;;468    	}
;;;469    
;;;470    	wpa_printf(MSG_DEBUG, "EAP-FAST: Read %d PAC entries from '%s'",
;;;471    		   count, pac_file);
;;;472    
;;;473    	return 0;
;;;474    }
000018  b00a              ADD      sp,sp,#0x28
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L9.30|
00001e  aa04              ADD      r2,sp,#0x10           ;428
000020  4621              MOV      r1,r4                 ;428
000022  4640              MOV      r0,r8                 ;428
000024  f7fffffe          BL       eap_fast_init_pac_data
000028  2800              CMP      r0,#0                 ;428
00002a  da01              BGE      |L9.48|
00002c  2000              MOVS     r0,#0                 ;429
00002e  e7f3              B        |L9.24|
                  |L9.48|
000030  a902              ADD      r1,sp,#8              ;431
000032  a804              ADD      r0,sp,#0x10           ;431
000034  f7fffffe          BL       eap_fast_read_line
000038  2800              CMP      r0,#0                 ;431
00003a  db05              BLT      |L9.72|
00003c  4843              LDR      r0,|L9.332|
00003e  9908              LDR      r1,[sp,#0x20]         ;432
000040  6800              LDR      r0,[r0,#0]            ;432  ; pac_file_hdr
000042  f7fffffe          BL       os_strcmp
000046  b100              CBZ      r0,|L9.74|
                  |L9.72|
000048  a541              ADR      r5,|L9.336|
                  |L9.74|
00004a  e05a              B        |L9.258|
                  |L9.76|
00004c  a147              ADR      r1,|L9.364|
00004e  9808              LDR      r0,[sp,#0x20]         ;436
000050  f7fffffe          BL       os_strcmp
000054  b920              CBNZ     r0,|L9.96|
000056  a803              ADD      r0,sp,#0xc            ;437
000058  f7fffffe          BL       eap_fast_parse_start
00005c  4605              MOV      r5,r0                 ;437
00005e  e050              B        |L9.258|
                  |L9.96|
000060  a144              ADR      r1,|L9.372|
000062  9808              LDR      r0,[sp,#0x20]         ;438
000064  f7fffffe          BL       os_strcmp
000068  b930              CBNZ     r0,|L9.120|
00006a  a903              ADD      r1,sp,#0xc            ;439
00006c  4630              MOV      r0,r6                 ;439
00006e  f7fffffe          BL       eap_fast_parse_end
000072  4605              MOV      r5,r0                 ;439
000074  1c7f              ADDS     r7,r7,#1              ;440
000076  e044              B        |L9.258|
                  |L9.120|
000078  9803              LDR      r0,[sp,#0xc]          ;441
00007a  b908              CBNZ     r0,|L9.128|
00007c  a53e              ADR      r5,|L9.376|
00007e  e040              B        |L9.258|
                  |L9.128|
000080  a147              ADR      r1,|L9.416|
000082  9808              LDR      r0,[sp,#0x20]         ;443
000084  f7fffffe          BL       os_strcmp
000088  b928              CBNZ     r0,|L9.150|
00008a  e9dd1002          LDRD     r1,r0,[sp,#8]         ;444
00008e  f7fffffe          BL       eap_fast_parse_pac_type
000092  4605              MOV      r5,r0                 ;444
000094  e035              B        |L9.258|
                  |L9.150|
000096  a145              ADR      r1,|L9.428|
000098  9808              LDR      r0,[sp,#0x20]         ;445
00009a  f7fffffe          BL       os_strcmp
00009e  b928              CBNZ     r0,|L9.172|
0000a0  e9dd1002          LDRD     r1,r0,[sp,#8]         ;446
0000a4  f7fffffe          BL       eap_fast_parse_pac_key
0000a8  4605              MOV      r5,r0                 ;446
0000aa  e02a              B        |L9.258|
                  |L9.172|
0000ac  a141              ADR      r1,|L9.436|
0000ae  9808              LDR      r0,[sp,#0x20]         ;447
0000b0  f7fffffe          BL       os_strcmp
0000b4  b928              CBNZ     r0,|L9.194|
0000b6  e9dd1002          LDRD     r1,r0,[sp,#8]         ;448
0000ba  f7fffffe          BL       eap_fast_parse_pac_opaque
0000be  4605              MOV      r5,r0                 ;448
0000c0  e01f              B        |L9.258|
                  |L9.194|
0000c2  a13f              ADR      r1,|L9.448|
0000c4  9808              LDR      r0,[sp,#0x20]         ;449
0000c6  f7fffffe          BL       os_strcmp
0000ca  b928              CBNZ     r0,|L9.216|
0000cc  e9dd1002          LDRD     r1,r0,[sp,#8]         ;450
0000d0  f7fffffe          BL       eap_fast_parse_a_id
0000d4  4605              MOV      r5,r0                 ;450
0000d6  e014              B        |L9.258|
                  |L9.216|
0000d8  a13b              ADR      r1,|L9.456|
0000da  9808              LDR      r0,[sp,#0x20]         ;451
0000dc  f7fffffe          BL       os_strcmp
0000e0  b928              CBNZ     r0,|L9.238|
0000e2  e9dd1002          LDRD     r1,r0,[sp,#8]         ;452
0000e6  f7fffffe          BL       eap_fast_parse_i_id
0000ea  4605              MOV      r5,r0                 ;452
0000ec  e009              B        |L9.258|
                  |L9.238|
0000ee  a138              ADR      r1,|L9.464|
0000f0  9808              LDR      r0,[sp,#0x20]         ;453
0000f2  f7fffffe          BL       os_strcmp
0000f6  b920              CBNZ     r0,|L9.258|
0000f8  e9dd1002          LDRD     r1,r0,[sp,#8]         ;454
0000fc  f7fffffe          BL       eap_fast_parse_a_id_info
000100  4605              MOV      r5,r0                 ;454
                  |L9.258|
000102  b92d              CBNZ     r5,|L9.272|
000104  a902              ADD      r1,sp,#8              ;435
000106  a804              ADD      r0,sp,#0x10           ;435
000108  f7fffffe          BL       eap_fast_read_line
00010c  2800              CMP      r0,#0                 ;435
00010e  d09d              BEQ      |L9.76|
                  |L9.272|
000110  9803              LDR      r0,[sp,#0xc]          ;457
000112  b118              CBZ      r0,|L9.284|
000114  a531              ADR      r5,|L9.476|
000116  9803              LDR      r0,[sp,#0xc]          ;459
000118  f7fffffe          BL       eap_fast_free_pac
                  |L9.284|
00011c  a804              ADD      r0,sp,#0x10           ;462
00011e  f7fffffe          BL       eap_fast_deinit_pac_data
000122  b155              CBZ      r5,|L9.314|
000124  9b07              LDR      r3,[sp,#0x1c]         ;465
000126  9300              STR      r3,[sp,#0]            ;465
000128  4623              MOV      r3,r4                 ;465
00012a  462a              MOV      r2,r5                 ;465
00012c  a134              ADR      r1,|L9.512|
00012e  2000              MOVS     r0,#0                 ;465
000130  f7fffffe          BL       wpa_printf
000134  f04f30ff          MOV      r0,#0xffffffff        ;467
000138  e76e              B        |L9.24|
                  |L9.314|
00013a  4623              MOV      r3,r4                 ;470
00013c  463a              MOV      r2,r7                 ;470
00013e  a136              ADR      r1,|L9.536|
000140  2000              MOVS     r0,#0                 ;470
000142  f7fffffe          BL       wpa_printf
000146  2000              MOVS     r0,#0                 ;473
000148  e766              B        |L9.24|
;;;475    
                          ENDP

00014a  0000              DCW      0x0000
                  |L9.332|
                          DCD      pac_file_hdr
                  |L9.336|
000150  556e7265          DCB      "Unrecognized header line",0
000154  636f676e
000158  697a6564
00015c  20686561
000160  64657220
000164  6c696e65
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L9.364|
00016c  53544152          DCB      "START",0
000170  5400    
000172  00                DCB      0
000173  00                DCB      0
                  |L9.372|
000174  454e4400          DCB      "END",0
                  |L9.376|
000178  556e6578          DCB      "Unexpected line outside START/END block",0
00017c  70656374
000180  6564206c
000184  696e6520
000188  6f757473
00018c  69646520
000190  53544152
000194  542f454e
000198  4420626c
00019c  6f636b00
                  |L9.416|
0001a0  5041432d          DCB      "PAC-Type",0
0001a4  54797065
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L9.428|
0001ac  5041432d          DCB      "PAC-Key",0
0001b0  4b657900
                  |L9.436|
0001b4  5041432d          DCB      "PAC-Opaque",0
0001b8  4f706171
0001bc  756500  
0001bf  00                DCB      0
                  |L9.448|
0001c0  412d4944          DCB      "A-ID",0
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L9.456|
0001c8  492d4944          DCB      "I-ID",0
0001cc  00      
0001cd  00                DCB      0
0001ce  00                DCB      0
0001cf  00                DCB      0
                  |L9.464|
0001d0  412d4944          DCB      "A-ID-Info",0
0001d4  2d496e66
0001d8  6f00    
0001da  00                DCB      0
0001db  00                DCB      0
                  |L9.476|
0001dc  50414320          DCB      "PAC block not terminated with END",0
0001e0  626c6f63
0001e4  6b206e6f
0001e8  74207465
0001ec  726d696e
0001f0  61746564
0001f4  20776974
0001f8  6820454e
0001fc  4400    
0001fe  00                DCB      0
0001ff  00                DCB      0
                  |L9.512|
000200  4541502d          DCB      "EAP-FAST: %s in '%s:%d'",0
000204  46415354
000208  3a202573
00020c  20696e20
000210  2725733a
000214  25642700
                  |L9.536|
000218  4541502d          DCB      "EAP-FAST: Read %d PAC entries from '%s'",0
00021c  46415354
000220  3a205265
000224  61642025
000228  64205041
00022c  4320656e
000230  74726965
000234  73206672
000238  6f6d2027
00023c  25732700

                          AREA ||i.eap_fast_load_pac_bin||, CODE, READONLY, ALIGN=2

                  eap_fast_load_pac_bin PROC
;;;748     */
;;;749    int eap_fast_load_pac_bin(struct eap_sm *sm, struct eap_fast_pac **pac_root,
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;750    			  const char *pac_file)
;;;751    {
000004  b082              SUB      sp,sp,#8
000006  468a              MOV      r10,r1
000008  4690              MOV      r8,r2
;;;752    	const struct wpa_config_blob *blob = NULL;
00000a  2700              MOVS     r7,#0
;;;753    	u8 *buf, *end, *pos;
;;;754    	size_t len, count = 0;
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;755    	struct eap_fast_pac *pac, *prev;
;;;756    
;;;757    	*pac_root = NULL;
000010  f8ca0000          STR      r0,[r10,#0]
;;;758    
;;;759    	if (pac_file == NULL)
000014  f1b80f00          CMP      r8,#0
000018  d103              BNE      |L10.34|
;;;760    		return -1;
00001a  1e40              SUBS     r0,r0,#1
                  |L10.28|
;;;761    
;;;762    	if (os_strncmp(pac_file, "blob://", 7) == 0) {
;;;763    		blob = eap_get_config_blob(sm, pac_file + 7);
;;;764    		if (blob == NULL) {
;;;765    			wpa_printf(MSG_INFO, "EAP-FAST: No PAC blob '%s' - "
;;;766    				   "assume no PAC entries have been "
;;;767    				   "provisioned", pac_file + 7);
;;;768    			return 0;
;;;769    		}
;;;770    		buf = blob->data;
;;;771    		len = blob->len;
;;;772    	} else {
;;;773    		buf = (u8 *) os_readfile(pac_file, &len);
;;;774    		if (buf == NULL) {
;;;775    			wpa_printf(MSG_INFO, "EAP-FAST: No PAC file '%s' - "
;;;776    				   "assume no PAC entries have been "
;;;777    				   "provisioned", pac_file);
;;;778    			return 0;
;;;779    		}
;;;780    	}
;;;781    
;;;782    	if (len == 0) {
;;;783    		if (blob == NULL)
;;;784    			os_free(buf);
;;;785    		return 0;
;;;786    	}
;;;787    
;;;788    	if (len < 6 || WPA_GET_BE32(buf) != EAP_FAST_PAC_BINARY_MAGIC ||
;;;789    	    WPA_GET_BE16(buf + 4) != EAP_FAST_PAC_BINARY_FORMAT_VERSION) {
;;;790    		wpa_printf(MSG_INFO, "EAP-FAST: Invalid PAC file '%s' (bin)",
;;;791    			   pac_file);
;;;792    		if (blob == NULL)
;;;793    			os_free(buf);
;;;794    		return -1;
;;;795    	}
;;;796    
;;;797    	pac = prev = NULL;
;;;798    	pos = buf + 6;
;;;799    	end = buf + len;
;;;800    	while (pos < end) {
;;;801    		if (end - pos < 2 + 32 + 2 + 2)
;;;802    			goto parse_fail;
;;;803    
;;;804    		pac = os_zalloc(sizeof(*pac));
;;;805    		if (pac == NULL)
;;;806    			goto parse_fail;
;;;807    
;;;808    		pac->pac_type = WPA_GET_BE16(pos);
;;;809    		pos += 2;
;;;810    		os_memcpy(pac->pac_key, pos, EAP_FAST_PAC_KEY_LEN);
;;;811    		pos += EAP_FAST_PAC_KEY_LEN;
;;;812    		pac->pac_opaque_len = WPA_GET_BE16(pos);
;;;813    		pos += 2;
;;;814    		if (pos + pac->pac_opaque_len + 2 > end)
;;;815    			goto parse_fail;
;;;816    		pac->pac_opaque = os_malloc(pac->pac_opaque_len);
;;;817    		if (pac->pac_opaque == NULL)
;;;818    			goto parse_fail;
;;;819    		os_memcpy(pac->pac_opaque, pos, pac->pac_opaque_len);
;;;820    		pos += pac->pac_opaque_len;
;;;821    		pac->pac_info_len = WPA_GET_BE16(pos);
;;;822    		pos += 2;
;;;823    		if (pos + pac->pac_info_len > end)
;;;824    			goto parse_fail;
;;;825    		pac->pac_info = os_malloc(pac->pac_info_len);
;;;826    		if (pac->pac_info == NULL)
;;;827    			goto parse_fail;
;;;828    		os_memcpy(pac->pac_info, pos, pac->pac_info_len);
;;;829    		pos += pac->pac_info_len;
;;;830    		eap_fast_pac_get_a_id(pac);
;;;831    
;;;832    		count++;
;;;833    		if (prev)
;;;834    			prev->next = pac;
;;;835    		else
;;;836    			*pac_root = pac;
;;;837    		prev = pac;
;;;838    	}
;;;839    
;;;840    	if (blob == NULL)
;;;841    		os_free(buf);
;;;842    
;;;843    	wpa_printf(MSG_DEBUG, "EAP-FAST: Read %lu PAC entries from '%s' (bin)",
;;;844    		   (unsigned long) count, pac_file);
;;;845    
;;;846    	return 0;
;;;847    
;;;848    parse_fail:
;;;849    	wpa_printf(MSG_INFO, "EAP-FAST: Failed to parse PAC file '%s' (bin)",
;;;850    		   pac_file);
;;;851    	if (blob == NULL)
;;;852    		os_free(buf);
;;;853    	if (pac)
;;;854    		eap_fast_free_pac(pac);
;;;855    	return -1;
;;;856    }
00001c  b005              ADD      sp,sp,#0x14
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.34|
000022  2207              MOVS     r2,#7                 ;762
000024  a166              ADR      r1,|L10.448|
000026  4640              MOV      r0,r8                 ;762
000028  f7fffffe          BL       os_strncmp
00002c  b990              CBNZ     r0,|L10.84|
00002e  f1080107          ADD      r1,r8,#7              ;763
000032  9802              LDR      r0,[sp,#8]            ;763
000034  f7fffffe          BL       eap_get_config_blob
000038  4607              MOV      r7,r0                 ;763
00003a  b93f              CBNZ     r7,|L10.76|
00003c  f1080207          ADD      r2,r8,#7              ;765
000040  4961              LDR      r1,|L10.456|
000042  2000              MOVS     r0,#0                 ;765
000044  f7fffffe          BL       wpa_printf
000048  2000              MOVS     r0,#0                 ;768
00004a  e7e7              B        |L10.28|
                  |L10.76|
00004c  687e              LDR      r6,[r7,#4]            ;770
00004e  68b8              LDR      r0,[r7,#8]            ;771
000050  9001              STR      r0,[sp,#4]            ;771
000052  e00d              B        |L10.112|
                  |L10.84|
000054  a901              ADD      r1,sp,#4              ;773
000056  4640              MOV      r0,r8                 ;773
000058  f7fffffe          BL       os_readfile
00005c  4606              MOV      r6,r0                 ;773
00005e  b93e              CBNZ     r6,|L10.112|
000060  4642              MOV      r2,r8                 ;775
000062  4959              LDR      r1,|L10.456|
000064  314c              ADDS     r1,r1,#0x4c           ;775
000066  2000              MOVS     r0,#0                 ;775
000068  f7fffffe          BL       wpa_printf
00006c  2000              MOVS     r0,#0                 ;778
00006e  e7d5              B        |L10.28|
                  |L10.112|
000070  9801              LDR      r0,[sp,#4]            ;782
000072  b928              CBNZ     r0,|L10.128|
000074  b917              CBNZ     r7,|L10.124|
000076  4630              MOV      r0,r6                 ;784
000078  f7fffffe          BL       os_free
                  |L10.124|
00007c  2000              MOVS     r0,#0                 ;785
00007e  e7cd              B        |L10.28|
                  |L10.128|
000080  9801              LDR      r0,[sp,#4]            ;788
000082  2806              CMP      r0,#6                 ;788
000084  d311              BCC      |L10.170|
000086  7830              LDRB     r0,[r6,#0]            ;788
000088  0600              LSLS     r0,r0,#24             ;788
00008a  7871              LDRB     r1,[r6,#1]            ;788
00008c  ea404001          ORR      r0,r0,r1,LSL #16      ;788
000090  78b1              LDRB     r1,[r6,#2]            ;788
000092  ea402001          ORR      r0,r0,r1,LSL #8       ;788
000096  78f1              LDRB     r1,[r6,#3]            ;788
000098  4308              ORRS     r0,r0,r1              ;788
00009a  494c              LDR      r1,|L10.460|
00009c  4288              CMP      r0,r1                 ;788
00009e  d104              BNE      |L10.170|
0000a0  7970              LDRB     r0,[r6,#5]            ;789
0000a2  7931              LDRB     r1,[r6,#4]            ;789
0000a4  ea502001          ORRS     r0,r0,r1,LSL #8       ;789
0000a8  d00b              BEQ      |L10.194|
                  |L10.170|
0000aa  4642              MOV      r2,r8                 ;790
0000ac  a148              ADR      r1,|L10.464|
0000ae  2000              MOVS     r0,#0                 ;790
0000b0  f7fffffe          BL       wpa_printf
0000b4  b917              CBNZ     r7,|L10.188|
0000b6  4630              MOV      r0,r6                 ;793
0000b8  f7fffffe          BL       os_free
                  |L10.188|
0000bc  f04f30ff          MOV      r0,#0xffffffff        ;794
0000c0  e7ac              B        |L10.28|
                  |L10.194|
0000c2  2400              MOVS     r4,#0                 ;797
0000c4  46a3              MOV      r11,r4                ;797
0000c6  1db5              ADDS     r5,r6,#6              ;798
0000c8  9801              LDR      r0,[sp,#4]            ;799
0000ca  eb060900          ADD      r9,r6,r0              ;799
0000ce  e059              B        |L10.388|
                  |L10.208|
0000d0  eba90005          SUB      r0,r9,r5              ;801
0000d4  2826              CMP      r0,#0x26              ;801
0000d6  da00              BGE      |L10.218|
0000d8  e062              B        |L10.416|
                  |L10.218|
0000da  2050              MOVS     r0,#0x50              ;804
0000dc  f7fffffe          BL       os_zalloc
0000e0  4604              MOV      r4,r0                 ;804
0000e2  b904              CBNZ     r4,|L10.230|
0000e4  e05c              B        |L10.416|
                  |L10.230|
0000e6  7868              LDRB     r0,[r5,#1]            ;808
0000e8  7829              LDRB     r1,[r5,#0]            ;808
0000ea  ea402001          ORR      r0,r0,r1,LSL #8       ;808
0000ee  f8a4004c          STRH     r0,[r4,#0x4c]         ;808
0000f2  1cad              ADDS     r5,r5,#2              ;809
0000f4  2220              MOVS     r2,#0x20              ;810
0000f6  4629              MOV      r1,r5                 ;810
0000f8  1d20              ADDS     r0,r4,#4              ;810
0000fa  f7fffffe          BL       os_memcpy
0000fe  3520              ADDS     r5,r5,#0x20           ;811
000100  7868              LDRB     r0,[r5,#1]            ;812
000102  7829              LDRB     r1,[r5,#0]            ;812
000104  ea402001          ORR      r0,r0,r1,LSL #8       ;812
000108  62a0              STR      r0,[r4,#0x28]         ;812
00010a  1cad              ADDS     r5,r5,#2              ;813
00010c  6aa0              LDR      r0,[r4,#0x28]         ;814
00010e  4428              ADD      r0,r0,r5              ;814
000110  1c80              ADDS     r0,r0,#2              ;814
000112  4548              CMP      r0,r9                 ;814
000114  d900              BLS      |L10.280|
000116  e043              B        |L10.416|
                  |L10.280|
000118  6aa0              LDR      r0,[r4,#0x28]         ;816
00011a  f7fffffe          BL       os_malloc
00011e  6260              STR      r0,[r4,#0x24]         ;816
000120  6a60              LDR      r0,[r4,#0x24]         ;817
000122  b900              CBNZ     r0,|L10.294|
000124  e03c              B        |L10.416|
                  |L10.294|
000126  4629              MOV      r1,r5                 ;819
000128  e9d40209          LDRD     r0,r2,[r4,#0x24]      ;819
00012c  f7fffffe          BL       os_memcpy
000130  6aa0              LDR      r0,[r4,#0x28]         ;820
000132  4405              ADD      r5,r5,r0              ;820
000134  7868              LDRB     r0,[r5,#1]            ;821
000136  7829              LDRB     r1,[r5,#0]            ;821
000138  ea402001          ORR      r0,r0,r1,LSL #8       ;821
00013c  6320              STR      r0,[r4,#0x30]         ;821
00013e  1cad              ADDS     r5,r5,#2              ;822
000140  6b20              LDR      r0,[r4,#0x30]         ;823
000142  4428              ADD      r0,r0,r5              ;823
000144  4548              CMP      r0,r9                 ;823
000146  d900              BLS      |L10.330|
000148  e02a              B        |L10.416|
                  |L10.330|
00014a  6b20              LDR      r0,[r4,#0x30]         ;825
00014c  f7fffffe          BL       os_malloc
000150  62e0              STR      r0,[r4,#0x2c]         ;825
000152  6ae0              LDR      r0,[r4,#0x2c]         ;826
000154  b900              CBNZ     r0,|L10.344|
000156  e023              B        |L10.416|
                  |L10.344|
000158  4629              MOV      r1,r5                 ;828
00015a  e9d4020b          LDRD     r0,r2,[r4,#0x2c]      ;828
00015e  f7fffffe          BL       os_memcpy
000162  6b20              LDR      r0,[r4,#0x30]         ;829
000164  4405              ADD      r5,r5,r0              ;829
000166  4620              MOV      r0,r4                 ;830
000168  f7fffffe          BL       eap_fast_pac_get_a_id
00016c  9800              LDR      r0,[sp,#0]            ;832
00016e  1c40              ADDS     r0,r0,#1              ;832
000170  9000              STR      r0,[sp,#0]            ;832
000172  f1bb0f00          CMP      r11,#0                ;833
000176  d002              BEQ      |L10.382|
000178  f8cb4000          STR      r4,[r11,#0]           ;834
00017c  e001              B        |L10.386|
                  |L10.382|
00017e  f8ca4000          STR      r4,[r10,#0]           ;836
                  |L10.386|
000182  46a3              MOV      r11,r4                ;837
                  |L10.388|
000184  454d              CMP      r5,r9                 ;800
000186  d3a3              BCC      |L10.208|
000188  b917              CBNZ     r7,|L10.400|
00018a  4630              MOV      r0,r6                 ;841
00018c  f7fffffe          BL       os_free
                  |L10.400|
000190  4643              MOV      r3,r8                 ;843
000192  a119              ADR      r1,|L10.504|
000194  2000              MOVS     r0,#0                 ;843
000196  9a00              LDR      r2,[sp,#0]            ;843
000198  f7fffffe          BL       wpa_printf
00019c  2000              MOVS     r0,#0                 ;846
00019e  e73d              B        |L10.28|
                  |L10.416|
0001a0  4642              MOV      r2,r8                 ;849
0001a2  a121              ADR      r1,|L10.552|
0001a4  2000              MOVS     r0,#0                 ;849
0001a6  f7fffffe          BL       wpa_printf
0001aa  b917              CBNZ     r7,|L10.434|
0001ac  4630              MOV      r0,r6                 ;852
0001ae  f7fffffe          BL       os_free
                  |L10.434|
0001b2  b114              CBZ      r4,|L10.442|
0001b4  4620              MOV      r0,r4                 ;854
0001b6  f7fffffe          BL       eap_fast_free_pac
                  |L10.442|
0001ba  f04f30ff          MOV      r0,#0xffffffff        ;855
0001be  e72d              B        |L10.28|
;;;857    
                          ENDP

                  |L10.448|
0001c0  626c6f62          DCB      "blob://",0
0001c4  3a2f2f00
                  |L10.456|
                          DCD      ||.constdata||
                  |L10.460|
                          DCD      0x6ae4920c
                  |L10.464|
0001d0  4541502d          DCB      "EAP-FAST: Invalid PAC file '%s' (bin)",0
0001d4  46415354
0001d8  3a20496e
0001dc  76616c69
0001e0  64205041
0001e4  43206669
0001e8  6c652027
0001ec  25732720
0001f0  2862696e
0001f4  2900    
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L10.504|
0001f8  4541502d          DCB      "EAP-FAST: Read %lu PAC entries from '%s' (bin)",0
0001fc  46415354
000200  3a205265
000204  61642025
000208  6c752050
00020c  41432065
000210  6e747269
000214  65732066
000218  726f6d20
00021c  27257327
000220  20286269
000224  6e2900  
000227  00                DCB      0
                  |L10.552|
000228  4541502d          DCB      "EAP-FAST: Failed to parse PAC file '%s' (bin)",0
00022c  46415354
000230  3a204661
000234  696c6564
000238  20746f20
00023c  70617273
000240  65205041
000244  43206669
000248  6c652027
00024c  25732720
000250  2862696e
000254  2900    
000256  00                DCB      0
000257  00                DCB      0

                          AREA ||i.eap_fast_pac_get_a_id||, CODE, READONLY, ALIGN=1

                  eap_fast_pac_get_a_id PROC
;;;702    
;;;703    static void eap_fast_pac_get_a_id(struct eap_fast_pac *pac)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;704    {
000004  4604              MOV      r4,r0
;;;705    	u8 *pos, *end;
;;;706    	u16 type, len;
;;;707    
;;;708    	pos = pac->pac_info;
000006  6ae5              LDR      r5,[r4,#0x2c]
;;;709    	end = pos + pac->pac_info_len;
000008  6b20              LDR      r0,[r4,#0x30]
00000a  eb000805          ADD      r8,r0,r5
;;;710    
;;;711    	while (pos + 4 < end) {
00000e  e032              B        |L11.118|
                  |L11.16|
;;;712    		type = WPA_GET_BE16(pos);
000010  7868              LDRB     r0,[r5,#1]
000012  7829              LDRB     r1,[r5,#0]
000014  ea402701          ORR      r7,r0,r1,LSL #8
;;;713    		pos += 2;
000018  1cad              ADDS     r5,r5,#2
;;;714    		len = WPA_GET_BE16(pos);
00001a  7868              LDRB     r0,[r5,#1]
00001c  7829              LDRB     r1,[r5,#0]
00001e  ea402601          ORR      r6,r0,r1,LSL #8
;;;715    		pos += 2;
000022  1cad              ADDS     r5,r5,#2
;;;716    		if (pos + len > end)
000024  19a8              ADDS     r0,r5,r6
000026  4540              CMP      r0,r8
000028  d900              BLS      |L11.44|
;;;717    			break;
00002a  e027              B        |L11.124|
                  |L11.44|
;;;718    
;;;719    		if (type == PAC_TYPE_A_ID) {
00002c  2f04              CMP      r7,#4
00002e  d10f              BNE      |L11.80|
;;;720    			os_free(pac->a_id);
000030  6b60              LDR      r0,[r4,#0x34]
000032  f7fffffe          BL       os_free
;;;721    			pac->a_id = os_malloc(len);
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       os_malloc
00003c  6360              STR      r0,[r4,#0x34]
;;;722    			if (pac->a_id == NULL)
00003e  6b60              LDR      r0,[r4,#0x34]
000040  b900              CBNZ     r0,|L11.68|
;;;723    				break;
000042  e01b              B        |L11.124|
                  |L11.68|
;;;724    			os_memcpy(pac->a_id, pos, len);
000044  4632              MOV      r2,r6
000046  4629              MOV      r1,r5
000048  6b60              LDR      r0,[r4,#0x34]
00004a  f7fffffe          BL       os_memcpy
;;;725    			pac->a_id_len = len;
00004e  63a6              STR      r6,[r4,#0x38]
                  |L11.80|
;;;726    		}
;;;727    
;;;728    		if (type == PAC_TYPE_A_ID_INFO) {
000050  2f07              CMP      r7,#7
000052  d10f              BNE      |L11.116|
;;;729    			os_free(pac->a_id_info);
000054  6c60              LDR      r0,[r4,#0x44]
000056  f7fffffe          BL       os_free
;;;730    			pac->a_id_info = os_malloc(len);
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       os_malloc
000060  6460              STR      r0,[r4,#0x44]
;;;731    			if (pac->a_id_info == NULL)
000062  6c60              LDR      r0,[r4,#0x44]
000064  b900              CBNZ     r0,|L11.104|
;;;732    				break;
000066  e009              B        |L11.124|
                  |L11.104|
;;;733    			os_memcpy(pac->a_id_info, pos, len);
000068  4632              MOV      r2,r6
00006a  4629              MOV      r1,r5
00006c  6c60              LDR      r0,[r4,#0x44]
00006e  f7fffffe          BL       os_memcpy
;;;734    			pac->a_id_info_len = len;
000072  64a6              STR      r6,[r4,#0x48]
                  |L11.116|
;;;735    		}
;;;736    
;;;737    		pos += len;
000074  4435              ADD      r5,r5,r6
                  |L11.118|
000076  1d28              ADDS     r0,r5,#4              ;711
000078  4540              CMP      r0,r8                 ;711
00007a  d3c9              BCC      |L11.16|
                  |L11.124|
00007c  bf00              NOP                            ;717
;;;738    	}
;;;739    }
00007e  e8bd81f0          POP      {r4-r8,pc}
;;;740    
                          ENDP


                          AREA ||i.eap_fast_pac_list_truncate||, CODE, READONLY, ALIGN=1

                  eap_fast_pac_list_truncate PROC
;;;667     */
;;;668    size_t eap_fast_pac_list_truncate(struct eap_fast_pac *pac_root,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;669    				  size_t max_len)
;;;670    {
000004  4680              MOV      r8,r0
000006  460f              MOV      r7,r1
;;;671    	struct eap_fast_pac *pac, *prev;
;;;672    	size_t count;
;;;673    
;;;674    	pac = pac_root;
000008  4644              MOV      r4,r8
;;;675    	prev = NULL;
00000a  2500              MOVS     r5,#0
;;;676    	count = 0;
00000c  2600              MOVS     r6,#0
;;;677    
;;;678    	while (pac) {
00000e  e005              B        |L12.28|
                  |L12.16|
;;;679    		count++;
000010  1c76              ADDS     r6,r6,#1
;;;680    		if (count > max_len)
000012  42be              CMP      r6,r7
000014  d900              BLS      |L12.24|
;;;681    			break;
000016  e003              B        |L12.32|
                  |L12.24|
;;;682    		prev = pac;
000018  4625              MOV      r5,r4
;;;683    		pac = pac->next;
00001a  6824              LDR      r4,[r4,#0]
                  |L12.28|
00001c  2c00              CMP      r4,#0                 ;678
00001e  d1f7              BNE      |L12.16|
                  |L12.32|
000020  bf00              NOP                            ;681
;;;684    	}
;;;685    
;;;686    	if (count <= max_len || prev == NULL)
000022  42be              CMP      r6,r7
000024  d900              BLS      |L12.40|
000026  b915              CBNZ     r5,|L12.46|
                  |L12.40|
;;;687    		return 0;
000028  2000              MOVS     r0,#0
                  |L12.42|
;;;688    
;;;689    	count = 0;
;;;690    	prev->next = NULL;
;;;691    
;;;692    	while (pac) {
;;;693    		prev = pac;
;;;694    		pac = pac->next;
;;;695    		eap_fast_free_pac(prev);
;;;696    		count++;
;;;697    	}
;;;698    
;;;699    	return count;
;;;700    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L12.46|
00002e  2600              MOVS     r6,#0                 ;689
000030  2000              MOVS     r0,#0                 ;690
000032  6028              STR      r0,[r5,#0]            ;690
000034  e005              B        |L12.66|
                  |L12.54|
000036  4625              MOV      r5,r4                 ;693
000038  6824              LDR      r4,[r4,#0]            ;694
00003a  4628              MOV      r0,r5                 ;695
00003c  f7fffffe          BL       eap_fast_free_pac
000040  1c76              ADDS     r6,r6,#1              ;696
                  |L12.66|
000042  2c00              CMP      r4,#0                 ;692
000044  d1f7              BNE      |L12.54|
000046  4630              MOV      r0,r6                 ;699
000048  e7ef              B        |L12.42|
;;;701    
                          ENDP


                          AREA ||i.eap_fast_parse_a_id||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_a_id PROC
;;;377    
;;;378    static const char * eap_fast_parse_a_id(struct eap_fast_pac *pac, char *pos)
000000  b570              PUSH     {r4-r6,lr}
;;;379    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;380    	os_free(pac->a_id);
000006  6b60              LDR      r0,[r4,#0x34]
000008  f7fffffe          BL       os_free
;;;381    	pac->a_id = eap_fast_parse_hex(pos, &pac->a_id_len);
00000c  f1040138          ADD      r1,r4,#0x38
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       eap_fast_parse_hex
000016  6360              STR      r0,[r4,#0x34]
;;;382    	if (pac->a_id == NULL)
000018  6b60              LDR      r0,[r4,#0x34]
00001a  b908              CBNZ     r0,|L13.32|
;;;383    		return "Invalid A-ID";
00001c  a001              ADR      r0,|L13.36|
                  |L13.30|
;;;384    	return NULL;
;;;385    }
00001e  bd70              POP      {r4-r6,pc}
                  |L13.32|
000020  2000              MOVS     r0,#0                 ;384
000022  e7fc              B        |L13.30|
;;;386    
                          ENDP

                  |L13.36|
000024  496e7661          DCB      "Invalid A-ID",0
000028  6c696420
00002c  412d4944
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.eap_fast_parse_a_id_info||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_a_id_info PROC
;;;397    
;;;398    static const char * eap_fast_parse_a_id_info(struct eap_fast_pac *pac,
000000  b570              PUSH     {r4-r6,lr}
;;;399    					     char *pos)
;;;400    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;401    	os_free(pac->a_id_info);
000006  6c60              LDR      r0,[r4,#0x44]
000008  f7fffffe          BL       os_free
;;;402    	pac->a_id_info = eap_fast_parse_hex(pos, &pac->a_id_info_len);
00000c  f1040148          ADD      r1,r4,#0x48
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       eap_fast_parse_hex
000016  6460              STR      r0,[r4,#0x44]
;;;403    	if (pac->a_id_info == NULL)
000018  6c60              LDR      r0,[r4,#0x44]
00001a  b908              CBNZ     r0,|L14.32|
;;;404    		return "Invalid A-ID-Info";
00001c  a001              ADR      r0,|L14.36|
                  |L14.30|
;;;405    	return NULL;
;;;406    }
00001e  bd70              POP      {r4-r6,pc}
                  |L14.32|
000020  2000              MOVS     r0,#0                 ;405
000022  e7fc              B        |L14.30|
;;;407    
                          ENDP

                  |L14.36|
000024  496e7661          DCB      "Invalid A-ID-Info",0
000028  6c696420
00002c  412d4944
000030  2d496e66
000034  6f00    
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i.eap_fast_parse_end||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_end PROC
;;;317    
;;;318    static const char * eap_fast_parse_end(struct eap_fast_pac **pac_root,
000000  4602              MOV      r2,r0
;;;319    				       struct eap_fast_pac **pac)
;;;320    {
;;;321    	if (*pac == NULL)
000002  6808              LDR      r0,[r1,#0]
000004  b908              CBNZ     r0,|L15.10|
;;;322    		return "END line without START";
000006  a009              ADR      r0,|L15.44|
                  |L15.8|
;;;323    	if (*pac_root) {
;;;324    		struct eap_fast_pac *end = *pac_root;
;;;325    		while (end->next)
;;;326    			end = end->next;
;;;327    		end->next = *pac;
;;;328    	} else
;;;329    		*pac_root = *pac;
;;;330    
;;;331    	*pac = NULL;
;;;332    	return NULL;
;;;333    }
000008  4770              BX       lr
                  |L15.10|
00000a  6810              LDR      r0,[r2,#0]            ;323
00000c  b140              CBZ      r0,|L15.32|
00000e  6810              LDR      r0,[r2,#0]            ;324
000010  e000              B        |L15.20|
                  |L15.18|
000012  6800              LDR      r0,[r0,#0]            ;326
                  |L15.20|
000014  6803              LDR      r3,[r0,#0]            ;325
000016  2b00              CMP      r3,#0                 ;325
000018  d1fb              BNE      |L15.18|
00001a  680b              LDR      r3,[r1,#0]            ;327
00001c  6003              STR      r3,[r0,#0]            ;327
00001e  e001              B        |L15.36|
                  |L15.32|
000020  6808              LDR      r0,[r1,#0]            ;329
000022  6010              STR      r0,[r2,#0]            ;329
                  |L15.36|
000024  2000              MOVS     r0,#0                 ;331
000026  6008              STR      r0,[r1,#0]            ;331
000028  bf00              NOP                            ;332
00002a  e7ed              B        |L15.8|
;;;334    
                          ENDP

                  |L15.44|
00002c  454e4420          DCB      "END line without START",0
000030  6c696e65
000034  20776974
000038  686f7574
00003c  20535441
000040  525400  
000043  00                DCB      0

                          AREA ||i.eap_fast_parse_hex||, CODE, READONLY, ALIGN=1

                  eap_fast_parse_hex PROC
;;;237    
;;;238    static u8 * eap_fast_parse_hex(const char *value, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;239    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;240    	int hlen;
;;;241    	u8 *buf;
;;;242    
;;;243    	if (value == NULL)
000008  b917              CBNZ     r7,|L16.16|
;;;244    		return NULL;
00000a  2000              MOVS     r0,#0
                  |L16.12|
;;;245    	hlen = os_strlen(value);
;;;246    	if (hlen & 1)
;;;247    		return NULL;
;;;248    	*len = hlen / 2;
;;;249    	buf = os_malloc(*len);
;;;250    	if (buf == NULL)
;;;251    		return NULL;
;;;252    	if (hexstr2bin(value, buf, *len)) {
;;;253    		os_free(buf);
;;;254    		return NULL;
;;;255    	}
;;;256    	return buf;
;;;257    }
00000c  e8bd81f0          POP      {r4-r8,pc}
                  |L16.16|
000010  4638              MOV      r0,r7                 ;245
000012  f7fffffe          BL       os_strlen
000016  4604              MOV      r4,r0                 ;245
000018  f0140f01          TST      r4,#1                 ;246
00001c  d001              BEQ      |L16.34|
00001e  2000              MOVS     r0,#0                 ;247
000020  e7f4              B        |L16.12|
                  |L16.34|
000022  4620              MOV      r0,r4                 ;248
000024  eb0471d4          ADD      r1,r4,r4,LSR #31      ;248
000028  1049              ASRS     r1,r1,#1              ;248
00002a  6029              STR      r1,[r5,#0]            ;248
00002c  6828              LDR      r0,[r5,#0]            ;249
00002e  f7fffffe          BL       os_malloc
000032  4606              MOV      r6,r0                 ;249
000034  b90e              CBNZ     r6,|L16.58|
000036  2000              MOVS     r0,#0                 ;251
000038  e7e8              B        |L16.12|
                  |L16.58|
00003a  4631              MOV      r1,r6                 ;252
00003c  4638              MOV      r0,r7                 ;252
00003e  682a              LDR      r2,[r5,#0]            ;252
000040  f7fffffe          BL       hexstr2bin
000044  b120              CBZ      r0,|L16.80|
000046  4630              MOV      r0,r6                 ;253
000048  f7fffffe          BL       os_free
00004c  2000              MOVS     r0,#0                 ;254
00004e  e7dd              B        |L16.12|
                  |L16.80|
000050  4630              MOV      r0,r6                 ;256
000052  e7db              B        |L16.12|
;;;258    
                          ENDP


                          AREA ||i.eap_fast_parse_i_id||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_i_id PROC
;;;387    
;;;388    static const char * eap_fast_parse_i_id(struct eap_fast_pac *pac, char *pos)
000000  b570              PUSH     {r4-r6,lr}
;;;389    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;390    	os_free(pac->i_id);
000006  6be0              LDR      r0,[r4,#0x3c]
000008  f7fffffe          BL       os_free
;;;391    	pac->i_id = eap_fast_parse_hex(pos, &pac->i_id_len);
00000c  f1040140          ADD      r1,r4,#0x40
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       eap_fast_parse_hex
000016  63e0              STR      r0,[r4,#0x3c]
;;;392    	if (pac->i_id == NULL)
000018  6be0              LDR      r0,[r4,#0x3c]
00001a  b908              CBNZ     r0,|L17.32|
;;;393    		return "Invalid I-ID";
00001c  a001              ADR      r0,|L17.36|
                  |L17.30|
;;;394    	return NULL;
;;;395    }
00001e  bd70              POP      {r4-r6,pc}
                  |L17.32|
000020  2000              MOVS     r0,#0                 ;394
000022  e7fc              B        |L17.30|
;;;396    
                          ENDP

                  |L17.36|
000024  496e7661          DCB      "Invalid I-ID",0
000028  6c696420
00002c  492d4944
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.eap_fast_parse_pac_key||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_pac_key PROC
;;;348    
;;;349    static const char * eap_fast_parse_pac_key(struct eap_fast_pac *pac, char *pos)
000000  b5f8              PUSH     {r3-r7,lr}
;;;350    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;351    	u8 *key;
;;;352    	size_t key_len;
;;;353    
;;;354    	key = eap_fast_parse_hex(pos, &key_len);
000006  4669              MOV      r1,sp
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       eap_fast_parse_hex
00000e  4604              MOV      r4,r0
;;;355    	if (key == NULL || key_len != EAP_FAST_PAC_KEY_LEN) {
000010  b114              CBZ      r4,|L18.24|
000012  9800              LDR      r0,[sp,#0]
000014  2820              CMP      r0,#0x20
000016  d004              BEQ      |L18.34|
                  |L18.24|
;;;356    		os_free(key);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       os_free
;;;357    		return "Invalid PAC-Key";
00001e  a006              ADR      r0,|L18.56|
                  |L18.32|
;;;358    	}
;;;359    
;;;360    	os_memcpy(pac->pac_key, key, EAP_FAST_PAC_KEY_LEN);
;;;361    	os_free(key);
;;;362    
;;;363    	return NULL;
;;;364    }
000020  bdf8              POP      {r3-r7,pc}
                  |L18.34|
000022  2220              MOVS     r2,#0x20              ;360
000024  4621              MOV      r1,r4                 ;360
000026  1d30              ADDS     r0,r6,#4              ;360
000028  f7fffffe          BL       os_memcpy
00002c  4620              MOV      r0,r4                 ;361
00002e  f7fffffe          BL       os_free
000032  2000              MOVS     r0,#0                 ;363
000034  e7f4              B        |L18.32|
;;;365    
                          ENDP

000036  0000              DCW      0x0000
                  |L18.56|
000038  496e7661          DCB      "Invalid PAC-Key",0
00003c  6c696420
000040  5041432d
000044  4b657900

                          AREA ||i.eap_fast_parse_pac_opaque||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_pac_opaque PROC
;;;366    
;;;367    static const char * eap_fast_parse_pac_opaque(struct eap_fast_pac *pac,
000000  b570              PUSH     {r4-r6,lr}
;;;368    					      char *pos)
;;;369    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;370    	os_free(pac->pac_opaque);
000006  6a60              LDR      r0,[r4,#0x24]
000008  f7fffffe          BL       os_free
;;;371    	pac->pac_opaque = eap_fast_parse_hex(pos, &pac->pac_opaque_len);
00000c  f1040128          ADD      r1,r4,#0x28
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       eap_fast_parse_hex
000016  6260              STR      r0,[r4,#0x24]
;;;372    	if (pac->pac_opaque == NULL)
000018  6a60              LDR      r0,[r4,#0x24]
00001a  b908              CBNZ     r0,|L19.32|
;;;373    		return "Invalid PAC-Opaque";
00001c  a001              ADR      r0,|L19.36|
                  |L19.30|
;;;374    	return NULL;
;;;375    }
00001e  bd70              POP      {r4-r6,pc}
                  |L19.32|
000020  2000              MOVS     r0,#0                 ;374
000022  e7fc              B        |L19.30|
;;;376    
                          ENDP

                  |L19.36|
000024  496e7661          DCB      "Invalid PAC-Opaque",0
000028  6c696420
00002c  5041432d
000030  4f706171
000034  756500  
000037  00                DCB      0

                          AREA ||i.eap_fast_parse_pac_type||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_pac_type PROC
;;;335    
;;;336    static const char * eap_fast_parse_pac_type(struct eap_fast_pac *pac,
000000  b570              PUSH     {r4-r6,lr}
;;;337    					    char *pos)
;;;338    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;339    	pac->pac_type = atoi(pos);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       atoi
00000c  f8a4004c          STRH     r0,[r4,#0x4c]
;;;340    	if (pac->pac_type != PAC_TYPE_TUNNEL_PAC &&
000010  f8b4004c          LDRH     r0,[r4,#0x4c]
000014  2801              CMP      r0,#1
000016  d009              BEQ      |L20.44|
;;;341    	    pac->pac_type != PAC_TYPE_USER_AUTHORIZATION &&
000018  f8b4004c          LDRH     r0,[r4,#0x4c]
00001c  2803              CMP      r0,#3
00001e  d005              BEQ      |L20.44|
;;;342    	    pac->pac_type != PAC_TYPE_MACHINE_AUTHENTICATION)
000020  f8b4004c          LDRH     r0,[r4,#0x4c]
000024  2802              CMP      r0,#2
000026  d001              BEQ      |L20.44|
;;;343    		return "Unrecognized PAC-Type";
000028  a001              ADR      r0,|L20.48|
                  |L20.42|
;;;344    
;;;345    	return NULL;
;;;346    }
00002a  bd70              POP      {r4-r6,pc}
                  |L20.44|
00002c  2000              MOVS     r0,#0                 ;345
00002e  e7fc              B        |L20.42|
;;;347    
                          ENDP

                  |L20.48|
000030  556e7265          DCB      "Unrecognized PAC-Type",0
000034  636f676e
000038  697a6564
00003c  20504143
000040  2d547970
000044  6500    
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.eap_fast_parse_start||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_start PROC
;;;304    
;;;305    static const char * eap_fast_parse_start(struct eap_fast_pac **pac)
000000  b510              PUSH     {r4,lr}
;;;306    {
000002  4604              MOV      r4,r0
;;;307    	if (*pac)
000004  6820              LDR      r0,[r4,#0]
000006  b108              CBZ      r0,|L21.12|
;;;308    		return "START line without END";
000008  a007              ADR      r0,|L21.40|
                  |L21.10|
;;;309    
;;;310    	*pac = os_zalloc(sizeof(struct eap_fast_pac));
;;;311    	if (*pac == NULL)
;;;312    		return "No memory for PAC entry";
;;;313    	(*pac)->pac_type = PAC_TYPE_TUNNEL_PAC;
;;;314    	return NULL;
;;;315    }
00000a  bd10              POP      {r4,pc}
                  |L21.12|
00000c  2050              MOVS     r0,#0x50              ;310
00000e  f7fffffe          BL       os_zalloc
000012  6020              STR      r0,[r4,#0]            ;310
000014  6820              LDR      r0,[r4,#0]            ;311
000016  b908              CBNZ     r0,|L21.28|
000018  a009              ADR      r0,|L21.64|
00001a  e7f6              B        |L21.10|
                  |L21.28|
00001c  2001              MOVS     r0,#1                 ;313
00001e  6821              LDR      r1,[r4,#0]            ;313
000020  f8a1004c          STRH     r0,[r1,#0x4c]         ;313
000024  2000              MOVS     r0,#0                 ;314
000026  e7f0              B        |L21.10|
;;;316    
                          ENDP

                  |L21.40|
000028  53544152          DCB      "START line without END",0
00002c  54206c69
000030  6e652077
000034  6974686f
000038  75742045
00003c  4e4400  
00003f  00                DCB      0
                  |L21.64|
000040  4e6f206d          DCB      "No memory for PAC entry",0
000044  656d6f72
000048  7920666f
00004c  72205041
000050  4320656e
000054  74727900

                          AREA ||i.eap_fast_read_line||, CODE, READONLY, ALIGN=1

                  eap_fast_read_line PROC
;;;194    
;;;195    static int eap_fast_read_line(struct eap_fast_read_ctx *rc, char **value)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;196    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;197    	char *pos;
;;;198    
;;;199    	rc->line++;
000008  68e0              LDR      r0,[r4,#0xc]
00000a  1c40              ADDS     r0,r0,#1
00000c  60e0              STR      r0,[r4,#0xc]
;;;200    	if (rc->f) {
00000e  6820              LDR      r0,[r4,#0]
000010  b148              CBZ      r0,|L22.38|
;;;201    		if (fgets(rc->buf, rc->buf_len, rc->f) == NULL)
000012  6822              LDR      r2,[r4,#0]
000014  e9d40104          LDRD     r0,r1,[r4,#0x10]
000018  f7fffffe          BL       fgets
00001c  bb28              CBNZ     r0,|L22.106|
;;;202    			return -1;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L22.34|
;;;203    	} else {
;;;204    		const char *l_end;
;;;205    		size_t len;
;;;206    		if (rc->pos >= rc->end)
;;;207    			return -1;
;;;208    		l_end = rc->pos;
;;;209    		while (l_end < rc->end && *l_end != '\n')
;;;210    			l_end++;
;;;211    		len = l_end - rc->pos;
;;;212    		if (len >= rc->buf_len)
;;;213    			len = rc->buf_len - 1;
;;;214    		os_memcpy(rc->buf, rc->pos, len);
;;;215    		rc->buf[len] = '\0';
;;;216    		rc->pos = l_end + 1;
;;;217    	}
;;;218    
;;;219    	rc->buf[rc->buf_len - 1] = '\0';
;;;220    	pos = rc->buf;
;;;221    	while (*pos != '\0') {
;;;222    		if (*pos == '\n' || *pos == '\r') {
;;;223    			*pos = '\0';
;;;224    			break;
;;;225    		}
;;;226    		pos++;
;;;227    	}
;;;228    
;;;229    	pos = os_strchr(rc->buf, '=');
;;;230    	if (pos)
;;;231    		*pos++ = '\0';
;;;232    	*value = pos;
;;;233    
;;;234    	return 0;
;;;235    }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L22.38|
000026  e9d40101          LDRD     r0,r1,[r4,#4]         ;206
00002a  4288              CMP      r0,r1                 ;206
00002c  d302              BCC      |L22.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;207
000032  e7f6              B        |L22.34|
                  |L22.52|
000034  6866              LDR      r6,[r4,#4]            ;208
000036  e000              B        |L22.58|
                  |L22.56|
000038  1c76              ADDS     r6,r6,#1              ;210
                  |L22.58|
00003a  68a0              LDR      r0,[r4,#8]            ;209
00003c  42b0              CMP      r0,r6                 ;209
00003e  d902              BLS      |L22.70|
000040  7830              LDRB     r0,[r6,#0]            ;209
000042  280a              CMP      r0,#0xa               ;209
000044  d1f8              BNE      |L22.56|
                  |L22.70|
000046  6860              LDR      r0,[r4,#4]            ;211
000048  1a37              SUBS     r7,r6,r0              ;211
00004a  6960              LDR      r0,[r4,#0x14]         ;212
00004c  42b8              CMP      r0,r7                 ;212
00004e  d801              BHI      |L22.84|
000050  6960              LDR      r0,[r4,#0x14]         ;213
000052  1e47              SUBS     r7,r0,#1              ;213
                  |L22.84|
000054  463a              MOV      r2,r7                 ;214
000056  6861              LDR      r1,[r4,#4]            ;214
000058  6920              LDR      r0,[r4,#0x10]         ;214
00005a  f7fffffe          BL       os_memcpy
00005e  2000              MOVS     r0,#0                 ;215
000060  6921              LDR      r1,[r4,#0x10]         ;215
000062  55c8              STRB     r0,[r1,r7]            ;215
000064  1c70              ADDS     r0,r6,#1              ;216
000066  6060              STR      r0,[r4,#4]            ;216
000068  bf00              NOP                            ;217
                  |L22.106|
00006a  2100              MOVS     r1,#0                 ;219
00006c  e9d42004          LDRD     r2,r0,[r4,#0x10]      ;219
000070  1e40              SUBS     r0,r0,#1              ;219
000072  5411              STRB     r1,[r2,r0]            ;219
000074  6925              LDR      r5,[r4,#0x10]         ;220
000076  e009              B        |L22.140|
                  |L22.120|
000078  7828              LDRB     r0,[r5,#0]            ;222
00007a  280a              CMP      r0,#0xa               ;222
00007c  d002              BEQ      |L22.132|
00007e  7828              LDRB     r0,[r5,#0]            ;222
000080  280d              CMP      r0,#0xd               ;222
000082  d102              BNE      |L22.138|
                  |L22.132|
000084  2000              MOVS     r0,#0                 ;223
000086  7028              STRB     r0,[r5,#0]            ;223
000088  e003              B        |L22.146|
                  |L22.138|
00008a  1c6d              ADDS     r5,r5,#1              ;226
                  |L22.140|
00008c  7828              LDRB     r0,[r5,#0]            ;221
00008e  2800              CMP      r0,#0                 ;221
000090  d1f2              BNE      |L22.120|
                  |L22.146|
000092  bf00              NOP                            ;224
000094  213d              MOVS     r1,#0x3d              ;229
000096  6920              LDR      r0,[r4,#0x10]         ;229
000098  f7fffffe          BL       os_strchr
00009c  4605              MOV      r5,r0                 ;229
00009e  b115              CBZ      r5,|L22.166|
0000a0  2000              MOVS     r0,#0                 ;231
0000a2  f8050b01          STRB     r0,[r5],#1            ;231
                  |L22.166|
0000a6  f8c85000          STR      r5,[r8,#0]            ;232
0000aa  2000              MOVS     r0,#0                 ;234
0000ac  e7b9              B        |L22.34|
;;;236    
                          ENDP


                          AREA ||i.eap_fast_remove_pac||, CODE, READONLY, ALIGN=1

                  eap_fast_remove_pac PROC
;;;91     
;;;92     static void eap_fast_remove_pac(struct eap_fast_pac **pac_root,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;93     				struct eap_fast_pac **pac_current,
;;;94     				const u8 *a_id, size_t a_id_len, u16 pac_type)
;;;95     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  461f              MOV      r7,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;96     	struct eap_fast_pac *pac, *prev;
;;;97     
;;;98     	pac = *pac_root;
000010  682c              LDR      r4,[r5,#0]
;;;99     	prev = NULL;
000012  f04f0800          MOV      r8,#0
;;;100    
;;;101    	while (pac) {
000016  e020              B        |L23.90|
                  |L23.24|
;;;102    		if (pac->pac_type == pac_type && pac->a_id_len == a_id_len &&
000018  f8b4004c          LDRH     r0,[r4,#0x4c]
00001c  4550              CMP      r0,r10
00001e  d11a              BNE      |L23.86|
000020  6ba0              LDR      r0,[r4,#0x38]
000022  42b8              CMP      r0,r7
000024  d117              BNE      |L23.86|
;;;103    		    os_memcmp(pac->a_id, a_id, a_id_len) == 0) {
000026  463a              MOV      r2,r7
000028  4649              MOV      r1,r9
00002a  6b60              LDR      r0,[r4,#0x34]
00002c  f7fffffe          BL       os_memcmp
000030  b988              CBNZ     r0,|L23.86|
;;;104    			if (prev == NULL)
000032  f1b80f00          CMP      r8,#0
000036  d102              BNE      |L23.62|
;;;105    				*pac_root = pac->next;
000038  6820              LDR      r0,[r4,#0]
00003a  6028              STR      r0,[r5,#0]
00003c  e002              B        |L23.68|
                  |L23.62|
;;;106    			else
;;;107    				prev->next = pac->next;
00003e  6820              LDR      r0,[r4,#0]
000040  f8c80000          STR      r0,[r8,#0]
                  |L23.68|
;;;108    			if (*pac_current == pac)
000044  6830              LDR      r0,[r6,#0]
000046  42a0              CMP      r0,r4
000048  d101              BNE      |L23.78|
;;;109    				*pac_current = NULL;
00004a  2000              MOVS     r0,#0
00004c  6030              STR      r0,[r6,#0]
                  |L23.78|
;;;110    			eap_fast_free_pac(pac);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       eap_fast_free_pac
;;;111    			break;
000054  e003              B        |L23.94|
                  |L23.86|
;;;112    		}
;;;113    		prev = pac;
000056  46a0              MOV      r8,r4
;;;114    		pac = pac->next;
000058  6824              LDR      r4,[r4,#0]
                  |L23.90|
00005a  2c00              CMP      r4,#0                 ;101
00005c  d1dc              BNE      |L23.24|
                  |L23.94|
00005e  bf00              NOP                            ;111
;;;115    	}
;;;116    }
000060  e8bd87f0          POP      {r4-r10,pc}
;;;117    
                          ENDP


                          AREA ||i.eap_fast_save_pac||, CODE, READONLY, ALIGN=2

                  eap_fast_save_pac PROC
;;;616     */
;;;617    int eap_fast_save_pac(struct eap_sm *sm, struct eap_fast_pac *pac_root,
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;618    		      const char *pac_file)
;;;619    {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;620    	struct eap_fast_pac *pac;
;;;621    	int ret, count = 0;
00000a  f04f0800          MOV      r8,#0
;;;622    	char *buf, *pos;
;;;623    	size_t buf_len;
;;;624    
;;;625    	if (pac_file == NULL)
00000e  b91d              CBNZ     r5,|L24.24|
;;;626    		return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L24.20|
;;;627    
;;;628    	buf_len = 1024;
;;;629    	pos = buf = os_malloc(buf_len);
;;;630    	if (buf == NULL)
;;;631    		return -1;
;;;632    
;;;633    	ret = os_snprintf(pos, buf + buf_len - pos, "%s\n", pac_file_hdr);
;;;634    	if (ret < 0 || ret >= buf + buf_len - pos) {
;;;635    		os_free(buf);
;;;636    		return -1;
;;;637    	}
;;;638    	pos += ret;
;;;639    
;;;640    	pac = pac_root;
;;;641    	while (pac) {
;;;642    		if (eap_fast_add_pac_data(pac, &buf, &pos, &buf_len)) {
;;;643    			os_free(buf);
;;;644    			return -1;
;;;645    		}
;;;646    		count++;
;;;647    		pac = pac->next;
;;;648    	}
;;;649    
;;;650    	if (eap_fast_write_pac(sm, pac_file, buf, pos - buf)) {
;;;651    		os_free(buf);
;;;652    		return -1;
;;;653    	}
;;;654    
;;;655    	wpa_printf(MSG_DEBUG, "EAP-FAST: Wrote %d PAC entries into '%s'",
;;;656    		   count, pac_file);
;;;657    
;;;658    	return 0;
;;;659    }
000014  e8bd83fe          POP      {r1-r9,pc}
                  |L24.24|
000018  f44f6080          MOV      r0,#0x400             ;628
00001c  9000              STR      r0,[sp,#0]            ;628
00001e  9800              LDR      r0,[sp,#0]            ;629
000020  f7fffffe          BL       os_malloc
000024  9002              STR      r0,[sp,#8]            ;629
000026  9001              STR      r0,[sp,#4]            ;629
000028  9802              LDR      r0,[sp,#8]            ;630
00002a  b910              CBNZ     r0,|L24.50|
00002c  f04f30ff          MOV      r0,#0xffffffff        ;631
000030  e7f0              B        |L24.20|
                  |L24.50|
000032  9a00              LDR      r2,[sp,#0]            ;633
000034  9802              LDR      r0,[sp,#8]            ;633
000036  4410              ADD      r0,r0,r2              ;633
000038  9a01              LDR      r2,[sp,#4]            ;633
00003a  1a81              SUBS     r1,r0,r2              ;633
00003c  4821              LDR      r0,|L24.196|
00003e  a222              ADR      r2,|L24.200|
000040  6803              LDR      r3,[r0,#0]            ;633  ; pac_file_hdr
000042  9801              LDR      r0,[sp,#4]            ;633
000044  f7fffffe          BL       os_snprintf
000048  4604              MOV      r4,r0                 ;633
00004a  2c00              CMP      r4,#0                 ;634
00004c  db06              BLT      |L24.92|
00004e  9900              LDR      r1,[sp,#0]            ;634
000050  9802              LDR      r0,[sp,#8]            ;634
000052  4408              ADD      r0,r0,r1              ;634
000054  9901              LDR      r1,[sp,#4]            ;634
000056  1a40              SUBS     r0,r0,r1              ;634
000058  42a0              CMP      r0,r4                 ;634
00005a  dc05              BGT      |L24.104|
                  |L24.92|
00005c  9802              LDR      r0,[sp,#8]            ;635
00005e  f7fffffe          BL       os_free
000062  f04f30ff          MOV      r0,#0xffffffff        ;636
000066  e7d5              B        |L24.20|
                  |L24.104|
000068  9801              LDR      r0,[sp,#4]            ;638
00006a  4420              ADD      r0,r0,r4              ;638
00006c  9001              STR      r0,[sp,#4]            ;638
00006e  463e              MOV      r6,r7                 ;640
000070  e00f              B        |L24.146|
                  |L24.114|
000072  466b              MOV      r3,sp                 ;642
000074  aa01              ADD      r2,sp,#4              ;642
000076  a902              ADD      r1,sp,#8              ;642
000078  4630              MOV      r0,r6                 ;642
00007a  f7fffffe          BL       eap_fast_add_pac_data
00007e  b128              CBZ      r0,|L24.140|
000080  9802              LDR      r0,[sp,#8]            ;643
000082  f7fffffe          BL       os_free
000086  f04f30ff          MOV      r0,#0xffffffff        ;644
00008a  e7c3              B        |L24.20|
                  |L24.140|
00008c  f1080801          ADD      r8,r8,#1              ;646
000090  6836              LDR      r6,[r6,#0]            ;647
                  |L24.146|
000092  2e00              CMP      r6,#0                 ;641
000094  d1ed              BNE      |L24.114|
000096  e9dd0101          LDRD     r0,r1,[sp,#4]         ;650
00009a  1a43              SUBS     r3,r0,r1              ;650
00009c  460a              MOV      r2,r1                 ;650
00009e  4629              MOV      r1,r5                 ;650
0000a0  4648              MOV      r0,r9                 ;650
0000a2  f7fffffe          BL       eap_fast_write_pac
0000a6  b120              CBZ      r0,|L24.178|
0000a8  9802              LDR      r0,[sp,#8]            ;651
0000aa  f7fffffe          BL       os_free
0000ae  1e70              SUBS     r0,r6,#1              ;652
0000b0  e7b0              B        |L24.20|
                  |L24.178|
0000b2  462b              MOV      r3,r5                 ;655
0000b4  4642              MOV      r2,r8                 ;655
0000b6  a105              ADR      r1,|L24.204|
0000b8  2000              MOVS     r0,#0                 ;655
0000ba  f7fffffe          BL       wpa_printf
0000be  2000              MOVS     r0,#0                 ;658
0000c0  e7a8              B        |L24.20|
;;;660    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L24.196|
                          DCD      pac_file_hdr
                  |L24.200|
0000c8  25730a00          DCB      "%s\n",0
                  |L24.204|
0000cc  4541502d          DCB      "EAP-FAST: Wrote %d PAC entries into '%s'",0
0000d0  46415354
0000d4  3a205772
0000d8  6f746520
0000dc  25642050
0000e0  41432065
0000e4  6e747269
0000e8  65732069
0000ec  6e746f20
0000f0  27257327
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0

                          AREA ||i.eap_fast_save_pac_bin||, CODE, READONLY, ALIGN=2

                  eap_fast_save_pac_bin PROC
;;;865     */
;;;866    int eap_fast_save_pac_bin(struct eap_sm *sm, struct eap_fast_pac *pac_root,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;867    			  const char *pac_file)
;;;868    {
000004  4683              MOV      r11,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;869    	size_t len, count = 0;
00000a  f04f0a00          MOV      r10,#0
;;;870    	struct eap_fast_pac *pac;
;;;871    	u8 *buf, *pos;
;;;872    
;;;873    	len = 6;
00000e  f04f0906          MOV      r9,#6
;;;874    	pac = pac_root;
000012  463d              MOV      r5,r7
;;;875    	while (pac) {
000014  e011              B        |L25.58|
                  |L25.22|
;;;876    		if (pac->pac_opaque_len > 65535 ||
000016  6aa8              LDR      r0,[r5,#0x28]
000018  f5b03f80          CMP      r0,#0x10000
00001c  d203              BCS      |L25.38|
;;;877    		    pac->pac_info_len > 65535)
00001e  6b28              LDR      r0,[r5,#0x30]
000020  f5b03f80          CMP      r0,#0x10000
000024  d303              BCC      |L25.46|
                  |L25.38|
;;;878    			return -1;
000026  f04f30ff          MOV      r0,#0xffffffff
                  |L25.42|
;;;879    		len += 2 + EAP_FAST_PAC_KEY_LEN + 2 + pac->pac_opaque_len +
;;;880    			2 + pac->pac_info_len;
;;;881    		pac = pac->next;
;;;882    	}
;;;883    
;;;884    	buf = os_malloc(len);
;;;885    	if (buf == NULL)
;;;886    		return -1;
;;;887    
;;;888    	pos = buf;
;;;889    	WPA_PUT_BE32(pos, EAP_FAST_PAC_BINARY_MAGIC);
;;;890    	pos += 4;
;;;891    	WPA_PUT_BE16(pos, EAP_FAST_PAC_BINARY_FORMAT_VERSION);
;;;892    	pos += 2;
;;;893    
;;;894    	pac = pac_root;
;;;895    	while (pac) {
;;;896    		WPA_PUT_BE16(pos, pac->pac_type);
;;;897    		pos += 2;
;;;898    		os_memcpy(pos, pac->pac_key, EAP_FAST_PAC_KEY_LEN);
;;;899    		pos += EAP_FAST_PAC_KEY_LEN;
;;;900    		WPA_PUT_BE16(pos, pac->pac_opaque_len);
;;;901    		pos += 2;
;;;902    		os_memcpy(pos, pac->pac_opaque, pac->pac_opaque_len);
;;;903    		pos += pac->pac_opaque_len;
;;;904    		WPA_PUT_BE16(pos, pac->pac_info_len);
;;;905    		pos += 2;
;;;906    		os_memcpy(pos, pac->pac_info, pac->pac_info_len);
;;;907    		pos += pac->pac_info_len;
;;;908    
;;;909    		pac = pac->next;
;;;910    		count++;
;;;911    	}
;;;912    
;;;913    	if (eap_fast_write_pac(sm, pac_file, (char *) buf, len)) {
;;;914    		os_free(buf);
;;;915    		return -1;
;;;916    	}
;;;917    
;;;918    	wpa_printf(MSG_DEBUG, "EAP-FAST: Wrote %lu PAC entries into '%s' "
;;;919    		   "(bin)", (unsigned long) count, pac_file);
;;;920    
;;;921    	return 0;
;;;922    }
00002a  e8bd9ff0          POP      {r4-r12,pc}
                  |L25.46|
00002e  6aa8              LDR      r0,[r5,#0x28]         ;879
000030  3026              ADDS     r0,r0,#0x26           ;879
000032  6b29              LDR      r1,[r5,#0x30]         ;879
000034  4408              ADD      r0,r0,r1              ;879
000036  4481              ADD      r9,r9,r0              ;879
000038  682d              LDR      r5,[r5,#0]            ;881
                  |L25.58|
00003a  2d00              CMP      r5,#0                 ;875
00003c  d1eb              BNE      |L25.22|
00003e  4648              MOV      r0,r9                 ;884
000040  f7fffffe          BL       os_malloc
000044  4606              MOV      r6,r0                 ;884
000046  b90e              CBNZ     r6,|L25.76|
000048  1e68              SUBS     r0,r5,#1              ;886
00004a  e7ee              B        |L25.42|
                  |L25.76|
00004c  4634              MOV      r4,r6                 ;888
00004e  bf00              NOP                            ;889
000050  206a              MOVS     r0,#0x6a              ;889
000052  7020              STRB     r0,[r4,#0]            ;889
000054  20e4              MOVS     r0,#0xe4              ;889
000056  7060              STRB     r0,[r4,#1]            ;889
000058  2092              MOVS     r0,#0x92              ;889
00005a  70a0              STRB     r0,[r4,#2]            ;889
00005c  200c              MOVS     r0,#0xc               ;889
00005e  70e0              STRB     r0,[r4,#3]            ;889
000060  bf00              NOP                            ;889
000062  1d24              ADDS     r4,r4,#4              ;890
000064  bf00              NOP                            ;891
000066  2000              MOVS     r0,#0                 ;891
000068  7020              STRB     r0,[r4,#0]            ;891
00006a  7060              STRB     r0,[r4,#1]            ;891
00006c  bf00              NOP                            ;891
00006e  1ca4              ADDS     r4,r4,#2              ;892
000070  463d              MOV      r5,r7                 ;894
000072  e030              B        |L25.214|
                  |L25.116|
000074  bf00              NOP                            ;896
000076  f8b5004c          LDRH     r0,[r5,#0x4c]         ;896
00007a  1200              ASRS     r0,r0,#8              ;896
00007c  7020              STRB     r0,[r4,#0]            ;896
00007e  f8b5004c          LDRH     r0,[r5,#0x4c]         ;896
000082  7060              STRB     r0,[r4,#1]            ;896
000084  bf00              NOP                            ;896
000086  1ca4              ADDS     r4,r4,#2              ;897
000088  2220              MOVS     r2,#0x20              ;898
00008a  1d29              ADDS     r1,r5,#4              ;898
00008c  4620              MOV      r0,r4                 ;898
00008e  f7fffffe          BL       os_memcpy
000092  3420              ADDS     r4,r4,#0x20           ;899
000094  bf00              NOP                            ;900
000096  6aa8              LDR      r0,[r5,#0x28]         ;900
000098  0a00              LSRS     r0,r0,#8              ;900
00009a  7020              STRB     r0,[r4,#0]            ;900
00009c  6aa8              LDR      r0,[r5,#0x28]         ;900
00009e  7060              STRB     r0,[r4,#1]            ;900
0000a0  bf00              NOP                            ;900
0000a2  1ca4              ADDS     r4,r4,#2              ;901
0000a4  4620              MOV      r0,r4                 ;902
0000a6  e9d51209          LDRD     r1,r2,[r5,#0x24]      ;902
0000aa  f7fffffe          BL       os_memcpy
0000ae  6aa8              LDR      r0,[r5,#0x28]         ;903
0000b0  4404              ADD      r4,r4,r0              ;903
0000b2  bf00              NOP                            ;904
0000b4  6b28              LDR      r0,[r5,#0x30]         ;904
0000b6  0a00              LSRS     r0,r0,#8              ;904
0000b8  7020              STRB     r0,[r4,#0]            ;904
0000ba  6b28              LDR      r0,[r5,#0x30]         ;904
0000bc  7060              STRB     r0,[r4,#1]            ;904
0000be  bf00              NOP                            ;904
0000c0  1ca4              ADDS     r4,r4,#2              ;905
0000c2  4620              MOV      r0,r4                 ;906
0000c4  e9d5120b          LDRD     r1,r2,[r5,#0x2c]      ;906
0000c8  f7fffffe          BL       os_memcpy
0000cc  6b28              LDR      r0,[r5,#0x30]         ;907
0000ce  4404              ADD      r4,r4,r0              ;907
0000d0  682d              LDR      r5,[r5,#0]            ;909
0000d2  f10a0a01          ADD      r10,r10,#1            ;910
                  |L25.214|
0000d6  2d00              CMP      r5,#0                 ;895
0000d8  d1cc              BNE      |L25.116|
0000da  464b              MOV      r3,r9                 ;913
0000dc  4632              MOV      r2,r6                 ;913
0000de  4641              MOV      r1,r8                 ;913
0000e0  4658              MOV      r0,r11                ;913
0000e2  f7fffffe          BL       eap_fast_write_pac
0000e6  b120              CBZ      r0,|L25.242|
0000e8  4630              MOV      r0,r6                 ;914
0000ea  f7fffffe          BL       os_free
0000ee  1e68              SUBS     r0,r5,#1              ;915
0000f0  e79b              B        |L25.42|
                  |L25.242|
0000f2  4643              MOV      r3,r8                 ;918
0000f4  4652              MOV      r2,r10                ;918
0000f6  a103              ADR      r1,|L25.260|
0000f8  2000              MOVS     r0,#0                 ;918
0000fa  f7fffffe          BL       wpa_printf
0000fe  2000              MOVS     r0,#0                 ;921
000100  e793              B        |L25.42|
                          ENDP

000102  0000              DCW      0x0000
                  |L25.260|
000104  4541502d          DCB      "EAP-FAST: Wrote %lu PAC entries into '%s' (bin)",0
000108  46415354
00010c  3a205772
000110  6f746520
000114  256c7520
000118  50414320
00011c  656e7472
000120  69657320
000124  696e746f
000128  20272573
00012c  27202862
000130  696e2900

                          AREA ||i.eap_fast_write||, CODE, READONLY, ALIGN=2

                  eap_fast_write PROC
;;;476    
;;;477    static void eap_fast_write(char **buf, char **pos, size_t *buf_len,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;478    			   const char *field, const u8 *data,
;;;479    			   size_t len, int txt)
;;;480    {
000004  b081              SUB      sp,sp,#4
000006  4607              MOV      r7,r0
000008  460c              MOV      r4,r1
00000a  4690              MOV      r8,r2
00000c  f8dd903c          LDR      r9,[sp,#0x3c]
;;;481    	size_t i, need;
;;;482    	int ret;
;;;483    	char *end;
;;;484    
;;;485    	if (data == NULL || buf == NULL || *buf == NULL ||
000010  980e              LDR      r0,[sp,#0x38]
000012  b148              CBZ      r0,|L26.40|
000014  b147              CBZ      r7,|L26.40|
000016  6838              LDR      r0,[r7,#0]
000018  b130              CBZ      r0,|L26.40|
;;;486    	    pos == NULL || *pos == NULL || *pos < *buf)
00001a  b12c              CBZ      r4,|L26.40|
00001c  6820              LDR      r0,[r4,#0]
00001e  b118              CBZ      r0,|L26.40|
000020  6820              LDR      r0,[r4,#0]
000022  6839              LDR      r1,[r7,#0]
000024  4288              CMP      r0,r1
000026  d202              BCS      |L26.46|
                  |L26.40|
;;;487    		return;
;;;488    
;;;489    	need = os_strlen(field) + len * 2 + 30;
;;;490    	if (txt)
;;;491    		need += os_strlen(field) + len + 20;
;;;492    
;;;493    	if (*pos - *buf + need > *buf_len) {
;;;494    		char *nbuf = os_realloc(*buf, *buf_len + need);
;;;495    		if (nbuf == NULL) {
;;;496    			os_free(*buf);
;;;497    			*buf = NULL;
;;;498    			return;
;;;499    		}
;;;500    		*buf = nbuf;
;;;501    		*buf_len += need;
;;;502    	}
;;;503    	end = *buf + *buf_len;
;;;504    
;;;505    	ret = os_snprintf(*pos, end - *pos, "%s=", field);
;;;506    	if (ret < 0 || ret >= end - *pos)
;;;507    		return;
;;;508    	*pos += ret;
;;;509    	*pos += wpa_snprintf_hex(*pos, end - *pos, data, len);
;;;510    	ret = os_snprintf(*pos, end - *pos, "\n");
;;;511    	if (ret < 0 || ret >= end - *pos)
;;;512    		return;
;;;513    	*pos += ret;
;;;514    
;;;515    	if (txt) {
;;;516    		ret = os_snprintf(*pos, end - *pos, "%s-txt=", field);
;;;517    		if (ret < 0 || ret >= end - *pos)
;;;518    			return;
;;;519    		*pos += ret;
;;;520    		for (i = 0; i < len; i++) {
;;;521    			ret = os_snprintf(*pos, end - *pos, "%c", data[i]);
;;;522    			if (ret < 0 || ret >= end - *pos)
;;;523    				return;
;;;524    			*pos += ret;
;;;525    		}
;;;526    		ret = os_snprintf(*pos, end - *pos, "\n");
;;;527    		if (ret < 0 || ret >= end - *pos)
;;;528    			return;
;;;529    		*pos += ret;
;;;530    	}
;;;531    }
000028  b005              ADD      sp,sp,#0x14
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L26.46|
00002e  9804              LDR      r0,[sp,#0x10]         ;489
000030  f7fffffe          BL       os_strlen
000034  eb000049          ADD      r0,r0,r9,LSL #1       ;489
000038  f1000a1e          ADD      r10,r0,#0x1e          ;489
00003c  9810              LDR      r0,[sp,#0x40]         ;490
00003e  b128              CBZ      r0,|L26.76|
000040  9804              LDR      r0,[sp,#0x10]         ;491
000042  f7fffffe          BL       os_strlen
000046  4448              ADD      r0,r0,r9              ;491
000048  3014              ADDS     r0,r0,#0x14           ;491
00004a  4482              ADD      r10,r10,r0            ;491
                  |L26.76|
00004c  6820              LDR      r0,[r4,#0]            ;493
00004e  6839              LDR      r1,[r7,#0]            ;493
000050  1a40              SUBS     r0,r0,r1              ;493
000052  4450              ADD      r0,r0,r10             ;493
000054  f8d81000          LDR      r1,[r8,#0]            ;493
000058  4288              CMP      r0,r1                 ;493
00005a  d917              BLS      |L26.140|
00005c  f8d82000          LDR      r2,[r8,#0]            ;494
000060  eb02010a          ADD      r1,r2,r10             ;494
000064  6838              LDR      r0,[r7,#0]            ;494
000066  f7fffffe          BL       os_realloc
00006a  9000              STR      r0,[sp,#0]            ;494
00006c  9800              LDR      r0,[sp,#0]            ;495
00006e  b928              CBNZ     r0,|L26.124|
000070  6838              LDR      r0,[r7,#0]            ;496
000072  f7fffffe          BL       os_free
000076  2000              MOVS     r0,#0                 ;497
000078  6038              STR      r0,[r7,#0]            ;497
00007a  e7d5              B        |L26.40|
                  |L26.124|
00007c  9800              LDR      r0,[sp,#0]            ;500
00007e  6038              STR      r0,[r7,#0]            ;500
000080  f8d80000          LDR      r0,[r8,#0]            ;501
000084  4450              ADD      r0,r0,r10             ;501
000086  f8c80000          STR      r0,[r8,#0]            ;501
00008a  bf00              NOP                            ;502
                  |L26.140|
00008c  6838              LDR      r0,[r7,#0]            ;503
00008e  f8d81000          LDR      r1,[r8,#0]            ;503
000092  1846              ADDS     r6,r0,r1              ;503
000094  6822              LDR      r2,[r4,#0]            ;505
000096  1ab1              SUBS     r1,r6,r2              ;505
000098  4610              MOV      r0,r2                 ;505
00009a  a236              ADR      r2,|L26.372|
00009c  9b04              LDR      r3,[sp,#0x10]         ;505
00009e  f7fffffe          BL       os_snprintf
0000a2  4605              MOV      r5,r0                 ;505
0000a4  2d00              CMP      r5,#0                 ;506
0000a6  db03              BLT      |L26.176|
0000a8  6820              LDR      r0,[r4,#0]            ;506
0000aa  1a30              SUBS     r0,r6,r0              ;506
0000ac  42a8              CMP      r0,r5                 ;506
0000ae  dc00              BGT      |L26.178|
                  |L26.176|
0000b0  e7ba              B        |L26.40|
                  |L26.178|
0000b2  6820              LDR      r0,[r4,#0]            ;508
0000b4  4428              ADD      r0,r0,r5              ;508
0000b6  6020              STR      r0,[r4,#0]            ;508
0000b8  6822              LDR      r2,[r4,#0]            ;509
0000ba  1ab1              SUBS     r1,r6,r2              ;509
0000bc  4610              MOV      r0,r2                 ;509
0000be  464b              MOV      r3,r9                 ;509
0000c0  9a0e              LDR      r2,[sp,#0x38]         ;509
0000c2  f7fffffe          BL       wpa_snprintf_hex
0000c6  6821              LDR      r1,[r4,#0]            ;509
0000c8  4408              ADD      r0,r0,r1              ;509
0000ca  6020              STR      r0,[r4,#0]            ;509
0000cc  6822              LDR      r2,[r4,#0]            ;510
0000ce  1ab1              SUBS     r1,r6,r2              ;510
0000d0  4610              MOV      r0,r2                 ;510
0000d2  a229              ADR      r2,|L26.376|
0000d4  f7fffffe          BL       os_snprintf
0000d8  4605              MOV      r5,r0                 ;510
0000da  2d00              CMP      r5,#0                 ;511
0000dc  db03              BLT      |L26.230|
0000de  6820              LDR      r0,[r4,#0]            ;511
0000e0  1a30              SUBS     r0,r6,r0              ;511
0000e2  42a8              CMP      r0,r5                 ;511
0000e4  dc00              BGT      |L26.232|
                  |L26.230|
0000e6  e79f              B        |L26.40|
                  |L26.232|
0000e8  6820              LDR      r0,[r4,#0]            ;513
0000ea  4428              ADD      r0,r0,r5              ;513
0000ec  6020              STR      r0,[r4,#0]            ;513
0000ee  9810              LDR      r0,[sp,#0x40]         ;515
0000f0  b3d0              CBZ      r0,|L26.360|
0000f2  6822              LDR      r2,[r4,#0]            ;516
0000f4  1ab1              SUBS     r1,r6,r2              ;516
0000f6  4610              MOV      r0,r2                 ;516
0000f8  a220              ADR      r2,|L26.380|
0000fa  9b04              LDR      r3,[sp,#0x10]         ;516
0000fc  f7fffffe          BL       os_snprintf
000100  4605              MOV      r5,r0                 ;516
000102  2d00              CMP      r5,#0                 ;517
000104  db03              BLT      |L26.270|
000106  6820              LDR      r0,[r4,#0]            ;517
000108  1a30              SUBS     r0,r6,r0              ;517
00010a  42a8              CMP      r0,r5                 ;517
00010c  dc00              BGT      |L26.272|
                  |L26.270|
00010e  e78b              B        |L26.40|
                  |L26.272|
000110  6820              LDR      r0,[r4,#0]            ;519
000112  4428              ADD      r0,r0,r5              ;519
000114  6020              STR      r0,[r4,#0]            ;519
000116  f04f0b00          MOV      r11,#0                ;520
00011a  e015              B        |L26.328|
                  |L26.284|
00011c  9a0e              LDR      r2,[sp,#0x38]         ;521
00011e  f812300b          LDRB     r3,[r2,r11]           ;521
000122  6822              LDR      r2,[r4,#0]            ;521
000124  1ab1              SUBS     r1,r6,r2              ;521
000126  4610              MOV      r0,r2                 ;521
000128  a216              ADR      r2,|L26.388|
00012a  f7fffffe          BL       os_snprintf
00012e  4605              MOV      r5,r0                 ;521
000130  2d00              CMP      r5,#0                 ;522
000132  db03              BLT      |L26.316|
000134  6820              LDR      r0,[r4,#0]            ;522
000136  1a30              SUBS     r0,r6,r0              ;522
000138  42a8              CMP      r0,r5                 ;522
00013a  dc00              BGT      |L26.318|
                  |L26.316|
00013c  e774              B        |L26.40|
                  |L26.318|
00013e  6820              LDR      r0,[r4,#0]            ;524
000140  4428              ADD      r0,r0,r5              ;524
000142  6020              STR      r0,[r4,#0]            ;524
000144  f10b0b01          ADD      r11,r11,#1            ;520
                  |L26.328|
000148  45cb              CMP      r11,r9                ;520
00014a  d3e7              BCC      |L26.284|
00014c  6822              LDR      r2,[r4,#0]            ;526
00014e  1ab1              SUBS     r1,r6,r2              ;526
000150  4610              MOV      r0,r2                 ;526
000152  a209              ADR      r2,|L26.376|
000154  f7fffffe          BL       os_snprintf
000158  4605              MOV      r5,r0                 ;526
00015a  2d00              CMP      r5,#0                 ;527
00015c  db03              BLT      |L26.358|
00015e  6820              LDR      r0,[r4,#0]            ;527
000160  1a30              SUBS     r0,r6,r0              ;527
000162  42a8              CMP      r0,r5                 ;527
000164  dc01              BGT      |L26.362|
                  |L26.358|
000166  e75f              B        |L26.40|
                  |L26.360|
000168  e002              B        |L26.368|
                  |L26.362|
00016a  6820              LDR      r0,[r4,#0]            ;529
00016c  4428              ADD      r0,r0,r5              ;529
00016e  6020              STR      r0,[r4,#0]            ;529
                  |L26.368|
000170  bf00              NOP      
000172  e759              B        |L26.40|
;;;532    
                          ENDP

                  |L26.372|
000174  25733d00          DCB      "%s=",0
                  |L26.376|
000178  0a00              DCB      "\n",0
00017a  00                DCB      0
00017b  00                DCB      0
                  |L26.380|
00017c  25732d74          DCB      "%s-txt=",0
000180  78743d00
                  |L26.388|
000184  256300            DCB      "%c",0
000187  00                DCB      0

                          AREA ||i.eap_fast_write_pac||, CODE, READONLY, ALIGN=2

                  eap_fast_write_pac PROC
;;;533    
;;;534    static int eap_fast_write_pac(struct eap_sm *sm, const char *pac_file,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;535    			      char *buf, size_t len)
;;;536    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  461e              MOV      r6,r3
;;;537    	if (os_strncmp(pac_file, "blob://", 7) == 0) {
00000c  2207              MOVS     r2,#7
00000e  a125              ADR      r1,|L27.164|
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       os_strncmp
000016  b9d8              CBNZ     r0,|L27.80|
;;;538    		struct wpa_config_blob *blob;
;;;539    		blob = os_zalloc(sizeof(*blob));
000018  2010              MOVS     r0,#0x10
00001a  f7fffffe          BL       os_zalloc
00001e  4604              MOV      r4,r0
;;;540    		if (blob == NULL)
000020  b91c              CBNZ     r4,|L27.42|
;;;541    			return -1;
000022  f04f30ff          MOV      r0,#0xffffffff
                  |L27.38|
;;;542    		blob->data = (u8 *) buf;
;;;543    		blob->len = len;
;;;544    		buf = NULL;
;;;545    		blob->name = (char*)os_strdup(pac_file + 7);
;;;546    		if (blob->name == NULL) {
;;;547    			os_free(blob);
;;;548    			return -1;
;;;549    		}
;;;550    		eap_set_config_blob(sm, blob);
;;;551    	} else {
;;;552    		FILE *f;
;;;553    		f = fopen(pac_file, "wb");
;;;554    		if (f == NULL) {
;;;555    			wpa_printf(MSG_INFO, "EAP-FAST: Failed to open PAC "
;;;556    				   "file '%s' for writing", pac_file);
;;;557    			return -1;
;;;558    		}
;;;559    		if (fwrite(buf, 1, len, f) != len) {
;;;560    			wpa_printf(MSG_INFO, "EAP-FAST: Failed to write all "
;;;561    				   "PACs into '%s'", pac_file);
;;;562    			fclose(f);
;;;563    			return -1;
;;;564    		}
;;;565    		os_free(buf);
;;;566    		fclose(f);
;;;567    	}
;;;568    
;;;569    	return 0;
;;;570    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L27.42|
00002a  6067              STR      r7,[r4,#4]            ;542
00002c  60a6              STR      r6,[r4,#8]            ;543
00002e  2700              MOVS     r7,#0                 ;544
000030  1de8              ADDS     r0,r5,#7              ;545
000032  f7fffffe          BL       os_strdup
000036  6020              STR      r0,[r4,#0]            ;545
000038  6820              LDR      r0,[r4,#0]            ;546
00003a  b920              CBNZ     r0,|L27.70|
00003c  4620              MOV      r0,r4                 ;547
00003e  f7fffffe          BL       os_free
000042  1e78              SUBS     r0,r7,#1              ;548
000044  e7ef              B        |L27.38|
                  |L27.70|
000046  4621              MOV      r1,r4                 ;550
000048  4640              MOV      r0,r8                 ;550
00004a  f7fffffe          BL       eap_set_config_blob
00004e  e027              B        |L27.160|
                  |L27.80|
000050  a116              ADR      r1,|L27.172|
000052  4628              MOV      r0,r5                 ;553
000054  f7fffffe          BL       fopen
000058  4604              MOV      r4,r0                 ;553
00005a  b93c              CBNZ     r4,|L27.108|
00005c  462a              MOV      r2,r5                 ;555
00005e  a114              ADR      r1,|L27.176|
000060  2000              MOVS     r0,#0                 ;555
000062  f7fffffe          BL       wpa_printf
000066  f04f30ff          MOV      r0,#0xffffffff        ;557
00006a  e7dc              B        |L27.38|
                  |L27.108|
00006c  4623              MOV      r3,r4                 ;559
00006e  4632              MOV      r2,r6                 ;559
000070  2101              MOVS     r1,#1                 ;559
000072  4638              MOV      r0,r7                 ;559
000074  f7fffffe          BL       fwrite
000078  42b0              CMP      r0,r6                 ;559
00007a  d00a              BEQ      |L27.146|
00007c  462a              MOV      r2,r5                 ;560
00007e  a119              ADR      r1,|L27.228|
000080  2000              MOVS     r0,#0                 ;560
000082  f7fffffe          BL       wpa_printf
000086  4620              MOV      r0,r4                 ;562
000088  f7fffffe          BL       fclose
00008c  f04f30ff          MOV      r0,#0xffffffff        ;563
000090  e7c9              B        |L27.38|
                  |L27.146|
000092  4638              MOV      r0,r7                 ;565
000094  f7fffffe          BL       os_free
000098  4620              MOV      r0,r4                 ;566
00009a  f7fffffe          BL       fclose
00009e  bf00              NOP                            ;567
                  |L27.160|
0000a0  2000              MOVS     r0,#0                 ;569
0000a2  e7c0              B        |L27.38|
;;;571    
                          ENDP

                  |L27.164|
0000a4  626c6f62          DCB      "blob://",0
0000a8  3a2f2f00
                  |L27.172|
0000ac  776200            DCB      "wb",0
0000af  00                DCB      0
                  |L27.176|
0000b0  4541502d          DCB      "EAP-FAST: Failed to open PAC file '%s' for writing",0
0000b4  46415354
0000b8  3a204661
0000bc  696c6564
0000c0  20746f20
0000c4  6f70656e
0000c8  20504143
0000cc  2066696c
0000d0  65202725
0000d4  73272066
0000d8  6f722077
0000dc  72697469
0000e0  6e6700  
0000e3  00                DCB      0
                  |L27.228|
0000e4  4541502d          DCB      "EAP-FAST: Failed to write all PACs into '%s'",0
0000e8  46415354
0000ec  3a204661
0000f0  696c6564
0000f4  20746f20
0000f8  77726974
0000fc  6520616c
000100  6c205041
000104  43732069
000108  6e746f20
00010c  27257327
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0

                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L30.30|
00001a  2001              MOVS     r0,#1
                  |L30.28|
;;;495    }
00001c  4770              BX       lr
                  |L30.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L30.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L35.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L35.14|
                  |L35.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L35.12|
;;;70     }
00000c  4770              BX       lr
                  |L35.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L35.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L36.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L36.16|
                  |L36.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L36.14|
;;;76     }
00000e  4770              BX       lr
                  |L36.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L36.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L37.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L37.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L37.18|
                  |L37.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L37.16|
;;;57     }
000010  4770              BX       lr
                  |L37.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L37.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L38.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L38.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L38.20|
                  |L38.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L38.18|
;;;64     }
000012  4770              BX       lr
                  |L38.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L38.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L39.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L39.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L39.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L39.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L42.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L42.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L42.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L42.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L48.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L48.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  46415354          DCB      0x46,0x41,0x53,0x54
000008  3a204e6f          DCB      0x3a,0x20,0x4e,0x6f
00000c  20504143          DCB      0x20,0x50,0x41,0x43
000010  20626c6f          DCB      0x20,0x62,0x6c,0x6f
000014  62202725          DCB      0x62,0x20,0x27,0x25
000018  7327202d          DCB      0x73,0x27,0x20,0x2d
00001c  20617373          DCB      0x20,0x61,0x73,0x73
000020  756d6520          DCB      0x75,0x6d,0x65,0x20
000024  6e6f2050          DCB      0x6e,0x6f,0x20,0x50
000028  41432065          DCB      0x41,0x43,0x20,0x65
00002c  6e747269          DCB      0x6e,0x74,0x72,0x69
000030  65732068          DCB      0x65,0x73,0x20,0x68
000034  61766520          DCB      0x61,0x76,0x65,0x20
000038  6265656e          DCB      0x62,0x65,0x65,0x6e
00003c  2070726f          DCB      0x20,0x70,0x72,0x6f
000040  76697369          DCB      0x76,0x69,0x73,0x69
000044  6f6e6564          DCB      0x6f,0x6e,0x65,0x64
000048  00000000          DCB      0x00,0x00,0x00,0x00
00004c  4541502d          DCB      0x45,0x41,0x50,0x2d
000050  46415354          DCB      0x46,0x41,0x53,0x54
000054  3a204e6f          DCB      0x3a,0x20,0x4e,0x6f
000058  20504143          DCB      0x20,0x50,0x41,0x43
00005c  2066696c          DCB      0x20,0x66,0x69,0x6c
000060  65202725          DCB      0x65,0x20,0x27,0x25
000064  7327202d          DCB      0x73,0x27,0x20,0x2d
000068  20617373          DCB      0x20,0x61,0x73,0x73
00006c  756d6520          DCB      0x75,0x6d,0x65,0x20
000070  6e6f2050          DCB      0x6e,0x6f,0x20,0x50
000074  41432065          DCB      0x41,0x43,0x20,0x65
000078  6e747269          DCB      0x6e,0x74,0x72,0x69
00007c  65732068          DCB      0x65,0x73,0x20,0x68
000080  61766520          DCB      0x61,0x76,0x65,0x20
000084  6265656e          DCB      0x62,0x65,0x65,0x6e
000088  2070726f          DCB      0x20,0x70,0x72,0x6f
00008c  76697369          DCB      0x76,0x69,0x73,0x69
000090  6f6e6564          DCB      0x6f,0x6e,0x65,0x64
000094  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  7770615f          DCB      "wpa_supplicant EAP-FAST PAC file - version 1",0
000004  73757070
000008  6c696361
00000c  6e742045
000010  41502d46
000014  41535420
000018  50414320
00001c  66696c65
000020  202d2076
000024  65727369
000028  6f6e2031
00002c  00      

                          AREA ||.data||, DATA, ALIGN=2

                  pac_file_hdr
                          DCD      ||.conststring||
