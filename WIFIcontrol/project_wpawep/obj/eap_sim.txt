; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_sim.o --depend=.\obj\eap_sim.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_sim.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_sim.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_aka_prime_derive_keys||, CODE, READONLY, ALIGN=1

                  eap_aka_prime_derive_keys PROC
;;;113    #else /* EAP_AKA_PRIME || EAP_SERVER_AKA_PRIME */
;;;114    static inline void eap_aka_prime_derive_keys(const u8 *identity,
000000  b5f0              PUSH     {r4-r7,lr}
;;;115    					     size_t identity_len,
;;;116    					     const u8 *ik, const u8 *ck,
;;;117    					     u8 *k_encr, u8 *k_aut, u8 *k_re,
;;;118    					     u8 *msk, u8 *emsk)
;;;119    {
000002  ac05              ADD      r4,sp,#0x14
000004  e89410f0          LDM      r4,{r4-r7,r12}
;;;120    }
000008  bdf0              POP      {r4-r7,pc}
;;;121    
                          ENDP


                          AREA ||i.eap_aka_prime_derive_keys_reauth||, CODE, READONLY, ALIGN=1

                  eap_aka_prime_derive_keys_reauth PROC
;;;121    
;;;122    static inline int eap_aka_prime_derive_keys_reauth(const u8 *k_re, u16 counter,
000000  b5f0              PUSH     {r4-r7,lr}
;;;123    						   const u8 *identity,
;;;124    						   size_t identity_len,
;;;125    						   const u8 *nonce_s, u8 *msk,
;;;126    						   u8 *emsk)
;;;127    {
000002  4607              MOV      r7,r0
000004  ac05              ADD      r4,sp,#0x14
000006  cc70              LDM      r4,{r4-r6}
;;;128    	return -1;
000008  f04f30ff          MOV      r0,#0xffffffff
;;;129    }
00000c  bdf0              POP      {r4-r7,pc}
;;;130    
                          ENDP


                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.eap_peer_sim_register||, CODE, READONLY, ALIGN=2

                  eap_peer_sim_register PROC
;;;1078   
;;;1079   int eap_peer_sim_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1080   {
;;;1081   	struct eap_method *eap;
;;;1082   	int ret;
;;;1083   
;;;1084   	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a314              ADR      r3,|L6.84|
000004  2212              MOVS     r2,#0x12
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;1085   				    EAP_VENDOR_IETF, EAP_TYPE_SIM, "SIM");
;;;1086   	if (eap == NULL)
000010  b914              CBNZ     r4,|L6.24|
;;;1087   		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L6.22|
;;;1088   
;;;1089   	eap->init = eap_sim_init;
;;;1090   	eap->deinit = eap_sim_deinit;
;;;1091   	eap->process = eap_sim_process;
;;;1092   	eap->isKeyAvailable = eap_sim_isKeyAvailable;
;;;1093   	eap->getKey = eap_sim_getKey;
;;;1094   	eap->has_reauth_data = eap_sim_has_reauth_data;
;;;1095   	eap->deinit_for_reauth = eap_sim_deinit_for_reauth;
;;;1096   	eap->init_for_reauth = eap_sim_init_for_reauth;
;;;1097   	eap->get_identity = eap_sim_get_identity;
;;;1098   	eap->get_emsk = eap_sim_get_emsk;
;;;1099   
;;;1100   	ret = eap_peer_method_register(eap);
;;;1101   	if (ret)
;;;1102   		eap_peer_method_free(eap);
;;;1103   	return ret;
;;;1104   }
000016  bd70              POP      {r4-r6,pc}
                  |L6.24|
000018  480f              LDR      r0,|L6.88|
00001a  60e0              STR      r0,[r4,#0xc]          ;1089
00001c  480f              LDR      r0,|L6.92|
00001e  6120              STR      r0,[r4,#0x10]         ;1090
000020  480f              LDR      r0,|L6.96|
000022  6160              STR      r0,[r4,#0x14]         ;1091
000024  480f              LDR      r0,|L6.100|
000026  61a0              STR      r0,[r4,#0x18]         ;1092
000028  480f              LDR      r0,|L6.104|
00002a  61e0              STR      r0,[r4,#0x1c]         ;1093
00002c  480f              LDR      r0,|L6.108|
00002e  6260              STR      r0,[r4,#0x24]         ;1094
000030  480f              LDR      r0,|L6.112|
000032  62a0              STR      r0,[r4,#0x28]         ;1095
000034  480f              LDR      r0,|L6.116|
000036  62e0              STR      r0,[r4,#0x2c]         ;1096
000038  480f              LDR      r0,|L6.120|
00003a  6320              STR      r0,[r4,#0x30]         ;1097
00003c  480f              LDR      r0,|L6.124|
00003e  6420              STR      r0,[r4,#0x40]         ;1098
000040  4620              MOV      r0,r4                 ;1100
000042  f7fffffe          BL       eap_peer_method_register
000046  4605              MOV      r5,r0                 ;1100
000048  b115              CBZ      r5,|L6.80|
00004a  4620              MOV      r0,r4                 ;1102
00004c  f7fffffe          BL       eap_peer_method_free
                  |L6.80|
000050  4628              MOV      r0,r5                 ;1103
000052  e7e0              B        |L6.22|
                          ENDP

                  |L6.84|
000054  53494d00          DCB      "SIM",0
                  |L6.88|
                          DCD      eap_sim_init
                  |L6.92|
                          DCD      eap_sim_deinit
                  |L6.96|
                          DCD      eap_sim_process
                  |L6.100|
                          DCD      eap_sim_isKeyAvailable
                  |L6.104|
                          DCD      eap_sim_getKey
                  |L6.108|
                          DCD      eap_sim_has_reauth_data
                  |L6.112|
                          DCD      eap_sim_deinit_for_reauth
                  |L6.116|
                          DCD      eap_sim_init_for_reauth
                  |L6.120|
                          DCD      eap_sim_get_identity
                  |L6.124|
                          DCD      eap_sim_get_emsk

                          AREA ||i.eap_sim_clear_identities||, CODE, READONLY, ALIGN=2

                  eap_sim_clear_identities PROC
;;;269    
;;;270    static void eap_sim_clear_identities(struct eap_sim_data *data, int id)
000000  b538              PUSH     {r3-r5,lr}
;;;271    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;272    	wpa_printf(MSG_DEBUG, "EAP-SIM: forgetting old%s%s%s",
000006  f0150f04          TST      r5,#4
00000a  d001              BEQ      |L7.16|
;;;273    		   id & CLEAR_PSEUDONYM ? " pseudonym" : "",
;;;274    		   id & CLEAR_REAUTH_ID ? " reauth_id" : "",
;;;275    		   id & CLEAR_EAP_ID ? " eap_id" : "");
00000c  a31d              ADR      r3,|L7.132|
00000e  e000              B        |L7.18|
                  |L7.16|
000010  a31e              ADR      r3,|L7.140|
                  |L7.18|
000012  9300              STR      r3,[sp,#0]
000014  f0150f02          TST      r5,#2
000018  d001              BEQ      |L7.30|
00001a  a01d              ADR      r0,|L7.144|
00001c  e000              B        |L7.32|
                  |L7.30|
00001e  a01b              ADR      r0,|L7.140|
                  |L7.32|
000020  4603              MOV      r3,r0                 ;274
000022  f0150f01          TST      r5,#1                 ;274
000026  d001              BEQ      |L7.44|
000028  a01c              ADR      r0,|L7.156|
00002a  e000              B        |L7.46|
                  |L7.44|
00002c  a017              ADR      r0,|L7.140|
                  |L7.46|
00002e  4602              MOV      r2,r0                 ;273
000030  a11d              ADR      r1,|L7.168|
000032  2000              MOVS     r0,#0                 ;273
000034  f7fffffe          BL       wpa_printf
;;;276    	if (id & CLEAR_PSEUDONYM) {
000038  f0150f01          TST      r5,#1
00003c  d008              BEQ      |L7.80|
;;;277    		os_free(data->pseudonym);
00003e  f8d40144          LDR      r0,[r4,#0x144]
000042  f7fffffe          BL       os_free
;;;278    		data->pseudonym = NULL;
000046  2000              MOVS     r0,#0
000048  f8c40144          STR      r0,[r4,#0x144]
;;;279    		data->pseudonym_len = 0;
00004c  f8c40148          STR      r0,[r4,#0x148]
                  |L7.80|
;;;280    	}
;;;281    	if (id & CLEAR_REAUTH_ID) {
000050  f0150f02          TST      r5,#2
000054  d008              BEQ      |L7.104|
;;;282    		os_free(data->reauth_id);
000056  f8d4014c          LDR      r0,[r4,#0x14c]
00005a  f7fffffe          BL       os_free
;;;283    		data->reauth_id = NULL;
00005e  2000              MOVS     r0,#0
000060  f8c4014c          STR      r0,[r4,#0x14c]
;;;284    		data->reauth_id_len = 0;
000064  f8c40150          STR      r0,[r4,#0x150]
                  |L7.104|
;;;285    	}
;;;286    	if (id & CLEAR_EAP_ID) {
000068  f0150f04          TST      r5,#4
00006c  d008              BEQ      |L7.128|
;;;287    		os_free(data->last_eap_identity);
00006e  f8d40160          LDR      r0,[r4,#0x160]
000072  f7fffffe          BL       os_free
;;;288    		data->last_eap_identity = NULL;
000076  2000              MOVS     r0,#0
000078  f8c40160          STR      r0,[r4,#0x160]
;;;289    		data->last_eap_identity_len = 0;
00007c  f8c40164          STR      r0,[r4,#0x164]
                  |L7.128|
;;;290    	}
;;;291    }
000080  bd38              POP      {r3-r5,pc}
;;;292    
                          ENDP

000082  0000              DCW      0x0000
                  |L7.132|
000084  20656170          DCB      " eap_id",0
000088  5f696400
                  |L7.140|
00008c  00                DCB      0
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L7.144|
000090  20726561          DCB      " reauth_id",0
000094  7574685f
000098  696400  
00009b  00                DCB      0
                  |L7.156|
00009c  20707365          DCB      " pseudonym",0
0000a0  75646f6e
0000a4  796d00  
0000a7  00                DCB      0
                  |L7.168|
0000a8  4541502d          DCB      "EAP-SIM: forgetting old%s%s%s",0
0000ac  53494d3a
0000b0  20666f72
0000b4  67657474
0000b8  696e6720
0000bc  6f6c6425
0000c0  73257325
0000c4  7300    
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||i.eap_sim_client_error||, CODE, READONLY, ALIGN=1

                  eap_sim_client_error PROC
;;;334    
;;;335    static struct wpabuf * eap_sim_client_error(struct eap_sim_data *data, u8 id,
000000  b5f8              PUSH     {r3-r7,lr}
;;;336    					    int err)
;;;337    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;338    	struct eap_sim_msg *msg;
;;;339    
;;;340    	eap_sim_state(data, FAILURE);
000008  2104              MOVS     r1,#4
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       eap_sim_state
;;;341    	data->num_id_req = 0;
000010  2000              MOVS     r0,#0
000012  f8c4013c          STR      r0,[r4,#0x13c]
;;;342    	data->num_notification = 0;
000016  f8c40140          STR      r0,[r4,#0x140]
;;;343    
;;;344    	msg = eap_sim_msg_init(EAP_CODE_RESPONSE, id, EAP_TYPE_SIM,
00001a  230e              MOVS     r3,#0xe
00001c  2212              MOVS     r2,#0x12
00001e  4631              MOV      r1,r6
000020  2002              MOVS     r0,#2
000022  f7fffffe          BL       eap_sim_msg_init
000026  4607              MOV      r7,r0
;;;345    			       EAP_SIM_SUBTYPE_CLIENT_ERROR);
;;;346    	eap_sim_msg_add(msg, EAP_SIM_AT_CLIENT_ERROR_CODE, err, NULL, 0);
000028  2300              MOVS     r3,#0
00002a  b2aa              UXTH     r2,r5
00002c  2116              MOVS     r1,#0x16
00002e  4638              MOV      r0,r7
000030  9300              STR      r3,[sp,#0]
000032  f7fffffe          BL       eap_sim_msg_add
;;;347    	return eap_sim_msg_finish(msg, NULL, NULL, 0);
000036  2300              MOVS     r3,#0
000038  461a              MOV      r2,r3
00003a  4619              MOV      r1,r3
00003c  4638              MOV      r0,r7
00003e  f7fffffe          BL       eap_sim_msg_finish
;;;348    }
000042  bdf8              POP      {r3-r7,pc}
;;;349    
                          ENDP


                          AREA ||i.eap_sim_deinit||, CODE, READONLY, ALIGN=1

                  eap_sim_deinit PROC
;;;134    
;;;135    static void eap_sim_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;137    	struct eap_sim_data *data = priv;
000006  462c              MOV      r4,r5
;;;138    	if (data) {
000008  b18c              CBZ      r4,|L9.46|
;;;139    		os_free(data->ver_list);
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       os_free
;;;140    		os_free(data->pseudonym);
000010  f8d40144          LDR      r0,[r4,#0x144]
000014  f7fffffe          BL       os_free
;;;141    		os_free(data->reauth_id);
000018  f8d4014c          LDR      r0,[r4,#0x14c]
00001c  f7fffffe          BL       os_free
;;;142    		os_free(data->last_eap_identity);
000020  f8d40160          LDR      r0,[r4,#0x160]
000024  f7fffffe          BL       os_free
;;;143    		os_free(data);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       os_free
                  |L9.46|
;;;144    	}
;;;145    }
00002e  bd70              POP      {r4-r6,pc}
;;;146    
                          ENDP


                          AREA ||i.eap_sim_deinit_for_reauth||, CODE, READONLY, ALIGN=1

                  eap_sim_deinit_for_reauth PROC
;;;990    
;;;991    static void eap_sim_deinit_for_reauth(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;992    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;993    	struct eap_sim_data *data = priv;
000006  4625              MOV      r5,r4
;;;994    	eap_sim_clear_identities(data, CLEAR_EAP_ID);
000008  2104              MOVS     r1,#4
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       eap_sim_clear_identities
;;;995    	data->use_result_ind = 0;
000010  2000              MOVS     r0,#0
000012  f8c50170          STR      r0,[r5,#0x170]
;;;996    }
000016  bd70              POP      {r4-r6,pc}
;;;997    
                          ENDP


                          AREA ||i.eap_sim_getKey||, CODE, READONLY, ALIGN=1

                  eap_sim_getKey PROC
;;;1040   
;;;1041   static u8 * eap_sim_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1042   {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;1043   	struct eap_sim_data *data = priv;
00000a  4627              MOV      r7,r4
;;;1044   	u8 *key;
;;;1045   
;;;1046   	if (data->state != SUCCESS)
00000c  f8970168          LDRB     r0,[r7,#0x168]
000010  2803              CMP      r0,#3
000012  d002              BEQ      |L11.26|
;;;1047   		return NULL;
000014  2000              MOVS     r0,#0
                  |L11.22|
;;;1048   
;;;1049   	key = os_malloc(EAP_SIM_KEYING_DATA_LEN);
;;;1050   	if (key == NULL)
;;;1051   		return NULL;
;;;1052   
;;;1053   	*len = EAP_SIM_KEYING_DATA_LEN;
;;;1054   	os_memcpy(key, data->msk, EAP_SIM_KEYING_DATA_LEN);
;;;1055   
;;;1056   	return key;
;;;1057   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L11.26|
00001a  2040              MOVS     r0,#0x40              ;1049
00001c  f7fffffe          BL       os_malloc
000020  4605              MOV      r5,r0                 ;1049
000022  b90d              CBNZ     r5,|L11.40|
000024  2000              MOVS     r0,#0                 ;1051
000026  e7f6              B        |L11.22|
                  |L11.40|
000028  2040              MOVS     r0,#0x40              ;1053
00002a  6030              STR      r0,[r6,#0]            ;1053
00002c  2240              MOVS     r2,#0x40              ;1054
00002e  f107018c          ADD      r1,r7,#0x8c           ;1054
000032  4628              MOV      r0,r5                 ;1054
000034  f7fffffe          BL       os_memcpy
000038  4628              MOV      r0,r5                 ;1056
00003a  e7ec              B        |L11.22|
;;;1058   
                          ENDP


                          AREA ||i.eap_sim_get_emsk||, CODE, READONLY, ALIGN=1

                  eap_sim_get_emsk PROC
;;;1059   
;;;1060   static u8 * eap_sim_get_emsk(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1061   {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;1062   	struct eap_sim_data *data = priv;
00000a  4627              MOV      r7,r4
;;;1063   	u8 *key;
;;;1064   
;;;1065   	if (data->state != SUCCESS)
00000c  f8970168          LDRB     r0,[r7,#0x168]
000010  2803              CMP      r0,#3
000012  d002              BEQ      |L12.26|
;;;1066   		return NULL;
000014  2000              MOVS     r0,#0
                  |L12.22|
;;;1067   
;;;1068   	key = os_malloc(EAP_EMSK_LEN);
;;;1069   	if (key == NULL)
;;;1070   		return NULL;
;;;1071   
;;;1072   	*len = EAP_EMSK_LEN;
;;;1073   	os_memcpy(key, data->emsk, EAP_EMSK_LEN);
;;;1074   
;;;1075   	return key;
;;;1076   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L12.26|
00001a  2040              MOVS     r0,#0x40              ;1068
00001c  f7fffffe          BL       os_malloc
000020  4605              MOV      r5,r0                 ;1068
000022  b90d              CBNZ     r5,|L12.40|
000024  2000              MOVS     r0,#0                 ;1070
000026  e7f6              B        |L12.22|
                  |L12.40|
000028  2040              MOVS     r0,#0x40              ;1072
00002a  6030              STR      r0,[r6,#0]            ;1072
00002c  2240              MOVS     r2,#0x40              ;1073
00002e  f10701cc          ADD      r1,r7,#0xcc           ;1073
000032  4628              MOV      r0,r5                 ;1073
000034  f7fffffe          BL       os_memcpy
000038  4628              MOV      r0,r5                 ;1075
00003a  e7ec              B        |L12.22|
;;;1077   
                          ENDP


                          AREA ||i.eap_sim_get_identity||, CODE, READONLY, ALIGN=1

                  eap_sim_get_identity PROC
;;;1014   
;;;1015   static const u8 * eap_sim_get_identity(struct eap_sm *sm, void *priv,
000000  b510              PUSH     {r4,lr}
;;;1016   				       size_t *len)
;;;1017   {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
;;;1018   	struct eap_sim_data *data = priv;
000006  4619              MOV      r1,r3
;;;1019   
;;;1020   	if (data->reauth_id) {
000008  f8d1014c          LDR      r0,[r1,#0x14c]
00000c  b128              CBZ      r0,|L13.26|
;;;1021   		*len = data->reauth_id_len;
00000e  f8d10150          LDR      r0,[r1,#0x150]
000012  6010              STR      r0,[r2,#0]
;;;1022   		return data->reauth_id;
000014  f8d1014c          LDR      r0,[r1,#0x14c]
                  |L13.24|
;;;1023   	}
;;;1024   
;;;1025   	if (data->pseudonym) {
;;;1026   		*len = data->pseudonym_len;
;;;1027   		return data->pseudonym;
;;;1028   	}
;;;1029   
;;;1030   	return NULL;
;;;1031   }
000018  bd10              POP      {r4,pc}
                  |L13.26|
00001a  f8d10144          LDR      r0,[r1,#0x144]        ;1025
00001e  b128              CBZ      r0,|L13.44|
000020  f8d10148          LDR      r0,[r1,#0x148]        ;1026
000024  6010              STR      r0,[r2,#0]            ;1026
000026  f8d10144          LDR      r0,[r1,#0x144]        ;1027
00002a  e7f5              B        |L13.24|
                  |L13.44|
00002c  2000              MOVS     r0,#0                 ;1030
00002e  e7f3              B        |L13.24|
;;;1032   
                          ENDP


                          AREA ||i.eap_sim_gsm_auth||, CODE, READONLY, ALIGN=2

                  eap_sim_gsm_auth PROC
;;;147    
;;;148    static int eap_sim_gsm_auth(struct eap_sm *sm, struct eap_sim_data *data)
000000  b570              PUSH     {r4-r6,lr}
;;;149    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;150    	struct eap_peer_config *conf;
;;;151    
;;;152    	wpa_printf(MSG_DEBUG, "EAP-SIM: GSM authentication algorithm");
000006  a10e              ADR      r1,|L14.64|
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       wpa_printf
;;;153    
;;;154    	conf = eap_get_config(sm);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       eap_get_config
000014  4604              MOV      r4,r0
;;;155    	if (conf == NULL)
000016  b914              CBNZ     r4,|L14.30|
;;;156    		return -1;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L14.28|
;;;157    	if (conf->pcsc) {
;;;158    		if (scard_gsm_auth(sm->scard_ctx, data->rand[0],
;;;159    				   data->sres[0], data->kc[0]) ||
;;;160    		    scard_gsm_auth(sm->scard_ctx, data->rand[1],
;;;161    				   data->sres[1], data->kc[1]) ||
;;;162    		    (data->num_chal > 2 &&
;;;163    		     scard_gsm_auth(sm->scard_ctx, data->rand[2],
;;;164    				    data->sres[2], data->kc[2]))) {
;;;165    			wpa_printf(MSG_DEBUG, "EAP-SIM: GSM SIM "
;;;166    				   "authentication could not be completed");
;;;167    			return -1;
;;;168    		}
;;;169    		return 0;
;;;170    	}
;;;171    
;;;172    #ifdef CONFIG_SIM_SIMULATOR
;;;173    	if (conf->password) {
;;;174    		u8 opc[16], k[16];
;;;175    		const char *pos;
;;;176    		size_t i;
;;;177    		wpa_printf(MSG_DEBUG, "EAP-SIM: Use internal GSM-Milenage "
;;;178    			   "implementation for authentication");
;;;179    		if (conf->password_len < 65) {
;;;180    			wpa_printf(MSG_DEBUG, "EAP-SIM: invalid GSM-Milenage "
;;;181    				   "password");
;;;182    			return -1;
;;;183    		}
;;;184    		pos = (const char *) conf->password;
;;;185    		if (hexstr2bin(pos, k, 16))
;;;186    			return -1;
;;;187    		pos += 32;
;;;188    		if (*pos != ':')
;;;189    			return -1;
;;;190    		pos++;
;;;191    
;;;192    		if (hexstr2bin(pos, opc, 16))
;;;193    			return -1;
;;;194    
;;;195    		for (i = 0; i < data->num_chal; i++) {
;;;196    			if (gsm_milenage(opc, k, data->rand[i],
;;;197    					 data->sres[i], data->kc[i])) {
;;;198    				wpa_printf(MSG_DEBUG, "EAP-SIM: "
;;;199    					   "GSM-Milenage authentication "
;;;200    					   "could not be completed");
;;;201    				return -1;
;;;202    			}
;;;203    			wpa_hexdump(MSG_DEBUG, "EAP-SIM: RAND",
;;;204    				    data->rand[i], GSM_RAND_LEN);
;;;205    			wpa_hexdump_key(MSG_DEBUG, "EAP-SIM: SRES",
;;;206    					data->sres[i], EAP_SIM_SRES_LEN);
;;;207    			wpa_hexdump_key(MSG_DEBUG, "EAP-SIM: Kc",
;;;208    					data->kc[i], EAP_SIM_KC_LEN);
;;;209    		}
;;;210    		return 0;
;;;211    	}
;;;212    #endif /* CONFIG_SIM_SIMULATOR */
;;;213    
;;;214    #ifdef CONFIG_SIM_HARDCODED
;;;215    	/* These hardcoded Kc and SRES values are used for testing. RAND to
;;;216    	 * KC/SREC mapping is very bogus as far as real authentication is
;;;217    	 * concerned, but it is quite useful for cases where the AS is rotating
;;;218    	 * the order of pre-configured values. */
;;;219    	{
;;;220    		size_t i;
;;;221    
;;;222    		wpa_printf(MSG_DEBUG, "EAP-SIM: Use hardcoded Kc and SRES "
;;;223    			   "values for testing");
;;;224    
;;;225    		for (i = 0; i < data->num_chal; i++) {
;;;226    			if (data->rand[i][0] == 0xaa) {
;;;227    				os_memcpy(data->kc[i],
;;;228    					  "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7",
;;;229    					  EAP_SIM_KC_LEN);
;;;230    				os_memcpy(data->sres[i], "\xd1\xd2\xd3\xd4",
;;;231    					  EAP_SIM_SRES_LEN);
;;;232    			} else if (data->rand[i][0] == 0xbb) {
;;;233    				os_memcpy(data->kc[i],
;;;234    					  "\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7",
;;;235    					  EAP_SIM_KC_LEN);
;;;236    				os_memcpy(data->sres[i], "\xe1\xe2\xe3\xe4",
;;;237    					  EAP_SIM_SRES_LEN);
;;;238    			} else {
;;;239    				os_memcpy(data->kc[i],
;;;240    					  "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7",
;;;241    					  EAP_SIM_KC_LEN);
;;;242    				os_memcpy(data->sres[i], "\xf1\xf2\xf3\xf4",
;;;243    					  EAP_SIM_SRES_LEN);
;;;244    			}
;;;245    		}
;;;246    	}
;;;247    
;;;248    	return 0;
;;;249    
;;;250    #else /* CONFIG_SIM_HARDCODED */
;;;251    
;;;252    	wpa_printf(MSG_DEBUG, "EAP-SIM: No GSM authentication algorithm "
;;;253    		   "enabled");
;;;254    	return -1;
;;;255    
;;;256    #endif /* CONFIG_SIM_HARDCODED */
;;;257    }
00001c  bd70              POP      {r4-r6,pc}
                  |L14.30|
00001e  6e60              LDR      r0,[r4,#0x64]         ;157
000020  b130              CBZ      r0,|L14.48|
000022  a111              ADR      r1,|L14.104|
000024  2000              MOVS     r0,#0                 ;165
000026  f7fffffe          BL       wpa_printf
00002a  f04f30ff          MOV      r0,#0xffffffff        ;167
00002e  e7f5              B        |L14.28|
                  |L14.48|
000030  a11b              ADR      r1,|L14.160|
000032  2000              MOVS     r0,#0                 ;252
000034  f7fffffe          BL       wpa_printf
000038  f04f30ff          MOV      r0,#0xffffffff        ;254
00003c  e7ee              B        |L14.28|
;;;258    
                          ENDP

00003e  0000              DCW      0x0000
                  |L14.64|
000040  4541502d          DCB      "EAP-SIM: GSM authentication algorithm",0
000044  53494d3a
000048  2047534d
00004c  20617574
000050  68656e74
000054  69636174
000058  696f6e20
00005c  616c676f
000060  72697468
000064  6d00    
000066  00                DCB      0
000067  00                DCB      0
                  |L14.104|
000068  4541502d          DCB      "EAP-SIM: GSM SIM authentication could not be completed",0
00006c  53494d3a
000070  2047534d
000074  2053494d
000078  20617574
00007c  68656e74
000080  69636174
000084  696f6e20
000088  636f756c
00008c  64206e6f
000090  74206265
000094  20636f6d
000098  706c6574
00009c  656400  
00009f  00                DCB      0
                  |L14.160|
0000a0  4541502d          DCB      "EAP-SIM: No GSM authentication algorithm enabled",0
0000a4  53494d3a
0000a8  204e6f20
0000ac  47534d20
0000b0  61757468
0000b4  656e7469
0000b8  63617469
0000bc  6f6e2061
0000c0  6c676f72
0000c4  6974686d
0000c8  20656e61
0000cc  626c6564
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0

                          AREA ||i.eap_sim_has_reauth_data||, CODE, READONLY, ALIGN=1

                  eap_sim_has_reauth_data PROC
;;;983    
;;;984    static Boolean eap_sim_has_reauth_data(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;985    {
;;;986    	struct eap_sim_data *data = priv;
000002  460a              MOV      r2,r1
;;;987    	return data->pseudonym || data->reauth_id;
000004  f8d20144          LDR      r0,[r2,#0x144]
000008  b910              CBNZ     r0,|L15.16|
00000a  f8d2014c          LDR      r0,[r2,#0x14c]
00000e  b108              CBZ      r0,|L15.20|
                  |L15.16|
000010  2001              MOVS     r0,#1
                  |L15.18|
;;;988    }
000012  4770              BX       lr
                  |L15.20|
000014  2000              MOVS     r0,#0                 ;987
000016  e7fc              B        |L15.18|
;;;989    
                          ENDP


                          AREA ||i.eap_sim_init||, CODE, READONLY, ALIGN=2

                  eap_sim_init PROC
;;;90     
;;;91     static void * eap_sim_init(struct eap_sm *sm)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;92     {
000004  4607              MOV      r7,r0
;;;93     	struct eap_sim_data *data;
;;;94     	struct eap_peer_config *config = eap_get_config(sm);
000006  4638              MOV      r0,r7
000008  f7fffffe          BL       eap_get_config
00000c  4605              MOV      r5,r0
;;;95     
;;;96     	data = os_zalloc(sizeof(*data));
00000e  f44f70ba          MOV      r0,#0x174
000012  f7fffffe          BL       os_zalloc
000016  4604              MOV      r4,r0
;;;97     	if (data == NULL)
000018  b914              CBNZ     r4,|L16.32|
;;;98     		return NULL;
00001a  2000              MOVS     r0,#0
                  |L16.28|
;;;99     
;;;100    	if (os_get_random(data->nonce_mt, EAP_SIM_NONCE_MT_LEN)) {
;;;101    		wpa_printf(MSG_WARNING, "EAP-SIM: Failed to get random data "
;;;102    			   "for NONCE_MT");
;;;103    		os_free(data);
;;;104    		return NULL;
;;;105    	}
;;;106    
;;;107    	data->min_num_chal = 2;
;;;108    	if (config && config->phase1) {
;;;109    		char *pos = os_strstr(config->phase1, "sim_min_num_chal=");
;;;110    		if (pos) {
;;;111    			data->min_num_chal = atoi(pos + 17);
;;;112    			if (data->min_num_chal < 2 || data->min_num_chal > 3) {
;;;113    				wpa_printf(MSG_WARNING, "EAP-SIM: Invalid "
;;;114    					   "sim_min_num_chal configuration "
;;;115    					   "(%lu, expected 2 or 3)",
;;;116    					   (unsigned long) data->min_num_chal);
;;;117    				os_free(data);
;;;118    				return NULL;
;;;119    			}
;;;120    			wpa_printf(MSG_DEBUG, "EAP-SIM: Set minimum number of "
;;;121    				   "challenges to %lu",
;;;122    				   (unsigned long) data->min_num_chal);
;;;123    		}
;;;124    
;;;125    		data->result_ind = os_strstr(config->phase1, "result_ind=1") !=
;;;126    			NULL;
;;;127    	}
;;;128    
;;;129    	eap_sim_state(data, CONTINUE);
;;;130    
;;;131    	return data;
;;;132    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L16.32|
000020  2110              MOVS     r1,#0x10              ;100
000022  f1040038          ADD      r0,r4,#0x38           ;100
000026  f7fffffe          BL       os_get_random
00002a  b140              CBZ      r0,|L16.62|
00002c  a11f              ADR      r1,|L16.172|
00002e  2000              MOVS     r0,#0                 ;101
000030  f7fffffe          BL       wpa_printf
000034  4620              MOV      r0,r4                 ;103
000036  f7fffffe          BL       os_free
00003a  2000              MOVS     r0,#0                 ;104
00003c  e7ee              B        |L16.28|
                  |L16.62|
00003e  2002              MOVS     r0,#2                 ;107
000040  60e0              STR      r0,[r4,#0xc]          ;107
000042  b365              CBZ      r5,|L16.158|
000044  6de8              LDR      r0,[r5,#0x5c]         ;108
000046  b350              CBZ      r0,|L16.158|
000048  a124              ADR      r1,|L16.220|
00004a  6de8              LDR      r0,[r5,#0x5c]         ;109
00004c  f7fffffe          BL       os_strstr
000050  4606              MOV      r6,r0                 ;109
000052  b1ce              CBZ      r6,|L16.136|
000054  f1060011          ADD      r0,r6,#0x11           ;111
000058  f7fffffe          BL       atoi
00005c  60e0              STR      r0,[r4,#0xc]          ;111
00005e  68e0              LDR      r0,[r4,#0xc]          ;112
000060  2802              CMP      r0,#2                 ;112
000062  d302              BCC      |L16.106|
000064  68e0              LDR      r0,[r4,#0xc]          ;112
000066  2803              CMP      r0,#3                 ;112
000068  d909              BLS      |L16.126|
                  |L16.106|
00006a  4921              LDR      r1,|L16.240|
00006c  2000              MOVS     r0,#0                 ;113
00006e  68e2              LDR      r2,[r4,#0xc]          ;113
000070  f7fffffe          BL       wpa_printf
000074  4620              MOV      r0,r4                 ;117
000076  f7fffffe          BL       os_free
00007a  2000              MOVS     r0,#0                 ;118
00007c  e7ce              B        |L16.28|
                  |L16.126|
00007e  a11d              ADR      r1,|L16.244|
000080  2000              MOVS     r0,#0                 ;120
000082  68e2              LDR      r2,[r4,#0xc]          ;120
000084  f7fffffe          BL       wpa_printf
                  |L16.136|
000088  a127              ADR      r1,|L16.296|
00008a  6de8              LDR      r0,[r5,#0x5c]         ;125
00008c  f7fffffe          BL       os_strstr
000090  b108              CBZ      r0,|L16.150|
000092  2001              MOVS     r0,#1                 ;125
000094  e000              B        |L16.152|
                  |L16.150|
000096  2000              MOVS     r0,#0                 ;125
                  |L16.152|
000098  f8c4016c          STR      r0,[r4,#0x16c]        ;125
00009c  bf00              NOP                            ;127
                  |L16.158|
00009e  2100              MOVS     r1,#0                 ;129
0000a0  4620              MOV      r0,r4                 ;129
0000a2  f7fffffe          BL       eap_sim_state
0000a6  4620              MOV      r0,r4                 ;131
0000a8  e7b8              B        |L16.28|
;;;133    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L16.172|
0000ac  4541502d          DCB      "EAP-SIM: Failed to get random data for NONCE_MT",0
0000b0  53494d3a
0000b4  20466169
0000b8  6c656420
0000bc  746f2067
0000c0  65742072
0000c4  616e646f
0000c8  6d206461
0000cc  74612066
0000d0  6f72204e
0000d4  4f4e4345
0000d8  5f4d5400
                  |L16.220|
0000dc  73696d5f          DCB      "sim_min_num_chal=",0
0000e0  6d696e5f
0000e4  6e756d5f
0000e8  6368616c
0000ec  3d00    
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L16.240|
                          DCD      ||.constdata||
                  |L16.244|
0000f4  4541502d          DCB      "EAP-SIM: Set minimum number of challenges to %lu",0
0000f8  53494d3a
0000fc  20536574
000100  206d696e
000104  696d756d
000108  206e756d
00010c  62657220
000110  6f662063
000114  68616c6c
000118  656e6765
00011c  7320746f
000120  20256c75
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L16.296|
000128  72657375          DCB      "result_ind=1",0
00012c  6c745f69
000130  6e643d31
000134  00      
000135  00                DCB      0
000136  00                DCB      0
000137  00                DCB      0

                          AREA ||i.eap_sim_init_for_reauth||, CODE, READONLY, ALIGN=2

                  eap_sim_init_for_reauth PROC
;;;998    
;;;999    static void * eap_sim_init_for_reauth(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;1000   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1001   	struct eap_sim_data *data = priv;
000006  4625              MOV      r5,r4
;;;1002   	if (os_get_random(data->nonce_mt, EAP_SIM_NONCE_MT_LEN)) {
000008  2110              MOVS     r1,#0x10
00000a  f1050038          ADD      r0,r5,#0x38
00000e  f7fffffe          BL       os_get_random
000012  b140              CBZ      r0,|L17.38|
;;;1003   		wpa_printf(MSG_WARNING, "EAP-SIM: Failed to get random data "
000014  a109              ADR      r1,|L17.60|
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       wpa_printf
;;;1004   			   "for NONCE_MT");
;;;1005   		os_free(data);
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       os_free
;;;1006   		return NULL;
000022  2000              MOVS     r0,#0
                  |L17.36|
;;;1007   	}
;;;1008   	data->num_id_req = 0;
;;;1009   	data->num_notification = 0;
;;;1010   	eap_sim_state(data, CONTINUE);
;;;1011   	return priv;
;;;1012   }
000024  bd70              POP      {r4-r6,pc}
                  |L17.38|
000026  2000              MOVS     r0,#0                 ;1008
000028  f8c5013c          STR      r0,[r5,#0x13c]        ;1008
00002c  f8c50140          STR      r0,[r5,#0x140]        ;1009
000030  2100              MOVS     r1,#0                 ;1010
000032  4628              MOV      r0,r5                 ;1010
000034  f7fffffe          BL       eap_sim_state
000038  4620              MOV      r0,r4                 ;1011
00003a  e7f3              B        |L17.36|
;;;1013   
                          ENDP

                  |L17.60|
00003c  4541502d          DCB      "EAP-SIM: Failed to get random data for NONCE_MT",0
000040  53494d3a
000044  20466169
000048  6c656420
00004c  746f2067
000050  65742072
000054  616e646f
000058  6d206461
00005c  74612066
000060  6f72204e
000064  4f4e4345
000068  5f4d5400

                          AREA ||i.eap_sim_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_sim_isKeyAvailable PROC
;;;1033   
;;;1034   static Boolean eap_sim_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;1035   {
;;;1036   	struct eap_sim_data *data = priv;
000002  460a              MOV      r2,r1
;;;1037   	return data->state == SUCCESS;
000004  f8920168          LDRB     r0,[r2,#0x168]
000008  2803              CMP      r0,#3
00000a  d101              BNE      |L18.16|
00000c  2001              MOVS     r0,#1
                  |L18.14|
;;;1038   }
00000e  4770              BX       lr
                  |L18.16|
000010  2000              MOVS     r0,#0                 ;1037
000012  e7fc              B        |L18.14|
;;;1039   
                          ENDP


                          AREA ||i.eap_sim_learn_ids||, CODE, READONLY, ALIGN=2

                  eap_sim_learn_ids PROC
;;;293    
;;;294    static int eap_sim_learn_ids(struct eap_sim_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;295    			     struct eap_sim_attrs *attr)
;;;296    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;297    	if (attr->next_pseudonym) {
000006  69e8              LDR      r0,[r5,#0x1c]
000008  b310              CBZ      r0,|L19.80|
;;;298    		os_free(data->pseudonym);
00000a  f8d40144          LDR      r0,[r4,#0x144]
00000e  f7fffffe          BL       os_free
;;;299    		data->pseudonym = os_malloc(attr->next_pseudonym_len);
000012  6ce8              LDR      r0,[r5,#0x4c]
000014  f7fffffe          BL       os_malloc
000018  f8c40144          STR      r0,[r4,#0x144]
;;;300    		if (data->pseudonym == NULL) {
00001c  f8d40144          LDR      r0,[r4,#0x144]
000020  b930              CBNZ     r0,|L19.48|
;;;301    			wpa_printf(MSG_INFO, "EAP-SIM: (encr) No memory for "
000022  a11f              ADR      r1,|L19.160|
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       wpa_printf
;;;302    				   "next pseudonym");
;;;303    			return -1;
00002a  f04f30ff          MOV      r0,#0xffffffff
                  |L19.46|
;;;304    		}
;;;305    		os_memcpy(data->pseudonym, attr->next_pseudonym,
;;;306    			  attr->next_pseudonym_len);
;;;307    		data->pseudonym_len = attr->next_pseudonym_len;
;;;308    		wpa_hexdump_ascii(MSG_DEBUG,
;;;309    				  "EAP-SIM: (encr) AT_NEXT_PSEUDONYM",
;;;310    				  data->pseudonym,
;;;311    				  data->pseudonym_len);
;;;312    	}
;;;313    
;;;314    	if (attr->next_reauth_id) {
;;;315    		os_free(data->reauth_id);
;;;316    		data->reauth_id = os_malloc(attr->next_reauth_id_len);
;;;317    		if (data->reauth_id == NULL) {
;;;318    			wpa_printf(MSG_INFO, "EAP-SIM: (encr) No memory for "
;;;319    				   "next reauth_id");
;;;320    			return -1;
;;;321    		}
;;;322    		os_memcpy(data->reauth_id, attr->next_reauth_id,
;;;323    			  attr->next_reauth_id_len);
;;;324    		data->reauth_id_len = attr->next_reauth_id_len;
;;;325    		wpa_hexdump_ascii(MSG_DEBUG,
;;;326    				  "EAP-SIM: (encr) AT_NEXT_REAUTH_ID",
;;;327    				  data->reauth_id,
;;;328    				  data->reauth_id_len);
;;;329    	}
;;;330    
;;;331    	return 0;
;;;332    }
00002e  bd70              POP      {r4-r6,pc}
                  |L19.48|
000030  6cea              LDR      r2,[r5,#0x4c]         ;305
000032  69e9              LDR      r1,[r5,#0x1c]         ;305
000034  f8d40144          LDR      r0,[r4,#0x144]        ;305
000038  f7fffffe          BL       os_memcpy
00003c  6ce8              LDR      r0,[r5,#0x4c]         ;307
00003e  f8c40148          STR      r0,[r4,#0x148]        ;307
000042  a123              ADR      r1,|L19.208|
000044  2000              MOVS     r0,#0                 ;308
000046  f50472a2          ADD      r2,r4,#0x144          ;308
00004a  ca0c              LDM      r2,{r2,r3}            ;308
00004c  f7fffffe          BL       wpa_hexdump_ascii
                  |L19.80|
000050  6a28              LDR      r0,[r5,#0x20]         ;314
000052  b310              CBZ      r0,|L19.154|
000054  f8d4014c          LDR      r0,[r4,#0x14c]        ;315
000058  f7fffffe          BL       os_free
00005c  6d28              LDR      r0,[r5,#0x50]         ;316
00005e  f7fffffe          BL       os_malloc
000062  f8c4014c          STR      r0,[r4,#0x14c]        ;316
000066  f8d4014c          LDR      r0,[r4,#0x14c]        ;317
00006a  b930              CBNZ     r0,|L19.122|
00006c  a121              ADR      r1,|L19.244|
00006e  2000              MOVS     r0,#0                 ;318
000070  f7fffffe          BL       wpa_printf
000074  f04f30ff          MOV      r0,#0xffffffff        ;320
000078  e7d9              B        |L19.46|
                  |L19.122|
00007a  6d2a              LDR      r2,[r5,#0x50]         ;322
00007c  6a29              LDR      r1,[r5,#0x20]         ;322
00007e  f8d4014c          LDR      r0,[r4,#0x14c]        ;322
000082  f7fffffe          BL       os_memcpy
000086  6d28              LDR      r0,[r5,#0x50]         ;324
000088  f8c40150          STR      r0,[r4,#0x150]        ;324
00008c  a125              ADR      r1,|L19.292|
00008e  2000              MOVS     r0,#0                 ;325
000090  f50472a6          ADD      r2,r4,#0x14c          ;325
000094  ca0c              LDM      r2,{r2,r3}            ;325
000096  f7fffffe          BL       wpa_hexdump_ascii
                  |L19.154|
00009a  2000              MOVS     r0,#0                 ;331
00009c  e7c7              B        |L19.46|
;;;333    
                          ENDP

00009e  0000              DCW      0x0000
                  |L19.160|
0000a0  4541502d          DCB      "EAP-SIM: (encr) No memory for next pseudonym",0
0000a4  53494d3a
0000a8  2028656e
0000ac  63722920
0000b0  4e6f206d
0000b4  656d6f72
0000b8  7920666f
0000bc  72206e65
0000c0  78742070
0000c4  73657564
0000c8  6f6e796d
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L19.208|
0000d0  4541502d          DCB      "EAP-SIM: (encr) AT_NEXT_PSEUDONYM",0
0000d4  53494d3a
0000d8  2028656e
0000dc  63722920
0000e0  41545f4e
0000e4  4558545f
0000e8  50534555
0000ec  444f4e59
0000f0  4d00    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L19.244|
0000f4  4541502d          DCB      "EAP-SIM: (encr) No memory for next reauth_id",0
0000f8  53494d3a
0000fc  2028656e
000100  63722920
000104  4e6f206d
000108  656d6f72
00010c  7920666f
000110  72206e65
000114  78742072
000118  65617574
00011c  685f6964
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0
                  |L19.292|
000124  4541502d          DCB      "EAP-SIM: (encr) AT_NEXT_REAUTH_ID",0
000128  53494d3a
00012c  2028656e
000130  63722920
000134  41545f4e
000138  4558545f
00013c  52454155
000140  54485f49
000144  4400    
000146  00                DCB      0
000147  00                DCB      0

                          AREA ||i.eap_sim_process||, CODE, READONLY, ALIGN=2

                  eap_sim_process PROC
;;;889    
;;;890    static struct wpabuf * eap_sim_process(struct eap_sm *sm, void *priv,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;891    				       struct eap_method_ret *ret,
;;;892    				       const struct wpabuf *reqData)
;;;893    {
000004  b0ab              SUB      sp,sp,#0xac
000006  4614              MOV      r4,r2
000008  4699              MOV      r9,r3
;;;894    	struct eap_sim_data *data = priv;
00000a  9d2c              LDR      r5,[sp,#0xb0]
;;;895    	const struct eap_hdr *req;
;;;896    	u8 subtype, id;
;;;897    	struct wpabuf *res;
;;;898    	const u8 *pos;
;;;899    	struct eap_sim_attrs attr;
;;;900    	size_t len;
;;;901    
;;;902    	wpa_hexdump_buf(MSG_DEBUG, "EAP-SIM: EAP data", reqData);
00000c  464a              MOV      r2,r9
00000e  a168              ADR      r1,|L20.432|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       wpa_hexdump_buf
;;;903    	if (eap_get_config_identity(sm, &len) == NULL) {
000016  a903              ADD      r1,sp,#0xc
000018  982b              LDR      r0,[sp,#0xac]
00001a  f7fffffe          BL       eap_get_config_identity
00001e  b960              CBNZ     r0,|L20.58|
;;;904    		wpa_printf(MSG_INFO, "EAP-SIM: Identity not configured");
000020  a168              ADR      r1,|L20.452|
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       wpa_printf
;;;905    		eap_sm_request_identity(sm);
000028  982b              LDR      r0,[sp,#0xac]
00002a  f7fffffe          BL       eap_sm_request_identity
;;;906    		ret->ignore = TRUE;
00002e  2001              MOVS     r0,#1
000030  6020              STR      r0,[r4,#0]
;;;907    		return NULL;
000032  2000              MOVS     r0,#0
                  |L20.52|
;;;908    	}
;;;909    
;;;910    	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_SIM, reqData, &len);
;;;911    	if (pos == NULL || len < 1) {
;;;912    		ret->ignore = TRUE;
;;;913    		return NULL;
;;;914    	}
;;;915    	req = wpabuf_head(reqData);
;;;916    	id = req->identifier;
;;;917    	len = be_to_host16(req->length);
;;;918    
;;;919    	ret->ignore = FALSE;
;;;920    	ret->methodState = METHOD_MAY_CONT;
;;;921    	ret->decision = DECISION_FAIL;
;;;922    	ret->allowNotifications = TRUE;
;;;923    
;;;924    	subtype = *pos++;
;;;925    	wpa_printf(MSG_DEBUG, "EAP-SIM: Subtype=%d", subtype);
;;;926    	pos += 2; /* Reserved */
;;;927    
;;;928    	if (eap_sim_parse_attr(pos, wpabuf_head_u8(reqData) + len, &attr, 0,
;;;929    			       0)) {
;;;930    		res = eap_sim_client_error(data, id,
;;;931    					   EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;932    		goto done;
;;;933    	}
;;;934    
;;;935    	switch (subtype) {
;;;936    	case EAP_SIM_SUBTYPE_START:
;;;937    		res = eap_sim_process_start(sm, data, id, &attr);
;;;938    		break;
;;;939    	case EAP_SIM_SUBTYPE_CHALLENGE:
;;;940    		res = eap_sim_process_challenge(sm, data, id, reqData, &attr);
;;;941    		break;
;;;942    	case EAP_SIM_SUBTYPE_NOTIFICATION:
;;;943    		res = eap_sim_process_notification(sm, data, id, reqData,
;;;944    						   &attr);
;;;945    		break;
;;;946    	case EAP_SIM_SUBTYPE_REAUTHENTICATION:
;;;947    		res = eap_sim_process_reauthentication(sm, data, id, reqData,
;;;948    						       &attr);
;;;949    		break;
;;;950    	case EAP_SIM_SUBTYPE_CLIENT_ERROR:
;;;951    		wpa_printf(MSG_DEBUG, "EAP-SIM: subtype Client-Error");
;;;952    		res = eap_sim_client_error(data, id,
;;;953    					   EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;954    		break;
;;;955    	default:
;;;956    		wpa_printf(MSG_DEBUG, "EAP-SIM: Unknown subtype=%d", subtype);
;;;957    		res = eap_sim_client_error(data, id,
;;;958    					   EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;959    		break;
;;;960    	}
;;;961    
;;;962    done:
;;;963    	if (data->state == FAILURE) {
;;;964    		ret->decision = DECISION_FAIL;
;;;965    		ret->methodState = METHOD_DONE;
;;;966    	} else if (data->state == SUCCESS) {
;;;967    		ret->decision = data->use_result_ind ?
;;;968    			DECISION_UNCOND_SUCC : DECISION_COND_SUCC;
;;;969    		ret->methodState = data->use_result_ind ?
;;;970    			METHOD_DONE : METHOD_MAY_CONT;
;;;971    	} else if (data->state == RESULT_FAILURE)
;;;972    		ret->methodState = METHOD_CONT;
;;;973    	else if (data->state == RESULT_SUCCESS)
;;;974    		ret->methodState = METHOD_CONT;
;;;975    
;;;976    	if (ret->methodState == METHOD_DONE) {
;;;977    		ret->allowNotifications = FALSE;
;;;978    	}
;;;979    
;;;980    	return res;
;;;981    }
000034  b02f              ADD      sp,sp,#0xbc
000036  e8bd8ff0          POP      {r4-r11,pc}
                  |L20.58|
00003a  ab03              ADD      r3,sp,#0xc            ;910
00003c  464a              MOV      r2,r9                 ;910
00003e  2112              MOVS     r1,#0x12              ;910
000040  2000              MOVS     r0,#0                 ;910
000042  f7fffffe          BL       eap_hdr_validate
000046  4607              MOV      r7,r0                 ;910
000048  b10f              CBZ      r7,|L20.78|
00004a  9803              LDR      r0,[sp,#0xc]          ;911
00004c  b918              CBNZ     r0,|L20.86|
                  |L20.78|
00004e  2001              MOVS     r0,#1                 ;912
000050  6020              STR      r0,[r4,#0]            ;912
000052  2000              MOVS     r0,#0                 ;913
000054  e7ee              B        |L20.52|
                  |L20.86|
000056  4648              MOV      r0,r9                 ;915
000058  f7fffffe          BL       wpabuf_head
00005c  4680              MOV      r8,r0                 ;915
00005e  f898b001          LDRB     r11,[r8,#1]           ;916
000062  f8b80002          LDRH     r0,[r8,#2]            ;917
000066  f44f417f          MOV      r1,#0xff00            ;917
00006a  ea012000          AND      r0,r1,r0,LSL #8       ;917
00006e  f8b81002          LDRH     r1,[r8,#2]            ;917
000072  ea402011          ORR      r0,r0,r1,LSR #8       ;917
000076  9003              STR      r0,[sp,#0xc]          ;917
000078  2000              MOVS     r0,#0                 ;919
00007a  6020              STR      r0,[r4,#0]            ;919
00007c  2003              MOVS     r0,#3                 ;920
00007e  7120              STRB     r0,[r4,#4]            ;920
000080  2000              MOVS     r0,#0                 ;921
000082  7160              STRB     r0,[r4,#5]            ;921
000084  2001              MOVS     r0,#1                 ;922
000086  60a0              STR      r0,[r4,#8]            ;922
000088  f817ab01          LDRB     r10,[r7],#1           ;924
00008c  4652              MOV      r2,r10                ;925
00008e  a156              ADR      r1,|L20.488|
000090  2000              MOVS     r0,#0                 ;925
000092  f7fffffe          BL       wpa_printf
000096  1cbf              ADDS     r7,r7,#2              ;926
000098  4648              MOV      r0,r9                 ;928
00009a  f7fffffe          BL       wpabuf_head_u8
00009e  9903              LDR      r1,[sp,#0xc]          ;928
0000a0  4408              ADD      r0,r0,r1              ;928
0000a2  2300              MOVS     r3,#0                 ;928
0000a4  aa04              ADD      r2,sp,#0x10           ;928
0000a6  4601              MOV      r1,r0                 ;928
0000a8  9300              STR      r3,[sp,#0]            ;928
0000aa  9002              STR      r0,[sp,#8]            ;928
0000ac  4638              MOV      r0,r7                 ;928
0000ae  f7fffffe          BL       eap_sim_parse_attr
0000b2  b130              CBZ      r0,|L20.194|
0000b4  2200              MOVS     r2,#0                 ;930
0000b6  4659              MOV      r1,r11                ;930
0000b8  4628              MOV      r0,r5                 ;930
0000ba  f7fffffe          BL       eap_sim_client_error
0000be  4606              MOV      r6,r0                 ;930
0000c0  e047              B        |L20.338|
                  |L20.194|
0000c2  f1aa000a          SUB      r0,r10,#0xa           ;935
0000c6  2805              CMP      r0,#5                 ;935
0000c8  d235              BCS      |L20.310|
0000ca  e8dff000          TBB      [pc,r0]               ;935
0000ce  030b              DCB      0x03,0x0b
0000d0  151f2900          DCB      0x15,0x1f,0x29,0x00
0000d4  ab04              ADD      r3,sp,#0x10           ;937
0000d6  465a              MOV      r2,r11                ;937
0000d8  4629              MOV      r1,r5                 ;937
0000da  982b              LDR      r0,[sp,#0xac]         ;937
0000dc  f7fffffe          BL       eap_sim_process_start
0000e0  4606              MOV      r6,r0                 ;937
0000e2  e034              B        |L20.334|
0000e4  ab04              ADD      r3,sp,#0x10           ;940
0000e6  9300              STR      r3,[sp,#0]            ;940
0000e8  464b              MOV      r3,r9                 ;940
0000ea  465a              MOV      r2,r11                ;940
0000ec  4629              MOV      r1,r5                 ;940
0000ee  982b              LDR      r0,[sp,#0xac]         ;940
0000f0  f7fffffe          BL       eap_sim_process_challenge
0000f4  4606              MOV      r6,r0                 ;940
0000f6  e02a              B        |L20.334|
0000f8  ab04              ADD      r3,sp,#0x10           ;943
0000fa  9300              STR      r3,[sp,#0]            ;943
0000fc  464b              MOV      r3,r9                 ;943
0000fe  465a              MOV      r2,r11                ;943
000100  4629              MOV      r1,r5                 ;943
000102  982b              LDR      r0,[sp,#0xac]         ;943
000104  f7fffffe          BL       eap_sim_process_notification
000108  4606              MOV      r6,r0                 ;943
00010a  e020              B        |L20.334|
00010c  ab04              ADD      r3,sp,#0x10           ;947
00010e  9300              STR      r3,[sp,#0]            ;947
000110  464b              MOV      r3,r9                 ;947
000112  465a              MOV      r2,r11                ;947
000114  4629              MOV      r1,r5                 ;947
000116  982b              LDR      r0,[sp,#0xac]         ;947
000118  f7fffffe          BL       eap_sim_process_reauthentication
00011c  4606              MOV      r6,r0                 ;947
00011e  e016              B        |L20.334|
000120  a136              ADR      r1,|L20.508|
000122  2000              MOVS     r0,#0                 ;951
000124  f7fffffe          BL       wpa_printf
000128  2200              MOVS     r2,#0                 ;952
00012a  4659              MOV      r1,r11                ;952
00012c  4628              MOV      r0,r5                 ;952
00012e  f7fffffe          BL       eap_sim_client_error
000132  4606              MOV      r6,r0                 ;952
000134  e00b              B        |L20.334|
                  |L20.310|
000136  4652              MOV      r2,r10                ;956
000138  a138              ADR      r1,|L20.540|
00013a  2000              MOVS     r0,#0                 ;956
00013c  f7fffffe          BL       wpa_printf
000140  2200              MOVS     r2,#0                 ;957
000142  4659              MOV      r1,r11                ;957
000144  4628              MOV      r0,r5                 ;957
000146  f7fffffe          BL       eap_sim_client_error
00014a  4606              MOV      r6,r0                 ;957
00014c  bf00              NOP                            ;959
                  |L20.334|
00014e  bf00              NOP                            ;938
000150  bf00              NOP                            ;962
                  |L20.338|
000152  f8950168          LDRB     r0,[r5,#0x168]        ;963
000156  2804              CMP      r0,#4                 ;963
000158  d104              BNE      |L20.356|
00015a  2000              MOVS     r0,#0                 ;964
00015c  7160              STRB     r0,[r4,#5]            ;964
00015e  2004              MOVS     r0,#4                 ;965
000160  7120              STRB     r0,[r4,#4]            ;965
000162  e01e              B        |L20.418|
                  |L20.356|
000164  f8950168          LDRB     r0,[r5,#0x168]        ;966
000168  2803              CMP      r0,#3                 ;966
00016a  d10e              BNE      |L20.394|
00016c  f8d50170          LDR      r0,[r5,#0x170]        ;967
000170  b108              CBZ      r0,|L20.374|
000172  2002              MOVS     r0,#2                 ;968
000174  e000              B        |L20.376|
                  |L20.374|
000176  2001              MOVS     r0,#1                 ;968
                  |L20.376|
000178  7160              STRB     r0,[r4,#5]            ;968
00017a  f8d50170          LDR      r0,[r5,#0x170]        ;969
00017e  b108              CBZ      r0,|L20.388|
000180  2004              MOVS     r0,#4                 ;970
000182  e000              B        |L20.390|
                  |L20.388|
000184  2003              MOVS     r0,#3                 ;970
                  |L20.390|
000186  7120              STRB     r0,[r4,#4]            ;970
000188  e00b              B        |L20.418|
                  |L20.394|
00018a  f8950168          LDRB     r0,[r5,#0x168]        ;971
00018e  2802              CMP      r0,#2                 ;971
000190  d101              BNE      |L20.406|
000192  7120              STRB     r0,[r4,#4]            ;972
000194  e005              B        |L20.418|
                  |L20.406|
000196  f8950168          LDRB     r0,[r5,#0x168]        ;973
00019a  2801              CMP      r0,#1                 ;973
00019c  d101              BNE      |L20.418|
00019e  2002              MOVS     r0,#2                 ;974
0001a0  7120              STRB     r0,[r4,#4]            ;974
                  |L20.418|
0001a2  7920              LDRB     r0,[r4,#4]            ;976
0001a4  2804              CMP      r0,#4                 ;976
0001a6  d101              BNE      |L20.428|
0001a8  2000              MOVS     r0,#0                 ;977
0001aa  60a0              STR      r0,[r4,#8]            ;977
                  |L20.428|
0001ac  4630              MOV      r0,r6                 ;980
0001ae  e741              B        |L20.52|
;;;982    
                          ENDP

                  |L20.432|
0001b0  4541502d          DCB      "EAP-SIM: EAP data",0
0001b4  53494d3a
0001b8  20454150
0001bc  20646174
0001c0  6100    
0001c2  00                DCB      0
0001c3  00                DCB      0
                  |L20.452|
0001c4  4541502d          DCB      "EAP-SIM: Identity not configured",0
0001c8  53494d3a
0001cc  20496465
0001d0  6e746974
0001d4  79206e6f
0001d8  7420636f
0001dc  6e666967
0001e0  75726564
0001e4  00      
0001e5  00                DCB      0
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L20.488|
0001e8  4541502d          DCB      "EAP-SIM: Subtype=%d",0
0001ec  53494d3a
0001f0  20537562
0001f4  74797065
0001f8  3d256400
                  |L20.508|
0001fc  4541502d          DCB      "EAP-SIM: subtype Client-Error",0
000200  53494d3a
000204  20737562
000208  74797065
00020c  20436c69
000210  656e742d
000214  4572726f
000218  7200    
00021a  00                DCB      0
00021b  00                DCB      0
                  |L20.540|
00021c  4541502d          DCB      "EAP-SIM: Unknown subtype=%d",0
000220  53494d3a
000224  20556e6b
000228  6e6f776e
00022c  20737562
000230  74797065
000234  3d256400

                          AREA ||i.eap_sim_process_challenge||, CODE, READONLY, ALIGN=2

                  eap_sim_process_challenge PROC
;;;572    
;;;573    static struct wpabuf * eap_sim_process_challenge(struct eap_sm *sm,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;574    						 struct eap_sim_data *data,
;;;575    						 u8 id,
;;;576    						 const struct wpabuf *reqData,
;;;577    						 struct eap_sim_attrs *attr)
;;;578    {
000004  b0ae              SUB      sp,sp,#0xb8
000006  4682              MOV      r10,r0
000008  460c              MOV      r4,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
00000e  9d36              LDR      r5,[sp,#0xd8]
;;;579    	const u8 *identity;
;;;580    	size_t identity_len;
;;;581    	struct eap_sim_attrs eattr;
;;;582    
;;;583    	wpa_printf(MSG_DEBUG, "EAP-SIM: subtype Challenge");
000010  a18e              ADR      r1,|L21.588|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;584    	data->reauth = 0;
000018  2000              MOVS     r0,#0
00001a  f8c40154          STR      r0,[r4,#0x154]
;;;585    	if (!attr->mac || !attr->rand) {
00001e  68a8              LDR      r0,[r5,#8]
000020  b108              CBZ      r0,|L21.38|
000022  6828              LDR      r0,[r5,#0]
000024  b9b8              CBNZ     r0,|L21.86|
                  |L21.38|
;;;586    		wpa_printf(MSG_WARNING, "EAP-SIM: Challenge message "
000026  6828              LDR      r0,[r5,#0]
000028  b908              CBNZ     r0,|L21.46|
;;;587    			   "did not include%s%s",
;;;588    			   !attr->mac ? " AT_MAC" : "",
;;;589    			   !attr->rand ? " AT_RAND" : "");
00002a  a08f              ADR      r0,|L21.616|
00002c  e000              B        |L21.48|
                  |L21.46|
00002e  a090              ADR      r0,|L21.624|
                  |L21.48|
000030  4603              MOV      r3,r0
000032  68a8              LDR      r0,[r5,#8]
000034  b908              CBNZ     r0,|L21.58|
000036  a08f              ADR      r0,|L21.628|
000038  e000              B        |L21.60|
                  |L21.58|
00003a  a08d              ADR      r0,|L21.624|
                  |L21.60|
00003c  4602              MOV      r2,r0                 ;588
00003e  a18f              ADR      r1,|L21.636|
000040  2000              MOVS     r0,#0                 ;588
000042  f7fffffe          BL       wpa_printf
;;;590    		return eap_sim_client_error(data, id,
000046  2200              MOVS     r2,#0
000048  4639              MOV      r1,r7
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       eap_sim_client_error
                  |L21.80|
;;;591    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;592    	}
;;;593    
;;;594    	wpa_printf(MSG_DEBUG, "EAP-SIM: %lu challenges",
;;;595    		   (unsigned long) attr->num_chal);
;;;596    	if (attr->num_chal < data->min_num_chal) {
;;;597    		wpa_printf(MSG_INFO, "EAP-SIM: Insufficient number of "
;;;598    			   "challenges (%lu)", (unsigned long) attr->num_chal);
;;;599    		return eap_sim_client_error(data, id,
;;;600    					    EAP_SIM_INSUFFICIENT_NUM_OF_CHAL);
;;;601    	}
;;;602    	if (attr->num_chal > 3) {
;;;603    		wpa_printf(MSG_INFO, "EAP-SIM: Too many challenges "
;;;604    			   "(%lu)", (unsigned long) attr->num_chal);
;;;605    		return eap_sim_client_error(data, id,
;;;606    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;607    	}
;;;608    
;;;609    	/* Verify that RANDs are different */
;;;610    	if (os_memcmp(attr->rand, attr->rand + GSM_RAND_LEN,
;;;611    		   GSM_RAND_LEN) == 0 ||
;;;612    	    (attr->num_chal > 2 &&
;;;613    	     (os_memcmp(attr->rand, attr->rand + 2 * GSM_RAND_LEN,
;;;614    			GSM_RAND_LEN) == 0 ||
;;;615    	      os_memcmp(attr->rand + GSM_RAND_LEN,
;;;616    			attr->rand + 2 * GSM_RAND_LEN,
;;;617    			GSM_RAND_LEN) == 0))) {
;;;618    		wpa_printf(MSG_INFO, "EAP-SIM: Same RAND used multiple times");
;;;619    		return eap_sim_client_error(data, id,
;;;620    					    EAP_SIM_RAND_NOT_FRESH);
;;;621    	}
;;;622    
;;;623    	os_memcpy(data->rand, attr->rand, attr->num_chal * GSM_RAND_LEN);
;;;624    	data->num_chal = attr->num_chal;
;;;625    		
;;;626    	if (eap_sim_gsm_auth(sm, data)) {
;;;627    		wpa_printf(MSG_WARNING, "EAP-SIM: GSM authentication failed");
;;;628    		return eap_sim_client_error(data, id,
;;;629    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;630    	}
;;;631    	if (data->last_eap_identity) {
;;;632    		identity = data->last_eap_identity;
;;;633    		identity_len = data->last_eap_identity_len;
;;;634    	} else if (data->pseudonym) {
;;;635    		identity = data->pseudonym;
;;;636    		identity_len = data->pseudonym_len;
;;;637    	} else
;;;638    		identity = eap_get_config_identity(sm, &identity_len);
;;;639    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-SIM: Selected identity for MK "
;;;640    			  "derivation", identity, identity_len);
;;;641    	eap_sim_derive_mk(identity, identity_len, data->nonce_mt,
;;;642    			  data->selected_version, data->ver_list,
;;;643    			  data->ver_list_len, data->num_chal,
;;;644    			  (const u8 *) data->kc, data->mk);
;;;645    	eap_sim_derive_keys(data->mk, data->k_encr, data->k_aut, data->msk,
;;;646    			    data->emsk);
;;;647    	if (eap_sim_verify_mac(data->k_aut, reqData, attr->mac, data->nonce_mt,
;;;648    			       EAP_SIM_NONCE_MT_LEN)) {
;;;649    		wpa_printf(MSG_WARNING, "EAP-SIM: Challenge message "
;;;650    			   "used invalid AT_MAC");
;;;651    		return eap_sim_client_error(data, id,
;;;652    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;653    	}
;;;654    
;;;655    	/* Old reauthentication and pseudonym identities must not be used
;;;656    	 * anymore. In other words, if no new identities are received, full
;;;657    	 * authentication will be used on next reauthentication. */
;;;658    	eap_sim_clear_identities(data, CLEAR_PSEUDONYM | CLEAR_REAUTH_ID |
;;;659    				 CLEAR_EAP_ID);
;;;660    
;;;661    	if (attr->encr_data) {
;;;662    		u8 *decrypted;
;;;663    		decrypted = eap_sim_parse_encr(data->k_encr, attr->encr_data,
;;;664    					       attr->encr_data_len, attr->iv,
;;;665    					       &eattr, 0);
;;;666    		if (decrypted == NULL) {
;;;667    			return eap_sim_client_error(
;;;668    				data, id, EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;669    		}
;;;670    		eap_sim_learn_ids(data, &eattr);
;;;671    		os_free(decrypted);
;;;672    	}
;;;673    
;;;674    	if (data->result_ind && attr->result_ind)
;;;675    		data->use_result_ind = 1;
;;;676    
;;;677    	if (data->state != FAILURE && data->state != RESULT_FAILURE) {
;;;678    		eap_sim_state(data, data->use_result_ind ?
;;;679    			      RESULT_SUCCESS : SUCCESS);
;;;680    	}
;;;681    
;;;682    	data->num_id_req = 0;
;;;683    	data->num_notification = 0;
;;;684    	/* RFC 4186 specifies that counter is initialized to one after
;;;685    	 * fullauth, but initializing it to zero makes it easier to implement
;;;686    	 * reauth verification. */
;;;687    	data->counter = 0;
;;;688    	return eap_sim_response_challenge(data, id);
;;;689    }
000050  b02e              ADD      sp,sp,#0xb8
000052  e8bd87f0          POP      {r4-r10,pc}
                  |L21.86|
000056  a195              ADR      r1,|L21.684|
000058  2000              MOVS     r0,#0                 ;594
00005a  6c2a              LDR      r2,[r5,#0x40]         ;594
00005c  f7fffffe          BL       wpa_printf
000060  6c28              LDR      r0,[r5,#0x40]         ;596
000062  68e1              LDR      r1,[r4,#0xc]          ;596
000064  4288              CMP      r0,r1                 ;596
000066  d20a              BCS      |L21.126|
000068  a196              ADR      r1,|L21.708|
00006a  2000              MOVS     r0,#0                 ;597
00006c  6c2a              LDR      r2,[r5,#0x40]         ;597
00006e  f7fffffe          BL       wpa_printf
000072  2202              MOVS     r2,#2                 ;599
000074  4639              MOV      r1,r7                 ;599
000076  4620              MOV      r0,r4                 ;599
000078  f7fffffe          BL       eap_sim_client_error
00007c  e7e8              B        |L21.80|
                  |L21.126|
00007e  6c28              LDR      r0,[r5,#0x40]         ;602
000080  2803              CMP      r0,#3                 ;602
000082  d90a              BLS      |L21.154|
000084  a19c              ADR      r1,|L21.760|
000086  2000              MOVS     r0,#0                 ;603
000088  6c2a              LDR      r2,[r5,#0x40]         ;603
00008a  f7fffffe          BL       wpa_printf
00008e  2200              MOVS     r2,#0                 ;605
000090  4639              MOV      r1,r7                 ;605
000092  4620              MOV      r0,r4                 ;605
000094  f7fffffe          BL       eap_sim_client_error
000098  e7da              B        |L21.80|
                  |L21.154|
00009a  682a              LDR      r2,[r5,#0]            ;610
00009c  f1020110          ADD      r1,r2,#0x10           ;610
0000a0  4610              MOV      r0,r2                 ;610
0000a2  2210              MOVS     r2,#0x10              ;610
0000a4  f7fffffe          BL       os_memcmp
0000a8  b198              CBZ      r0,|L21.210|
0000aa  6c28              LDR      r0,[r5,#0x40]         ;612
0000ac  2802              CMP      r0,#2                 ;612
0000ae  d91a              BLS      |L21.230|
0000b0  682a              LDR      r2,[r5,#0]            ;613
0000b2  f1020120          ADD      r1,r2,#0x20           ;613
0000b6  4610              MOV      r0,r2                 ;613
0000b8  2210              MOVS     r2,#0x10              ;613
0000ba  f7fffffe          BL       os_memcmp
0000be  b140              CBZ      r0,|L21.210|
0000c0  682a              LDR      r2,[r5,#0]            ;615
0000c2  f1020120          ADD      r1,r2,#0x20           ;615
0000c6  f1020010          ADD      r0,r2,#0x10           ;615
0000ca  2210              MOVS     r2,#0x10              ;615
0000cc  f7fffffe          BL       os_memcmp
0000d0  b948              CBNZ     r0,|L21.230|
                  |L21.210|
0000d2  a192              ADR      r1,|L21.796|
0000d4  2000              MOVS     r0,#0                 ;618
0000d6  f7fffffe          BL       wpa_printf
0000da  2203              MOVS     r2,#3                 ;619
0000dc  4639              MOV      r1,r7                 ;619
0000de  4620              MOV      r0,r4                 ;619
0000e0  f7fffffe          BL       eap_sim_client_error
0000e4  e7b4              B        |L21.80|
                  |L21.230|
0000e6  6c28              LDR      r0,[r5,#0x40]         ;623
0000e8  0102              LSLS     r2,r0,#4              ;623
0000ea  f5047086          ADD      r0,r4,#0x10c          ;623
0000ee  6829              LDR      r1,[r5,#0]            ;623
0000f0  f7fffffe          BL       os_memcpy
0000f4  6c28              LDR      r0,[r5,#0x40]         ;624
0000f6  6120              STR      r0,[r4,#0x10]         ;624
0000f8  4621              MOV      r1,r4                 ;626
0000fa  4650              MOV      r0,r10                ;626
0000fc  f7fffffe          BL       eap_sim_gsm_auth
000100  b148              CBZ      r0,|L21.278|
000102  a190              ADR      r1,|L21.836|
000104  2000              MOVS     r0,#0                 ;627
000106  f7fffffe          BL       wpa_printf
00010a  2200              MOVS     r2,#0                 ;628
00010c  4639              MOV      r1,r7                 ;628
00010e  4620              MOV      r0,r4                 ;628
000110  f7fffffe          BL       eap_sim_client_error
000114  e79c              B        |L21.80|
                  |L21.278|
000116  f8d40160          LDR      r0,[r4,#0x160]        ;631
00011a  b128              CBZ      r0,|L21.296|
00011c  f8d46160          LDR      r6,[r4,#0x160]        ;632
000120  f8d40164          LDR      r0,[r4,#0x164]        ;633
000124  902d              STR      r0,[sp,#0xb4]         ;633
000126  e00d              B        |L21.324|
                  |L21.296|
000128  f8d40144          LDR      r0,[r4,#0x144]        ;634
00012c  b128              CBZ      r0,|L21.314|
00012e  f8d46144          LDR      r6,[r4,#0x144]        ;635
000132  f8d40148          LDR      r0,[r4,#0x148]        ;636
000136  902d              STR      r0,[sp,#0xb4]         ;636
000138  e004              B        |L21.324|
                  |L21.314|
00013a  a92d              ADD      r1,sp,#0xb4           ;638
00013c  4650              MOV      r0,r10                ;638
00013e  f7fffffe          BL       eap_get_config_identity
000142  4606              MOV      r6,r0                 ;638
                  |L21.324|
000144  4632              MOV      r2,r6                 ;639
000146  a188              ADR      r1,|L21.872|
000148  2000              MOVS     r0,#0                 ;639
00014a  9b2d              LDR      r3,[sp,#0xb4]         ;639
00014c  f7fffffe          BL       wpa_hexdump_ascii
000150  f1040358          ADD      r3,r4,#0x58           ;641
000154  f1040214          ADD      r2,r4,#0x14           ;641
000158  6921              LDR      r1,[r4,#0x10]         ;641
00015a  6860              LDR      r0,[r4,#4]            ;641
00015c  e9cd2303          STRD     r2,r3,[sp,#0xc]       ;641
000160  e9cd0101          STRD     r0,r1,[sp,#4]         ;641
000164  6823              LDR      r3,[r4,#0]            ;641
000166  9300              STR      r3,[sp,#0]            ;641
000168  68a0              LDR      r0,[r4,#8]            ;641
00016a  b283              UXTH     r3,r0                 ;641
00016c  3224              ADDS     r2,r2,#0x24           ;641
00016e  4630              MOV      r0,r6                 ;641
000170  992d              LDR      r1,[sp,#0xb4]         ;641
000172  f7fffffe          BL       eap_sim_derive_mk
000176  f10403cc          ADD      r3,r4,#0xcc           ;645
00017a  9300              STR      r3,[sp,#0]            ;645
00017c  3b40              SUBS     r3,r3,#0x40           ;645
00017e  f104026c          ADD      r2,r4,#0x6c           ;645
000182  f104017c          ADD      r1,r4,#0x7c           ;645
000186  f1040058          ADD      r0,r4,#0x58           ;645
00018a  f7fffffe          BL       eap_sim_derive_keys
00018e  2310              MOVS     r3,#0x10              ;647
000190  9300              STR      r3,[sp,#0]            ;647
000192  f1040338          ADD      r3,r4,#0x38           ;647
000196  4641              MOV      r1,r8                 ;647
000198  f104006c          ADD      r0,r4,#0x6c           ;647
00019c  68aa              LDR      r2,[r5,#8]            ;647
00019e  f7fffffe          BL       eap_sim_verify_mac
0001a2  b148              CBZ      r0,|L21.440|
0001a4  a17c              ADR      r1,|L21.920|
0001a6  2000              MOVS     r0,#0                 ;649
0001a8  f7fffffe          BL       wpa_printf
0001ac  2200              MOVS     r2,#0                 ;651
0001ae  4639              MOV      r1,r7                 ;651
0001b0  4620              MOV      r0,r4                 ;651
0001b2  f7fffffe          BL       eap_sim_client_error
0001b6  e74b              B        |L21.80|
                  |L21.440|
0001b8  2107              MOVS     r1,#7                 ;658
0001ba  4620              MOV      r0,r4                 ;658
0001bc  f7fffffe          BL       eap_sim_clear_identities
0001c0  6928              LDR      r0,[r5,#0x10]         ;661
0001c2  b1e0              CBZ      r0,|L21.510|
0001c4  2300              MOVS     r3,#0                 ;663
0001c6  aa06              ADD      r2,sp,#0x18           ;663
0001c8  e9cd2300          STRD     r2,r3,[sp,#0]         ;663
0001cc  f104007c          ADD      r0,r4,#0x7c           ;663
0001d0  e9d53103          LDRD     r3,r1,[r5,#0xc]       ;663
0001d4  6caa              LDR      r2,[r5,#0x48]         ;663
0001d6  f7fffffe          BL       eap_sim_parse_encr
0001da  4681              MOV      r9,r0                 ;663
0001dc  f1b90f00          CMP      r9,#0                 ;666
0001e0  d105              BNE      |L21.494|
0001e2  2200              MOVS     r2,#0                 ;667
0001e4  4639              MOV      r1,r7                 ;667
0001e6  4620              MOV      r0,r4                 ;667
0001e8  f7fffffe          BL       eap_sim_client_error
0001ec  e730              B        |L21.80|
                  |L21.494|
0001ee  a906              ADD      r1,sp,#0x18           ;670
0001f0  4620              MOV      r0,r4                 ;670
0001f2  f7fffffe          BL       eap_sim_learn_ids
0001f6  4648              MOV      r0,r9                 ;671
0001f8  f7fffffe          BL       os_free
0001fc  bf00              NOP                            ;672
                  |L21.510|
0001fe  f8d4016c          LDR      r0,[r4,#0x16c]        ;674
000202  b128              CBZ      r0,|L21.528|
000204  f8d50080          LDR      r0,[r5,#0x80]         ;674
000208  b110              CBZ      r0,|L21.528|
00020a  2001              MOVS     r0,#1                 ;675
00020c  f8c40170          STR      r0,[r4,#0x170]        ;675
                  |L21.528|
000210  f8940168          LDRB     r0,[r4,#0x168]        ;677
000214  2804              CMP      r0,#4                 ;677
000216  d00d              BEQ      |L21.564|
000218  f8940168          LDRB     r0,[r4,#0x168]        ;677
00021c  2802              CMP      r0,#2                 ;677
00021e  d009              BEQ      |L21.564|
000220  f8d40170          LDR      r0,[r4,#0x170]        ;678
000224  b108              CBZ      r0,|L21.554|
000226  2001              MOVS     r0,#1                 ;679
000228  e000              B        |L21.556|
                  |L21.554|
00022a  2003              MOVS     r0,#3                 ;679
                  |L21.556|
00022c  4601              MOV      r1,r0                 ;679
00022e  4620              MOV      r0,r4                 ;679
000230  f7fffffe          BL       eap_sim_state
                  |L21.564|
000234  2000              MOVS     r0,#0                 ;682
000236  f8c4013c          STR      r0,[r4,#0x13c]        ;682
00023a  f8c40140          STR      r0,[r4,#0x140]        ;683
00023e  f8c40158          STR      r0,[r4,#0x158]        ;687
000242  4639              MOV      r1,r7                 ;688
000244  4620              MOV      r0,r4                 ;688
000246  f7fffffe          BL       eap_sim_response_challenge
00024a  e701              B        |L21.80|
;;;690    
                          ENDP

                  |L21.588|
00024c  4541502d          DCB      "EAP-SIM: subtype Challenge",0
000250  53494d3a
000254  20737562
000258  74797065
00025c  20436861
000260  6c6c656e
000264  676500  
000267  00                DCB      0
                  |L21.616|
000268  2041545f          DCB      " AT_RAND"
00026c  52414e44
                  |L21.624|
000270  00                DCB      0
000271  00                DCB      0
000272  00                DCB      0
000273  00                DCB      0
                  |L21.628|
000274  2041545f          DCB      " AT_MAC",0
000278  4d414300
                  |L21.636|
00027c  4541502d          DCB      "EAP-SIM: Challenge message did not include%s%s",0
000280  53494d3a
000284  20436861
000288  6c6c656e
00028c  6765206d
000290  65737361
000294  67652064
000298  6964206e
00029c  6f742069
0002a0  6e636c75
0002a4  64652573
0002a8  257300  
0002ab  00                DCB      0
                  |L21.684|
0002ac  4541502d          DCB      "EAP-SIM: %lu challenges",0
0002b0  53494d3a
0002b4  20256c75
0002b8  20636861
0002bc  6c6c656e
0002c0  67657300
                  |L21.708|
0002c4  4541502d          DCB      "EAP-SIM: Insufficient number of challenges (%lu)",0
0002c8  53494d3a
0002cc  20496e73
0002d0  75666669
0002d4  6369656e
0002d8  74206e75
0002dc  6d626572
0002e0  206f6620
0002e4  6368616c
0002e8  6c656e67
0002ec  65732028
0002f0  256c7529
0002f4  00      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0
                  |L21.760|
0002f8  4541502d          DCB      "EAP-SIM: Too many challenges (%lu)",0
0002fc  53494d3a
000300  20546f6f
000304  206d616e
000308  79206368
00030c  616c6c65
000310  6e676573
000314  2028256c
000318  752900  
00031b  00                DCB      0
                  |L21.796|
00031c  4541502d          DCB      "EAP-SIM: Same RAND used multiple times",0
000320  53494d3a
000324  2053616d
000328  65205241
00032c  4e442075
000330  73656420
000334  6d756c74
000338  69706c65
00033c  2074696d
000340  657300  
000343  00                DCB      0
                  |L21.836|
000344  4541502d          DCB      "EAP-SIM: GSM authentication failed",0
000348  53494d3a
00034c  2047534d
000350  20617574
000354  68656e74
000358  69636174
00035c  696f6e20
000360  6661696c
000364  656400  
000367  00                DCB      0
                  |L21.872|
000368  4541502d          DCB      "EAP-SIM: Selected identity for MK derivation",0
00036c  53494d3a
000370  2053656c
000374  65637465
000378  64206964
00037c  656e7469
000380  74792066
000384  6f72204d
000388  4b206465
00038c  72697661
000390  74696f6e
000394  00      
000395  00                DCB      0
000396  00                DCB      0
000397  00                DCB      0
                  |L21.920|
000398  4541502d          DCB      "EAP-SIM: Challenge message used invalid AT_MAC",0
00039c  53494d3a
0003a0  20436861
0003a4  6c6c656e
0003a8  6765206d
0003ac  65737361
0003b0  67652075
0003b4  73656420
0003b8  696e7661
0003bc  6c696420
0003c0  41545f4d
0003c4  414300  
0003c7  00                DCB      0

                          AREA ||i.eap_sim_process_notification||, CODE, READONLY, ALIGN=2

                  eap_sim_process_notification PROC
;;;753    
;;;754    static struct wpabuf * eap_sim_process_notification(
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;755    	struct eap_sm *sm, struct eap_sim_data *data, u8 id,
;;;756    	const struct wpabuf *reqData, struct eap_sim_attrs *attr)
;;;757    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9c06              LDR      r4,[sp,#0x18]
;;;758    	wpa_printf(MSG_DEBUG, "EAP-SIM: subtype Notification");
00000e  a12c              ADR      r1,|L22.192|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       wpa_printf
;;;759    	if (data->num_notification > 0) {
000016  f8d50140          LDR      r0,[r5,#0x140]
00001a  2800              CMP      r0,#0
00001c  dd0a              BLE      |L22.52|
;;;760    		wpa_printf(MSG_INFO, "EAP-SIM: too many notification "
00001e  a130              ADR      r1,|L22.224|
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       wpa_printf
;;;761    			   "rounds (only one allowed)");
;;;762    		return eap_sim_client_error(data, id,
000026  2200              MOVS     r2,#0
000028  4639              MOV      r1,r7
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       eap_sim_client_error
                  |L22.48|
;;;763    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;764    	}
;;;765    	data->num_notification++;
;;;766    	if (attr->notification == -1) {
;;;767    		wpa_printf(MSG_INFO, "EAP-SIM: no AT_NOTIFICATION in "
;;;768    			   "Notification message");
;;;769    		return eap_sim_client_error(data, id,
;;;770    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;771    	}
;;;772    
;;;773    	if ((attr->notification & 0x4000) == 0 &&
;;;774    	    eap_sim_process_notification_auth(data, reqData, attr)) {
;;;775    		return eap_sim_client_error(data, id,
;;;776    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;777    	}
;;;778    
;;;779    	eap_sim_report_notification(sm->msg_ctx, attr->notification, 0);
;;;780    	if (attr->notification >= 0 && attr->notification < 32768) {
;;;781    		eap_sim_state(data, FAILURE);
;;;782    	} else if (attr->notification == EAP_SIM_SUCCESS &&
;;;783    		   data->state == RESULT_SUCCESS)
;;;784    		eap_sim_state(data, SUCCESS);
;;;785    	return eap_sim_response_notification(data, id, attr->notification);
;;;786    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L22.52|
000034  f8d50140          LDR      r0,[r5,#0x140]        ;765
000038  1c40              ADDS     r0,r0,#1              ;765
00003a  f8c50140          STR      r0,[r5,#0x140]        ;765
00003e  6ee0              LDR      r0,[r4,#0x6c]         ;766
000040  1c40              ADDS     r0,r0,#1              ;766
000042  d108              BNE      |L22.86|
000044  a135              ADR      r1,|L22.284|
000046  f7fffffe          BL       wpa_printf
00004a  2200              MOVS     r2,#0                 ;769
00004c  4639              MOV      r1,r7                 ;769
00004e  4628              MOV      r0,r5                 ;769
000050  f7fffffe          BL       eap_sim_client_error
000054  e7ec              B        |L22.48|
                  |L22.86|
000056  6ee0              LDR      r0,[r4,#0x6c]         ;773
000058  f4104f80          TST      r0,#0x4000            ;773
00005c  d10b              BNE      |L22.118|
00005e  4622              MOV      r2,r4                 ;774
000060  4641              MOV      r1,r8                 ;774
000062  4628              MOV      r0,r5                 ;774
000064  f7fffffe          BL       eap_sim_process_notification_auth
000068  b128              CBZ      r0,|L22.118|
00006a  2200              MOVS     r2,#0                 ;775
00006c  4639              MOV      r1,r7                 ;775
00006e  4628              MOV      r0,r5                 ;775
000070  f7fffffe          BL       eap_sim_client_error
000074  e7dc              B        |L22.48|
                  |L22.118|
000076  6ee1              LDR      r1,[r4,#0x6c]         ;779
000078  2200              MOVS     r2,#0                 ;779
00007a  f8d60090          LDR      r0,[r6,#0x90]         ;779
00007e  f7fffffe          BL       eap_sim_report_notification
000082  6ee0              LDR      r0,[r4,#0x6c]         ;780
000084  2800              CMP      r0,#0                 ;780
000086  db08              BLT      |L22.154|
000088  6ee0              LDR      r0,[r4,#0x6c]         ;780
00008a  f5b04f00          CMP      r0,#0x8000            ;780
00008e  da04              BGE      |L22.154|
000090  2104              MOVS     r1,#4                 ;781
000092  4628              MOV      r0,r5                 ;781
000094  f7fffffe          BL       eap_sim_state
000098  e00b              B        |L22.178|
                  |L22.154|
00009a  6ee0              LDR      r0,[r4,#0x6c]         ;782
00009c  f5b04f00          CMP      r0,#0x8000            ;782
0000a0  d107              BNE      |L22.178|
0000a2  f8950168          LDRB     r0,[r5,#0x168]        ;783
0000a6  2801              CMP      r0,#1                 ;783
0000a8  d103              BNE      |L22.178|
0000aa  2103              MOVS     r1,#3                 ;784
0000ac  4628              MOV      r0,r5                 ;784
0000ae  f7fffffe          BL       eap_sim_state
                  |L22.178|
0000b2  6ee0              LDR      r0,[r4,#0x6c]         ;785
0000b4  b282              UXTH     r2,r0                 ;785
0000b6  4639              MOV      r1,r7                 ;785
0000b8  4628              MOV      r0,r5                 ;785
0000ba  f7fffffe          BL       eap_sim_response_notification
0000be  e7b7              B        |L22.48|
;;;787    
                          ENDP

                  |L22.192|
0000c0  4541502d          DCB      "EAP-SIM: subtype Notification",0
0000c4  53494d3a
0000c8  20737562
0000cc  74797065
0000d0  204e6f74
0000d4  69666963
0000d8  6174696f
0000dc  6e00    
0000de  00                DCB      0
0000df  00                DCB      0
                  |L22.224|
0000e0  4541502d          DCB      "EAP-SIM: too many notification rounds (only one allowed"
0000e4  53494d3a
0000e8  20746f6f
0000ec  206d616e
0000f0  79206e6f
0000f4  74696669
0000f8  63617469
0000fc  6f6e2072
000100  6f756e64
000104  7320286f
000108  6e6c7920
00010c  6f6e6520
000110  616c6c6f
000114  776564  
000117  2900              DCB      ")",0
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L22.284|
00011c  4541502d          DCB      "EAP-SIM: no AT_NOTIFICATION in Notification message",0
000120  53494d3a
000124  206e6f20
000128  41545f4e
00012c  4f544946
000130  49434154
000134  494f4e20
000138  696e204e
00013c  6f746966
000140  69636174
000144  696f6e20
000148  6d657373
00014c  61676500

                          AREA ||i.eap_sim_process_notification_auth||, CODE, READONLY, ALIGN=2

                  eap_sim_process_notification_auth PROC
;;;725    
;;;726    static int eap_sim_process_notification_auth(struct eap_sim_data *data,
000000  b5f8              PUSH     {r3-r7,lr}
;;;727    					     const struct wpabuf *reqData,
;;;728    					     struct eap_sim_attrs *attr)
;;;729    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;730    	if (attr->mac == NULL) {
000008  68a0              LDR      r0,[r4,#8]
00000a  b930              CBNZ     r0,|L23.26|
;;;731    		wpa_printf(MSG_INFO, "EAP-SIM: no AT_MAC in after_auth "
00000c  a114              ADR      r1,|L23.96|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;732    			   "Notification message");
;;;733    		return -1;
000014  f04f30ff          MOV      r0,#0xffffffff
                  |L23.24|
;;;734    	}
;;;735    
;;;736    	if (eap_sim_verify_mac(data->k_aut, reqData, attr->mac, (u8 *) "", 0))
;;;737    	{
;;;738    		wpa_printf(MSG_WARNING, "EAP-SIM: Notification message "
;;;739    			   "used invalid AT_MAC");
;;;740    		return -1;
;;;741    	}
;;;742    
;;;743    	if (data->reauth &&
;;;744    	    eap_sim_process_notification_reauth(data, attr)) {
;;;745    		wpa_printf(MSG_WARNING, "EAP-SIM: Invalid notification "
;;;746    			   "message after reauth");
;;;747    		return -1;
;;;748    	}
;;;749    
;;;750    	return 0;
;;;751    }
000018  bdf8              POP      {r3-r7,pc}
                  |L23.26|
00001a  2300              MOVS     r3,#0                 ;736
00001c  9300              STR      r3,[sp,#0]            ;736
00001e  a31e              ADR      r3,|L23.152|
000020  4631              MOV      r1,r6                 ;736
000022  f105006c          ADD      r0,r5,#0x6c           ;736
000026  68a2              LDR      r2,[r4,#8]            ;736
000028  f7fffffe          BL       eap_sim_verify_mac
00002c  b130              CBZ      r0,|L23.60|
00002e  a11b              ADR      r1,|L23.156|
000030  2000              MOVS     r0,#0                 ;738
000032  f7fffffe          BL       wpa_printf
000036  f04f30ff          MOV      r0,#0xffffffff        ;740
00003a  e7ed              B        |L23.24|
                  |L23.60|
00003c  f8d50154          LDR      r0,[r5,#0x154]        ;743
000040  b158              CBZ      r0,|L23.90|
000042  4621              MOV      r1,r4                 ;744
000044  4628              MOV      r0,r5                 ;744
000046  f7fffffe          BL       eap_sim_process_notification_reauth
00004a  b130              CBZ      r0,|L23.90|
00004c  a120              ADR      r1,|L23.208|
00004e  2000              MOVS     r0,#0                 ;745
000050  f7fffffe          BL       wpa_printf
000054  f04f30ff          MOV      r0,#0xffffffff        ;747
000058  e7de              B        |L23.24|
                  |L23.90|
00005a  2000              MOVS     r0,#0                 ;750
00005c  e7dc              B        |L23.24|
;;;752    
                          ENDP

00005e  0000              DCW      0x0000
                  |L23.96|
000060  4541502d          DCB      "EAP-SIM: no AT_MAC in after_auth Notification message",0
000064  53494d3a
000068  206e6f20
00006c  41545f4d
000070  41432069
000074  6e206166
000078  7465725f
00007c  61757468
000080  204e6f74
000084  69666963
000088  6174696f
00008c  6e206d65
000090  73736167
000094  6500    
000096  00                DCB      0
000097  00                DCB      0
                  |L23.152|
000098  00                DCB      0
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L23.156|
00009c  4541502d          DCB      "EAP-SIM: Notification message used invalid AT_MAC",0
0000a0  53494d3a
0000a4  204e6f74
0000a8  69666963
0000ac  6174696f
0000b0  6e206d65
0000b4  73736167
0000b8  65207573
0000bc  65642069
0000c0  6e76616c
0000c4  69642041
0000c8  545f4d41
0000cc  4300    
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L23.208|
0000d0  4541502d          DCB      "EAP-SIM: Invalid notification message after reauth",0
0000d4  53494d3a
0000d8  20496e76
0000dc  616c6964
0000e0  206e6f74
0000e4  69666963
0000e8  6174696f
0000ec  6e206d65
0000f0  73736167
0000f4  65206166
0000f8  74657220
0000fc  72656175
000100  746800  
000103  00                DCB      0

                          AREA ||i.eap_sim_process_notification_reauth||, CODE, READONLY, ALIGN=2

                  eap_sim_process_notification_reauth PROC
;;;691    
;;;692    static int eap_sim_process_notification_reauth(struct eap_sim_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;693    					       struct eap_sim_attrs *attr)
;;;694    {
000002  b0aa              SUB      sp,sp,#0xa8
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;695    	struct eap_sim_attrs eattr;
;;;696    	u8 *decrypted;
;;;697    
;;;698    	if (attr->encr_data == NULL || attr->iv == NULL) {
000008  6920              LDR      r0,[r4,#0x10]
00000a  b108              CBZ      r0,|L24.16|
00000c  68e0              LDR      r0,[r4,#0xc]
00000e  b938              CBNZ     r0,|L24.32|
                  |L24.16|
;;;699    		wpa_printf(MSG_WARNING, "EAP-SIM: Notification message after "
000010  491a              LDR      r1,|L24.124|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;700    			   "reauth did not include encrypted data");
;;;701    		return -1;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L24.28|
;;;702    	}
;;;703    
;;;704    	decrypted = eap_sim_parse_encr(data->k_encr, attr->encr_data,
;;;705    				       attr->encr_data_len, attr->iv, &eattr,
;;;706    				       0);
;;;707    	if (decrypted == NULL) {
;;;708    		wpa_printf(MSG_WARNING, "EAP-SIM: Failed to parse encrypted "
;;;709    			   "data from notification message");
;;;710    		return -1;
;;;711    	}
;;;712    
;;;713    	if (eattr.counter < 0 || (size_t) eattr.counter != data->counter) {
;;;714    		wpa_printf(MSG_WARNING, "EAP-SIM: Counter in notification "
;;;715    			   "message does not match with counter in reauth "
;;;716    			   "message");
;;;717    		os_free(decrypted);
;;;718    		return -1;
;;;719    	}
;;;720    
;;;721    	os_free(decrypted);
;;;722    	return 0;
;;;723    }
00001c  b02a              ADD      sp,sp,#0xa8
00001e  bd70              POP      {r4-r6,pc}
                  |L24.32|
000020  2300              MOVS     r3,#0                 ;704
000022  aa03              ADD      r2,sp,#0xc            ;704
000024  e9cd2300          STRD     r2,r3,[sp,#0]         ;704
000028  f105007c          ADD      r0,r5,#0x7c           ;704
00002c  e9d43103          LDRD     r3,r1,[r4,#0xc]       ;704
000030  6ca2              LDR      r2,[r4,#0x48]         ;704
000032  f7fffffe          BL       eap_sim_parse_encr
000036  4606              MOV      r6,r0                 ;704
000038  b93e              CBNZ     r6,|L24.74|
00003a  4910              LDR      r1,|L24.124|
00003c  314c              ADDS     r1,r1,#0x4c           ;708
00003e  2000              MOVS     r0,#0                 ;708
000040  f7fffffe          BL       wpa_printf
000044  f04f30ff          MOV      r0,#0xffffffff        ;710
000048  e7e8              B        |L24.28|
                  |L24.74|
00004a  981f              LDR      r0,[sp,#0x7c]         ;713
00004c  2800              CMP      r0,#0                 ;713
00004e  db04              BLT      |L24.90|
000050  981f              LDR      r0,[sp,#0x7c]         ;713
000052  f8d51158          LDR      r1,[r5,#0x158]        ;713
000056  4288              CMP      r0,r1                 ;713
000058  d00a              BEQ      |L24.112|
                  |L24.90|
00005a  4908              LDR      r1,|L24.124|
00005c  3190              ADDS     r1,r1,#0x90           ;714
00005e  2000              MOVS     r0,#0                 ;714
000060  f7fffffe          BL       wpa_printf
000064  4630              MOV      r0,r6                 ;717
000066  f7fffffe          BL       os_free
00006a  f04f30ff          MOV      r0,#0xffffffff        ;718
00006e  e7d5              B        |L24.28|
                  |L24.112|
000070  4630              MOV      r0,r6                 ;721
000072  f7fffffe          BL       os_free
000076  2000              MOVS     r0,#0                 ;722
000078  e7d0              B        |L24.28|
;;;724    
                          ENDP

00007a  0000              DCW      0x0000
                  |L24.124|
                          DCD      ||.constdata||+0x48

                          AREA ||i.eap_sim_process_reauthentication||, CODE, READONLY, ALIGN=2

                  eap_sim_process_reauthentication PROC
;;;788    
;;;789    static struct wpabuf * eap_sim_process_reauthentication(
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;790    	struct eap_sm *sm, struct eap_sim_data *data, u8 id,
;;;791    	const struct wpabuf *reqData, struct eap_sim_attrs *attr)
;;;792    {
000004  b0ab              SUB      sp,sp,#0xac
000006  4681              MOV      r9,r0
000008  460c              MOV      r4,r1
00000a  4617              MOV      r7,r2
00000c  4698              MOV      r8,r3
00000e  9d32              LDR      r5,[sp,#0xc8]
;;;793    	struct eap_sim_attrs eattr;
;;;794    	u8 *decrypted;
;;;795    
;;;796    	wpa_printf(MSG_DEBUG, "EAP-SIM: subtype Reauthentication");
000010  a17c              ADR      r1,|L25.516|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;797    
;;;798    	if (data->reauth_id == NULL) {
000018  f8d4014c          LDR      r0,[r4,#0x14c]
00001c  b958              CBNZ     r0,|L25.54|
;;;799    		wpa_printf(MSG_WARNING, "EAP-SIM: Server is trying "
00001e  4982              LDR      r1,|L25.552|
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       wpa_printf
;;;800    			   "reauthentication, but no reauth_id available");
;;;801    		return eap_sim_client_error(data, id,
000026  2200              MOVS     r2,#0
000028  4639              MOV      r1,r7
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       eap_sim_client_error
                  |L25.48|
;;;802    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;803    	}
;;;804    
;;;805    	data->reauth = 1;
;;;806    	if (eap_sim_verify_mac(data->k_aut, reqData, attr->mac, (u8 *) "", 0))
;;;807    	{
;;;808    		wpa_printf(MSG_WARNING, "EAP-SIM: Reauthentication "
;;;809    			   "did not have valid AT_MAC");
;;;810    		return eap_sim_client_error(data, id,
;;;811    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;812    	}
;;;813    
;;;814    	if (attr->encr_data == NULL || attr->iv == NULL) {
;;;815    		wpa_printf(MSG_WARNING, "EAP-SIM: Reauthentication "
;;;816    			   "message did not include encrypted data");
;;;817    		return eap_sim_client_error(data, id,
;;;818    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;819    	}
;;;820    
;;;821    	decrypted = eap_sim_parse_encr(data->k_encr, attr->encr_data,
;;;822    				       attr->encr_data_len, attr->iv, &eattr,
;;;823    				       0);
;;;824    	if (decrypted == NULL) {
;;;825    		wpa_printf(MSG_WARNING, "EAP-SIM: Failed to parse encrypted "
;;;826    			   "data from reauthentication message");
;;;827    		return eap_sim_client_error(data, id,
;;;828    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;829    	}
;;;830    
;;;831    	if (eattr.nonce_s == NULL || eattr.counter < 0) {
;;;832    		wpa_printf(MSG_INFO, "EAP-SIM: (encr) No%s%s in reauth packet",
;;;833    			   !eattr.nonce_s ? " AT_NONCE_S" : "",
;;;834    			   eattr.counter < 0 ? " AT_COUNTER" : "");
;;;835    		os_free(decrypted);
;;;836    		return eap_sim_client_error(data, id,
;;;837    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;838    	}
;;;839    
;;;840    	if (eattr.counter < 0 || (size_t) eattr.counter <= data->counter) {
;;;841    		wpa_printf(MSG_INFO, "EAP-SIM: (encr) Invalid counter "
;;;842    			   "(%d <= %d)", eattr.counter, data->counter);
;;;843    		data->counter_too_small = eattr.counter;
;;;844    		/* Reply using Re-auth w/ AT_COUNTER_TOO_SMALL. The current
;;;845    		 * reauth_id must not be used to start a new reauthentication.
;;;846    		 * However, since it was used in the last EAP-Response-Identity
;;;847    		 * packet, it has to saved for the following fullauth to be
;;;848    		 * used in MK derivation. */
;;;849    		os_free(data->last_eap_identity);
;;;850    		data->last_eap_identity = data->reauth_id;
;;;851    		data->last_eap_identity_len = data->reauth_id_len;
;;;852    		data->reauth_id = NULL;
;;;853    		data->reauth_id_len = 0;
;;;854    		os_free(decrypted);
;;;855    		return eap_sim_response_reauth(data, id, 1);
;;;856    	}
;;;857    	data->counter = eattr.counter;
;;;858    
;;;859    	os_memcpy(data->nonce_s, eattr.nonce_s, EAP_SIM_NONCE_S_LEN);
;;;860    	wpa_hexdump(MSG_DEBUG, "EAP-SIM: (encr) AT_NONCE_S",
;;;861    		    data->nonce_s, EAP_SIM_NONCE_S_LEN);
;;;862    
;;;863    	eap_sim_derive_keys_reauth(data->counter,
;;;864    				   data->reauth_id, data->reauth_id_len,
;;;865    				   data->nonce_s, data->mk, data->msk,
;;;866    				   data->emsk);
;;;867    	eap_sim_clear_identities(data, CLEAR_REAUTH_ID | CLEAR_EAP_ID);
;;;868    	eap_sim_learn_ids(data, &eattr);
;;;869    
;;;870    	if (data->result_ind && attr->result_ind)
;;;871    		data->use_result_ind = 1;
;;;872    
;;;873    	if (data->state != FAILURE && data->state != RESULT_FAILURE) {
;;;874    		eap_sim_state(data, data->use_result_ind ?
;;;875    			      RESULT_SUCCESS : SUCCESS);
;;;876    	}
;;;877    
;;;878    	data->num_id_req = 0;
;;;879    	data->num_notification = 0;
;;;880    	if (data->counter > EAP_SIM_MAX_FAST_REAUTHS) {
;;;881    		wpa_printf(MSG_DEBUG, "EAP-SIM: Maximum number of "
;;;882    			   "fast reauths performed - force fullauth");
;;;883    		eap_sim_clear_identities(data, CLEAR_REAUTH_ID | CLEAR_EAP_ID);
;;;884    	}
;;;885    	os_free(decrypted);
;;;886    	return eap_sim_response_reauth(data, id, 0);
;;;887    }
000030  b02b              ADD      sp,sp,#0xac
000032  e8bd83f0          POP      {r4-r9,pc}
                  |L25.54|
000036  2001              MOVS     r0,#1                 ;805
000038  f8c40154          STR      r0,[r4,#0x154]        ;805
00003c  2300              MOVS     r3,#0                 ;806
00003e  9300              STR      r3,[sp,#0]            ;806
000040  a37a              ADR      r3,|L25.556|
000042  4641              MOV      r1,r8                 ;806
000044  f104006c          ADD      r0,r4,#0x6c           ;806
000048  68aa              LDR      r2,[r5,#8]            ;806
00004a  f7fffffe          BL       eap_sim_verify_mac
00004e  b148              CBZ      r0,|L25.100|
000050  a177              ADR      r1,|L25.560|
000052  2000              MOVS     r0,#0                 ;808
000054  f7fffffe          BL       wpa_printf
000058  2200              MOVS     r2,#0                 ;810
00005a  4639              MOV      r1,r7                 ;810
00005c  4620              MOV      r0,r4                 ;810
00005e  f7fffffe          BL       eap_sim_client_error
000062  e7e5              B        |L25.48|
                  |L25.100|
000064  6928              LDR      r0,[r5,#0x10]         ;814
000066  b108              CBZ      r0,|L25.108|
000068  68e8              LDR      r0,[r5,#0xc]          ;814
00006a  b950              CBNZ     r0,|L25.130|
                  |L25.108|
00006c  496e              LDR      r1,|L25.552|
00006e  3148              ADDS     r1,r1,#0x48           ;815
000070  2000              MOVS     r0,#0                 ;815
000072  f7fffffe          BL       wpa_printf
000076  2200              MOVS     r2,#0                 ;817
000078  4639              MOV      r1,r7                 ;817
00007a  4620              MOV      r0,r4                 ;817
00007c  f7fffffe          BL       eap_sim_client_error
000080  e7d6              B        |L25.48|
                  |L25.130|
000082  2300              MOVS     r3,#0                 ;821
000084  aa04              ADD      r2,sp,#0x10           ;821
000086  e9cd2300          STRD     r2,r3,[sp,#0]         ;821
00008a  f104007c          ADD      r0,r4,#0x7c           ;821
00008e  e9d53103          LDRD     r3,r1,[r5,#0xc]       ;821
000092  6caa              LDR      r2,[r5,#0x48]         ;821
000094  f7fffffe          BL       eap_sim_parse_encr
000098  4606              MOV      r6,r0                 ;821
00009a  b956              CBNZ     r6,|L25.178|
00009c  4962              LDR      r1,|L25.552|
00009e  318c              ADDS     r1,r1,#0x8c           ;825
0000a0  2000              MOVS     r0,#0                 ;825
0000a2  f7fffffe          BL       wpa_printf
0000a6  2200              MOVS     r2,#0                 ;827
0000a8  4639              MOV      r1,r7                 ;827
0000aa  4620              MOV      r0,r4                 ;827
0000ac  f7fffffe          BL       eap_sim_client_error
0000b0  e7be              B        |L25.48|
                  |L25.178|
0000b2  980a              LDR      r0,[sp,#0x28]         ;831
0000b4  b110              CBZ      r0,|L25.188|
0000b6  9820              LDR      r0,[sp,#0x80]         ;831
0000b8  2800              CMP      r0,#0                 ;831
0000ba  da19              BGE      |L25.240|
                  |L25.188|
0000bc  9820              LDR      r0,[sp,#0x80]         ;832
0000be  2800              CMP      r0,#0                 ;832
0000c0  da01              BGE      |L25.198|
0000c2  a068              ADR      r0,|L25.612|
0000c4  e000              B        |L25.200|
                  |L25.198|
0000c6  a059              ADR      r0,|L25.556|
                  |L25.200|
0000c8  4603              MOV      r3,r0                 ;834
0000ca  980a              LDR      r0,[sp,#0x28]         ;834
0000cc  b908              CBNZ     r0,|L25.210|
0000ce  a068              ADR      r0,|L25.624|
0000d0  e000              B        |L25.212|
                  |L25.210|
0000d2  a056              ADR      r0,|L25.556|
                  |L25.212|
0000d4  4602              MOV      r2,r0                 ;833
0000d6  a169              ADR      r1,|L25.636|
0000d8  2000              MOVS     r0,#0                 ;833
0000da  f7fffffe          BL       wpa_printf
0000de  4630              MOV      r0,r6                 ;835
0000e0  f7fffffe          BL       os_free
0000e4  2200              MOVS     r2,#0                 ;836
0000e6  4639              MOV      r1,r7                 ;836
0000e8  4620              MOV      r0,r4                 ;836
0000ea  f7fffffe          BL       eap_sim_client_error
0000ee  e79f              B        |L25.48|
                  |L25.240|
0000f0  9820              LDR      r0,[sp,#0x80]         ;840
0000f2  2800              CMP      r0,#0                 ;840
0000f4  db04              BLT      |L25.256|
0000f6  9820              LDR      r0,[sp,#0x80]         ;840
0000f8  f8d41158          LDR      r1,[r4,#0x158]        ;840
0000fc  4288              CMP      r0,r1                 ;840
0000fe  d81f              BHI      |L25.320|
                  |L25.256|
000100  f50474a6          ADD      r4,r4,#0x14c          ;841
000104  68e3              LDR      r3,[r4,#0xc]          ;841
000106  a167              ADR      r1,|L25.676|
000108  f04f0000          MOV      r0,#0                 ;841
00010c  9a20              LDR      r2,[sp,#0x80]         ;841
00010e  f7fffffe          BL       wpa_printf
000112  9820              LDR      r0,[sp,#0x80]         ;843
000114  6120              STR      r0,[r4,#0x10]         ;843
000116  6960              LDR      r0,[r4,#0x14]         ;849
000118  f7fffffe          BL       os_free
00011c  6820              LDR      r0,[r4,#0]            ;850
00011e  6160              STR      r0,[r4,#0x14]         ;850
000120  6860              LDR      r0,[r4,#4]            ;851
000122  61a0              STR      r0,[r4,#0x18]         ;851
000124  2000              MOVS     r0,#0                 ;852
000126  6020              STR      r0,[r4,#0]            ;852
000128  6060              STR      r0,[r4,#4]            ;853
00012a  f5a474a6          SUB      r4,r4,#0x14c          ;853
00012e  4630              MOV      r0,r6                 ;854
000130  f7fffffe          BL       os_free
000134  2201              MOVS     r2,#1                 ;855
000136  4639              MOV      r1,r7                 ;855
000138  4620              MOV      r0,r4                 ;855
00013a  f7fffffe          BL       eap_sim_response_reauth
00013e  e777              B        |L25.48|
                  |L25.320|
000140  9820              LDR      r0,[sp,#0x80]         ;857
000142  f8c40158          STR      r0,[r4,#0x158]        ;857
000146  2210              MOVS     r2,#0x10              ;859
000148  f1040048          ADD      r0,r4,#0x48           ;859
00014c  990a              LDR      r1,[sp,#0x28]         ;859
00014e  f7fffffe          BL       os_memcpy
000152  2310              MOVS     r3,#0x10              ;860
000154  f1040248          ADD      r2,r4,#0x48           ;860
000158  a15d              ADR      r1,|L25.720|
00015a  2000              MOVS     r0,#0                 ;860
00015c  f7fffffe          BL       wpa_hexdump
000160  f10403cc          ADD      r3,r4,#0xcc           ;863
000164  f104028c          ADD      r2,r4,#0x8c           ;863
000168  f1040158          ADD      r1,r4,#0x58           ;863
00016c  e88d000e          STM      sp,{r1-r3}            ;863
000170  f8d43158          LDR      r3,[r4,#0x158]        ;863
000174  b298              UXTH     r0,r3                 ;863
000176  f1040348          ADD      r3,r4,#0x48           ;863
00017a  f50471a6          ADD      r1,r4,#0x14c          ;863
00017e  c906              LDM      r1,{r1,r2}            ;863
000180  f7fffffe          BL       eap_sim_derive_keys_reauth
000184  2106              MOVS     r1,#6                 ;867
000186  4620              MOV      r0,r4                 ;867
000188  f7fffffe          BL       eap_sim_clear_identities
00018c  a904              ADD      r1,sp,#0x10           ;868
00018e  4620              MOV      r0,r4                 ;868
000190  f7fffffe          BL       eap_sim_learn_ids
000194  f8d4016c          LDR      r0,[r4,#0x16c]        ;870
000198  b128              CBZ      r0,|L25.422|
00019a  f8d50080          LDR      r0,[r5,#0x80]         ;870
00019e  b110              CBZ      r0,|L25.422|
0001a0  2001              MOVS     r0,#1                 ;871
0001a2  f8c40170          STR      r0,[r4,#0x170]        ;871
                  |L25.422|
0001a6  f8940168          LDRB     r0,[r4,#0x168]        ;873
0001aa  2804              CMP      r0,#4                 ;873
0001ac  d00d              BEQ      |L25.458|
0001ae  f8940168          LDRB     r0,[r4,#0x168]        ;873
0001b2  2802              CMP      r0,#2                 ;873
0001b4  d009              BEQ      |L25.458|
0001b6  f8d40170          LDR      r0,[r4,#0x170]        ;874
0001ba  b108              CBZ      r0,|L25.448|
0001bc  2001              MOVS     r0,#1                 ;875
0001be  e000              B        |L25.450|
                  |L25.448|
0001c0  2003              MOVS     r0,#3                 ;875
                  |L25.450|
0001c2  4601              MOV      r1,r0                 ;875
0001c4  4620              MOV      r0,r4                 ;875
0001c6  f7fffffe          BL       eap_sim_state
                  |L25.458|
0001ca  2000              MOVS     r0,#0                 ;878
0001cc  f8c4013c          STR      r0,[r4,#0x13c]        ;878
0001d0  f8c40140          STR      r0,[r4,#0x140]        ;879
0001d4  f8d40158          LDR      r0,[r4,#0x158]        ;880
0001d8  f5b07f7a          CMP      r0,#0x3e8             ;880
0001dc  d908              BLS      |L25.496|
0001de  4912              LDR      r1,|L25.552|
0001e0  31d4              ADDS     r1,r1,#0xd4           ;881
0001e2  2000              MOVS     r0,#0                 ;881
0001e4  f7fffffe          BL       wpa_printf
0001e8  2106              MOVS     r1,#6                 ;883
0001ea  4620              MOV      r0,r4                 ;883
0001ec  f7fffffe          BL       eap_sim_clear_identities
                  |L25.496|
0001f0  4630              MOV      r0,r6                 ;885
0001f2  f7fffffe          BL       os_free
0001f6  2200              MOVS     r2,#0                 ;886
0001f8  4639              MOV      r1,r7                 ;886
0001fa  4620              MOV      r0,r4                 ;886
0001fc  f7fffffe          BL       eap_sim_response_reauth
000200  e716              B        |L25.48|
;;;888    
                          ENDP

000202  0000              DCW      0x0000
                  |L25.516|
000204  4541502d          DCB      "EAP-SIM: subtype Reauthentication",0
000208  53494d3a
00020c  20737562
000210  74797065
000214  20526561
000218  75746865
00021c  6e746963
000220  6174696f
000224  6e00    
000226  00                DCB      0
000227  00                DCB      0
                  |L25.552|
                          DCD      ||.constdata||+0x130
                  |L25.556|
00022c  00                DCB      0
00022d  00                DCB      0
00022e  00                DCB      0
00022f  00                DCB      0
                  |L25.560|
000230  4541502d          DCB      "EAP-SIM: Reauthentication did not have valid AT_MAC",0
000234  53494d3a
000238  20526561
00023c  75746865
000240  6e746963
000244  6174696f
000248  6e206469
00024c  64206e6f
000250  74206861
000254  76652076
000258  616c6964
00025c  2041545f
000260  4d414300
                  |L25.612|
000264  2041545f          DCB      " AT_COUNTER",0
000268  434f554e
00026c  54455200
                  |L25.624|
000270  2041545f          DCB      " AT_NONCE_S",0
000274  4e4f4e43
000278  455f5300
                  |L25.636|
00027c  4541502d          DCB      "EAP-SIM: (encr) No%s%s in reauth packet",0
000280  53494d3a
000284  2028656e
000288  63722920
00028c  4e6f2573
000290  25732069
000294  6e207265
000298  61757468
00029c  20706163
0002a0  6b657400
                  |L25.676|
0002a4  4541502d          DCB      "EAP-SIM: (encr) Invalid counter (%d <= %d)",0
0002a8  53494d3a
0002ac  2028656e
0002b0  63722920
0002b4  496e7661
0002b8  6c696420
0002bc  636f756e
0002c0  74657220
0002c4  28256420
0002c8  3c3d2025
0002cc  642900  
0002cf  00                DCB      0
                  |L25.720|
0002d0  4541502d          DCB      "EAP-SIM: (encr) AT_NONCE_S",0
0002d4  53494d3a
0002d8  2028656e
0002dc  63722920
0002e0  41545f4e
0002e4  4f4e4345
0002e8  5f5300  
0002eb  00                DCB      0

                          AREA ||i.eap_sim_process_start||, CODE, READONLY, ALIGN=2

                  eap_sim_process_start PROC
;;;496    
;;;497    static struct wpabuf * eap_sim_process_start(struct eap_sm *sm,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;498    					     struct eap_sim_data *data, u8 id,
;;;499    					     struct eap_sim_attrs *attr)
;;;500    {
000004  460c              MOV      r4,r1
000006  4692              MOV      r10,r2
000008  461d              MOV      r5,r3
;;;501    	int selected_version = -1, id_error;
00000a  f04f38ff          MOV      r8,#0xffffffff
;;;502    	size_t i;
;;;503    	u8 *pos;
;;;504    
;;;505    	wpa_printf(MSG_DEBUG, "EAP-SIM: subtype Start");
00000e  a14b              ADR      r1,|L26.316|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       wpa_printf
;;;506    	if (attr->version_list == NULL) {
000016  6968              LDR      r0,[r5,#0x14]
000018  b958              CBNZ     r0,|L26.50|
;;;507    		wpa_printf(MSG_INFO, "EAP-SIM: No AT_VERSION_LIST in "
00001a  a14e              ADR      r1,|L26.340|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       wpa_printf
;;;508    			   "SIM/Start");
;;;509    		return eap_sim_client_error(data, id,
000022  2201              MOVS     r2,#1
000024  4651              MOV      r1,r10
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       eap_sim_client_error
                  |L26.44|
;;;510    					    EAP_SIM_UNSUPPORTED_VERSION);
;;;511    	}
;;;512    
;;;513    	os_free(data->ver_list);
;;;514    	data->ver_list = os_malloc(attr->version_list_len);
;;;515    	if (data->ver_list == NULL) {
;;;516    		wpa_printf(MSG_DEBUG, "EAP-SIM: Failed to allocate "
;;;517    			   "memory for version list");
;;;518    		return eap_sim_client_error(data, id,
;;;519    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;520    	}
;;;521    	os_memcpy(data->ver_list, attr->version_list, attr->version_list_len);
;;;522    	data->ver_list_len = attr->version_list_len;
;;;523    	pos = data->ver_list;
;;;524    	for (i = 0; i < data->ver_list_len / 2; i++) {
;;;525    		int ver = pos[0] * 256 + pos[1];
;;;526    		pos += 2;
;;;527    		if (eap_sim_supported_ver(ver)) {
;;;528    			selected_version = ver;
;;;529    			break;
;;;530    		}
;;;531    	}
;;;532    	if (selected_version < 0) {
;;;533    		wpa_printf(MSG_INFO, "EAP-SIM: Could not find a supported "
;;;534    			   "version");
;;;535    		return eap_sim_client_error(data, id,
;;;536    					    EAP_SIM_UNSUPPORTED_VERSION);
;;;537    	}
;;;538    	wpa_printf(MSG_DEBUG, "EAP-SIM: Selected Version %d",
;;;539    		   selected_version);
;;;540    	data->selected_version = selected_version;
;;;541    
;;;542    	id_error = 0;
;;;543    	switch (attr->id_req) {
;;;544    	case NO_ID_REQ:
;;;545    		break;
;;;546    	case ANY_ID:
;;;547    		if (data->num_id_req > 0)
;;;548    			id_error++;
;;;549    		data->num_id_req++;
;;;550    		break;
;;;551    	case FULLAUTH_ID:
;;;552    		if (data->num_id_req > 1)
;;;553    			id_error++;
;;;554    		data->num_id_req++;
;;;555    		break;
;;;556    	case PERMANENT_ID:
;;;557    		if (data->num_id_req > 2)
;;;558    			id_error++;
;;;559    		data->num_id_req++;
;;;560    		break;
;;;561    	}
;;;562    	if (id_error) {
;;;563    		wpa_printf(MSG_INFO, "EAP-SIM: Too many ID requests "
;;;564    			   "used within one authentication");
;;;565    		return eap_sim_client_error(data, id,
;;;566    					    EAP_SIM_UNABLE_TO_PROCESS_PACKET);
;;;567    	}
;;;568    
;;;569    	return eap_sim_response_start(sm, data, id, attr->id_req);
;;;570    }
00002c  b004              ADD      sp,sp,#0x10
00002e  e8bd9ff0          POP      {r4-r12,pc}
                  |L26.50|
000032  6820              LDR      r0,[r4,#0]            ;513
000034  f7fffffe          BL       os_free
000038  6c68              LDR      r0,[r5,#0x44]         ;514
00003a  f7fffffe          BL       os_malloc
00003e  6020              STR      r0,[r4,#0]            ;514
000040  6820              LDR      r0,[r4,#0]            ;515
000042  b948              CBNZ     r0,|L26.88|
000044  a14e              ADR      r1,|L26.384|
000046  2000              MOVS     r0,#0                 ;516
000048  f7fffffe          BL       wpa_printf
00004c  2200              MOVS     r2,#0                 ;518
00004e  4651              MOV      r1,r10                ;518
000050  4620              MOV      r0,r4                 ;518
000052  f7fffffe          BL       eap_sim_client_error
000056  e7e9              B        |L26.44|
                  |L26.88|
000058  6c6a              LDR      r2,[r5,#0x44]         ;521
00005a  6969              LDR      r1,[r5,#0x14]         ;521
00005c  6820              LDR      r0,[r4,#0]            ;521
00005e  f7fffffe          BL       os_memcpy
000062  6c68              LDR      r0,[r5,#0x44]         ;522
000064  6060              STR      r0,[r4,#4]            ;522
000066  6827              LDR      r7,[r4,#0]            ;523
000068  f04f0900          MOV      r9,#0                 ;524
00006c  e00c              B        |L26.136|
                  |L26.110|
00006e  7879              LDRB     r1,[r7,#1]            ;525
000070  7838              LDRB     r0,[r7,#0]            ;525
000072  eb012b00          ADD      r11,r1,r0,LSL #8      ;525
000076  1cbf              ADDS     r7,r7,#2              ;526
000078  4658              MOV      r0,r11                ;527
00007a  f7fffffe          BL       eap_sim_supported_ver
00007e  b108              CBZ      r0,|L26.132|
000080  46d8              MOV      r8,r11                ;528
000082  e005              B        |L26.144|
                  |L26.132|
000084  f1090901          ADD      r9,r9,#1              ;524
                  |L26.136|
000088  6860              LDR      r0,[r4,#4]            ;524
00008a  ebb90f50          CMP      r9,r0,LSR #1          ;524
00008e  d3ee              BCC      |L26.110|
                  |L26.144|
000090  bf00              NOP                            ;529
000092  f1b80f00          CMP      r8,#0                 ;532
000096  da09              BGE      |L26.172|
000098  a146              ADR      r1,|L26.436|
00009a  2000              MOVS     r0,#0                 ;533
00009c  f7fffffe          BL       wpa_printf
0000a0  2201              MOVS     r2,#1                 ;535
0000a2  4651              MOV      r1,r10                ;535
0000a4  4620              MOV      r0,r4                 ;535
0000a6  f7fffffe          BL       eap_sim_client_error
0000aa  e7bf              B        |L26.44|
                  |L26.172|
0000ac  4642              MOV      r2,r8                 ;538
0000ae  a14c              ADR      r1,|L26.480|
0000b0  2000              MOVS     r0,#0                 ;538
0000b2  f7fffffe          BL       wpa_printf
0000b6  f8c48008          STR      r8,[r4,#8]            ;540
0000ba  2600              MOVS     r6,#0                 ;542
0000bc  f8950068          LDRB     r0,[r5,#0x68]         ;543
0000c0  b130              CBZ      r0,|L26.208|
0000c2  2801              CMP      r0,#1                 ;543
0000c4  d005              BEQ      |L26.210|
0000c6  2802              CMP      r0,#2                 ;543
0000c8  d00e              BEQ      |L26.232|
0000ca  2803              CMP      r0,#3                 ;543
0000cc  d122              BNE      |L26.276|
0000ce  e016              B        |L26.254|
                  |L26.208|
0000d0  e020              B        |L26.276|
                  |L26.210|
0000d2  f8d4013c          LDR      r0,[r4,#0x13c]        ;547
0000d6  2800              CMP      r0,#0                 ;547
0000d8  dd00              BLE      |L26.220|
0000da  1c76              ADDS     r6,r6,#1              ;548
                  |L26.220|
0000dc  f8d4013c          LDR      r0,[r4,#0x13c]        ;549
0000e0  1c40              ADDS     r0,r0,#1              ;549
0000e2  f8c4013c          STR      r0,[r4,#0x13c]        ;549
0000e6  e015              B        |L26.276|
                  |L26.232|
0000e8  f8d4013c          LDR      r0,[r4,#0x13c]        ;552
0000ec  2801              CMP      r0,#1                 ;552
0000ee  dd00              BLE      |L26.242|
0000f0  1c76              ADDS     r6,r6,#1              ;553
                  |L26.242|
0000f2  f8d4013c          LDR      r0,[r4,#0x13c]        ;554
0000f6  1c40              ADDS     r0,r0,#1              ;554
0000f8  f8c4013c          STR      r0,[r4,#0x13c]        ;554
0000fc  e00a              B        |L26.276|
                  |L26.254|
0000fe  f8d4013c          LDR      r0,[r4,#0x13c]        ;557
000102  2802              CMP      r0,#2                 ;557
000104  dd00              BLE      |L26.264|
000106  1c76              ADDS     r6,r6,#1              ;558
                  |L26.264|
000108  f8d4013c          LDR      r0,[r4,#0x13c]        ;559
00010c  1c40              ADDS     r0,r0,#1              ;559
00010e  f8c4013c          STR      r0,[r4,#0x13c]        ;559
000112  bf00              NOP                            ;560
                  |L26.276|
000114  bf00              NOP                            ;545
000116  b14e              CBZ      r6,|L26.300|
000118  a139              ADR      r1,|L26.512|
00011a  2000              MOVS     r0,#0                 ;563
00011c  f7fffffe          BL       wpa_printf
000120  2200              MOVS     r2,#0                 ;565
000122  4651              MOV      r1,r10                ;565
000124  4620              MOV      r0,r4                 ;565
000126  f7fffffe          BL       eap_sim_client_error
00012a  e77f              B        |L26.44|
                  |L26.300|
00012c  f8953068          LDRB     r3,[r5,#0x68]         ;569
000130  4652              MOV      r2,r10                ;569
000132  4621              MOV      r1,r4                 ;569
000134  9800              LDR      r0,[sp,#0]            ;569
000136  f7fffffe          BL       eap_sim_response_start
00013a  e777              B        |L26.44|
;;;571    
                          ENDP

                  |L26.316|
00013c  4541502d          DCB      "EAP-SIM: subtype Start",0
000140  53494d3a
000144  20737562
000148  74797065
00014c  20537461
000150  727400  
000153  00                DCB      0
                  |L26.340|
000154  4541502d          DCB      "EAP-SIM: No AT_VERSION_LIST in SIM/Start",0
000158  53494d3a
00015c  204e6f20
000160  41545f56
000164  45525349
000168  4f4e5f4c
00016c  49535420
000170  696e2053
000174  494d2f53
000178  74617274
00017c  00      
00017d  00                DCB      0
00017e  00                DCB      0
00017f  00                DCB      0
                  |L26.384|
000180  4541502d          DCB      "EAP-SIM: Failed to allocate memory for version list",0
000184  53494d3a
000188  20466169
00018c  6c656420
000190  746f2061
000194  6c6c6f63
000198  61746520
00019c  6d656d6f
0001a0  72792066
0001a4  6f722076
0001a8  65727369
0001ac  6f6e206c
0001b0  69737400
                  |L26.436|
0001b4  4541502d          DCB      "EAP-SIM: Could not find a supported version",0
0001b8  53494d3a
0001bc  20436f75
0001c0  6c64206e
0001c4  6f742066
0001c8  696e6420
0001cc  61207375
0001d0  70706f72
0001d4  74656420
0001d8  76657273
0001dc  696f6e00
                  |L26.480|
0001e0  4541502d          DCB      "EAP-SIM: Selected Version %d",0
0001e4  53494d3a
0001e8  2053656c
0001ec  65637465
0001f0  64205665
0001f4  7273696f
0001f8  6e202564
0001fc  00      
0001fd  00                DCB      0
0001fe  00                DCB      0
0001ff  00                DCB      0
                  |L26.512|
000200  4541502d          DCB      "EAP-SIM: Too many ID requests used within one authentic"
000204  53494d3a
000208  20546f6f
00020c  206d616e
000210  79204944
000214  20726571
000218  75657374
00021c  73207573
000220  65642077
000224  69746869
000228  6e206f6e
00022c  65206175
000230  7468656e
000234  746963  
000237  6174696f          DCB      "ation",0
00023b  6e00    
00023d  00                DCB      0
00023e  00                DCB      0
00023f  00                DCB      0

                          AREA ||i.eap_sim_response_challenge||, CODE, READONLY, ALIGN=2

                  eap_sim_response_challenge PROC
;;;403    
;;;404    static struct wpabuf * eap_sim_response_challenge(struct eap_sim_data *data,
000000  b5f8              PUSH     {r3-r7,lr}
;;;405    						  u8 id)
;;;406    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;407    	struct eap_sim_msg *msg;
;;;408    
;;;409    	wpa_printf(MSG_DEBUG, "Generating EAP-SIM Challenge (id=%d)", id);
000006  462a              MOV      r2,r5
000008  a115              ADR      r1,|L27.96|
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       wpa_printf
;;;410    	msg = eap_sim_msg_init(EAP_CODE_RESPONSE, id, EAP_TYPE_SIM,
000010  230b              MOVS     r3,#0xb
000012  2212              MOVS     r2,#0x12
000014  4629              MOV      r1,r5
000016  2002              MOVS     r0,#2
000018  f7fffffe          BL       eap_sim_msg_init
00001c  4606              MOV      r6,r0
;;;411    			       EAP_SIM_SUBTYPE_CHALLENGE);
;;;412    	if (data->use_result_ind) {
00001e  f8d40170          LDR      r0,[r4,#0x170]
000022  b150              CBZ      r0,|L27.58|
;;;413    		wpa_printf(MSG_DEBUG, "   AT_RESULT_IND");
000024  a118              ADR      r1,|L27.136|
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       wpa_printf
;;;414    		eap_sim_msg_add(msg, EAP_SIM_AT_RESULT_IND, 0, NULL, 0);
00002c  2300              MOVS     r3,#0
00002e  461a              MOV      r2,r3
000030  2187              MOVS     r1,#0x87
000032  4630              MOV      r0,r6
000034  9300              STR      r3,[sp,#0]
000036  f7fffffe          BL       eap_sim_msg_add
                  |L27.58|
;;;415    	}
;;;416    	wpa_printf(MSG_DEBUG, "   AT_MAC");
00003a  a118              ADR      r1,|L27.156|
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       wpa_printf
;;;417    	eap_sim_msg_add_mac(msg, EAP_SIM_AT_MAC);
000042  210b              MOVS     r1,#0xb
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       eap_sim_msg_add_mac
;;;418    	return eap_sim_msg_finish(msg, data->k_aut, (u8 *) data->sres,
00004a  6920              LDR      r0,[r4,#0x10]
00004c  0083              LSLS     r3,r0,#2
00004e  f104022c          ADD      r2,r4,#0x2c
000052  f104016c          ADD      r1,r4,#0x6c
000056  4630              MOV      r0,r6
000058  f7fffffe          BL       eap_sim_msg_finish
;;;419    				  data->num_chal * EAP_SIM_SRES_LEN);
;;;420    }
00005c  bdf8              POP      {r3-r7,pc}
;;;421    
                          ENDP

00005e  0000              DCW      0x0000
                  |L27.96|
000060  47656e65          DCB      "Generating EAP-SIM Challenge (id=%d)",0
000064  72617469
000068  6e672045
00006c  41502d53
000070  494d2043
000074  68616c6c
000078  656e6765
00007c  20286964
000080  3d256429
000084  00      
000085  00                DCB      0
000086  00                DCB      0
000087  00                DCB      0
                  |L27.136|
000088  20202041          DCB      "   AT_RESULT_IND",0
00008c  545f5245
000090  53554c54
000094  5f494e44
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L27.156|
00009c  20202041          DCB      "   AT_MAC",0
0000a0  545f4d41
0000a4  4300    
0000a6  00                DCB      0
0000a7  00                DCB      0

                          AREA ||i.eap_sim_response_notification||, CODE, READONLY, ALIGN=2

                  eap_sim_response_notification PROC
;;;463    
;;;464    static struct wpabuf * eap_sim_response_notification(struct eap_sim_data *data,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;465    						     u8 id, u16 notification)
;;;466    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;467    	struct eap_sim_msg *msg;
;;;468    	u8 *k_aut = (notification & 0x4000) == 0 ? data->k_aut : NULL;
00000a  f4174f80          TST      r7,#0x4000
00000e  d102              BNE      |L28.22|
000010  f104006c          ADD      r0,r4,#0x6c
000014  e000              B        |L28.24|
                  |L28.22|
000016  2000              MOVS     r0,#0
                  |L28.24|
000018  4605              MOV      r5,r0
;;;469    
;;;470    	wpa_printf(MSG_DEBUG, "Generating EAP-SIM Notification (id=%d)", id);
00001a  4632              MOV      r2,r6
00001c  a126              ADR      r1,|L28.184|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       wpa_printf
;;;471    	msg = eap_sim_msg_init(EAP_CODE_RESPONSE, id,
000024  230c              MOVS     r3,#0xc
000026  2212              MOVS     r2,#0x12
000028  4631              MOV      r1,r6
00002a  2002              MOVS     r0,#2
00002c  f7fffffe          BL       eap_sim_msg_init
000030  4680              MOV      r8,r0
;;;472    			       EAP_TYPE_SIM, EAP_SIM_SUBTYPE_NOTIFICATION);
;;;473    	if (k_aut && data->reauth) {
000032  b37d              CBZ      r5,|L28.148|
000034  f8d40154          LDR      r0,[r4,#0x154]
000038  b360              CBZ      r0,|L28.148|
;;;474    		wpa_printf(MSG_DEBUG, "   AT_IV");
00003a  a129              ADR      r1,|L28.224|
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       wpa_printf
;;;475    		wpa_printf(MSG_DEBUG, "   AT_ENCR_DATA");
000042  a12a              ADR      r1,|L28.236|
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       wpa_printf
;;;476    		eap_sim_msg_add_encr_start(msg, EAP_SIM_AT_IV,
00004a  2282              MOVS     r2,#0x82
00004c  2181              MOVS     r1,#0x81
00004e  4640              MOV      r0,r8
000050  f7fffffe          BL       eap_sim_msg_add_encr_start
;;;477    					   EAP_SIM_AT_ENCR_DATA);
;;;478    		wpa_printf(MSG_DEBUG, "   *AT_COUNTER %d", data->counter);
000054  a129              ADR      r1,|L28.252|
000056  2000              MOVS     r0,#0
000058  f8d42158          LDR      r2,[r4,#0x158]
00005c  f7fffffe          BL       wpa_printf
;;;479    		eap_sim_msg_add(msg, EAP_SIM_AT_COUNTER, data->counter,
000060  2300              MOVS     r3,#0
000062  9300              STR      r3,[sp,#0]
000064  f8d40158          LDR      r0,[r4,#0x158]
000068  b282              UXTH     r2,r0
00006a  2113              MOVS     r1,#0x13
00006c  4640              MOV      r0,r8
00006e  f7fffffe          BL       eap_sim_msg_add
;;;480    				NULL, 0);
;;;481    		if (eap_sim_msg_add_encr_end(msg, data->k_encr,
000072  2206              MOVS     r2,#6
000074  f104017c          ADD      r1,r4,#0x7c
000078  4640              MOV      r0,r8
00007a  f7fffffe          BL       eap_sim_msg_add_encr_end
00007e  b148              CBZ      r0,|L28.148|
;;;482    					     EAP_SIM_AT_PADDING)) {
;;;483    			wpa_printf(MSG_WARNING, "EAP-SIM: Failed to encrypt "
000080  a123              ADR      r1,|L28.272|
000082  2000              MOVS     r0,#0
000084  f7fffffe          BL       wpa_printf
;;;484    				   "AT_ENCR_DATA");
;;;485    			eap_sim_msg_free(msg);
000088  4640              MOV      r0,r8
00008a  f7fffffe          BL       eap_sim_msg_free
;;;486    			return NULL;
00008e  2000              MOVS     r0,#0
                  |L28.144|
;;;487    		}
;;;488    	}
;;;489    	if (k_aut) {
;;;490    		wpa_printf(MSG_DEBUG, "   AT_MAC");
;;;491    		eap_sim_msg_add_mac(msg, EAP_SIM_AT_MAC);
;;;492    	}
;;;493    	return eap_sim_msg_finish(msg, k_aut, (u8 *) "", 0);
;;;494    }
000090  e8bd83f8          POP      {r3-r9,pc}
                  |L28.148|
000094  e7ff              B        |L28.150|
                  |L28.150|
000096  b13d              CBZ      r5,|L28.168|
000098  a127              ADR      r1,|L28.312|
00009a  2000              MOVS     r0,#0                 ;490
00009c  f7fffffe          BL       wpa_printf
0000a0  210b              MOVS     r1,#0xb               ;491
0000a2  4640              MOV      r0,r8                 ;491
0000a4  f7fffffe          BL       eap_sim_msg_add_mac
                  |L28.168|
0000a8  2300              MOVS     r3,#0                 ;493
0000aa  a20f              ADR      r2,|L28.232|
0000ac  4629              MOV      r1,r5                 ;493
0000ae  4640              MOV      r0,r8                 ;493
0000b0  f7fffffe          BL       eap_sim_msg_finish
0000b4  e7ec              B        |L28.144|
;;;495    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L28.184|
0000b8  47656e65          DCB      "Generating EAP-SIM Notification (id=%d)",0
0000bc  72617469
0000c0  6e672045
0000c4  41502d53
0000c8  494d204e
0000cc  6f746966
0000d0  69636174
0000d4  696f6e20
0000d8  2869643d
0000dc  25642900
                  |L28.224|
0000e0  20202041          DCB      "   AT_IV"
0000e4  545f4956
                  |L28.232|
0000e8  00                DCB      0
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L28.236|
0000ec  20202041          DCB      "   AT_ENCR_DATA",0
0000f0  545f454e
0000f4  43525f44
0000f8  41544100
                  |L28.252|
0000fc  2020202a          DCB      "   *AT_COUNTER %d",0
000100  41545f43
000104  4f554e54
000108  45522025
00010c  6400    
00010e  00                DCB      0
00010f  00                DCB      0
                  |L28.272|
000110  4541502d          DCB      "EAP-SIM: Failed to encrypt AT_ENCR_DATA",0
000114  53494d3a
000118  20466169
00011c  6c656420
000120  746f2065
000124  6e637279
000128  70742041
00012c  545f454e
000130  43525f44
000134  41544100
                  |L28.312|
000138  20202041          DCB      "   AT_MAC",0
00013c  545f4d41
000140  4300    
000142  00                DCB      0
000143  00                DCB      0

                          AREA ||i.eap_sim_response_reauth||, CODE, READONLY, ALIGN=2

                  eap_sim_response_reauth PROC
;;;422    
;;;423    static struct wpabuf * eap_sim_response_reauth(struct eap_sim_data *data,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;424    					       u8 id, int counter_too_small)
;;;425    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;426    	struct eap_sim_msg *msg;
;;;427    	unsigned int counter;
;;;428    
;;;429    	wpa_printf(MSG_DEBUG, "Generating EAP-SIM Reauthentication (id=%d)",
00000a  4632              MOV      r2,r6
00000c  a132              ADR      r1,|L29.216|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;430    		   id);
;;;431    	msg = eap_sim_msg_init(EAP_CODE_RESPONSE, id, EAP_TYPE_SIM,
000014  230d              MOVS     r3,#0xd
000016  2212              MOVS     r2,#0x12
000018  4631              MOV      r1,r6
00001a  2002              MOVS     r0,#2
00001c  f7fffffe          BL       eap_sim_msg_init
000020  4680              MOV      r8,r0
;;;432    			       EAP_SIM_SUBTYPE_REAUTHENTICATION);
;;;433    	wpa_printf(MSG_DEBUG, "   AT_IV");
000022  a138              ADR      r1,|L29.260|
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       wpa_printf
;;;434    	wpa_printf(MSG_DEBUG, "   AT_ENCR_DATA");
00002a  a139              ADR      r1,|L29.272|
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       wpa_printf
;;;435    	eap_sim_msg_add_encr_start(msg, EAP_SIM_AT_IV, EAP_SIM_AT_ENCR_DATA);
000032  2282              MOVS     r2,#0x82
000034  2181              MOVS     r1,#0x81
000036  4640              MOV      r0,r8
000038  f7fffffe          BL       eap_sim_msg_add_encr_start
;;;436    
;;;437    	if (counter_too_small) {
00003c  b16f              CBZ      r7,|L29.90|
;;;438    		wpa_printf(MSG_DEBUG, "   *AT_COUNTER_TOO_SMALL");
00003e  a138              ADR      r1,|L29.288|
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       wpa_printf
;;;439    		eap_sim_msg_add(msg, EAP_SIM_AT_COUNTER_TOO_SMALL, 0, NULL, 0);
000046  2300              MOVS     r3,#0
000048  461a              MOV      r2,r3
00004a  2114              MOVS     r1,#0x14
00004c  4640              MOV      r0,r8
00004e  9300              STR      r3,[sp,#0]
000050  f7fffffe          BL       eap_sim_msg_add
;;;440    		counter = data->counter_too_small;
000054  f8d4515c          LDR      r5,[r4,#0x15c]
000058  e001              B        |L29.94|
                  |L29.90|
;;;441    	} else
;;;442    		counter = data->counter;
00005a  f8d45158          LDR      r5,[r4,#0x158]
                  |L29.94|
;;;443    
;;;444    	wpa_printf(MSG_DEBUG, "   *AT_COUNTER %d", counter);
00005e  462a              MOV      r2,r5
000060  a136              ADR      r1,|L29.316|
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       wpa_printf
;;;445    	eap_sim_msg_add(msg, EAP_SIM_AT_COUNTER, counter, NULL, 0);
000068  2300              MOVS     r3,#0
00006a  b2aa              UXTH     r2,r5
00006c  2113              MOVS     r1,#0x13
00006e  4640              MOV      r0,r8
000070  9300              STR      r3,[sp,#0]
000072  f7fffffe          BL       eap_sim_msg_add
;;;446    
;;;447    	if (eap_sim_msg_add_encr_end(msg, data->k_encr, EAP_SIM_AT_PADDING)) {
000076  2206              MOVS     r2,#6
000078  f104017c          ADD      r1,r4,#0x7c
00007c  4640              MOV      r0,r8
00007e  f7fffffe          BL       eap_sim_msg_add_encr_end
000082  b148              CBZ      r0,|L29.152|
;;;448    		wpa_printf(MSG_WARNING, "EAP-SIM: Failed to encrypt "
000084  a132              ADR      r1,|L29.336|
000086  2000              MOVS     r0,#0
000088  f7fffffe          BL       wpa_printf
;;;449    			   "AT_ENCR_DATA");
;;;450    		eap_sim_msg_free(msg);
00008c  4640              MOV      r0,r8
00008e  f7fffffe          BL       eap_sim_msg_free
;;;451    		return NULL;
000092  2000              MOVS     r0,#0
                  |L29.148|
;;;452    	}
;;;453    	if (data->use_result_ind) {
;;;454    		wpa_printf(MSG_DEBUG, "   AT_RESULT_IND");
;;;455    		eap_sim_msg_add(msg, EAP_SIM_AT_RESULT_IND, 0, NULL, 0);
;;;456    	}
;;;457    	wpa_printf(MSG_DEBUG, "   AT_MAC");
;;;458    	eap_sim_msg_add_mac(msg, EAP_SIM_AT_MAC);
;;;459    	return eap_sim_msg_finish(msg, data->k_aut, data->nonce_s,
;;;460    				  EAP_SIM_NONCE_S_LEN);
;;;461    }
000094  e8bd83f8          POP      {r3-r9,pc}
                  |L29.152|
000098  f8d40170          LDR      r0,[r4,#0x170]        ;453
00009c  b150              CBZ      r0,|L29.180|
00009e  a136              ADR      r1,|L29.376|
0000a0  2000              MOVS     r0,#0                 ;454
0000a2  f7fffffe          BL       wpa_printf
0000a6  2300              MOVS     r3,#0                 ;455
0000a8  461a              MOV      r2,r3                 ;455
0000aa  2187              MOVS     r1,#0x87              ;455
0000ac  4640              MOV      r0,r8                 ;455
0000ae  9300              STR      r3,[sp,#0]            ;455
0000b0  f7fffffe          BL       eap_sim_msg_add
                  |L29.180|
0000b4  a135              ADR      r1,|L29.396|
0000b6  2000              MOVS     r0,#0                 ;457
0000b8  f7fffffe          BL       wpa_printf
0000bc  210b              MOVS     r1,#0xb               ;458
0000be  4640              MOV      r0,r8                 ;458
0000c0  f7fffffe          BL       eap_sim_msg_add_mac
0000c4  2310              MOVS     r3,#0x10              ;459
0000c6  f1040248          ADD      r2,r4,#0x48           ;459
0000ca  f104016c          ADD      r1,r4,#0x6c           ;459
0000ce  4640              MOV      r0,r8                 ;459
0000d0  f7fffffe          BL       eap_sim_msg_finish
0000d4  e7de              B        |L29.148|
;;;462    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L29.216|
0000d8  47656e65          DCB      "Generating EAP-SIM Reauthentication (id=%d)",0
0000dc  72617469
0000e0  6e672045
0000e4  41502d53
0000e8  494d2052
0000ec  65617574
0000f0  68656e74
0000f4  69636174
0000f8  696f6e20
0000fc  2869643d
000100  25642900
                  |L29.260|
000104  20202041          DCB      "   AT_IV",0
000108  545f4956
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
                  |L29.272|
000110  20202041          DCB      "   AT_ENCR_DATA",0
000114  545f454e
000118  43525f44
00011c  41544100
                  |L29.288|
000120  2020202a          DCB      "   *AT_COUNTER_TOO_SMALL",0
000124  41545f43
000128  4f554e54
00012c  45525f54
000130  4f4f5f53
000134  4d414c4c
000138  00      
000139  00                DCB      0
00013a  00                DCB      0
00013b  00                DCB      0
                  |L29.316|
00013c  2020202a          DCB      "   *AT_COUNTER %d",0
000140  41545f43
000144  4f554e54
000148  45522025
00014c  6400    
00014e  00                DCB      0
00014f  00                DCB      0
                  |L29.336|
000150  4541502d          DCB      "EAP-SIM: Failed to encrypt AT_ENCR_DATA",0
000154  53494d3a
000158  20466169
00015c  6c656420
000160  746f2065
000164  6e637279
000168  70742041
00016c  545f454e
000170  43525f44
000174  41544100
                  |L29.376|
000178  20202041          DCB      "   AT_RESULT_IND",0
00017c  545f5245
000180  53554c54
000184  5f494e44
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
                  |L29.396|
00018c  20202041          DCB      "   AT_MAC",0
000190  545f4d41
000194  4300    
000196  00                DCB      0
000197  00                DCB      0

                          AREA ||i.eap_sim_response_start||, CODE, READONLY, ALIGN=2

                  eap_sim_response_start PROC
;;;350    
;;;351    static struct wpabuf * eap_sim_response_start(struct eap_sm *sm,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;352    					      struct eap_sim_data *data, u8 id,
;;;353    					      enum eap_sim_id_req id_req)
;;;354    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;355    	const u8 *identity = NULL;
00000c  2600              MOVS     r6,#0
;;;356    	size_t identity_len = 0;
00000e  2000              MOVS     r0,#0
000010  9001              STR      r0,[sp,#4]
;;;357    	struct eap_sim_msg *msg;
;;;358    
;;;359    	data->reauth = 0;
000012  f8c40154          STR      r0,[r4,#0x154]
;;;360    	if (id_req == ANY_ID && data->reauth_id) {
000016  2d01              CMP      r5,#1
000018  d10b              BNE      |L30.50|
00001a  f8d4014c          LDR      r0,[r4,#0x14c]
00001e  b140              CBZ      r0,|L30.50|
;;;361    		identity = data->reauth_id;
000020  f8d4614c          LDR      r6,[r4,#0x14c]
;;;362    		identity_len = data->reauth_id_len;
000024  f8d40150          LDR      r0,[r4,#0x150]
000028  9001              STR      r0,[sp,#4]
;;;363    		data->reauth = 1;
00002a  2001              MOVS     r0,#1
00002c  f8c40154          STR      r0,[r4,#0x154]
000030  e01b              B        |L30.106|
                  |L30.50|
;;;364    	} else if ((id_req == ANY_ID || id_req == FULLAUTH_ID) &&
000032  2d01              CMP      r5,#1
000034  d001              BEQ      |L30.58|
000036  2d02              CMP      r5,#2
000038  d10c              BNE      |L30.84|
                  |L30.58|
;;;365    		   data->pseudonym) {
00003a  f8d40144          LDR      r0,[r4,#0x144]
00003e  b148              CBZ      r0,|L30.84|
;;;366    		identity = data->pseudonym;
000040  f8d46144          LDR      r6,[r4,#0x144]
;;;367    		identity_len = data->pseudonym_len;
000044  f8d40148          LDR      r0,[r4,#0x148]
000048  9001              STR      r0,[sp,#4]
;;;368    		eap_sim_clear_identities(data, CLEAR_REAUTH_ID);
00004a  2102              MOVS     r1,#2
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       eap_sim_clear_identities
000052  e00a              B        |L30.106|
                  |L30.84|
;;;369    	} else if (id_req != NO_ID_REQ) {
000054  b14d              CBZ      r5,|L30.106|
;;;370    		identity = eap_get_config_identity(sm, &identity_len);
000056  a901              ADD      r1,sp,#4
000058  4640              MOV      r0,r8
00005a  f7fffffe          BL       eap_get_config_identity
00005e  4606              MOV      r6,r0
;;;371    		if (identity) {
000060  b11e              CBZ      r6,|L30.106|
;;;372    			eap_sim_clear_identities(data, CLEAR_PSEUDONYM |
000062  2103              MOVS     r1,#3
000064  4620              MOV      r0,r4
000066  f7fffffe          BL       eap_sim_clear_identities
                  |L30.106|
;;;373    						 CLEAR_REAUTH_ID);
;;;374    		}
;;;375    	}
;;;376    	if (id_req != NO_ID_REQ)
00006a  b11d              CBZ      r5,|L30.116|
;;;377    		eap_sim_clear_identities(data, CLEAR_EAP_ID);
00006c  2104              MOVS     r1,#4
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       eap_sim_clear_identities
                  |L30.116|
;;;378    
;;;379    	wpa_printf(MSG_DEBUG, "Generating EAP-SIM Start (id=%d)", id);
000074  463a              MOV      r2,r7
000076  a121              ADR      r1,|L30.252|
000078  2000              MOVS     r0,#0
00007a  f7fffffe          BL       wpa_printf
;;;380    	msg = eap_sim_msg_init(EAP_CODE_RESPONSE, id,
00007e  230a              MOVS     r3,#0xa
000080  2212              MOVS     r2,#0x12
000082  4639              MOV      r1,r7
000084  2002              MOVS     r0,#2
000086  f7fffffe          BL       eap_sim_msg_init
00008a  4681              MOV      r9,r0
;;;381    			       EAP_TYPE_SIM, EAP_SIM_SUBTYPE_START);
;;;382    	if (!data->reauth) {
00008c  f8d40154          LDR      r0,[r4,#0x154]
000090  b9e0              CBNZ     r0,|L30.204|
;;;383    		wpa_hexdump(MSG_DEBUG, "   AT_NONCE_MT",
000092  2310              MOVS     r3,#0x10
000094  f1040238          ADD      r2,r4,#0x38
000098  a121              ADR      r1,|L30.288|
00009a  2000              MOVS     r0,#0
00009c  f7fffffe          BL       wpa_hexdump
;;;384    			    data->nonce_mt, EAP_SIM_NONCE_MT_LEN);
;;;385    		eap_sim_msg_add(msg, EAP_SIM_AT_NONCE_MT, 0,
0000a0  2310              MOVS     r3,#0x10
0000a2  9300              STR      r3,[sp,#0]
0000a4  f1040338          ADD      r3,r4,#0x38
0000a8  2200              MOVS     r2,#0
0000aa  2107              MOVS     r1,#7
0000ac  4648              MOV      r0,r9
0000ae  f7fffffe          BL       eap_sim_msg_add
;;;386    				data->nonce_mt, EAP_SIM_NONCE_MT_LEN);
;;;387    		wpa_printf(MSG_DEBUG, "   AT_SELECTED_VERSION %d",
0000b2  a11f              ADR      r1,|L30.304|
0000b4  2000              MOVS     r0,#0
0000b6  68a2              LDR      r2,[r4,#8]
0000b8  f7fffffe          BL       wpa_printf
;;;388    			   data->selected_version);
;;;389    		eap_sim_msg_add(msg, EAP_SIM_AT_SELECTED_VERSION,
0000bc  2300              MOVS     r3,#0
0000be  9300              STR      r3,[sp,#0]
0000c0  68a0              LDR      r0,[r4,#8]
0000c2  b282              UXTH     r2,r0
0000c4  2110              MOVS     r1,#0x10
0000c6  4648              MOV      r0,r9
0000c8  f7fffffe          BL       eap_sim_msg_add
                  |L30.204|
;;;390    				data->selected_version, NULL, 0);
;;;391    	}
;;;392    
;;;393    	if (identity) {
0000cc  b176              CBZ      r6,|L30.236|
;;;394    		wpa_hexdump_ascii(MSG_DEBUG, "   AT_IDENTITY",
0000ce  4632              MOV      r2,r6
0000d0  a11e              ADR      r1,|L30.332|
0000d2  2000              MOVS     r0,#0
0000d4  9b01              LDR      r3,[sp,#4]
0000d6  f7fffffe          BL       wpa_hexdump_ascii
;;;395    				  identity, identity_len);
;;;396    		eap_sim_msg_add(msg, EAP_SIM_AT_IDENTITY, identity_len,
0000da  9b01              LDR      r3,[sp,#4]
0000dc  9300              STR      r3,[sp,#0]
0000de  4633              MOV      r3,r6
0000e0  9801              LDR      r0,[sp,#4]
0000e2  b282              UXTH     r2,r0
0000e4  210e              MOVS     r1,#0xe
0000e6  4648              MOV      r0,r9
0000e8  f7fffffe          BL       eap_sim_msg_add
                  |L30.236|
;;;397    				identity, identity_len);
;;;398    	}
;;;399    
;;;400    	return eap_sim_msg_finish(msg, NULL, NULL, 0);
0000ec  2300              MOVS     r3,#0
0000ee  461a              MOV      r2,r3
0000f0  4619              MOV      r1,r3
0000f2  4648              MOV      r0,r9
0000f4  f7fffffe          BL       eap_sim_msg_finish
;;;401    }
0000f8  e8bd87fc          POP      {r2-r10,pc}
;;;402    
                          ENDP

                  |L30.252|
0000fc  47656e65          DCB      "Generating EAP-SIM Start (id=%d)",0
000100  72617469
000104  6e672045
000108  41502d53
00010c  494d2053
000110  74617274
000114  20286964
000118  3d256429
00011c  00      
00011d  00                DCB      0
00011e  00                DCB      0
00011f  00                DCB      0
                  |L30.288|
000120  20202041          DCB      "   AT_NONCE_MT",0
000124  545f4e4f
000128  4e43455f
00012c  4d5400  
00012f  00                DCB      0
                  |L30.304|
000130  20202041          DCB      "   AT_SELECTED_VERSION %d",0
000134  545f5345
000138  4c454354
00013c  45445f56
000140  45525349
000144  4f4e2025
000148  6400    
00014a  00                DCB      0
00014b  00                DCB      0
                  |L30.332|
00014c  20202041          DCB      "   AT_IDENTITY",0
000150  545f4944
000154  454e5449
000158  545900  
00015b  00                DCB      0

                          AREA ||i.eap_sim_state||, CODE, READONLY, ALIGN=2

                  eap_sim_state PROC
;;;81     
;;;82     static void eap_sim_state(struct eap_sim_data *data, int state)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;83     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;84     	wpa_printf(MSG_DEBUG, "EAP-SIM: %s -> %s",
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       eap_sim_state_txt
00000e  4606              MOV      r6,r0
000010  f8940168          LDRB     r0,[r4,#0x168]
000014  f7fffffe          BL       eap_sim_state_txt
000018  4607              MOV      r7,r0
00001a  4633              MOV      r3,r6
00001c  4602              MOV      r2,r0
00001e  a104              ADR      r1,|L31.48|
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       wpa_printf
;;;85     		   eap_sim_state_txt(data->state),
;;;86     		   eap_sim_state_txt(state));
;;;87     	data->state = state;
000026  f8845168          STRB     r5,[r4,#0x168]
;;;88     }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;89     
                          ENDP

00002e  0000              DCW      0x0000
                  |L31.48|
000030  4541502d          DCB      "EAP-SIM: %s -> %s",0
000034  53494d3a
000038  20257320
00003c  2d3e2025
000040  7300    
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.eap_sim_state_txt||, CODE, READONLY, ALIGN=2

                  eap_sim_state_txt PROC
;;;61     #ifndef CONFIG_NO_STDOUT_DEBUG
;;;62     static const char * eap_sim_state_txt(int state)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	switch (state) {
000002  2905              CMP      r1,#5
000004  d20e              BCS      |L32.36|
000006  e8dff001          TBB      [pc,r1]
00000a  0305              DCB      0x03,0x05
00000c  07090b00          DCB      0x07,0x09,0x0b,0x00
;;;65     	case CONTINUE:
;;;66     		return "CONTINUE";
000010  a005              ADR      r0,|L32.40|
                  |L32.18|
;;;67     	case RESULT_SUCCESS:
;;;68     		return "RESULT_SUCCESS";
;;;69     	case RESULT_FAILURE:
;;;70     		return "RESULT_FAILURE";
;;;71     	case SUCCESS:
;;;72     		return "SUCCESS";
;;;73     	case FAILURE:
;;;74     		return "FAILURE";
;;;75     	default:
;;;76     		return "?";
;;;77     	}
;;;78     }
000012  4770              BX       lr
000014  a007              ADR      r0,|L32.52|
000016  e7fc              B        |L32.18|
000018  a00a              ADR      r0,|L32.68|
00001a  e7fa              B        |L32.18|
00001c  a00d              ADR      r0,|L32.84|
00001e  e7f8              B        |L32.18|
000020  a00e              ADR      r0,|L32.92|
000022  e7f6              B        |L32.18|
                  |L32.36|
000024  a00f              ADR      r0,|L32.100|
000026  e7f4              B        |L32.18|
;;;79     #endif /* CONFIG_NO_STDOUT_DEBUG */
                          ENDP

                  |L32.40|
000028  434f4e54          DCB      "CONTINUE",0
00002c  494e5545
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
                  |L32.52|
000034  52455355          DCB      "RESULT_SUCCESS",0
000038  4c545f53
00003c  55434345
000040  535300  
000043  00                DCB      0
                  |L32.68|
000044  52455355          DCB      "RESULT_FAILURE",0
000048  4c545f46
00004c  41494c55
000050  524500  
000053  00                DCB      0
                  |L32.84|
000054  53554343          DCB      "SUCCESS",0
000058  45535300
                  |L32.92|
00005c  4641494c          DCB      "FAILURE",0
000060  55524500
                  |L32.100|
000064  3f00              DCB      "?",0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.eap_sim_supported_ver||, CODE, READONLY, ALIGN=1

                  eap_sim_supported_ver PROC
;;;259    
;;;260    static int eap_sim_supported_ver(int version)
000000  4601              MOV      r1,r0
;;;261    {
;;;262    	return version == EAP_SIM_VERSION;
000002  2901              CMP      r1,#1
000004  d100              BNE      |L33.8|
                  |L33.6|
;;;263    }
000006  4770              BX       lr
                  |L33.8|
000008  2000              MOVS     r0,#0                 ;262
00000a  e7fc              B        |L33.6|
;;;264    
                          ENDP


                          AREA ||i.eap_sim_verify_mac_sha256||, CODE, READONLY, ALIGN=1

                  eap_sim_verify_mac_sha256 PROC
;;;130    
;;;131    static inline int eap_sim_verify_mac_sha256(const u8 *k_aut,
000000  b530              PUSH     {r4,r5,lr}
;;;132    					    const struct wpabuf *req,
;;;133    					    const u8 *mac, const u8 *extra,
;;;134    					    size_t extra_len)
;;;135    {
000002  4605              MOV      r5,r0
000004  9c03              LDR      r4,[sp,#0xc]
;;;136    	return -1;
000006  f04f30ff          MOV      r0,#0xffffffff
;;;137    }
00000a  bd30              POP      {r4,r5,pc}
;;;138    #endif /* EAP_AKA_PRIME || EAP_SERVER_AKA_PRIME */
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L35.30|
00001a  2001              MOVS     r0,#1
                  |L35.28|
;;;495    }
00001c  4770              BX       lr
                  |L35.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L35.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L40.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L40.14|
                  |L40.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L40.12|
;;;70     }
00000c  4770              BX       lr
                  |L40.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L40.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L41.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L41.16|
                  |L41.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L41.14|
;;;76     }
00000e  4770              BX       lr
                  |L41.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L41.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L42.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L42.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L42.18|
                  |L42.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L42.16|
;;;57     }
000010  4770              BX       lr
                  |L42.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L42.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L43.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L43.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L43.20|
                  |L43.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L43.18|
;;;64     }
000012  4770              BX       lr
                  |L43.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L43.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L44.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L44.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L44.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L44.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L47.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L47.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L47.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L47.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L53.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L53.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  53494d3a          DCB      0x53,0x49,0x4d,0x3a
000008  20496e76          DCB      0x20,0x49,0x6e,0x76
00000c  616c6964          DCB      0x61,0x6c,0x69,0x64
000010  2073696d          DCB      0x20,0x73,0x69,0x6d
000014  5f6d696e          DCB      0x5f,0x6d,0x69,0x6e
000018  5f6e756d          DCB      0x5f,0x6e,0x75,0x6d
00001c  5f636861          DCB      0x5f,0x63,0x68,0x61
000020  6c20636f          DCB      0x6c,0x20,0x63,0x6f
000024  6e666967          DCB      0x6e,0x66,0x69,0x67
000028  75726174          DCB      0x75,0x72,0x61,0x74
00002c  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000030  28256c75          DCB      0x28,0x25,0x6c,0x75
000034  2c206578          DCB      0x2c,0x20,0x65,0x78
000038  70656374          DCB      0x70,0x65,0x63,0x74
00003c  65642032          DCB      0x65,0x64,0x20,0x32
000040  206f7220          DCB      0x20,0x6f,0x72,0x20
000044  33290000          DCB      0x33,0x29,0x00,0x00
000048  4541502d          DCB      0x45,0x41,0x50,0x2d
00004c  53494d3a          DCB      0x53,0x49,0x4d,0x3a
000050  204e6f74          DCB      0x20,0x4e,0x6f,0x74
000054  69666963          DCB      0x69,0x66,0x69,0x63
000058  6174696f          DCB      0x61,0x74,0x69,0x6f
00005c  6e206d65          DCB      0x6e,0x20,0x6d,0x65
000060  73736167          DCB      0x73,0x73,0x61,0x67
000064  65206166          DCB      0x65,0x20,0x61,0x66
000068  74657220          DCB      0x74,0x65,0x72,0x20
00006c  72656175          DCB      0x72,0x65,0x61,0x75
000070  74682064          DCB      0x74,0x68,0x20,0x64
000074  6964206e          DCB      0x69,0x64,0x20,0x6e
000078  6f742069          DCB      0x6f,0x74,0x20,0x69
00007c  6e636c75          DCB      0x6e,0x63,0x6c,0x75
000080  64652065          DCB      0x64,0x65,0x20,0x65
000084  6e637279          DCB      0x6e,0x63,0x72,0x79
000088  70746564          DCB      0x70,0x74,0x65,0x64
00008c  20646174          DCB      0x20,0x64,0x61,0x74
000090  61000000          DCB      0x61,0x00,0x00,0x00
000094  4541502d          DCB      0x45,0x41,0x50,0x2d
000098  53494d3a          DCB      0x53,0x49,0x4d,0x3a
00009c  20466169          DCB      0x20,0x46,0x61,0x69
0000a0  6c656420          DCB      0x6c,0x65,0x64,0x20
0000a4  746f2070          DCB      0x74,0x6f,0x20,0x70
0000a8  61727365          DCB      0x61,0x72,0x73,0x65
0000ac  20656e63          DCB      0x20,0x65,0x6e,0x63
0000b0  72797074          DCB      0x72,0x79,0x70,0x74
0000b4  65642064          DCB      0x65,0x64,0x20,0x64
0000b8  61746120          DCB      0x61,0x74,0x61,0x20
0000bc  66726f6d          DCB      0x66,0x72,0x6f,0x6d
0000c0  206e6f74          DCB      0x20,0x6e,0x6f,0x74
0000c4  69666963          DCB      0x69,0x66,0x69,0x63
0000c8  6174696f          DCB      0x61,0x74,0x69,0x6f
0000cc  6e206d65          DCB      0x6e,0x20,0x6d,0x65
0000d0  73736167          DCB      0x73,0x73,0x61,0x67
0000d4  65000000          DCB      0x65,0x00,0x00,0x00
0000d8  4541502d          DCB      0x45,0x41,0x50,0x2d
0000dc  53494d3a          DCB      0x53,0x49,0x4d,0x3a
0000e0  20436f75          DCB      0x20,0x43,0x6f,0x75
0000e4  6e746572          DCB      0x6e,0x74,0x65,0x72
0000e8  20696e20          DCB      0x20,0x69,0x6e,0x20
0000ec  6e6f7469          DCB      0x6e,0x6f,0x74,0x69
0000f0  66696361          DCB      0x66,0x69,0x63,0x61
0000f4  74696f6e          DCB      0x74,0x69,0x6f,0x6e
0000f8  206d6573          DCB      0x20,0x6d,0x65,0x73
0000fc  73616765          DCB      0x73,0x61,0x67,0x65
000100  20646f65          DCB      0x20,0x64,0x6f,0x65
000104  73206e6f          DCB      0x73,0x20,0x6e,0x6f
000108  74206d61          DCB      0x74,0x20,0x6d,0x61
00010c  74636820          DCB      0x74,0x63,0x68,0x20
000110  77697468          DCB      0x77,0x69,0x74,0x68
000114  20636f75          DCB      0x20,0x63,0x6f,0x75
000118  6e746572          DCB      0x6e,0x74,0x65,0x72
00011c  20696e20          DCB      0x20,0x69,0x6e,0x20
000120  72656175          DCB      0x72,0x65,0x61,0x75
000124  7468206d          DCB      0x74,0x68,0x20,0x6d
000128  65737361          DCB      0x65,0x73,0x73,0x61
00012c  67650000          DCB      0x67,0x65,0x00,0x00
000130  4541502d          DCB      0x45,0x41,0x50,0x2d
000134  53494d3a          DCB      0x53,0x49,0x4d,0x3a
000138  20536572          DCB      0x20,0x53,0x65,0x72
00013c  76657220          DCB      0x76,0x65,0x72,0x20
000140  69732074          DCB      0x69,0x73,0x20,0x74
000144  7279696e          DCB      0x72,0x79,0x69,0x6e
000148  67207265          DCB      0x67,0x20,0x72,0x65
00014c  61757468          DCB      0x61,0x75,0x74,0x68
000150  656e7469          DCB      0x65,0x6e,0x74,0x69
000154  63617469          DCB      0x63,0x61,0x74,0x69
000158  6f6e2c20          DCB      0x6f,0x6e,0x2c,0x20
00015c  62757420          DCB      0x62,0x75,0x74,0x20
000160  6e6f2072          DCB      0x6e,0x6f,0x20,0x72
000164  65617574          DCB      0x65,0x61,0x75,0x74
000168  685f6964          DCB      0x68,0x5f,0x69,0x64
00016c  20617661          DCB      0x20,0x61,0x76,0x61
000170  696c6162          DCB      0x69,0x6c,0x61,0x62
000174  6c650000          DCB      0x6c,0x65,0x00,0x00
000178  4541502d          DCB      0x45,0x41,0x50,0x2d
00017c  53494d3a          DCB      0x53,0x49,0x4d,0x3a
000180  20526561          DCB      0x20,0x52,0x65,0x61
000184  75746865          DCB      0x75,0x74,0x68,0x65
000188  6e746963          DCB      0x6e,0x74,0x69,0x63
00018c  6174696f          DCB      0x61,0x74,0x69,0x6f
000190  6e206d65          DCB      0x6e,0x20,0x6d,0x65
000194  73736167          DCB      0x73,0x73,0x61,0x67
000198  65206469          DCB      0x65,0x20,0x64,0x69
00019c  64206e6f          DCB      0x64,0x20,0x6e,0x6f
0001a0  7420696e          DCB      0x74,0x20,0x69,0x6e
0001a4  636c7564          DCB      0x63,0x6c,0x75,0x64
0001a8  6520656e          DCB      0x65,0x20,0x65,0x6e
0001ac  63727970          DCB      0x63,0x72,0x79,0x70
0001b0  74656420          DCB      0x74,0x65,0x64,0x20
0001b4  64617461          DCB      0x64,0x61,0x74,0x61
0001b8  00000000          DCB      0x00,0x00,0x00,0x00
0001bc  4541502d          DCB      0x45,0x41,0x50,0x2d
0001c0  53494d3a          DCB      0x53,0x49,0x4d,0x3a
0001c4  20466169          DCB      0x20,0x46,0x61,0x69
0001c8  6c656420          DCB      0x6c,0x65,0x64,0x20
0001cc  746f2070          DCB      0x74,0x6f,0x20,0x70
0001d0  61727365          DCB      0x61,0x72,0x73,0x65
0001d4  20656e63          DCB      0x20,0x65,0x6e,0x63
0001d8  72797074          DCB      0x72,0x79,0x70,0x74
0001dc  65642064          DCB      0x65,0x64,0x20,0x64
0001e0  61746120          DCB      0x61,0x74,0x61,0x20
0001e4  66726f6d          DCB      0x66,0x72,0x6f,0x6d
0001e8  20726561          DCB      0x20,0x72,0x65,0x61
0001ec  75746865          DCB      0x75,0x74,0x68,0x65
0001f0  6e746963          DCB      0x6e,0x74,0x69,0x63
0001f4  6174696f          DCB      0x61,0x74,0x69,0x6f
0001f8  6e206d65          DCB      0x6e,0x20,0x6d,0x65
0001fc  73736167          DCB      0x73,0x73,0x61,0x67
000200  65000000          DCB      0x65,0x00,0x00,0x00
000204  4541502d          DCB      0x45,0x41,0x50,0x2d
000208  53494d3a          DCB      0x53,0x49,0x4d,0x3a
00020c  204d6178          DCB      0x20,0x4d,0x61,0x78
000210  696d756d          DCB      0x69,0x6d,0x75,0x6d
000214  206e756d          DCB      0x20,0x6e,0x75,0x6d
000218  62657220          DCB      0x62,0x65,0x72,0x20
00021c  6f662066          DCB      0x6f,0x66,0x20,0x66
000220  61737420          DCB      0x61,0x73,0x74,0x20
000224  72656175          DCB      0x72,0x65,0x61,0x75
000228  74687320          DCB      0x74,0x68,0x73,0x20
00022c  70657266          DCB      0x70,0x65,0x72,0x66
000230  6f726d65          DCB      0x6f,0x72,0x6d,0x65
000234  64202d20          DCB      0x64,0x20,0x2d,0x20
000238  666f7263          DCB      0x66,0x6f,0x72,0x63
00023c  65206675          DCB      0x65,0x20,0x66,0x75
000240  6c6c6175          DCB      0x6c,0x6c,0x61,0x75
000244  746800            DCB      0x74,0x68,0x00
