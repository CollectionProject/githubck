; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_fast.o --depend=.\obj\eap_fast.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_fast.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_fast.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_fast_clear_pac_opaque_ext||, CODE, READONLY, ALIGN=2

                  eap_fast_clear_pac_opaque_ext PROC
;;;1392   
;;;1393   static int eap_fast_clear_pac_opaque_ext(struct eap_sm *sm,
000000  b538              PUSH     {r3-r5,lr}
;;;1394   					 struct eap_fast_data *data)
;;;1395   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1396   	if (tls_connection_client_hello_ext(sm->ssl_ctx, data->ssl.conn,
000006  2300              MOVS     r3,#0
000008  9300              STR      r3,[sp,#0]
00000a  6829              LDR      r1,[r5,#0]
00000c  2223              MOVS     r2,#0x23
00000e  f8d40098          LDR      r0,[r4,#0x98]
000012  f7fffffe          BL       tls_connection_client_hello_ext
000016  2800              CMP      r0,#0
000018  da06              BGE      |L2.40|
;;;1397   					    TLS_EXT_PAC_OPAQUE, NULL, 0) < 0) {
;;;1398   		wpa_printf(MSG_DEBUG, "EAP-FAST: Failed to remove PAC-Opaque "
00001a  a104              ADR      r1,|L2.44|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       wpa_printf
;;;1399   			   "TLS extension");
;;;1400   		return -1;
000022  f04f30ff          MOV      r0,#0xffffffff
                  |L2.38|
;;;1401   	}
;;;1402   	return 0;
;;;1403   }
000026  bd38              POP      {r3-r5,pc}
                  |L2.40|
000028  2000              MOVS     r0,#0                 ;1402
00002a  e7fc              B        |L2.38|
;;;1404   
                          ENDP

                  |L2.44|
00002c  4541502d          DCB      "EAP-FAST: Failed to remove PAC-Opaque TLS extension",0
000030  46415354
000034  3a204661
000038  696c6564
00003c  20746f20
000040  72656d6f
000044  76652050
000048  41432d4f
00004c  70617175
000050  6520544c
000054  53206578
000058  74656e73
00005c  696f6e00

                          AREA ||i.eap_fast_decrypt||, CODE, READONLY, ALIGN=2

                  eap_fast_decrypt PROC
;;;1251   
;;;1252   static int eap_fast_decrypt(struct eap_sm *sm, struct eap_fast_data *data,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;1253   			    struct eap_method_ret *ret,
;;;1254   			    const struct eap_hdr *req,
;;;1255   			    const struct wpabuf *in_data,
;;;1256   			    struct wpabuf **out_data)
;;;1257   {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
00000c  e9dd7a0e          LDRD     r7,r10,[sp,#0x38]
;;;1258   	struct wpabuf *in_decrypted;
;;;1259   	int res;
;;;1260   
;;;1261   	wpa_printf(MSG_DEBUG, "EAP-FAST: Received %lu bytes encrypted data for"
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       wpabuf_len
000016  4683              MOV      r11,r0
000018  4602              MOV      r2,r0
00001a  a12c              ADR      r1,|L3.204|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       wpa_printf
;;;1262   		   " Phase 2", (unsigned long) wpabuf_len(in_data));
;;;1263   
;;;1264   	if (data->pending_phase2_req) {
000022  f8d40124          LDR      r0,[r4,#0x124]
000026  b168              CBZ      r0,|L3.68|
;;;1265   		wpa_printf(MSG_DEBUG, "EAP-FAST: Pending Phase 2 request - "
000028  4936              LDR      r1,|L3.260|
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       wpa_printf
;;;1266   			   "skip decryption and use old data");
;;;1267   		/* Clear TLS reassembly state. */
;;;1268   		eap_peer_tls_reset_input(&data->ssl);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       eap_peer_tls_reset_input
;;;1269   
;;;1270   		in_decrypted = data->pending_phase2_req;
000036  f8d40124          LDR      r0,[r4,#0x124]
00003a  9003              STR      r0,[sp,#0xc]
;;;1271   		data->pending_phase2_req = NULL;
00003c  2000              MOVS     r0,#0
00003e  f8c40124          STR      r0,[r4,#0x124]
;;;1272   		goto continue_req;
000042  e01b              B        |L3.124|
                  |L3.68|
;;;1273   	}
;;;1274   
;;;1275   	if (wpabuf_len(in_data) == 0) {
000044  4638              MOV      r0,r7
000046  f7fffffe          BL       wpabuf_len
00004a  b960              CBNZ     r0,|L3.102|
;;;1276   		/* Received TLS ACK - requesting more fragments */
;;;1277   		return eap_peer_tls_encrypt(sm, &data->ssl, EAP_TYPE_FAST,
00004c  2200              MOVS     r2,#0
00004e  7871              LDRB     r1,[r6,#1]
000050  e88d0406          STM      sp,{r1,r2,r10}
000054  222b              MOVS     r2,#0x2b
000056  4621              MOV      r1,r4
000058  4640              MOV      r0,r8
00005a  6ae3              LDR      r3,[r4,#0x2c]
00005c  f7fffffe          BL       eap_peer_tls_encrypt
                  |L3.96|
;;;1278   					    data->fast_version,
;;;1279   					    req->identifier, NULL, out_data);
;;;1280   	}
;;;1281   
;;;1282   	res = eap_peer_tls_decrypt(sm, &data->ssl, in_data, &in_decrypted);
;;;1283   	if (res)
;;;1284   		return res;
;;;1285   
;;;1286   continue_req:
;;;1287   	wpa_hexdump_buf(MSG_MSGDUMP, "EAP-FAST: Decrypted Phase 2 TLV(s)",
;;;1288   			in_decrypted);
;;;1289   
;;;1290   	if (wpabuf_len(in_decrypted) < 4) {
;;;1291   		wpa_printf(MSG_INFO, "EAP-FAST: Too short Phase 2 "
;;;1292   			   "TLV frame (len=%lu)",
;;;1293   			   (unsigned long) wpabuf_len(in_decrypted));
;;;1294   		wpabuf_free(in_decrypted);
;;;1295   		return -1;
;;;1296   	}
;;;1297   
;;;1298   	res = eap_fast_process_decrypted(sm, data, ret, req,
;;;1299   					 in_decrypted, out_data);
;;;1300   
;;;1301   	wpabuf_free(in_decrypted);
;;;1302   
;;;1303   	return res;
;;;1304   }
000060  b004              ADD      sp,sp,#0x10
000062  e8bd9ff0          POP      {r4-r12,pc}
                  |L3.102|
000066  ab03              ADD      r3,sp,#0xc            ;1282
000068  463a              MOV      r2,r7                 ;1282
00006a  4621              MOV      r1,r4                 ;1282
00006c  4640              MOV      r0,r8                 ;1282
00006e  f7fffffe          BL       eap_peer_tls_decrypt
000072  4605              MOV      r5,r0                 ;1282
000074  b10d              CBZ      r5,|L3.122|
000076  4628              MOV      r0,r5                 ;1284
000078  e7f2              B        |L3.96|
                  |L3.122|
00007a  bf00              NOP                            ;1286
                  |L3.124|
00007c  a122              ADR      r1,|L3.264|
00007e  2000              MOVS     r0,#0                 ;1287
000080  9a03              LDR      r2,[sp,#0xc]          ;1287
000082  f7fffffe          BL       wpa_hexdump_buf
000086  9803              LDR      r0,[sp,#0xc]          ;1290
000088  f7fffffe          BL       wpabuf_len
00008c  2804              CMP      r0,#4                 ;1290
00008e  d20e              BCS      |L3.174|
000090  9803              LDR      r0,[sp,#0xc]          ;1291
000092  f7fffffe          BL       wpabuf_len
000096  4683              MOV      r11,r0                ;1291
000098  4602              MOV      r2,r0                 ;1291
00009a  a124              ADR      r1,|L3.300|
00009c  2000              MOVS     r0,#0                 ;1291
00009e  f7fffffe          BL       wpa_printf
0000a2  9803              LDR      r0,[sp,#0xc]          ;1294
0000a4  f7fffffe          BL       wpabuf_free
0000a8  f04f30ff          MOV      r0,#0xffffffff        ;1295
0000ac  e7d8              B        |L3.96|
                  |L3.174|
0000ae  9a03              LDR      r2,[sp,#0xc]          ;1298
0000b0  4633              MOV      r3,r6                 ;1298
0000b2  e9cd2a00          STRD     r2,r10,[sp,#0]        ;1298
0000b6  464a              MOV      r2,r9                 ;1298
0000b8  4621              MOV      r1,r4                 ;1298
0000ba  4640              MOV      r0,r8                 ;1298
0000bc  f7fffffe          BL       eap_fast_process_decrypted
0000c0  4605              MOV      r5,r0                 ;1298
0000c2  9803              LDR      r0,[sp,#0xc]          ;1301
0000c4  f7fffffe          BL       wpabuf_free
0000c8  4628              MOV      r0,r5                 ;1303
0000ca  e7c9              B        |L3.96|
;;;1305   
                          ENDP

                  |L3.204|
0000cc  4541502d          DCB      "EAP-FAST: Received %lu bytes encrypted data for Phase 2"
0000d0  46415354
0000d4  3a205265
0000d8  63656976
0000dc  65642025
0000e0  6c752062
0000e4  79746573
0000e8  20656e63
0000ec  72797074
0000f0  65642064
0000f4  61746120
0000f8  666f7220
0000fc  50686173
000100  652032  
000103  00                DCB      0
                  |L3.260|
                          DCD      ||.constdata||+0x244
                  |L3.264|
000108  4541502d          DCB      "EAP-FAST: Decrypted Phase 2 TLV(s)",0
00010c  46415354
000110  3a204465
000114  63727970
000118  74656420
00011c  50686173
000120  65203220
000124  544c5628
000128  732900  
00012b  00                DCB      0
                  |L3.300|
00012c  4541502d          DCB      "EAP-FAST: Too short Phase 2 TLV frame (len=%lu)",0
000130  46415354
000134  3a20546f
000138  6f207368
00013c  6f727420
000140  50686173
000144  65203220
000148  544c5620
00014c  6672616d
000150  6520286c
000154  656e3d25
000158  6c752900

                          AREA ||i.eap_fast_deinit||, CODE, READONLY, ALIGN=1

                  eap_fast_deinit PROC
;;;226    
;;;227    static void eap_fast_deinit(struct eap_sm *sm, void *priv)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;228    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
;;;229    	struct eap_fast_data *data = priv;
000008  4634              MOV      r4,r6
;;;230    	struct eap_fast_pac *pac, *prev;
;;;231    
;;;232    	if (data == NULL)
00000a  b90c              CBNZ     r4,|L4.16|
                  |L4.12|
;;;233    		return;
;;;234    	if (data->phase2_priv && data->phase2_method)
;;;235    		data->phase2_method->deinit(sm, data->phase2_priv);
;;;236    	os_free(data->phase2_types);
;;;237    	os_free(data->key_block_p);
;;;238    	eap_peer_tls_ssl_deinit(sm, &data->ssl);
;;;239    
;;;240    	pac = data->pac;
;;;241    	prev = NULL;
;;;242    	while (pac) {
;;;243    		prev = pac;
;;;244    		pac = pac->next;
;;;245    		eap_fast_free_pac(prev);
;;;246    	}
;;;247    	wpabuf_free(data->pending_phase2_req);
;;;248    	os_free(data);
;;;249    }
00000c  e8bd81f0          POP      {r4-r8,pc}
                  |L4.16|
000010  6b60              LDR      r0,[r4,#0x34]         ;234
000012  b130              CBZ      r0,|L4.34|
000014  6b20              LDR      r0,[r4,#0x30]         ;234
000016  b120              CBZ      r0,|L4.34|
000018  e9d4010c          LDRD     r0,r1,[r4,#0x30]      ;235
00001c  6902              LDR      r2,[r0,#0x10]         ;235
00001e  4640              MOV      r0,r8                 ;235
000020  4790              BLX      r2                    ;235
                  |L4.34|
000022  6c60              LDR      r0,[r4,#0x44]         ;236
000024  f7fffffe          BL       os_free
000028  6d20              LDR      r0,[r4,#0x50]         ;237
00002a  f7fffffe          BL       os_free
00002e  4621              MOV      r1,r4                 ;238
000030  4640              MOV      r0,r8                 ;238
000032  f7fffffe          BL       eap_peer_tls_ssl_deinit
000036  f8d450e8          LDR      r5,[r4,#0xe8]         ;240
00003a  2700              MOVS     r7,#0                 ;241
00003c  e004              B        |L4.72|
                  |L4.62|
00003e  462f              MOV      r7,r5                 ;243
000040  682d              LDR      r5,[r5,#0]            ;244
000042  4638              MOV      r0,r7                 ;245
000044  f7fffffe          BL       eap_fast_free_pac
                  |L4.72|
000048  2d00              CMP      r5,#0                 ;242
00004a  d1f8              BNE      |L4.62|
00004c  f8d40124          LDR      r0,[r4,#0x124]        ;247
000050  f7fffffe          BL       wpabuf_free
000054  4620              MOV      r0,r4                 ;248
000056  f7fffffe          BL       os_free
00005a  bf00              NOP      
00005c  e7d6              B        |L4.12|
;;;250    
                          ENDP


                          AREA ||i.eap_fast_derive_key_auth||, CODE, READONLY, ALIGN=2

                  eap_fast_derive_key_auth PROC
;;;260    
;;;261    static void eap_fast_derive_key_auth(struct eap_sm *sm,
000000  b570              PUSH     {r4-r6,lr}
;;;262    				     struct eap_fast_data *data)
;;;263    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;264    	u8 *sks;
;;;265    
;;;266    	/* RFC 4851, Section 5.1:
;;;267    	 * Extra key material after TLS key_block: session_key_seed[40]
;;;268    	 */
;;;269    
;;;270    	sks = eap_fast_derive_key(sm->ssl_ctx, data->ssl.conn, "key expansion",
000006  6821              LDR      r1,[r4,#0]
000008  2328              MOVS     r3,#0x28
00000a  a210              ADR      r2,|L5.76|
00000c  f8d60098          LDR      r0,[r6,#0x98]
000010  f7fffffe          BL       eap_fast_derive_key
000014  4605              MOV      r5,r0
;;;271    				  EAP_FAST_SKS_LEN);
;;;272    	if (sks == NULL) {
000016  b925              CBNZ     r5,|L5.34|
;;;273    		wpa_printf(MSG_DEBUG, "EAP-FAST: Failed to derive "
000018  a110              ADR      r1,|L5.92|
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       wpa_printf
                  |L5.32|
;;;274    			   "session_key_seed");
;;;275    		return;
;;;276    	}
;;;277    
;;;278    	/*
;;;279    	 * RFC 4851, Section 5.2:
;;;280    	 * S-IMCK[0] = session_key_seed
;;;281    	 */
;;;282    	wpa_hexdump_key(MSG_DEBUG,
;;;283    			"EAP-FAST: session_key_seed (SKS = S-IMCK[0])",
;;;284    			sks, EAP_FAST_SKS_LEN);
;;;285    	data->simck_idx = 0;
;;;286    	os_memcpy(data->simck, sks, EAP_FAST_SIMCK_LEN);
;;;287    	os_free(sks);
;;;288    }
000020  bd70              POP      {r4-r6,pc}
                  |L5.34|
000022  2328              MOVS     r3,#0x28              ;282
000024  462a              MOV      r2,r5                 ;282
000026  a118              ADR      r1,|L5.136|
000028  2000              MOVS     r0,#0                 ;282
00002a  f7fffffe          BL       wpa_hexdump_key
00002e  2000              MOVS     r0,#0                 ;285
000030  f8c40120          STR      r0,[r4,#0x120]        ;285
000034  2228              MOVS     r2,#0x28              ;286
000036  4629              MOV      r1,r5                 ;286
000038  f10400f8          ADD      r0,r4,#0xf8           ;286
00003c  f7fffffe          BL       os_memcpy
000040  4628              MOV      r0,r5                 ;287
000042  f7fffffe          BL       os_free
000046  bf00              NOP      
000048  e7ea              B        |L5.32|
;;;289    
                          ENDP

00004a  0000              DCW      0x0000
                  |L5.76|
00004c  6b657920          DCB      "key expansion",0
000050  65787061
000054  6e73696f
000058  6e00    
00005a  00                DCB      0
00005b  00                DCB      0
                  |L5.92|
00005c  4541502d          DCB      "EAP-FAST: Failed to derive session_key_seed",0
000060  46415354
000064  3a204661
000068  696c6564
00006c  20746f20
000070  64657269
000074  76652073
000078  65737369
00007c  6f6e5f6b
000080  65795f73
000084  65656400
                  |L5.136|
000088  4541502d          DCB      "EAP-FAST: session_key_seed (SKS = S-IMCK[0])",0
00008c  46415354
000090  3a207365
000094  7373696f
000098  6e5f6b65
00009c  795f7365
0000a0  65642028
0000a4  534b5320
0000a8  3d20532d
0000ac  494d434b
0000b0  5b305d29
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.eap_fast_derive_key_provisioning||, CODE, READONLY, ALIGN=2

                  eap_fast_derive_key_provisioning PROC
;;;290    
;;;291    static void eap_fast_derive_key_provisioning(struct eap_sm *sm,
000000  b570              PUSH     {r4-r6,lr}
;;;292    					     struct eap_fast_data *data)
;;;293    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;294    	os_free(data->key_block_p);
000006  6d20              LDR      r0,[r4,#0x50]
000008  f7fffffe          BL       os_free
;;;295    	data->key_block_p = (struct eap_fast_key_block_provisioning *)
00000c  6821              LDR      r1,[r4,#0]
00000e  2348              MOVS     r3,#0x48
000010  a216              ADR      r2,|L6.108|
000012  f8d50098          LDR      r0,[r5,#0x98]
000016  f7fffffe          BL       eap_fast_derive_key
00001a  6520              STR      r0,[r4,#0x50]
;;;296    		eap_fast_derive_key(sm->ssl_ctx, data->ssl.conn,
;;;297    				    "key expansion",
;;;298    				    sizeof(*data->key_block_p));
;;;299    	if (data->key_block_p == NULL) {
00001c  6d20              LDR      r0,[r4,#0x50]
00001e  b920              CBNZ     r0,|L6.42|
;;;300    		wpa_printf(MSG_DEBUG, "EAP-FAST: Failed to derive key block");
000020  a116              ADR      r1,|L6.124|
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       wpa_printf
                  |L6.40|
;;;301    		return;
;;;302    	}
;;;303    	/*
;;;304    	 * RFC 4851, Section 5.2:
;;;305    	 * S-IMCK[0] = session_key_seed
;;;306    	 */
;;;307    	wpa_hexdump_key(MSG_DEBUG,
;;;308    			"EAP-FAST: session_key_seed (SKS = S-IMCK[0])",
;;;309    			data->key_block_p->session_key_seed,
;;;310    			sizeof(data->key_block_p->session_key_seed));
;;;311    	data->simck_idx = 0;
;;;312    	os_memcpy(data->simck, data->key_block_p->session_key_seed,
;;;313    		  EAP_FAST_SIMCK_LEN);
;;;314    	wpa_hexdump_key(MSG_DEBUG, "EAP-FAST: server_challenge",
;;;315    			data->key_block_p->server_challenge,
;;;316    			sizeof(data->key_block_p->server_challenge));
;;;317    	wpa_hexdump_key(MSG_DEBUG, "EAP-FAST: client_challenge",
;;;318    			data->key_block_p->client_challenge,
;;;319    			sizeof(data->key_block_p->client_challenge));
;;;320    }
000028  bd70              POP      {r4-r6,pc}
                  |L6.42|
00002a  2328              MOVS     r3,#0x28              ;307
00002c  a11d              ADR      r1,|L6.164|
00002e  2000              MOVS     r0,#0                 ;307
000030  6d22              LDR      r2,[r4,#0x50]         ;307
000032  f7fffffe          BL       wpa_hexdump_key
000036  2000              MOVS     r0,#0                 ;311
000038  f8c40120          STR      r0,[r4,#0x120]        ;311
00003c  2228              MOVS     r2,#0x28              ;312
00003e  f10400f8          ADD      r0,r4,#0xf8           ;312
000042  6d21              LDR      r1,[r4,#0x50]         ;312
000044  f7fffffe          BL       os_memcpy
000048  6d20              LDR      r0,[r4,#0x50]         ;314
00004a  f1000228          ADD      r2,r0,#0x28           ;314
00004e  2310              MOVS     r3,#0x10              ;314
000050  a120              ADR      r1,|L6.212|
000052  2000              MOVS     r0,#0                 ;314
000054  f7fffffe          BL       wpa_hexdump_key
000058  6d20              LDR      r0,[r4,#0x50]         ;317
00005a  f1000238          ADD      r2,r0,#0x38           ;317
00005e  2310              MOVS     r3,#0x10              ;317
000060  a123              ADR      r1,|L6.240|
000062  2000              MOVS     r0,#0                 ;317
000064  f7fffffe          BL       wpa_hexdump_key
000068  bf00              NOP      
00006a  e7dd              B        |L6.40|
;;;321    
                          ENDP

                  |L6.108|
00006c  6b657920          DCB      "key expansion",0
000070  65787061
000074  6e73696f
000078  6e00    
00007a  00                DCB      0
00007b  00                DCB      0
                  |L6.124|
00007c  4541502d          DCB      "EAP-FAST: Failed to derive key block",0
000080  46415354
000084  3a204661
000088  696c6564
00008c  20746f20
000090  64657269
000094  7665206b
000098  65792062
00009c  6c6f636b
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L6.164|
0000a4  4541502d          DCB      "EAP-FAST: session_key_seed (SKS = S-IMCK[0])",0
0000a8  46415354
0000ac  3a207365
0000b0  7373696f
0000b4  6e5f6b65
0000b8  795f7365
0000bc  65642028
0000c0  534b5320
0000c4  3d20532d
0000c8  494d434b
0000cc  5b305d29
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
                  |L6.212|
0000d4  4541502d          DCB      "EAP-FAST: server_challenge",0
0000d8  46415354
0000dc  3a207365
0000e0  72766572
0000e4  5f636861
0000e8  6c6c656e
0000ec  676500  
0000ef  00                DCB      0
                  |L6.240|
0000f0  4541502d          DCB      "EAP-FAST: client_challenge",0
0000f4  46415354
0000f8  3a20636c
0000fc  69656e74
000100  5f636861
000104  6c6c656e
000108  676500  
00010b  00                DCB      0

                          AREA ||i.eap_fast_derive_keys||, CODE, READONLY, ALIGN=1

                  eap_fast_derive_keys PROC
;;;322    
;;;323    static void eap_fast_derive_keys(struct eap_sm *sm, struct eap_fast_data *data)
000000  b570              PUSH     {r4-r6,lr}
;;;324    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;325    	if (data->anon_provisioning)
000006  6de0              LDR      r0,[r4,#0x5c]
000008  b120              CBZ      r0,|L7.20|
;;;326    		eap_fast_derive_key_provisioning(sm, data);
00000a  4621              MOV      r1,r4
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       eap_fast_derive_key_provisioning
000012  e003              B        |L7.28|
                  |L7.20|
;;;327    	else
;;;328    		eap_fast_derive_key_auth(sm, data);
000014  4621              MOV      r1,r4
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       eap_fast_derive_key_auth
                  |L7.28|
;;;329    }
00001c  bd70              POP      {r4-r6,pc}
;;;330    
                          ENDP


                          AREA ||i.eap_fast_derive_msk||, CODE, READONLY, ALIGN=1

                  eap_fast_derive_msk PROC
;;;251    
;;;252    static int eap_fast_derive_msk(struct eap_fast_data *data)
000000  b510              PUSH     {r4,lr}
;;;253    {
000002  4604              MOV      r4,r0
;;;254    	eap_fast_derive_eap_msk(data->simck, data->key_data);
000004  f1040164          ADD      r1,r4,#0x64
000008  f10400f8          ADD      r0,r4,#0xf8
00000c  f7fffffe          BL       eap_fast_derive_eap_msk
;;;255    	eap_fast_derive_eap_emsk(data->simck, data->emsk);
000010  f10401a4          ADD      r1,r4,#0xa4
000014  f10400f8          ADD      r0,r4,#0xf8
000018  f7fffffe          BL       eap_fast_derive_eap_emsk
;;;256    	data->success = 1;
00001c  2001              MOVS     r0,#1
00001e  f8c400e4          STR      r0,[r4,#0xe4]
;;;257    	return 0;
000022  2000              MOVS     r0,#0
;;;258    }
000024  bd10              POP      {r4,pc}
;;;259    
                          ENDP


                          AREA ||i.eap_fast_encrypt_response||, CODE, READONLY, ALIGN=2

                  eap_fast_encrypt_response PROC
;;;1099   
;;;1100   static int eap_fast_encrypt_response(struct eap_sm *sm,
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;1101   				     struct eap_fast_data *data,
;;;1102   				     struct wpabuf *resp,
;;;1103   				     u8 identifier, struct wpabuf **out_data)
;;;1104   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;1105   	if (resp == NULL)
000010  b914              CBNZ     r4,|L9.24|
;;;1106   		return 0;
000012  2000              MOVS     r0,#0
                  |L9.20|
;;;1107   
;;;1108   	wpa_hexdump_buf(MSG_DEBUG, "EAP-FAST: Encrypting Phase 2 data",
;;;1109   			resp);
;;;1110   	if (eap_peer_tls_encrypt(sm, &data->ssl, EAP_TYPE_FAST,
;;;1111   				 data->fast_version, identifier,
;;;1112   				 resp, out_data)) {
;;;1113   		wpa_printf(MSG_INFO, "EAP-FAST: Failed to encrypt a Phase 2 "
;;;1114   			   "frame");
;;;1115   	}
;;;1116   	wpabuf_free(resp);
;;;1117   
;;;1118   	return 0;
;;;1119   }
000014  e8bd83fe          POP      {r1-r9,pc}
                  |L9.24|
000018  4622              MOV      r2,r4                 ;1108
00001a  a10b              ADR      r1,|L9.72|
00001c  2000              MOVS     r0,#0                 ;1108
00001e  f7fffffe          BL       wpa_hexdump_buf
000022  e9cd4801          STRD     r4,r8,[sp,#4]         ;1110
000026  9600              STR      r6,[sp,#0]            ;1110
000028  222b              MOVS     r2,#0x2b              ;1110
00002a  4629              MOV      r1,r5                 ;1110
00002c  4638              MOV      r0,r7                 ;1110
00002e  6aeb              LDR      r3,[r5,#0x2c]         ;1110
000030  f7fffffe          BL       eap_peer_tls_encrypt
000034  b118              CBZ      r0,|L9.62|
000036  a10d              ADR      r1,|L9.108|
000038  2000              MOVS     r0,#0                 ;1113
00003a  f7fffffe          BL       wpa_printf
                  |L9.62|
00003e  4620              MOV      r0,r4                 ;1116
000040  f7fffffe          BL       wpabuf_free
000044  2000              MOVS     r0,#0                 ;1118
000046  e7e5              B        |L9.20|
;;;1120   
                          ENDP

                  |L9.72|
000048  4541502d          DCB      "EAP-FAST: Encrypting Phase 2 data",0
00004c  46415354
000050  3a20456e
000054  63727970
000058  74696e67
00005c  20506861
000060  73652032
000064  20646174
000068  6100    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L9.108|
00006c  4541502d          DCB      "EAP-FAST: Failed to encrypt a Phase 2 frame",0
000070  46415354
000074  3a204661
000078  696c6564
00007c  20746f20
000080  656e6372
000084  79707420
000088  61205068
00008c  61736520
000090  32206672
000094  616d6500

                          AREA ||i.eap_fast_getKey||, CODE, READONLY, ALIGN=1

                  eap_fast_getKey PROC
;;;1646   
;;;1647   static u8 * eap_fast_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1648   {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;1649   	struct eap_fast_data *data = priv;
00000a  4627              MOV      r7,r4
;;;1650   	u8 *key;
;;;1651   
;;;1652   	if (!data->success)
00000c  f8d700e4          LDR      r0,[r7,#0xe4]
000010  b910              CBNZ     r0,|L10.24|
;;;1653   		return NULL;
000012  2000              MOVS     r0,#0
                  |L10.20|
;;;1654   
;;;1655   	key = os_malloc(EAP_FAST_KEY_LEN);
;;;1656   	if (key == NULL)
;;;1657   		return NULL;
;;;1658   
;;;1659   	*len = EAP_FAST_KEY_LEN;
;;;1660   	os_memcpy(key, data->key_data, EAP_FAST_KEY_LEN);
;;;1661   
;;;1662   	return key;
;;;1663   }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L10.24|
000018  2040              MOVS     r0,#0x40              ;1655
00001a  f7fffffe          BL       os_malloc
00001e  4605              MOV      r5,r0                 ;1655
000020  b90d              CBNZ     r5,|L10.38|
000022  2000              MOVS     r0,#0                 ;1657
000024  e7f6              B        |L10.20|
                  |L10.38|
000026  2040              MOVS     r0,#0x40              ;1659
000028  6030              STR      r0,[r6,#0]            ;1659
00002a  2240              MOVS     r2,#0x40              ;1660
00002c  f1070164          ADD      r1,r7,#0x64           ;1660
000030  4628              MOV      r0,r5                 ;1660
000032  f7fffffe          BL       os_memcpy
000036  4628              MOV      r0,r5                 ;1662
000038  e7ec              B        |L10.20|
;;;1664   
                          ENDP


                          AREA ||i.eap_fast_get_a_id||, CODE, READONLY, ALIGN=2

                  eap_fast_get_a_id PROC
;;;1306   
;;;1307   static const u8 * eap_fast_get_a_id(const u8 *buf, size_t len, size_t *id_len)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1308   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1309   	const u8 *a_id;
;;;1310   	struct pac_tlv_hdr *hdr;
;;;1311   
;;;1312   	/*
;;;1313   	 * Parse authority identity (A-ID) from the EAP-FAST/Start. This
;;;1314   	 * supports both raw A-ID and one inside an A-ID TLV.
;;;1315   	 */
;;;1316   	a_id = buf;
00000a  46a0              MOV      r8,r4
;;;1317   	*id_len = len;
00000c  603e              STR      r6,[r7,#0]
;;;1318   	if (len > sizeof(*hdr)) {
00000e  2e04              CMP      r6,#4
000010  d91f              BLS      |L11.82|
;;;1319   		int tlen;
;;;1320   		hdr = (struct pac_tlv_hdr *) buf;
000012  4625              MOV      r5,r4
;;;1321   		tlen = be_to_host16(hdr->len);
000014  8868              LDRH     r0,[r5,#2]
000016  f44f417f          MOV      r1,#0xff00
00001a  ea012000          AND      r0,r1,r0,LSL #8
00001e  8869              LDRH     r1,[r5,#2]
000020  ea402911          ORR      r9,r0,r1,LSR #8
;;;1322   		if (be_to_host16(hdr->type) == PAC_TYPE_A_ID &&
000024  8828              LDRH     r0,[r5,#0]
000026  f44f417f          MOV      r1,#0xff00
00002a  ea012000          AND      r0,r1,r0,LSL #8
00002e  8829              LDRH     r1,[r5,#0]
000030  ea402011          ORR      r0,r0,r1,LSR #8
000034  2804              CMP      r0,#4
000036  d10b              BNE      |L11.80|
;;;1323   		    sizeof(*hdr) + tlen <= len) {
000038  f1090004          ADD      r0,r9,#4
00003c  42b0              CMP      r0,r6
00003e  d807              BHI      |L11.80|
;;;1324   			wpa_printf(MSG_DEBUG, "EAP-FAST: A-ID was in TLV "
000040  a108              ADR      r1,|L11.100|
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       wpa_printf
;;;1325   				   "(Start)");
;;;1326   			a_id = (u8 *) (hdr + 1);
000048  f1050804          ADD      r8,r5,#4
;;;1327   			*id_len = tlen;
00004c  f8c79000          STR      r9,[r7,#0]
                  |L11.80|
;;;1328   		}
;;;1329   	}
000050  bf00              NOP      
                  |L11.82|
;;;1330   	wpa_hexdump_ascii(MSG_DEBUG, "EAP-FAST: A-ID", a_id, *id_len);
000052  4642              MOV      r2,r8
000054  a10c              ADR      r1,|L11.136|
000056  2000              MOVS     r0,#0
000058  683b              LDR      r3,[r7,#0]
00005a  f7fffffe          BL       wpa_hexdump_ascii
;;;1331   
;;;1332   	return a_id;
00005e  4640              MOV      r0,r8
;;;1333   }
000060  e8bd87f0          POP      {r4-r10,pc}
;;;1334   
                          ENDP

                  |L11.100|
000064  4541502d          DCB      "EAP-FAST: A-ID was in TLV (Start)",0
000068  46415354
00006c  3a20412d
000070  49442077
000074  61732069
000078  6e20544c
00007c  56202853
000080  74617274
000084  2900    
000086  00                DCB      0
000087  00                DCB      0
                  |L11.136|
000088  4541502d          DCB      "EAP-FAST: A-ID",0
00008c  46415354
000090  3a20412d
000094  494400  
000097  00                DCB      0

                          AREA ||i.eap_fast_get_cmk||, CODE, READONLY, ALIGN=2

                  eap_fast_get_cmk PROC
;;;679    
;;;680    static int eap_fast_get_cmk(struct eap_sm *sm, struct eap_fast_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;681    			    u8 *cmk)
;;;682    {
000002  b09a              SUB      sp,sp,#0x68
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;683    	u8 isk[32], imck[60];
;;;684    
;;;685    	wpa_printf(MSG_DEBUG, "EAP-FAST: Determining CMK[%d] for Compound MIC "
00000a  f8d40120          LDR      r0,[r4,#0x120]
00000e  1c42              ADDS     r2,r0,#1
000010  a120              ADR      r1,|L12.148|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;686    		   "calculation", data->simck_idx + 1);
;;;687    
;;;688    	/*
;;;689    	 * RFC 4851, Section 5.2:
;;;690    	 * IMCK[j] = T-PRF(S-IMCK[j-1], "Inner Methods Compound Keys",
;;;691    	 *                 MSK[j], 60)
;;;692    	 * S-IMCK[j] = first 40 octets of IMCK[j]
;;;693    	 * CMK[j] = last 20 octets of IMCK[j]
;;;694    	 */
;;;695    
;;;696    	if (eap_fast_get_phase2_key(sm, data, isk, sizeof(isk)) < 0)
000018  2320              MOVS     r3,#0x20
00001a  aa12              ADD      r2,sp,#0x48
00001c  4621              MOV      r1,r4
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       eap_fast_get_phase2_key
000024  2800              CMP      r0,#0
000026  da03              BGE      |L12.48|
;;;697    		return -1;
000028  f04f30ff          MOV      r0,#0xffffffff
                  |L12.44|
;;;698    	wpa_hexdump_key(MSG_MSGDUMP, "EAP-FAST: ISK[j]", isk, sizeof(isk));
;;;699    	sha1_t_prf(data->simck, EAP_FAST_SIMCK_LEN,
;;;700    		   "Inner Methods Compound Keys",
;;;701    		   isk, sizeof(isk), imck, sizeof(imck));
;;;702    	data->simck_idx++;
;;;703    	os_memcpy(data->simck, imck, EAP_FAST_SIMCK_LEN);
;;;704    	wpa_hexdump_key(MSG_MSGDUMP, "EAP-FAST: S-IMCK[j]",
;;;705    			data->simck, EAP_FAST_SIMCK_LEN);
;;;706    	os_memcpy(cmk, imck + EAP_FAST_SIMCK_LEN, EAP_FAST_CMK_LEN);
;;;707    	wpa_hexdump_key(MSG_MSGDUMP, "EAP-FAST: CMK[j]",
;;;708    			cmk, EAP_FAST_CMK_LEN);
;;;709    
;;;710    	return 0;
;;;711    }
00002c  b01a              ADD      sp,sp,#0x68
00002e  bd70              POP      {r4-r6,pc}
                  |L12.48|
000030  2320              MOVS     r3,#0x20              ;698
000032  aa12              ADD      r2,sp,#0x48           ;698
000034  a126              ADR      r1,|L12.208|
000036  2000              MOVS     r0,#0                 ;698
000038  f7fffffe          BL       wpa_hexdump_key
00003c  233c              MOVS     r3,#0x3c              ;699
00003e  aa03              ADD      r2,sp,#0xc            ;699
000040  2120              MOVS     r1,#0x20              ;699
000042  e88d000e          STM      sp,{r1-r3}            ;699
000046  ab12              ADD      r3,sp,#0x48           ;699
000048  a226              ADR      r2,|L12.228|
00004a  2128              MOVS     r1,#0x28              ;699
00004c  f10400f8          ADD      r0,r4,#0xf8           ;699
000050  f7fffffe          BL       sha1_t_prf
000054  f8d40120          LDR      r0,[r4,#0x120]        ;702
000058  1c40              ADDS     r0,r0,#1              ;702
00005a  f8c40120          STR      r0,[r4,#0x120]        ;702
00005e  2228              MOVS     r2,#0x28              ;703
000060  a903              ADD      r1,sp,#0xc            ;703
000062  f10400f8          ADD      r0,r4,#0xf8           ;703
000066  f7fffffe          BL       os_memcpy
00006a  2328              MOVS     r3,#0x28              ;704
00006c  f10402f8          ADD      r2,r4,#0xf8           ;704
000070  a123              ADR      r1,|L12.256|
000072  2000              MOVS     r0,#0                 ;704
000074  f7fffffe          BL       wpa_hexdump_key
000078  2214              MOVS     r2,#0x14              ;706
00007a  a90d              ADD      r1,sp,#0x34           ;706
00007c  4628              MOV      r0,r5                 ;706
00007e  f7fffffe          BL       os_memcpy
000082  2314              MOVS     r3,#0x14              ;707
000084  462a              MOV      r2,r5                 ;707
000086  a123              ADR      r1,|L12.276|
000088  2000              MOVS     r0,#0                 ;707
00008a  f7fffffe          BL       wpa_hexdump_key
00008e  2000              MOVS     r0,#0                 ;710
000090  e7cc              B        |L12.44|
;;;712    
                          ENDP

000092  0000              DCW      0x0000
                  |L12.148|
000094  4541502d          DCB      "EAP-FAST: Determining CMK[%d] for Compound MIC calculat"
000098  46415354
00009c  3a204465
0000a0  7465726d
0000a4  696e696e
0000a8  6720434d
0000ac  4b5b2564
0000b0  5d20666f
0000b4  7220436f
0000b8  6d706f75
0000bc  6e64204d
0000c0  49432063
0000c4  616c6375
0000c8  6c6174  
0000cb  696f6e00          DCB      "ion",0
0000cf  00                DCB      0
                  |L12.208|
0000d0  4541502d          DCB      "EAP-FAST: ISK[j]",0
0000d4  46415354
0000d8  3a204953
0000dc  4b5b6a5d
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L12.228|
0000e4  496e6e65          DCB      "Inner Methods Compound Keys",0
0000e8  72204d65
0000ec  74686f64
0000f0  7320436f
0000f4  6d706f75
0000f8  6e64204b
0000fc  65797300
                  |L12.256|
000100  4541502d          DCB      "EAP-FAST: S-IMCK[j]",0
000104  46415354
000108  3a20532d
00010c  494d434b
000110  5b6a5d00
                  |L12.276|
000114  4541502d          DCB      "EAP-FAST: CMK[j]",0
000118  46415354
00011c  3a20434d
000120  4b5b6a5d
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0

                          AREA ||i.eap_fast_get_emsk||, CODE, READONLY, ALIGN=1

                  eap_fast_get_emsk PROC
;;;1665   
;;;1666   static u8 * eap_fast_get_emsk(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1667   {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
;;;1668   	struct eap_fast_data *data = priv;
00000a  4627              MOV      r7,r4
;;;1669   	u8 *key;
;;;1670   
;;;1671   	if (!data->success)
00000c  f8d700e4          LDR      r0,[r7,#0xe4]
000010  b910              CBNZ     r0,|L13.24|
;;;1672   		return NULL;
000012  2000              MOVS     r0,#0
                  |L13.20|
;;;1673   
;;;1674   	key = os_malloc(EAP_EMSK_LEN);
;;;1675   	if (key == NULL)
;;;1676   		return NULL;
;;;1677   
;;;1678   	*len = EAP_EMSK_LEN;
;;;1679   	os_memcpy(key, data->emsk, EAP_EMSK_LEN);
;;;1680   
;;;1681   	return key;
;;;1682   }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L13.24|
000018  2040              MOVS     r0,#0x40              ;1674
00001a  f7fffffe          BL       os_malloc
00001e  4605              MOV      r5,r0                 ;1674
000020  b90d              CBNZ     r5,|L13.38|
000022  2000              MOVS     r0,#0                 ;1676
000024  e7f6              B        |L13.20|
                  |L13.38|
000026  2040              MOVS     r0,#0x40              ;1678
000028  6030              STR      r0,[r6,#0]            ;1678
00002a  2240              MOVS     r2,#0x40              ;1679
00002c  f10701a4          ADD      r1,r7,#0xa4           ;1679
000030  4628              MOV      r0,r5                 ;1679
000032  f7fffffe          BL       os_memcpy
000036  4628              MOV      r0,r5                 ;1681
000038  e7ec              B        |L13.20|
;;;1683   
                          ENDP


                          AREA ||i.eap_fast_get_phase2_key||, CODE, READONLY, ALIGN=2

                  eap_fast_get_phase2_key PROC
;;;632    
;;;633    static int eap_fast_get_phase2_key(struct eap_sm *sm,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;634    				   struct eap_fast_data *data,
;;;635    				   u8 *isk, size_t isk_len)
;;;636    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;637    	u8 *key;
;;;638    	size_t key_len;
;;;639    
;;;640    	os_memset(isk, 0, isk_len);
00000c  462a              MOV      r2,r5
00000e  2100              MOVS     r1,#0
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       os_memset
;;;641    
;;;642    	if (data->phase2_method == NULL || data->phase2_priv == NULL) {
000016  6b20              LDR      r0,[r4,#0x30]
000018  b108              CBZ      r0,|L14.30|
00001a  6b60              LDR      r0,[r4,#0x34]
00001c  b938              CBNZ     r0,|L14.46|
                  |L14.30|
;;;643    		wpa_printf(MSG_DEBUG, "EAP-FAST: Phase 2 method not "
00001e  a125              ADR      r1,|L14.180|
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       wpa_printf
;;;644    			   "available");
;;;645    		return -1;
000026  f04f30ff          MOV      r0,#0xffffffff
                  |L14.42|
;;;646    	}
;;;647    
;;;648    	if (data->phase2_method->isKeyAvailable == NULL ||
;;;649    	    data->phase2_method->getKey == NULL)
;;;650    		return 0;
;;;651    
;;;652    	if (!data->phase2_method->isKeyAvailable(sm, data->phase2_priv) ||
;;;653    	    (key = data->phase2_method->getKey(sm, data->phase2_priv,
;;;654    					       &key_len)) == NULL) {
;;;655    		wpa_printf(MSG_DEBUG, "EAP-FAST: Could not get key material "
;;;656    			   "from Phase 2");
;;;657    		return -1;
;;;658    	}
;;;659    
;;;660    	if (key_len > isk_len)
;;;661    		key_len = isk_len;
;;;662    	if (key_len == 32 &&
;;;663    	    data->phase2_method->vendor == EAP_VENDOR_IETF &&
;;;664    	    data->phase2_method->method == EAP_TYPE_MSCHAPV2) {
;;;665    		/*
;;;666    		 * EAP-FAST uses reverse order for MS-MPPE keys when deriving
;;;667    		 * MSK from EAP-MSCHAPv2. Swap the keys here to get the correct
;;;668    		 * ISK for EAP-FAST cryptobinding.
;;;669    		 */
;;;670    		os_memcpy(isk, key + 16, 16);
;;;671    		os_memcpy(isk + 16, key, 16);
;;;672    	} else
;;;673    		os_memcpy(isk, key, key_len);
;;;674    	os_free(key);
;;;675    
;;;676    	return 0;
;;;677    }
00002a  e8bd83f8          POP      {r3-r9,pc}
                  |L14.46|
00002e  6b20              LDR      r0,[r4,#0x30]         ;648
000030  6980              LDR      r0,[r0,#0x18]         ;648
000032  b110              CBZ      r0,|L14.58|
000034  6b20              LDR      r0,[r4,#0x30]         ;649
000036  69c0              LDR      r0,[r0,#0x1c]         ;649
000038  b908              CBNZ     r0,|L14.62|
                  |L14.58|
00003a  2000              MOVS     r0,#0                 ;650
00003c  e7f5              B        |L14.42|
                  |L14.62|
00003e  e9d4010c          LDRD     r0,r1,[r4,#0x30]      ;652
000042  6982              LDR      r2,[r0,#0x18]         ;652
000044  4640              MOV      r0,r8                 ;652
000046  4790              BLX      r2                    ;652
000048  b138              CBZ      r0,|L14.90|
00004a  e9d4010c          LDRD     r0,r1,[r4,#0x30]      ;653
00004e  466a              MOV      r2,sp                 ;653
000050  69c3              LDR      r3,[r0,#0x1c]         ;653
000052  4640              MOV      r0,r8                 ;653
000054  4798              BLX      r3                    ;653
000056  0006              MOVS     r6,r0                 ;653
000058  d106              BNE      |L14.104|
                  |L14.90|
00005a  a120              ADR      r1,|L14.220|
00005c  2000              MOVS     r0,#0                 ;655
00005e  f7fffffe          BL       wpa_printf
000062  f04f30ff          MOV      r0,#0xffffffff        ;657
000066  e7e0              B        |L14.42|
                  |L14.104|
000068  9800              LDR      r0,[sp,#0]            ;660
00006a  42a8              CMP      r0,r5                 ;660
00006c  d900              BLS      |L14.112|
00006e  9500              STR      r5,[sp,#0]            ;661
                  |L14.112|
000070  9800              LDR      r0,[sp,#0]            ;662
000072  2820              CMP      r0,#0x20              ;662
000074  d113              BNE      |L14.158|
000076  6b20              LDR      r0,[r4,#0x30]         ;663
000078  6800              LDR      r0,[r0,#0]            ;663
00007a  b980              CBNZ     r0,|L14.158|
00007c  6b20              LDR      r0,[r4,#0x30]         ;664
00007e  7900              LDRB     r0,[r0,#4]            ;664
000080  281a              CMP      r0,#0x1a              ;664
000082  d10c              BNE      |L14.158|
000084  2210              MOVS     r2,#0x10              ;670
000086  f1060110          ADD      r1,r6,#0x10           ;670
00008a  4638              MOV      r0,r7                 ;670
00008c  f7fffffe          BL       os_memcpy
000090  2210              MOVS     r2,#0x10              ;671
000092  4631              MOV      r1,r6                 ;671
000094  f1070010          ADD      r0,r7,#0x10           ;671
000098  f7fffffe          BL       os_memcpy
00009c  e004              B        |L14.168|
                  |L14.158|
00009e  4631              MOV      r1,r6                 ;673
0000a0  4638              MOV      r0,r7                 ;673
0000a2  9a00              LDR      r2,[sp,#0]            ;673
0000a4  f7fffffe          BL       os_memcpy
                  |L14.168|
0000a8  4630              MOV      r0,r6                 ;674
0000aa  f7fffffe          BL       os_free
0000ae  2000              MOVS     r0,#0                 ;676
0000b0  e7bb              B        |L14.42|
;;;678    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L14.180|
0000b4  4541502d          DCB      "EAP-FAST: Phase 2 method not available",0
0000b8  46415354
0000bc  3a205068
0000c0  61736520
0000c4  32206d65
0000c8  74686f64
0000cc  206e6f74
0000d0  20617661
0000d4  696c6162
0000d8  6c6500  
0000db  00                DCB      0
                  |L14.220|
0000dc  4541502d          DCB      "EAP-FAST: Could not get key material from Phase 2",0
0000e0  46415354
0000e4  3a20436f
0000e8  756c6420
0000ec  6e6f7420
0000f0  67657420
0000f4  6b657920
0000f8  6d617465
0000fc  7269616c
000100  2066726f
000104  6d205068
000108  61736520
00010c  3200    
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||i.eap_fast_get_status||, CODE, READONLY, ALIGN=2

                  eap_fast_get_status PROC
;;;1620   
;;;1621   static int eap_fast_get_status(struct eap_sm *sm, void *priv, char *buf,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1622   			       size_t buflen, int verbose)
;;;1623   {
000004  4682              MOV      r10,r0
000006  460e              MOV      r6,r1
000008  4691              MOV      r9,r2
00000a  461f              MOV      r7,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;1624   	struct eap_fast_data *data = priv;
000010  46b0              MOV      r8,r6
;;;1625   	int len, ret;
;;;1626   
;;;1627   	len = eap_peer_tls_status(sm, &data->ssl, buf, buflen, verbose);
000012  463b              MOV      r3,r7
000014  464a              MOV      r2,r9
000016  4641              MOV      r1,r8
000018  4650              MOV      r0,r10
00001a  f8cdb000          STR      r11,[sp,#0]
00001e  f7fffffe          BL       eap_peer_tls_status
000022  4604              MOV      r4,r0
;;;1628   	if (data->phase2_method) {
000024  f8d80030          LDR      r0,[r8,#0x30]
000028  b190              CBZ      r0,|L15.80|
;;;1629   		ret = os_snprintf(buf + len, buflen - len,
00002a  f8d82030          LDR      r2,[r8,#0x30]
00002e  1b39              SUBS     r1,r7,r4
000030  eb090004          ADD      r0,r9,r4
000034  6893              LDR      r3,[r2,#8]
000036  a207              ADR      r2,|L15.84|
000038  f7fffffe          BL       os_snprintf
00003c  4605              MOV      r5,r0
;;;1630   				  "EAP-FAST Phase2 method=%s\n",
;;;1631   				  data->phase2_method->name);
;;;1632   		if (ret < 0 || (size_t) ret >= buflen - len)
00003e  2d00              CMP      r5,#0
000040  db02              BLT      |L15.72|
000042  1b38              SUBS     r0,r7,r4
000044  42a8              CMP      r0,r5
000046  d802              BHI      |L15.78|
                  |L15.72|
;;;1633   			return len;
000048  4620              MOV      r0,r4
                  |L15.74|
;;;1634   		len += ret;
;;;1635   	}
;;;1636   	return len;
;;;1637   }
00004a  e8bd8ff8          POP      {r3-r11,pc}
                  |L15.78|
00004e  442c              ADD      r4,r4,r5              ;1634
                  |L15.80|
000050  4620              MOV      r0,r4                 ;1636
000052  e7fa              B        |L15.74|
;;;1638   
                          ENDP

                  |L15.84|
000054  4541502d          DCB      "EAP-FAST Phase2 method=%s\n",0
000058  46415354
00005c  20506861
000060  73653220
000064  6d657468
000068  6f643d25
00006c  730a00  
00006f  00                DCB      0

                          AREA ||i.eap_fast_init||, CODE, READONLY, ALIGN=2

                  eap_fast_init PROC
;;;150    
;;;151    static void * eap_fast_init(struct eap_sm *sm)
000000  b570              PUSH     {r4-r6,lr}
;;;152    {
000002  4606              MOV      r6,r0
;;;153    	struct eap_fast_data *data;
;;;154    	struct eap_peer_config *config = eap_get_config(sm);
000004  4630              MOV      r0,r6
000006  f7fffffe          BL       eap_get_config
00000a  4605              MOV      r5,r0
;;;155    
;;;156    	data = os_zalloc(sizeof(*data));
00000c  f44f7094          MOV      r0,#0x128
000010  f7fffffe          BL       os_zalloc
000014  4604              MOV      r4,r0
;;;157    	if (data == NULL)
000016  b90c              CBNZ     r4,|L16.28|
;;;158    		return NULL;
000018  2000              MOVS     r0,#0
                  |L16.26|
;;;159    	data->fast_version = EAP_FAST_VERSION;
;;;160    	data->max_pac_list_len = 10;
;;;161    
;;;162    	if (config && config->phase1 &&
;;;163    	    eap_fast_parse_phase1(data, config->phase1) < 0) {
;;;164    		eap_fast_deinit(sm, data);
;;;165    		return NULL;
;;;166    	}
;;;167    
;;;168    	if (eap_peer_select_phase2_methods(config, "auth=",
;;;169    					   &data->phase2_types,
;;;170    					   &data->num_phase2_types) < 0) {
;;;171    		eap_fast_deinit(sm, data);
;;;172    		return NULL;
;;;173    	}
;;;174    
;;;175    	data->phase2_type.vendor = EAP_VENDOR_IETF;
;;;176    	data->phase2_type.method = EAP_TYPE_NONE;
;;;177    
;;;178    	if (eap_peer_tls_ssl_init(sm, &data->ssl, config)) {
;;;179    		wpa_printf(MSG_INFO, "EAP-FAST: Failed to initialize SSL.");
;;;180    		eap_fast_deinit(sm, data);
;;;181    		return NULL;
;;;182    	}
;;;183    
;;;184    	if (tls_connection_set_session_ticket_cb(sm->ssl_ctx, data->ssl.conn,
;;;185    						 eap_fast_session_ticket_cb,
;;;186    						 data) < 0) {
;;;187    		wpa_printf(MSG_INFO, "EAP-FAST: Failed to set SessionTicket "
;;;188    			   "callback");
;;;189    		eap_fast_deinit(sm, data);
;;;190    		return NULL;
;;;191    	}
;;;192    
;;;193    	/*
;;;194    	 * The local RADIUS server in a Cisco AP does not seem to like empty
;;;195    	 * fragments before data, so disable that workaround for CBC.
;;;196    	 * TODO: consider making this configurable
;;;197    	 */
;;;198    	if (tls_connection_enable_workaround(sm->ssl_ctx, data->ssl.conn)) {
;;;199    		wpa_printf(MSG_DEBUG, "EAP-FAST: Failed to enable TLS "
;;;200    			   "workarounds");
;;;201    	}
;;;202    
;;;203    	if (data->use_pac_binary_format &&
;;;204    	    eap_fast_load_pac_bin(sm, &data->pac, config->pac_file) < 0) {
;;;205    		eap_fast_deinit(sm, data);
;;;206    		return NULL;
;;;207    	}
;;;208    
;;;209    	if (!data->use_pac_binary_format &&
;;;210    	    eap_fast_load_pac(sm, &data->pac, config->pac_file) < 0) {
;;;211    		eap_fast_deinit(sm, data);
;;;212    		return NULL;
;;;213    	}
;;;214    	eap_fast_pac_list_truncate(data->pac, data->max_pac_list_len);
;;;215    
;;;216    	if (data->pac == NULL && !data->provisioning_allowed) {
;;;217    		wpa_printf(MSG_INFO, "EAP-FAST: No PAC configured and "
;;;218    			   "provisioning disabled");
;;;219    		eap_fast_deinit(sm, data);
;;;220    		return NULL;
;;;221    	}
;;;222    
;;;223    	return data;
;;;224    }
00001a  bd70              POP      {r4-r6,pc}
                  |L16.28|
00001c  2001              MOVS     r0,#1                 ;159
00001e  62e0              STR      r0,[r4,#0x2c]         ;159
000020  200a              MOVS     r0,#0xa               ;160
000022  f8c400f0          STR      r0,[r4,#0xf0]         ;160
000026  b16d              CBZ      r5,|L16.68|
000028  6de8              LDR      r0,[r5,#0x5c]         ;162
00002a  b158              CBZ      r0,|L16.68|
00002c  4620              MOV      r0,r4                 ;163
00002e  6de9              LDR      r1,[r5,#0x5c]         ;163
000030  f7fffffe          BL       eap_fast_parse_phase1
000034  2800              CMP      r0,#0                 ;163
000036  da05              BGE      |L16.68|
000038  4621              MOV      r1,r4                 ;164
00003a  4630              MOV      r0,r6                 ;164
00003c  f7fffffe          BL       eap_fast_deinit
000040  2000              MOVS     r0,#0                 ;165
000042  e7ea              B        |L16.26|
                  |L16.68|
000044  f1040348          ADD      r3,r4,#0x48           ;168
000048  1f1a              SUBS     r2,r3,#4              ;168
00004a  a13c              ADR      r1,|L16.316|
00004c  4628              MOV      r0,r5                 ;168
00004e  f7fffffe          BL       eap_peer_select_phase2_methods
000052  2800              CMP      r0,#0                 ;168
000054  da05              BGE      |L16.98|
000056  4621              MOV      r1,r4                 ;171
000058  4630              MOV      r0,r6                 ;171
00005a  f7fffffe          BL       eap_fast_deinit
00005e  2000              MOVS     r0,#0                 ;172
000060  e7db              B        |L16.26|
                  |L16.98|
000062  2000              MOVS     r0,#0                 ;175
000064  63e0              STR      r0,[r4,#0x3c]         ;175
000066  2100              MOVS     r1,#0                 ;176
000068  6421              STR      r1,[r4,#0x40]         ;176
00006a  462a              MOV      r2,r5                 ;178
00006c  4621              MOV      r1,r4                 ;178
00006e  4630              MOV      r0,r6                 ;178
000070  f7fffffe          BL       eap_peer_tls_ssl_init
000074  b148              CBZ      r0,|L16.138|
000076  a133              ADR      r1,|L16.324|
000078  2000              MOVS     r0,#0                 ;179
00007a  f7fffffe          BL       wpa_printf
00007e  4621              MOV      r1,r4                 ;180
000080  4630              MOV      r0,r6                 ;180
000082  f7fffffe          BL       eap_fast_deinit
000086  2000              MOVS     r0,#0                 ;181
000088  e7c7              B        |L16.26|
                  |L16.138|
00008a  6821              LDR      r1,[r4,#0]            ;184
00008c  4623              MOV      r3,r4                 ;184
00008e  4a36              LDR      r2,|L16.360|
000090  f8d60098          LDR      r0,[r6,#0x98]         ;184
000094  f7fffffe          BL       tls_connection_set_session_ticket_cb
000098  2800              CMP      r0,#0                 ;184
00009a  da09              BGE      |L16.176|
00009c  a133              ADR      r1,|L16.364|
00009e  2000              MOVS     r0,#0                 ;187
0000a0  f7fffffe          BL       wpa_printf
0000a4  4621              MOV      r1,r4                 ;189
0000a6  4630              MOV      r0,r6                 ;189
0000a8  f7fffffe          BL       eap_fast_deinit
0000ac  2000              MOVS     r0,#0                 ;190
0000ae  e7b4              B        |L16.26|
                  |L16.176|
0000b0  6821              LDR      r1,[r4,#0]            ;198
0000b2  f8d60098          LDR      r0,[r6,#0x98]         ;198
0000b6  f7fffffe          BL       tls_connection_enable_workaround
0000ba  b118              CBZ      r0,|L16.196|
0000bc  a137              ADR      r1,|L16.412|
0000be  2000              MOVS     r0,#0                 ;199
0000c0  f7fffffe          BL       wpa_printf
                  |L16.196|
0000c4  f8d400f4          LDR      r0,[r4,#0xf4]         ;203
0000c8  b170              CBZ      r0,|L16.232|
0000ca  f10401e8          ADD      r1,r4,#0xe8           ;204
0000ce  4630              MOV      r0,r6                 ;204
0000d0  f8d520bc          LDR      r2,[r5,#0xbc]         ;204
0000d4  f7fffffe          BL       eap_fast_load_pac_bin
0000d8  2800              CMP      r0,#0                 ;204
0000da  da05              BGE      |L16.232|
0000dc  4621              MOV      r1,r4                 ;205
0000de  4630              MOV      r0,r6                 ;205
0000e0  f7fffffe          BL       eap_fast_deinit
0000e4  2000              MOVS     r0,#0                 ;206
0000e6  e798              B        |L16.26|
                  |L16.232|
0000e8  f8d400f4          LDR      r0,[r4,#0xf4]         ;209
0000ec  b970              CBNZ     r0,|L16.268|
0000ee  f10401e8          ADD      r1,r4,#0xe8           ;210
0000f2  4630              MOV      r0,r6                 ;210
0000f4  f8d520bc          LDR      r2,[r5,#0xbc]         ;210
0000f8  f7fffffe          BL       eap_fast_load_pac
0000fc  2800              CMP      r0,#0                 ;210
0000fe  da05              BGE      |L16.268|
000100  4621              MOV      r1,r4                 ;211
000102  4630              MOV      r0,r6                 ;211
000104  f7fffffe          BL       eap_fast_deinit
000108  2000              MOVS     r0,#0                 ;212
00010a  e786              B        |L16.26|
                  |L16.268|
00010c  f10404e8          ADD      r4,r4,#0xe8           ;214
000110  68a1              LDR      r1,[r4,#8]            ;214
000112  6820              LDR      r0,[r4,#0]            ;214
000114  f7fffffe          BL       eap_fast_pac_list_truncate
000118  f85409e8          LDR      r0,[r4],#-0xe8        ;216
00011c  b958              CBNZ     r0,|L16.310|
00011e  6d60              LDR      r0,[r4,#0x54]         ;216
000120  b948              CBNZ     r0,|L16.310|
000122  a129              ADR      r1,|L16.456|
000124  2000              MOVS     r0,#0                 ;217
000126  f7fffffe          BL       wpa_printf
00012a  4621              MOV      r1,r4                 ;219
00012c  4630              MOV      r0,r6                 ;219
00012e  f7fffffe          BL       eap_fast_deinit
000132  2000              MOVS     r0,#0                 ;220
000134  e771              B        |L16.26|
                  |L16.310|
000136  4620              MOV      r0,r4                 ;223
000138  e76f              B        |L16.26|
;;;225    
                          ENDP

00013a  0000              DCW      0x0000
                  |L16.316|
00013c  61757468          DCB      "auth=",0
000140  3d00    
000142  00                DCB      0
000143  00                DCB      0
                  |L16.324|
000144  4541502d          DCB      "EAP-FAST: Failed to initialize SSL.",0
000148  46415354
00014c  3a204661
000150  696c6564
000154  20746f20
000158  696e6974
00015c  69616c69
000160  7a652053
000164  534c2e00
                  |L16.360|
                          DCD      eap_fast_session_ticket_cb
                  |L16.364|
00016c  4541502d          DCB      "EAP-FAST: Failed to set SessionTicket callback",0
000170  46415354
000174  3a204661
000178  696c6564
00017c  20746f20
000180  73657420
000184  53657373
000188  696f6e54
00018c  69636b65
000190  74206361
000194  6c6c6261
000198  636b00  
00019b  00                DCB      0
                  |L16.412|
00019c  4541502d          DCB      "EAP-FAST: Failed to enable TLS workarounds",0
0001a0  46415354
0001a4  3a204661
0001a8  696c6564
0001ac  20746f20
0001b0  656e6162
0001b4  6c652054
0001b8  4c532077
0001bc  6f726b61
0001c0  726f756e
0001c4  647300  
0001c7  00                DCB      0
                  |L16.456|
0001c8  4541502d          DCB      "EAP-FAST: No PAC configured and provisioning disabled",0
0001cc  46415354
0001d0  3a204e6f
0001d4  20504143
0001d8  20636f6e
0001dc  66696775
0001e0  72656420
0001e4  616e6420
0001e8  70726f76
0001ec  6973696f
0001f0  6e696e67
0001f4  20646973
0001f8  61626c65
0001fc  6400    
0001fe  00                DCB      0
0001ff  00                DCB      0

                          AREA ||i.eap_fast_init_phase2_method||, CODE, READONLY, ALIGN=1

                  eap_fast_init_phase2_method PROC
;;;331    
;;;332    static int eap_fast_init_phase2_method(struct eap_sm *sm,
000000  b570              PUSH     {r4-r6,lr}
;;;333    				       struct eap_fast_data *data)
;;;334    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;335    	data->phase2_method =
000006  6c22              LDR      r2,[r4,#0x40]
000008  b2d1              UXTB     r1,r2
00000a  6be0              LDR      r0,[r4,#0x3c]
00000c  f7fffffe          BL       eap_peer_get_eap_method
000010  6320              STR      r0,[r4,#0x30]
;;;336    		eap_peer_get_eap_method(data->phase2_type.vendor,
;;;337    					data->phase2_type.method);
;;;338    	if (data->phase2_method == NULL)
000012  6b20              LDR      r0,[r4,#0x30]
000014  b910              CBNZ     r0,|L17.28|
;;;339    		return -1;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L17.26|
;;;340    
;;;341    	if (data->key_block_p) {
;;;342    		sm->auth_challenge = data->key_block_p->server_challenge;
;;;343    		sm->peer_challenge = data->key_block_p->client_challenge;
;;;344    	}
;;;345    	sm->init_phase2 = 1;
;;;346    	data->phase2_priv = data->phase2_method->init(sm);
;;;347    	sm->init_phase2 = 0;
;;;348    	sm->auth_challenge = NULL;
;;;349    	sm->peer_challenge = NULL;
;;;350    
;;;351    	return data->phase2_priv == NULL ? -1 : 0;
;;;352    }
00001a  bd70              POP      {r4-r6,pc}
                  |L17.28|
00001c  6d20              LDR      r0,[r4,#0x50]         ;341
00001e  b138              CBZ      r0,|L17.48|
000020  6d20              LDR      r0,[r4,#0x50]         ;342
000022  3028              ADDS     r0,r0,#0x28           ;342
000024  f8c500a4          STR      r0,[r5,#0xa4]         ;342
000028  6d20              LDR      r0,[r4,#0x50]         ;343
00002a  3038              ADDS     r0,r0,#0x38           ;343
00002c  f8c500a0          STR      r0,[r5,#0xa0]         ;343
                  |L17.48|
000030  2001              MOVS     r0,#1                 ;345
000032  65e8              STR      r0,[r5,#0x5c]         ;345
000034  6b20              LDR      r0,[r4,#0x30]         ;346
000036  68c1              LDR      r1,[r0,#0xc]          ;346
000038  4628              MOV      r0,r5                 ;346
00003a  4788              BLX      r1                    ;346
00003c  6360              STR      r0,[r4,#0x34]         ;346
00003e  2000              MOVS     r0,#0                 ;347
000040  65e8              STR      r0,[r5,#0x5c]         ;347
000042  f8c500a4          STR      r0,[r5,#0xa4]         ;348
000046  f8c500a0          STR      r0,[r5,#0xa0]         ;349
00004a  6b60              LDR      r0,[r4,#0x34]         ;351
00004c  b910              CBNZ     r0,|L17.84|
00004e  f04f30ff          MOV      r0,#0xffffffff        ;351
000052  e7e2              B        |L17.26|
                  |L17.84|
000054  2000              MOVS     r0,#0                 ;351
000056  e7e0              B        |L17.26|
;;;353    
                          ENDP


                          AREA ||i.eap_fast_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_fast_isKeyAvailable PROC
;;;1639   
;;;1640   static Boolean eap_fast_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;1641   {
;;;1642   	struct eap_fast_data *data = priv;
000002  460a              MOV      r2,r1
;;;1643   	return data->success;
000004  f8d200e4          LDR      r0,[r2,#0xe4]
;;;1644   }
000008  4770              BX       lr
;;;1645   
                          ENDP


                          AREA ||i.eap_fast_pac_request||, CODE, READONLY, ALIGN=1

                  eap_fast_pac_request PROC
;;;1121   
;;;1122   static struct wpabuf * eap_fast_pac_request(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1123   {
;;;1124   	struct wpabuf *tmp;
;;;1125   	u8 *pos, *pos2;
;;;1126   
;;;1127   	tmp = wpabuf_alloc(sizeof(struct eap_tlv_hdr) +
000002  2010              MOVS     r0,#0x10
000004  f7fffffe          BL       wpabuf_alloc
000008  4605              MOV      r5,r0
;;;1128   			   sizeof(struct eap_tlv_request_action_tlv) +
;;;1129   			   sizeof(struct eap_tlv_pac_type_tlv));
;;;1130   	if (tmp == NULL)
00000a  b90d              CBNZ     r5,|L19.16|
;;;1131   		return NULL;
00000c  2000              MOVS     r0,#0
                  |L19.14|
;;;1132   
;;;1133   	pos = wpabuf_put(tmp, 0);
;;;1134   	pos2 = eap_fast_write_pac_request(pos, PAC_TYPE_TUNNEL_PAC);
;;;1135   	wpabuf_put(tmp, pos2 - pos);
;;;1136   	return tmp;
;;;1137   }
00000e  bd70              POP      {r4-r6,pc}
                  |L19.16|
000010  2100              MOVS     r1,#0                 ;1133
000012  4628              MOV      r0,r5                 ;1133
000014  f7fffffe          BL       wpabuf_put
000018  4604              MOV      r4,r0                 ;1133
00001a  2101              MOVS     r1,#1                 ;1134
00001c  4620              MOV      r0,r4                 ;1134
00001e  f7fffffe          BL       eap_fast_write_pac_request
000022  4606              MOV      r6,r0                 ;1134
000024  1b31              SUBS     r1,r6,r4              ;1135
000026  4628              MOV      r0,r5                 ;1135
000028  f7fffffe          BL       wpabuf_put
00002c  4628              MOV      r0,r5                 ;1136
00002e  e7ee              B        |L19.14|
;;;1138   
                          ENDP


                          AREA ||i.eap_fast_parse_decrypted||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_decrypted PROC
;;;1050   
;;;1051   static int eap_fast_parse_decrypted(struct wpabuf *decrypted,
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1052   				    struct eap_fast_tlv_parse *tlv,
;;;1053   				    struct wpabuf **resp)
;;;1054   {
000004  b082              SUB      sp,sp,#8
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
;;;1055   	int mandatory, tlv_type, len, res;
;;;1056   	u8 *pos, *end;
;;;1057   
;;;1058   	os_memset(tlv, 0, sizeof(*tlv));
00000a  2224              MOVS     r2,#0x24
00000c  2100              MOVS     r1,#0
00000e  4648              MOV      r0,r9
000010  f7fffffe          BL       os_memset
;;;1059   
;;;1060   	/* Parse TLVs from the decrypted Phase 2 data */
;;;1061   	pos = wpabuf_mhead(decrypted);
000014  9802              LDR      r0,[sp,#8]
000016  f7fffffe          BL       wpabuf_mhead
00001a  4604              MOV      r4,r0
;;;1062   	end = pos + wpabuf_len(decrypted);
00001c  9802              LDR      r0,[sp,#8]
00001e  f7fffffe          BL       wpabuf_len
000022  eb000b04          ADD      r11,r0,r4
;;;1063   	while (pos + 4 < end) {
000026  e044              B        |L20.178|
                  |L20.40|
;;;1064   		mandatory = pos[0] & 0x80;
000028  7820              LDRB     r0,[r4,#0]
00002a  f0000780          AND      r7,r0,#0x80
;;;1065   		tlv_type = WPA_GET_BE16(pos) & 0x3fff;
00002e  7860              LDRB     r0,[r4,#1]
000030  7821              LDRB     r1,[r4,#0]
000032  ea402001          ORR      r0,r0,r1,LSL #8
000036  f3c0080d          UBFX     r8,r0,#0,#14
;;;1066   		pos += 2;
00003a  1ca4              ADDS     r4,r4,#2
;;;1067   		len = WPA_GET_BE16(pos);
00003c  7860              LDRB     r0,[r4,#1]
00003e  7821              LDRB     r1,[r4,#0]
000040  ea402501          ORR      r5,r0,r1,LSL #8
;;;1068   		pos += 2;
000044  1ca4              ADDS     r4,r4,#2
;;;1069   		if (pos + len > end) {
000046  1960              ADDS     r0,r4,r5
000048  4558              CMP      r0,r11
00004a  d908              BLS      |L20.94|
;;;1070   			wpa_printf(MSG_INFO, "EAP-FAST: TLV overflow");
00004c  a11c              ADR      r1,|L20.192|
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       wpa_printf
;;;1071   			return -1;
000054  f04f30ff          MOV      r0,#0xffffffff
                  |L20.88|
;;;1072   		}
;;;1073   		wpa_printf(MSG_DEBUG, "EAP-FAST: Received Phase 2: "
;;;1074   			   "TLV type %d length %d%s",
;;;1075   			   tlv_type, len, mandatory ? " (mandatory)" : "");
;;;1076   
;;;1077   		res = eap_fast_parse_tlv(tlv, tlv_type, pos, len);
;;;1078   		if (res == -2)
;;;1079   			break;
;;;1080   		if (res < 0) {
;;;1081   			if (mandatory) {
;;;1082   				wpa_printf(MSG_DEBUG, "EAP-FAST: Nak unknown "
;;;1083   					   "mandatory TLV type %d", tlv_type);
;;;1084   				*resp = eap_fast_tlv_nak(0, tlv_type);
;;;1085   				break;
;;;1086   			} else {
;;;1087   				wpa_printf(MSG_DEBUG, "EAP-FAST: ignored "
;;;1088   					   "unknown optional TLV type %d",
;;;1089   					   tlv_type);
;;;1090   			}
;;;1091   		}
;;;1092   
;;;1093   		pos += len;
;;;1094   	}
;;;1095   
;;;1096   	return 0;
;;;1097   }
000058  b005              ADD      sp,sp,#0x14
00005a  e8bd8ff0          POP      {r4-r11,pc}
                  |L20.94|
00005e  b10f              CBZ      r7,|L20.100|
000060  a31d              ADR      r3,|L20.216|
000062  e000              B        |L20.102|
                  |L20.100|
000064  a31f              ADR      r3,|L20.228|
                  |L20.102|
000066  9300              STR      r3,[sp,#0]            ;1075
000068  462b              MOV      r3,r5                 ;1075
00006a  4642              MOV      r2,r8                 ;1075
00006c  a11e              ADR      r1,|L20.232|
00006e  2000              MOVS     r0,#0                 ;1075
000070  f7fffffe          BL       wpa_printf
000074  462b              MOV      r3,r5                 ;1077
000076  4622              MOV      r2,r4                 ;1077
000078  4641              MOV      r1,r8                 ;1077
00007a  4648              MOV      r0,r9                 ;1077
00007c  f7fffffe          BL       eap_fast_parse_tlv
000080  4606              MOV      r6,r0                 ;1077
000082  1cb0              ADDS     r0,r6,#2              ;1078
000084  d100              BNE      |L20.136|
000086  e017              B        |L20.184|
                  |L20.136|
000088  2e00              CMP      r6,#0                 ;1080
00008a  da11              BGE      |L20.176|
00008c  b15f              CBZ      r7,|L20.166|
00008e  4642              MOV      r2,r8                 ;1082
000090  a122              ADR      r1,|L20.284|
000092  2000              MOVS     r0,#0                 ;1082
000094  f7fffffe          BL       wpa_printf
000098  4641              MOV      r1,r8                 ;1084
00009a  2000              MOVS     r0,#0                 ;1084
00009c  f7fffffe          BL       eap_fast_tlv_nak
0000a0  f8ca0000          STR      r0,[r10,#0]           ;1084
0000a4  e008              B        |L20.184|
                  |L20.166|
0000a6  4642              MOV      r2,r8                 ;1087
0000a8  a127              ADR      r1,|L20.328|
0000aa  2000              MOVS     r0,#0                 ;1087
0000ac  f7fffffe          BL       wpa_printf
                  |L20.176|
0000b0  442c              ADD      r4,r4,r5              ;1093
                  |L20.178|
0000b2  1d20              ADDS     r0,r4,#4              ;1063
0000b4  4558              CMP      r0,r11                ;1063
0000b6  d3b7              BCC      |L20.40|
                  |L20.184|
0000b8  bf00              NOP                            ;1079
0000ba  2000              MOVS     r0,#0                 ;1096
0000bc  e7cc              B        |L20.88|
;;;1098   
                          ENDP

0000be  0000              DCW      0x0000
                  |L20.192|
0000c0  4541502d          DCB      "EAP-FAST: TLV overflow",0
0000c4  46415354
0000c8  3a20544c
0000cc  56206f76
0000d0  6572666c
0000d4  6f7700  
0000d7  00                DCB      0
                  |L20.216|
0000d8  20286d61          DCB      " (mandatory)"
0000dc  6e646174
0000e0  6f727929
                  |L20.228|
0000e4  00                DCB      0
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L20.232|
0000e8  4541502d          DCB      "EAP-FAST: Received Phase 2: TLV type %d length %d%s",0
0000ec  46415354
0000f0  3a205265
0000f4  63656976
0000f8  65642050
0000fc  68617365
000100  20323a20
000104  544c5620
000108  74797065
00010c  20256420
000110  6c656e67
000114  74682025
000118  64257300
                  |L20.284|
00011c  4541502d          DCB      "EAP-FAST: Nak unknown mandatory TLV type %d",0
000120  46415354
000124  3a204e61
000128  6b20756e
00012c  6b6e6f77
000130  6e206d61
000134  6e646174
000138  6f727920
00013c  544c5620
000140  74797065
000144  20256400
                  |L20.328|
000148  4541502d          DCB      "EAP-FAST: ignored unknown optional TLV type %d",0
00014c  46415354
000150  3a206967
000154  6e6f7265
000158  6420756e
00015c  6b6e6f77
000160  6e206f70
000164  74696f6e
000168  616c2054
00016c  4c562074
000170  79706520
000174  256400  
000177  00                DCB      0

                          AREA ||i.eap_fast_parse_pac_info||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_pac_info PROC
;;;873    
;;;874    static int eap_fast_parse_pac_info(struct eap_fast_pac *entry, int type,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;875    				   u8 *pos, size_t len)
;;;876    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
;;;877    	u16 pac_type;
;;;878    	u32 lifetime;
;;;879    	struct os_time now;
;;;880    
;;;881    	switch (type & 0x7fff) {
00000c  f3c8000e          UBFX     r0,r8,#0,#15
000010  1ec0              SUBS     r0,r0,#3
000012  2808              CMP      r0,#8
000014  d271              BCS      |L21.250|
000016  e8dff000          TBB      [pc,r0]
00001a  042a              DCB      0x04,0x2a
00001c  33703c70          DCB      0x33,0x70,0x3c,0x70
000020  7045              DCB      0x70,0x45
;;;882    	case PAC_TYPE_CRED_LIFETIME:
;;;883    		if (len != 4) {
000022  2e04              CMP      r6,#4
000024  d008              BEQ      |L21.56|
;;;884    			wpa_hexdump(MSG_DEBUG, "EAP-FAST: PAC-Info - "
000026  4633              MOV      r3,r6
000028  4622              MOV      r2,r4
00002a  a138              ADR      r1,|L21.268|
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       wpa_hexdump
;;;885    				    "Invalid CRED_LIFETIME length - ignored",
;;;886    				    pos, len);
;;;887    			return 0;
000032  2000              MOVS     r0,#0
                  |L21.52|
;;;888    		}
;;;889    
;;;890    		/*
;;;891    		 * This is not currently saved separately in PAC files since
;;;892    		 * the server can automatically initiate PAC update when
;;;893    		 * needed. Anyway, the information is available from PAC-Info
;;;894    		 * dump if it is needed for something in the future.
;;;895    		 */
;;;896    		lifetime = WPA_GET_BE32(pos);
;;;897    		os_get_time(&now);
;;;898    		wpa_printf(MSG_DEBUG, "EAP-FAST: PAC-Info - CRED_LIFETIME %d "
;;;899    			   "(%d days)",
;;;900    			   lifetime, (lifetime - (u32) now.sec) / 86400);
;;;901    		break;
;;;902    	case PAC_TYPE_A_ID:
;;;903    		wpa_hexdump_ascii(MSG_DEBUG, "EAP-FAST: PAC-Info - A-ID",
;;;904    				  pos, len);
;;;905    		entry->a_id = pos;
;;;906    		entry->a_id_len = len;
;;;907    		break;
;;;908    	case PAC_TYPE_I_ID:
;;;909    		wpa_hexdump_ascii(MSG_DEBUG, "EAP-FAST: PAC-Info - I-ID",
;;;910    				  pos, len);
;;;911    		entry->i_id = pos;
;;;912    		entry->i_id_len = len;
;;;913    		break;
;;;914    	case PAC_TYPE_A_ID_INFO:
;;;915    		wpa_hexdump_ascii(MSG_DEBUG, "EAP-FAST: PAC-Info - A-ID-Info",
;;;916    				  pos, len);
;;;917    		entry->a_id_info = pos;
;;;918    		entry->a_id_info_len = len;
;;;919    		break;
;;;920    	case PAC_TYPE_PAC_TYPE:
;;;921    		/* RFC 5422, Section 4.2.6 - PAC-Type TLV */
;;;922    		if (len != 2) {
;;;923    			wpa_printf(MSG_INFO, "EAP-FAST: Invalid PAC-Type "
;;;924    				   "length %lu (expected 2)",
;;;925    				   (unsigned long) len);
;;;926    			wpa_hexdump_ascii(MSG_DEBUG,
;;;927    					  "EAP-FAST: PAC-Info - PAC-Type",
;;;928    					  pos, len);
;;;929    			return -1;
;;;930    		}
;;;931    		pac_type = WPA_GET_BE16(pos);
;;;932    		if (pac_type != PAC_TYPE_TUNNEL_PAC &&
;;;933    		    pac_type != PAC_TYPE_USER_AUTHORIZATION &&
;;;934    		    pac_type != PAC_TYPE_MACHINE_AUTHENTICATION) {
;;;935    			wpa_printf(MSG_INFO, "EAP-FAST: Unsupported PAC Type "
;;;936    				   "%d", pac_type);
;;;937    			return -1;
;;;938    		}
;;;939    
;;;940    		wpa_printf(MSG_DEBUG, "EAP-FAST: PAC-Info - PAC-Type %d",
;;;941    			   pac_type);
;;;942    		entry->pac_type = pac_type;
;;;943    		break;
;;;944    	default:
;;;945    		wpa_printf(MSG_DEBUG, "EAP-FAST: Ignored unknown PAC-Info "
;;;946    			   "type %d", type);
;;;947    		break;
;;;948    	}
;;;949    
;;;950    	return 0;
;;;951    }
000034  e8bd87fc          POP      {r2-r10,pc}
                  |L21.56|
000038  7820              LDRB     r0,[r4,#0]            ;896
00003a  0600              LSLS     r0,r0,#24             ;896
00003c  7861              LDRB     r1,[r4,#1]            ;896
00003e  ea404001          ORR      r0,r0,r1,LSL #16      ;896
000042  78a1              LDRB     r1,[r4,#2]            ;896
000044  ea402001          ORR      r0,r0,r1,LSL #8       ;896
000048  78e1              LDRB     r1,[r4,#3]            ;896
00004a  ea400901          ORR      r9,r0,r1              ;896
00004e  4668              MOV      r0,sp                 ;897
000050  f7fffffe          BL       os_get_time
000054  9800              LDR      r0,[sp,#0]            ;898
000056  eba90000          SUB      r0,r9,r0              ;898
00005a  493b              LDR      r1,|L21.328|
00005c  fbb0faf1          UDIV     r10,r0,r1             ;898
000060  4653              MOV      r3,r10                ;898
000062  464a              MOV      r2,r9                 ;898
000064  a139              ADR      r1,|L21.332|
000066  2000              MOVS     r0,#0                 ;898
000068  f7fffffe          BL       wpa_printf
00006c  e04b              B        |L21.262|
00006e  4633              MOV      r3,r6                 ;903
000070  4622              MOV      r2,r4                 ;903
000072  a142              ADR      r1,|L21.380|
000074  2000              MOVS     r0,#0                 ;903
000076  f7fffffe          BL       wpa_hexdump_ascii
00007a  636c              STR      r4,[r5,#0x34]         ;905
00007c  63ae              STR      r6,[r5,#0x38]         ;906
00007e  e042              B        |L21.262|
000080  4633              MOV      r3,r6                 ;909
000082  4622              MOV      r2,r4                 ;909
000084  a144              ADR      r1,|L21.408|
000086  2000              MOVS     r0,#0                 ;909
000088  f7fffffe          BL       wpa_hexdump_ascii
00008c  63ec              STR      r4,[r5,#0x3c]         ;911
00008e  642e              STR      r6,[r5,#0x40]         ;912
000090  e039              B        |L21.262|
000092  4633              MOV      r3,r6                 ;915
000094  4622              MOV      r2,r4                 ;915
000096  a147              ADR      r1,|L21.436|
000098  2000              MOVS     r0,#0                 ;915
00009a  f7fffffe          BL       wpa_hexdump_ascii
00009e  646c              STR      r4,[r5,#0x44]         ;917
0000a0  64ae              STR      r6,[r5,#0x48]         ;918
0000a2  e030              B        |L21.262|
0000a4  2e02              CMP      r6,#2                 ;922
0000a6  d00d              BEQ      |L21.196|
0000a8  4632              MOV      r2,r6                 ;923
0000aa  a14a              ADR      r1,|L21.468|
0000ac  2000              MOVS     r0,#0                 ;923
0000ae  f7fffffe          BL       wpa_printf
0000b2  4633              MOV      r3,r6                 ;926
0000b4  4622              MOV      r2,r4                 ;926
0000b6  a154              ADR      r1,|L21.520|
0000b8  2000              MOVS     r0,#0                 ;926
0000ba  f7fffffe          BL       wpa_hexdump_ascii
0000be  f04f30ff          MOV      r0,#0xffffffff        ;929
0000c2  e7b7              B        |L21.52|
                  |L21.196|
0000c4  7860              LDRB     r0,[r4,#1]            ;931
0000c6  7821              LDRB     r1,[r4,#0]            ;931
0000c8  ea402701          ORR      r7,r0,r1,LSL #8       ;931
0000cc  2f01              CMP      r7,#1                 ;932
0000ce  d00b              BEQ      |L21.232|
0000d0  2f03              CMP      r7,#3                 ;933
0000d2  d009              BEQ      |L21.232|
0000d4  2f02              CMP      r7,#2                 ;934
0000d6  d007              BEQ      |L21.232|
0000d8  463a              MOV      r2,r7                 ;935
0000da  a153              ADR      r1,|L21.552|
0000dc  2000              MOVS     r0,#0                 ;935
0000de  f7fffffe          BL       wpa_printf
0000e2  f04f30ff          MOV      r0,#0xffffffff        ;937
0000e6  e7a5              B        |L21.52|
                  |L21.232|
0000e8  463a              MOV      r2,r7                 ;940
0000ea  a158              ADR      r1,|L21.588|
0000ec  2000              MOVS     r0,#0                 ;940
0000ee  f7fffffe          BL       wpa_printf
0000f2  f8a5704c          STRH     r7,[r5,#0x4c]         ;942
0000f6  e006              B        |L21.262|
0000f8  e7ff              B        |L21.250|
                  |L21.250|
0000fa  4642              MOV      r2,r8                 ;945
0000fc  a15c              ADR      r1,|L21.624|
0000fe  2000              MOVS     r0,#0                 ;945
000100  f7fffffe          BL       wpa_printf
000104  bf00              NOP                            ;947
                  |L21.262|
000106  bf00              NOP                            ;901
000108  2000              MOVS     r0,#0                 ;950
00010a  e793              B        |L21.52|
;;;952    
                          ENDP

                  |L21.268|
00010c  4541502d          DCB      "EAP-FAST: PAC-Info - Invalid CRED_LIFETIME length - ign"
000110  46415354
000114  3a205041
000118  432d496e
00011c  666f202d
000120  20496e76
000124  616c6964
000128  20435245
00012c  445f4c49
000130  46455449
000134  4d45206c
000138  656e6774
00013c  68202d20
000140  69676e  
000143  6f726564          DCB      "ored",0
000147  00      
                  |L21.328|
                          DCD      0x00015180
                  |L21.332|
00014c  4541502d          DCB      "EAP-FAST: PAC-Info - CRED_LIFETIME %d (%d days)",0
000150  46415354
000154  3a205041
000158  432d496e
00015c  666f202d
000160  20435245
000164  445f4c49
000168  46455449
00016c  4d452025
000170  64202825
000174  64206461
000178  79732900
                  |L21.380|
00017c  4541502d          DCB      "EAP-FAST: PAC-Info - A-ID",0
000180  46415354
000184  3a205041
000188  432d496e
00018c  666f202d
000190  20412d49
000194  4400    
000196  00                DCB      0
000197  00                DCB      0
                  |L21.408|
000198  4541502d          DCB      "EAP-FAST: PAC-Info - I-ID",0
00019c  46415354
0001a0  3a205041
0001a4  432d496e
0001a8  666f202d
0001ac  20492d49
0001b0  4400    
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L21.436|
0001b4  4541502d          DCB      "EAP-FAST: PAC-Info - A-ID-Info",0
0001b8  46415354
0001bc  3a205041
0001c0  432d496e
0001c4  666f202d
0001c8  20412d49
0001cc  442d496e
0001d0  666f00  
0001d3  00                DCB      0
                  |L21.468|
0001d4  4541502d          DCB      "EAP-FAST: Invalid PAC-Type length %lu (expected 2)",0
0001d8  46415354
0001dc  3a20496e
0001e0  76616c69
0001e4  64205041
0001e8  432d5479
0001ec  7065206c
0001f0  656e6774
0001f4  6820256c
0001f8  75202865
0001fc  78706563
000200  74656420
000204  322900  
000207  00                DCB      0
                  |L21.520|
000208  4541502d          DCB      "EAP-FAST: PAC-Info - PAC-Type",0
00020c  46415354
000210  3a205041
000214  432d496e
000218  666f202d
00021c  20504143
000220  2d547970
000224  6500    
000226  00                DCB      0
000227  00                DCB      0
                  |L21.552|
000228  4541502d          DCB      "EAP-FAST: Unsupported PAC Type %d",0
00022c  46415354
000230  3a20556e
000234  73757070
000238  6f727465
00023c  64205041
000240  43205479
000244  70652025
000248  6400    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L21.588|
00024c  4541502d          DCB      "EAP-FAST: PAC-Info - PAC-Type %d",0
000250  46415354
000254  3a205041
000258  432d496e
00025c  666f202d
000260  20504143
000264  2d547970
000268  65202564
00026c  00      
00026d  00                DCB      0
00026e  00                DCB      0
00026f  00                DCB      0
                  |L21.624|
000270  4541502d          DCB      "EAP-FAST: Ignored unknown PAC-Info type %d",0
000274  46415354
000278  3a204967
00027c  6e6f7265
000280  6420756e
000284  6b6e6f77
000288  6e205041
00028c  432d496e
000290  666f2074
000294  79706520
000298  256400  
00029b  00                DCB      0

                          AREA ||i.eap_fast_parse_pac_tlv||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_pac_tlv PROC
;;;800    
;;;801    static void eap_fast_parse_pac_tlv(struct eap_fast_pac *entry, int type,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;802    				   u8 *pos, size_t len, int *pac_key_found)
;;;803    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;804    	switch (type & 0x7fff) {
000010  f3c7000e          UBFX     r0,r7,#0,#15
000014  2801              CMP      r0,#1
000016  d004              BEQ      |L22.34|
000018  2802              CMP      r0,#2
00001a  d019              BEQ      |L22.80|
00001c  2809              CMP      r0,#9
00001e  d129              BNE      |L22.116|
000020  e01f              B        |L22.98|
                  |L22.34|
;;;805    	case PAC_TYPE_PAC_KEY:
;;;806    		wpa_hexdump_key(MSG_DEBUG, "EAP-FAST: PAC-Key", pos, len);
000022  462b              MOV      r3,r5
000024  4632              MOV      r2,r6
000026  a118              ADR      r1,|L22.136|
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       wpa_hexdump_key
;;;807    		if (len != EAP_FAST_PAC_KEY_LEN) {
00002e  2d20              CMP      r5,#0x20
000030  d005              BEQ      |L22.62|
;;;808    			wpa_printf(MSG_DEBUG, "EAP-FAST: Invalid PAC-Key "
000032  462a              MOV      r2,r5
000034  a119              ADR      r1,|L22.156|
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       wpa_printf
;;;809    				   "length %lu", (unsigned long) len);
;;;810    			break;
00003c  e020              B        |L22.128|
                  |L22.62|
;;;811    		}
;;;812    		*pac_key_found = 1;
00003e  2001              MOVS     r0,#1
000040  f8c80000          STR      r0,[r8,#0]
;;;813    		os_memcpy(entry->pac_key, pos, len);
000044  462a              MOV      r2,r5
000046  4631              MOV      r1,r6
000048  1d20              ADDS     r0,r4,#4
00004a  f7fffffe          BL       os_memcpy
;;;814    		break;
00004e  e017              B        |L22.128|
                  |L22.80|
;;;815    	case PAC_TYPE_PAC_OPAQUE:
;;;816    		wpa_hexdump(MSG_DEBUG, "EAP-FAST: PAC-Opaque", pos, len);
000050  462b              MOV      r3,r5
000052  4632              MOV      r2,r6
000054  a11b              ADR      r1,|L22.196|
000056  2000              MOVS     r0,#0
000058  f7fffffe          BL       wpa_hexdump
;;;817    		entry->pac_opaque = pos;
00005c  6266              STR      r6,[r4,#0x24]
;;;818    		entry->pac_opaque_len = len;
00005e  62a5              STR      r5,[r4,#0x28]
;;;819    		break;
000060  e00e              B        |L22.128|
                  |L22.98|
;;;820    	case PAC_TYPE_PAC_INFO:
;;;821    		wpa_hexdump(MSG_DEBUG, "EAP-FAST: PAC-Info", pos, len);
000062  462b              MOV      r3,r5
000064  4632              MOV      r2,r6
000066  a11d              ADR      r1,|L22.220|
000068  2000              MOVS     r0,#0
00006a  f7fffffe          BL       wpa_hexdump
;;;822    		entry->pac_info = pos;
00006e  62e6              STR      r6,[r4,#0x2c]
;;;823    		entry->pac_info_len = len;
000070  6325              STR      r5,[r4,#0x30]
;;;824    		break;
000072  e005              B        |L22.128|
                  |L22.116|
;;;825    	default:
;;;826    		wpa_printf(MSG_DEBUG, "EAP-FAST: Ignored unknown PAC type %d",
000074  463a              MOV      r2,r7
000076  a11e              ADR      r1,|L22.240|
000078  2000              MOVS     r0,#0
00007a  f7fffffe          BL       wpa_printf
;;;827    			   type);
;;;828    		break;
00007e  bf00              NOP      
                  |L22.128|
000080  bf00              NOP                            ;810
;;;829    	}
;;;830    }
000082  e8bd81f0          POP      {r4-r8,pc}
;;;831    
                          ENDP

000086  0000              DCW      0x0000
                  |L22.136|
000088  4541502d          DCB      "EAP-FAST: PAC-Key",0
00008c  46415354
000090  3a205041
000094  432d4b65
000098  7900    
00009a  00                DCB      0
00009b  00                DCB      0
                  |L22.156|
00009c  4541502d          DCB      "EAP-FAST: Invalid PAC-Key length %lu",0
0000a0  46415354
0000a4  3a20496e
0000a8  76616c69
0000ac  64205041
0000b0  432d4b65
0000b4  79206c65
0000b8  6e677468
0000bc  20256c75
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L22.196|
0000c4  4541502d          DCB      "EAP-FAST: PAC-Opaque",0
0000c8  46415354
0000cc  3a205041
0000d0  432d4f70
0000d4  61717565
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L22.220|
0000dc  4541502d          DCB      "EAP-FAST: PAC-Info",0
0000e0  46415354
0000e4  3a205041
0000e8  432d496e
0000ec  666f00  
0000ef  00                DCB      0
                  |L22.240|
0000f0  4541502d          DCB      "EAP-FAST: Ignored unknown PAC type %d",0
0000f4  46415354
0000f8  3a204967
0000fc  6e6f7265
000100  6420756e
000104  6b6e6f77
000108  6e205041
00010c  43207479
000110  70652025
000114  6400    
000116  00                DCB      0
000117  00                DCB      0

                          AREA ||i.eap_fast_parse_phase1||, CODE, READONLY, ALIGN=2

                  eap_fast_parse_phase1 PROC
;;;118    
;;;119    static int eap_fast_parse_phase1(struct eap_fast_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;120    				 const char *phase1)
;;;121    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;122    	const char *pos;
;;;123    
;;;124    	pos = os_strstr(phase1, "fast_provisioning=");
000006  a11b              ADR      r1,|L23.116|
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       os_strstr
00000e  4605              MOV      r5,r0
;;;125    	if (pos) {
000010  b14d              CBZ      r5,|L23.38|
;;;126    		data->provisioning_allowed = atoi(pos + 18);
000012  f1050012          ADD      r0,r5,#0x12
000016  f7fffffe          BL       atoi
00001a  6560              STR      r0,[r4,#0x54]
;;;127    		wpa_printf(MSG_DEBUG, "EAP-FAST: Automatic PAC provisioning "
00001c  a11a              ADR      r1,|L23.136|
00001e  2000              MOVS     r0,#0
000020  6d62              LDR      r2,[r4,#0x54]
000022  f7fffffe          BL       wpa_printf
                  |L23.38|
;;;128    			   "mode: %d", data->provisioning_allowed);
;;;129    	}
;;;130    
;;;131    	pos = os_strstr(phase1, "fast_max_pac_list_len=");
000026  a124              ADR      r1,|L23.184|
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       os_strstr
00002e  4605              MOV      r5,r0
;;;132    	if (pos) {
000030  b18d              CBZ      r5,|L23.86|
;;;133    		data->max_pac_list_len = atoi(pos + 22);
000032  f1050016          ADD      r0,r5,#0x16
000036  f7fffffe          BL       atoi
00003a  f8c400f0          STR      r0,[r4,#0xf0]
;;;134    		if (data->max_pac_list_len == 0)
00003e  f8d400f0          LDR      r0,[r4,#0xf0]
000042  b910              CBNZ     r0,|L23.74|
;;;135    			data->max_pac_list_len = 1;
000044  2001              MOVS     r0,#1
000046  f8c400f0          STR      r0,[r4,#0xf0]
                  |L23.74|
;;;136    		wpa_printf(MSG_DEBUG, "EAP-FAST: Maximum PAC list length: %lu",
00004a  a121              ADR      r1,|L23.208|
00004c  2000              MOVS     r0,#0
00004e  f8d420f0          LDR      r2,[r4,#0xf0]
000052  f7fffffe          BL       wpa_printf
                  |L23.86|
;;;137    			   (unsigned long) data->max_pac_list_len);
;;;138    	}
;;;139    
;;;140    	pos = os_strstr(phase1, "fast_pac_format=binary");
000056  a128              ADR      r1,|L23.248|
000058  4630              MOV      r0,r6
00005a  f7fffffe          BL       os_strstr
00005e  4605              MOV      r5,r0
;;;141    	if (pos) {
000060  b135              CBZ      r5,|L23.112|
;;;142    		data->use_pac_binary_format = 1;
000062  2001              MOVS     r0,#1
000064  f8c400f4          STR      r0,[r4,#0xf4]
;;;143    		wpa_printf(MSG_DEBUG, "EAP-FAST: Using binary format for PAC "
000068  a129              ADR      r1,|L23.272|
00006a  2000              MOVS     r0,#0
00006c  f7fffffe          BL       wpa_printf
                  |L23.112|
;;;144    			   "list");
;;;145    	}
;;;146    
;;;147    	return 0;
000070  2000              MOVS     r0,#0
;;;148    }
000072  bd70              POP      {r4-r6,pc}
;;;149    
                          ENDP

                  |L23.116|
000074  66617374          DCB      "fast_provisioning=",0
000078  5f70726f
00007c  76697369
000080  6f6e696e
000084  673d00  
000087  00                DCB      0
                  |L23.136|
000088  4541502d          DCB      "EAP-FAST: Automatic PAC provisioning mode: %d",0
00008c  46415354
000090  3a204175
000094  746f6d61
000098  74696320
00009c  50414320
0000a0  70726f76
0000a4  6973696f
0000a8  6e696e67
0000ac  206d6f64
0000b0  653a2025
0000b4  6400    
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L23.184|
0000b8  66617374          DCB      "fast_max_pac_list_len=",0
0000bc  5f6d6178
0000c0  5f706163
0000c4  5f6c6973
0000c8  745f6c65
0000cc  6e3d00  
0000cf  00                DCB      0
                  |L23.208|
0000d0  4541502d          DCB      "EAP-FAST: Maximum PAC list length: %lu",0
0000d4  46415354
0000d8  3a204d61
0000dc  78696d75
0000e0  6d205041
0000e4  43206c69
0000e8  7374206c
0000ec  656e6774
0000f0  683a2025
0000f4  6c7500  
0000f7  00                DCB      0
                  |L23.248|
0000f8  66617374          DCB      "fast_pac_format=binary",0
0000fc  5f706163
000100  5f666f72
000104  6d61743d
000108  62696e61
00010c  727900  
00010f  00                DCB      0
                  |L23.272|
000110  4541502d          DCB      "EAP-FAST: Using binary format for PAC list",0
000114  46415354
000118  3a205573
00011c  696e6720
000120  62696e61
000124  72792066
000128  6f726d61
00012c  7420666f
000130  72205041
000134  43206c69
000138  737400  
00013b  00                DCB      0

                          AREA ||i.eap_fast_phase2_request||, CODE, READONLY, ALIGN=2

                  eap_fast_phase2_request PROC
;;;401    
;;;402    static int eap_fast_phase2_request(struct eap_sm *sm,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;403    				   struct eap_fast_data *data,
;;;404    				   struct eap_method_ret *ret,
;;;405    				   struct eap_hdr *hdr,
;;;406    				   struct wpabuf **resp)
;;;407    {
000004  b087              SUB      sp,sp,#0x1c
000006  4683              MOV      r11,r0
000008  460c              MOV      r4,r1
00000a  4690              MOV      r8,r2
00000c  461d              MOV      r5,r3
00000e  9e10              LDR      r6,[sp,#0x40]
;;;408    	size_t len = be_to_host16(hdr->length);
000010  8868              LDRH     r0,[r5,#2]
000012  f44f417f          MOV      r1,#0xff00
000016  ea012000          AND      r0,r1,r0,LSL #8
00001a  8869              LDRH     r1,[r5,#2]
00001c  ea402a11          ORR      r10,r0,r1,LSR #8
;;;409    	u8 *pos;
;;;410    	struct eap_method_ret iret;
;;;411    	struct eap_peer_config *config = eap_get_config(sm);
000020  4658              MOV      r0,r11
000022  f7fffffe          BL       eap_get_config
000026  4681              MOV      r9,r0
;;;412    	struct wpabuf msg;
;;;413    
;;;414    	if (len <= sizeof(struct eap_hdr)) {
000028  f1ba0f04          CMP      r10,#4
00002c  d809              BHI      |L24.66|
;;;415    		wpa_printf(MSG_INFO, "EAP-FAST: too short "
00002e  4652              MOV      r2,r10
000030  a159              ADR      r1,|L24.408|
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       wpa_printf
;;;416    			   "Phase 2 request (len=%lu)", (unsigned long) len);
;;;417    		return -1;
000038  f04f30ff          MOV      r0,#0xffffffff
                  |L24.60|
;;;418    	}
;;;419    	pos = (u8 *) (hdr + 1);
;;;420    	wpa_printf(MSG_DEBUG, "EAP-FAST: Phase 2 Request: type=%d", *pos);
;;;421    	if (*pos == EAP_TYPE_IDENTITY) {
;;;422    		*resp = eap_sm_buildIdentity(sm, hdr->identifier, 1);
;;;423    		return 0;
;;;424    	}
;;;425    
;;;426    	if (data->phase2_priv && data->phase2_method &&
;;;427    	    *pos != data->phase2_type.method) {
;;;428    		wpa_printf(MSG_DEBUG, "EAP-FAST: Phase 2 EAP sequence - "
;;;429    			   "deinitialize previous method");
;;;430    		data->phase2_method->deinit(sm, data->phase2_priv);
;;;431    		data->phase2_method = NULL;
;;;432    		data->phase2_priv = NULL;
;;;433    		data->phase2_type.vendor = EAP_VENDOR_IETF;
;;;434    		data->phase2_type.method = EAP_TYPE_NONE;
;;;435    	}
;;;436    
;;;437    	if (data->phase2_type.vendor == EAP_VENDOR_IETF &&
;;;438    	    data->phase2_type.method == EAP_TYPE_NONE &&
;;;439    	    eap_fast_select_phase2_method(data, *pos) < 0) {
;;;440    		if (eap_peer_tls_phase2_nak(data->phase2_types,
;;;441    					    data->num_phase2_types,
;;;442    					    hdr, resp))
;;;443    			return -1;
;;;444    		return 0;
;;;445    	}
;;;446    
;;;447    	if (data->phase2_priv == NULL &&
;;;448    	    eap_fast_init_phase2_method(sm, data) < 0) {
;;;449    		wpa_printf(MSG_INFO, "EAP-FAST: Failed to initialize "
;;;450    			   "Phase 2 EAP method %d", *pos);
;;;451    		ret->methodState = METHOD_DONE;
;;;452    		ret->decision = DECISION_FAIL;
;;;453    		return -1;
;;;454    	}
;;;455    
;;;456    	os_memset(&iret, 0, sizeof(iret));
;;;457    	wpabuf_set(&msg, hdr, len);
;;;458    	*resp = data->phase2_method->process(sm, data->phase2_priv, &iret,
;;;459    					     &msg);
;;;460    	if (*resp == NULL ||
;;;461    	    (iret.methodState == METHOD_DONE &&
;;;462    	     iret.decision == DECISION_FAIL)) {
;;;463    		ret->methodState = METHOD_DONE;
;;;464    		ret->decision = DECISION_FAIL;
;;;465    	} else if ((iret.methodState == METHOD_DONE ||
;;;466    		    iret.methodState == METHOD_MAY_CONT) &&
;;;467    		   (iret.decision == DECISION_UNCOND_SUCC ||
;;;468    		    iret.decision == DECISION_COND_SUCC)) {
;;;469    		data->phase2_success = 1;
;;;470    	}
;;;471    
;;;472    	if (*resp == NULL && config &&
;;;473    	    (config->pending_req_identity || config->pending_req_password ||
;;;474    	     config->pending_req_otp || config->pending_req_new_password)) {
;;;475    		wpabuf_free(data->pending_phase2_req);
;;;476    		data->pending_phase2_req = wpabuf_alloc_copy(hdr, len);
;;;477    	} else if (*resp == NULL)
;;;478    		return -1;
;;;479    
;;;480    	return 0;
;;;481    }
00003c  b007              ADD      sp,sp,#0x1c
00003e  e8bd8ff0          POP      {r4-r11,pc}
                  |L24.66|
000042  1d2f              ADDS     r7,r5,#4              ;419
000044  783a              LDRB     r2,[r7,#0]            ;420
000046  a160              ADR      r1,|L24.456|
000048  2000              MOVS     r0,#0                 ;420
00004a  f7fffffe          BL       wpa_printf
00004e  7838              LDRB     r0,[r7,#0]            ;421
000050  2801              CMP      r0,#1                 ;421
000052  d107              BNE      |L24.100|
000054  7869              LDRB     r1,[r5,#1]            ;422
000056  2201              MOVS     r2,#1                 ;422
000058  4658              MOV      r0,r11                ;422
00005a  f7fffffe          BL       eap_sm_buildIdentity
00005e  6030              STR      r0,[r6,#0]            ;422
000060  2000              MOVS     r0,#0                 ;423
000062  e7eb              B        |L24.60|
                  |L24.100|
000064  6b60              LDR      r0,[r4,#0x34]         ;426
000066  b1a0              CBZ      r0,|L24.146|
000068  6b20              LDR      r0,[r4,#0x30]         ;426
00006a  b190              CBZ      r0,|L24.146|
00006c  7839              LDRB     r1,[r7,#0]            ;427
00006e  6c20              LDR      r0,[r4,#0x40]         ;427
000070  4281              CMP      r1,r0                 ;427
000072  d00e              BEQ      |L24.146|
000074  a15d              ADR      r1,|L24.492|
000076  2000              MOVS     r0,#0                 ;428
000078  f7fffffe          BL       wpa_printf
00007c  e9d4010c          LDRD     r0,r1,[r4,#0x30]      ;430
000080  6902              LDR      r2,[r0,#0x10]         ;430
000082  4658              MOV      r0,r11                ;430
000084  4790              BLX      r2                    ;430
000086  2000              MOVS     r0,#0                 ;431
000088  6320              STR      r0,[r4,#0x30]         ;431
00008a  6360              STR      r0,[r4,#0x34]         ;432
00008c  63e0              STR      r0,[r4,#0x3c]         ;433
00008e  2100              MOVS     r1,#0                 ;434
000090  6421              STR      r1,[r4,#0x40]         ;434
                  |L24.146|
000092  6be0              LDR      r0,[r4,#0x3c]         ;437
000094  b998              CBNZ     r0,|L24.190|
000096  6c20              LDR      r0,[r4,#0x40]         ;438
000098  b988              CBNZ     r0,|L24.190|
00009a  7839              LDRB     r1,[r7,#0]            ;439
00009c  4620              MOV      r0,r4                 ;439
00009e  f7fffffe          BL       eap_fast_select_phase2_method
0000a2  2800              CMP      r0,#0                 ;439
0000a4  da0b              BGE      |L24.190|
0000a6  4633              MOV      r3,r6                 ;440
0000a8  462a              MOV      r2,r5                 ;440
0000aa  e9d40111          LDRD     r0,r1,[r4,#0x44]      ;440
0000ae  f7fffffe          BL       eap_peer_tls_phase2_nak
0000b2  b110              CBZ      r0,|L24.186|
0000b4  f04f30ff          MOV      r0,#0xffffffff        ;443
0000b8  e7c0              B        |L24.60|
                  |L24.186|
0000ba  2000              MOVS     r0,#0                 ;444
0000bc  e7be              B        |L24.60|
                  |L24.190|
0000be  6b60              LDR      r0,[r4,#0x34]         ;447
0000c0  b990              CBNZ     r0,|L24.232|
0000c2  4621              MOV      r1,r4                 ;448
0000c4  4658              MOV      r0,r11                ;448
0000c6  f7fffffe          BL       eap_fast_init_phase2_method
0000ca  2800              CMP      r0,#0                 ;448
0000cc  da0c              BGE      |L24.232|
0000ce  783a              LDRB     r2,[r7,#0]            ;449
0000d0  a156              ADR      r1,|L24.556|
0000d2  2000              MOVS     r0,#0                 ;449
0000d4  f7fffffe          BL       wpa_printf
0000d8  2004              MOVS     r0,#4                 ;451
0000da  f8880004          STRB     r0,[r8,#4]            ;451
0000de  2000              MOVS     r0,#0                 ;452
0000e0  f8880005          STRB     r0,[r8,#5]            ;452
0000e4  1e40              SUBS     r0,r0,#1              ;453
0000e6  e7a9              B        |L24.60|
                  |L24.232|
0000e8  220c              MOVS     r2,#0xc               ;456
0000ea  2100              MOVS     r1,#0                 ;456
0000ec  a804              ADD      r0,sp,#0x10           ;456
0000ee  f7fffffe          BL       os_memset
0000f2  4652              MOV      r2,r10                ;457
0000f4  4629              MOV      r1,r5                 ;457
0000f6  a801              ADD      r0,sp,#4              ;457
0000f8  f7fffffe          BL       wpabuf_set
0000fc  e9d4010c          LDRD     r0,r1,[r4,#0x30]      ;458
000100  ab01              ADD      r3,sp,#4              ;458
000102  aa04              ADD      r2,sp,#0x10           ;458
000104  f8d0c014          LDR      r12,[r0,#0x14]        ;458
000108  4658              MOV      r0,r11                ;458
00010a  47e0              BLX      r12                   ;458
00010c  6030              STR      r0,[r6,#0]            ;458
00010e  6830              LDR      r0,[r6,#0]            ;460
000110  b130              CBZ      r0,|L24.288|
000112  f89d0014          LDRB     r0,[sp,#0x14]         ;461
000116  2804              CMP      r0,#4                 ;461
000118  d109              BNE      |L24.302|
00011a  f89d0015          LDRB     r0,[sp,#0x15]         ;462
00011e  b930              CBNZ     r0,|L24.302|
                  |L24.288|
000120  2004              MOVS     r0,#4                 ;463
000122  f8880004          STRB     r0,[r8,#4]            ;463
000126  2000              MOVS     r0,#0                 ;464
000128  f8880005          STRB     r0,[r8,#5]            ;464
00012c  e011              B        |L24.338|
                  |L24.302|
00012e  f89d0014          LDRB     r0,[sp,#0x14]         ;465
000132  2804              CMP      r0,#4                 ;465
000134  d003              BEQ      |L24.318|
000136  f89d0014          LDRB     r0,[sp,#0x14]         ;466
00013a  2803              CMP      r0,#3                 ;466
00013c  d109              BNE      |L24.338|
                  |L24.318|
00013e  f89d0015          LDRB     r0,[sp,#0x15]         ;467
000142  2802              CMP      r0,#2                 ;467
000144  d003              BEQ      |L24.334|
000146  f89d0015          LDRB     r0,[sp,#0x15]         ;468
00014a  2801              CMP      r0,#1                 ;468
00014c  d101              BNE      |L24.338|
                  |L24.334|
00014e  2001              MOVS     r0,#1                 ;469
000150  63a0              STR      r0,[r4,#0x38]         ;469
                  |L24.338|
000152  6830              LDR      r0,[r6,#0]            ;472
000154  b9c8              CBNZ     r0,|L24.394|
000156  f1b90f00          CMP      r9,#0                 ;472
00015a  d016              BEQ      |L24.394|
00015c  f8d900a0          LDR      r0,[r9,#0xa0]         ;473
000160  b940              CBNZ     r0,|L24.372|
000162  f8d900a4          LDR      r0,[r9,#0xa4]         ;473
000166  b928              CBNZ     r0,|L24.372|
000168  f8d900b4          LDR      r0,[r9,#0xb4]         ;474
00016c  b910              CBNZ     r0,|L24.372|
00016e  f8d900ac          LDR      r0,[r9,#0xac]         ;474
000172  b150              CBZ      r0,|L24.394|
                  |L24.372|
000174  f8d40124          LDR      r0,[r4,#0x124]        ;475
000178  f7fffffe          BL       wpabuf_free
00017c  4651              MOV      r1,r10                ;476
00017e  4628              MOV      r0,r5                 ;476
000180  f7fffffe          BL       wpabuf_alloc_copy
000184  f8c40124          STR      r0,[r4,#0x124]        ;476
000188  e004              B        |L24.404|
                  |L24.394|
00018a  6830              LDR      r0,[r6,#0]            ;477
00018c  b910              CBNZ     r0,|L24.404|
00018e  f04f30ff          MOV      r0,#0xffffffff        ;478
000192  e753              B        |L24.60|
                  |L24.404|
000194  2000              MOVS     r0,#0                 ;480
000196  e751              B        |L24.60|
;;;482    
                          ENDP

                  |L24.408|
000198  4541502d          DCB      "EAP-FAST: too short Phase 2 request (len=%lu)",0
00019c  46415354
0001a0  3a20746f
0001a4  6f207368
0001a8  6f727420
0001ac  50686173
0001b0  65203220
0001b4  72657175
0001b8  65737420
0001bc  286c656e
0001c0  3d256c75
0001c4  2900    
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L24.456|
0001c8  4541502d          DCB      "EAP-FAST: Phase 2 Request: type=%d",0
0001cc  46415354
0001d0  3a205068
0001d4  61736520
0001d8  32205265
0001dc  71756573
0001e0  743a2074
0001e4  7970653d
0001e8  256400  
0001eb  00                DCB      0
                  |L24.492|
0001ec  4541502d          DCB      "EAP-FAST: Phase 2 EAP sequence - deinitialize previous "
0001f0  46415354
0001f4  3a205068
0001f8  61736520
0001fc  32204541
000200  50207365
000204  7175656e
000208  6365202d
00020c  20646569
000210  6e697469
000214  616c697a
000218  65207072
00021c  6576696f
000220  757320  
000223  6d657468          DCB      "method",0
000227  6f6400  
00022a  00                DCB      0
00022b  00                DCB      0
                  |L24.556|
00022c  4541502d          DCB      "EAP-FAST: Failed to initialize Phase 2 EAP method %d",0
000230  46415354
000234  3a204661
000238  696c6564
00023c  20746f20
000240  696e6974
000244  69616c69
000248  7a652050
00024c  68617365
000250  20322045
000254  4150206d
000258  6574686f
00025c  64202564
000260  00      
000261  00                DCB      0
000262  00                DCB      0
000263  00                DCB      0

                          AREA ||i.eap_fast_process||, CODE, READONLY, ALIGN=2

                  eap_fast_process PROC
;;;1487   
;;;1488   static struct wpabuf * eap_fast_process(struct eap_sm *sm, void *priv,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1489   					struct eap_method_ret *ret,
;;;1490   					const struct wpabuf *reqData)
;;;1491   {
000004  b099              SUB      sp,sp,#0x64
000006  4606              MOV      r6,r0
000008  468b              MOV      r11,r1
00000a  4617              MOV      r7,r2
00000c  4699              MOV      r9,r3
;;;1492   	const struct eap_hdr *req;
;;;1493   	size_t left;
;;;1494   	int res;
;;;1495   	u8 flags, id;
;;;1496   	struct wpabuf *resp;
;;;1497   	const u8 *pos;
;;;1498   	struct eap_fast_data *data = priv;
00000e  465c              MOV      r4,r11
;;;1499   
;;;1500   	pos = eap_peer_tls_process_init(sm, &data->ssl, EAP_TYPE_FAST, ret,
000010  ab17              ADD      r3,sp,#0x5c
000012  aa18              ADD      r2,sp,#0x60
000014  e9cd9200          STRD     r9,r2,[sp,#0]
000018  9302              STR      r3,[sp,#8]
00001a  463b              MOV      r3,r7
00001c  222b              MOVS     r2,#0x2b
00001e  4621              MOV      r1,r4
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       eap_peer_tls_process_init
000026  4682              MOV      r10,r0
;;;1501   					reqData, &left, &flags);
;;;1502   	if (pos == NULL)
000028  f1ba0f00          CMP      r10,#0
00002c  d103              BNE      |L25.54|
;;;1503   		return NULL;
00002e  2000              MOVS     r0,#0
                  |L25.48|
;;;1504   
;;;1505   	req = wpabuf_head(reqData);
;;;1506   	id = req->identifier;
;;;1507   
;;;1508   	if (flags & EAP_TLS_FLAGS_START) {
;;;1509   		if (eap_fast_process_start(sm, data, flags, pos, left) < 0)
;;;1510   			return NULL;
;;;1511   
;;;1512   		left = 0; /* A-ID is not used in further packet processing */
;;;1513   	}
;;;1514   
;;;1515   	resp = NULL;
;;;1516   	if (tls_connection_established(sm->ssl_ctx, data->ssl.conn) &&
;;;1517   	    !data->resuming) {
;;;1518   		/* Process tunneled (encrypted) phase 2 data. */
;;;1519   		struct wpabuf msg;
;;;1520   		wpabuf_set(&msg, pos, left);
;;;1521   		res = eap_fast_decrypt(sm, data, ret, req, &msg, &resp);
;;;1522   		if (res < 0) {
;;;1523   			ret->methodState = METHOD_DONE;
;;;1524   			ret->decision = DECISION_FAIL;
;;;1525   			/*
;;;1526   			 * Ack possible Alert that may have caused failure in
;;;1527   			 * decryption.
;;;1528   			 */
;;;1529   			res = 1;
;;;1530   		}
;;;1531   	} else {
;;;1532   		/* Continue processing TLS handshake (phase 1). */
;;;1533   		res = eap_peer_tls_process_helper(sm, &data->ssl,
;;;1534   						  EAP_TYPE_FAST,
;;;1535   						  data->fast_version, id, pos,
;;;1536   						  left, &resp);
;;;1537   
;;;1538   		if (tls_connection_established(sm->ssl_ctx, data->ssl.conn)) {
;;;1539   			char cipher[80];
;;;1540   			wpa_printf(MSG_DEBUG,
;;;1541   				   "EAP-FAST: TLS done, proceed to Phase 2");
;;;1542   			if (data->provisioning &&
;;;1543   			    (!(data->provisioning_allowed &
;;;1544   			       EAP_FAST_PROV_AUTH) ||
;;;1545   			     tls_get_cipher(sm->ssl_ctx, data->ssl.conn,
;;;1546   					    cipher, sizeof(cipher)) < 0 ||
;;;1547   			     os_strstr(cipher, "ADH-") ||
;;;1548   			     os_strstr(cipher, "anon"))) {
;;;1549   				wpa_printf(MSG_DEBUG, "EAP-FAST: Using "
;;;1550   					   "anonymous (unauthenticated) "
;;;1551   					   "provisioning");
;;;1552   				data->anon_provisioning = 1;
;;;1553   			} else
;;;1554   				data->anon_provisioning = 0;
;;;1555   			data->resuming = 0;
;;;1556   			eap_fast_derive_keys(sm, data);
;;;1557   		}
;;;1558   
;;;1559   		if (res == 2) {
;;;1560   			struct wpabuf msg;
;;;1561   			/*
;;;1562   			 * Application data included in the handshake message.
;;;1563   			 */
;;;1564   			wpabuf_free(data->pending_phase2_req);
;;;1565   			data->pending_phase2_req = resp;
;;;1566   			resp = NULL;
;;;1567   			wpabuf_set(&msg, pos, left);
;;;1568   			res = eap_fast_decrypt(sm, data, ret, req, &msg,
;;;1569   					       &resp);
;;;1570   		}
;;;1571   	}
;;;1572   
;;;1573   	if (res == 1) {
;;;1574   		wpabuf_free(resp);
;;;1575   		return eap_peer_tls_build_ack(id, EAP_TYPE_FAST,
;;;1576   					      data->fast_version);
;;;1577   	}
;;;1578   
;;;1579   	return resp;
;;;1580   }
000030  b019              ADD      sp,sp,#0x64
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L25.54|
000036  4648              MOV      r0,r9                 ;1505
000038  f7fffffe          BL       wpabuf_head
00003c  4680              MOV      r8,r0                 ;1505
00003e  f8980001          LDRB     r0,[r8,#1]            ;1506
000042  9016              STR      r0,[sp,#0x58]         ;1506
000044  f89d005c          LDRB     r0,[sp,#0x5c]         ;1508
000048  f0100f20          TST      r0,#0x20              ;1508
00004c  d00e              BEQ      |L25.108|
00004e  9b18              LDR      r3,[sp,#0x60]         ;1509
000050  9300              STR      r3,[sp,#0]            ;1509
000052  4653              MOV      r3,r10                ;1509
000054  f89d205c          LDRB     r2,[sp,#0x5c]         ;1509
000058  4621              MOV      r1,r4                 ;1509
00005a  4630              MOV      r0,r6                 ;1509
00005c  f7fffffe          BL       eap_fast_process_start
000060  2800              CMP      r0,#0                 ;1509
000062  da01              BGE      |L25.104|
000064  2000              MOVS     r0,#0                 ;1510
000066  e7e3              B        |L25.48|
                  |L25.104|
000068  2000              MOVS     r0,#0                 ;1512
00006a  9018              STR      r0,[sp,#0x60]         ;1512
                  |L25.108|
00006c  2000              MOVS     r0,#0                 ;1515
00006e  9015              STR      r0,[sp,#0x54]         ;1515
000070  6821              LDR      r1,[r4,#0]            ;1516
000072  f8d60098          LDR      r0,[r6,#0x98]         ;1516
000076  f7fffffe          BL       tls_connection_established
00007a  b1c8              CBZ      r0,|L25.176|
00007c  6ce0              LDR      r0,[r4,#0x4c]         ;1517
00007e  b9b8              CBNZ     r0,|L25.176|
000080  4651              MOV      r1,r10                ;1520
000082  a812              ADD      r0,sp,#0x48           ;1520
000084  9a18              LDR      r2,[sp,#0x60]         ;1520
000086  f7fffffe          BL       wpabuf_set
00008a  ab15              ADD      r3,sp,#0x54           ;1521
00008c  aa12              ADD      r2,sp,#0x48           ;1521
00008e  e9cd2300          STRD     r2,r3,[sp,#0]         ;1521
000092  4643              MOV      r3,r8                 ;1521
000094  463a              MOV      r2,r7                 ;1521
000096  4621              MOV      r1,r4                 ;1521
000098  4630              MOV      r0,r6                 ;1521
00009a  f7fffffe          BL       eap_fast_decrypt
00009e  4605              MOV      r5,r0                 ;1521
0000a0  2d00              CMP      r5,#0                 ;1522
0000a2  da04              BGE      |L25.174|
0000a4  2004              MOVS     r0,#4                 ;1523
0000a6  7138              STRB     r0,[r7,#4]            ;1523
0000a8  2000              MOVS     r0,#0                 ;1524
0000aa  7178              STRB     r0,[r7,#5]            ;1524
0000ac  2501              MOVS     r5,#1                 ;1529
                  |L25.174|
0000ae  e05c              B        |L25.362|
                  |L25.176|
0000b0  ab15              ADD      r3,sp,#0x54           ;1533
0000b2  9a18              LDR      r2,[sp,#0x60]         ;1533
0000b4  9816              LDR      r0,[sp,#0x58]         ;1533
0000b6  e9cda201          STRD     r10,r2,[sp,#4]        ;1533
0000ba  9303              STR      r3,[sp,#0xc]          ;1533
0000bc  9000              STR      r0,[sp,#0]            ;1533
0000be  222b              MOVS     r2,#0x2b              ;1533
0000c0  4621              MOV      r1,r4                 ;1533
0000c2  4630              MOV      r0,r6                 ;1533
0000c4  6ae3              LDR      r3,[r4,#0x2c]         ;1533
0000c6  f7fffffe          BL       eap_peer_tls_process_helper
0000ca  4605              MOV      r5,r0                 ;1533
0000cc  6821              LDR      r1,[r4,#0]            ;1538
0000ce  f8d60098          LDR      r0,[r6,#0x98]         ;1538
0000d2  f7fffffe          BL       tls_connection_established
0000d6  b360              CBZ      r0,|L25.306|
0000d8  a12a              ADR      r1,|L25.388|
0000da  2000              MOVS     r0,#0                 ;1540
0000dc  f7fffffe          BL       wpa_printf
0000e0  6da0              LDR      r0,[r4,#0x58]         ;1542
0000e2  b1e8              CBZ      r0,|L25.288|
0000e4  6d60              LDR      r0,[r4,#0x54]         ;1543
0000e6  f0100f02          TST      r0,#2                 ;1543
0000ea  d012              BEQ      |L25.274|
0000ec  6821              LDR      r1,[r4,#0]            ;1545
0000ee  2350              MOVS     r3,#0x50              ;1545
0000f0  aa01              ADD      r2,sp,#4              ;1545
0000f2  f8d60098          LDR      r0,[r6,#0x98]         ;1545
0000f6  f7fffffe          BL       tls_get_cipher
0000fa  2800              CMP      r0,#0                 ;1545
0000fc  db09              BLT      |L25.274|
0000fe  a12b              ADR      r1,|L25.428|
000100  a801              ADD      r0,sp,#4              ;1547
000102  f7fffffe          BL       os_strstr
000106  b920              CBNZ     r0,|L25.274|
000108  a12a              ADR      r1,|L25.436|
00010a  a801              ADD      r0,sp,#4              ;1548
00010c  f7fffffe          BL       os_strstr
000110  b130              CBZ      r0,|L25.288|
                  |L25.274|
000112  a12a              ADR      r1,|L25.444|
000114  2000              MOVS     r0,#0                 ;1549
000116  f7fffffe          BL       wpa_printf
00011a  2001              MOVS     r0,#1                 ;1552
00011c  65e0              STR      r0,[r4,#0x5c]         ;1552
00011e  e001              B        |L25.292|
                  |L25.288|
000120  2000              MOVS     r0,#0                 ;1554
000122  65e0              STR      r0,[r4,#0x5c]         ;1554
                  |L25.292|
000124  2000              MOVS     r0,#0                 ;1555
000126  64e0              STR      r0,[r4,#0x4c]         ;1555
000128  4621              MOV      r1,r4                 ;1556
00012a  4630              MOV      r0,r6                 ;1556
00012c  f7fffffe          BL       eap_fast_derive_keys
000130  bf00              NOP                            ;1557
                  |L25.306|
000132  2d02              CMP      r5,#2                 ;1559
000134  d119              BNE      |L25.362|
000136  f8d40124          LDR      r0,[r4,#0x124]        ;1564
00013a  f7fffffe          BL       wpabuf_free
00013e  9815              LDR      r0,[sp,#0x54]         ;1565
000140  f8c40124          STR      r0,[r4,#0x124]        ;1565
000144  2000              MOVS     r0,#0                 ;1566
000146  9015              STR      r0,[sp,#0x54]         ;1566
000148  4651              MOV      r1,r10                ;1567
00014a  a812              ADD      r0,sp,#0x48           ;1567
00014c  9a18              LDR      r2,[sp,#0x60]         ;1567
00014e  f7fffffe          BL       wpabuf_set
000152  ab15              ADD      r3,sp,#0x54           ;1568
000154  aa12              ADD      r2,sp,#0x48           ;1568
000156  e9cd2300          STRD     r2,r3,[sp,#0]         ;1568
00015a  4643              MOV      r3,r8                 ;1568
00015c  463a              MOV      r2,r7                 ;1568
00015e  4621              MOV      r1,r4                 ;1568
000160  4630              MOV      r0,r6                 ;1568
000162  f7fffffe          BL       eap_fast_decrypt
000166  4605              MOV      r5,r0                 ;1568
000168  bf00              NOP                            ;1570
                  |L25.362|
00016a  2d01              CMP      r5,#1                 ;1573
00016c  d108              BNE      |L25.384|
00016e  9815              LDR      r0,[sp,#0x54]         ;1574
000170  f7fffffe          BL       wpabuf_free
000174  212b              MOVS     r1,#0x2b              ;1575
000176  6ae2              LDR      r2,[r4,#0x2c]         ;1575
000178  9816              LDR      r0,[sp,#0x58]         ;1575
00017a  f7fffffe          BL       eap_peer_tls_build_ack
00017e  e757              B        |L25.48|
                  |L25.384|
000180  9815              LDR      r0,[sp,#0x54]         ;1579
000182  e755              B        |L25.48|
;;;1581   
                          ENDP

                  |L25.388|
000184  4541502d          DCB      "EAP-FAST: TLS done, proceed to Phase 2",0
000188  46415354
00018c  3a20544c
000190  5320646f
000194  6e652c20
000198  70726f63
00019c  65656420
0001a0  746f2050
0001a4  68617365
0001a8  203200  
0001ab  00                DCB      0
                  |L25.428|
0001ac  4144482d          DCB      "ADH-",0
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L25.436|
0001b4  616e6f6e          DCB      "anon",0
0001b8  00      
0001b9  00                DCB      0
0001ba  00                DCB      0
0001bb  00                DCB      0
                  |L25.444|
0001bc  4541502d          DCB      "EAP-FAST: Using anonymous (unauthenticated) provisionin"
0001c0  46415354
0001c4  3a205573
0001c8  696e6720
0001cc  616e6f6e
0001d0  796d6f75
0001d4  73202875
0001d8  6e617574
0001dc  68656e74
0001e0  69636174
0001e4  65642920
0001e8  70726f76
0001ec  6973696f
0001f0  6e696e  
0001f3  6700              DCB      "g",0
0001f5  00                DCB      0
0001f6  00                DCB      0
0001f7  00                DCB      0

                          AREA ||i.eap_fast_process_crypto_binding||, CODE, READONLY, ALIGN=2

                  eap_fast_process_crypto_binding PROC
;;;737    
;;;738    static struct wpabuf * eap_fast_process_crypto_binding(
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;739    	struct eap_sm *sm, struct eap_fast_data *data,
;;;740    	struct eap_method_ret *ret,
;;;741    	struct eap_tlv_crypto_binding_tlv *_bind, size_t bind_len)
;;;742    {
000004  b08d              SUB      sp,sp,#0x34
000006  4682              MOV      r10,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461c              MOV      r4,r3
00000e  f8ddb058          LDR      r11,[sp,#0x58]
;;;743    	struct wpabuf *resp;
;;;744    	u8 *pos;
;;;745    	u8 cmk[EAP_FAST_CMK_LEN], cmac[SHA1_MAC_LEN];
;;;746    	int res;
;;;747    	size_t len;
;;;748    
;;;749    	if (eap_fast_validate_crypto_binding(_bind) < 0)
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       eap_fast_validate_crypto_binding
000018  2800              CMP      r0,#0
00001a  da03              BGE      |L26.36|
;;;750    		return NULL;
00001c  2000              MOVS     r0,#0
                  |L26.30|
;;;751    
;;;752    	if (eap_fast_get_cmk(sm, data, cmk) < 0)
;;;753    		return NULL;
;;;754    
;;;755    	/* Validate received Compound MAC */
;;;756    	os_memcpy(cmac, _bind->compound_mac, sizeof(cmac));
;;;757    	os_memset(_bind->compound_mac, 0, sizeof(cmac));
;;;758    	wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: Crypto-Binding TLV for Compound "
;;;759    		    "MAC calculation", (u8 *) _bind, bind_len);
;;;760    	hmac_sha1(cmk, EAP_FAST_CMK_LEN, (u8 *) _bind, bind_len,
;;;761    		  _bind->compound_mac);
;;;762    	res = os_memcmp(cmac, _bind->compound_mac, sizeof(cmac));
;;;763    	wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: Received Compound MAC",
;;;764    		    cmac, sizeof(cmac));
;;;765    	wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: Calculated Compound MAC",
;;;766    		    _bind->compound_mac, sizeof(cmac));
;;;767    	if (res != 0) {
;;;768    		wpa_printf(MSG_INFO, "EAP-FAST: Compound MAC did not match");
;;;769    		os_memcpy(_bind->compound_mac, cmac, sizeof(cmac));
;;;770    		return NULL;
;;;771    	}
;;;772    
;;;773    	/*
;;;774    	 * Compound MAC was valid, so authentication succeeded. Reply with
;;;775    	 * crypto binding to allow server to complete authentication.
;;;776    	 */
;;;777    
;;;778    	len = sizeof(struct eap_tlv_crypto_binding_tlv);
;;;779    	resp = wpabuf_alloc(len);
;;;780    	if (resp == NULL)
;;;781    		return NULL;
;;;782    
;;;783    	if (!data->anon_provisioning && data->phase2_success &&
;;;784    	    eap_fast_derive_msk(data) < 0) {
;;;785    		wpa_printf(MSG_INFO, "EAP-FAST: Failed to generate MSK");
;;;786    		ret->methodState = METHOD_DONE;
;;;787    		ret->decision = DECISION_FAIL;
;;;788    		data->phase2_success = 0;
;;;789    		wpabuf_free(resp);
;;;790    		return NULL;
;;;791    	}
;;;792    
;;;793    	pos = wpabuf_put(resp, sizeof(struct eap_tlv_crypto_binding_tlv));
;;;794    	eap_fast_write_crypto_binding((struct eap_tlv_crypto_binding_tlv *)
;;;795    				      pos, _bind, cmk);
;;;796    
;;;797    	return resp;
;;;798    }
00001e  b00d              ADD      sp,sp,#0x34
000020  e8bd8ff0          POP      {r4-r11,pc}
                  |L26.36|
000024  aa07              ADD      r2,sp,#0x1c           ;752
000026  4629              MOV      r1,r5                 ;752
000028  4650              MOV      r0,r10                ;752
00002a  f7fffffe          BL       eap_fast_get_cmk
00002e  2800              CMP      r0,#0                 ;752
000030  da01              BGE      |L26.54|
000032  2000              MOVS     r0,#0                 ;753
000034  e7f3              B        |L26.30|
                  |L26.54|
000036  2214              MOVS     r2,#0x14              ;756
000038  f1040128          ADD      r1,r4,#0x28           ;756
00003c  a802              ADD      r0,sp,#8              ;756
00003e  f7fffffe          BL       os_memcpy
000042  2214              MOVS     r2,#0x14              ;757
000044  2100              MOVS     r1,#0                 ;757
000046  f1040028          ADD      r0,r4,#0x28           ;757
00004a  f7fffffe          BL       os_memset
00004e  465b              MOV      r3,r11                ;758
000050  4622              MOV      r2,r4                 ;758
000052  a12e              ADR      r1,|L26.268|
000054  2000              MOVS     r0,#0                 ;758
000056  f7fffffe          BL       wpa_hexdump
00005a  f1040328          ADD      r3,r4,#0x28           ;760
00005e  9300              STR      r3,[sp,#0]            ;760
000060  465b              MOV      r3,r11                ;760
000062  4622              MOV      r2,r4                 ;760
000064  2114              MOVS     r1,#0x14              ;760
000066  a807              ADD      r0,sp,#0x1c           ;760
000068  f7fffffe          BL       hmac_sha1
00006c  2214              MOVS     r2,#0x14              ;762
00006e  f1040128          ADD      r1,r4,#0x28           ;762
000072  a802              ADD      r0,sp,#8              ;762
000074  f7fffffe          BL       os_memcmp
000078  4680              MOV      r8,r0                 ;762
00007a  2314              MOVS     r3,#0x14              ;763
00007c  aa02              ADD      r2,sp,#8              ;763
00007e  a132              ADR      r1,|L26.328|
000080  2000              MOVS     r0,#0                 ;763
000082  f7fffffe          BL       wpa_hexdump
000086  2314              MOVS     r3,#0x14              ;765
000088  f1040228          ADD      r2,r4,#0x28           ;765
00008c  a136              ADR      r1,|L26.360|
00008e  2000              MOVS     r0,#0                 ;765
000090  f7fffffe          BL       wpa_hexdump
000094  f1b80f00          CMP      r8,#0                 ;767
000098  d00b              BEQ      |L26.178|
00009a  a13c              ADR      r1,|L26.396|
00009c  2000              MOVS     r0,#0                 ;768
00009e  f7fffffe          BL       wpa_printf
0000a2  2214              MOVS     r2,#0x14              ;769
0000a4  a902              ADD      r1,sp,#8              ;769
0000a6  f1040028          ADD      r0,r4,#0x28           ;769
0000aa  f7fffffe          BL       os_memcpy
0000ae  2000              MOVS     r0,#0                 ;770
0000b0  e7b5              B        |L26.30|
                  |L26.178|
0000b2  f04f093c          MOV      r9,#0x3c              ;778
0000b6  4648              MOV      r0,r9                 ;779
0000b8  f7fffffe          BL       wpabuf_alloc
0000bc  4607              MOV      r7,r0                 ;779
0000be  b90f              CBNZ     r7,|L26.196|
0000c0  2000              MOVS     r0,#0                 ;781
0000c2  e7ac              B        |L26.30|
                  |L26.196|
0000c4  6de8              LDR      r0,[r5,#0x5c]         ;783
0000c6  b9a0              CBNZ     r0,|L26.242|
0000c8  6ba8              LDR      r0,[r5,#0x38]         ;783
0000ca  b190              CBZ      r0,|L26.242|
0000cc  4628              MOV      r0,r5                 ;784
0000ce  f7fffffe          BL       eap_fast_derive_msk
0000d2  2800              CMP      r0,#0                 ;784
0000d4  da0d              BGE      |L26.242|
0000d6  a137              ADR      r1,|L26.436|
0000d8  2000              MOVS     r0,#0                 ;785
0000da  f7fffffe          BL       wpa_printf
0000de  2004              MOVS     r0,#4                 ;786
0000e0  7130              STRB     r0,[r6,#4]            ;786
0000e2  2000              MOVS     r0,#0                 ;787
0000e4  7170              STRB     r0,[r6,#5]            ;787
0000e6  63a8              STR      r0,[r5,#0x38]         ;788
0000e8  4638              MOV      r0,r7                 ;789
0000ea  f7fffffe          BL       wpabuf_free
0000ee  2000              MOVS     r0,#0                 ;790
0000f0  e795              B        |L26.30|
                  |L26.242|
0000f2  213c              MOVS     r1,#0x3c              ;793
0000f4  4638              MOV      r0,r7                 ;793
0000f6  f7fffffe          BL       wpabuf_put
0000fa  900c              STR      r0,[sp,#0x30]         ;793
0000fc  aa07              ADD      r2,sp,#0x1c           ;794
0000fe  4621              MOV      r1,r4                 ;794
000100  980c              LDR      r0,[sp,#0x30]         ;794
000102  f7fffffe          BL       eap_fast_write_crypto_binding
000106  4638              MOV      r0,r7                 ;797
000108  e789              B        |L26.30|
;;;799    
                          ENDP

00010a  0000              DCW      0x0000
                  |L26.268|
00010c  4541502d          DCB      "EAP-FAST: Crypto-Binding TLV for Compound MAC calculati"
000110  46415354
000114  3a204372
000118  7970746f
00011c  2d42696e
000120  64696e67
000124  20544c56
000128  20666f72
00012c  20436f6d
000130  706f756e
000134  64204d41
000138  43206361
00013c  6c63756c
000140  617469  
000143  6f6e00            DCB      "on",0
000146  00                DCB      0
000147  00                DCB      0
                  |L26.328|
000148  4541502d          DCB      "EAP-FAST: Received Compound MAC",0
00014c  46415354
000150  3a205265
000154  63656976
000158  65642043
00015c  6f6d706f
000160  756e6420
000164  4d414300
                  |L26.360|
000168  4541502d          DCB      "EAP-FAST: Calculated Compound MAC",0
00016c  46415354
000170  3a204361
000174  6c63756c
000178  61746564
00017c  20436f6d
000180  706f756e
000184  64204d41
000188  4300    
00018a  00                DCB      0
00018b  00                DCB      0
                  |L26.396|
00018c  4541502d          DCB      "EAP-FAST: Compound MAC did not match",0
000190  46415354
000194  3a20436f
000198  6d706f75
00019c  6e64204d
0001a0  41432064
0001a4  6964206e
0001a8  6f74206d
0001ac  61746368
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L26.436|
0001b4  4541502d          DCB      "EAP-FAST: Failed to generate MSK",0
0001b8  46415354
0001bc  3a204661
0001c0  696c6564
0001c4  20746f20
0001c8  67656e65
0001cc  72617465
0001d0  204d534b
0001d4  00      
0001d5  00                DCB      0
0001d6  00                DCB      0
0001d7  00                DCB      0

                          AREA ||i.eap_fast_process_decrypted||, CODE, READONLY, ALIGN=2

                  eap_fast_process_decrypted PROC
;;;1139   
;;;1140   static int eap_fast_process_decrypted(struct eap_sm *sm,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1141   				      struct eap_fast_data *data,
;;;1142   				      struct eap_method_ret *ret,
;;;1143   				      const struct eap_hdr *req,
;;;1144   				      struct wpabuf *decrypted,
;;;1145   				      struct wpabuf **out_data)
;;;1146   {
000004  b08d              SUB      sp,sp,#0x34
000006  4681              MOV      r9,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
00000c  461e              MOV      r6,r3
00000e  e9ddab16          LDRD     r10,r11,[sp,#0x58]
;;;1147   	struct wpabuf *resp = NULL, *tmp;
000012  2000              MOVS     r0,#0
000014  900c              STR      r0,[sp,#0x30]
;;;1148   	struct eap_fast_tlv_parse tlv;
;;;1149   	int failed = 0;
000016  4680              MOV      r8,r0
;;;1150   
;;;1151   	if (eap_fast_parse_decrypted(decrypted, &tlv, &resp) < 0)
000018  aa0c              ADD      r2,sp,#0x30
00001a  a903              ADD      r1,sp,#0xc
00001c  4650              MOV      r0,r10
00001e  f7fffffe          BL       eap_fast_parse_decrypted
000022  2800              CMP      r0,#0
000024  da03              BGE      |L27.46|
;;;1152   		return 0;
000026  2000              MOVS     r0,#0
                  |L27.40|
;;;1153   	if (resp)
;;;1154   		return eap_fast_encrypt_response(sm, data, resp,
;;;1155   						 req->identifier, out_data);
;;;1156   
;;;1157   	if (tlv.result == EAP_TLV_RESULT_FAILURE) {
;;;1158   		resp = eap_fast_tlv_result(EAP_TLV_RESULT_FAILURE, 0);
;;;1159   		return eap_fast_encrypt_response(sm, data, resp,
;;;1160   						 req->identifier, out_data);
;;;1161   	}
;;;1162   
;;;1163   	if (tlv.iresult == EAP_TLV_RESULT_FAILURE) {
;;;1164   		resp = eap_fast_tlv_result(EAP_TLV_RESULT_FAILURE, 1);
;;;1165   		return eap_fast_encrypt_response(sm, data, resp,
;;;1166   						 req->identifier, out_data);
;;;1167   	}
;;;1168   
;;;1169   	if (tlv.crypto_binding) {
;;;1170   		tmp = eap_fast_process_crypto_binding(sm, data, ret,
;;;1171   						      tlv.crypto_binding,
;;;1172   						      tlv.crypto_binding_len);
;;;1173   		if (tmp == NULL)
;;;1174   			failed = 1;
;;;1175   		else
;;;1176   			resp = wpabuf_concat(resp, tmp);
;;;1177   	}
;;;1178   
;;;1179   	if (tlv.iresult == EAP_TLV_RESULT_SUCCESS) {
;;;1180   		tmp = eap_fast_tlv_result(failed ? EAP_TLV_RESULT_FAILURE :
;;;1181   					  EAP_TLV_RESULT_SUCCESS, 1);
;;;1182   		resp = wpabuf_concat(resp, tmp);
;;;1183   	}
;;;1184   
;;;1185   	if (tlv.eap_payload_tlv) {
;;;1186   		tmp = eap_fast_process_eap_payload_tlv(
;;;1187   			sm, data, ret, req, tlv.eap_payload_tlv,
;;;1188   			tlv.eap_payload_tlv_len);
;;;1189   		resp = wpabuf_concat(resp, tmp);
;;;1190   	}
;;;1191   
;;;1192   	if (tlv.pac && tlv.result != EAP_TLV_RESULT_SUCCESS) {
;;;1193   		wpa_printf(MSG_DEBUG, "EAP-FAST: PAC TLV without Result TLV "
;;;1194   			   "acknowledging success");
;;;1195   		failed = 1;
;;;1196   	} else if (tlv.pac && tlv.result == EAP_TLV_RESULT_SUCCESS) {
;;;1197   		tmp = eap_fast_process_pac(sm, data, ret, tlv.pac,
;;;1198   					   tlv.pac_len);
;;;1199   		resp = wpabuf_concat(resp, tmp);
;;;1200   	}
;;;1201   
;;;1202   	if (data->current_pac == NULL && data->provisioning &&
;;;1203   	    !data->anon_provisioning && !tlv.pac &&
;;;1204   	    (tlv.iresult == EAP_TLV_RESULT_SUCCESS ||
;;;1205   	     tlv.result == EAP_TLV_RESULT_SUCCESS)) {
;;;1206   		/*
;;;1207   		 * Need to request Tunnel PAC when using authenticated
;;;1208   		 * provisioning.
;;;1209   		 */
;;;1210   		wpa_printf(MSG_DEBUG, "EAP-FAST: Request Tunnel PAC");
;;;1211   		tmp = eap_fast_pac_request();
;;;1212   		resp = wpabuf_concat(resp, tmp);
;;;1213   	}
;;;1214   
;;;1215   	if (tlv.result == EAP_TLV_RESULT_SUCCESS && !failed) {
;;;1216   		tmp = eap_fast_tlv_result(EAP_TLV_RESULT_SUCCESS, 0);
;;;1217   		resp = wpabuf_concat(tmp, resp);
;;;1218   	} else if (failed) {
;;;1219   		tmp = eap_fast_tlv_result(EAP_TLV_RESULT_FAILURE, 0);
;;;1220   		resp = wpabuf_concat(tmp, resp);
;;;1221   	}
;;;1222   
;;;1223   	if (resp && tlv.result == EAP_TLV_RESULT_SUCCESS && !failed &&
;;;1224   	    tlv.crypto_binding && data->phase2_success) {
;;;1225   		if (data->anon_provisioning) {
;;;1226   			wpa_printf(MSG_DEBUG, "EAP-FAST: Unauthenticated "
;;;1227   				   "provisioning completed successfully.");
;;;1228   			ret->methodState = METHOD_DONE;
;;;1229   			ret->decision = DECISION_FAIL;
;;;1230   		} else {
;;;1231   			wpa_printf(MSG_DEBUG, "EAP-FAST: Authentication "
;;;1232   				   "completed successfully.");
;;;1233   			if (data->provisioning)
;;;1234   				ret->methodState = METHOD_MAY_CONT;
;;;1235   			else
;;;1236   				ret->methodState = METHOD_DONE;
;;;1237   			ret->decision = DECISION_UNCOND_SUCC;
;;;1238   		}
;;;1239   	}
;;;1240   
;;;1241   	if (resp == NULL) {
;;;1242   		wpa_printf(MSG_DEBUG, "EAP-FAST: No recognized TLVs - send "
;;;1243   			   "empty response packet");
;;;1244   		resp = wpabuf_alloc(1);
;;;1245   	}
;;;1246   
;;;1247   	return eap_fast_encrypt_response(sm, data, resp, req->identifier,
;;;1248   					 out_data);
;;;1249   }
000028  b00d              ADD      sp,sp,#0x34
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L27.46|
00002e  980c              LDR      r0,[sp,#0x30]         ;1153
000030  b140              CBZ      r0,|L27.68|
000032  f8cdb000          STR      r11,[sp,#0]           ;1154
000036  7873              LDRB     r3,[r6,#1]            ;1154
000038  4621              MOV      r1,r4                 ;1154
00003a  4648              MOV      r0,r9                 ;1154
00003c  9a0c              LDR      r2,[sp,#0x30]         ;1154
00003e  f7fffffe          BL       eap_fast_encrypt_response
000042  e7f1              B        |L27.40|
                  |L27.68|
000044  9808              LDR      r0,[sp,#0x20]         ;1157
000046  2802              CMP      r0,#2                 ;1157
000048  d10c              BNE      |L27.100|
00004a  2100              MOVS     r1,#0                 ;1158
00004c  f7fffffe          BL       eap_fast_tlv_result
000050  900c              STR      r0,[sp,#0x30]         ;1158
000052  f8cdb000          STR      r11,[sp,#0]           ;1159
000056  7873              LDRB     r3,[r6,#1]            ;1159
000058  4621              MOV      r1,r4                 ;1159
00005a  4648              MOV      r0,r9                 ;1159
00005c  9a0c              LDR      r2,[sp,#0x30]         ;1159
00005e  f7fffffe          BL       eap_fast_encrypt_response
000062  e7e1              B        |L27.40|
                  |L27.100|
000064  9807              LDR      r0,[sp,#0x1c]         ;1163
000066  2802              CMP      r0,#2                 ;1163
000068  d10c              BNE      |L27.132|
00006a  2101              MOVS     r1,#1                 ;1164
00006c  f7fffffe          BL       eap_fast_tlv_result
000070  900c              STR      r0,[sp,#0x30]         ;1164
000072  f8cdb000          STR      r11,[sp,#0]           ;1165
000076  7873              LDRB     r3,[r6,#1]            ;1165
000078  4621              MOV      r1,r4                 ;1165
00007a  4648              MOV      r0,r9                 ;1165
00007c  9a0c              LDR      r2,[sp,#0x30]         ;1165
00007e  f7fffffe          BL       eap_fast_encrypt_response
000082  e7d1              B        |L27.40|
                  |L27.132|
000084  9805              LDR      r0,[sp,#0x14]         ;1169
000086  b188              CBZ      r0,|L27.172|
000088  9b06              LDR      r3,[sp,#0x18]         ;1170
00008a  9300              STR      r3,[sp,#0]            ;1170
00008c  462a              MOV      r2,r5                 ;1170
00008e  4621              MOV      r1,r4                 ;1170
000090  4648              MOV      r0,r9                 ;1170
000092  9b05              LDR      r3,[sp,#0x14]         ;1170
000094  f7fffffe          BL       eap_fast_process_crypto_binding
000098  4607              MOV      r7,r0                 ;1170
00009a  b917              CBNZ     r7,|L27.162|
00009c  f04f0801          MOV      r8,#1                 ;1174
0000a0  e004              B        |L27.172|
                  |L27.162|
0000a2  4639              MOV      r1,r7                 ;1176
0000a4  980c              LDR      r0,[sp,#0x30]         ;1176
0000a6  f7fffffe          BL       wpabuf_concat
0000aa  900c              STR      r0,[sp,#0x30]         ;1176
                  |L27.172|
0000ac  9807              LDR      r0,[sp,#0x1c]         ;1179
0000ae  2801              CMP      r0,#1                 ;1179
0000b0  d10f              BNE      |L27.210|
0000b2  f1b80f00          CMP      r8,#0                 ;1180
0000b6  d001              BEQ      |L27.188|
0000b8  2102              MOVS     r1,#2                 ;1180
0000ba  e000              B        |L27.190|
                  |L27.188|
0000bc  2101              MOVS     r1,#1                 ;1181
                  |L27.190|
0000be  4608              MOV      r0,r1                 ;1181
0000c0  2101              MOVS     r1,#1                 ;1181
0000c2  f7fffffe          BL       eap_fast_tlv_result
0000c6  4607              MOV      r7,r0                 ;1181
0000c8  4639              MOV      r1,r7                 ;1182
0000ca  980c              LDR      r0,[sp,#0x30]         ;1182
0000cc  f7fffffe          BL       wpabuf_concat
0000d0  900c              STR      r0,[sp,#0x30]         ;1182
                  |L27.210|
0000d2  9803              LDR      r0,[sp,#0xc]          ;1185
0000d4  b178              CBZ      r0,|L27.246|
0000d6  e9dd2303          LDRD     r2,r3,[sp,#0xc]       ;1186
0000da  e9cd2300          STRD     r2,r3,[sp,#0]         ;1186
0000de  4633              MOV      r3,r6                 ;1186
0000e0  462a              MOV      r2,r5                 ;1186
0000e2  4621              MOV      r1,r4                 ;1186
0000e4  4648              MOV      r0,r9                 ;1186
0000e6  f7fffffe          BL       eap_fast_process_eap_payload_tlv
0000ea  4607              MOV      r7,r0                 ;1186
0000ec  4639              MOV      r1,r7                 ;1189
0000ee  980c              LDR      r0,[sp,#0x30]         ;1189
0000f0  f7fffffe          BL       wpabuf_concat
0000f4  900c              STR      r0,[sp,#0x30]         ;1189
                  |L27.246|
0000f6  980a              LDR      r0,[sp,#0x28]         ;1192
0000f8  b148              CBZ      r0,|L27.270|
0000fa  9808              LDR      r0,[sp,#0x20]         ;1192
0000fc  2801              CMP      r0,#1                 ;1192
0000fe  d006              BEQ      |L27.270|
000100  a144              ADR      r1,|L27.532|
000102  2000              MOVS     r0,#0                 ;1193
000104  f7fffffe          BL       wpa_printf
000108  f04f0801          MOV      r8,#1                 ;1195
00010c  e012              B        |L27.308|
                  |L27.270|
00010e  980a              LDR      r0,[sp,#0x28]         ;1196
000110  b180              CBZ      r0,|L27.308|
000112  9808              LDR      r0,[sp,#0x20]         ;1196
000114  2801              CMP      r0,#1                 ;1196
000116  d10d              BNE      |L27.308|
000118  9b0b              LDR      r3,[sp,#0x2c]         ;1197
00011a  9300              STR      r3,[sp,#0]            ;1197
00011c  462a              MOV      r2,r5                 ;1197
00011e  4621              MOV      r1,r4                 ;1197
000120  4648              MOV      r0,r9                 ;1197
000122  9b0a              LDR      r3,[sp,#0x28]         ;1197
000124  f7fffffe          BL       eap_fast_process_pac
000128  4607              MOV      r7,r0                 ;1197
00012a  4639              MOV      r1,r7                 ;1199
00012c  980c              LDR      r0,[sp,#0x30]         ;1199
00012e  f7fffffe          BL       wpabuf_concat
000132  900c              STR      r0,[sp,#0x30]         ;1199
                  |L27.308|
000134  f8d400ec          LDR      r0,[r4,#0xec]         ;1202
000138  b9b8              CBNZ     r0,|L27.362|
00013a  6da0              LDR      r0,[r4,#0x58]         ;1202
00013c  b1a8              CBZ      r0,|L27.362|
00013e  6de0              LDR      r0,[r4,#0x5c]         ;1203
000140  b998              CBNZ     r0,|L27.362|
000142  980a              LDR      r0,[sp,#0x28]         ;1203
000144  b988              CBNZ     r0,|L27.362|
000146  9807              LDR      r0,[sp,#0x1c]         ;1204
000148  2801              CMP      r0,#1                 ;1204
00014a  d002              BEQ      |L27.338|
00014c  9808              LDR      r0,[sp,#0x20]         ;1205
00014e  2801              CMP      r0,#1                 ;1205
000150  d10b              BNE      |L27.362|
                  |L27.338|
000152  a13f              ADR      r1,|L27.592|
000154  2000              MOVS     r0,#0                 ;1210
000156  f7fffffe          BL       wpa_printf
00015a  f7fffffe          BL       eap_fast_pac_request
00015e  4607              MOV      r7,r0                 ;1211
000160  4639              MOV      r1,r7                 ;1212
000162  980c              LDR      r0,[sp,#0x30]         ;1212
000164  f7fffffe          BL       wpabuf_concat
000168  900c              STR      r0,[sp,#0x30]         ;1212
                  |L27.362|
00016a  9808              LDR      r0,[sp,#0x20]         ;1215
00016c  2801              CMP      r0,#1                 ;1215
00016e  d10c              BNE      |L27.394|
000170  f1b80f00          CMP      r8,#0                 ;1215
000174  d109              BNE      |L27.394|
000176  2100              MOVS     r1,#0                 ;1216
000178  f7fffffe          BL       eap_fast_tlv_result
00017c  4607              MOV      r7,r0                 ;1216
00017e  4638              MOV      r0,r7                 ;1217
000180  990c              LDR      r1,[sp,#0x30]         ;1217
000182  f7fffffe          BL       wpabuf_concat
000186  900c              STR      r0,[sp,#0x30]         ;1217
000188  e00c              B        |L27.420|
                  |L27.394|
00018a  f1b80f00          CMP      r8,#0                 ;1218
00018e  d009              BEQ      |L27.420|
000190  2100              MOVS     r1,#0                 ;1219
000192  2002              MOVS     r0,#2                 ;1219
000194  f7fffffe          BL       eap_fast_tlv_result
000198  4607              MOV      r7,r0                 ;1219
00019a  4638              MOV      r0,r7                 ;1220
00019c  990c              LDR      r1,[sp,#0x30]         ;1220
00019e  f7fffffe          BL       wpabuf_concat
0001a2  900c              STR      r0,[sp,#0x30]         ;1220
                  |L27.420|
0001a4  980c              LDR      r0,[sp,#0x30]         ;1223
0001a6  b308              CBZ      r0,|L27.492|
0001a8  9808              LDR      r0,[sp,#0x20]         ;1223
0001aa  2801              CMP      r0,#1                 ;1223
0001ac  d11e              BNE      |L27.492|
0001ae  f1b80f00          CMP      r8,#0                 ;1223
0001b2  d11b              BNE      |L27.492|
0001b4  9805              LDR      r0,[sp,#0x14]         ;1224
0001b6  b1c8              CBZ      r0,|L27.492|
0001b8  6ba0              LDR      r0,[r4,#0x38]         ;1224
0001ba  b1b8              CBZ      r0,|L27.492|
0001bc  6de0              LDR      r0,[r4,#0x5c]         ;1225
0001be  b140              CBZ      r0,|L27.466|
0001c0  a12b              ADR      r1,|L27.624|
0001c2  2000              MOVS     r0,#0                 ;1226
0001c4  f7fffffe          BL       wpa_printf
0001c8  2004              MOVS     r0,#4                 ;1228
0001ca  7128              STRB     r0,[r5,#4]            ;1228
0001cc  2000              MOVS     r0,#0                 ;1229
0001ce  7168              STRB     r0,[r5,#5]            ;1229
0001d0  e00c              B        |L27.492|
                  |L27.466|
0001d2  a137              ADR      r1,|L27.688|
0001d4  2000              MOVS     r0,#0                 ;1231
0001d6  f7fffffe          BL       wpa_printf
0001da  6da0              LDR      r0,[r4,#0x58]         ;1233
0001dc  b110              CBZ      r0,|L27.484|
0001de  2003              MOVS     r0,#3                 ;1234
0001e0  7128              STRB     r0,[r5,#4]            ;1234
0001e2  e001              B        |L27.488|
                  |L27.484|
0001e4  2004              MOVS     r0,#4                 ;1236
0001e6  7128              STRB     r0,[r5,#4]            ;1236
                  |L27.488|
0001e8  2002              MOVS     r0,#2                 ;1237
0001ea  7168              STRB     r0,[r5,#5]            ;1237
                  |L27.492|
0001ec  980c              LDR      r0,[sp,#0x30]         ;1241
0001ee  b938              CBNZ     r0,|L27.512|
0001f0  a13c              ADR      r1,|L27.740|
0001f2  2000              MOVS     r0,#0                 ;1242
0001f4  f7fffffe          BL       wpa_printf
0001f8  2001              MOVS     r0,#1                 ;1244
0001fa  f7fffffe          BL       wpabuf_alloc
0001fe  900c              STR      r0,[sp,#0x30]         ;1244
                  |L27.512|
000200  f8cdb000          STR      r11,[sp,#0]           ;1247
000204  7873              LDRB     r3,[r6,#1]            ;1247
000206  4621              MOV      r1,r4                 ;1247
000208  4648              MOV      r0,r9                 ;1247
00020a  9a0c              LDR      r2,[sp,#0x30]         ;1247
00020c  f7fffffe          BL       eap_fast_encrypt_response
000210  e70a              B        |L27.40|
;;;1250   
                          ENDP

000212  0000              DCW      0x0000
                  |L27.532|
000214  4541502d          DCB      "EAP-FAST: PAC TLV without Result TLV acknowledging succ"
000218  46415354
00021c  3a205041
000220  4320544c
000224  56207769
000228  74686f75
00022c  74205265
000230  73756c74
000234  20544c56
000238  2061636b
00023c  6e6f776c
000240  65646769
000244  6e672073
000248  756363  
00024b  65737300          DCB      "ess",0
00024f  00                DCB      0
                  |L27.592|
000250  4541502d          DCB      "EAP-FAST: Request Tunnel PAC",0
000254  46415354
000258  3a205265
00025c  71756573
000260  74205475
000264  6e6e656c
000268  20504143
00026c  00      
00026d  00                DCB      0
00026e  00                DCB      0
00026f  00                DCB      0
                  |L27.624|
000270  4541502d          DCB      "EAP-FAST: Unauthenticated provisioning completed succes"
000274  46415354
000278  3a20556e
00027c  61757468
000280  656e7469
000284  63617465
000288  64207072
00028c  6f766973
000290  696f6e69
000294  6e672063
000298  6f6d706c
00029c  65746564
0002a0  20737563
0002a4  636573  
0002a7  7366756c          DCB      "sfully.",0
0002ab  6c792e00
0002af  00                DCB      0
                  |L27.688|
0002b0  4541502d          DCB      "EAP-FAST: Authentication completed successfully.",0
0002b4  46415354
0002b8  3a204175
0002bc  7468656e
0002c0  74696361
0002c4  74696f6e
0002c8  20636f6d
0002cc  706c6574
0002d0  65642073
0002d4  75636365
0002d8  73736675
0002dc  6c6c792e
0002e0  00      
0002e1  00                DCB      0
0002e2  00                DCB      0
0002e3  00                DCB      0
                  |L27.740|
0002e4  4541502d          DCB      "EAP-FAST: No recognized TLVs - send empty response pack"
0002e8  46415354
0002ec  3a204e6f
0002f0  20726563
0002f4  6f676e69
0002f8  7a656420
0002fc  544c5673
000300  202d2073
000304  656e6420
000308  656d7074
00030c  79207265
000310  73706f6e
000314  73652070
000318  61636b  
00031b  657400            DCB      "et",0
00031e  00                DCB      0
00031f  00                DCB      0

                          AREA ||i.eap_fast_process_eap_payload_tlv||, CODE, READONLY, ALIGN=2

                  eap_fast_process_eap_payload_tlv PROC
;;;542    
;;;543    static struct wpabuf * eap_fast_process_eap_payload_tlv(
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;544    	struct eap_sm *sm, struct eap_fast_data *data,
;;;545    	struct eap_method_ret *ret, const struct eap_hdr *req,
;;;546    	u8 *eap_payload_tlv, size_t eap_payload_tlv_len)
;;;547    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
00000c  e9dd560a          LDRD     r5,r6,[sp,#0x28]
;;;548    	struct eap_hdr *hdr;
;;;549    	struct wpabuf *resp = NULL;
000010  2000              MOVS     r0,#0
000012  9001              STR      r0,[sp,#4]
;;;550    
;;;551    	if (eap_payload_tlv_len < sizeof(*hdr)) {
000014  2e04              CMP      r6,#4
000016  d206              BCS      |L28.38|
;;;552    		wpa_printf(MSG_DEBUG, "EAP-FAST: too short EAP "
000018  4632              MOV      r2,r6
00001a  a11a              ADR      r1,|L28.132|
00001c  f7fffffe          BL       wpa_printf
;;;553    			   "Payload TLV (len=%lu)",
;;;554    			   (unsigned long) eap_payload_tlv_len);
;;;555    		return NULL;
000020  2000              MOVS     r0,#0
                  |L28.34|
;;;556    	}
;;;557    
;;;558    	hdr = (struct eap_hdr *) eap_payload_tlv;
;;;559    	if (be_to_host16(hdr->length) > eap_payload_tlv_len) {
;;;560    		wpa_printf(MSG_DEBUG, "EAP-FAST: EAP packet overflow in "
;;;561    			   "EAP Payload TLV");
;;;562    		return NULL;
;;;563    	}
;;;564    
;;;565    	if (hdr->code != EAP_CODE_REQUEST) {
;;;566    		wpa_printf(MSG_INFO, "EAP-FAST: Unexpected code=%d in "
;;;567    			   "Phase 2 EAP header", hdr->code);
;;;568    		return NULL;
;;;569    	}
;;;570    
;;;571    	if (eap_fast_phase2_request(sm, data, ret, hdr, &resp)) {
;;;572    		wpa_printf(MSG_INFO, "EAP-FAST: Phase2 Request processing "
;;;573    			   "failed");
;;;574    		return NULL;
;;;575    	}
;;;576    
;;;577    	return eap_fast_tlv_eap_payload(resp);
;;;578    }
000022  e8bd87fc          POP      {r2-r10,pc}
                  |L28.38|
000026  462c              MOV      r4,r5                 ;558
000028  8860              LDRH     r0,[r4,#2]            ;559
00002a  f44f417f          MOV      r1,#0xff00            ;559
00002e  ea012000          AND      r0,r1,r0,LSL #8       ;559
000032  8861              LDRH     r1,[r4,#2]            ;559
000034  ea402011          ORR      r0,r0,r1,LSR #8       ;559
000038  42b0              CMP      r0,r6                 ;559
00003a  d905              BLS      |L28.72|
00003c  a11d              ADR      r1,|L28.180|
00003e  2000              MOVS     r0,#0                 ;560
000040  f7fffffe          BL       wpa_printf
000044  2000              MOVS     r0,#0                 ;562
000046  e7ec              B        |L28.34|
                  |L28.72|
000048  7820              LDRB     r0,[r4,#0]            ;565
00004a  2801              CMP      r0,#1                 ;565
00004c  d006              BEQ      |L28.92|
00004e  7822              LDRB     r2,[r4,#0]            ;566
000050  a125              ADR      r1,|L28.232|
000052  2000              MOVS     r0,#0                 ;566
000054  f7fffffe          BL       wpa_printf
000058  2000              MOVS     r0,#0                 ;568
00005a  e7e2              B        |L28.34|
                  |L28.92|
00005c  ab01              ADD      r3,sp,#4              ;571
00005e  9300              STR      r3,[sp,#0]            ;571
000060  4623              MOV      r3,r4                 ;571
000062  464a              MOV      r2,r9                 ;571
000064  4641              MOV      r1,r8                 ;571
000066  4638              MOV      r0,r7                 ;571
000068  f7fffffe          BL       eap_fast_phase2_request
00006c  b128              CBZ      r0,|L28.122|
00006e  a12b              ADR      r1,|L28.284|
000070  2000              MOVS     r0,#0                 ;572
000072  f7fffffe          BL       wpa_printf
000076  2000              MOVS     r0,#0                 ;574
000078  e7d3              B        |L28.34|
                  |L28.122|
00007a  9801              LDR      r0,[sp,#4]            ;577
00007c  f7fffffe          BL       eap_fast_tlv_eap_payload
000080  e7cf              B        |L28.34|
;;;579    
                          ENDP

000082  0000              DCW      0x0000
                  |L28.132|
000084  4541502d          DCB      "EAP-FAST: too short EAP Payload TLV (len=%lu)",0
000088  46415354
00008c  3a20746f
000090  6f207368
000094  6f727420
000098  45415020
00009c  5061796c
0000a0  6f616420
0000a4  544c5620
0000a8  286c656e
0000ac  3d256c75
0000b0  2900    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L28.180|
0000b4  4541502d          DCB      "EAP-FAST: EAP packet overflow in EAP Payload TLV",0
0000b8  46415354
0000bc  3a204541
0000c0  50207061
0000c4  636b6574
0000c8  206f7665
0000cc  72666c6f
0000d0  7720696e
0000d4  20454150
0000d8  20506179
0000dc  6c6f6164
0000e0  20544c56
0000e4  00      
0000e5  00                DCB      0
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L28.232|
0000e8  4541502d          DCB      "EAP-FAST: Unexpected code=%d in Phase 2 EAP header",0
0000ec  46415354
0000f0  3a20556e
0000f4  65787065
0000f8  63746564
0000fc  20636f64
000100  653d2564
000104  20696e20
000108  50686173
00010c  65203220
000110  45415020
000114  68656164
000118  657200  
00011b  00                DCB      0
                  |L28.284|
00011c  4541502d          DCB      "EAP-FAST: Phase2 Request processing failed",0
000120  46415354
000124  3a205068
000128  61736532
00012c  20526571
000130  75657374
000134  2070726f
000138  63657373
00013c  696e6720
000140  6661696c
000144  656400  
000147  00                DCB      0

                          AREA ||i.eap_fast_process_pac||, CODE, READONLY, ALIGN=2

                  eap_fast_process_pac PROC
;;;998    
;;;999    static struct wpabuf * eap_fast_process_pac(struct eap_sm *sm,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;1000   					    struct eap_fast_data *data,
;;;1001   					    struct eap_method_ret *ret,
;;;1002   					    u8 *pac, size_t pac_len)
;;;1003   {
000004  b095              SUB      sp,sp,#0x54
000006  4680              MOV      r8,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
00000c  461e              MOV      r6,r3
00000e  f8dd9070          LDR      r9,[sp,#0x70]
;;;1004   	struct eap_peer_config *config = eap_get_config(sm);
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       eap_get_config
000018  4607              MOV      r7,r0
;;;1005   	struct eap_fast_pac entry;
;;;1006   
;;;1007   	os_memset(&entry, 0, sizeof(entry));
00001a  2250              MOVS     r2,#0x50
00001c  2100              MOVS     r1,#0
00001e  a801              ADD      r0,sp,#4
000020  f7fffffe          BL       os_memset
;;;1008   	if (eap_fast_process_pac_tlv(&entry, pac, pac_len) ||
000024  464a              MOV      r2,r9
000026  4631              MOV      r1,r6
000028  a801              ADD      r0,sp,#4
00002a  f7fffffe          BL       eap_fast_process_pac_tlv
00002e  b918              CBNZ     r0,|L29.56|
;;;1009   	    eap_fast_process_pac_info(&entry))
000030  a801              ADD      r0,sp,#4
000032  f7fffffe          BL       eap_fast_process_pac_info
000036  b118              CBZ      r0,|L29.64|
                  |L29.56|
;;;1010   		return NULL;
000038  2000              MOVS     r0,#0
                  |L29.58|
;;;1011   
;;;1012   	eap_fast_add_pac(&data->pac, &data->current_pac, &entry);
;;;1013   	eap_fast_pac_list_truncate(data->pac, data->max_pac_list_len);
;;;1014   	if (data->use_pac_binary_format)
;;;1015   		eap_fast_save_pac_bin(sm, data->pac, config->pac_file);
;;;1016   	else
;;;1017   		eap_fast_save_pac(sm, data->pac, config->pac_file);
;;;1018   
;;;1019   	if (data->provisioning) {
;;;1020   		if (data->anon_provisioning) {
;;;1021   			/*
;;;1022   			 * Unauthenticated provisioning does not provide keying
;;;1023   			 * material and must end with an EAP-Failure.
;;;1024   			 * Authentication will be done separately after this.
;;;1025   			 */
;;;1026   			data->success = 0;
;;;1027   			ret->decision = DECISION_FAIL;
;;;1028   		} else {
;;;1029   			/*
;;;1030   			 * Server may or may not allow authenticated
;;;1031   			 * provisioning also for key generation.
;;;1032   			 */
;;;1033   			ret->decision = DECISION_COND_SUCC;
;;;1034   		}
;;;1035   		wpa_printf(MSG_DEBUG, "EAP-FAST: Send PAC-Acknowledgement TLV "
;;;1036   			   "- Provisioning completed successfully");
;;;1037   	} else {
;;;1038   		/*
;;;1039   		 * This is PAC refreshing, i.e., normal authentication that is
;;;1040   		 * expected to be completed with an EAP-Success.
;;;1041   		 */
;;;1042   		wpa_printf(MSG_DEBUG, "EAP-FAST: Send PAC-Acknowledgement TLV "
;;;1043   			   "- PAC refreshing completed successfully");
;;;1044   		ret->decision = DECISION_UNCOND_SUCC;
;;;1045   	}
;;;1046   	ret->methodState = METHOD_DONE;
;;;1047   	return eap_fast_tlv_pac_ack();
;;;1048   }
00003a  b015              ADD      sp,sp,#0x54
00003c  e8bd83f0          POP      {r4-r9,pc}
                  |L29.64|
000040  aa01              ADD      r2,sp,#4              ;1012
000042  f10401ec          ADD      r1,r4,#0xec           ;1012
000046  1f08              SUBS     r0,r1,#4              ;1012
000048  f7fffffe          BL       eap_fast_add_pac
00004c  f10404e8          ADD      r4,r4,#0xe8           ;1013
000050  68a1              LDR      r1,[r4,#8]            ;1013
000052  6820              LDR      r0,[r4,#0]            ;1013
000054  f7fffffe          BL       eap_fast_pac_list_truncate
000058  68e0              LDR      r0,[r4,#0xc]          ;1014
00005a  f1a404e8          SUB      r4,r4,#0xe8           ;1014
00005e  b138              CBZ      r0,|L29.112|
000060  f8d720bc          LDR      r2,[r7,#0xbc]         ;1015
000064  4640              MOV      r0,r8                 ;1015
000066  f8d410e8          LDR      r1,[r4,#0xe8]         ;1015
00006a  f7fffffe          BL       eap_fast_save_pac_bin
00006e  e006              B        |L29.126|
                  |L29.112|
000070  f8d720bc          LDR      r2,[r7,#0xbc]         ;1017
000074  4640              MOV      r0,r8                 ;1017
000076  f8d410e8          LDR      r1,[r4,#0xe8]         ;1017
00007a  f7fffffe          BL       eap_fast_save_pac
                  |L29.126|
00007e  6da0              LDR      r0,[r4,#0x58]         ;1019
000080  b168              CBZ      r0,|L29.158|
000082  6de0              LDR      r0,[r4,#0x5c]         ;1020
000084  b120              CBZ      r0,|L29.144|
000086  2000              MOVS     r0,#0                 ;1026
000088  f8c400e4          STR      r0,[r4,#0xe4]         ;1026
00008c  7168              STRB     r0,[r5,#5]            ;1027
00008e  e001              B        |L29.148|
                  |L29.144|
000090  2001              MOVS     r0,#1                 ;1033
000092  7168              STRB     r0,[r5,#5]            ;1033
                  |L29.148|
000094  4908              LDR      r1,|L29.184|
000096  2000              MOVS     r0,#0                 ;1035
000098  f7fffffe          BL       wpa_printf
00009c  e006              B        |L29.172|
                  |L29.158|
00009e  4906              LDR      r1,|L29.184|
0000a0  3150              ADDS     r1,r1,#0x50           ;1042
0000a2  2000              MOVS     r0,#0                 ;1042
0000a4  f7fffffe          BL       wpa_printf
0000a8  2002              MOVS     r0,#2                 ;1044
0000aa  7168              STRB     r0,[r5,#5]            ;1044
                  |L29.172|
0000ac  2004              MOVS     r0,#4                 ;1046
0000ae  7128              STRB     r0,[r5,#4]            ;1046
0000b0  f7fffffe          BL       eap_fast_tlv_pac_ack
0000b4  e7c1              B        |L29.58|
;;;1049   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L29.184|
                          DCD      ||.constdata||+0x1a4

                          AREA ||i.eap_fast_process_pac_info||, CODE, READONLY, ALIGN=2

                  eap_fast_process_pac_info PROC
;;;953    
;;;954    static int eap_fast_process_pac_info(struct eap_fast_pac *entry)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;955    {
000004  4605              MOV      r5,r0
;;;956    	struct pac_tlv_hdr *hdr;
;;;957    	u8 *pos;
;;;958    	size_t left, len;
;;;959    	int type;
;;;960    
;;;961    	/* RFC 5422, Section 4.2.4 */
;;;962    
;;;963    	/* PAC-Type defaults to Tunnel PAC (Type 1) */
;;;964    	entry->pac_type = PAC_TYPE_TUNNEL_PAC;
000006  2001              MOVS     r0,#1
000008  f8a5004c          STRH     r0,[r5,#0x4c]
;;;965    
;;;966    	pos = entry->pac_info;
00000c  6aec              LDR      r4,[r5,#0x2c]
;;;967    	left = entry->pac_info_len;
00000e  6b2f              LDR      r7,[r5,#0x30]
;;;968    	while (left > sizeof(*hdr)) {
000010  e02d              B        |L30.110|
                  |L30.18|
;;;969    		hdr = (struct pac_tlv_hdr *) pos;
000012  4626              MOV      r6,r4
;;;970    		type = be_to_host16(hdr->type);
000014  8830              LDRH     r0,[r6,#0]
000016  f44f417f          MOV      r1,#0xff00
00001a  ea012000          AND      r0,r1,r0,LSL #8
00001e  8831              LDRH     r1,[r6,#0]
000020  ea402911          ORR      r9,r0,r1,LSR #8
;;;971    		len = be_to_host16(hdr->len);
000024  8870              LDRH     r0,[r6,#2]
000026  f44f417f          MOV      r1,#0xff00
00002a  ea012000          AND      r0,r1,r0,LSL #8
00002e  8871              LDRH     r1,[r6,#2]
000030  ea402811          ORR      r8,r0,r1,LSR #8
;;;972    		pos += sizeof(*hdr);
000034  1d24              ADDS     r4,r4,#4
;;;973    		left -= sizeof(*hdr);
000036  1f3f              SUBS     r7,r7,#4
;;;974    		if (len > left) {
000038  45b8              CMP      r8,r7
00003a  d90a              BLS      |L30.82|
;;;975    			wpa_printf(MSG_DEBUG, "EAP-FAST: PAC-Info overrun "
00003c  4643              MOV      r3,r8
00003e  464a              MOV      r2,r9
000040  a112              ADR      r1,|L30.140|
000042  2000              MOVS     r0,#0
000044  9700              STR      r7,[sp,#0]
000046  f7fffffe          BL       wpa_printf
;;;976    				   "(type=%d len=%lu left=%lu)",
;;;977    				   type, (unsigned long) len,
;;;978    				   (unsigned long) left);
;;;979    			return -1;
00004a  f04f30ff          MOV      r0,#0xffffffff
                  |L30.78|
;;;980    		}
;;;981    
;;;982    		if (eap_fast_parse_pac_info(entry, type, pos, len) < 0)
;;;983    			return -1;
;;;984    
;;;985    		pos += len;
;;;986    		left -= len;
;;;987    	}
;;;988    
;;;989    	if (entry->a_id == NULL || entry->a_id_info == NULL) {
;;;990    		wpa_printf(MSG_DEBUG, "EAP-FAST: PAC-Info does not include "
;;;991    			   "all the required fields");
;;;992    		return -1;
;;;993    	}
;;;994    
;;;995    	return 0;
;;;996    }
00004e  e8bd83f8          POP      {r3-r9,pc}
                  |L30.82|
000052  4643              MOV      r3,r8                 ;982
000054  4622              MOV      r2,r4                 ;982
000056  4649              MOV      r1,r9                 ;982
000058  4628              MOV      r0,r5                 ;982
00005a  f7fffffe          BL       eap_fast_parse_pac_info
00005e  2800              CMP      r0,#0                 ;982
000060  da02              BGE      |L30.104|
000062  f04f30ff          MOV      r0,#0xffffffff        ;983
000066  e7f2              B        |L30.78|
                  |L30.104|
000068  4444              ADD      r4,r4,r8              ;985
00006a  eba70708          SUB      r7,r7,r8              ;986
                  |L30.110|
00006e  2f04              CMP      r7,#4                 ;968
000070  d8cf              BHI      |L30.18|
000072  6b68              LDR      r0,[r5,#0x34]         ;989
000074  b108              CBZ      r0,|L30.122|
000076  6c68              LDR      r0,[r5,#0x44]         ;989
000078  b930              CBNZ     r0,|L30.136|
                  |L30.122|
00007a  a112              ADR      r1,|L30.196|
00007c  2000              MOVS     r0,#0                 ;990
00007e  f7fffffe          BL       wpa_printf
000082  f04f30ff          MOV      r0,#0xffffffff        ;992
000086  e7e2              B        |L30.78|
                  |L30.136|
000088  2000              MOVS     r0,#0                 ;995
00008a  e7e0              B        |L30.78|
;;;997    
                          ENDP

                  |L30.140|
00008c  4541502d          DCB      "EAP-FAST: PAC-Info overrun (type=%d len=%lu left=%lu)",0
000090  46415354
000094  3a205041
000098  432d496e
00009c  666f206f
0000a0  76657272
0000a4  756e2028
0000a8  74797065
0000ac  3d256420
0000b0  6c656e3d
0000b4  256c7520
0000b8  6c656674
0000bc  3d256c75
0000c0  2900    
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L30.196|
0000c4  4541502d          DCB      "EAP-FAST: PAC-Info does not include all the required fi"
0000c8  46415354
0000cc  3a205041
0000d0  432d496e
0000d4  666f2064
0000d8  6f657320
0000dc  6e6f7420
0000e0  696e636c
0000e4  75646520
0000e8  616c6c20
0000ec  74686520
0000f0  72657175
0000f4  69726564
0000f8  206669  
0000fb  656c6473          DCB      "elds",0
0000ff  00      

                          AREA ||i.eap_fast_process_pac_tlv||, CODE, READONLY, ALIGN=2

                  eap_fast_process_pac_tlv PROC
;;;832    
;;;833    static int eap_fast_process_pac_tlv(struct eap_fast_pac *entry,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;834    				    u8 *pac, size_t pac_len)
;;;835    {
000004  4680              MOV      r8,r0
000006  468a              MOV      r10,r1
000008  4693              MOV      r11,r2
;;;836    	struct pac_tlv_hdr *hdr;
;;;837    	u8 *pos;
;;;838    	size_t left, len;
;;;839    	int type, pac_key_found = 0;
00000a  2000              MOVS     r0,#0
00000c  9001              STR      r0,[sp,#4]
;;;840    
;;;841    	pos = pac;
00000e  4654              MOV      r4,r10
;;;842    	left = pac_len;
000010  465e              MOV      r6,r11
;;;843    
;;;844    	while (left > sizeof(*hdr)) {
000012  e02a              B        |L31.106|
                  |L31.20|
;;;845    		hdr = (struct pac_tlv_hdr *) pos;
000014  4625              MOV      r5,r4
;;;846    		type = be_to_host16(hdr->type);
000016  8828              LDRH     r0,[r5,#0]
000018  f44f417f          MOV      r1,#0xff00
00001c  ea012000          AND      r0,r1,r0,LSL #8
000020  462c              MOV      r4,r5
000022  8829              LDRH     r1,[r5,#0]
000024  ea402911          ORR      r9,r0,r1,LSR #8
;;;847    		len = be_to_host16(hdr->len);
000028  8868              LDRH     r0,[r5,#2]
00002a  f44f417f          MOV      r1,#0xff00
00002e  ea012000          AND      r0,r1,r0,LSL #8
000032  8869              LDRH     r1,[r5,#2]
000034  ea402711          ORR      r7,r0,r1,LSR #8
;;;848    		pos += sizeof(*hdr);
000038  1d24              ADDS     r4,r4,#4
;;;849    		left -= sizeof(*hdr);
00003a  1f36              SUBS     r6,r6,#4
;;;850    		if (len > left) {
00003c  42b7              CMP      r7,r6
00003e  d90a              BLS      |L31.86|
;;;851    			wpa_printf(MSG_DEBUG, "EAP-FAST: PAC TLV overrun "
000040  463b              MOV      r3,r7
000042  464a              MOV      r2,r9
000044  a112              ADR      r1,|L31.144|
000046  2000              MOVS     r0,#0
000048  9600              STR      r6,[sp,#0]
00004a  f7fffffe          BL       wpa_printf
;;;852    				   "(type=%d len=%lu left=%lu)",
;;;853    				   type, (unsigned long) len,
;;;854    				   (unsigned long) left);
;;;855    			return -1;
00004e  f04f30ff          MOV      r0,#0xffffffff
                  |L31.82|
;;;856    		}
;;;857    
;;;858    		eap_fast_parse_pac_tlv(entry, type, pos, len, &pac_key_found);
;;;859    
;;;860    		pos += len;
;;;861    		left -= len;
;;;862    	}
;;;863    
;;;864    	if (!pac_key_found || !entry->pac_opaque || !entry->pac_info) {
;;;865    		wpa_printf(MSG_DEBUG, "EAP-FAST: PAC TLV does not include "
;;;866    			   "all the required fields");
;;;867    		return -1;
;;;868    	}
;;;869    
;;;870    	return 0;
;;;871    }
000052  e8bd9ffc          POP      {r2-r12,pc}
                  |L31.86|
000056  ab01              ADD      r3,sp,#4              ;858
000058  9300              STR      r3,[sp,#0]            ;858
00005a  463b              MOV      r3,r7                 ;858
00005c  4622              MOV      r2,r4                 ;858
00005e  4649              MOV      r1,r9                 ;858
000060  4640              MOV      r0,r8                 ;858
000062  f7fffffe          BL       eap_fast_parse_pac_tlv
000066  443c              ADD      r4,r4,r7              ;860
000068  1bf6              SUBS     r6,r6,r7              ;861
                  |L31.106|
00006a  2e04              CMP      r6,#4                 ;844
00006c  d8d2              BHI      |L31.20|
00006e  9801              LDR      r0,[sp,#4]            ;864
000070  b128              CBZ      r0,|L31.126|
000072  f8d80024          LDR      r0,[r8,#0x24]         ;864
000076  b110              CBZ      r0,|L31.126|
000078  f8d8002c          LDR      r0,[r8,#0x2c]         ;864
00007c  b930              CBNZ     r0,|L31.140|
                  |L31.126|
00007e  a112              ADR      r1,|L31.200|
000080  2000              MOVS     r0,#0                 ;865
000082  f7fffffe          BL       wpa_printf
000086  f04f30ff          MOV      r0,#0xffffffff        ;867
00008a  e7e2              B        |L31.82|
                  |L31.140|
00008c  2000              MOVS     r0,#0                 ;870
00008e  e7e0              B        |L31.82|
;;;872    
                          ENDP

                  |L31.144|
000090  4541502d          DCB      "EAP-FAST: PAC TLV overrun (type=%d len=%lu left=%lu)",0
000094  46415354
000098  3a205041
00009c  4320544c
0000a0  56206f76
0000a4  65727275
0000a8  6e202874
0000ac  7970653d
0000b0  2564206c
0000b4  656e3d25
0000b8  6c75206c
0000bc  6566743d
0000c0  256c7529
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L31.200|
0000c8  4541502d          DCB      "EAP-FAST: PAC TLV does not include all the required fie"
0000cc  46415354
0000d0  3a205041
0000d4  4320544c
0000d8  5620646f
0000dc  6573206e
0000e0  6f742069
0000e4  6e636c75
0000e8  64652061
0000ec  6c6c2074
0000f0  68652072
0000f4  65717569
0000f8  72656420
0000fc  666965  
0000ff  6c647300          DCB      "lds",0
000103  00                DCB      0

                          AREA ||i.eap_fast_process_start||, CODE, READONLY, ALIGN=2

                  eap_fast_process_start PROC
;;;1438   
;;;1439   static int eap_fast_process_start(struct eap_sm *sm,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1440   				  struct eap_fast_data *data, u8 flags,
;;;1441   				  const u8 *pos, size_t left)
;;;1442   {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;1443   	const u8 *a_id;
;;;1444   	size_t a_id_len;
;;;1445   
;;;1446   	/* EAP-FAST Version negotiation (section 3.1) */
;;;1447   	wpa_printf(MSG_DEBUG, "EAP-FAST: Start (server ver=%d, own ver=%d)",
000010  f0050207          AND      r2,r5,#7
000014  a12e              ADR      r1,|L32.208|
000016  2000              MOVS     r0,#0
000018  6ae3              LDR      r3,[r4,#0x2c]
00001a  f7fffffe          BL       wpa_printf
;;;1448   		   flags & EAP_TLS_VERSION_MASK, data->fast_version);
;;;1449   	if ((flags & EAP_TLS_VERSION_MASK) < data->fast_version)
00001e  f0050007          AND      r0,r5,#7
000022  6ae1              LDR      r1,[r4,#0x2c]
000024  4288              CMP      r0,r1
000026  da02              BGE      |L32.46|
;;;1450   		data->fast_version = flags & EAP_TLS_VERSION_MASK;
000028  f0050007          AND      r0,r5,#7
00002c  62e0              STR      r0,[r4,#0x2c]
                  |L32.46|
;;;1451   	wpa_printf(MSG_DEBUG, "EAP-FAST: Using FAST version %d",
00002e  a133              ADR      r1,|L32.252|
000030  2000              MOVS     r0,#0
000032  6ae2              LDR      r2,[r4,#0x2c]
000034  f7fffffe          BL       wpa_printf
;;;1452   		   data->fast_version);
;;;1453   
;;;1454   	a_id = eap_fast_get_a_id(pos, left, &a_id_len);
000038  466a              MOV      r2,sp
00003a  4641              MOV      r1,r8
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       eap_fast_get_a_id
000042  4681              MOV      r9,r0
;;;1455   	eap_fast_select_pac(data, a_id, a_id_len);
000044  4649              MOV      r1,r9
000046  4620              MOV      r0,r4
000048  9a00              LDR      r2,[sp,#0]
00004a  f7fffffe          BL       eap_fast_select_pac
;;;1456   
;;;1457   	if (data->resuming && data->current_pac) {
00004e  6ce0              LDR      r0,[r4,#0x4c]
000050  b180              CBZ      r0,|L32.116|
000052  f8d400ec          LDR      r0,[r4,#0xec]
000056  b168              CBZ      r0,|L32.116|
;;;1458   		wpa_printf(MSG_DEBUG, "EAP-FAST: Trying to resume session - "
000058  4930              LDR      r1,|L32.284|
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       wpa_printf
;;;1459   			   "do not add PAC-Opaque to TLS ClientHello");
;;;1460   		if (eap_fast_clear_pac_opaque_ext(sm, data) < 0)
000060  4621              MOV      r1,r4
000062  4638              MOV      r0,r7
000064  f7fffffe          BL       eap_fast_clear_pac_opaque_ext
000068  2800              CMP      r0,#0
00006a  da2f              BGE      |L32.204|
;;;1461   			return -1;
00006c  f04f30ff          MOV      r0,#0xffffffff
                  |L32.112|
;;;1462   	} else if (data->current_pac) {
;;;1463   		/*
;;;1464   		 * PAC found for the A-ID and we are not resuming an old
;;;1465   		 * session, so add PAC-Opaque extension to ClientHello.
;;;1466   		 */
;;;1467   		if (eap_fast_use_pac_opaque(sm, data, data->current_pac) < 0)
;;;1468   			return -1;
;;;1469   	} else {
;;;1470   		/* No PAC found, so we must provision one. */
;;;1471   		if (!data->provisioning_allowed) {
;;;1472   			wpa_printf(MSG_DEBUG, "EAP-FAST: No PAC found and "
;;;1473   				   "provisioning disabled");
;;;1474   			return -1;
;;;1475   		}
;;;1476   		wpa_printf(MSG_DEBUG, "EAP-FAST: No PAC found - "
;;;1477   			   "starting provisioning");
;;;1478   		if (eap_fast_set_provisioning_ciphers(sm, data) < 0 ||
;;;1479   		    eap_fast_clear_pac_opaque_ext(sm, data) < 0)
;;;1480   			return -1;
;;;1481   		data->provisioning = 1;
;;;1482   	}
;;;1483   
;;;1484   	return 0;
;;;1485   }
000070  e8bd83f8          POP      {r3-r9,pc}
                  |L32.116|
000074  f8d400ec          LDR      r0,[r4,#0xec]         ;1462
000078  b150              CBZ      r0,|L32.144|
00007a  4621              MOV      r1,r4                 ;1467
00007c  4638              MOV      r0,r7                 ;1467
00007e  f8d420ec          LDR      r2,[r4,#0xec]         ;1467
000082  f7fffffe          BL       eap_fast_use_pac_opaque
000086  2800              CMP      r0,#0                 ;1467
000088  da20              BGE      |L32.204|
00008a  f04f30ff          MOV      r0,#0xffffffff        ;1468
00008e  e7ef              B        |L32.112|
                  |L32.144|
000090  6d60              LDR      r0,[r4,#0x54]         ;1471
000092  b930              CBNZ     r0,|L32.162|
000094  a122              ADR      r1,|L32.288|
000096  2000              MOVS     r0,#0                 ;1472
000098  f7fffffe          BL       wpa_printf
00009c  f04f30ff          MOV      r0,#0xffffffff        ;1474
0000a0  e7e6              B        |L32.112|
                  |L32.162|
0000a2  a12c              ADR      r1,|L32.340|
0000a4  2000              MOVS     r0,#0                 ;1476
0000a6  f7fffffe          BL       wpa_printf
0000aa  4621              MOV      r1,r4                 ;1478
0000ac  4638              MOV      r0,r7                 ;1478
0000ae  f7fffffe          BL       eap_fast_set_provisioning_ciphers
0000b2  2800              CMP      r0,#0                 ;1478
0000b4  db05              BLT      |L32.194|
0000b6  4621              MOV      r1,r4                 ;1479
0000b8  4638              MOV      r0,r7                 ;1479
0000ba  f7fffffe          BL       eap_fast_clear_pac_opaque_ext
0000be  2800              CMP      r0,#0                 ;1479
0000c0  da02              BGE      |L32.200|
                  |L32.194|
0000c2  f04f30ff          MOV      r0,#0xffffffff        ;1480
0000c6  e7d3              B        |L32.112|
                  |L32.200|
0000c8  2001              MOVS     r0,#1                 ;1481
0000ca  65a0              STR      r0,[r4,#0x58]         ;1481
                  |L32.204|
0000cc  2000              MOVS     r0,#0                 ;1484
0000ce  e7cf              B        |L32.112|
;;;1486   
                          ENDP

                  |L32.208|
0000d0  4541502d          DCB      "EAP-FAST: Start (server ver=%d, own ver=%d)",0
0000d4  46415354
0000d8  3a205374
0000dc  61727420
0000e0  28736572
0000e4  76657220
0000e8  7665723d
0000ec  25642c20
0000f0  6f776e20
0000f4  7665723d
0000f8  25642900
                  |L32.252|
0000fc  4541502d          DCB      "EAP-FAST: Using FAST version %d",0
000100  46415354
000104  3a205573
000108  696e6720
00010c  46415354
000110  20766572
000114  73696f6e
000118  20256400
                  |L32.284|
                          DCD      ||.constdata||+0x314
                  |L32.288|
000120  4541502d          DCB      "EAP-FAST: No PAC found and provisioning disabled",0
000124  46415354
000128  3a204e6f
00012c  20504143
000130  20666f75
000134  6e642061
000138  6e642070
00013c  726f7669
000140  73696f6e
000144  696e6720
000148  64697361
00014c  626c6564
000150  00      
000151  00                DCB      0
000152  00                DCB      0
000153  00                DCB      0
                  |L32.340|
000154  4541502d          DCB      "EAP-FAST: No PAC found - starting provisioning",0
000158  46415354
00015c  3a204e6f
000160  20504143
000164  20666f75
000168  6e64202d
00016c  20737461
000170  7274696e
000174  67207072
000178  6f766973
00017c  696f6e69
000180  6e6700  
000183  00                DCB      0

                          AREA ||i.eap_fast_select_pac||, CODE, READONLY, ALIGN=2

                  eap_fast_select_pac PROC
;;;1335   
;;;1336   static void eap_fast_select_pac(struct eap_fast_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;1337   				const u8 *a_id, size_t a_id_len)
;;;1338   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1339   	data->current_pac = eap_fast_get_pac(data->pac, a_id, a_id_len,
000008  f8540fe8          LDR      r0,[r4,#0xe8]!
00000c  2301              MOVS     r3,#1
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  f7fffffe          BL       eap_fast_get_pac
000016  6060              STR      r0,[r4,#4]
;;;1340   					     PAC_TYPE_TUNNEL_PAC);
;;;1341   	if (data->current_pac == NULL) {
000018  6860              LDR      r0,[r4,#4]
00001a  f1a404e8          SUB      r4,r4,#0xe8
00001e  b940              CBNZ     r0,|L33.50|
;;;1342   		/*
;;;1343   		 * Tunnel PAC was not available for this A-ID. Try to use
;;;1344   		 * Machine Authentication PAC, if one is available.
;;;1345   		 */
;;;1346   		data->current_pac = eap_fast_get_pac(
000020  2302              MOVS     r3,#2
000022  4632              MOV      r2,r6
000024  4629              MOV      r1,r5
000026  f8d400e8          LDR      r0,[r4,#0xe8]
00002a  f7fffffe          BL       eap_fast_get_pac
00002e  f8c400ec          STR      r0,[r4,#0xec]
                  |L33.50|
;;;1347   			data->pac, a_id, a_id_len,
;;;1348   			PAC_TYPE_MACHINE_AUTHENTICATION);
;;;1349   	}
;;;1350   
;;;1351   	if (data->current_pac) {
000032  f8d400ec          LDR      r0,[r4,#0xec]
000036  b178              CBZ      r0,|L33.88|
;;;1352   		wpa_printf(MSG_DEBUG, "EAP-FAST: PAC found for this A-ID "
000038  f8540fec          LDR      r0,[r4,#0xec]!
00003c  f8b0204c          LDRH     r2,[r0,#0x4c]
000040  a106              ADR      r1,|L33.92|
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       wpa_printf
;;;1353   			   "(PAC-Type %d)", data->current_pac->pac_type);
;;;1354   		wpa_hexdump_ascii(MSG_MSGDUMP, "EAP-FAST: A-ID-Info",
000048  f85409ec          LDR      r0,[r4],#-0xec
00004c  a10f              ADR      r1,|L33.140|
00004e  e9d02311          LDRD     r2,r3,[r0,#0x44]
000052  2000              MOVS     r0,#0
000054  f7fffffe          BL       wpa_hexdump_ascii
                  |L33.88|
;;;1355   				  data->current_pac->a_id_info,
;;;1356   				  data->current_pac->a_id_info_len);
;;;1357   	}
;;;1358   }
000058  bd70              POP      {r4-r6,pc}
;;;1359   
                          ENDP

00005a  0000              DCW      0x0000
                  |L33.92|
00005c  4541502d          DCB      "EAP-FAST: PAC found for this A-ID (PAC-Type %d)",0
000060  46415354
000064  3a205041
000068  4320666f
00006c  756e6420
000070  666f7220
000074  74686973
000078  20412d49
00007c  44202850
000080  41432d54
000084  79706520
000088  25642900
                  |L33.140|
00008c  4541502d          DCB      "EAP-FAST: A-ID-Info",0
000090  46415354
000094  3a20412d
000098  49442d49
00009c  6e666f00

                          AREA ||i.eap_fast_select_phase2_method||, CODE, READONLY, ALIGN=2

                  eap_fast_select_phase2_method PROC
;;;354    
;;;355    static int eap_fast_select_phase2_method(struct eap_fast_data *data, u8 type)
000000  b570              PUSH     {r4-r6,lr}
;;;356    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;357    	size_t i;
;;;358    
;;;359    	/* TODO: TNC with anonymous provisioning; need to require both
;;;360    	 * completed MSCHAPv2 and TNC */
;;;361    
;;;362    	if (data->anon_provisioning && type != EAP_TYPE_MSCHAPV2) {
000006  6de0              LDR      r0,[r4,#0x5c]
000008  b148              CBZ      r0,|L34.30|
00000a  2e1a              CMP      r6,#0x1a
00000c  d007              BEQ      |L34.30|
;;;363    		wpa_printf(MSG_INFO, "EAP-FAST: Only EAP-MSCHAPv2 is allowed "
00000e  4632              MOV      r2,r6
000010  4918              LDR      r1,|L34.116|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;364    			   "during unauthenticated provisioning; reject phase2"
;;;365    			   " type %d", type);
;;;366    		return -1;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L34.28|
;;;367    	}
;;;368    
;;;369    #ifdef EAP_TNC
;;;370    	if (type == EAP_TYPE_TNC) {
;;;371    		data->phase2_type.vendor = EAP_VENDOR_IETF;
;;;372    		data->phase2_type.method = EAP_TYPE_TNC;
;;;373    		wpa_printf(MSG_DEBUG, "EAP-FAST: Selected Phase 2 EAP "
;;;374    			   "vendor %d method %d for TNC",
;;;375    			   data->phase2_type.vendor,
;;;376    			   data->phase2_type.method);
;;;377    		return 0;
;;;378    	}
;;;379    #endif /* EAP_TNC */
;;;380    
;;;381    	for (i = 0; i < data->num_phase2_types; i++) {
;;;382    		if (data->phase2_types[i].vendor != EAP_VENDOR_IETF ||
;;;383    		    data->phase2_types[i].method != type)
;;;384    			continue;
;;;385    
;;;386    		data->phase2_type.vendor = data->phase2_types[i].vendor;
;;;387    		data->phase2_type.method = data->phase2_types[i].method;
;;;388    		wpa_printf(MSG_DEBUG, "EAP-FAST: Selected Phase 2 EAP "
;;;389    			   "vendor %d method %d",
;;;390    			   data->phase2_type.vendor,
;;;391    			   data->phase2_type.method);
;;;392    		break;
;;;393    	}
;;;394    
;;;395    	if (type != data->phase2_type.method || type == EAP_TYPE_NONE)
;;;396    		return -1;
;;;397    
;;;398    	return 0;
;;;399    }
00001c  bd70              POP      {r4-r6,pc}
                  |L34.30|
00001e  2500              MOVS     r5,#0                 ;381
000020  e01b              B        |L34.90|
                  |L34.34|
000022  6c60              LDR      r0,[r4,#0x44]         ;382
000024  f8500035          LDR      r0,[r0,r5,LSL #3]     ;382
000028  b928              CBNZ     r0,|L34.54|
00002a  6c60              LDR      r0,[r4,#0x44]         ;383
00002c  eb0000c5          ADD      r0,r0,r5,LSL #3       ;383
000030  6840              LDR      r0,[r0,#4]            ;383
000032  42b0              CMP      r0,r6                 ;383
000034  d000              BEQ      |L34.56|
                  |L34.54|
000036  e00f              B        |L34.88|
                  |L34.56|
000038  6c60              LDR      r0,[r4,#0x44]         ;386
00003a  f8500035          LDR      r0,[r0,r5,LSL #3]     ;386
00003e  63e0              STR      r0,[r4,#0x3c]         ;386
000040  6c60              LDR      r0,[r4,#0x44]         ;387
000042  eb0000c5          ADD      r0,r0,r5,LSL #3       ;387
000046  6841              LDR      r1,[r0,#4]            ;387
000048  6421              STR      r1,[r4,#0x40]         ;387
00004a  a10b              ADR      r1,|L34.120|
00004c  2000              MOVS     r0,#0                 ;388
00004e  e9d4230f          LDRD     r2,r3,[r4,#0x3c]      ;388
000052  f7fffffe          BL       wpa_printf
000056  e003              B        |L34.96|
                  |L34.88|
000058  1c6d              ADDS     r5,r5,#1              ;381
                  |L34.90|
00005a  6ca0              LDR      r0,[r4,#0x48]         ;381
00005c  42a8              CMP      r0,r5                 ;381
00005e  d8e0              BHI      |L34.34|
                  |L34.96|
000060  bf00              NOP                            ;392
000062  6c20              LDR      r0,[r4,#0x40]         ;395
000064  42b0              CMP      r0,r6                 ;395
000066  d100              BNE      |L34.106|
000068  b916              CBNZ     r6,|L34.112|
                  |L34.106|
00006a  f04f30ff          MOV      r0,#0xffffffff        ;396
00006e  e7d5              B        |L34.28|
                  |L34.112|
000070  2000              MOVS     r0,#0                 ;398
000072  e7d3              B        |L34.28|
;;;400    
                          ENDP

                  |L34.116|
                          DCD      ||.constdata||+0x44
                  |L34.120|
000078  4541502d          DCB      "EAP-FAST: Selected Phase 2 EAP vendor %d method %d",0
00007c  46415354
000080  3a205365
000084  6c656374
000088  65642050
00008c  68617365
000090  20322045
000094  41502076
000098  656e646f
00009c  72202564
0000a0  206d6574
0000a4  686f6420
0000a8  256400  
0000ab  00                DCB      0

                          AREA ||i.eap_fast_session_ticket_cb||, CODE, READONLY, ALIGN=2

                  eap_fast_session_ticket_cb PROC
;;;76     
;;;77     static int eap_fast_session_ticket_cb(void *ctx, const u8 *ticket, size_t len,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;78     				      const u8 *client_random,
;;;79     				      const u8 *server_random,
;;;80     				      u8 *master_secret)
;;;81     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  461d              MOV      r5,r3
00000c  e9dd9a08          LDRD     r9,r10,[sp,#0x20]
;;;82     	struct eap_fast_data *data = ctx;
000010  4634              MOV      r4,r6
;;;83     
;;;84     	wpa_printf(MSG_DEBUG, "EAP-FAST: SessionTicket callback");
000012  a11d              ADR      r1,|L35.136|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;85     
;;;86     	if (client_random == NULL || server_random == NULL ||
00001a  b12d              CBZ      r5,|L35.40|
00001c  f1b90f00          CMP      r9,#0
000020  d002              BEQ      |L35.40|
;;;87     	    master_secret == NULL) {
000022  f1ba0f00          CMP      r10,#0
000026  d113              BNE      |L35.80|
                  |L35.40|
;;;88     		wpa_printf(MSG_DEBUG, "EAP-FAST: SessionTicket failed - fall "
000028  4920              LDR      r1,|L35.172|
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       wpa_printf
;;;89     			   "back to full TLS handshake");
;;;90     		data->session_ticket_used = 0;
000030  2000              MOVS     r0,#0
000032  6620              STR      r0,[r4,#0x60]
;;;91     		if (data->provisioning_allowed) {
000034  6d60              LDR      r0,[r4,#0x54]
000036  b140              CBZ      r0,|L35.74|
;;;92     			wpa_printf(MSG_DEBUG, "EAP-FAST: Try to provision a "
000038  a11d              ADR      r1,|L35.176|
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       wpa_printf
;;;93     				   "new PAC-Key");
;;;94     			data->provisioning = 1;
000040  2001              MOVS     r0,#1
000042  65a0              STR      r0,[r4,#0x58]
;;;95     			data->current_pac = NULL;
000044  2000              MOVS     r0,#0
000046  f8c400ec          STR      r0,[r4,#0xec]
                  |L35.74|
;;;96     		}
;;;97     		return 0;
00004a  2000              MOVS     r0,#0
                  |L35.76|
;;;98     	}
;;;99     
;;;100    	wpa_hexdump(MSG_DEBUG, "EAP-FAST: SessionTicket", ticket, len);
;;;101    
;;;102    	if (data->current_pac == NULL) {
;;;103    		wpa_printf(MSG_DEBUG, "EAP-FAST: No PAC-Key available for "
;;;104    			   "using SessionTicket");
;;;105    		data->session_ticket_used = 0;
;;;106    		return 0;
;;;107    	}
;;;108    
;;;109    	eap_fast_derive_master_secret(data->current_pac->pac_key,
;;;110    				      server_random, client_random,
;;;111    				      master_secret);
;;;112    
;;;113    	data->session_ticket_used = 1;
;;;114    
;;;115    	return 1;
;;;116    }
00004c  e8bd87f0          POP      {r4-r10,pc}
                  |L35.80|
000050  4643              MOV      r3,r8                 ;100
000052  463a              MOV      r2,r7                 ;100
000054  a121              ADR      r1,|L35.220|
000056  2000              MOVS     r0,#0                 ;100
000058  f7fffffe          BL       wpa_hexdump
00005c  f8d400ec          LDR      r0,[r4,#0xec]         ;102
000060  b930              CBNZ     r0,|L35.112|
000062  a124              ADR      r1,|L35.244|
000064  2000              MOVS     r0,#0                 ;103
000066  f7fffffe          BL       wpa_printf
00006a  2000              MOVS     r0,#0                 ;105
00006c  6620              STR      r0,[r4,#0x60]         ;105
00006e  e7ed              B        |L35.76|
                  |L35.112|
000070  f8d410ec          LDR      r1,[r4,#0xec]         ;109
000074  1d08              ADDS     r0,r1,#4              ;109
000076  4653              MOV      r3,r10                ;109
000078  462a              MOV      r2,r5                 ;109
00007a  4649              MOV      r1,r9                 ;109
00007c  f7fffffe          BL       eap_fast_derive_master_secret
000080  2001              MOVS     r0,#1                 ;113
000082  6620              STR      r0,[r4,#0x60]         ;113
000084  bf00              NOP                            ;115
000086  e7e1              B        |L35.76|
;;;117    
                          ENDP

                  |L35.136|
000088  4541502d          DCB      "EAP-FAST: SessionTicket callback",0
00008c  46415354
000090  3a205365
000094  7373696f
000098  6e546963
00009c  6b657420
0000a0  63616c6c
0000a4  6261636b
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L35.172|
                          DCD      ||.constdata||
                  |L35.176|
0000b0  4541502d          DCB      "EAP-FAST: Try to provision a new PAC-Key",0
0000b4  46415354
0000b8  3a205472
0000bc  7920746f
0000c0  2070726f
0000c4  76697369
0000c8  6f6e2061
0000cc  206e6577
0000d0  20504143
0000d4  2d4b6579
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L35.220|
0000dc  4541502d          DCB      "EAP-FAST: SessionTicket",0
0000e0  46415354
0000e4  3a205365
0000e8  7373696f
0000ec  6e546963
0000f0  6b657400
                  |L35.244|
0000f4  4541502d          DCB      "EAP-FAST: No PAC-Key available for using SessionTicket",0
0000f8  46415354
0000fc  3a204e6f
000100  20504143
000104  2d4b6579
000108  20617661
00010c  696c6162
000110  6c652066
000114  6f722075
000118  73696e67
00011c  20536573
000120  73696f6e
000124  5469636b
000128  657400  
00012b  00                DCB      0

                          AREA ||i.eap_fast_set_provisioning_ciphers||, CODE, READONLY, ALIGN=2

                  eap_fast_set_provisioning_ciphers PROC
;;;1405   
;;;1406   static int eap_fast_set_provisioning_ciphers(struct eap_sm *sm,
000000  b57c              PUSH     {r2-r6,lr}
;;;1407   					     struct eap_fast_data *data)
;;;1408   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;1409   	u8 ciphers[5];
;;;1410   	int count = 0;
000006  2400              MOVS     r4,#0
;;;1411   
;;;1412   	if (data->provisioning_allowed & EAP_FAST_PROV_UNAUTH) {
000008  6d68              LDR      r0,[r5,#0x54]
00000a  f0100f01          TST      r0,#1
00000e  d008              BEQ      |L36.34|
;;;1413   		wpa_printf(MSG_DEBUG, "EAP-FAST: Enabling unauthenticated "
000010  491a              LDR      r1,|L36.124|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;1414   			   "provisioning TLS cipher suites");
;;;1415   		ciphers[count++] = TLS_CIPHER_ANON_DH_AES128_SHA;
000018  2204              MOVS     r2,#4
00001a  4620              MOV      r0,r4
00001c  1c64              ADDS     r4,r4,#1
00001e  f80d2000          STRB     r2,[sp,r0]
                  |L36.34|
;;;1416   	}
;;;1417   
;;;1418   	if (data->provisioning_allowed & EAP_FAST_PROV_AUTH) {
000022  6d68              LDR      r0,[r5,#0x54]
000024  f0100f02          TST      r0,#2
000028  d012              BEQ      |L36.80|
;;;1419   		wpa_printf(MSG_DEBUG, "EAP-FAST: Enabling authenticated "
00002a  a115              ADR      r1,|L36.128|
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       wpa_printf
;;;1420   			   "provisioning TLS cipher suites");
;;;1421   		ciphers[count++] = TLS_CIPHER_RSA_DHE_AES128_SHA;
000032  2203              MOVS     r2,#3
000034  4620              MOV      r0,r4
000036  1c64              ADDS     r4,r4,#1
000038  f80d2000          STRB     r2,[sp,r0]
;;;1422   		ciphers[count++] = TLS_CIPHER_AES128_SHA;
00003c  2202              MOVS     r2,#2
00003e  4620              MOV      r0,r4
000040  1c64              ADDS     r4,r4,#1
000042  f80d2000          STRB     r2,[sp,r0]
;;;1423   		ciphers[count++] = TLS_CIPHER_RC4_SHA;
000046  2201              MOVS     r2,#1
000048  4620              MOV      r0,r4
00004a  1c64              ADDS     r4,r4,#1
00004c  f80d2000          STRB     r2,[sp,r0]
                  |L36.80|
;;;1424   	}
;;;1425   
;;;1426   	ciphers[count++] = TLS_CIPHER_NONE;
000050  2200              MOVS     r2,#0
000052  4620              MOV      r0,r4
000054  1c64              ADDS     r4,r4,#1
000056  f80d2000          STRB     r2,[sp,r0]
;;;1427   
;;;1428   	if (tls_connection_set_cipher_list(sm->ssl_ctx, data->ssl.conn,
00005a  6829              LDR      r1,[r5,#0]
00005c  466a              MOV      r2,sp
00005e  f8d60098          LDR      r0,[r6,#0x98]
000062  f7fffffe          BL       tls_connection_set_cipher_list
000066  b138              CBZ      r0,|L36.120|
;;;1429   					   ciphers)) {
;;;1430   		wpa_printf(MSG_INFO, "EAP-FAST: Could not configure TLS "
000068  4904              LDR      r1,|L36.124|
00006a  3144              ADDS     r1,r1,#0x44
00006c  2000              MOVS     r0,#0
00006e  f7fffffe          BL       wpa_printf
;;;1431   			   "cipher suites for provisioning");
;;;1432   		return -1;
000072  f04f30ff          MOV      r0,#0xffffffff
                  |L36.118|
;;;1433   	}
;;;1434   
;;;1435   	return 0;
;;;1436   }
000076  bd7c              POP      {r2-r6,pc}
                  |L36.120|
000078  2000              MOVS     r0,#0                 ;1435
00007a  e7fc              B        |L36.118|
;;;1437   
                          ENDP

                  |L36.124|
                          DCD      ||.constdata||+0x28c
                  |L36.128|
000080  4541502d          DCB      "EAP-FAST: Enabling authenticated provisioning TLS ciphe"
000084  46415354
000088  3a20456e
00008c  61626c69
000090  6e672061
000094  75746865
000098  6e746963
00009c  61746564
0000a0  2070726f
0000a4  76697369
0000a8  6f6e696e
0000ac  6720544c
0000b0  53206369
0000b4  706865  
0000b7  72207375          DCB      "r suites",0
0000bb  69746573
0000bf  00      

                          AREA ||i.eap_fast_tlv_nak||, CODE, READONLY, ALIGN=1

                  eap_fast_tlv_nak PROC
;;;483    
;;;484    static struct wpabuf * eap_fast_tlv_nak(int vendor_id, int tlv_type)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;485    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;486    	struct wpabuf *buf;
;;;487    	struct eap_tlv_nak_tlv *nak;
;;;488    	buf = wpabuf_alloc(sizeof(*nak));
000008  200c              MOVS     r0,#0xc
00000a  f7fffffe          BL       wpabuf_alloc
00000e  4607              MOV      r7,r0
;;;489    	if (buf == NULL)
000010  b917              CBNZ     r7,|L37.24|
;;;490    		return NULL;
000012  2000              MOVS     r0,#0
                  |L37.20|
;;;491    	nak = wpabuf_put(buf, sizeof(*nak));
;;;492    	nak->tlv_type = host_to_be16(EAP_TLV_TYPE_MANDATORY | EAP_TLV_NAK_TLV);
;;;493    	nak->length = host_to_be16(6);
;;;494    	nak->vendor_id = host_to_be32(vendor_id);
;;;495    	nak->nak_type = host_to_be16(tlv_type);
;;;496    	return buf;
;;;497    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L37.24|
000018  210c              MOVS     r1,#0xc               ;491
00001a  4638              MOV      r0,r7                 ;491
00001c  f7fffffe          BL       wpabuf_put
000020  4605              MOV      r5,r0                 ;491
000022  f44f6090          MOV      r0,#0x480             ;492
000026  8028              STRH     r0,[r5,#0]            ;492
000028  f44f60c0          MOV      r0,#0x600             ;493
00002c  8068              STRH     r0,[r5,#2]            ;493
00002e  f04f407f          MOV      r0,#0xff000000        ;494
000032  ea006004          AND      r0,r0,r4,LSL #24      ;494
000036  f44f017f          MOV      r1,#0xff0000          ;494
00003a  ea012104          AND      r1,r1,r4,LSL #8       ;494
00003e  4308              ORRS     r0,r0,r1              ;494
000040  f44f417f          MOV      r1,#0xff00            ;494
000044  ea012114          AND      r1,r1,r4,LSR #8       ;494
000048  4308              ORRS     r0,r0,r1              ;494
00004a  ea406014          ORR      r0,r0,r4,LSR #24      ;494
00004e  6068              STR      r0,[r5,#4]            ;494
000050  b2b0              UXTH     r0,r6                 ;495
000052  f44f417f          MOV      r1,#0xff00            ;495
000056  ea012000          AND      r0,r1,r0,LSL #8       ;495
00005a  f3c62107          UBFX     r1,r6,#8,#8           ;495
00005e  4308              ORRS     r0,r0,r1              ;495
000060  8128              STRH     r0,[r5,#8]            ;495
000062  4638              MOV      r0,r7                 ;496
000064  e7d6              B        |L37.20|
;;;498    
                          ENDP


                          AREA ||i.eap_fast_tlv_pac_ack||, CODE, READONLY, ALIGN=2

                  eap_fast_tlv_pac_ack PROC
;;;519    
;;;520    static struct wpabuf * eap_fast_tlv_pac_ack(void)
000000  b570              PUSH     {r4-r6,lr}
;;;521    {
;;;522    	struct wpabuf *buf;
;;;523    	struct eap_tlv_result_tlv *res;
;;;524    	struct eap_tlv_pac_ack_tlv *ack;
;;;525    
;;;526    	buf = wpabuf_alloc(sizeof(*res) + sizeof(*ack));
000002  2010              MOVS     r0,#0x10
000004  f7fffffe          BL       wpabuf_alloc
000008  4605              MOV      r5,r0
;;;527    	if (buf == NULL)
00000a  b90d              CBNZ     r5,|L38.16|
;;;528    		return NULL;
00000c  2000              MOVS     r0,#0
                  |L38.14|
;;;529    
;;;530    	wpa_printf(MSG_DEBUG, "EAP-FAST: Add PAC TLV (ack)");
;;;531    	ack = wpabuf_put(buf, sizeof(*ack));
;;;532    	ack->tlv_type = host_to_be16(EAP_TLV_PAC_TLV |
;;;533    				     EAP_TLV_TYPE_MANDATORY);
;;;534    	ack->length = host_to_be16(sizeof(*ack) - sizeof(struct eap_tlv_hdr));
;;;535    	ack->pac_type = host_to_be16(PAC_TYPE_PAC_ACKNOWLEDGEMENT);
;;;536    	ack->pac_len = host_to_be16(2);
;;;537    	ack->result = host_to_be16(EAP_TLV_RESULT_SUCCESS);
;;;538    
;;;539    	return buf;
;;;540    }
00000e  bd70              POP      {r4-r6,pc}
                  |L38.16|
000010  a10b              ADR      r1,|L38.64|
000012  2000              MOVS     r0,#0                 ;530
000014  f7fffffe          BL       wpa_printf
000018  210a              MOVS     r1,#0xa               ;531
00001a  4628              MOV      r0,r5                 ;531
00001c  f7fffffe          BL       wpabuf_put
000020  4604              MOV      r4,r0                 ;531
000022  f44f6038          MOV      r0,#0xb80             ;532
000026  8020              STRH     r0,[r4,#0]            ;532
000028  f44f60c0          MOV      r0,#0x600             ;534
00002c  8060              STRH     r0,[r4,#2]            ;534
00002e  f44f6000          MOV      r0,#0x800             ;535
000032  80a0              STRH     r0,[r4,#4]            ;535
000034  1080              ASRS     r0,r0,#2              ;536
000036  80e0              STRH     r0,[r4,#6]            ;536
000038  1040              ASRS     r0,r0,#1              ;537
00003a  8120              STRH     r0,[r4,#8]            ;537
00003c  4628              MOV      r0,r5                 ;539
00003e  e7e6              B        |L38.14|
;;;541    
                          ENDP

                  |L38.64|
000040  4541502d          DCB      "EAP-FAST: Add PAC TLV (ack)",0
000044  46415354
000048  3a204164
00004c  64205041
000050  4320544c
000054  56202861
000058  636b2900

                          AREA ||i.eap_fast_tlv_result||, CODE, READONLY, ALIGN=2

                  eap_fast_tlv_result PROC
;;;499    
;;;500    static struct wpabuf * eap_fast_tlv_result(int status, int intermediate)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;501    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;502    	struct wpabuf *buf;
;;;503    	struct eap_tlv_intermediate_result_tlv *result;
;;;504    	buf = wpabuf_alloc(sizeof(*result));
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       wpabuf_alloc
00000e  4607              MOV      r7,r0
;;;505    	if (buf == NULL)
000010  b917              CBNZ     r7,|L39.24|
;;;506    		return NULL;
000012  2000              MOVS     r0,#0
                  |L39.20|
;;;507    	wpa_printf(MSG_DEBUG, "EAP-FAST: Add %sResult TLV(status=%d)",
;;;508    		   intermediate ? "Intermediate " : "", status);
;;;509    	result = wpabuf_put(buf, sizeof(*result));
;;;510    	result->tlv_type = host_to_be16(EAP_TLV_TYPE_MANDATORY |
;;;511    					(intermediate ?
;;;512    					 EAP_TLV_INTERMEDIATE_RESULT_TLV :
;;;513    					 EAP_TLV_RESULT_TLV));
;;;514    	result->length = host_to_be16(2);
;;;515    	result->status = host_to_be16(status);
;;;516    	return buf;
;;;517    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L39.24|
000018  b10e              CBZ      r6,|L39.30|
00001a  a018              ADR      r0,|L39.124|
00001c  e000              B        |L39.32|
                  |L39.30|
00001e  a01b              ADR      r0,|L39.140|
                  |L39.32|
000020  4602              MOV      r2,r0                 ;508
000022  462b              MOV      r3,r5                 ;508
000024  a11a              ADR      r1,|L39.144|
000026  2000              MOVS     r0,#0                 ;508
000028  f7fffffe          BL       wpa_printf
00002c  2106              MOVS     r1,#6                 ;509
00002e  4638              MOV      r0,r7                 ;509
000030  f7fffffe          BL       wpabuf_put
000034  4604              MOV      r4,r0                 ;509
000036  b10e              CBZ      r6,|L39.60|
000038  200a              MOVS     r0,#0xa               ;510
00003a  e000              B        |L39.62|
                  |L39.60|
00003c  2003              MOVS     r0,#3                 ;510
                  |L39.62|
00003e  b280              UXTH     r0,r0                 ;510
000040  f4404000          ORR      r0,r0,#0x8000         ;510
000044  f44f417f          MOV      r1,#0xff00            ;510
000048  ea012000          AND      r0,r1,r0,LSL #8       ;510
00004c  b10e              CBZ      r6,|L39.82|
00004e  210a              MOVS     r1,#0xa               ;510
000050  e000              B        |L39.84|
                  |L39.82|
000052  2103              MOVS     r1,#3                 ;510
                  |L39.84|
000054  b289              UXTH     r1,r1                 ;510
000056  f4414100          ORR      r1,r1,#0x8000         ;510
00005a  ea402011          ORR      r0,r0,r1,LSR #8       ;510
00005e  8020              STRH     r0,[r4,#0]            ;510
000060  f44f7000          MOV      r0,#0x200             ;514
000064  8060              STRH     r0,[r4,#2]            ;514
000066  b2a8              UXTH     r0,r5                 ;515
000068  f44f417f          MOV      r1,#0xff00            ;515
00006c  ea012000          AND      r0,r1,r0,LSL #8       ;515
000070  f3c52107          UBFX     r1,r5,#8,#8           ;515
000074  4308              ORRS     r0,r0,r1              ;515
000076  80a0              STRH     r0,[r4,#4]            ;515
000078  4638              MOV      r0,r7                 ;516
00007a  e7cb              B        |L39.20|
;;;518    
                          ENDP

                  |L39.124|
00007c  496e7465          DCB      "Intermediate ",0
000080  726d6564
000084  69617465
000088  2000    
00008a  00                DCB      0
00008b  00                DCB      0
                  |L39.140|
00008c  00                DCB      0
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L39.144|
000090  4541502d          DCB      "EAP-FAST: Add %sResult TLV(status=%d)",0
000094  46415354
000098  3a204164
00009c  64202573
0000a0  52657375
0000a4  6c742054
0000a8  4c562873
0000ac  74617475
0000b0  733d2564
0000b4  2900    
0000b6  00                DCB      0
0000b7  00                DCB      0

                          AREA ||i.eap_fast_use_pac_opaque||, CODE, READONLY, ALIGN=2

                  eap_fast_use_pac_opaque PROC
;;;1360   
;;;1361   static int eap_fast_use_pac_opaque(struct eap_sm *sm,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1362   				   struct eap_fast_data *data,
;;;1363   				   struct eap_fast_pac *pac)
;;;1364   {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4617              MOV      r7,r2
;;;1365   	u8 *tlv;
;;;1366   	size_t tlv_len, olen;
;;;1367   	struct eap_tlv_hdr *ehdr;
;;;1368   
;;;1369   	olen = pac->pac_opaque_len;
00000a  6abd              LDR      r5,[r7,#0x28]
;;;1370   	tlv_len = sizeof(*ehdr) + olen;
00000c  f1050a04          ADD      r10,r5,#4
;;;1371   	tlv = os_malloc(tlv_len);
000010  4650              MOV      r0,r10
000012  f7fffffe          BL       os_malloc
000016  4604              MOV      r4,r0
;;;1372   	if (tlv) {
000018  b194              CBZ      r4,|L40.64|
;;;1373   		ehdr = (struct eap_tlv_hdr *) tlv;
00001a  4626              MOV      r6,r4
;;;1374   		ehdr->tlv_type = host_to_be16(PAC_TYPE_PAC_OPAQUE);
00001c  f44f7000          MOV      r0,#0x200
000020  4634              MOV      r4,r6
000022  8030              STRH     r0,[r6,#0]
;;;1375   		ehdr->length = host_to_be16(olen);
000024  b2a8              UXTH     r0,r5
000026  f44f417f          MOV      r1,#0xff00
00002a  ea012000          AND      r0,r1,r0,LSL #8
00002e  f3c52107          UBFX     r1,r5,#8,#8
000032  4308              ORRS     r0,r0,r1
000034  8070              STRH     r0,[r6,#2]
;;;1376   		os_memcpy(ehdr + 1, pac->pac_opaque, olen);
000036  462a              MOV      r2,r5
000038  1d30              ADDS     r0,r6,#4
00003a  6a79              LDR      r1,[r7,#0x24]
00003c  f7fffffe          BL       os_memcpy
                  |L40.64|
;;;1377   	}
;;;1378   	if (tlv == NULL ||
000040  b15c              CBZ      r4,|L40.90|
;;;1379   	    tls_connection_client_hello_ext(sm->ssl_ctx, data->ssl.conn,
000042  f8cda000          STR      r10,[sp,#0]
000046  f8d91000          LDR      r1,[r9,#0]
00004a  4623              MOV      r3,r4
00004c  2223              MOVS     r2,#0x23
00004e  f8d80098          LDR      r0,[r8,#0x98]
000052  f7fffffe          BL       tls_connection_client_hello_ext
000056  2800              CMP      r0,#0
000058  da0a              BGE      |L40.112|
                  |L40.90|
;;;1380   					    TLS_EXT_PAC_OPAQUE,
;;;1381   					    tlv, tlv_len) < 0) {
;;;1382   		wpa_printf(MSG_DEBUG, "EAP-FAST: Failed to add PAC-Opaque TLS "
00005a  a108              ADR      r1,|L40.124|
00005c  2000              MOVS     r0,#0
00005e  f7fffffe          BL       wpa_printf
;;;1383   			   "extension");
;;;1384   		os_free(tlv);
000062  4620              MOV      r0,r4
000064  f7fffffe          BL       os_free
;;;1385   		return -1;
000068  f04f30ff          MOV      r0,#0xffffffff
                  |L40.108|
;;;1386   	}
;;;1387   	os_free(tlv);
;;;1388   
;;;1389   	return 0;
;;;1390   }
00006c  e8bd8ff8          POP      {r3-r11,pc}
                  |L40.112|
000070  4620              MOV      r0,r4                 ;1387
000072  f7fffffe          BL       os_free
000076  2000              MOVS     r0,#0                 ;1389
000078  e7f8              B        |L40.108|
;;;1391   
                          ENDP

00007a  0000              DCW      0x0000
                  |L40.124|
00007c  4541502d          DCB      "EAP-FAST: Failed to add PAC-Opaque TLS extension",0
000080  46415354
000084  3a204661
000088  696c6564
00008c  20746f20
000090  61646420
000094  5041432d
000098  4f706171
00009c  75652054
0000a0  4c532065
0000a4  7874656e
0000a8  73696f6e
0000ac  00      
0000ad  00                DCB      0
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i.eap_fast_validate_crypto_binding||, CODE, READONLY, ALIGN=2

                  eap_fast_validate_crypto_binding PROC
;;;580    
;;;581    static int eap_fast_validate_crypto_binding(
000000  b538              PUSH     {r3-r5,lr}
;;;582    	struct eap_tlv_crypto_binding_tlv *_bind)
;;;583    {
000002  4604              MOV      r4,r0
;;;584    	wpa_printf(MSG_DEBUG, "EAP-FAST: Crypto-Binding TLV: Version %d "
000004  79e3              LDRB     r3,[r4,#7]
000006  9300              STR      r3,[sp,#0]
000008  79a3              LDRB     r3,[r4,#6]
00000a  7962              LDRB     r2,[r4,#5]
00000c  4913              LDR      r1,|L41.92|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;585    		   "Received Version %d SubType %d",
;;;586    		   _bind->version, _bind->received_version, _bind->subtype);
;;;587    	wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: NONCE",
000014  2320              MOVS     r3,#0x20
000016  f1040208          ADD      r2,r4,#8
00001a  a111              ADR      r1,|L41.96|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       wpa_hexdump
;;;588    		    _bind->nonce, sizeof(_bind->nonce));
;;;589    	wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: Compound MAC",
000022  2314              MOVS     r3,#0x14
000024  f1040228          ADD      r2,r4,#0x28
000028  a111              ADR      r1,|L41.112|
00002a  2000              MOVS     r0,#0
00002c  f7fffffe          BL       wpa_hexdump
;;;590    		    _bind->compound_mac, sizeof(_bind->compound_mac));
;;;591    
;;;592    	if (_bind->version != EAP_FAST_VERSION ||
000030  7960              LDRB     r0,[r4,#5]
000032  2801              CMP      r0,#1
000034  d104              BNE      |L41.64|
;;;593    	    _bind->received_version != EAP_FAST_VERSION ||
000036  79a0              LDRB     r0,[r4,#6]
000038  2801              CMP      r0,#1
00003a  d101              BNE      |L41.64|
;;;594    	    _bind->subtype != EAP_TLV_CRYPTO_BINDING_SUBTYPE_REQUEST) {
00003c  79e0              LDRB     r0,[r4,#7]
00003e  b158              CBZ      r0,|L41.88|
                  |L41.64|
;;;595    		wpa_printf(MSG_INFO, "EAP-FAST: Invalid version/subtype in "
000040  79e3              LDRB     r3,[r4,#7]
000042  9300              STR      r3,[sp,#0]
000044  79a3              LDRB     r3,[r4,#6]
000046  7962              LDRB     r2,[r4,#5]
000048  4904              LDR      r1,|L41.92|
00004a  3148              ADDS     r1,r1,#0x48
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       wpa_printf
;;;596    			   "Crypto-Binding TLV: Version %d "
;;;597    			   "Received Version %d SubType %d",
;;;598    			   _bind->version, _bind->received_version,
;;;599    			   _bind->subtype);
;;;600    		return -1;
000052  f04f30ff          MOV      r0,#0xffffffff
                  |L41.86|
;;;601    	}
;;;602    
;;;603    	return 0;
;;;604    }
000056  bd38              POP      {r3-r5,pc}
                  |L41.88|
000058  2000              MOVS     r0,#0                 ;603
00005a  e7fc              B        |L41.86|
;;;605    
                          ENDP

                  |L41.92|
                          DCD      ||.constdata||+0xa8
                  |L41.96|
000060  4541502d          DCB      "EAP-FAST: NONCE",0
000064  46415354
000068  3a204e4f
00006c  4e434500
                  |L41.112|
000070  4541502d          DCB      "EAP-FAST: Compound MAC",0
000074  46415354
000078  3a20436f
00007c  6d706f75
000080  6e64204d
000084  414300  
000087  00                DCB      0

                          AREA ||i.eap_fast_write_crypto_binding||, CODE, READONLY, ALIGN=2

                  eap_fast_write_crypto_binding PROC
;;;606    
;;;607    static void eap_fast_write_crypto_binding(
000000  b5f8              PUSH     {r3-r7,lr}
;;;608    	struct eap_tlv_crypto_binding_tlv *rbind,
;;;609    	struct eap_tlv_crypto_binding_tlv *_bind, const u8 *cmk)
;;;610    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;611    	rbind->tlv_type = host_to_be16(EAP_TLV_TYPE_MANDATORY |
000008  f44f6048          MOV      r0,#0xc80
00000c  8020              STRH     r0,[r4,#0]
;;;612    				       EAP_TLV_CRYPTO_BINDING_TLV);
;;;613    	rbind->length = host_to_be16(sizeof(*rbind) -
00000e  f44f5060          MOV      r0,#0x3800
000012  8060              STRH     r0,[r4,#2]
;;;614    				     sizeof(struct eap_tlv_hdr));
;;;615    	rbind->version = EAP_FAST_VERSION;
000014  2001              MOVS     r0,#1
000016  7160              STRB     r0,[r4,#5]
;;;616    	rbind->received_version = _bind->version;
000018  7968              LDRB     r0,[r5,#5]
00001a  71a0              STRB     r0,[r4,#6]
;;;617    	rbind->subtype = EAP_TLV_CRYPTO_BINDING_SUBTYPE_RESPONSE;
00001c  2001              MOVS     r0,#1
00001e  71e0              STRB     r0,[r4,#7]
;;;618    	os_memcpy(rbind->nonce, _bind->nonce, sizeof(_bind->nonce));
000020  2220              MOVS     r2,#0x20
000022  f1050108          ADD      r1,r5,#8
000026  f1040008          ADD      r0,r4,#8
00002a  f7fffffe          BL       os_memcpy
;;;619    	inc_byte_array(rbind->nonce, sizeof(rbind->nonce));
00002e  2120              MOVS     r1,#0x20
000030  f1040008          ADD      r0,r4,#8
000034  f7fffffe          BL       inc_byte_array
;;;620    	hmac_sha1(cmk, EAP_FAST_CMK_LEN, (u8 *) rbind, sizeof(*rbind),
000038  f1040328          ADD      r3,r4,#0x28
00003c  9300              STR      r3,[sp,#0]
00003e  233c              MOVS     r3,#0x3c
000040  4622              MOV      r2,r4
000042  2114              MOVS     r1,#0x14
000044  4630              MOV      r0,r6
000046  f7fffffe          BL       hmac_sha1
;;;621    		  rbind->compound_mac);
;;;622    
;;;623    	wpa_printf(MSG_DEBUG, "EAP-FAST: Reply Crypto-Binding TLV: Version %d "
00004a  79e3              LDRB     r3,[r4,#7]
00004c  9300              STR      r3,[sp,#0]
00004e  79a3              LDRB     r3,[r4,#6]
000050  7962              LDRB     r2,[r4,#5]
000052  4909              LDR      r1,|L42.120|
000054  2000              MOVS     r0,#0
000056  f7fffffe          BL       wpa_printf
;;;624    		   "Received Version %d SubType %d",
;;;625    		   rbind->version, rbind->received_version, rbind->subtype);
;;;626    	wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: NONCE",
00005a  2320              MOVS     r3,#0x20
00005c  f1040208          ADD      r2,r4,#8
000060  a106              ADR      r1,|L42.124|
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       wpa_hexdump
;;;627    		    rbind->nonce, sizeof(rbind->nonce));
;;;628    	wpa_hexdump(MSG_MSGDUMP, "EAP-FAST: Compound MAC",
000068  2314              MOVS     r3,#0x14
00006a  f1040228          ADD      r2,r4,#0x28
00006e  a107              ADR      r1,|L42.140|
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       wpa_hexdump
;;;629    		    rbind->compound_mac, sizeof(rbind->compound_mac));
;;;630    }
000076  bdf8              POP      {r3-r7,pc}
;;;631    
                          ENDP

                  |L42.120|
                          DCD      ||.constdata||+0x154
                  |L42.124|
00007c  4541502d          DCB      "EAP-FAST: NONCE",0
000080  46415354
000084  3a204e4f
000088  4e434500
                  |L42.140|
00008c  4541502d          DCB      "EAP-FAST: Compound MAC",0
000090  46415354
000094  3a20436f
000098  6d706f75
00009c  6e64204d
0000a0  414300  
0000a3  00                DCB      0

                          AREA ||i.eap_fast_write_pac_request||, CODE, READONLY, ALIGN=1

                  eap_fast_write_pac_request PROC
;;;713    
;;;714    static u8 * eap_fast_write_pac_request(u8 *pos, u16 pac_type)
000000  b570              PUSH     {r4-r6,lr}
;;;715    {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;716    	struct eap_tlv_hdr *pac;
;;;717    	struct eap_tlv_request_action_tlv *act;
;;;718    	struct eap_tlv_pac_type_tlv *type;
;;;719    
;;;720    	act = (struct eap_tlv_request_action_tlv *) pos;
000006  4611              MOV      r1,r2
;;;721    	act->tlv_type = host_to_be16(EAP_TLV_REQUEST_ACTION_TLV);
000008  f44f5098          MOV      r0,#0x1300
00000c  8008              STRH     r0,[r1,#0]
;;;722    	act->length = host_to_be16(2);
00000e  f44f7000          MOV      r0,#0x200
000012  8048              STRH     r0,[r1,#2]
;;;723    	act->action = host_to_be16(EAP_TLV_ACTION_PROCESS_TLV);
000014  1040              ASRS     r0,r0,#1
000016  8088              STRH     r0,[r1,#4]
;;;724    
;;;725    	pac = (struct eap_tlv_hdr *) (act + 1);
000018  1d8d              ADDS     r5,r1,#6
;;;726    	pac->tlv_type = host_to_be16(EAP_TLV_PAC_TLV);
00001a  f44f6030          MOV      r0,#0xb00
00001e  8028              STRH     r0,[r5,#0]
;;;727    	pac->length = host_to_be16(sizeof(*type));
000020  f44f60c0          MOV      r0,#0x600
000024  8068              STRH     r0,[r5,#2]
;;;728    
;;;729    	type = (struct eap_tlv_pac_type_tlv *) (pac + 1);
000026  1d2b              ADDS     r3,r5,#4
;;;730    	type->tlv_type = host_to_be16(PAC_TYPE_PAC_TYPE);
000028  f44f6020          MOV      r0,#0xa00
00002c  8018              STRH     r0,[r3,#0]
;;;731    	type->length = host_to_be16(2);
00002e  f44f7000          MOV      r0,#0x200
000032  8058              STRH     r0,[r3,#2]
;;;732    	type->pac_type = host_to_be16(pac_type);
000034  f44f407f          MOV      r0,#0xff00
000038  ea002004          AND      r0,r0,r4,LSL #8
00003c  ea402014          ORR      r0,r0,r4,LSR #8
000040  8098              STRH     r0,[r3,#4]
;;;733    
;;;734    	return (u8 *) (type + 1);
000042  1d98              ADDS     r0,r3,#6
;;;735    }
000044  bd70              POP      {r4-r6,pc}
;;;736    
                          ENDP


                          AREA ||i.eap_peer_fast_register||, CODE, READONLY, ALIGN=2

                  eap_peer_fast_register PROC
;;;1684   
;;;1685   int eap_peer_fast_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1686   {
;;;1687   	struct eap_method *eap;
;;;1688   	int ret;
;;;1689   
;;;1690   	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a311              ADR      r3,|L44.72|
000004  222b              MOVS     r2,#0x2b
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;1691   				    EAP_VENDOR_IETF, EAP_TYPE_FAST, "FAST");
;;;1692   	if (eap == NULL)
000010  b914              CBNZ     r4,|L44.24|
;;;1693   		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L44.22|
;;;1694   
;;;1695   	eap->init = eap_fast_init;
;;;1696   	eap->deinit = eap_fast_deinit;
;;;1697   	eap->process = eap_fast_process;
;;;1698   	eap->isKeyAvailable = eap_fast_isKeyAvailable;
;;;1699   	eap->getKey = eap_fast_getKey;
;;;1700   	eap->get_status = eap_fast_get_status;
;;;1701   #if 0
;;;1702   	eap->has_reauth_data = eap_fast_has_reauth_data;
;;;1703   	eap->deinit_for_reauth = eap_fast_deinit_for_reauth;
;;;1704   	eap->init_for_reauth = eap_fast_init_for_reauth;
;;;1705   #endif
;;;1706   	eap->get_emsk = eap_fast_get_emsk;
;;;1707   
;;;1708   	ret = eap_peer_method_register(eap);
;;;1709   	if (ret)
;;;1710   		eap_peer_method_free(eap);
;;;1711   	return ret;
;;;1712   }
000016  bd70              POP      {r4-r6,pc}
                  |L44.24|
000018  480d              LDR      r0,|L44.80|
00001a  60e0              STR      r0,[r4,#0xc]          ;1695
00001c  480d              LDR      r0,|L44.84|
00001e  6120              STR      r0,[r4,#0x10]         ;1696
000020  480d              LDR      r0,|L44.88|
000022  6160              STR      r0,[r4,#0x14]         ;1697
000024  480d              LDR      r0,|L44.92|
000026  61a0              STR      r0,[r4,#0x18]         ;1698
000028  480d              LDR      r0,|L44.96|
00002a  61e0              STR      r0,[r4,#0x1c]         ;1699
00002c  480d              LDR      r0,|L44.100|
00002e  6220              STR      r0,[r4,#0x20]         ;1700
000030  480d              LDR      r0,|L44.104|
000032  6420              STR      r0,[r4,#0x40]         ;1706
000034  4620              MOV      r0,r4                 ;1708
000036  f7fffffe          BL       eap_peer_method_register
00003a  4605              MOV      r5,r0                 ;1708
00003c  b115              CBZ      r5,|L44.68|
00003e  4620              MOV      r0,r4                 ;1710
000040  f7fffffe          BL       eap_peer_method_free
                  |L44.68|
000044  4628              MOV      r0,r5                 ;1711
000046  e7e6              B        |L44.22|
                          ENDP

                  |L44.72|
000048  46415354          DCB      "FAST",0
00004c  00      
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L44.80|
                          DCD      eap_fast_init
                  |L44.84|
                          DCD      eap_fast_deinit
                  |L44.88|
                          DCD      eap_fast_process
                  |L44.92|
                          DCD      eap_fast_isKeyAvailable
                  |L44.96|
                          DCD      eap_fast_getKey
                  |L44.100|
                          DCD      eap_fast_get_status
                  |L44.104|
                          DCD      eap_fast_get_emsk

                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L47.30|
00001a  2001              MOVS     r0,#1
                  |L47.28|
;;;495    }
00001c  4770              BX       lr
                  |L47.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L47.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L52.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L52.14|
                  |L52.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L52.12|
;;;70     }
00000c  4770              BX       lr
                  |L52.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L52.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L53.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L53.16|
                  |L53.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L53.14|
;;;76     }
00000e  4770              BX       lr
                  |L53.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L53.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L54.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L54.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L54.18|
                  |L54.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L54.16|
;;;57     }
000010  4770              BX       lr
                  |L54.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L54.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L55.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L55.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L55.20|
                  |L55.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L55.18|
;;;64     }
000012  4770              BX       lr
                  |L55.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L55.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L56.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L56.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L56.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L56.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L59.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L59.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L59.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L59.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L65.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L65.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  46415354          DCB      0x46,0x41,0x53,0x54
000008  3a205365          DCB      0x3a,0x20,0x53,0x65
00000c  7373696f          DCB      0x73,0x73,0x69,0x6f
000010  6e546963          DCB      0x6e,0x54,0x69,0x63
000014  6b657420          DCB      0x6b,0x65,0x74,0x20
000018  6661696c          DCB      0x66,0x61,0x69,0x6c
00001c  6564202d          DCB      0x65,0x64,0x20,0x2d
000020  2066616c          DCB      0x20,0x66,0x61,0x6c
000024  6c206261          DCB      0x6c,0x20,0x62,0x61
000028  636b2074          DCB      0x63,0x6b,0x20,0x74
00002c  6f206675          DCB      0x6f,0x20,0x66,0x75
000030  6c6c2054          DCB      0x6c,0x6c,0x20,0x54
000034  4c532068          DCB      0x4c,0x53,0x20,0x68
000038  616e6473          DCB      0x61,0x6e,0x64,0x73
00003c  68616b65          DCB      0x68,0x61,0x6b,0x65
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  4541502d          DCB      0x45,0x41,0x50,0x2d
000048  46415354          DCB      0x46,0x41,0x53,0x54
00004c  3a204f6e          DCB      0x3a,0x20,0x4f,0x6e
000050  6c792045          DCB      0x6c,0x79,0x20,0x45
000054  41502d4d          DCB      0x41,0x50,0x2d,0x4d
000058  53434841          DCB      0x53,0x43,0x48,0x41
00005c  50763220          DCB      0x50,0x76,0x32,0x20
000060  69732061          DCB      0x69,0x73,0x20,0x61
000064  6c6c6f77          DCB      0x6c,0x6c,0x6f,0x77
000068  65642064          DCB      0x65,0x64,0x20,0x64
00006c  7572696e          DCB      0x75,0x72,0x69,0x6e
000070  6720756e          DCB      0x67,0x20,0x75,0x6e
000074  61757468          DCB      0x61,0x75,0x74,0x68
000078  656e7469          DCB      0x65,0x6e,0x74,0x69
00007c  63617465          DCB      0x63,0x61,0x74,0x65
000080  64207072          DCB      0x64,0x20,0x70,0x72
000084  6f766973          DCB      0x6f,0x76,0x69,0x73
000088  696f6e69          DCB      0x69,0x6f,0x6e,0x69
00008c  6e673b20          DCB      0x6e,0x67,0x3b,0x20
000090  72656a65          DCB      0x72,0x65,0x6a,0x65
000094  63742070          DCB      0x63,0x74,0x20,0x70
000098  68617365          DCB      0x68,0x61,0x73,0x65
00009c  32207479          DCB      0x32,0x20,0x74,0x79
0000a0  70652025          DCB      0x70,0x65,0x20,0x25
0000a4  64000000          DCB      0x64,0x00,0x00,0x00
0000a8  4541502d          DCB      0x45,0x41,0x50,0x2d
0000ac  46415354          DCB      0x46,0x41,0x53,0x54
0000b0  3a204372          DCB      0x3a,0x20,0x43,0x72
0000b4  7970746f          DCB      0x79,0x70,0x74,0x6f
0000b8  2d42696e          DCB      0x2d,0x42,0x69,0x6e
0000bc  64696e67          DCB      0x64,0x69,0x6e,0x67
0000c0  20544c56          DCB      0x20,0x54,0x4c,0x56
0000c4  3a205665          DCB      0x3a,0x20,0x56,0x65
0000c8  7273696f          DCB      0x72,0x73,0x69,0x6f
0000cc  6e202564          DCB      0x6e,0x20,0x25,0x64
0000d0  20526563          DCB      0x20,0x52,0x65,0x63
0000d4  65697665          DCB      0x65,0x69,0x76,0x65
0000d8  64205665          DCB      0x64,0x20,0x56,0x65
0000dc  7273696f          DCB      0x72,0x73,0x69,0x6f
0000e0  6e202564          DCB      0x6e,0x20,0x25,0x64
0000e4  20537562          DCB      0x20,0x53,0x75,0x62
0000e8  54797065          DCB      0x54,0x79,0x70,0x65
0000ec  20256400          DCB      0x20,0x25,0x64,0x00
0000f0  4541502d          DCB      0x45,0x41,0x50,0x2d
0000f4  46415354          DCB      0x46,0x41,0x53,0x54
0000f8  3a20496e          DCB      0x3a,0x20,0x49,0x6e
0000fc  76616c69          DCB      0x76,0x61,0x6c,0x69
000100  64207665          DCB      0x64,0x20,0x76,0x65
000104  7273696f          DCB      0x72,0x73,0x69,0x6f
000108  6e2f7375          DCB      0x6e,0x2f,0x73,0x75
00010c  62747970          DCB      0x62,0x74,0x79,0x70
000110  6520696e          DCB      0x65,0x20,0x69,0x6e
000114  20437279          DCB      0x20,0x43,0x72,0x79
000118  70746f2d          DCB      0x70,0x74,0x6f,0x2d
00011c  42696e64          DCB      0x42,0x69,0x6e,0x64
000120  696e6720          DCB      0x69,0x6e,0x67,0x20
000124  544c563a          DCB      0x54,0x4c,0x56,0x3a
000128  20566572          DCB      0x20,0x56,0x65,0x72
00012c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000130  20256420          DCB      0x20,0x25,0x64,0x20
000134  52656365          DCB      0x52,0x65,0x63,0x65
000138  69766564          DCB      0x69,0x76,0x65,0x64
00013c  20566572          DCB      0x20,0x56,0x65,0x72
000140  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000144  20256420          DCB      0x20,0x25,0x64,0x20
000148  53756254          DCB      0x53,0x75,0x62,0x54
00014c  79706520          DCB      0x79,0x70,0x65,0x20
000150  25640000          DCB      0x25,0x64,0x00,0x00
000154  4541502d          DCB      0x45,0x41,0x50,0x2d
000158  46415354          DCB      0x46,0x41,0x53,0x54
00015c  3a205265          DCB      0x3a,0x20,0x52,0x65
000160  706c7920          DCB      0x70,0x6c,0x79,0x20
000164  43727970          DCB      0x43,0x72,0x79,0x70
000168  746f2d42          DCB      0x74,0x6f,0x2d,0x42
00016c  696e6469          DCB      0x69,0x6e,0x64,0x69
000170  6e672054          DCB      0x6e,0x67,0x20,0x54
000174  4c563a20          DCB      0x4c,0x56,0x3a,0x20
000178  56657273          DCB      0x56,0x65,0x72,0x73
00017c  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000180  25642052          DCB      0x25,0x64,0x20,0x52
000184  65636569          DCB      0x65,0x63,0x65,0x69
000188  76656420          DCB      0x76,0x65,0x64,0x20
00018c  56657273          DCB      0x56,0x65,0x72,0x73
000190  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000194  25642053          DCB      0x25,0x64,0x20,0x53
000198  75625479          DCB      0x75,0x62,0x54,0x79
00019c  70652025          DCB      0x70,0x65,0x20,0x25
0001a0  64000000          DCB      0x64,0x00,0x00,0x00
0001a4  4541502d          DCB      0x45,0x41,0x50,0x2d
0001a8  46415354          DCB      0x46,0x41,0x53,0x54
0001ac  3a205365          DCB      0x3a,0x20,0x53,0x65
0001b0  6e642050          DCB      0x6e,0x64,0x20,0x50
0001b4  41432d41          DCB      0x41,0x43,0x2d,0x41
0001b8  636b6e6f          DCB      0x63,0x6b,0x6e,0x6f
0001bc  776c6564          DCB      0x77,0x6c,0x65,0x64
0001c0  67656d65          DCB      0x67,0x65,0x6d,0x65
0001c4  6e742054          DCB      0x6e,0x74,0x20,0x54
0001c8  4c56202d          DCB      0x4c,0x56,0x20,0x2d
0001cc  2050726f          DCB      0x20,0x50,0x72,0x6f
0001d0  76697369          DCB      0x76,0x69,0x73,0x69
0001d4  6f6e696e          DCB      0x6f,0x6e,0x69,0x6e
0001d8  6720636f          DCB      0x67,0x20,0x63,0x6f
0001dc  6d706c65          DCB      0x6d,0x70,0x6c,0x65
0001e0  74656420          DCB      0x74,0x65,0x64,0x20
0001e4  73756363          DCB      0x73,0x75,0x63,0x63
0001e8  65737366          DCB      0x65,0x73,0x73,0x66
0001ec  756c6c79          DCB      0x75,0x6c,0x6c,0x79
0001f0  00000000          DCB      0x00,0x00,0x00,0x00
0001f4  4541502d          DCB      0x45,0x41,0x50,0x2d
0001f8  46415354          DCB      0x46,0x41,0x53,0x54
0001fc  3a205365          DCB      0x3a,0x20,0x53,0x65
000200  6e642050          DCB      0x6e,0x64,0x20,0x50
000204  41432d41          DCB      0x41,0x43,0x2d,0x41
000208  636b6e6f          DCB      0x63,0x6b,0x6e,0x6f
00020c  776c6564          DCB      0x77,0x6c,0x65,0x64
000210  67656d65          DCB      0x67,0x65,0x6d,0x65
000214  6e742054          DCB      0x6e,0x74,0x20,0x54
000218  4c56202d          DCB      0x4c,0x56,0x20,0x2d
00021c  20504143          DCB      0x20,0x50,0x41,0x43
000220  20726566          DCB      0x20,0x72,0x65,0x66
000224  72657368          DCB      0x72,0x65,0x73,0x68
000228  696e6720          DCB      0x69,0x6e,0x67,0x20
00022c  636f6d70          DCB      0x63,0x6f,0x6d,0x70
000230  6c657465          DCB      0x6c,0x65,0x74,0x65
000234  64207375          DCB      0x64,0x20,0x73,0x75
000238  63636573          DCB      0x63,0x63,0x65,0x73
00023c  7366756c          DCB      0x73,0x66,0x75,0x6c
000240  6c790000          DCB      0x6c,0x79,0x00,0x00
000244  4541502d          DCB      0x45,0x41,0x50,0x2d
000248  46415354          DCB      0x46,0x41,0x53,0x54
00024c  3a205065          DCB      0x3a,0x20,0x50,0x65
000250  6e64696e          DCB      0x6e,0x64,0x69,0x6e
000254  67205068          DCB      0x67,0x20,0x50,0x68
000258  61736520          DCB      0x61,0x73,0x65,0x20
00025c  32207265          DCB      0x32,0x20,0x72,0x65
000260  71756573          DCB      0x71,0x75,0x65,0x73
000264  74202d20          DCB      0x74,0x20,0x2d,0x20
000268  736b6970          DCB      0x73,0x6b,0x69,0x70
00026c  20646563          DCB      0x20,0x64,0x65,0x63
000270  72797074          DCB      0x72,0x79,0x70,0x74
000274  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000278  616e6420          DCB      0x61,0x6e,0x64,0x20
00027c  75736520          DCB      0x75,0x73,0x65,0x20
000280  6f6c6420          DCB      0x6f,0x6c,0x64,0x20
000284  64617461          DCB      0x64,0x61,0x74,0x61
000288  00000000          DCB      0x00,0x00,0x00,0x00
00028c  4541502d          DCB      0x45,0x41,0x50,0x2d
000290  46415354          DCB      0x46,0x41,0x53,0x54
000294  3a20456e          DCB      0x3a,0x20,0x45,0x6e
000298  61626c69          DCB      0x61,0x62,0x6c,0x69
00029c  6e672075          DCB      0x6e,0x67,0x20,0x75
0002a0  6e617574          DCB      0x6e,0x61,0x75,0x74
0002a4  68656e74          DCB      0x68,0x65,0x6e,0x74
0002a8  69636174          DCB      0x69,0x63,0x61,0x74
0002ac  65642070          DCB      0x65,0x64,0x20,0x70
0002b0  726f7669          DCB      0x72,0x6f,0x76,0x69
0002b4  73696f6e          DCB      0x73,0x69,0x6f,0x6e
0002b8  696e6720          DCB      0x69,0x6e,0x67,0x20
0002bc  544c5320          DCB      0x54,0x4c,0x53,0x20
0002c0  63697068          DCB      0x63,0x69,0x70,0x68
0002c4  65722073          DCB      0x65,0x72,0x20,0x73
0002c8  75697465          DCB      0x75,0x69,0x74,0x65
0002cc  73000000          DCB      0x73,0x00,0x00,0x00
0002d0  4541502d          DCB      0x45,0x41,0x50,0x2d
0002d4  46415354          DCB      0x46,0x41,0x53,0x54
0002d8  3a20436f          DCB      0x3a,0x20,0x43,0x6f
0002dc  756c6420          DCB      0x75,0x6c,0x64,0x20
0002e0  6e6f7420          DCB      0x6e,0x6f,0x74,0x20
0002e4  636f6e66          DCB      0x63,0x6f,0x6e,0x66
0002e8  69677572          DCB      0x69,0x67,0x75,0x72
0002ec  6520544c          DCB      0x65,0x20,0x54,0x4c
0002f0  53206369          DCB      0x53,0x20,0x63,0x69
0002f4  70686572          DCB      0x70,0x68,0x65,0x72
0002f8  20737569          DCB      0x20,0x73,0x75,0x69
0002fc  74657320          DCB      0x74,0x65,0x73,0x20
000300  666f7220          DCB      0x66,0x6f,0x72,0x20
000304  70726f76          DCB      0x70,0x72,0x6f,0x76
000308  6973696f          DCB      0x69,0x73,0x69,0x6f
00030c  6e696e67          DCB      0x6e,0x69,0x6e,0x67
000310  00000000          DCB      0x00,0x00,0x00,0x00
000314  4541502d          DCB      0x45,0x41,0x50,0x2d
000318  46415354          DCB      0x46,0x41,0x53,0x54
00031c  3a205472          DCB      0x3a,0x20,0x54,0x72
000320  79696e67          DCB      0x79,0x69,0x6e,0x67
000324  20746f20          DCB      0x20,0x74,0x6f,0x20
000328  72657375          DCB      0x72,0x65,0x73,0x75
00032c  6d652073          DCB      0x6d,0x65,0x20,0x73
000330  65737369          DCB      0x65,0x73,0x73,0x69
000334  6f6e202d          DCB      0x6f,0x6e,0x20,0x2d
000338  20646f20          DCB      0x20,0x64,0x6f,0x20
00033c  6e6f7420          DCB      0x6e,0x6f,0x74,0x20
000340  61646420          DCB      0x61,0x64,0x64,0x20
000344  5041432d          DCB      0x50,0x41,0x43,0x2d
000348  4f706171          DCB      0x4f,0x70,0x61,0x71
00034c  75652074          DCB      0x75,0x65,0x20,0x74
000350  6f20544c          DCB      0x6f,0x20,0x54,0x4c
000354  5320436c          DCB      0x53,0x20,0x43,0x6c
000358  69656e74          DCB      0x69,0x65,0x6e,0x74
00035c  48656c6c          DCB      0x48,0x65,0x6c,0x6c
000360  6f00              DCB      0x6f,0x00
