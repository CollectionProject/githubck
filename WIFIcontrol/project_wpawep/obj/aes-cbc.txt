; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\aes-cbc.o --depend=.\obj\aes-cbc.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\aes-cbc.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\aes-cbc.c]
                          THUMB

                          AREA ||i.aes_128_cbc_decrypt||, CODE, READONLY, ALIGN=1

                  aes_128_cbc_decrypt PROC
;;;62      */
;;;63     int aes_128_cbc_decrypt(const u8 *key, const u8 *iv, u8 *data, size_t data_len)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;64     {
000004  b089              SUB      sp,sp,#0x24
000006  4683              MOV      r11,r0
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;65     	void *ctx;
;;;66     	u8 cbc[AES_BLOCK_SIZE], tmp[AES_BLOCK_SIZE];
;;;67     	u8 *pos = data;
00000c  463c              MOV      r4,r7
;;;68     	int i, j, blocks;
;;;69     
;;;70     	ctx = aes_decrypt_init(key, 16);
00000e  2110              MOVS     r1,#0x10
000010  4658              MOV      r0,r11
000012  f7fffffe          BL       aes_decrypt_init
000016  4681              MOV      r9,r0
;;;71     	if (ctx == NULL)
000018  f1b90f00          CMP      r9,#0
00001c  d104              BNE      |L1.40|
;;;72     		return -1;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L1.34|
;;;73     	os_memcpy(cbc, iv, AES_BLOCK_SIZE);
;;;74     
;;;75     	blocks = data_len / AES_BLOCK_SIZE;
;;;76     	for (i = 0; i < blocks; i++) {
;;;77     		os_memcpy(tmp, pos, AES_BLOCK_SIZE);
;;;78     		aes_decrypt(ctx, pos, pos);
;;;79     		for (j = 0; j < AES_BLOCK_SIZE; j++)
;;;80     			pos[j] ^= cbc[j];
;;;81     		os_memcpy(cbc, tmp, AES_BLOCK_SIZE);
;;;82     		pos += AES_BLOCK_SIZE;
;;;83     	}
;;;84     	aes_decrypt_deinit(ctx);
;;;85     	return 0;
;;;86     }
000022  b00d              ADD      sp,sp,#0x34
000024  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.40|
000028  2210              MOVS     r2,#0x10              ;73
00002a  a805              ADD      r0,sp,#0x14           ;73
00002c  990a              LDR      r1,[sp,#0x28]         ;73
00002e  f7fffffe          BL       os_memcpy
000032  ea4f1a18          LSR      r10,r8,#4             ;75
000036  2600              MOVS     r6,#0                 ;76
000038  e01a              B        |L1.112|
                  |L1.58|
00003a  2210              MOVS     r2,#0x10              ;77
00003c  4621              MOV      r1,r4                 ;77
00003e  a801              ADD      r0,sp,#4              ;77
000040  f7fffffe          BL       os_memcpy
000044  4622              MOV      r2,r4                 ;78
000046  4621              MOV      r1,r4                 ;78
000048  4648              MOV      r0,r9                 ;78
00004a  f7fffffe          BL       aes_decrypt
00004e  2500              MOVS     r5,#0                 ;79
000050  e005              B        |L1.94|
                  |L1.82|
000052  5d60              LDRB     r0,[r4,r5]            ;80
000054  a905              ADD      r1,sp,#0x14           ;80
000056  5d49              LDRB     r1,[r1,r5]            ;80
000058  4048              EORS     r0,r0,r1              ;80
00005a  5560              STRB     r0,[r4,r5]            ;80
00005c  1c6d              ADDS     r5,r5,#1              ;79
                  |L1.94|
00005e  2d10              CMP      r5,#0x10              ;79
000060  dbf7              BLT      |L1.82|
000062  2210              MOVS     r2,#0x10              ;81
000064  a901              ADD      r1,sp,#4              ;81
000066  a805              ADD      r0,sp,#0x14           ;81
000068  f7fffffe          BL       os_memcpy
00006c  3410              ADDS     r4,r4,#0x10           ;82
00006e  1c76              ADDS     r6,r6,#1              ;76
                  |L1.112|
000070  4556              CMP      r6,r10                ;76
000072  dbe2              BLT      |L1.58|
000074  4648              MOV      r0,r9                 ;84
000076  f7fffffe          BL       aes_decrypt_deinit
00007a  2000              MOVS     r0,#0                 ;85
00007c  e7d1              B        |L1.34|
                          ENDP


                          AREA ||i.aes_128_cbc_encrypt||, CODE, READONLY, ALIGN=1

                  aes_128_cbc_encrypt PROC
;;;29      */
;;;30     int aes_128_cbc_encrypt(const u8 *key, const u8 *iv, u8 *data, size_t data_len)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;31     {
000004  b085              SUB      sp,sp,#0x14
000006  4683              MOV      r11,r0
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;32     	void *ctx;
;;;33     	u8 cbc[AES_BLOCK_SIZE];
;;;34     	u8 *pos = data;
00000c  463d              MOV      r5,r7
;;;35     	int i, j, blocks;
;;;36     
;;;37     	ctx = aes_encrypt_init(key, 16);
00000e  2110              MOVS     r1,#0x10
000010  4658              MOV      r0,r11
000012  f7fffffe          BL       aes_encrypt_init
000016  4681              MOV      r9,r0
;;;38     	if (ctx == NULL)
000018  f1b90f00          CMP      r9,#0
00001c  d104              BNE      |L2.40|
;;;39     		return -1;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L2.34|
;;;40     	os_memcpy(cbc, iv, AES_BLOCK_SIZE);
;;;41     
;;;42     	blocks = data_len / AES_BLOCK_SIZE;
;;;43     	for (i = 0; i < blocks; i++) {
;;;44     		for (j = 0; j < AES_BLOCK_SIZE; j++)
;;;45     			cbc[j] ^= pos[j];
;;;46     		aes_encrypt(ctx, cbc, cbc);
;;;47     		os_memcpy(pos, cbc, AES_BLOCK_SIZE);
;;;48     		pos += AES_BLOCK_SIZE;
;;;49     	}
;;;50     	aes_encrypt_deinit(ctx);
;;;51     	return 0;
;;;52     }
000022  b009              ADD      sp,sp,#0x24
000024  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.40|
000028  2210              MOVS     r2,#0x10              ;40
00002a  a801              ADD      r0,sp,#4              ;40
00002c  9906              LDR      r1,[sp,#0x18]         ;40
00002e  f7fffffe          BL       os_memcpy
000032  ea4f1a18          LSR      r10,r8,#4             ;42
000036  2600              MOVS     r6,#0                 ;43
000038  e016              B        |L2.104|
                  |L2.58|
00003a  2400              MOVS     r4,#0                 ;44
00003c  e006              B        |L2.76|
                  |L2.62|
00003e  a801              ADD      r0,sp,#4              ;45
000040  5d00              LDRB     r0,[r0,r4]            ;45
000042  5d29              LDRB     r1,[r5,r4]            ;45
000044  4048              EORS     r0,r0,r1              ;45
000046  a901              ADD      r1,sp,#4              ;45
000048  5508              STRB     r0,[r1,r4]            ;45
00004a  1c64              ADDS     r4,r4,#1              ;44
                  |L2.76|
00004c  2c10              CMP      r4,#0x10              ;44
00004e  dbf6              BLT      |L2.62|
000050  aa01              ADD      r2,sp,#4              ;46
000052  a901              ADD      r1,sp,#4              ;46
000054  4648              MOV      r0,r9                 ;46
000056  f7fffffe          BL       aes_encrypt
00005a  2210              MOVS     r2,#0x10              ;47
00005c  a901              ADD      r1,sp,#4              ;47
00005e  4628              MOV      r0,r5                 ;47
000060  f7fffffe          BL       os_memcpy
000064  3510              ADDS     r5,r5,#0x10           ;48
000066  1c76              ADDS     r6,r6,#1              ;43
                  |L2.104|
000068  4556              CMP      r6,r10                ;43
00006a  dbe6              BLT      |L2.58|
00006c  4648              MOV      r0,r9                 ;50
00006e  f7fffffe          BL       aes_encrypt_deinit
000072  2000              MOVS     r0,#0                 ;51
000074  e7d5              B        |L2.34|
;;;53     
                          ENDP


                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L4.30|
00001a  2001              MOVS     r0,#1
                  |L4.28|
;;;495    }
00001c  4770              BX       lr
                  |L4.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L4.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L9.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L9.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L9.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L9.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L12.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L12.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L12.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L12.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L18.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L18.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

