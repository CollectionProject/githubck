; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\lwip.o --depend=.\obj\lwip.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\lwip.crf ..\lwIP\port\lwIP.c]
                          THUMB

                          AREA ||i.Init_lwIP||, CODE, READONLY, ALIGN=2

                  Init_lwIP PROC
;;;86     */
;;;87     void Init_lwIP(void)
000000  b510              PUSH     {r4,lr}
;;;88     {
000002  b088              SUB      sp,sp,#0x20
;;;89     	struct ip_addr ipaddr;
;;;90     	struct ip_addr netmask;
;;;91     	struct ip_addr gw;
;;;92     	struct ip_addr dnsserver;
;;;93     	long *cfg_ip=(long *)wireless_ip;
000004  4c47              LDR      r4,|L1.292|
;;;94     	//  sys_init();	 
;;;95     	/* Initializes the dynamic memory heap defined by MEM_SIZE.*/
;;;96     	mem_init();
000006  f7fffffe          BL       mem_init
;;;97     	/* Initializes the memory pools defined by MEMP_NUM_x.*/
;;;98     	memp_init();	
00000a  f7fffffe          BL       memp_init
;;;99     	pbuf_init();	
;;;100    	netif_init();
;;;101    	printf("TCP/IP initializing...\n");
00000e  a046              ADR      r0,|L1.296|
000010  f7fffffe          BL       __2printf
;;;102    	if(*cfg_ip==0){//no ip addr,use DHCP
000014  6820              LDR      r0,[r4,#0]
000016  b9d8              CBNZ     r0,|L1.80|
;;;103    		/* 启用DHCP服务器 */
;;;104    		ipaddr.addr = 0;
000018  2000              MOVS     r0,#0
00001a  9007              STR      r0,[sp,#0x1c]
;;;105    		netmask.addr = 0;
00001c  9006              STR      r0,[sp,#0x18]
;;;106    		gw.addr = 0;
00001e  9005              STR      r0,[sp,#0x14]
;;;107    		printf("using dhcp!\n");
000020  a047              ADR      r0,|L1.320|
000022  f7fffffe          BL       __2printf
;;;108    		netif_add(&netif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
000026  4b4a              LDR      r3,|L1.336|
000028  4a4a              LDR      r2,|L1.340|
00002a  2100              MOVS     r1,#0
00002c  e88d000e          STM      sp,{r1-r3}
000030  ab05              ADD      r3,sp,#0x14
000032  aa06              ADD      r2,sp,#0x18
000034  a907              ADD      r1,sp,#0x1c
000036  4848              LDR      r0,|L1.344|
000038  f7fffffe          BL       netif_add
;;;109    		netif_set_default(&netif);
00003c  4846              LDR      r0,|L1.344|
00003e  f7fffffe          BL       netif_set_default
;;;110    		netif_set_up(&netif);
000042  4845              LDR      r0,|L1.344|
000044  f7fffffe          BL       netif_set_up
;;;111    		dhcp_start(&netif);
000048  4843              LDR      r0,|L1.344|
00004a  f7fffffe          BL       dhcp_start
00004e  e061              B        |L1.276|
                  |L1.80|
;;;112    	}
;;;113    	else{
;;;114    		printf("using static ip!\n");
000050  a042              ADR      r0,|L1.348|
000052  f7fffffe          BL       __2printf
;;;115    		/* 启用静态IP */
;;;116    		IP4_ADDR(&ipaddr,wireless_ip[0], wireless_ip[1],
000056  4933              LDR      r1,|L1.292|
000058  7809              LDRB     r1,[r1,#0]  ; wireless_ip
00005a  060a              LSLS     r2,r1,#24
00005c  4931              LDR      r1,|L1.292|
00005e  7849              LDRB     r1,[r1,#1]  ; wireless_ip
000060  ea424201          ORR      r2,r2,r1,LSL #16
000064  492f              LDR      r1,|L1.292|
000066  7889              LDRB     r1,[r1,#2]  ; wireless_ip
000068  ea422101          ORR      r1,r2,r1,LSL #8
00006c  4a2d              LDR      r2,|L1.292|
00006e  78d2              LDRB     r2,[r2,#3]  ; wireless_ip
000070  ea410002          ORR      r0,r1,r2
000074  f7fffffe          BL       htonl
000078  9007              STR      r0,[sp,#0x1c]
;;;117    		wireless_ip[2], wireless_ip[3]);
;;;118    		IP4_ADDR(&netmask, wireless_mask[0], wireless_mask[1], 
00007a  493d              LDR      r1,|L1.368|
00007c  7809              LDRB     r1,[r1,#0]  ; wireless_mask
00007e  060a              LSLS     r2,r1,#24
000080  493b              LDR      r1,|L1.368|
000082  7849              LDRB     r1,[r1,#1]  ; wireless_mask
000084  ea424201          ORR      r2,r2,r1,LSL #16
000088  4939              LDR      r1,|L1.368|
00008a  7889              LDRB     r1,[r1,#2]  ; wireless_mask
00008c  ea422101          ORR      r1,r2,r1,LSL #8
000090  4a37              LDR      r2,|L1.368|
000092  78d2              LDRB     r2,[r2,#3]  ; wireless_mask
000094  ea410002          ORR      r0,r1,r2
000098  f7fffffe          BL       htonl
00009c  9006              STR      r0,[sp,#0x18]
;;;119    						wireless_mask[2], wireless_mask[3]);
;;;120    		IP4_ADDR(&gw, wireless_gw[0], wireless_gw[1],
00009e  4935              LDR      r1,|L1.372|
0000a0  7809              LDRB     r1,[r1,#0]  ; wireless_gw
0000a2  060a              LSLS     r2,r1,#24
0000a4  4933              LDR      r1,|L1.372|
0000a6  7849              LDRB     r1,[r1,#1]  ; wireless_gw
0000a8  ea424201          ORR      r2,r2,r1,LSL #16
0000ac  4931              LDR      r1,|L1.372|
0000ae  7889              LDRB     r1,[r1,#2]  ; wireless_gw
0000b0  ea422101          ORR      r1,r2,r1,LSL #8
0000b4  4a2f              LDR      r2,|L1.372|
0000b6  78d2              LDRB     r2,[r2,#3]  ; wireless_gw
0000b8  ea410002          ORR      r0,r1,r2
0000bc  f7fffffe          BL       htonl
0000c0  9005              STR      r0,[sp,#0x14]
;;;121    					wireless_gw[2], wireless_gw[3]);
;;;122    		IP4_ADDR(&dnsserver, wireless_dns[0], wireless_dns[1],
0000c2  492d              LDR      r1,|L1.376|
0000c4  7809              LDRB     r1,[r1,#0]  ; wireless_dns
0000c6  060a              LSLS     r2,r1,#24
0000c8  492b              LDR      r1,|L1.376|
0000ca  7849              LDRB     r1,[r1,#1]  ; wireless_dns
0000cc  ea424201          ORR      r2,r2,r1,LSL #16
0000d0  4929              LDR      r1,|L1.376|
0000d2  7889              LDRB     r1,[r1,#2]  ; wireless_dns
0000d4  ea422101          ORR      r1,r2,r1,LSL #8
0000d8  4a27              LDR      r2,|L1.376|
0000da  78d2              LDRB     r2,[r2,#3]  ; wireless_dns
0000dc  ea410002          ORR      r0,r1,r2
0000e0  f7fffffe          BL       htonl
0000e4  9004              STR      r0,[sp,#0x10]
;;;123    					wireless_dns[2], wireless_dns[3]);
;;;124    		dns_init();
0000e6  f7fffffe          BL       dns_init
;;;125    		dns_setserver(0, &dnsserver);//set dns server addr	
0000ea  a904              ADD      r1,sp,#0x10
0000ec  2000              MOVS     r0,#0
0000ee  f7fffffe          BL       dns_setserver
;;;126    		netif_add(&netif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
0000f2  4b17              LDR      r3,|L1.336|
0000f4  4a17              LDR      r2,|L1.340|
0000f6  2100              MOVS     r1,#0
0000f8  e88d000e          STM      sp,{r1-r3}
0000fc  ab05              ADD      r3,sp,#0x14
0000fe  aa06              ADD      r2,sp,#0x18
000100  a907              ADD      r1,sp,#0x1c
000102  4815              LDR      r0,|L1.344|
000104  f7fffffe          BL       netif_add
;;;127    		netif_set_default(&netif);
000108  4813              LDR      r0,|L1.344|
00010a  f7fffffe          BL       netif_set_default
;;;128    		netif_set_up(&netif);
00010e  4812              LDR      r0,|L1.344|
000110  f7fffffe          BL       netif_set_up
                  |L1.276|
;;;129    	}
;;;130    	timerbase_config();
000114  f7fffffe          BL       timerbase_config
;;;131    	printf("TCP/IP initialized.\n");
000118  a018              ADR      r0,|L1.380|
00011a  f7fffffe          BL       __2printf
;;;132    }
00011e  b008              ADD      sp,sp,#0x20
000120  bd10              POP      {r4,pc}
;;;133    
                          ENDP

000122  0000              DCW      0x0000
                  |L1.292|
                          DCD      wireless_ip
                  |L1.296|
000128  5443502f          DCB      "TCP/IP initializing...\n",0
00012c  49502069
000130  6e697469
000134  616c697a
000138  696e672e
00013c  2e2e0a00
                  |L1.320|
000140  7573696e          DCB      "using dhcp!\n",0
000144  67206468
000148  6370210a
00014c  00      
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L1.336|
                          DCD      ethernet_input
                  |L1.340|
                          DCD      ethernetif_init
                  |L1.344|
                          DCD      netif
                  |L1.348|
00015c  7573696e          DCB      "using static ip!\n",0
000160  67207374
000164  61746963
000168  20697021
00016c  0a00    
00016e  00                DCB      0
00016f  00                DCB      0
                  |L1.368|
                          DCD      wireless_mask
                  |L1.372|
                          DCD      wireless_gw
                  |L1.376|
                          DCD      wireless_dns
                  |L1.380|
00017c  5443502f          DCB      "TCP/IP initialized.\n",0
000180  49502069
000184  6e697469
000188  616c697a
00018c  65642e0a
000190  00      
000191  00                DCB      0
000192  00                DCB      0
000193  00                DCB      0

                          AREA ||i.rest_sys_mem||, CODE, READONLY, ALIGN=1

                  rest_sys_mem PROC
;;;133    
;;;134    void rest_sys_mem(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136        mem_init();
000002  f7fffffe          BL       mem_init
;;;137        /* Initializes the memory pools defined by MEMP_NUM_x.*/
;;;138        memp_init();    
000006  f7fffffe          BL       memp_init
;;;139        pbuf_init();	
;;;140    }
00000a  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.timer2_int||, CODE, READONLY, ALIGN=2

                  timer2_int PROC
;;;44     int app_time2=0;
;;;45     void timer2_int(void)
000000  b510              PUSH     {r4,lr}
;;;46     {
;;;47     	if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET){
000002  2101              MOVS     r1,#1
000004  0788              LSLS     r0,r1,#30
000006  f7fffffe          BL       TIM_GetITStatus
00000a  b1e8              CBZ      r0,|L3.72|
;;;48     		 TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
00000c  2101              MOVS     r1,#1
00000e  0788              LSLS     r0,r1,#30
000010  f7fffffe          BL       TIM_ClearITPendingBit
;;;49     		 time_flag=1;
000014  2001              MOVS     r0,#1
000016  490d              LDR      r1,|L3.76|
000018  7008              STRB     r0,[r1,#0]
;;;50     		 dns_time++;
00001a  480d              LDR      r0,|L3.80|
00001c  7800              LDRB     r0,[r0,#0]  ; dns_time
00001e  1c40              ADDS     r0,r0,#1
000020  490b              LDR      r1,|L3.80|
000022  7008              STRB     r0,[r1,#0]
;;;51     		 slow_timer=slow_timer? 0:1;
000024  480b              LDR      r0,|L3.84|
000026  7800              LDRB     r0,[r0,#0]  ; slow_timer
000028  b908              CBNZ     r0,|L3.46|
00002a  2001              MOVS     r0,#1
00002c  e000              B        |L3.48|
                  |L3.46|
00002e  2000              MOVS     r0,#0
                  |L3.48|
000030  4908              LDR      r1,|L3.84|
000032  7008              STRB     r0,[r1,#0]
;;;52     		 app_time++;
000034  4808              LDR      r0,|L3.88|
000036  6800              LDR      r0,[r0,#0]  ; app_time
000038  1c40              ADDS     r0,r0,#1
00003a  4907              LDR      r1,|L3.88|
00003c  6008              STR      r0,[r1,#0]  ; app_time
;;;53     		 app_time2++;
00003e  4807              LDR      r0,|L3.92|
000040  6800              LDR      r0,[r0,#0]  ; app_time2
000042  1c40              ADDS     r0,r0,#1
000044  4905              LDR      r1,|L3.92|
000046  6008              STR      r0,[r1,#0]  ; app_time2
                  |L3.72|
;;;54     	}
;;;55     }
000048  bd10              POP      {r4,pc}
;;;56     void timer_thread(void)
                          ENDP

00004a  0000              DCW      0x0000
                  |L3.76|
                          DCD      time_flag
                  |L3.80|
                          DCD      dns_time
                  |L3.84|
                          DCD      slow_timer
                  |L3.88|
                          DCD      app_time
                  |L3.92|
                          DCD      app_time2

                          AREA ||i.timer_thread||, CODE, READONLY, ALIGN=2

                  timer_thread PROC
;;;55     }
;;;56     void timer_thread(void)
000000  b570              PUSH     {r4-r6,lr}
;;;57     {
;;;58     	char fast_flag=0;
000002  2500              MOVS     r5,#0
;;;59     	char slow_flag=0;
000004  2400              MOVS     r4,#0
;;;60     	//char dns_flag=0;
;;;61     	
;;;62     	disable_timer();//变量重入	
000006  f7fffffe          BL       disable_timer
;;;63     	fast_flag=time_flag;
00000a  480d              LDR      r0,|L4.64|
00000c  7805              LDRB     r5,[r0,#0]  ; time_flag
;;;64     	time_flag=0;
00000e  2000              MOVS     r0,#0
000010  490b              LDR      r1,|L4.64|
000012  7008              STRB     r0,[r1,#0]
;;;65     	slow_flag=slow_timer;
000014  480b              LDR      r0,|L4.68|
000016  7804              LDRB     r4,[r0,#0]  ; slow_timer
;;;66     	if(dns_time>4){
000018  480b              LDR      r0,|L4.72|
00001a  7800              LDRB     r0,[r0,#0]  ; dns_time
00001c  2804              CMP      r0,#4
00001e  dd02              BLE      |L4.38|
;;;67     		dns_time=0;
000020  2000              MOVS     r0,#0
000022  4909              LDR      r1,|L4.72|
000024  7008              STRB     r0,[r1,#0]
                  |L4.38|
;;;68     	}
;;;69     	enable_timer();
000026  f7fffffe          BL       enable_timer
;;;70     	if(fast_flag){//lwip不可重入解决方法
00002a  b13d              CBZ      r5,|L4.60|
;;;71     		time_flag=0;
00002c  2000              MOVS     r0,#0
00002e  4904              LDR      r1,|L4.64|
000030  7008              STRB     r0,[r1,#0]
;;;72     		tcp_fasttmr();
000032  f7fffffe          BL       tcp_fasttmr
;;;73     		if(slow_flag)
000036  b10c              CBZ      r4,|L4.60|
;;;74     			tcp_slowtmr();
000038  f7fffffe          BL       tcp_slowtmr
                  |L4.60|
;;;75     //		if(dns_flag)
;;;76     //	 	 	dns_tmr();//dns updata
;;;77     	}
;;;78     }
00003c  bd70              POP      {r4-r6,pc}
;;;79     
                          ENDP

00003e  0000              DCW      0x0000
                  |L4.64|
                          DCD      time_flag
                  |L4.68|
                          DCD      slow_timer
                  |L4.72|
                          DCD      dns_time

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  netif
                          %        56
                  enc_netif
                          %        56
                  default_netif
                          %        56

                          AREA ||.data||, DATA, ALIGN=2

                  slow_timer
000000  00                DCB      0x00
                  time_flag
000001  00                DCB      0x00
                  dns_time
000002  0000              DCB      0x00,0x00
                  app_time
                          DCD      0x00000000
                  app_time2
                          DCD      0x00000000
