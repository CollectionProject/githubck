; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\l2_packet_none.o --depend=.\obj\l2_packet_none.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\l2_packet -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\l2_packet_none.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\l2_packet\l2_packet_none.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L2.30|
00001a  2001              MOVS     r0,#1
                  |L2.28|
;;;495    }
00001c  4770              BX       lr
                  |L2.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L2.28|
;;;496    
                          ENDP


                          AREA ||i.l2_packet_deinit||, CODE, READONLY, ALIGN=1

                  l2_packet_deinit PROC
;;;100    
;;;101    void l2_packet_deinit(struct l2_packet_data *l2)
000000  b510              PUSH     {r4,lr}
;;;102    {
000002  4604              MOV      r4,r0
;;;103    
;;;104    	if (l2 == NULL)
000004  b904              CBNZ     r4,|L3.8|
                  |L3.6|
;;;105    		return;
;;;106    
;;;107    	if (l2->fd >= 0) {
;;;108    		eloop_unregister_read_sock(l2->fd);
;;;109    		/* TODO: close connection */
;;;110    	}
;;;111    		
;;;112    	os_free(l2);
;;;113    }
000006  bd10              POP      {r4,pc}
                  |L3.8|
000008  6a60              LDR      r0,[r4,#0x24]         ;107
00000a  2800              CMP      r0,#0                 ;107
00000c  db02              BLT      |L3.20|
00000e  6a60              LDR      r0,[r4,#0x24]         ;108
000010  f7fffffe          BL       eloop_unregister_read_sock
                  |L3.20|
000014  4620              MOV      r0,r4                 ;112
000016  f7fffffe          BL       os_free
00001a  bf00              NOP      
00001c  e7f3              B        |L3.6|
;;;114    
                          ENDP


                          AREA ||i.l2_packet_get_ip_addr||, CODE, READONLY, ALIGN=1

                  l2_packet_get_ip_addr PROC
;;;115    
;;;116    int l2_packet_get_ip_addr(struct l2_packet_data *l2, char *buf, size_t len)
000000  4603              MOV      r3,r0
;;;117    {
;;;118    	/* TODO: get interface IP address */
;;;119    	return -1;
000002  f04f30ff          MOV      r0,#0xffffffff
;;;120    }
000006  4770              BX       lr
;;;121    
                          ENDP


                          AREA ||i.l2_packet_get_own_addr||, CODE, READONLY, ALIGN=1

                  l2_packet_get_own_addr PROC
;;;35     
;;;36     int l2_packet_get_own_addr(struct l2_packet_data *l2, u8 *addr)
000000  b570              PUSH     {r4-r6,lr}
;;;37     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;38     	os_memcpy(addr, l2->own_addr, ETH_ALEN);
000006  2206              MOVS     r2,#6
000008  f1050111          ADD      r1,r5,#0x11
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       os_memcpy
;;;39     	return 0;
000012  2000              MOVS     r0,#0
;;;40     }
000014  bd70              POP      {r4-r6,pc}
;;;41     
                          ENDP


                          AREA ||i.l2_packet_init||, CODE, READONLY, ALIGN=2

                  l2_packet_init PROC
;;;73     
;;;74     struct l2_packet_data * l2_packet_init(
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;75     	const char *ifname, const u8 *own_addr, unsigned short protocol,
;;;76     	void (*rx_callback)(void *ctx, const u8 *src_addr,
;;;77     			    const u8 *buf, size_t len),
;;;78     	void *rx_callback_ctx, int l2_hdr)
;;;79     {
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
00000a  461e              MOV      r6,r3
00000c  e9dd7808          LDRD     r7,r8,[sp,#0x20]
;;;80     	struct l2_packet_data *l2;
;;;81     
;;;82     
;;;83     	l2 = (struct l2_packet_data*)os_zalloc(sizeof(struct l2_packet_data));
000010  2028              MOVS     r0,#0x28
000012  f7fffffe          BL       os_zalloc
000016  4604              MOV      r4,r0
;;;84     	if (l2 == NULL)
000018  b914              CBNZ     r4,|L6.32|
;;;85     		return NULL;
00001a  2000              MOVS     r0,#0
                  |L6.28|
;;;86     	os_strlcpy(l2->ifname, ifname, sizeof(l2->ifname));
;;;87     	l2->rx_callback = rx_callback;
;;;88     	l2->rx_callback_ctx = rx_callback_ctx;
;;;89     	l2->l2_hdr = l2_hdr;
;;;90     
;;;91     	/*
;;;92     	 * TODO: open connection for receiving frames
;;;93     	 */
;;;94     	l2->fd = -1;
;;;95     	eloop_register_read_sock(l2->fd, l2_packet_receive, l2, NULL);
;;;96     
;;;97     	return l2;
;;;98     }
00001c  e8bd87f0          POP      {r4-r10,pc}
                  |L6.32|
000020  2211              MOVS     r2,#0x11              ;86
000022  4629              MOV      r1,r5                 ;86
000024  4620              MOV      r0,r4                 ;86
000026  f7fffffe          BL       os_strlcpy
00002a  61a6              STR      r6,[r4,#0x18]         ;87
00002c  61e7              STR      r7,[r4,#0x1c]         ;88
00002e  f8c48020          STR      r8,[r4,#0x20]         ;89
000032  f04f30ff          MOV      r0,#0xffffffff        ;94
000036  6260              STR      r0,[r4,#0x24]         ;94
000038  2300              MOVS     r3,#0                 ;95
00003a  4622              MOV      r2,r4                 ;95
00003c  4902              LDR      r1,|L6.72|
00003e  6a60              LDR      r0,[r4,#0x24]         ;95
000040  f7fffffe          BL       eloop_register_read_sock
000044  4620              MOV      r0,r4                 ;97
000046  e7e9              B        |L6.28|
;;;99     
                          ENDP

                  |L6.72|
                          DCD      l2_packet_receive

                          AREA ||i.l2_packet_notify_auth_start||, CODE, READONLY, ALIGN=1

                  l2_packet_notify_auth_start PROC
;;;122    
;;;123    void l2_packet_notify_auth_start(struct l2_packet_data *l2)
000000  4770              BX       lr
;;;124    {
;;;125    	/* This function can be left empty */
;;;126    }
                          ENDP


                          AREA ||i.l2_packet_receive||, CODE, READONLY, ALIGN=1

                  l2_packet_receive PROC
;;;57     
;;;58     static void l2_packet_receive(int sock, void *eloop_ctx, void *sock_ctx)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;59     {
000004  f6ad0dfc          SUB      sp,sp,#0x8fc
000008  4680              MOV      r8,r0
00000a  460c              MOV      r4,r1
00000c  4691              MOV      r9,r2
;;;60     	struct l2_packet_data *l2 = eloop_ctx;
00000e  4625              MOV      r5,r4
;;;61     	u8 buf[2300];
;;;62     	int res;
;;;63     
;;;64     
;;;65     	/* TODO: receive frame (e.g., recv() using sock */
;;;66     	buf[0] = 0;
000010  2000              MOVS     r0,#0
000012  f88d0000          STRB     r0,[sp,#0]
;;;67     	res = 0;
000016  2600              MOVS     r6,#0
;;;68     
;;;69     	l2->rx_callback(l2->rx_callback_ctx, NULL /* TODO: src addr */,
000018  4633              MOV      r3,r6
00001a  466a              MOV      r2,sp
00001c  2100              MOVS     r1,#0
00001e  e9d57006          LDRD     r7,r0,[r5,#0x18]
000022  47b8              BLX      r7
;;;70     			buf, res);
;;;71     }
000024  f60d0dfc          ADD      sp,sp,#0x8fc
000028  e8bd83f0          POP      {r4-r9,pc}
;;;72     
                          ENDP


                          AREA ||i.l2_packet_send||, CODE, READONLY, ALIGN=1

                  l2_packet_send PROC
;;;42     
;;;43     int l2_packet_send(struct l2_packet_data *l2, const u8 *dst_addr, u16 proto,
000000  b530              PUSH     {r4,r5,lr}
;;;44     		   const u8 *buf, size_t len)
;;;45     {
000002  4604              MOV      r4,r0
000004  9d03              LDR      r5,[sp,#0xc]
;;;46     	if (l2 == NULL)
000006  b914              CBNZ     r4,|L9.14|
;;;47     		return -1;
000008  f04f30ff          MOV      r0,#0xffffffff
                  |L9.12|
;;;48     
;;;49     	/*
;;;50     	 * TODO: Send frame (may need different implementation depending on
;;;51     	 * whether l2->l2_hdr is set).
;;;52     	 */
;;;53     
;;;54     	return 0;
;;;55     }
00000c  bd30              POP      {r4,r5,pc}
                  |L9.14|
00000e  2000              MOVS     r0,#0                 ;54
000010  e7fc              B        |L9.12|
;;;56     
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L14.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L14.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L14.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L14.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L17.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L17.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L17.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L17.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L23.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L23.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

