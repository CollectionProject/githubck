; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\init.o --depend=.\obj\init.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\init.crf ..\lwIP\src\core\init.c]
                          THUMB

                          AREA ||i.lwip_init||, CODE, READONLY, ALIGN=1

                  lwip_init PROC
;;;228    void
;;;229    lwip_init(void)
000000  b510              PUSH     {r4,lr}
;;;230    {
;;;231      /* Sanity check user-configurable values */
;;;232      lwip_sanity_check();
000002  f7fffffe          BL       lwip_sanity_check
;;;233    
;;;234      /* Modules initialization */
;;;235      stats_init();
;;;236      sys_init();
;;;237      mem_init();
000006  f7fffffe          BL       mem_init
;;;238      memp_init();
00000a  f7fffffe          BL       memp_init
;;;239      pbuf_init();
;;;240      netif_init();
;;;241    #if LWIP_SOCKET
;;;242      lwip_socket_init();
;;;243    #endif /* LWIP_SOCKET */
;;;244      ip_init();
;;;245    #if LWIP_ARP
;;;246      etharp_init();
;;;247    #endif /* LWIP_ARP */
;;;248    #if LWIP_RAW
;;;249      raw_init();
;;;250    #endif /* LWIP_RAW */
;;;251    #if LWIP_UDP
;;;252      udp_init();
;;;253    #endif /* LWIP_UDP */
;;;254    #if LWIP_TCP
;;;255      tcp_init();
;;;256    #endif /* LWIP_TCP */
;;;257    #if LWIP_SNMP
;;;258      snmp_init();
;;;259    #endif /* LWIP_SNMP */
;;;260    #if LWIP_AUTOIP
;;;261      autoip_init();
;;;262    #endif /* LWIP_AUTOIP */
;;;263    #if LWIP_IGMP
;;;264      igmp_init();
;;;265    #endif /* LWIP_IGMP */
;;;266    #if LWIP_DNS
;;;267      dns_init();
00000e  f7fffffe          BL       dns_init
;;;268    #endif /* LWIP_DNS */
;;;269    }
000012  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.lwip_sanity_check||, CODE, READONLY, ALIGN=1

                  lwip_sanity_check PROC
;;;200    static void
;;;201    lwip_sanity_check(void)
000000  4770              BX       lr
;;;202    {
;;;203      /* Warnings */
;;;204    #if LWIP_NETCONN
;;;205      if (MEMP_NUM_NETCONN > (MEMP_NUM_TCP_PCB+MEMP_NUM_TCP_PCB_LISTEN+MEMP_NUM_UDP_PCB+MEMP_NUM_RAW_PCB))
;;;206        LWIP_PLATFORM_DIAG(("lwip_sanity_check: WARNING: MEMP_NUM_NETCONN should be less than the sum of MEMP_NUM_{TCP,RAW,UDP}_PCB+MEMP_NUM_TCP_PCB_LISTEN\n"));
;;;207    #endif /* LWIP_NETCONN */
;;;208    #if LWIP_TCP
;;;209      if (MEMP_NUM_TCP_SEG < TCP_SND_QUEUELEN)
;;;210        LWIP_PLATFORM_DIAG(("lwip_sanity_check: WARNING: MEMP_NUM_TCP_SEG should be at least as big as TCP_SND_QUEUELEN\n"));
;;;211      if (TCP_SND_QUEUELEN < (2 * (TCP_SND_BUF/TCP_MSS)))
;;;212        LWIP_PLATFORM_DIAG(("lwip_sanity_check: WARNING: TCP_SND_QUEUELEN must be at least as much as (2 * TCP_SND_BUF/TCP_MSS) for things to work\n"));
;;;213      if (TCP_SNDLOWAT > TCP_SND_BUF)
;;;214        LWIP_PLATFORM_DIAG(("lwip_sanity_check: WARNING: TCP_SNDLOWAT must be less than or equal to TCP_SND_BUF.\n"));
;;;215      if (TCP_WND > (PBUF_POOL_SIZE*PBUF_POOL_BUFSIZE))
;;;216        LWIP_PLATFORM_DIAG(("lwip_sanity_check: WARNING: TCP_WND is larger than space provided by PBUF_POOL_SIZE*PBUF_POOL_BUFSIZE\n"));
;;;217      if (TCP_WND < TCP_MSS)
;;;218        LWIP_PLATFORM_DIAG(("lwip_sanity_check: WARNING: TCP_WND is smaller than MSS\n"));
;;;219    #endif /* LWIP_TCP */
;;;220    }
;;;221    #else  /* LWIP_DEBUG */
                          ENDP

