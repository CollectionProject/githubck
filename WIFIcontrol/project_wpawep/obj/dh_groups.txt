; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\dh_groups.o --depend=.\obj\dh_groups.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\dh_groups.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\dh_groups.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.dh_derive_shared||, CODE, READONLY, ALIGN=2

                  dh_derive_shared PROC
;;;604     */
;;;605    struct wpabuf * dh_derive_shared(const struct wpabuf *peer_public,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;606    				 const struct wpabuf *own_private,
;;;607    				 const struct dh_group *dh)
;;;608    {
000004  b087              SUB      sp,sp,#0x1c
000006  4607              MOV      r7,r0
000008  460e              MOV      r6,r1
00000a  4614              MOV      r4,r2
;;;609    	struct wpabuf *shared;
;;;610    	size_t shared_len;
;;;611    
;;;612    	if (dh == NULL || peer_public == NULL || own_private == NULL)
00000c  b10c              CBZ      r4,|L2.18|
00000e  b107              CBZ      r7,|L2.18|
000010  b91e              CBNZ     r6,|L2.26|
                  |L2.18|
;;;613    		return NULL;
000012  2000              MOVS     r0,#0
                  |L2.20|
;;;614    
;;;615    	shared_len = dh->prime_len;
;;;616    	shared = wpabuf_alloc(shared_len);
;;;617    	if (shared == NULL)
;;;618    		return NULL;
;;;619    	if (crypto_mod_exp(wpabuf_head(peer_public), wpabuf_len(peer_public),
;;;620    			   wpabuf_head(own_private), wpabuf_len(own_private),
;;;621    			   dh->prime, dh->prime_len,
;;;622    			   wpabuf_mhead(shared), &shared_len) < 0) {
;;;623    		wpabuf_free(shared);
;;;624    		wpa_printf(MSG_INFO, "DH: crypto_mod_exp failed");
;;;625    		return NULL;
;;;626    	}
;;;627    	wpabuf_put(shared, shared_len);
;;;628    	wpa_hexdump_buf_key(MSG_DEBUG, "DH: shared key", shared);
;;;629    
;;;630    	return shared;
;;;631    }
000014  b007              ADD      sp,sp,#0x1c
000016  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.26|
00001a  6920              LDR      r0,[r4,#0x10]         ;615
00001c  9006              STR      r0,[sp,#0x18]         ;615
00001e  9806              LDR      r0,[sp,#0x18]         ;616
000020  f7fffffe          BL       wpabuf_alloc
000024  4605              MOV      r5,r0                 ;616
000026  b90d              CBNZ     r5,|L2.44|
000028  2000              MOVS     r0,#0                 ;618
00002a  e7f3              B        |L2.20|
                  |L2.44|
00002c  4628              MOV      r0,r5                 ;619
00002e  f7fffffe          BL       wpabuf_mhead
000032  4680              MOV      r8,r0                 ;619
000034  4630              MOV      r0,r6                 ;619
000036  f7fffffe          BL       wpabuf_len
00003a  4681              MOV      r9,r0                 ;619
00003c  4630              MOV      r0,r6                 ;619
00003e  f7fffffe          BL       wpabuf_head
000042  4682              MOV      r10,r0                ;619
000044  4638              MOV      r0,r7                 ;619
000046  f7fffffe          BL       wpabuf_len
00004a  4683              MOV      r11,r0                ;619
00004c  4638              MOV      r0,r7                 ;619
00004e  f7fffffe          BL       wpabuf_head
000052  ab06              ADD      r3,sp,#0x18           ;619
000054  9005              STR      r0,[sp,#0x14]         ;619
000056  e9d40103          LDRD     r0,r1,[r4,#0xc]       ;619
00005a  e88d0103          STM      sp,{r0,r1,r8}         ;619
00005e  9303              STR      r3,[sp,#0xc]          ;619
000060  464b              MOV      r3,r9                 ;619
000062  4652              MOV      r2,r10                ;619
000064  4659              MOV      r1,r11                ;619
000066  9805              LDR      r0,[sp,#0x14]         ;619
000068  f7fffffe          BL       crypto_mod_exp
00006c  2800              CMP      r0,#0                 ;619
00006e  da08              BGE      |L2.130|
000070  4628              MOV      r0,r5                 ;623
000072  f7fffffe          BL       wpabuf_free
000076  a108              ADR      r1,|L2.152|
000078  2000              MOVS     r0,#0                 ;624
00007a  f7fffffe          BL       wpa_printf
00007e  2000              MOVS     r0,#0                 ;625
000080  e7c8              B        |L2.20|
                  |L2.130|
000082  4628              MOV      r0,r5                 ;627
000084  9906              LDR      r1,[sp,#0x18]         ;627
000086  f7fffffe          BL       wpabuf_put
00008a  462a              MOV      r2,r5                 ;628
00008c  a109              ADR      r1,|L2.180|
00008e  2000              MOVS     r0,#0                 ;628
000090  f7fffffe          BL       wpa_hexdump_buf_key
000094  4628              MOV      r0,r5                 ;630
000096  e7bd              B        |L2.20|
                          ENDP

                  |L2.152|
000098  44483a20          DCB      "DH: crypto_mod_exp failed",0
00009c  63727970
0000a0  746f5f6d
0000a4  6f645f65
0000a8  78702066
0000ac  61696c65
0000b0  6400    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L2.180|
0000b4  44483a20          DCB      "DH: shared key",0
0000b8  73686172
0000bc  6564206b
0000c0  657900  
0000c3  00                DCB      0

                          AREA ||i.dh_groups_get||, CODE, READONLY, ALIGN=2

                  dh_groups_get PROC
;;;535    
;;;536    const struct dh_group * dh_groups_get(int id)
000000  4602              MOV      r2,r0
;;;537    {
;;;538    	size_t i;
;;;539    
;;;540    	for (i = 0; i < NUM_DH_GROUPS; i++) {
000002  2100              MOVS     r1,#0
000004  e00c              B        |L3.32|
                  |L3.6|
;;;541    		if (dh_groups[i].id == id)
000006  eb010081          ADD      r0,r1,r1,LSL #2
00000a  4b07              LDR      r3,|L3.40|
00000c  f8530020          LDR      r0,[r3,r0,LSL #2]
000010  4290              CMP      r0,r2
000012  d104              BNE      |L3.30|
;;;542    			return &dh_groups[i];
000014  eb010081          ADD      r0,r1,r1,LSL #2
000018  eb030080          ADD      r0,r3,r0,LSL #2
                  |L3.28|
;;;543    	}
;;;544    	return NULL;
;;;545    }
00001c  4770              BX       lr
                  |L3.30|
00001e  1c49              ADDS     r1,r1,#1              ;540
                  |L3.32|
000020  2900              CMP      r1,#0                 ;540
000022  d0f0              BEQ      |L3.6|
000024  2000              MOVS     r0,#0                 ;544
000026  e7f9              B        |L3.28|
;;;546    
                          ENDP

                  |L3.40|
                          DCD      dh_groups

                          AREA ||i.dh_init||, CODE, READONLY, ALIGN=2

                  dh_init PROC
;;;553     */
;;;554    struct wpabuf * dh_init(const struct dh_group *dh, struct wpabuf **priv)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;555    {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
;;;556    	struct wpabuf *pv;
;;;557    	size_t pv_len;
;;;558    
;;;559    	if (dh == NULL)
00000a  b91c              CBNZ     r4,|L4.20|
;;;560    		return NULL;
00000c  2000              MOVS     r0,#0
                  |L4.14|
;;;561    
;;;562    	wpabuf_free(*priv);
;;;563    	*priv = wpabuf_alloc(dh->prime_len);
;;;564    	if (*priv == NULL)
;;;565    		return NULL;
;;;566    
;;;567    	if (os_get_random(wpabuf_put(*priv, dh->prime_len), dh->prime_len)) {
;;;568    		wpabuf_free(*priv);
;;;569    		*priv = NULL;
;;;570    		return NULL;
;;;571    	}
;;;572    
;;;573    	if (os_memcmp(wpabuf_head(*priv), dh->prime, dh->prime_len) > 0) {
;;;574    		/* Make sure private value is smaller than prime */
;;;575    		*(wpabuf_mhead_u8(*priv)) = 0;
;;;576    	}
;;;577    	wpa_hexdump_buf_key(MSG_DEBUG, "DH: private value", *priv);
;;;578    
;;;579    	pv_len = dh->prime_len;
;;;580    	pv = wpabuf_alloc(pv_len);
;;;581    	if (pv == NULL)
;;;582    		return NULL;
;;;583    	if (crypto_mod_exp(dh->generator, dh->generator_len,
;;;584    			   wpabuf_head(*priv), wpabuf_len(*priv),
;;;585    			   dh->prime, dh->prime_len, wpabuf_mhead(pv),
;;;586    			   &pv_len) < 0) {
;;;587    		wpabuf_free(pv);
;;;588    		wpa_printf(MSG_INFO, "DH: crypto_mod_exp failed");
;;;589    		return NULL;
;;;590    	}
;;;591    	wpabuf_put(pv, pv_len);
;;;592    	wpa_hexdump_buf(MSG_DEBUG, "DH: public value", pv);
;;;593    
;;;594    	return pv;
;;;595    }
00000e  b005              ADD      sp,sp,#0x14
000010  e8bd83f0          POP      {r4-r9,pc}
                  |L4.20|
000014  6828              LDR      r0,[r5,#0]            ;562
000016  f7fffffe          BL       wpabuf_free
00001a  6920              LDR      r0,[r4,#0x10]         ;563
00001c  f7fffffe          BL       wpabuf_alloc
000020  6028              STR      r0,[r5,#0]            ;563
000022  6828              LDR      r0,[r5,#0]            ;564
000024  b908              CBNZ     r0,|L4.42|
000026  2000              MOVS     r0,#0                 ;565
000028  e7f1              B        |L4.14|
                  |L4.42|
00002a  6921              LDR      r1,[r4,#0x10]         ;567
00002c  6828              LDR      r0,[r5,#0]            ;567
00002e  f7fffffe          BL       wpabuf_put
000032  4607              MOV      r7,r0                 ;567
000034  6921              LDR      r1,[r4,#0x10]         ;567
000036  f7fffffe          BL       os_get_random
00003a  b128              CBZ      r0,|L4.72|
00003c  6828              LDR      r0,[r5,#0]            ;568
00003e  f7fffffe          BL       wpabuf_free
000042  2000              MOVS     r0,#0                 ;569
000044  6028              STR      r0,[r5,#0]            ;569
000046  e7e2              B        |L4.14|
                  |L4.72|
000048  6828              LDR      r0,[r5,#0]            ;573
00004a  f7fffffe          BL       wpabuf_head
00004e  4607              MOV      r7,r0                 ;573
000050  e9d41203          LDRD     r1,r2,[r4,#0xc]       ;573
000054  f7fffffe          BL       memcmp
000058  2800              CMP      r0,#0                 ;573
00005a  dd04              BLE      |L4.102|
00005c  6828              LDR      r0,[r5,#0]            ;575
00005e  f7fffffe          BL       wpabuf_mhead_u8
000062  2100              MOVS     r1,#0                 ;575
000064  7001              STRB     r1,[r0,#0]            ;575
                  |L4.102|
000066  a11e              ADR      r1,|L4.224|
000068  2000              MOVS     r0,#0                 ;577
00006a  682a              LDR      r2,[r5,#0]            ;577
00006c  f7fffffe          BL       wpa_hexdump_buf_key
000070  6920              LDR      r0,[r4,#0x10]         ;579
000072  9004              STR      r0,[sp,#0x10]         ;579
000074  9804              LDR      r0,[sp,#0x10]         ;580
000076  f7fffffe          BL       wpabuf_alloc
00007a  4606              MOV      r6,r0                 ;580
00007c  b90e              CBNZ     r6,|L4.130|
00007e  2000              MOVS     r0,#0                 ;582
000080  e7c5              B        |L4.14|
                  |L4.130|
000082  4630              MOV      r0,r6                 ;583
000084  f7fffffe          BL       wpabuf_mhead
000088  4607              MOV      r7,r0                 ;583
00008a  6828              LDR      r0,[r5,#0]            ;583
00008c  f7fffffe          BL       wpabuf_len
000090  4680              MOV      r8,r0                 ;583
000092  6828              LDR      r0,[r5,#0]            ;583
000094  f7fffffe          BL       wpabuf_head
000098  4681              MOV      r9,r0                 ;583
00009a  ab04              ADD      r3,sp,#0x10           ;583
00009c  e9d40103          LDRD     r0,r1,[r4,#0xc]       ;583
0000a0  e88d0083          STM      sp,{r0,r1,r7}         ;583
0000a4  9303              STR      r3,[sp,#0xc]          ;583
0000a6  4643              MOV      r3,r8                 ;583
0000a8  464a              MOV      r2,r9                 ;583
0000aa  e9d40101          LDRD     r0,r1,[r4,#4]         ;583
0000ae  f7fffffe          BL       crypto_mod_exp
0000b2  2800              CMP      r0,#0                 ;583
0000b4  da08              BGE      |L4.200|
0000b6  4630              MOV      r0,r6                 ;587
0000b8  f7fffffe          BL       wpabuf_free
0000bc  a10d              ADR      r1,|L4.244|
0000be  2000              MOVS     r0,#0                 ;588
0000c0  f7fffffe          BL       wpa_printf
0000c4  2000              MOVS     r0,#0                 ;589
0000c6  e7a2              B        |L4.14|
                  |L4.200|
0000c8  4630              MOV      r0,r6                 ;591
0000ca  9904              LDR      r1,[sp,#0x10]         ;591
0000cc  f7fffffe          BL       wpabuf_put
0000d0  4632              MOV      r2,r6                 ;592
0000d2  a10f              ADR      r1,|L4.272|
0000d4  2000              MOVS     r0,#0                 ;592
0000d6  f7fffffe          BL       wpa_hexdump_buf
0000da  4630              MOV      r0,r6                 ;594
0000dc  e797              B        |L4.14|
;;;596    
                          ENDP

0000de  0000              DCW      0x0000
                  |L4.224|
0000e0  44483a20          DCB      "DH: private value",0
0000e4  70726976
0000e8  61746520
0000ec  76616c75
0000f0  6500    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L4.244|
0000f4  44483a20          DCB      "DH: crypto_mod_exp failed",0
0000f8  63727970
0000fc  746f5f6d
000100  6f645f65
000104  78702066
000108  61696c65
00010c  6400    
00010e  00                DCB      0
00010f  00                DCB      0
                  |L4.272|
000110  44483a20          DCB      "DH: public value",0
000114  7075626c
000118  69632076
00011c  616c7565
000120  00      
000121  00                DCB      0
000122  00                DCB      0
000123  00                DCB      0

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L5.30|
00001a  2001              MOVS     r0,#1
                  |L5.28|
;;;495    }
00001c  4770              BX       lr
                  |L5.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L5.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L10.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L10.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L10.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L10.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L13.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L13.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L13.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L13.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L19.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       __aeabi_memcpy
                  |L19.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||i.xdbug_buf||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  xdbug_buf PROC
;;;147    #define RUN_TEST printk("RUN_TEST >>> LINE:%d ,,, FUNCTION:%s ,,, FILE:%s \r\n",__LINE__,__FUNCTION__,__FILE__);
;;;148    static void xdbug_buf(const char * name , const unsigned char * buf , const int len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;150    	int i = 0;
00000a  2400              MOVS     r4,#0
;;;151    	printf("dbug buf [%s]\n",name);
00000c  4629              MOV      r1,r5
00000e  a008              ADR      r0,|L26.48|
000010  f7fffffe          BL       __2printf
;;;152    	for(;i<len;i++)
000014  e004              B        |L26.32|
                  |L26.22|
;;;153    	{
;;;154    		printf("0x%02x,",buf[i]);
000016  5d31              LDRB     r1,[r6,r4]
000018  a009              ADR      r0,|L26.64|
00001a  f7fffffe          BL       __2printf
00001e  1c64              ADDS     r4,r4,#1              ;152
                  |L26.32|
000020  42bc              CMP      r4,r7                 ;152
000022  dbf8              BLT      |L26.22|
;;;155    	}
;;;156    	printf("\n");
000024  a008              ADR      r0,|L26.72|
000026  f7fffffe          BL       __2printf
;;;157    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;158    #define DEBUG_PARAM_SDIO
                          ENDP

00002e  0000              DCW      0x0000
                  |L26.48|
000030  64627567          DCB      "dbug buf [%s]\n",0
000034  20627566
000038  205b2573
00003c  5d0a00  
00003f  00                DCB      0
                  |L26.64|
000040  30782530          DCB      "0x%02x,",0
000044  32782c00
                  |L26.72|
000048  0a00              DCB      "\n",0
00004a  00                DCB      0
00004b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  dh_group5_generator
000000  02                DCB      0x02
                  dh_group5_prime
000001  ffffff            DCB      0xff,0xff,0xff
000004  ffffffff          DCB      0xff,0xff,0xff,0xff
000008  ffc90fda          DCB      0xff,0xc9,0x0f,0xda
00000c  a22168c2          DCB      0xa2,0x21,0x68,0xc2
000010  34c4c662          DCB      0x34,0xc4,0xc6,0x62
000014  8b80dc1c          DCB      0x8b,0x80,0xdc,0x1c
000018  d129024e          DCB      0xd1,0x29,0x02,0x4e
00001c  088a67cc          DCB      0x08,0x8a,0x67,0xcc
000020  74020bbe          DCB      0x74,0x02,0x0b,0xbe
000024  a63b139b          DCB      0xa6,0x3b,0x13,0x9b
000028  22514a08          DCB      0x22,0x51,0x4a,0x08
00002c  798e3404          DCB      0x79,0x8e,0x34,0x04
000030  ddef9519          DCB      0xdd,0xef,0x95,0x19
000034  b3cd3a43          DCB      0xb3,0xcd,0x3a,0x43
000038  1b302b0a          DCB      0x1b,0x30,0x2b,0x0a
00003c  6df25f14          DCB      0x6d,0xf2,0x5f,0x14
000040  374fe135          DCB      0x37,0x4f,0xe1,0x35
000044  6d6d51c2          DCB      0x6d,0x6d,0x51,0xc2
000048  45e485b5          DCB      0x45,0xe4,0x85,0xb5
00004c  76625e7e          DCB      0x76,0x62,0x5e,0x7e
000050  c6f44c42          DCB      0xc6,0xf4,0x4c,0x42
000054  e9a637ed          DCB      0xe9,0xa6,0x37,0xed
000058  6b0bff5c          DCB      0x6b,0x0b,0xff,0x5c
00005c  b6f406b7          DCB      0xb6,0xf4,0x06,0xb7
000060  edee386b          DCB      0xed,0xee,0x38,0x6b
000064  fb5a899f          DCB      0xfb,0x5a,0x89,0x9f
000068  a5ae9f24          DCB      0xa5,0xae,0x9f,0x24
00006c  117c4b1f          DCB      0x11,0x7c,0x4b,0x1f
000070  e6492866          DCB      0xe6,0x49,0x28,0x66
000074  51ece45b          DCB      0x51,0xec,0xe4,0x5b
000078  3dc2007c          DCB      0x3d,0xc2,0x00,0x7c
00007c  b8a163bf          DCB      0xb8,0xa1,0x63,0xbf
000080  0598da48          DCB      0x05,0x98,0xda,0x48
000084  361c55d3          DCB      0x36,0x1c,0x55,0xd3
000088  9a69163f          DCB      0x9a,0x69,0x16,0x3f
00008c  a8fd24cf          DCB      0xa8,0xfd,0x24,0xcf
000090  5f83655d          DCB      0x5f,0x83,0x65,0x5d
000094  23dca3ad          DCB      0x23,0xdc,0xa3,0xad
000098  961c62f3          DCB      0x96,0x1c,0x62,0xf3
00009c  56208552          DCB      0x56,0x20,0x85,0x52
0000a0  bb9ed529          DCB      0xbb,0x9e,0xd5,0x29
0000a4  07709696          DCB      0x07,0x70,0x96,0x96
0000a8  6d670c35          DCB      0x6d,0x67,0x0c,0x35
0000ac  4e4abc98          DCB      0x4e,0x4a,0xbc,0x98
0000b0  04f1746c          DCB      0x04,0xf1,0x74,0x6c
0000b4  08ca2373          DCB      0x08,0xca,0x23,0x73
0000b8  27ffffff          DCB      0x27,0xff,0xff,0xff
0000bc  ffffffff          DCB      0xff,0xff,0xff,0xff
0000c0  ff                DCB      0xff

                          AREA ||.data||, DATA, ALIGN=2

                  dh_groups
                          DCD      0x00000005
                          DCD      dh_group5_generator
                          DCD      0x00000001
                          DCD      dh_group5_prime
                          DCD      0x000000c0
