; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\driver_none.o --depend=.\obj\driver_none.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\driver_none.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\drivers\driver_none.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.drv_event_assoc||, CODE, READONLY, ALIGN=1

                  drv_event_assoc PROC
;;;2460   
;;;2461   static inline void drv_event_assoc(void *ctx, const u8 *addr, const u8 *ie,
000000  b5f0              PUSH     {r4-r7,lr}
;;;2462   				   size_t ielen)
;;;2463   {
000002  b09b              SUB      sp,sp,#0x6c
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;2464   	union wpa_event_data event;
;;;2465   	os_memset(&event, 0, sizeof(event));
00000c  2268              MOVS     r2,#0x68
00000e  2100              MOVS     r1,#0
000010  a801              ADD      r0,sp,#4
000012  f7fffffe          BL       os_memset
;;;2466   	event.assoc_info.req_ies = ie;
000016  9501              STR      r5,[sp,#4]
;;;2467   	event.assoc_info.req_ies_len = ielen;
000018  9602              STR      r6,[sp,#8]
;;;2468   	event.assoc_info.addr = addr;
00001a  9408              STR      r4,[sp,#0x20]
;;;2469   	wpa_supplicant_event(ctx, EVENT_ASSOC, &event);
00001c  aa01              ADD      r2,sp,#4
00001e  2100              MOVS     r1,#0
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       wpa_supplicant_event
;;;2470   }
000026  b01b              ADD      sp,sp,#0x6c
000028  bdf0              POP      {r4-r7,pc}
;;;2471   
                          ENDP


                          AREA ||i.drv_event_disassoc||, CODE, READONLY, ALIGN=1

                  drv_event_disassoc PROC
;;;2471   
;;;2472   static inline void drv_event_disassoc(void *ctx, const u8 *addr)
000000  b530              PUSH     {r4,r5,lr}
;;;2473   {
000002  b09b              SUB      sp,sp,#0x6c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;2474   	union wpa_event_data event;
;;;2475   	os_memset(&event, 0, sizeof(event));
000008  2268              MOVS     r2,#0x68
00000a  2100              MOVS     r1,#0
00000c  a801              ADD      r0,sp,#4
00000e  f7fffffe          BL       os_memset
;;;2476   	event.disassoc_info.addr = addr;
000012  9401              STR      r4,[sp,#4]
;;;2477   	wpa_supplicant_event(ctx, EVENT_DISASSOC, &event);
000014  aa01              ADD      r2,sp,#4
000016  2101              MOVS     r1,#1
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       wpa_supplicant_event
;;;2478   }
00001e  b01b              ADD      sp,sp,#0x6c
000020  bd30              POP      {r4,r5,pc}
;;;2479   
                          ENDP


                          AREA ||i.drv_event_eapol_rx||, CODE, READONLY, ALIGN=1

                  drv_event_eapol_rx PROC
;;;2479   
;;;2480   static inline void drv_event_eapol_rx(void *ctx, const u8 *src, const u8 *data,
000000  b5f0              PUSH     {r4-r7,lr}
;;;2481   				      size_t data_len)
;;;2482   {
000002  b09b              SUB      sp,sp,#0x6c
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;2483   	union wpa_event_data event;
;;;2484   	os_memset(&event, 0, sizeof(event));
00000c  2268              MOVS     r2,#0x68
00000e  2100              MOVS     r1,#0
000010  a801              ADD      r0,sp,#4
000012  f7fffffe          BL       os_memset
;;;2485   	event.eapol_rx.src = src;
000016  9401              STR      r4,[sp,#4]
;;;2486   	event.eapol_rx.data = data;
000018  9502              STR      r5,[sp,#8]
;;;2487   	event.eapol_rx.data_len = data_len;
00001a  9603              STR      r6,[sp,#0xc]
;;;2488   	wpa_supplicant_event(ctx, EVENT_EAPOL_RX, &event);
00001c  aa01              ADD      r2,sp,#4
00001e  211a              MOVS     r1,#0x1a
000020  4638              MOV      r0,r7
000022  f7fffffe          BL       wpa_supplicant_event
;;;2489   }
000026  b01b              ADD      sp,sp,#0x6c
000028  bdf0              POP      {r4-r7,pc}
;;;2490   
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L5.30|
00001a  2001              MOVS     r0,#1
                  |L5.28|
;;;495    }
00001c  4770              BX       lr
                  |L5.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L5.28|
;;;496    
                          ENDP


                          AREA ||i.none_driver_deinit||, CODE, READONLY, ALIGN=1

                  none_driver_deinit PROC
;;;68     
;;;69     static void none_driver_deinit(void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;70     {
000002  4604              MOV      r4,r0
;;;71     	struct none_driver_data *drv = priv;
000004  4625              MOV      r5,r4
;;;72     	WPA_RUN_TEST;
;;;73     	os_free(drv);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       os_free
;;;74     }
00000c  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP


                          AREA ||i.none_driver_hapd_deinit||, CODE, READONLY, ALIGN=1

                  none_driver_hapd_deinit PROC
;;;35     
;;;36     static void none_driver_hapd_deinit(void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;37     {
000002  4604              MOV      r4,r0
;;;38     	struct none_driver_data *drv = priv;
000004  4625              MOV      r5,r4
;;;39     	WPA_RUN_TEST;
;;;40     	os_free(drv);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       os_free
;;;41     }
00000c  bd70              POP      {r4-r6,pc}
;;;42     
                          ENDP


                          AREA ||i.none_driver_hapd_init||, CODE, READONLY, ALIGN=1

                  none_driver_hapd_init PROC
;;;26     
;;;27     static void * none_driver_hapd_init(struct hostapd_data *hapd,
000000  4602              MOV      r2,r0
;;;28     				    struct wpa_init_params *params)
;;;29     {
;;;30     	struct none_driver_data *drv;
;;;31     	WPA_RUN_TEST;
;;;32     	return drv;
;;;33     }
000002  4770              BX       lr
;;;34     
                          ENDP


                          AREA ||i.none_driver_init||, CODE, READONLY, ALIGN=2

                  none_driver_init PROC
;;;51     
;;;52     static void * none_driver_init(void *ctx, const char *ifname)
000000  b570              PUSH     {r4-r6,lr}
;;;53     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;54     	struct none_driver_data *drv;
;;;55     	WPA_RUN_TEST;
;;;56     
;;;57     	drv = os_zalloc(sizeof(struct none_driver_data));
000006  2008              MOVS     r0,#8
000008  f7fffffe          BL       os_zalloc
00000c  4604              MOV      r4,r0
;;;58     	if (drv == NULL) {
00000e  b92c              CBNZ     r4,|L9.28|
;;;59     		wpa_printf(MSG_ERROR, "Could not allocate memory for none "
000010  a104              ADR      r1,|L9.36|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;60     			   "driver data");
;;;61     		return NULL;
000018  2000              MOVS     r0,#0
                  |L9.26|
;;;62     	}
;;;63     	drv->ctx = ctx;
;;;64     
;;;65     	return drv;
;;;66     }
00001a  bd70              POP      {r4-r6,pc}
                  |L9.28|
00001c  6065              STR      r5,[r4,#4]            ;63
00001e  4620              MOV      r0,r4                 ;65
000020  e7fb              B        |L9.26|
;;;67     
                          ENDP

000022  0000              DCW      0x0000
                  |L9.36|
000024  436f756c          DCB      "Could not allocate memory for none driver data",0
000028  64206e6f
00002c  7420616c
000030  6c6f6361
000034  7465206d
000038  656d6f72
00003c  7920666f
000040  72206e6f
000044  6e652064
000048  72697665
00004c  72206461
000050  746100  
000053  00                DCB      0

                          AREA ||i.none_driver_send_eapol||, CODE, READONLY, ALIGN=1

                  none_driver_send_eapol PROC
;;;76     
;;;77     static int none_driver_send_eapol(void *priv, const u8 *dest, u16 proto,
000000  b530              PUSH     {r4,r5,lr}
;;;78     				  const u8 *data, size_t data_len)
;;;79     {
000002  4605              MOV      r5,r0
000004  9c03              LDR      r4,[sp,#0xc]
;;;80     	WPA_RUN_TEST;
;;;81     	return -1;
000006  f04f30ff          MOV      r0,#0xffffffff
;;;82     }
00000a  bd30              POP      {r4,r5,pc}
;;;83     
                          ENDP


                          AREA ||i.none_driver_send_ether||, CODE, READONLY, ALIGN=1

                  none_driver_send_ether PROC
;;;43     
;;;44     static int none_driver_send_ether(void *priv, const u8 *dst, const u8 *src,
000000  b570              PUSH     {r4-r6,lr}
;;;45     				  u16 proto, const u8 *data, size_t data_len)
;;;46     {
000002  4606              MOV      r6,r0
000004  e9dd4504          LDRD     r4,r5,[sp,#0x10]
;;;47     	WPA_RUN_TEST;
;;;48     	return 0;
000008  2000              MOVS     r0,#0
;;;49     }
00000a  bd70              POP      {r4-r6,pc}
;;;50     
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L16.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L16.14|
                  |L16.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L16.12|
;;;70     }
00000c  4770              BX       lr
                  |L16.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L16.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L17.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L17.16|
                  |L17.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L17.14|
;;;76     }
00000e  4770              BX       lr
                  |L17.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L17.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L18.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L18.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L18.18|
                  |L18.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L18.16|
;;;57     }
000010  4770              BX       lr
                  |L18.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L18.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L19.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L19.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L19.20|
                  |L19.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L19.18|
;;;64     }
000012  4770              BX       lr
                  |L19.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L19.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L20.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L20.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L20.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L20.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L23.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L23.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L23.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L23.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L29.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L29.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  wpa_driver_none_ops
                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x5
                          DCD      none_driver_hapd_init
                          DCD      none_driver_hapd_deinit
                          DCD      none_driver_send_ether
                          DCD      none_driver_init
                          DCD      none_driver_deinit
                          DCD      none_driver_send_eapol
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=0

000000  6e6f6e65          DCB      "none",0
000004  00      
000005  6e6f2064          DCB      "no driver (RADIUS server/WPS ER)",0
000009  72697665
00000d  72202852
000011  41444955
000015  53207365
000019  72766572
00001d  2f575053
000021  20455229
000025  00      
