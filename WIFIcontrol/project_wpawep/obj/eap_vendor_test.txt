; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_vendor_test.o --depend=.\obj\eap_vendor_test.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_vendor_test.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_vendor_test.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.eap_peer_vendor_test_register||, CODE, READONLY, ALIGN=2

                  eap_peer_vendor_test_register PROC
;;;173    
;;;174    int eap_peer_vendor_test_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;175    {
;;;176    	struct eap_method *eap;
;;;177    	int ret;
;;;178    
;;;179    	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a30f              ADR      r3,|L4.64|
000004  22f9              MOVS     r2,#0xf9
000006  4911              LDR      r1,|L4.76|
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;180    				    EAP_VENDOR_ID, EAP_VENDOR_TYPE,
;;;181    				    "VENDOR-TEST");
;;;182    	if (eap == NULL)
000010  b914              CBNZ     r4,|L4.24|
;;;183    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L4.22|
;;;184    
;;;185    	eap->init = eap_vendor_test_init;
;;;186    	eap->deinit = eap_vendor_test_deinit;
;;;187    	eap->process = eap_vendor_test_process;
;;;188    	eap->isKeyAvailable = eap_vendor_test_isKeyAvailable;
;;;189    	eap->getKey = eap_vendor_test_getKey;
;;;190    
;;;191    	ret = eap_peer_method_register(eap);
;;;192    	if (ret)
;;;193    		eap_peer_method_free(eap);
;;;194    	return ret;
;;;195    }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  480d              LDR      r0,|L4.80|
00001a  60e0              STR      r0,[r4,#0xc]          ;185
00001c  480d              LDR      r0,|L4.84|
00001e  6120              STR      r0,[r4,#0x10]         ;186
000020  480d              LDR      r0,|L4.88|
000022  6160              STR      r0,[r4,#0x14]         ;187
000024  480d              LDR      r0,|L4.92|
000026  61a0              STR      r0,[r4,#0x18]         ;188
000028  480d              LDR      r0,|L4.96|
00002a  61e0              STR      r0,[r4,#0x1c]         ;189
00002c  4620              MOV      r0,r4                 ;191
00002e  f7fffffe          BL       eap_peer_method_register
000032  4605              MOV      r5,r0                 ;191
000034  b115              CBZ      r5,|L4.60|
000036  4620              MOV      r0,r4                 ;193
000038  f7fffffe          BL       eap_peer_method_free
                  |L4.60|
00003c  4628              MOV      r0,r5                 ;194
00003e  e7ea              B        |L4.22|
                          ENDP

                  |L4.64|
000040  56454e44          DCB      "VENDOR-TEST",0
000044  4f522d54
000048  45535400
                  |L4.76|
                          DCD      0x00fffefd
                  |L4.80|
                          DCD      eap_vendor_test_init
                  |L4.84|
                          DCD      eap_vendor_test_deinit
                  |L4.88|
                          DCD      eap_vendor_test_process
                  |L4.92|
                          DCD      eap_vendor_test_isKeyAvailable
                  |L4.96|
                          DCD      eap_vendor_test_getKey

                          AREA ||i.eap_vendor_test_deinit||, CODE, READONLY, ALIGN=1

                  eap_vendor_test_deinit PROC
;;;51     
;;;52     static void eap_vendor_test_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;53     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;54     	struct eap_vendor_test_data *data = priv;
000006  4625              MOV      r5,r4
;;;55     	os_free(data);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       os_free
;;;56     }
00000e  bd70              POP      {r4-r6,pc}
;;;57     
                          ENDP


                          AREA ||i.eap_vendor_test_getKey||, CODE, READONLY, ALIGN=1

                  eap_vendor_test_getKey PROC
;;;152    
;;;153    static u8 * eap_vendor_test_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;154    {
000004  4683              MOV      r11,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;155    	struct eap_vendor_test_data *data = priv;
00000a  462f              MOV      r7,r5
;;;156    	u8 *key;
;;;157    	const int key_len = 64;
00000c  f04f0a40          MOV      r10,#0x40
;;;158    
;;;159    	if (data->state != SUCCESS)
000010  7838              LDRB     r0,[r7,#0]
000012  2802              CMP      r0,#2
000014  d002              BEQ      |L6.28|
;;;160    		return NULL;
000016  2000              MOVS     r0,#0
                  |L6.24|
;;;161    
;;;162    	key = os_malloc(key_len);
;;;163    	if (key == NULL)
;;;164    		return NULL;
;;;165    
;;;166    	os_memset(key, 0x11, key_len / 2);
;;;167    	os_memset(key + key_len / 2, 0x22, key_len / 2);
;;;168    	*len = key_len;
;;;169    
;;;170    	return key;
;;;171    }
000018  e8bd9ff0          POP      {r4-r12,pc}
                  |L6.28|
00001c  2040              MOVS     r0,#0x40              ;162
00001e  f7fffffe          BL       os_malloc
000022  4604              MOV      r4,r0                 ;162
000024  b90c              CBNZ     r4,|L6.42|
000026  2000              MOVS     r0,#0                 ;164
000028  e7f6              B        |L6.24|
                  |L6.42|
00002a  f04f0840          MOV      r8,#0x40              ;166
00002e  eb0870d8          ADD      r0,r8,r8,LSR #31      ;166
000032  1042              ASRS     r2,r0,#1              ;166
000034  2111              MOVS     r1,#0x11              ;166
000036  4620              MOV      r0,r4                 ;166
000038  f7fffffe          BL       os_memset
00003c  46c1              MOV      r9,r8                 ;167
00003e  eb0871d8          ADD      r1,r8,r8,LSR #31      ;167
000042  eb040061          ADD      r0,r4,r1,ASR #1       ;167
000046  eb0871d8          ADD      r1,r8,r8,LSR #31      ;167
00004a  104a              ASRS     r2,r1,#1              ;167
00004c  2122              MOVS     r1,#0x22              ;167
00004e  f7fffffe          BL       os_memset
000052  2040              MOVS     r0,#0x40              ;168
000054  6030              STR      r0,[r6,#0]            ;168
000056  4620              MOV      r0,r4                 ;170
000058  e7de              B        |L6.24|
;;;172    
                          ENDP


                          AREA ||i.eap_vendor_test_init||, CODE, READONLY, ALIGN=1

                  eap_vendor_test_init PROC
;;;39     
;;;40     static void * eap_vendor_test_init(struct eap_sm *sm)
000000  b570              PUSH     {r4-r6,lr}
;;;41     {
000002  4605              MOV      r5,r0
;;;42     	struct eap_vendor_test_data *data;
;;;43     	data = os_zalloc(sizeof(*data));
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       os_zalloc
00000a  4604              MOV      r4,r0
;;;44     	if (data == NULL)
00000c  b90c              CBNZ     r4,|L7.18|
;;;45     		return NULL;
00000e  2000              MOVS     r0,#0
                  |L7.16|
;;;46     	data->state = INIT;
;;;47     	data->first_try = 1;
;;;48     	return data;
;;;49     }
000010  bd70              POP      {r4-r6,pc}
                  |L7.18|
000012  2000              MOVS     r0,#0                 ;46
000014  7020              STRB     r0,[r4,#0]            ;46
000016  2001              MOVS     r0,#1                 ;47
000018  6060              STR      r0,[r4,#4]            ;47
00001a  4620              MOV      r0,r4                 ;48
00001c  e7f8              B        |L7.16|
;;;50     
                          ENDP


                          AREA ||i.eap_vendor_test_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_vendor_test_isKeyAvailable PROC
;;;145    
;;;146    static Boolean eap_vendor_test_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;147    {
;;;148    	struct eap_vendor_test_data *data = priv;
000002  460a              MOV      r2,r1
;;;149    	return data->state == SUCCESS;
000004  7810              LDRB     r0,[r2,#0]
000006  2802              CMP      r0,#2
000008  d101              BNE      |L8.14|
00000a  2001              MOVS     r0,#1
                  |L8.12|
;;;150    }
00000c  4770              BX       lr
                  |L8.14|
00000e  2000              MOVS     r0,#0                 ;149
000010  e7fc              B        |L8.12|
;;;151    
                          ENDP


                          AREA ||i.eap_vendor_test_process||, CODE, READONLY, ALIGN=2

                  eap_vendor_test_process PROC
;;;69     
;;;70     static struct wpabuf * eap_vendor_test_process(struct eap_sm *sm, void *priv,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;71     					       struct eap_method_ret *ret,
;;;72     					       const struct wpabuf *reqData)
;;;73     {
000004  4682              MOV      r10,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  461f              MOV      r7,r3
;;;74     	struct eap_vendor_test_data *data = priv;
00000c  464d              MOV      r5,r9
;;;75     	struct wpabuf *resp;
;;;76     	const u8 *pos;
;;;77     	size_t len;
;;;78     
;;;79     	pos = eap_hdr_validate(EAP_VENDOR_ID, EAP_VENDOR_TYPE, reqData, &len);
00000e  ab01              ADD      r3,sp,#4
000010  463a              MOV      r2,r7
000012  21f9              MOVS     r1,#0xf9
000014  4832              LDR      r0,|L9.224|
000016  f7fffffe          BL       eap_hdr_validate
00001a  4606              MOV      r6,r0
;;;80     	if (pos == NULL || len < 1) {
00001c  b10e              CBZ      r6,|L9.34|
00001e  9801              LDR      r0,[sp,#4]
000020  b920              CBNZ     r0,|L9.44|
                  |L9.34|
;;;81     		ret->ignore = TRUE;
000022  2001              MOVS     r0,#1
000024  6020              STR      r0,[r4,#0]
;;;82     		return NULL;
000026  2000              MOVS     r0,#0
                  |L9.40|
;;;83     	}
;;;84     
;;;85     	if (data->state == INIT && *pos != 1) {
;;;86     		wpa_printf(MSG_DEBUG, "EAP-VENDOR-TEST: Unexpected message "
;;;87     			   "%d in INIT state", *pos);
;;;88     		ret->ignore = TRUE;
;;;89     		return NULL;
;;;90     	}
;;;91     
;;;92     	if (data->state == CONFIRM && *pos != 3) {
;;;93     		wpa_printf(MSG_DEBUG, "EAP-VENDOR-TEST: Unexpected message "
;;;94     			   "%d in CONFIRM state", *pos);
;;;95     		ret->ignore = TRUE;
;;;96     		return NULL;
;;;97     	}
;;;98     
;;;99     	if (data->state == SUCCESS) {
;;;100    		wpa_printf(MSG_DEBUG, "EAP-VENDOR-TEST: Unexpected message "
;;;101    			   "in SUCCESS state");
;;;102    		ret->ignore = TRUE;
;;;103    		return NULL;
;;;104    	}
;;;105    
;;;106    	if (data->state == CONFIRM) {
;;;107    #ifdef TEST_PENDING_REQUEST
;;;108    		if (data->first_try) {
;;;109    			data->first_try = 0;
;;;110    			wpa_printf(MSG_DEBUG, "EAP-VENDOR-TEST: Testing "
;;;111    				   "pending request");
;;;112    			ret->ignore = TRUE;
;;;113    			eloop_register_timeout(1, 0, eap_vendor_ready, sm,
;;;114    					       NULL);
;;;115    			return NULL;
;;;116    		}
;;;117    #endif /* TEST_PENDING_REQUEST */
;;;118    	}
;;;119    
;;;120    	ret->ignore = FALSE;
;;;121    
;;;122    	wpa_printf(MSG_DEBUG, "EAP-VENDOR-TEST: Generating Response");
;;;123    	ret->allowNotifications = TRUE;
;;;124    
;;;125    	resp = eap_msg_alloc(EAP_VENDOR_ID, EAP_VENDOR_TYPE, 1,
;;;126    			     EAP_CODE_RESPONSE, eap_get_id(reqData));
;;;127    	if (resp == NULL)
;;;128    		return NULL;
;;;129    
;;;130    	if (data->state == INIT) {
;;;131    		wpabuf_put_u8(resp, 2);
;;;132    		data->state = CONFIRM;
;;;133    		ret->methodState = METHOD_CONT;
;;;134    		ret->decision = DECISION_FAIL;
;;;135    	} else {
;;;136    		wpabuf_put_u8(resp, 4);
;;;137    		data->state = SUCCESS;
;;;138    		ret->methodState = METHOD_DONE;
;;;139    		ret->decision = DECISION_UNCOND_SUCC;
;;;140    	}
;;;141    
;;;142    	return resp;
;;;143    }
000028  e8bd9ffc          POP      {r2-r12,pc}
                  |L9.44|
00002c  7828              LDRB     r0,[r5,#0]            ;85
00002e  b958              CBNZ     r0,|L9.72|
000030  7830              LDRB     r0,[r6,#0]            ;85
000032  2801              CMP      r0,#1                 ;85
000034  d008              BEQ      |L9.72|
000036  7832              LDRB     r2,[r6,#0]            ;86
000038  a12a              ADR      r1,|L9.228|
00003a  2000              MOVS     r0,#0                 ;86
00003c  f7fffffe          BL       wpa_printf
000040  2001              MOVS     r0,#1                 ;88
000042  6020              STR      r0,[r4,#0]            ;88
000044  2000              MOVS     r0,#0                 ;89
000046  e7ef              B        |L9.40|
                  |L9.72|
000048  7828              LDRB     r0,[r5,#0]            ;92
00004a  2801              CMP      r0,#1                 ;92
00004c  d10b              BNE      |L9.102|
00004e  7830              LDRB     r0,[r6,#0]            ;92
000050  2803              CMP      r0,#3                 ;92
000052  d008              BEQ      |L9.102|
000054  7832              LDRB     r2,[r6,#0]            ;93
000056  a131              ADR      r1,|L9.284|
000058  2000              MOVS     r0,#0                 ;93
00005a  f7fffffe          BL       wpa_printf
00005e  2001              MOVS     r0,#1                 ;95
000060  6020              STR      r0,[r4,#0]            ;95
000062  2000              MOVS     r0,#0                 ;96
000064  e7e0              B        |L9.40|
                  |L9.102|
000066  7828              LDRB     r0,[r5,#0]            ;99
000068  2802              CMP      r0,#2                 ;99
00006a  d107              BNE      |L9.124|
00006c  a139              ADR      r1,|L9.340|
00006e  2000              MOVS     r0,#0                 ;100
000070  f7fffffe          BL       wpa_printf
000074  2001              MOVS     r0,#1                 ;102
000076  6020              STR      r0,[r4,#0]            ;102
000078  2000              MOVS     r0,#0                 ;103
00007a  e7d5              B        |L9.40|
                  |L9.124|
00007c  2000              MOVS     r0,#0                 ;120
00007e  6020              STR      r0,[r4,#0]            ;120
000080  a142              ADR      r1,|L9.396|
000082  f7fffffe          BL       wpa_printf
000086  2001              MOVS     r0,#1                 ;123
000088  60a0              STR      r0,[r4,#8]            ;123
00008a  4638              MOV      r0,r7                 ;125
00008c  f7fffffe          BL       eap_get_id
000090  4683              MOV      r11,r0                ;125
000092  2302              MOVS     r3,#2                 ;125
000094  2201              MOVS     r2,#1                 ;125
000096  21f9              MOVS     r1,#0xf9              ;125
000098  9000              STR      r0,[sp,#0]            ;125
00009a  4811              LDR      r0,|L9.224|
00009c  f7fffffe          BL       eap_msg_alloc
0000a0  4680              MOV      r8,r0                 ;125
0000a2  f1b80f00          CMP      r8,#0                 ;127
0000a6  d101              BNE      |L9.172|
0000a8  2000              MOVS     r0,#0                 ;128
0000aa  e7bd              B        |L9.40|
                  |L9.172|
0000ac  7828              LDRB     r0,[r5,#0]            ;130
0000ae  b950              CBNZ     r0,|L9.198|
0000b0  2102              MOVS     r1,#2                 ;131
0000b2  4640              MOV      r0,r8                 ;131
0000b4  f7fffffe          BL       wpabuf_put_u8
0000b8  2001              MOVS     r0,#1                 ;132
0000ba  7028              STRB     r0,[r5,#0]            ;132
0000bc  2002              MOVS     r0,#2                 ;133
0000be  7120              STRB     r0,[r4,#4]            ;133
0000c0  2000              MOVS     r0,#0                 ;134
0000c2  7160              STRB     r0,[r4,#5]            ;134
0000c4  e009              B        |L9.218|
                  |L9.198|
0000c6  2104              MOVS     r1,#4                 ;136
0000c8  4640              MOV      r0,r8                 ;136
0000ca  f7fffffe          BL       wpabuf_put_u8
0000ce  2002              MOVS     r0,#2                 ;137
0000d0  7028              STRB     r0,[r5,#0]            ;137
0000d2  2004              MOVS     r0,#4                 ;138
0000d4  7120              STRB     r0,[r4,#4]            ;138
0000d6  2002              MOVS     r0,#2                 ;139
0000d8  7160              STRB     r0,[r4,#5]            ;139
                  |L9.218|
0000da  4640              MOV      r0,r8                 ;142
0000dc  e7a4              B        |L9.40|
;;;144    
                          ENDP

0000de  0000              DCW      0x0000
                  |L9.224|
                          DCD      0x00fffefd
                  |L9.228|
0000e4  4541502d          DCB      "EAP-VENDOR-TEST: Unexpected message %d in INIT state",0
0000e8  56454e44
0000ec  4f522d54
0000f0  4553543a
0000f4  20556e65
0000f8  78706563
0000fc  74656420
000100  6d657373
000104  61676520
000108  25642069
00010c  6e20494e
000110  49542073
000114  74617465
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L9.284|
00011c  4541502d          DCB      "EAP-VENDOR-TEST: Unexpected message %d in CONFIRM state"
000120  56454e44
000124  4f522d54
000128  4553543a
00012c  20556e65
000130  78706563
000134  74656420
000138  6d657373
00013c  61676520
000140  25642069
000144  6e20434f
000148  4e464952
00014c  4d207374
000150  617465  
000153  00                DCB      0
                  |L9.340|
000154  4541502d          DCB      "EAP-VENDOR-TEST: Unexpected message in SUCCESS state",0
000158  56454e44
00015c  4f522d54
000160  4553543a
000164  20556e65
000168  78706563
00016c  74656420
000170  6d657373
000174  61676520
000178  696e2053
00017c  55434345
000180  53532073
000184  74617465
000188  00      
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
                  |L9.396|
00018c  4541502d          DCB      "EAP-VENDOR-TEST: Generating Response",0
000190  56454e44
000194  4f522d54
000198  4553543a
00019c  2047656e
0001a0  65726174
0001a4  696e6720
0001a8  52657370
0001ac  6f6e7365
0001b0  00      
0001b1  00                DCB      0
0001b2  00                DCB      0
0001b3  00                DCB      0

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L10.30|
00001a  2001              MOVS     r0,#1
                  |L10.28|
;;;495    }
00001c  4770              BX       lr
                  |L10.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L10.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L15.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L15.14|
                  |L15.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L15.12|
;;;70     }
00000c  4770              BX       lr
                  |L15.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L15.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L16.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L16.16|
                  |L16.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L16.14|
;;;76     }
00000e  4770              BX       lr
                  |L16.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L16.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L17.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L17.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L17.18|
                  |L17.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L17.16|
;;;57     }
000010  4770              BX       lr
                  |L17.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L17.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L18.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L18.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L18.20|
                  |L18.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L18.18|
;;;64     }
000012  4770              BX       lr
                  |L18.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L18.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L19.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L19.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L19.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L19.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L22.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L22.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L22.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L22.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L28.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L28.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

