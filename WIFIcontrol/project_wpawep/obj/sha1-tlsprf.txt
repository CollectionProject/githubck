; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\sha1-tlsprf.o --depend=.\obj\sha1-tlsprf.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\sha1-tlsprf.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\crypto\sha1-tlsprf.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L2.30|
00001a  2001              MOVS     r0,#1
                  |L2.28|
;;;495    }
00001c  4770              BX       lr
                  |L2.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L2.28|
;;;496    
                          ENDP


                          AREA ||i.tls_prf||, CODE, READONLY, ALIGN=1

                  tls_prf PROC
;;;36      */
;;;37     int tls_prf(const u8 *secret, size_t secret_len, const char *label,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;38     	    const u8 *seed, size_t seed_len, u8 *out, size_t outlen)
;;;39     {
000004  b0a3              SUB      sp,sp,#0x8c
000006  4681              MOV      r9,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
00000c  469a              MOV      r10,r3
;;;40     	size_t L_S1, L_S2, i;
;;;41     	const u8 *S1, *S2;
;;;42     	u8 A_MD5[MD5_MAC_LEN], A_SHA1[SHA1_MAC_LEN];
;;;43     	u8 P_MD5[MD5_MAC_LEN], P_SHA1[SHA1_MAC_LEN];
;;;44     	int MD5_pos, SHA1_pos;
;;;45     	const u8 *MD5_addr[3];
;;;46     	size_t MD5_len[3];
;;;47     	const unsigned char *SHA1_addr[3];
;;;48     	size_t SHA1_len[3];
;;;49     
;;;50     	if (secret_len & 1)
00000e  f0140f01          TST      r4,#1
000012  d004              BEQ      |L3.30|
;;;51     		return -1;
000014  f04f30ff          MOV      r0,#0xffffffff
                  |L3.24|
;;;52     
;;;53     	MD5_addr[0] = A_MD5;
;;;54     	MD5_len[0] = MD5_MAC_LEN;
;;;55     	MD5_addr[1] = (unsigned char *) label;
;;;56     	MD5_len[1] = os_strlen(label);
;;;57     	MD5_addr[2] = seed;
;;;58     	MD5_len[2] = seed_len;
;;;59     
;;;60     	SHA1_addr[0] = A_SHA1;
;;;61     	SHA1_len[0] = SHA1_MAC_LEN;
;;;62     	SHA1_addr[1] = (unsigned char *) label;
;;;63     	SHA1_len[1] = os_strlen(label);
;;;64     	SHA1_addr[2] = seed;
;;;65     	SHA1_len[2] = seed_len;
;;;66     
;;;67     	/* RFC 2246, Chapter 5
;;;68     	 * A(0) = seed, A(i) = HMAC(secret, A(i-1))
;;;69     	 * P_hash = HMAC(secret, A(1) + seed) + HMAC(secret, A(2) + seed) + ..
;;;70     	 * PRF = P_MD5(S1, label + seed) XOR P_SHA-1(S2, label + seed)
;;;71     	 */
;;;72     
;;;73     	L_S1 = L_S2 = (secret_len + 1) / 2;
;;;74     	S1 = secret;
;;;75     	S2 = secret + L_S1;
;;;76     	if (secret_len & 1) {
;;;77     		/* The last byte of S1 will be shared with S2 */
;;;78     		S2--;
;;;79     	}
;;;80     
;;;81     	hmac_md5_vector_non_fips_allow(S1, L_S1, 2, &MD5_addr[1], &MD5_len[1],
;;;82     				       A_MD5);
;;;83     	hmac_sha1_vector(S2, L_S2, 2, &SHA1_addr[1], &SHA1_len[1], A_SHA1);
;;;84     
;;;85     	MD5_pos = MD5_MAC_LEN;
;;;86     	SHA1_pos = SHA1_MAC_LEN;
;;;87     	for (i = 0; i < outlen; i++) {
;;;88     		if (MD5_pos == MD5_MAC_LEN) {
;;;89     			hmac_md5_vector_non_fips_allow(S1, L_S1, 3, MD5_addr,
;;;90     						       MD5_len, P_MD5);
;;;91     			MD5_pos = 0;
;;;92     			hmac_md5_non_fips_allow(S1, L_S1, A_MD5, MD5_MAC_LEN,
;;;93     						A_MD5);
;;;94     		}
;;;95     		if (SHA1_pos == SHA1_MAC_LEN) {
;;;96     			hmac_sha1_vector(S2, L_S2, 3, SHA1_addr, SHA1_len,
;;;97     					 P_SHA1);
;;;98     			SHA1_pos = 0;
;;;99     			hmac_sha1(S2, L_S2, A_SHA1, SHA1_MAC_LEN, A_SHA1);
;;;100    		}
;;;101    
;;;102    		out[i] = P_MD5[MD5_pos] ^ P_SHA1[SHA1_pos];
;;;103    
;;;104    		MD5_pos++;
;;;105    		SHA1_pos++;
;;;106    	}
;;;107    
;;;108    	return 0;
;;;109    }
000018  b027              ADD      sp,sp,#0x9c
00001a  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.30|
00001e  a81c              ADD      r0,sp,#0x70           ;53
000020  900b              STR      r0,[sp,#0x2c]         ;53
000022  2010              MOVS     r0,#0x10              ;54
000024  9008              STR      r0,[sp,#0x20]         ;54
000026  950c              STR      r5,[sp,#0x30]         ;55
000028  4628              MOV      r0,r5                 ;56
00002a  f7fffffe          BL       os_strlen
00002e  9009              STR      r0,[sp,#0x24]         ;56
000030  f8cda034          STR      r10,[sp,#0x34]        ;57
000034  9830              LDR      r0,[sp,#0xc0]         ;58
000036  900a              STR      r0,[sp,#0x28]         ;58
000038  a817              ADD      r0,sp,#0x5c           ;60
00003a  9005              STR      r0,[sp,#0x14]         ;60
00003c  2014              MOVS     r0,#0x14              ;61
00003e  9002              STR      r0,[sp,#8]            ;61
000040  9506              STR      r5,[sp,#0x18]         ;62
000042  4628              MOV      r0,r5                 ;63
000044  f7fffffe          BL       os_strlen
000048  9003              STR      r0,[sp,#0xc]          ;63
00004a  f8cda01c          STR      r10,[sp,#0x1c]        ;64
00004e  9830              LDR      r0,[sp,#0xc0]         ;65
000050  9004              STR      r0,[sp,#0x10]         ;65
000052  1c60              ADDS     r0,r4,#1              ;73
000054  ea4f0b50          LSR      r11,r0,#1             ;73
000058  f8cdb088          STR      r11,[sp,#0x88]        ;73
00005c  f8cd9084          STR      r9,[sp,#0x84]         ;74
000060  eb09000b          ADD      r0,r9,r11             ;75
000064  9020              STR      r0,[sp,#0x80]         ;75
000066  f0140f01          TST      r4,#1                 ;76
00006a  d002              BEQ      |L3.114|
00006c  9820              LDR      r0,[sp,#0x80]         ;78
00006e  1e40              SUBS     r0,r0,#1              ;78
000070  9020              STR      r0,[sp,#0x80]         ;78
                  |L3.114|
000072  ab1c              ADD      r3,sp,#0x70           ;81
000074  aa09              ADD      r2,sp,#0x24           ;81
000076  e9cd2300          STRD     r2,r3,[sp,#0]         ;81
00007a  ab0c              ADD      r3,sp,#0x30           ;81
00007c  2202              MOVS     r2,#2                 ;81
00007e  4659              MOV      r1,r11                ;81
000080  9821              LDR      r0,[sp,#0x84]         ;81
000082  f7fffffe          BL       hmac_md5_vector
000086  ab17              ADD      r3,sp,#0x5c           ;83
000088  aa03              ADD      r2,sp,#0xc            ;83
00008a  e9cd2300          STRD     r2,r3,[sp,#0]         ;83
00008e  ab06              ADD      r3,sp,#0x18           ;83
000090  2202              MOVS     r2,#2                 ;83
000092  9922              LDR      r1,[sp,#0x88]         ;83
000094  9820              LDR      r0,[sp,#0x80]         ;83
000096  f7fffffe          BL       hmac_sha1_vector
00009a  2710              MOVS     r7,#0x10              ;85
00009c  f04f0814          MOV      r8,#0x14              ;86
0000a0  2600              MOVS     r6,#0                 ;87
0000a2  e037              B        |L3.276|
                  |L3.164|
0000a4  2f10              CMP      r7,#0x10              ;88
0000a6  d112              BNE      |L3.206|
0000a8  ab13              ADD      r3,sp,#0x4c           ;89
0000aa  aa08              ADD      r2,sp,#0x20           ;89
0000ac  e9cd2300          STRD     r2,r3,[sp,#0]         ;89
0000b0  ab0b              ADD      r3,sp,#0x2c           ;89
0000b2  2203              MOVS     r2,#3                 ;89
0000b4  4659              MOV      r1,r11                ;89
0000b6  9821              LDR      r0,[sp,#0x84]         ;89
0000b8  f7fffffe          BL       hmac_md5_vector
0000bc  2700              MOVS     r7,#0                 ;91
0000be  ab1c              ADD      r3,sp,#0x70           ;92
0000c0  9300              STR      r3,[sp,#0]            ;92
0000c2  2310              MOVS     r3,#0x10              ;92
0000c4  aa1c              ADD      r2,sp,#0x70           ;92
0000c6  4659              MOV      r1,r11                ;92
0000c8  9821              LDR      r0,[sp,#0x84]         ;92
0000ca  f7fffffe          BL       hmac_md5
                  |L3.206|
0000ce  f1b80f14          CMP      r8,#0x14              ;95
0000d2  d113              BNE      |L3.252|
0000d4  ab0e              ADD      r3,sp,#0x38           ;96
0000d6  aa02              ADD      r2,sp,#8              ;96
0000d8  e9cd2300          STRD     r2,r3,[sp,#0]         ;96
0000dc  ab05              ADD      r3,sp,#0x14           ;96
0000de  2203              MOVS     r2,#3                 ;96
0000e0  9922              LDR      r1,[sp,#0x88]         ;96
0000e2  9820              LDR      r0,[sp,#0x80]         ;96
0000e4  f7fffffe          BL       hmac_sha1_vector
0000e8  f04f0800          MOV      r8,#0                 ;98
0000ec  ab17              ADD      r3,sp,#0x5c           ;99
0000ee  9300              STR      r3,[sp,#0]            ;99
0000f0  2314              MOVS     r3,#0x14              ;99
0000f2  aa17              ADD      r2,sp,#0x5c           ;99
0000f4  9922              LDR      r1,[sp,#0x88]         ;99
0000f6  9820              LDR      r0,[sp,#0x80]         ;99
0000f8  f7fffffe          BL       hmac_sha1
                  |L3.252|
0000fc  a813              ADD      r0,sp,#0x4c           ;102
0000fe  5dc0              LDRB     r0,[r0,r7]            ;102
000100  a90e              ADD      r1,sp,#0x38           ;102
000102  f8111008          LDRB     r1,[r1,r8]            ;102
000106  4041              EORS     r1,r1,r0              ;102
000108  9831              LDR      r0,[sp,#0xc4]         ;102
00010a  5581              STRB     r1,[r0,r6]            ;102
00010c  1c7f              ADDS     r7,r7,#1              ;104
00010e  f1080801          ADD      r8,r8,#1              ;105
000112  1c76              ADDS     r6,r6,#1              ;87
                  |L3.276|
000114  9832              LDR      r0,[sp,#0xc8]         ;87
000116  4286              CMP      r6,r0                 ;87
000118  d3c4              BCC      |L3.164|
00011a  2000              MOVS     r0,#0                 ;108
00011c  e77c              B        |L3.24|
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L8.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L8.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L8.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L8.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L11.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L11.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L11.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L11.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L17.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L17.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

