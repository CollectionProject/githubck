; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\ikev2.o --depend=.\obj\ikev2.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\ikev2.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\ikev2.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.ikev2_build_auth||, CODE, READONLY, ALIGN=2

                  ikev2_build_auth PROC
;;;1031   
;;;1032   static int ikev2_build_auth(struct ikev2_responder_data *data,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1033   			    struct wpabuf *msg, u8 next_payload)
;;;1034   {
000004  b08a              SUB      sp,sp,#0x28
000006  4604              MOV      r4,r0
000008  460f              MOV      r7,r1
00000a  4690              MOV      r8,r2
;;;1035   	struct ikev2_payload_hdr *phdr;
;;;1036   	size_t plen;
;;;1037   	const struct ikev2_prf_alg *prf;
;;;1038   
;;;1039   	wpa_printf(MSG_DEBUG, "IKEV2: Adding AUTH payload");
00000c  a131              ADR      r1,|L2.212|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;1040   
;;;1041   	prf = ikev2_get_prf(data->proposal.prf);
000014  f44f710b          MOV      r1,#0x22c
000018  5908              LDR      r0,[r1,r4]
00001a  f7fffffe          BL       ikev2_get_prf
00001e  4681              MOV      r9,r0
;;;1042   	if (prf == NULL)
000020  f1b90f00          CMP      r9,#0
000024  d104              BNE      |L2.48|
;;;1043   		return -1;
000026  f04f30ff          MOV      r0,#0xffffffff
                  |L2.42|
;;;1044   
;;;1045   	/* Authentication - RFC 4306, Sect. 3.8 */
;;;1046   	phdr = wpabuf_put(msg, sizeof(*phdr));
;;;1047   	phdr->next_payload = next_payload;
;;;1048   	phdr->flags = 0;
;;;1049   	wpabuf_put_u8(msg, AUTH_SHARED_KEY_MIC);
;;;1050   	wpabuf_put(msg, 3); /* RESERVED */
;;;1051   
;;;1052   	/* msg | Ni | prf(SK_pr,IDr') */
;;;1053   	if (ikev2_derive_auth_data(data->proposal.prf, data->r_sign_msg,
;;;1054   				   data->IDr, data->IDr_len, ID_KEY_ID,
;;;1055   				   &data->keys, 0, data->shared_secret,
;;;1056   				   data->shared_secret_len,
;;;1057   				   data->i_nonce, data->i_nonce_len,
;;;1058   				   data->key_pad, data->key_pad_len,
;;;1059   				   wpabuf_put(msg, prf->hash_len)) < 0) {
;;;1060   		wpa_printf(MSG_INFO, "IKEV2: Could not derive AUTH data");
;;;1061   		return -1;
;;;1062   	}
;;;1063   	wpabuf_free(data->r_sign_msg);
;;;1064   	data->r_sign_msg = NULL;
;;;1065   
;;;1066   	plen = (u8 *) wpabuf_put(msg, 0) - (u8 *) phdr;
;;;1067   	WPA_PUT_BE16(phdr->payload_length, plen);
;;;1068   	return 0;
;;;1069   }
00002a  b00a              ADD      sp,sp,#0x28
00002c  e8bd87f0          POP      {r4-r10,pc}
                  |L2.48|
000030  2104              MOVS     r1,#4                 ;1046
000032  4638              MOV      r0,r7                 ;1046
000034  f7fffffe          BL       wpabuf_put
000038  4605              MOV      r5,r0                 ;1046
00003a  f8858000          STRB     r8,[r5,#0]            ;1047
00003e  2000              MOVS     r0,#0                 ;1048
000040  7068              STRB     r0,[r5,#1]            ;1048
000042  2102              MOVS     r1,#2                 ;1049
000044  4638              MOV      r0,r7                 ;1049
000046  f7fffffe          BL       wpabuf_put_u8
00004a  2103              MOVS     r1,#3                 ;1050
00004c  4638              MOV      r0,r7                 ;1050
00004e  f7fffffe          BL       wpabuf_put
000052  4638              MOV      r0,r7                 ;1053
000054  f8d91008          LDR      r1,[r9,#8]            ;1053
000058  f7fffffe          BL       wpabuf_put
00005c  4682              MOV      r10,r0                ;1053
00005e  4603              MOV      r3,r0                 ;1053
000060  f5047124          ADD      r1,r4,#0x290          ;1053
000064  c906              LDM      r1,{r1,r2}            ;1053
000066  f8d40114          LDR      r0,[r4,#0x114]        ;1053
00006a  ae06              ADD      r6,sp,#0x18           ;1053
00006c  c60f              STM      r6!,{r0-r3}           ;1053
00006e  f1040311          ADD      r3,r4,#0x11           ;1053
000072  2000              MOVS     r0,#0                 ;1053
000074  f5047121          ADD      r1,r4,#0x284          ;1053
000078  c906              LDM      r1,{r1,r2}            ;1053
00007a  ae02              ADD      r6,sp,#8              ;1053
00007c  c60f              STM      r6!,{r0-r3}           ;1053
00007e  f504730f          ADD      r3,r4,#0x23c          ;1053
000082  220b              MOVS     r2,#0xb               ;1053
000084  e9cd2300          STRD     r2,r3,[sp,#0]         ;1053
000088  f504721d          ADD      r2,r4,#0x274          ;1053
00008c  ca0c              LDM      r2,{r2,r3}            ;1053
00008e  f8d4127c          LDR      r1,[r4,#0x27c]        ;1053
000092  f8d4022c          LDR      r0,[r4,#0x22c]        ;1053
000096  f7fffffe          BL       ikev2_derive_auth_data
00009a  2800              CMP      r0,#0                 ;1053
00009c  da06              BGE      |L2.172|
00009e  a114              ADR      r1,|L2.240|
0000a0  2000              MOVS     r0,#0                 ;1060
0000a2  f7fffffe          BL       wpa_printf
0000a6  f04f30ff          MOV      r0,#0xffffffff        ;1061
0000aa  e7be              B        |L2.42|
                  |L2.172|
0000ac  f8d4027c          LDR      r0,[r4,#0x27c]        ;1063
0000b0  f7fffffe          BL       wpabuf_free
0000b4  2000              MOVS     r0,#0                 ;1064
0000b6  f8c4027c          STR      r0,[r4,#0x27c]        ;1064
0000ba  2100              MOVS     r1,#0                 ;1066
0000bc  4638              MOV      r0,r7                 ;1066
0000be  f7fffffe          BL       wpabuf_put
0000c2  1b46              SUBS     r6,r0,r5              ;1066
0000c4  bf00              NOP                            ;1067
0000c6  0a30              LSRS     r0,r6,#8              ;1067
0000c8  70a8              STRB     r0,[r5,#2]            ;1067
0000ca  70ee              STRB     r6,[r5,#3]            ;1067
0000cc  bf00              NOP                            ;1067
0000ce  2000              MOVS     r0,#0                 ;1068
0000d0  e7ab              B        |L2.42|
;;;1070   
                          ENDP

0000d2  0000              DCW      0x0000
                  |L2.212|
0000d4  494b4556          DCB      "IKEV2: Adding AUTH payload",0
0000d8  323a2041
0000dc  6464696e
0000e0  67204155
0000e4  54482070
0000e8  61796c6f
0000ec  616400  
0000ef  00                DCB      0
                  |L2.240|
0000f0  494b4556          DCB      "IKEV2: Could not derive AUTH data",0
0000f4  323a2043
0000f8  6f756c64
0000fc  206e6f74
000100  20646572
000104  69766520
000108  41555448
00010c  20646174
000110  6100    
000112  00                DCB      0
000113  00                DCB      0

                          AREA ||i.ikev2_build_hdr||, CODE, READONLY, ALIGN=2

                  ikev2_build_hdr PROC
;;;858    
;;;859    static void ikev2_build_hdr(struct ikev2_responder_data *data,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;860    			    struct wpabuf *msg, u8 exchange_type,
;;;861    			    u8 next_payload, u32 message_id)
;;;862    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  9d08              LDR      r5,[sp,#0x20]
;;;863    	struct ikev2_hdr *hdr;
;;;864    
;;;865    	wpa_printf(MSG_DEBUG, "IKEV2: Adding HDR");
00000e  a113              ADR      r1,|L3.92|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       wpa_printf
;;;866    
;;;867    	/* HDR - RFC 4306, Sect. 3.1 */
;;;868    	hdr = wpabuf_put(msg, sizeof(*hdr));
000016  211c              MOVS     r1,#0x1c
000018  4638              MOV      r0,r7
00001a  f7fffffe          BL       wpabuf_put
00001e  4604              MOV      r4,r0
;;;869    	os_memcpy(hdr->i_spi, data->i_spi, IKEV2_SPI_LEN);
000020  2208              MOVS     r2,#8
000022  1c71              ADDS     r1,r6,#1
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       os_memcpy
;;;870    	os_memcpy(hdr->r_spi, data->r_spi, IKEV2_SPI_LEN);
00002a  2208              MOVS     r2,#8
00002c  f1060109          ADD      r1,r6,#9
000030  f1040008          ADD      r0,r4,#8
000034  f7fffffe          BL       os_memcpy
;;;871    	hdr->next_payload = next_payload;
000038  f8849010          STRB     r9,[r4,#0x10]
;;;872    	hdr->version = IKEV2_VERSION;
00003c  2020              MOVS     r0,#0x20
00003e  7460              STRB     r0,[r4,#0x11]
;;;873    	hdr->exchange_type = exchange_type;
000040  f8848012          STRB     r8,[r4,#0x12]
;;;874    	hdr->flags = IKEV2_HDR_RESPONSE;
000044  74e0              STRB     r0,[r4,#0x13]
;;;875    	WPA_PUT_BE32(hdr->message_id, message_id);
000046  bf00              NOP      
000048  0e28              LSRS     r0,r5,#24
00004a  7520              STRB     r0,[r4,#0x14]
00004c  0c28              LSRS     r0,r5,#16
00004e  7560              STRB     r0,[r4,#0x15]
000050  0a28              LSRS     r0,r5,#8
000052  75a0              STRB     r0,[r4,#0x16]
000054  75e5              STRB     r5,[r4,#0x17]
000056  bf00              NOP      
;;;876    }
000058  e8bd87f0          POP      {r4-r10,pc}
;;;877    
                          ENDP

                  |L3.92|
00005c  494b4556          DCB      "IKEV2: Adding HDR",0
000060  323a2041
000064  6464696e
000068  67204844
00006c  5200    
00006e  00                DCB      0
00006f  00                DCB      0

                          AREA ||i.ikev2_build_idr||, CODE, READONLY, ALIGN=2

                  ikev2_build_idr PROC
;;;1005   
;;;1006   static int ikev2_build_idr(struct ikev2_responder_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1007   			   struct wpabuf *msg, u8 next_payload)
;;;1008   {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;1009   	struct ikev2_payload_hdr *phdr;
;;;1010   	size_t plen;
;;;1011   
;;;1012   	wpa_printf(MSG_DEBUG, "IKEV2: Adding IDr payload");
00000a  a119              ADR      r1,|L4.112|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       wpa_printf
;;;1013   
;;;1014   	if (data->IDr == NULL) {
000012  f8d50274          LDR      r0,[r5,#0x274]
000016  b938              CBNZ     r0,|L4.40|
;;;1015   		wpa_printf(MSG_INFO, "IKEV2: No IDr available");
000018  a11c              ADR      r1,|L4.140|
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       wpa_printf
;;;1016   		return -1;
000020  f04f30ff          MOV      r0,#0xffffffff
                  |L4.36|
;;;1017   	}
;;;1018   
;;;1019   	/* IDr - RFC 4306, Sect. 3.5 */
;;;1020   	phdr = wpabuf_put(msg, sizeof(*phdr));
;;;1021   	phdr->next_payload = next_payload;
;;;1022   	phdr->flags = 0;
;;;1023   	wpabuf_put_u8(msg, ID_KEY_ID);
;;;1024   	wpabuf_put(msg, 3); /* RESERVED */
;;;1025   	wpabuf_put_data(msg, data->IDr, data->IDr_len);
;;;1026   	plen = (u8 *) wpabuf_put(msg, 0) - (u8 *) phdr;
;;;1027   	WPA_PUT_BE16(phdr->payload_length, plen);
;;;1028   	return 0;
;;;1029   }
000024  e8bd81f0          POP      {r4-r8,pc}
                  |L4.40|
000028  2104              MOVS     r1,#4                 ;1020
00002a  4638              MOV      r0,r7                 ;1020
00002c  f7fffffe          BL       wpabuf_put
000030  4604              MOV      r4,r0                 ;1020
000032  f8848000          STRB     r8,[r4,#0]            ;1021
000036  2000              MOVS     r0,#0                 ;1022
000038  7060              STRB     r0,[r4,#1]            ;1022
00003a  210b              MOVS     r1,#0xb               ;1023
00003c  4638              MOV      r0,r7                 ;1023
00003e  f7fffffe          BL       wpabuf_put_u8
000042  2103              MOVS     r1,#3                 ;1024
000044  4638              MOV      r0,r7                 ;1024
000046  f7fffffe          BL       wpabuf_put
00004a  4638              MOV      r0,r7                 ;1025
00004c  f505711d          ADD      r1,r5,#0x274          ;1025
000050  c906              LDM      r1,{r1,r2}            ;1025
000052  f7fffffe          BL       wpabuf_put_data
000056  2100              MOVS     r1,#0                 ;1026
000058  4638              MOV      r0,r7                 ;1026
00005a  f7fffffe          BL       wpabuf_put
00005e  1b06              SUBS     r6,r0,r4              ;1026
000060  bf00              NOP                            ;1027
000062  0a30              LSRS     r0,r6,#8              ;1027
000064  70a0              STRB     r0,[r4,#2]            ;1027
000066  70e6              STRB     r6,[r4,#3]            ;1027
000068  bf00              NOP                            ;1027
00006a  2000              MOVS     r0,#0                 ;1028
00006c  e7da              B        |L4.36|
;;;1030   
                          ENDP

00006e  0000              DCW      0x0000
                  |L4.112|
000070  494b4556          DCB      "IKEV2: Adding IDr payload",0
000074  323a2041
000078  6464696e
00007c  67204944
000080  72207061
000084  796c6f61
000088  6400    
00008a  00                DCB      0
00008b  00                DCB      0
                  |L4.140|
00008c  494b4556          DCB      "IKEV2: No IDr available",0
000090  323a204e
000094  6f204944
000098  72206176
00009c  61696c61
0000a0  626c6500

                          AREA ||i.ikev2_build_ker||, CODE, READONLY, ALIGN=2

                  ikev2_build_ker PROC
;;;950    
;;;951    static int ikev2_build_ker(struct ikev2_responder_data *data,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;952    			   struct wpabuf *msg, u8 next_payload)
;;;953    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
;;;954    	struct ikev2_payload_hdr *phdr;
;;;955    	size_t plen;
;;;956    	struct wpabuf *pv;
;;;957    
;;;958    	wpa_printf(MSG_DEBUG, "IKEV2: Adding KEr payload");
00000a  a123              ADR      r1,|L5.152|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       wpa_printf
;;;959    
;;;960    	pv = dh_init(data->dh, &data->r_dh_private);
000012  f5057108          ADD      r1,r5,#0x220
000016  f8d50238          LDR      r0,[r5,#0x238]
00001a  f7fffffe          BL       dh_init
00001e  4607              MOV      r7,r0
;;;961    	if (pv == NULL) {
000020  b93f              CBNZ     r7,|L5.50|
;;;962    		wpa_printf(MSG_DEBUG, "IKEV2: Failed to initialize DH");
000022  a124              ADR      r1,|L5.180|
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       wpa_printf
;;;963    		return -1;
00002a  f04f30ff          MOV      r0,#0xffffffff
                  |L5.46|
;;;964    	}
;;;965    
;;;966    	/* KEr - RFC 4306, Sect. 3.4 */
;;;967    	phdr = wpabuf_put(msg, sizeof(*phdr));
;;;968    	phdr->next_payload = next_payload;
;;;969    	phdr->flags = 0;
;;;970    
;;;971    	wpabuf_put_be16(msg, data->proposal.dh); /* DH Group # */
;;;972    	wpabuf_put(msg, 2); /* RESERVED */
;;;973    	/*
;;;974    	 * RFC 4306, Sect. 3.4: possible zero padding for public value to
;;;975    	 * match the length of the prime.
;;;976    	 */
;;;977    	wpabuf_put(msg, data->dh->prime_len - wpabuf_len(pv));
;;;978    	wpabuf_put_buf(msg, pv);
;;;979    	wpabuf_free(pv);
;;;980    
;;;981    	plen = (u8 *) wpabuf_put(msg, 0) - (u8 *) phdr;
;;;982    	WPA_PUT_BE16(phdr->payload_length, plen);
;;;983    	return 0;
;;;984    }
00002e  e8bd87f0          POP      {r4-r10,pc}
                  |L5.50|
000032  2104              MOVS     r1,#4                 ;967
000034  4640              MOV      r0,r8                 ;967
000036  f7fffffe          BL       wpabuf_put
00003a  4604              MOV      r4,r0                 ;967
00003c  f8849000          STRB     r9,[r4,#0]            ;968
000040  2000              MOVS     r0,#0                 ;969
000042  7060              STRB     r0,[r4,#1]            ;969
000044  f44f700d          MOV      r0,#0x234             ;971
000048  5940              LDR      r0,[r0,r5]            ;971
00004a  b281              UXTH     r1,r0                 ;971
00004c  4640              MOV      r0,r8                 ;971
00004e  f7fffffe          BL       wpabuf_put_be16
000052  2102              MOVS     r1,#2                 ;972
000054  4640              MOV      r0,r8                 ;972
000056  f7fffffe          BL       wpabuf_put
00005a  4638              MOV      r0,r7                 ;977
00005c  f7fffffe          BL       wpabuf_len
000060  f8d51238          LDR      r1,[r5,#0x238]        ;977
000064  6909              LDR      r1,[r1,#0x10]         ;977
000066  eba10a00          SUB      r10,r1,r0             ;977
00006a  4651              MOV      r1,r10                ;977
00006c  4640              MOV      r0,r8                 ;977
00006e  f7fffffe          BL       wpabuf_put
000072  4639              MOV      r1,r7                 ;978
000074  4640              MOV      r0,r8                 ;978
000076  f7fffffe          BL       wpabuf_put_buf
00007a  4638              MOV      r0,r7                 ;979
00007c  f7fffffe          BL       wpabuf_free
000080  2100              MOVS     r1,#0                 ;981
000082  4640              MOV      r0,r8                 ;981
000084  f7fffffe          BL       wpabuf_put
000088  1b06              SUBS     r6,r0,r4              ;981
00008a  bf00              NOP                            ;982
00008c  0a30              LSRS     r0,r6,#8              ;982
00008e  70a0              STRB     r0,[r4,#2]            ;982
000090  70e6              STRB     r6,[r4,#3]            ;982
000092  bf00              NOP                            ;982
000094  2000              MOVS     r0,#0                 ;983
000096  e7ca              B        |L5.46|
;;;985    
                          ENDP

                  |L5.152|
000098  494b4556          DCB      "IKEV2: Adding KEr payload",0
00009c  323a2041
0000a0  6464696e
0000a4  67204b45
0000a8  72207061
0000ac  796c6f61
0000b0  6400    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L5.180|
0000b4  494b4556          DCB      "IKEV2: Failed to initialize DH",0
0000b8  323a2046
0000bc  61696c65
0000c0  6420746f
0000c4  20696e69
0000c8  7469616c
0000cc  697a6520
0000d0  444800  
0000d3  00                DCB      0

                          AREA ||i.ikev2_build_notification||, CODE, READONLY, ALIGN=2

                  ikev2_build_notification PROC
;;;1071   
;;;1072   static int ikev2_build_notification(struct ikev2_responder_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1073   				    struct wpabuf *msg, u8 next_payload)
;;;1074   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;1075   	struct ikev2_payload_hdr *phdr;
;;;1076   	size_t plen;
;;;1077   
;;;1078   	wpa_printf(MSG_DEBUG, "IKEV2: Adding Notification payload");
00000a  a12e              ADR      r1,|L6.196|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       wpa_printf
;;;1079   
;;;1080   	if (data->error_type == 0) {
000012  f8b40298          LDRH     r0,[r4,#0x298]
000016  b938              CBNZ     r0,|L6.40|
;;;1081   		wpa_printf(MSG_INFO, "IKEV2: No Notify Message Type "
000018  a133              ADR      r1,|L6.232|
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       wpa_printf
;;;1082   			   "available");
;;;1083   		return -1;
000020  f04f30ff          MOV      r0,#0xffffffff
                  |L6.36|
;;;1084   	}
;;;1085   
;;;1086   	/* Notify - RFC 4306, Sect. 3.10 */
;;;1087   	phdr = wpabuf_put(msg, sizeof(*phdr));
;;;1088   	phdr->next_payload = next_payload;
;;;1089   	phdr->flags = 0;
;;;1090   #ifdef CCNS_PL
;;;1091   	wpabuf_put_u8(msg, 1); /* Protocol ID: IKE_SA notification */
;;;1092   #else /* CCNS_PL */
;;;1093   	wpabuf_put_u8(msg, 0); /* Protocol ID: no existing SA */
;;;1094   #endif /* CCNS_PL */
;;;1095   	wpabuf_put_u8(msg, 0); /* SPI Size */
;;;1096   	wpabuf_put_be16(msg, data->error_type);
;;;1097   
;;;1098   	switch (data->error_type) {
;;;1099   	case INVALID_KE_PAYLOAD:
;;;1100   		if (data->proposal.dh == -1) {
;;;1101   			wpa_printf(MSG_INFO, "IKEV2: No DH Group selected for "
;;;1102   				   "INVALID_KE_PAYLOAD notifications");
;;;1103   			return -1;
;;;1104   		}
;;;1105   		wpabuf_put_be16(msg, data->proposal.dh);
;;;1106   		wpa_printf(MSG_DEBUG, "IKEV2: INVALID_KE_PAYLOAD - request "
;;;1107   			   "DH Group #%d", data->proposal.dh);
;;;1108   		break;
;;;1109   	case AUTHENTICATION_FAILED:
;;;1110   		/* no associated data */
;;;1111   		break;
;;;1112   	default:
;;;1113   		wpa_printf(MSG_INFO, "IKEV2: Unsupported Notify Message Type "
;;;1114   			   "%d", data->error_type);
;;;1115   		return -1;
;;;1116   	}
;;;1117   
;;;1118   	plen = (u8 *) wpabuf_put(msg, 0) - (u8 *) phdr;
;;;1119   	WPA_PUT_BE16(phdr->payload_length, plen);
;;;1120   	return 0;
;;;1121   }
000024  e8bd81f0          POP      {r4-r8,pc}
                  |L6.40|
000028  2104              MOVS     r1,#4                 ;1087
00002a  4638              MOV      r0,r7                 ;1087
00002c  f7fffffe          BL       wpabuf_put
000030  4605              MOV      r5,r0                 ;1087
000032  f8858000          STRB     r8,[r5,#0]            ;1088
000036  2000              MOVS     r0,#0                 ;1089
000038  7068              STRB     r0,[r5,#1]            ;1089
00003a  2100              MOVS     r1,#0                 ;1093
00003c  4638              MOV      r0,r7                 ;1093
00003e  f7fffffe          BL       wpabuf_put_u8
000042  2100              MOVS     r1,#0                 ;1095
000044  4638              MOV      r0,r7                 ;1095
000046  f7fffffe          BL       wpabuf_put_u8
00004a  f8b41298          LDRH     r1,[r4,#0x298]        ;1096
00004e  4638              MOV      r0,r7                 ;1096
000050  f7fffffe          BL       wpabuf_put_be16
000054  f8b40298          LDRH     r0,[r4,#0x298]        ;1098
000058  2811              CMP      r0,#0x11              ;1098
00005a  d002              BEQ      |L6.98|
00005c  2818              CMP      r0,#0x18              ;1098
00005e  d11b              BNE      |L6.152|
000060  e019              B        |L6.150|
                  |L6.98|
000062  f44f700d          MOV      r0,#0x234             ;1100
000066  5900              LDR      r0,[r0,r4]            ;1100
000068  1c40              ADDS     r0,r0,#1              ;1100
00006a  d105              BNE      |L6.120|
00006c  4928              LDR      r1,|L6.272|
00006e  f7fffffe          BL       wpa_printf
000072  f04f30ff          MOV      r0,#0xffffffff        ;1103
000076  e7d5              B        |L6.36|
                  |L6.120|
000078  f44f700d          MOV      r0,#0x234             ;1105
00007c  5900              LDR      r0,[r0,r4]            ;1105
00007e  b281              UXTH     r1,r0                 ;1105
000080  4638              MOV      r0,r7                 ;1105
000082  f7fffffe          BL       wpabuf_put_be16
000086  f44f700d          MOV      r0,#0x234             ;1106
00008a  5902              LDR      r2,[r0,r4]            ;1106
00008c  a121              ADR      r1,|L6.276|
00008e  2000              MOVS     r0,#0                 ;1106
000090  f7fffffe          BL       wpa_printf
000094  e009              B        |L6.170|
                  |L6.150|
000096  e008              B        |L6.170|
                  |L6.152|
000098  f8b42298          LDRH     r2,[r4,#0x298]        ;1113
00009c  a12a              ADR      r1,|L6.328|
00009e  2000              MOVS     r0,#0                 ;1113
0000a0  f7fffffe          BL       wpa_printf
0000a4  f04f30ff          MOV      r0,#0xffffffff        ;1115
0000a8  e7bc              B        |L6.36|
                  |L6.170|
0000aa  bf00              NOP                            ;1108
0000ac  2100              MOVS     r1,#0                 ;1118
0000ae  4638              MOV      r0,r7                 ;1118
0000b0  f7fffffe          BL       wpabuf_put
0000b4  1b46              SUBS     r6,r0,r5              ;1118
0000b6  bf00              NOP                            ;1119
0000b8  0a30              LSRS     r0,r6,#8              ;1119
0000ba  70a8              STRB     r0,[r5,#2]            ;1119
0000bc  70ee              STRB     r6,[r5,#3]            ;1119
0000be  bf00              NOP                            ;1119
0000c0  2000              MOVS     r0,#0                 ;1120
0000c2  e7af              B        |L6.36|
;;;1122   
                          ENDP

                  |L6.196|
0000c4  494b4556          DCB      "IKEV2: Adding Notification payload",0
0000c8  323a2041
0000cc  6464696e
0000d0  67204e6f
0000d4  74696669
0000d8  63617469
0000dc  6f6e2070
0000e0  61796c6f
0000e4  616400  
0000e7  00                DCB      0
                  |L6.232|
0000e8  494b4556          DCB      "IKEV2: No Notify Message Type available",0
0000ec  323a204e
0000f0  6f204e6f
0000f4  74696679
0000f8  204d6573
0000fc  73616765
000100  20547970
000104  65206176
000108  61696c61
00010c  626c6500
                  |L6.272|
                          DCD      ||.constdata||+0x98
                  |L6.276|
000114  494b4556          DCB      "IKEV2: INVALID_KE_PAYLOAD - request DH Group #%d",0
000118  323a2049
00011c  4e56414c
000120  49445f4b
000124  455f5041
000128  594c4f41
00012c  44202d20
000130  72657175
000134  65737420
000138  44482047
00013c  726f7570
000140  20232564
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
                  |L6.328|
000148  494b4556          DCB      "IKEV2: Unsupported Notify Message Type %d",0
00014c  323a2055
000150  6e737570
000154  706f7274
000158  6564204e
00015c  6f746966
000160  79204d65
000164  73736167
000168  65205479
00016c  70652025
000170  6400    
000172  00                DCB      0
000173  00                DCB      0

                          AREA ||i.ikev2_build_notify||, CODE, READONLY, ALIGN=2

                  ikev2_build_notify PROC
;;;1238   
;;;1239   static struct wpabuf * ikev2_build_notify(struct ikev2_responder_data *data)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1240   {
000002  4604              MOV      r4,r0
;;;1241   	struct wpabuf *msg;
;;;1242   
;;;1243   	msg = wpabuf_alloc(sizeof(struct ikev2_hdr) + 1000);
000004  f2404004          MOV      r0,#0x404
000008  f7fffffe          BL       wpabuf_alloc
00000c  4605              MOV      r5,r0
;;;1244   	if (msg == NULL)
00000e  b90d              CBNZ     r5,|L7.20|
;;;1245   		return NULL;
000010  2000              MOVS     r0,#0
                  |L7.18|
;;;1246   	if (data->last_msg == LAST_MSG_SA_AUTH) {
;;;1247   		/* HDR, SK{N} */
;;;1248   		struct wpabuf *plain = wpabuf_alloc(100);
;;;1249   		if (plain == NULL) {
;;;1250   			wpabuf_free(msg);
;;;1251   			return NULL;
;;;1252   		}
;;;1253   		ikev2_build_hdr(data, msg, IKE_SA_AUTH,
;;;1254   				IKEV2_PAYLOAD_ENCRYPTED, 1);
;;;1255   		if (ikev2_build_notification(data, plain,
;;;1256   					     IKEV2_PAYLOAD_NO_NEXT_PAYLOAD) ||
;;;1257   		    ikev2_build_encrypted(data->proposal.encr,
;;;1258   					  data->proposal.integ,
;;;1259   					  &data->keys, 0, msg, plain,
;;;1260   					  IKEV2_PAYLOAD_NOTIFICATION)) {
;;;1261   			wpabuf_free(plain);
;;;1262   			wpabuf_free(msg);
;;;1263   			return NULL;
;;;1264   		}
;;;1265   		data->state = IKEV2_FAILED;
;;;1266   	} else {
;;;1267   		/* HDR, N */
;;;1268   		ikev2_build_hdr(data, msg, IKE_SA_INIT,
;;;1269   				IKEV2_PAYLOAD_NOTIFICATION, 0);
;;;1270   		if (ikev2_build_notification(data, msg,
;;;1271   					     IKEV2_PAYLOAD_NO_NEXT_PAYLOAD)) {
;;;1272   			wpabuf_free(msg);
;;;1273   			return NULL;
;;;1274   		}
;;;1275   		data->state = SA_INIT;
;;;1276   	}
;;;1277   
;;;1278   	ikev2_update_hdr(msg);
;;;1279   
;;;1280   	wpa_hexdump_buf(MSG_MSGDUMP, "IKEV2: Sending message (Notification)",
;;;1281   			msg);
;;;1282   
;;;1283   	return msg;
;;;1284   }
000012  bdfe              POP      {r1-r7,pc}
                  |L7.20|
000014  f894029a          LDRB     r0,[r4,#0x29a]        ;1246
000018  2801              CMP      r0,#1                 ;1246
00001a  d132              BNE      |L7.130|
00001c  2064              MOVS     r0,#0x64              ;1248
00001e  f7fffffe          BL       wpabuf_alloc
000022  4606              MOV      r6,r0                 ;1248
000024  b926              CBNZ     r6,|L7.48|
000026  4628              MOV      r0,r5                 ;1250
000028  f7fffffe          BL       wpabuf_free
00002c  2000              MOVS     r0,#0                 ;1251
00002e  e7f0              B        |L7.18|
                  |L7.48|
000030  2301              MOVS     r3,#1                 ;1253
000032  9300              STR      r3,[sp,#0]            ;1253
000034  232e              MOVS     r3,#0x2e              ;1253
000036  2223              MOVS     r2,#0x23              ;1253
000038  4629              MOV      r1,r5                 ;1253
00003a  4620              MOV      r0,r4                 ;1253
00003c  f7fffffe          BL       ikev2_build_hdr
000040  2200              MOVS     r2,#0                 ;1255
000042  4631              MOV      r1,r6                 ;1255
000044  4620              MOV      r0,r4                 ;1255
000046  f7fffffe          BL       ikev2_build_notification
00004a  b978              CBNZ     r0,|L7.108|
00004c  2329              MOVS     r3,#0x29              ;1257
00004e  f44f720a          MOV      r2,#0x228             ;1257
000052  e9cd5600          STRD     r5,r6,[sp,#0]         ;1257
000056  9302              STR      r3,[sp,#8]            ;1257
000058  5911              LDR      r1,[r2,r4]            ;1257
00005a  f44f720c          MOV      r2,#0x230             ;1257
00005e  5910              LDR      r0,[r2,r4]            ;1257
000060  2300              MOVS     r3,#0                 ;1257
000062  f504720f          ADD      r2,r4,#0x23c          ;1257
000066  f7fffffe          BL       ikev2_build_encrypted
00006a  b138              CBZ      r0,|L7.124|
                  |L7.108|
00006c  4630              MOV      r0,r6                 ;1261
00006e  f7fffffe          BL       wpabuf_free
000072  4628              MOV      r0,r5                 ;1262
000074  f7fffffe          BL       wpabuf_free
000078  2000              MOVS     r0,#0                 ;1263
00007a  e7ca              B        |L7.18|
                  |L7.124|
00007c  2005              MOVS     r0,#5                 ;1265
00007e  7020              STRB     r0,[r4,#0]            ;1265
000080  e014              B        |L7.172|
                  |L7.130|
000082  2300              MOVS     r3,#0                 ;1268
000084  9300              STR      r3,[sp,#0]            ;1268
000086  2329              MOVS     r3,#0x29              ;1268
000088  2222              MOVS     r2,#0x22              ;1268
00008a  4629              MOV      r1,r5                 ;1268
00008c  4620              MOV      r0,r4                 ;1268
00008e  f7fffffe          BL       ikev2_build_hdr
000092  2200              MOVS     r2,#0                 ;1270
000094  4629              MOV      r1,r5                 ;1270
000096  4620              MOV      r0,r4                 ;1270
000098  f7fffffe          BL       ikev2_build_notification
00009c  b120              CBZ      r0,|L7.168|
00009e  4628              MOV      r0,r5                 ;1272
0000a0  f7fffffe          BL       wpabuf_free
0000a4  2000              MOVS     r0,#0                 ;1273
0000a6  e7b4              B        |L7.18|
                  |L7.168|
0000a8  2000              MOVS     r0,#0                 ;1275
0000aa  7020              STRB     r0,[r4,#0]            ;1275
                  |L7.172|
0000ac  4628              MOV      r0,r5                 ;1278
0000ae  f7fffffe          BL       ikev2_update_hdr
0000b2  462a              MOV      r2,r5                 ;1280
0000b4  a102              ADR      r1,|L7.192|
0000b6  2000              MOVS     r0,#0                 ;1280
0000b8  f7fffffe          BL       wpa_hexdump_buf
0000bc  4628              MOV      r0,r5                 ;1283
0000be  e7a8              B        |L7.18|
;;;1285   
                          ENDP

                  |L7.192|
0000c0  494b4556          DCB      "IKEV2: Sending message (Notification)",0
0000c4  323a2053
0000c8  656e6469
0000cc  6e67206d
0000d0  65737361
0000d4  67652028
0000d8  4e6f7469
0000dc  66696361
0000e0  74696f6e
0000e4  2900    
0000e6  00                DCB      0
0000e7  00                DCB      0

                          AREA ||i.ikev2_build_nr||, CODE, READONLY, ALIGN=2

                  ikev2_build_nr PROC
;;;986    
;;;987    static int ikev2_build_nr(struct ikev2_responder_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;988    			  struct wpabuf *msg, u8 next_payload)
;;;989    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;990    	struct ikev2_payload_hdr *phdr;
;;;991    	size_t plen;
;;;992    
;;;993    	wpa_printf(MSG_DEBUG, "IKEV2: Adding Nr payload");
00000a  a110              ADR      r1,|L8.76|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       wpa_printf
;;;994    
;;;995    	/* Nr - RFC 4306, Sect. 3.9 */
;;;996    	phdr = wpabuf_put(msg, sizeof(*phdr));
000012  2104              MOVS     r1,#4
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       wpabuf_put
00001a  4604              MOV      r4,r0
;;;997    	phdr->next_payload = next_payload;
00001c  f8848000          STRB     r8,[r4,#0]
;;;998    	phdr->flags = 0;
000020  2000              MOVS     r0,#0
000022  7060              STRB     r0,[r4,#1]
;;;999    	wpabuf_put_data(msg, data->r_nonce, data->r_nonce_len);
000024  f505718c          ADD      r1,r5,#0x118
000028  4638              MOV      r0,r7
00002a  f8d52218          LDR      r2,[r5,#0x218]
00002e  f7fffffe          BL       wpabuf_put_data
;;;1000   	plen = (u8 *) wpabuf_put(msg, 0) - (u8 *) phdr;
000032  2100              MOVS     r1,#0
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       wpabuf_put
00003a  1b06              SUBS     r6,r0,r4
;;;1001   	WPA_PUT_BE16(phdr->payload_length, plen);
00003c  bf00              NOP      
00003e  0a30              LSRS     r0,r6,#8
000040  70a0              STRB     r0,[r4,#2]
000042  70e6              STRB     r6,[r4,#3]
000044  bf00              NOP      
;;;1002   	return 0;
000046  2000              MOVS     r0,#0
;;;1003   }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;1004   
                          ENDP

                  |L8.76|
00004c  494b4556          DCB      "IKEV2: Adding Nr payload",0
000050  323a2041
000054  6464696e
000058  67204e72
00005c  20706179
000060  6c6f6164
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0

                          AREA ||i.ikev2_build_sa_auth||, CODE, READONLY, ALIGN=2

                  ikev2_build_sa_auth PROC
;;;1202   
;;;1203   static struct wpabuf * ikev2_build_sa_auth(struct ikev2_responder_data *data)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1204   {
000002  4604              MOV      r4,r0
;;;1205   	struct wpabuf *msg, *plain;
;;;1206   
;;;1207   	/* build IKE_SA_AUTH: HDR, SK {IDr, [CERT,] AUTH} */
;;;1208   
;;;1209   	msg = wpabuf_alloc(sizeof(struct ikev2_hdr) + data->IDr_len + 1000);
000004  f8d41278          LDR      r1,[r4,#0x278]
000008  f2014004          ADD      r0,r1,#0x404
00000c  f7fffffe          BL       wpabuf_alloc
000010  4606              MOV      r6,r0
;;;1210   	if (msg == NULL)
000012  b90e              CBNZ     r6,|L9.24|
;;;1211   		return NULL;
000014  2000              MOVS     r0,#0
                  |L9.22|
;;;1212   	ikev2_build_hdr(data, msg, IKE_SA_AUTH, IKEV2_PAYLOAD_ENCRYPTED, 1);
;;;1213   
;;;1214   	plain = wpabuf_alloc(data->IDr_len + 1000);
;;;1215   	if (plain == NULL) {
;;;1216   		wpabuf_free(msg);
;;;1217   		return NULL;
;;;1218   	}
;;;1219   
;;;1220   	if (ikev2_build_idr(data, plain, IKEV2_PAYLOAD_AUTHENTICATION) ||
;;;1221   	    ikev2_build_auth(data, plain, IKEV2_PAYLOAD_NO_NEXT_PAYLOAD) ||
;;;1222   	    ikev2_build_encrypted(data->proposal.encr, data->proposal.integ,
;;;1223   				  &data->keys, 0, msg, plain,
;;;1224   				  IKEV2_PAYLOAD_IDr)) {
;;;1225   		wpabuf_free(plain);
;;;1226   		wpabuf_free(msg);
;;;1227   		return NULL;
;;;1228   	}
;;;1229   	wpabuf_free(plain);
;;;1230   
;;;1231   	wpa_hexdump_buf(MSG_MSGDUMP, "IKEV2: Sending message (SA_AUTH)", msg);
;;;1232   
;;;1233   	data->state = IKEV2_DONE;
;;;1234   
;;;1235   	return msg;
;;;1236   }
000016  bdfe              POP      {r1-r7,pc}
                  |L9.24|
000018  2301              MOVS     r3,#1                 ;1212
00001a  9300              STR      r3,[sp,#0]            ;1212
00001c  232e              MOVS     r3,#0x2e              ;1212
00001e  2223              MOVS     r2,#0x23              ;1212
000020  4631              MOV      r1,r6                 ;1212
000022  4620              MOV      r0,r4                 ;1212
000024  f7fffffe          BL       ikev2_build_hdr
000028  f8d41278          LDR      r1,[r4,#0x278]        ;1214
00002c  f501707a          ADD      r0,r1,#0x3e8          ;1214
000030  f7fffffe          BL       wpabuf_alloc
000034  4605              MOV      r5,r0                 ;1214
000036  b925              CBNZ     r5,|L9.66|
000038  4630              MOV      r0,r6                 ;1216
00003a  f7fffffe          BL       wpabuf_free
00003e  2000              MOVS     r0,#0                 ;1217
000040  e7e9              B        |L9.22|
                  |L9.66|
000042  2227              MOVS     r2,#0x27              ;1220
000044  4629              MOV      r1,r5                 ;1220
000046  4620              MOV      r0,r4                 ;1220
000048  f7fffffe          BL       ikev2_build_idr
00004c  b9a8              CBNZ     r0,|L9.122|
00004e  2200              MOVS     r2,#0                 ;1221
000050  4629              MOV      r1,r5                 ;1221
000052  4620              MOV      r0,r4                 ;1221
000054  f7fffffe          BL       ikev2_build_auth
000058  b978              CBNZ     r0,|L9.122|
00005a  2324              MOVS     r3,#0x24              ;1222
00005c  f44f720a          MOV      r2,#0x228             ;1222
000060  e9cd6500          STRD     r6,r5,[sp,#0]         ;1222
000064  9302              STR      r3,[sp,#8]            ;1222
000066  5911              LDR      r1,[r2,r4]            ;1222
000068  f44f720c          MOV      r2,#0x230             ;1222
00006c  5910              LDR      r0,[r2,r4]            ;1222
00006e  2300              MOVS     r3,#0                 ;1222
000070  f504720f          ADD      r2,r4,#0x23c          ;1222
000074  f7fffffe          BL       ikev2_build_encrypted
000078  b138              CBZ      r0,|L9.138|
                  |L9.122|
00007a  4628              MOV      r0,r5                 ;1225
00007c  f7fffffe          BL       wpabuf_free
000080  4630              MOV      r0,r6                 ;1226
000082  f7fffffe          BL       wpabuf_free
000086  2000              MOVS     r0,#0                 ;1227
000088  e7c5              B        |L9.22|
                  |L9.138|
00008a  4628              MOV      r0,r5                 ;1229
00008c  f7fffffe          BL       wpabuf_free
000090  4632              MOV      r2,r6                 ;1231
000092  a104              ADR      r1,|L9.164|
000094  2000              MOVS     r0,#0                 ;1231
000096  f7fffffe          BL       wpa_hexdump_buf
00009a  2004              MOVS     r0,#4                 ;1233
00009c  7020              STRB     r0,[r4,#0]            ;1233
00009e  4630              MOV      r0,r6                 ;1235
0000a0  e7b9              B        |L9.22|
;;;1237   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L9.164|
0000a4  494b4556          DCB      "IKEV2: Sending message (SA_AUTH)",0
0000a8  323a2053
0000ac  656e6469
0000b0  6e67206d
0000b4  65737361
0000b8  67652028
0000bc  53415f41
0000c0  55544829
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||i.ikev2_build_sa_init||, CODE, READONLY, ALIGN=2

                  ikev2_build_sa_init PROC
;;;1123   
;;;1124   static struct wpabuf * ikev2_build_sa_init(struct ikev2_responder_data *data)
000000  b5fe              PUSH     {r1-r7,lr}
;;;1125   {
000002  4604              MOV      r4,r0
;;;1126   	struct wpabuf *msg;
;;;1127   
;;;1128   	/* build IKE_SA_INIT: HDR, SAr1, KEr, Nr, [CERTREQ], [SK{IDr}] */
;;;1129   
;;;1130   	if (os_get_random(data->r_spi, IKEV2_SPI_LEN))
000004  2108              MOVS     r1,#8
000006  f1040009          ADD      r0,r4,#9
00000a  f7fffffe          BL       os_get_random
00000e  b108              CBZ      r0,|L10.20|
;;;1131   		return NULL;
000010  2000              MOVS     r0,#0
                  |L10.18|
;;;1132   	wpa_hexdump(MSG_DEBUG, "IKEV2: IKE_SA Responder's SPI",
;;;1133   		    data->r_spi, IKEV2_SPI_LEN);
;;;1134   
;;;1135   	data->r_nonce_len = IKEV2_NONCE_MIN_LEN;
;;;1136   	if (os_get_random(data->r_nonce, data->r_nonce_len))
;;;1137   		return NULL;
;;;1138   #ifdef CCNS_PL
;;;1139   	/* Zeros are removed incorrectly from the beginning of the nonces in
;;;1140   	 * key derivation; as a workaround, make sure Nr does not start with
;;;1141   	 * zero.. */
;;;1142   	if (data->r_nonce[0] == 0)
;;;1143   		data->r_nonce[0] = 1;
;;;1144   #endif /* CCNS_PL */
;;;1145   	wpa_hexdump(MSG_DEBUG, "IKEV2: Nr", data->r_nonce, data->r_nonce_len);
;;;1146   
;;;1147   	msg = wpabuf_alloc(sizeof(struct ikev2_hdr) + data->IDr_len + 1500);
;;;1148   	if (msg == NULL)
;;;1149   		return NULL;
;;;1150   
;;;1151   	ikev2_build_hdr(data, msg, IKE_SA_INIT, IKEV2_PAYLOAD_SA, 0);
;;;1152   	if (ikev2_build_sar1(data, msg, IKEV2_PAYLOAD_KEY_EXCHANGE) ||
;;;1153   	    ikev2_build_ker(data, msg, IKEV2_PAYLOAD_NONCE) ||
;;;1154   	    ikev2_build_nr(data, msg, data->peer_auth == PEER_AUTH_SECRET ?
;;;1155   			   IKEV2_PAYLOAD_ENCRYPTED :
;;;1156   			   IKEV2_PAYLOAD_NO_NEXT_PAYLOAD)) {
;;;1157   		wpabuf_free(msg);
;;;1158   		return NULL;
;;;1159   	}
;;;1160   
;;;1161   	if (ikev2_derive_keys(data)) {
;;;1162   		wpabuf_free(msg);
;;;1163   		return NULL;
;;;1164   	}
;;;1165   
;;;1166   	if (data->peer_auth == PEER_AUTH_CERT) {
;;;1167   		/* TODO: CERTREQ with SHA-1 hashes of Subject Public Key Info
;;;1168   		 * for trust agents */
;;;1169   	}
;;;1170   
;;;1171   	if (data->peer_auth == PEER_AUTH_SECRET) {
;;;1172   		struct wpabuf *plain = wpabuf_alloc(data->IDr_len + 1000);
;;;1173   		if (plain == NULL) {
;;;1174   			wpabuf_free(msg);
;;;1175   			return NULL;
;;;1176   		}
;;;1177   		if (ikev2_build_idr(data, plain,
;;;1178   				    IKEV2_PAYLOAD_NO_NEXT_PAYLOAD) ||
;;;1179   		    ikev2_build_encrypted(data->proposal.encr,
;;;1180   					  data->proposal.integ,
;;;1181   					  &data->keys, 0, msg, plain,
;;;1182   					  IKEV2_PAYLOAD_IDr)) {
;;;1183   			wpabuf_free(plain);
;;;1184   			wpabuf_free(msg);
;;;1185   			return NULL;
;;;1186   		}
;;;1187   		wpabuf_free(plain);
;;;1188   	}
;;;1189   
;;;1190   	ikev2_update_hdr(msg);
;;;1191   
;;;1192   	wpa_hexdump_buf(MSG_MSGDUMP, "IKEV2: Sending message (SA_INIT)", msg);
;;;1193   
;;;1194   	data->state = SA_AUTH;
;;;1195   
;;;1196   	wpabuf_free(data->r_sign_msg);
;;;1197   	data->r_sign_msg = wpabuf_dup(msg);
;;;1198   
;;;1199   	return msg;
;;;1200   }
000012  bdfe              POP      {r1-r7,pc}
                  |L10.20|
000014  2308              MOVS     r3,#8                 ;1132
000016  f1040209          ADD      r2,r4,#9              ;1132
00001a  a14c              ADR      r1,|L10.332|
00001c  2000              MOVS     r0,#0                 ;1132
00001e  f7fffffe          BL       wpa_hexdump
000022  2010              MOVS     r0,#0x10              ;1135
000024  f8c40218          STR      r0,[r4,#0x218]        ;1135
000028  f504708c          ADD      r0,r4,#0x118          ;1136
00002c  f8d41218          LDR      r1,[r4,#0x218]        ;1136
000030  f7fffffe          BL       os_get_random
000034  b108              CBZ      r0,|L10.58|
000036  2000              MOVS     r0,#0                 ;1137
000038  e7eb              B        |L10.18|
                  |L10.58|
00003a  f504728c          ADD      r2,r4,#0x118          ;1145
00003e  a14b              ADR      r1,|L10.364|
000040  2000              MOVS     r0,#0                 ;1145
000042  f8d43218          LDR      r3,[r4,#0x218]        ;1145
000046  f7fffffe          BL       wpa_hexdump
00004a  f8d41278          LDR      r1,[r4,#0x278]        ;1147
00004e  f50160bf          ADD      r0,r1,#0x5f8          ;1147
000052  f7fffffe          BL       wpabuf_alloc
000056  4605              MOV      r5,r0                 ;1147
000058  b90d              CBNZ     r5,|L10.94|
00005a  2000              MOVS     r0,#0                 ;1149
00005c  e7d9              B        |L10.18|
                  |L10.94|
00005e  2300              MOVS     r3,#0                 ;1151
000060  9300              STR      r3,[sp,#0]            ;1151
000062  2321              MOVS     r3,#0x21              ;1151
000064  2222              MOVS     r2,#0x22              ;1151
000066  4629              MOV      r1,r5                 ;1151
000068  4620              MOV      r0,r4                 ;1151
00006a  f7fffffe          BL       ikev2_build_hdr
00006e  2222              MOVS     r2,#0x22              ;1152
000070  4629              MOV      r1,r5                 ;1152
000072  4620              MOV      r0,r4                 ;1152
000074  f7fffffe          BL       ikev2_build_sar1
000078  b990              CBNZ     r0,|L10.160|
00007a  2228              MOVS     r2,#0x28              ;1153
00007c  4629              MOV      r1,r5                 ;1153
00007e  4620              MOV      r0,r4                 ;1153
000080  f7fffffe          BL       ikev2_build_ker
000084  b960              CBNZ     r0,|L10.160|
000086  f894028c          LDRB     r0,[r4,#0x28c]        ;1154
00008a  2801              CMP      r0,#1                 ;1154
00008c  d101              BNE      |L10.146|
00008e  202e              MOVS     r0,#0x2e              ;1155
000090  e000              B        |L10.148|
                  |L10.146|
000092  2000              MOVS     r0,#0                 ;1156
                  |L10.148|
000094  b2c2              UXTB     r2,r0                 ;1156
000096  4629              MOV      r1,r5                 ;1156
000098  4620              MOV      r0,r4                 ;1156
00009a  f7fffffe          BL       ikev2_build_nr
00009e  b120              CBZ      r0,|L10.170|
                  |L10.160|
0000a0  4628              MOV      r0,r5                 ;1157
0000a2  f7fffffe          BL       wpabuf_free
0000a6  2000              MOVS     r0,#0                 ;1158
0000a8  e7b3              B        |L10.18|
                  |L10.170|
0000aa  4620              MOV      r0,r4                 ;1161
0000ac  f7fffffe          BL       ikev2_derive_keys
0000b0  b120              CBZ      r0,|L10.188|
0000b2  4628              MOV      r0,r5                 ;1162
0000b4  f7fffffe          BL       wpabuf_free
0000b8  2000              MOVS     r0,#0                 ;1163
0000ba  e7aa              B        |L10.18|
                  |L10.188|
0000bc  f894028c          LDRB     r0,[r4,#0x28c]        ;1171
0000c0  2801              CMP      r0,#1                 ;1171
0000c2  d12e              BNE      |L10.290|
0000c4  f8d41278          LDR      r1,[r4,#0x278]        ;1172
0000c8  f501707a          ADD      r0,r1,#0x3e8          ;1172
0000cc  f7fffffe          BL       wpabuf_alloc
0000d0  4606              MOV      r6,r0                 ;1172
0000d2  b926              CBNZ     r6,|L10.222|
0000d4  4628              MOV      r0,r5                 ;1174
0000d6  f7fffffe          BL       wpabuf_free
0000da  2000              MOVS     r0,#0                 ;1175
0000dc  e799              B        |L10.18|
                  |L10.222|
0000de  2200              MOVS     r2,#0                 ;1177
0000e0  4631              MOV      r1,r6                 ;1177
0000e2  4620              MOV      r0,r4                 ;1177
0000e4  f7fffffe          BL       ikev2_build_idr
0000e8  b978              CBNZ     r0,|L10.266|
0000ea  2324              MOVS     r3,#0x24              ;1179
0000ec  f44f720a          MOV      r2,#0x228             ;1179
0000f0  e9cd5600          STRD     r5,r6,[sp,#0]         ;1179
0000f4  9302              STR      r3,[sp,#8]            ;1179
0000f6  5911              LDR      r1,[r2,r4]            ;1179
0000f8  f44f720c          MOV      r2,#0x230             ;1179
0000fc  5910              LDR      r0,[r2,r4]            ;1179
0000fe  2300              MOVS     r3,#0                 ;1179
000100  f504720f          ADD      r2,r4,#0x23c          ;1179
000104  f7fffffe          BL       ikev2_build_encrypted
000108  b138              CBZ      r0,|L10.282|
                  |L10.266|
00010a  4630              MOV      r0,r6                 ;1183
00010c  f7fffffe          BL       wpabuf_free
000110  4628              MOV      r0,r5                 ;1184
000112  f7fffffe          BL       wpabuf_free
000116  2000              MOVS     r0,#0                 ;1185
000118  e77b              B        |L10.18|
                  |L10.282|
00011a  4630              MOV      r0,r6                 ;1187
00011c  f7fffffe          BL       wpabuf_free
000120  bf00              NOP                            ;1188
                  |L10.290|
000122  4628              MOV      r0,r5                 ;1190
000124  f7fffffe          BL       ikev2_update_hdr
000128  462a              MOV      r2,r5                 ;1192
00012a  a113              ADR      r1,|L10.376|
00012c  2000              MOVS     r0,#0                 ;1192
00012e  f7fffffe          BL       wpa_hexdump_buf
000132  2001              MOVS     r0,#1                 ;1194
000134  7020              STRB     r0,[r4,#0]            ;1194
000136  f8d4027c          LDR      r0,[r4,#0x27c]        ;1196
00013a  f7fffffe          BL       wpabuf_free
00013e  4628              MOV      r0,r5                 ;1197
000140  f7fffffe          BL       wpabuf_dup
000144  f8c4027c          STR      r0,[r4,#0x27c]        ;1197
000148  4628              MOV      r0,r5                 ;1199
00014a  e762              B        |L10.18|
;;;1201   
                          ENDP

                  |L10.332|
00014c  494b4556          DCB      "IKEV2: IKE_SA Responder's SPI",0
000150  323a2049
000154  4b455f53
000158  41205265
00015c  73706f6e
000160  64657227
000164  73205350
000168  4900    
00016a  00                DCB      0
00016b  00                DCB      0
                  |L10.364|
00016c  494b4556          DCB      "IKEV2: Nr",0
000170  323a204e
000174  7200    
000176  00                DCB      0
000177  00                DCB      0
                  |L10.376|
000178  494b4556          DCB      "IKEV2: Sending message (SA_INIT)",0
00017c  323a2053
000180  656e6469
000184  6e67206d
000188  65737361
00018c  67652028
000190  53415f49
000194  4e495429
000198  00      
000199  00                DCB      0
00019a  00                DCB      0
00019b  00                DCB      0

                          AREA ||i.ikev2_build_sar1||, CODE, READONLY, ALIGN=2

                  ikev2_build_sar1 PROC
;;;878    
;;;879    static int ikev2_build_sar1(struct ikev2_responder_data *data,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;880    			    struct wpabuf *msg, u8 next_payload)
;;;881    {
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
;;;882    	struct ikev2_payload_hdr *phdr;
;;;883    	size_t plen;
;;;884    	struct ikev2_proposal *p;
;;;885    	struct ikev2_transform *t;
;;;886    
;;;887    	wpa_printf(MSG_DEBUG, "IKEV2: Adding SAr1 payload");
00000a  a155              ADR      r1,|L11.352|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       wpa_printf
;;;888    
;;;889    	/* SAr1 - RFC 4306, Sect. 2.7 and 3.3 */
;;;890    	phdr = wpabuf_put(msg, sizeof(*phdr));
000012  2104              MOVS     r1,#4
000014  4648              MOV      r0,r9
000016  f7fffffe          BL       wpabuf_put
00001a  4680              MOV      r8,r0
;;;891    	phdr->next_payload = next_payload;
00001c  f888a000          STRB     r10,[r8,#0]
;;;892    	phdr->flags = 0;
000020  2000              MOVS     r0,#0
000022  f8880001          STRB     r0,[r8,#1]
;;;893    
;;;894    	p = wpabuf_put(msg, sizeof(*p));
000026  2108              MOVS     r1,#8
000028  4648              MOV      r0,r9
00002a  f7fffffe          BL       wpabuf_put
00002e  4607              MOV      r7,r0
;;;895    #ifdef CCNS_PL
;;;896    	/* Seems to require that the Proposal # is 1 even though RFC 4306
;;;897    	 * Sect 3.3.1 has following requirement "When a proposal is accepted,
;;;898    	 * all of the proposal numbers in the SA payload MUST be the same and
;;;899    	 * MUST match the number on the proposal sent that was accepted.".
;;;900    	 */
;;;901    	p->proposal_num = 1;
;;;902    #else /* CCNS_PL */
;;;903    	p->proposal_num = data->proposal.proposal_num;
000030  f8950224          LDRB     r0,[r5,#0x224]
000034  7138              STRB     r0,[r7,#4]
;;;904    #endif /* CCNS_PL */
;;;905    	p->protocol_id = IKEV2_PROTOCOL_IKE;
000036  2001              MOVS     r0,#1
000038  7178              STRB     r0,[r7,#5]
;;;906    	p->num_transforms = 4;
00003a  2004              MOVS     r0,#4
00003c  71f8              STRB     r0,[r7,#7]
;;;907    
;;;908    	t = wpabuf_put(msg, sizeof(*t));
00003e  2108              MOVS     r1,#8
000040  4648              MOV      r0,r9
000042  f7fffffe          BL       wpabuf_put
000046  4604              MOV      r4,r0
;;;909    	t->type = 3;
000048  2003              MOVS     r0,#3
00004a  7020              STRB     r0,[r4,#0]
;;;910    	t->transform_type = IKEV2_TRANSFORM_ENCR;
00004c  2001              MOVS     r0,#1
00004e  7120              STRB     r0,[r4,#4]
;;;911    	WPA_PUT_BE16(t->transform_id, data->proposal.encr);
000050  bf00              NOP      
000052  f44f700c          MOV      r0,#0x230
000056  5940              LDR      r0,[r0,r5]
000058  0a00              LSRS     r0,r0,#8
00005a  71a0              STRB     r0,[r4,#6]
00005c  f44f700c          MOV      r0,#0x230
000060  5940              LDR      r0,[r0,r5]
000062  71e0              STRB     r0,[r4,#7]
000064  bf00              NOP      
;;;912    	if (data->proposal.encr == ENCR_AES_CBC) {
000066  f44f700c          MOV      r0,#0x230
00006a  5940              LDR      r0,[r0,r5]
00006c  280c              CMP      r0,#0xc
00006e  d108              BNE      |L11.130|
;;;913    		/* Transform Attribute: Key Len = 128 bits */
;;;914    #ifdef CCNS_PL
;;;915    		wpabuf_put_be16(msg, 0x001d); /* ?? */
;;;916    #else /* CCNS_PL */
;;;917    		wpabuf_put_be16(msg, 0x800e); /* AF=1, AttrType=14 */
000070  f248010e          MOV      r1,#0x800e
000074  4648              MOV      r0,r9
000076  f7fffffe          BL       wpabuf_put_be16
;;;918    #endif /* CCNS_PL */
;;;919    		wpabuf_put_be16(msg, 128); /* 128-bit key */
00007a  2180              MOVS     r1,#0x80
00007c  4648              MOV      r0,r9
00007e  f7fffffe          BL       wpabuf_put_be16
                  |L11.130|
;;;920    	}
;;;921    	plen = (u8 *) wpabuf_put(msg, 0) - (u8 *) t;
000082  2100              MOVS     r1,#0
000084  4648              MOV      r0,r9
000086  f7fffffe          BL       wpabuf_put
00008a  1b06              SUBS     r6,r0,r4
;;;922    	WPA_PUT_BE16(t->transform_length, plen);
00008c  bf00              NOP      
00008e  0a30              LSRS     r0,r6,#8
000090  70a0              STRB     r0,[r4,#2]
000092  70e6              STRB     r6,[r4,#3]
000094  bf00              NOP      
;;;923    
;;;924    	t = wpabuf_put(msg, sizeof(*t));
000096  2108              MOVS     r1,#8
000098  4648              MOV      r0,r9
00009a  f7fffffe          BL       wpabuf_put
00009e  4604              MOV      r4,r0
;;;925    	t->type = 3;
0000a0  2003              MOVS     r0,#3
0000a2  7020              STRB     r0,[r4,#0]
;;;926    	WPA_PUT_BE16(t->transform_length, sizeof(*t));
0000a4  bf00              NOP      
0000a6  2000              MOVS     r0,#0
0000a8  70a0              STRB     r0,[r4,#2]
0000aa  2108              MOVS     r1,#8
0000ac  70e1              STRB     r1,[r4,#3]
0000ae  bf00              NOP      
;;;927    	t->transform_type = IKEV2_TRANSFORM_PRF;
0000b0  2002              MOVS     r0,#2
0000b2  7120              STRB     r0,[r4,#4]
;;;928    	WPA_PUT_BE16(t->transform_id, data->proposal.prf);
0000b4  bf00              NOP      
0000b6  f44f700b          MOV      r0,#0x22c
0000ba  5940              LDR      r0,[r0,r5]
0000bc  0a00              LSRS     r0,r0,#8
0000be  71a0              STRB     r0,[r4,#6]
0000c0  f44f700b          MOV      r0,#0x22c
0000c4  5940              LDR      r0,[r0,r5]
0000c6  71e0              STRB     r0,[r4,#7]
0000c8  bf00              NOP      
;;;929    
;;;930    	t = wpabuf_put(msg, sizeof(*t));
0000ca  4648              MOV      r0,r9
0000cc  f7fffffe          BL       wpabuf_put
0000d0  4604              MOV      r4,r0
;;;931    	t->type = 3;
0000d2  2003              MOVS     r0,#3
0000d4  7020              STRB     r0,[r4,#0]
;;;932    	WPA_PUT_BE16(t->transform_length, sizeof(*t));
0000d6  bf00              NOP      
0000d8  2000              MOVS     r0,#0
0000da  70a0              STRB     r0,[r4,#2]
0000dc  2108              MOVS     r1,#8
0000de  70e1              STRB     r1,[r4,#3]
0000e0  bf00              NOP      
;;;933    	t->transform_type = IKEV2_TRANSFORM_INTEG;
0000e2  2003              MOVS     r0,#3
0000e4  7120              STRB     r0,[r4,#4]
;;;934    	WPA_PUT_BE16(t->transform_id, data->proposal.integ);
0000e6  bf00              NOP      
0000e8  f44f700a          MOV      r0,#0x228
0000ec  5940              LDR      r0,[r0,r5]
0000ee  0a00              LSRS     r0,r0,#8
0000f0  71a0              STRB     r0,[r4,#6]
0000f2  f44f700a          MOV      r0,#0x228
0000f6  5940              LDR      r0,[r0,r5]
0000f8  71e0              STRB     r0,[r4,#7]
0000fa  bf00              NOP      
;;;935    
;;;936    	t = wpabuf_put(msg, sizeof(*t));
0000fc  4648              MOV      r0,r9
0000fe  f7fffffe          BL       wpabuf_put
000102  4604              MOV      r4,r0
;;;937    	WPA_PUT_BE16(t->transform_length, sizeof(*t));
000104  bf00              NOP      
000106  2000              MOVS     r0,#0
000108  70a0              STRB     r0,[r4,#2]
00010a  2108              MOVS     r1,#8
00010c  70e1              STRB     r1,[r4,#3]
00010e  bf00              NOP      
;;;938    	t->transform_type = IKEV2_TRANSFORM_DH;
000110  2004              MOVS     r0,#4
000112  7120              STRB     r0,[r4,#4]
;;;939    	WPA_PUT_BE16(t->transform_id, data->proposal.dh);
000114  bf00              NOP      
000116  f44f700d          MOV      r0,#0x234
00011a  5940              LDR      r0,[r0,r5]
00011c  0a00              LSRS     r0,r0,#8
00011e  71a0              STRB     r0,[r4,#6]
000120  f44f700d          MOV      r0,#0x234
000124  5940              LDR      r0,[r0,r5]
000126  71e0              STRB     r0,[r4,#7]
000128  bf00              NOP      
;;;940    
;;;941    	plen = (u8 *) wpabuf_put(msg, 0) - (u8 *) p;
00012a  2100              MOVS     r1,#0
00012c  4648              MOV      r0,r9
00012e  f7fffffe          BL       wpabuf_put
000132  1bc6              SUBS     r6,r0,r7
;;;942    	WPA_PUT_BE16(p->proposal_length, plen);
000134  bf00              NOP      
000136  0a30              LSRS     r0,r6,#8
000138  70b8              STRB     r0,[r7,#2]
00013a  70fe              STRB     r6,[r7,#3]
00013c  bf00              NOP      
;;;943    
;;;944    	plen = (u8 *) wpabuf_put(msg, 0) - (u8 *) phdr;
00013e  2100              MOVS     r1,#0
000140  4648              MOV      r0,r9
000142  f7fffffe          BL       wpabuf_put
000146  eba00608          SUB      r6,r0,r8
;;;945    	WPA_PUT_BE16(phdr->payload_length, plen);
00014a  bf00              NOP      
00014c  0a30              LSRS     r0,r6,#8
00014e  f8880002          STRB     r0,[r8,#2]
000152  f8886003          STRB     r6,[r8,#3]
000156  bf00              NOP      
;;;946    
;;;947    	return 0;
000158  2000              MOVS     r0,#0
;;;948    }
00015a  e8bd87f0          POP      {r4-r10,pc}
;;;949    
                          ENDP

00015e  0000              DCW      0x0000
                  |L11.352|
000160  494b4556          DCB      "IKEV2: Adding SAr1 payload",0
000164  323a2041
000168  6464696e
00016c  67205341
000170  72312070
000174  61796c6f
000178  616400  
00017b  00                DCB      0

                          AREA ||i.ikev2_derive_keys||, CODE, READONLY, ALIGN=2

                  ikev2_derive_keys PROC
;;;35     
;;;36     static int ikev2_derive_keys(struct ikev2_responder_data *data)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;37     {
000004  b08f              SUB      sp,sp,#0x3c
000006  4604              MOV      r4,r0
;;;38     	u8 *buf, *pos, *pad, skeyseed[IKEV2_MAX_HASH_LEN];
;;;39     	size_t buf_len, pad_len;
;;;40     	struct wpabuf *shared;
;;;41     	const struct ikev2_integ_alg *integ;
;;;42     	const struct ikev2_prf_alg *prf;
;;;43     	const struct ikev2_encr_alg *encr;
;;;44     	int ret;
;;;45     	const u8 *addr[2];
;;;46     	size_t len[2];
;;;47     
;;;48     	/* RFC 4306, Sect. 2.14 */
;;;49     
;;;50     	integ = ikev2_get_integ(data->proposal.integ);
000008  f44f710a          MOV      r1,#0x228
00000c  5908              LDR      r0,[r1,r4]
00000e  f7fffffe          BL       ikev2_get_integ
000012  9009              STR      r0,[sp,#0x24]
;;;51     	prf = ikev2_get_prf(data->proposal.prf);
000014  f44f710b          MOV      r1,#0x22c
000018  5908              LDR      r0,[r1,r4]
00001a  f7fffffe          BL       ikev2_get_prf
00001e  4680              MOV      r8,r0
;;;52     	encr = ikev2_get_encr(data->proposal.encr);
000020  f44f710c          MOV      r1,#0x230
000024  5908              LDR      r0,[r1,r4]
000026  f7fffffe          BL       ikev2_get_encr
00002a  9008              STR      r0,[sp,#0x20]
;;;53     	if (integ == NULL || prf == NULL || encr == NULL) {
00002c  9809              LDR      r0,[sp,#0x24]
00002e  b120              CBZ      r0,|L12.58|
000030  f1b80f00          CMP      r8,#0
000034  d001              BEQ      |L12.58|
000036  9808              LDR      r0,[sp,#0x20]
000038  b940              CBNZ     r0,|L12.76|
                  |L12.58|
;;;54     		wpa_printf(MSG_INFO, "IKEV2: Unsupported proposal");
00003a  a15d              ADR      r1,|L12.432|
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       wpa_printf
;;;55     		return -1;
000042  f04f30ff          MOV      r0,#0xffffffff
                  |L12.70|
;;;56     	}
;;;57     
;;;58     	shared = dh_derive_shared(data->i_dh_public, data->r_dh_private,
;;;59     				  data->dh);
;;;60     	if (shared == NULL)
;;;61     		return -1;
;;;62     
;;;63     	/* Construct Ni | Nr | SPIi | SPIr */
;;;64     
;;;65     	buf_len = data->i_nonce_len + data->r_nonce_len + 2 * IKEV2_SPI_LEN;
;;;66     	buf = os_malloc(buf_len);
;;;67     	if (buf == NULL) {
;;;68     		wpabuf_free(shared);
;;;69     		return -1;
;;;70     	}
;;;71     
;;;72     	pos = buf;
;;;73     	os_memcpy(pos, data->i_nonce, data->i_nonce_len);
;;;74     	pos += data->i_nonce_len;
;;;75     	os_memcpy(pos, data->r_nonce, data->r_nonce_len);
;;;76     	pos += data->r_nonce_len;
;;;77     	os_memcpy(pos, data->i_spi, IKEV2_SPI_LEN);
;;;78     	pos += IKEV2_SPI_LEN;
;;;79     	os_memcpy(pos, data->r_spi, IKEV2_SPI_LEN);
;;;80     #ifdef CCNS_PL
;;;81     #if __BYTE_ORDER == __LITTLE_ENDIAN
;;;82     	{
;;;83     		int i;
;;;84     		u8 *tmp = pos - IKEV2_SPI_LEN;
;;;85     		/* Incorrect byte re-ordering on little endian hosts.. */
;;;86     		for (i = 0; i < IKEV2_SPI_LEN; i++)
;;;87     			*tmp++ = data->i_spi[IKEV2_SPI_LEN - 1 - i];
;;;88     		for (i = 0; i < IKEV2_SPI_LEN; i++)
;;;89     			*tmp++ = data->r_spi[IKEV2_SPI_LEN - 1 - i];
;;;90     	}
;;;91     #endif
;;;92     #endif /* CCNS_PL */
;;;93     
;;;94     	/* SKEYSEED = prf(Ni | Nr, g^ir) */
;;;95     	/* Use zero-padding per RFC 4306, Sect. 2.14 */
;;;96     	pad_len = data->dh->prime_len - wpabuf_len(shared);
;;;97     #ifdef CCNS_PL
;;;98     	/* Shared secret is not zero-padded correctly */
;;;99     	pad_len = 0;
;;;100    #endif /* CCNS_PL */
;;;101    	pad = os_zalloc(pad_len ? pad_len : 1);
;;;102    	if (pad == NULL) {
;;;103    		wpabuf_free(shared);
;;;104    		os_free(buf);
;;;105    		return -1;
;;;106    	}
;;;107    
;;;108    	addr[0] = pad;
;;;109    	len[0] = pad_len;
;;;110    	addr[1] = wpabuf_head(shared);
;;;111    	len[1] = wpabuf_len(shared);
;;;112    	if (ikev2_prf_hash(prf->id, buf, data->i_nonce_len + data->r_nonce_len,
;;;113    			   2, addr, len, skeyseed) < 0) {
;;;114    		wpabuf_free(shared);
;;;115    		os_free(buf);
;;;116    		os_free(pad);
;;;117    		return -1;
;;;118    	}
;;;119    	os_free(pad);
;;;120    	wpabuf_free(shared);
;;;121    
;;;122    	/* DH parameters are not needed anymore, so free them */
;;;123    	wpabuf_free(data->i_dh_public);
;;;124    	data->i_dh_public = NULL;
;;;125    	wpabuf_free(data->r_dh_private);
;;;126    	data->r_dh_private = NULL;
;;;127    
;;;128    	wpa_hexdump_key(MSG_DEBUG, "IKEV2: SKEYSEED",
;;;129    			skeyseed, prf->hash_len);
;;;130    
;;;131    	ret = ikev2_derive_sk_keys(prf, integ, encr, skeyseed, buf, buf_len,
;;;132    				   &data->keys);
;;;133    	os_free(buf);
;;;134    	return ret;
;;;135    }
000046  b00f              ADD      sp,sp,#0x3c
000048  e8bd8ff0          POP      {r4-r11,pc}
                  |L12.76|
00004c  f8d42238          LDR      r2,[r4,#0x238]        ;58
000050  f5047007          ADD      r0,r4,#0x21c          ;58
000054  c803              LDM      r0,{r0,r1}            ;58
000056  f7fffffe          BL       dh_derive_shared
00005a  4683              MOV      r11,r0                ;58
00005c  f1bb0f00          CMP      r11,#0                ;60
000060  d102              BNE      |L12.104|
000062  f04f30ff          MOV      r0,#0xffffffff        ;61
000066  e7ee              B        |L12.70|
                  |L12.104|
000068  f8d41218          LDR      r1,[r4,#0x218]        ;65
00006c  f8d40114          LDR      r0,[r4,#0x114]        ;65
000070  4408              ADD      r0,r0,r1              ;65
000072  f1000910          ADD      r9,r0,#0x10           ;65
000076  4648              MOV      r0,r9                 ;66
000078  f7fffffe          BL       os_malloc
00007c  4605              MOV      r5,r0                 ;66
00007e  b92d              CBNZ     r5,|L12.140|
000080  4658              MOV      r0,r11                ;68
000082  f7fffffe          BL       wpabuf_free
000086  f04f30ff          MOV      r0,#0xffffffff        ;69
00008a  e7dc              B        |L12.70|
                  |L12.140|
00008c  462e              MOV      r6,r5                 ;72
00008e  f1040111          ADD      r1,r4,#0x11           ;73
000092  4630              MOV      r0,r6                 ;73
000094  f8d42114          LDR      r2,[r4,#0x114]        ;73
000098  f7fffffe          BL       os_memcpy
00009c  f8d40114          LDR      r0,[r4,#0x114]        ;74
0000a0  4406              ADD      r6,r6,r0              ;74
0000a2  f504718c          ADD      r1,r4,#0x118          ;75
0000a6  4630              MOV      r0,r6                 ;75
0000a8  f8d42218          LDR      r2,[r4,#0x218]        ;75
0000ac  f7fffffe          BL       os_memcpy
0000b0  f8d40218          LDR      r0,[r4,#0x218]        ;76
0000b4  4406              ADD      r6,r6,r0              ;76
0000b6  2208              MOVS     r2,#8                 ;77
0000b8  1c61              ADDS     r1,r4,#1              ;77
0000ba  4630              MOV      r0,r6                 ;77
0000bc  f7fffffe          BL       os_memcpy
0000c0  3608              ADDS     r6,r6,#8              ;78
0000c2  2208              MOVS     r2,#8                 ;79
0000c4  f1040109          ADD      r1,r4,#9              ;79
0000c8  4630              MOV      r0,r6                 ;79
0000ca  f7fffffe          BL       os_memcpy
0000ce  4658              MOV      r0,r11                ;96
0000d0  f7fffffe          BL       wpabuf_len
0000d4  f8d41238          LDR      r1,[r4,#0x238]        ;96
0000d8  6909              LDR      r1,[r1,#0x10]         ;96
0000da  eba10a00          SUB      r10,r1,r0             ;96
0000de  f1ba0f00          CMP      r10,#0                ;101
0000e2  d001              BEQ      |L12.232|
0000e4  4651              MOV      r1,r10                ;101
0000e6  e000              B        |L12.234|
                  |L12.232|
0000e8  2101              MOVS     r1,#1                 ;101
                  |L12.234|
0000ea  4608              MOV      r0,r1                 ;101
0000ec  f7fffffe          BL       os_zalloc
0000f0  4607              MOV      r7,r0                 ;101
0000f2  b947              CBNZ     r7,|L12.262|
0000f4  4658              MOV      r0,r11                ;103
0000f6  f7fffffe          BL       wpabuf_free
0000fa  4628              MOV      r0,r5                 ;104
0000fc  f7fffffe          BL       os_free
000100  f04f30ff          MOV      r0,#0xffffffff        ;105
000104  e79f              B        |L12.70|
                  |L12.262|
000106  9705              STR      r7,[sp,#0x14]         ;108
000108  f8cda00c          STR      r10,[sp,#0xc]         ;109
00010c  4658              MOV      r0,r11                ;110
00010e  f7fffffe          BL       wpabuf_head
000112  9006              STR      r0,[sp,#0x18]         ;110
000114  4658              MOV      r0,r11                ;111
000116  f7fffffe          BL       wpabuf_len
00011a  9004              STR      r0,[sp,#0x10]         ;111
00011c  ab0a              ADD      r3,sp,#0x28           ;112
00011e  aa03              ADD      r2,sp,#0xc            ;112
000120  a905              ADD      r1,sp,#0x14           ;112
000122  e88d000e          STM      sp,{r1-r3}            ;112
000126  f8d43218          LDR      r3,[r4,#0x218]        ;112
00012a  f8d41114          LDR      r1,[r4,#0x114]        ;112
00012e  18ca              ADDS     r2,r1,r3              ;112
000130  2302              MOVS     r3,#2                 ;112
000132  4629              MOV      r1,r5                 ;112
000134  f8d80000          LDR      r0,[r8,#0]            ;112
000138  f7fffffe          BL       ikev2_prf_hash
00013c  2800              CMP      r0,#0                 ;112
00013e  da0b              BGE      |L12.344|
000140  4658              MOV      r0,r11                ;114
000142  f7fffffe          BL       wpabuf_free
000146  4628              MOV      r0,r5                 ;115
000148  f7fffffe          BL       os_free
00014c  4638              MOV      r0,r7                 ;116
00014e  f7fffffe          BL       os_free
000152  f04f30ff          MOV      r0,#0xffffffff        ;117
000156  e776              B        |L12.70|
                  |L12.344|
000158  4638              MOV      r0,r7                 ;119
00015a  f7fffffe          BL       os_free
00015e  4658              MOV      r0,r11                ;120
000160  f7fffffe          BL       wpabuf_free
000164  f8d4021c          LDR      r0,[r4,#0x21c]        ;123
000168  f7fffffe          BL       wpabuf_free
00016c  2000              MOVS     r0,#0                 ;124
00016e  f8c4021c          STR      r0,[r4,#0x21c]        ;124
000172  f8d40220          LDR      r0,[r4,#0x220]        ;125
000176  f7fffffe          BL       wpabuf_free
00017a  2000              MOVS     r0,#0                 ;126
00017c  f8c40220          STR      r0,[r4,#0x220]        ;126
000180  aa0a              ADD      r2,sp,#0x28           ;128
000182  a112              ADR      r1,|L12.460|
000184  f8d83008          LDR      r3,[r8,#8]            ;128
000188  f7fffffe          BL       wpa_hexdump_key
00018c  f504730f          ADD      r3,r4,#0x23c          ;131
000190  e9cd5900          STRD     r5,r9,[sp,#0]         ;131
000194  9302              STR      r3,[sp,#8]            ;131
000196  ab0a              ADD      r3,sp,#0x28           ;131
000198  4640              MOV      r0,r8                 ;131
00019a  e9dd2108          LDRD     r2,r1,[sp,#0x20]      ;131
00019e  f7fffffe          BL       ikev2_derive_sk_keys
0001a2  9007              STR      r0,[sp,#0x1c]         ;131
0001a4  4628              MOV      r0,r5                 ;133
0001a6  f7fffffe          BL       os_free
0001aa  9807              LDR      r0,[sp,#0x1c]         ;134
0001ac  e74b              B        |L12.70|
;;;136    
                          ENDP

0001ae  0000              DCW      0x0000
                  |L12.432|
0001b0  494b4556          DCB      "IKEV2: Unsupported proposal",0
0001b4  323a2055
0001b8  6e737570
0001bc  706f7274
0001c0  65642070
0001c4  726f706f
0001c8  73616c00
                  |L12.460|
0001cc  494b4556          DCB      "IKEV2: SKEYSEED",0
0001d0  323a2053
0001d4  4b455953
0001d8  45454400

                          AREA ||i.ikev2_parse_proposal||, CODE, READONLY, ALIGN=2

                  ikev2_parse_proposal PROC
;;;230    
;;;231    static int ikev2_parse_proposal(struct ikev2_proposal_data *prop,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;232    				const u8 *pos, const u8 *end)
;;;233    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4692              MOV      r10,r2
;;;234    	const u8 *pend, *ppos;
;;;235    	int proposal_len, i;
;;;236    	const struct ikev2_proposal *p;
;;;237    
;;;238    	if (end - pos < (int) sizeof(*p)) {
00000a  ebaa0006          SUB      r0,r10,r6
00000e  2808              CMP      r0,#8
000010  da07              BGE      |L13.34|
;;;239    		wpa_printf(MSG_INFO, "IKEV2: Too short proposal");
000012  a152              ADR      r1,|L13.348|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;240    		return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L13.30|
;;;241    	}
;;;242    
;;;243    	/* FIX: AND processing if multiple proposals use the same # */
;;;244    
;;;245    	p = (const struct ikev2_proposal *) pos;
;;;246    	proposal_len = WPA_GET_BE16(p->proposal_length);
;;;247    	if (proposal_len < (int) sizeof(*p) || pos + proposal_len > end) {
;;;248    		wpa_printf(MSG_INFO, "IKEV2: Invalid proposal length %d",
;;;249    			   proposal_len);
;;;250    		return -1;
;;;251    	}
;;;252    	wpa_printf(MSG_DEBUG, "IKEV2: SAi1 Proposal # %d",
;;;253    		   p->proposal_num);
;;;254    	wpa_printf(MSG_DEBUG, "IKEV2:   Type: %d  Proposal Length: %d "
;;;255    		   " Protocol ID: %d",
;;;256    		   p->type, proposal_len, p->protocol_id);
;;;257    	wpa_printf(MSG_DEBUG, "IKEV2:   SPI Size: %d  Transforms: %d",
;;;258    		   p->spi_size, p->num_transforms);
;;;259    
;;;260    	if (p->type != 0 && p->type != 2) {
;;;261    		wpa_printf(MSG_INFO, "IKEV2: Unexpected Proposal type");
;;;262    		return -1;
;;;263    	}
;;;264    
;;;265    	if (p->protocol_id != IKEV2_PROTOCOL_IKE) {
;;;266    		wpa_printf(MSG_DEBUG, "IKEV2: Unexpected Protocol ID "
;;;267    			   "(only IKE allowed for EAP-IKEv2)");
;;;268    		return -1;
;;;269    	}
;;;270    
;;;271    	if (p->proposal_num != prop->proposal_num) {
;;;272    		if (p->proposal_num == prop->proposal_num + 1)
;;;273    			prop->proposal_num = p->proposal_num;
;;;274    		else {
;;;275    			wpa_printf(MSG_INFO, "IKEV2: Unexpected Proposal #");
;;;276    			return -1;
;;;277    		}
;;;278    	}
;;;279    
;;;280    	ppos = (const u8 *) (p + 1);
;;;281    	pend = pos + proposal_len;
;;;282    	if (ppos + p->spi_size > pend) {
;;;283    		wpa_printf(MSG_INFO, "IKEV2: Not enough room for SPI "
;;;284    			   "in proposal");
;;;285    		return -1;
;;;286    	}
;;;287    	if (p->spi_size) {
;;;288    		wpa_hexdump(MSG_DEBUG, "IKEV2:    SPI",
;;;289    			    ppos, p->spi_size);
;;;290    		ppos += p->spi_size;
;;;291    	}
;;;292    
;;;293    	/*
;;;294    	 * For initial IKE_SA negotiation, SPI Size MUST be zero; for
;;;295    	 * subsequent negotiations, it must be 8 for IKE. We only support
;;;296    	 * initial case for now.
;;;297    	 */
;;;298    	if (p->spi_size != 0) {
;;;299    		wpa_printf(MSG_INFO, "IKEV2: Unexpected SPI Size");
;;;300    		return -1;
;;;301    	}
;;;302    
;;;303    	if (p->num_transforms == 0) {
;;;304    		wpa_printf(MSG_INFO, "IKEV2: At least one transform required");
;;;305    		return -1;
;;;306    	}
;;;307    
;;;308    	for (i = 0; i < (int) p->num_transforms; i++) {
;;;309    		int tlen = ikev2_parse_transform(prop, ppos, pend);
;;;310    		if (tlen < 0)
;;;311    			return -1;
;;;312    		ppos += tlen;
;;;313    	}
;;;314    
;;;315    	if (ppos != pend) {
;;;316    		wpa_printf(MSG_INFO, "IKEV2: Unexpected data after "
;;;317    			   "transforms");
;;;318    		return -1;
;;;319    	}
;;;320    
;;;321    	return proposal_len;
;;;322    }
00001e  e8bd8ff8          POP      {r3-r11,pc}
                  |L13.34|
000022  4634              MOV      r4,r6                 ;245
000024  78e0              LDRB     r0,[r4,#3]            ;246
000026  78a1              LDRB     r1,[r4,#2]            ;246
000028  ea402501          ORR      r5,r0,r1,LSL #8       ;246
00002c  2d08              CMP      r5,#8                 ;247
00002e  db02              BLT      |L13.54|
000030  1970              ADDS     r0,r6,r5              ;247
000032  4550              CMP      r0,r10                ;247
000034  d907              BLS      |L13.70|
                  |L13.54|
000036  462a              MOV      r2,r5                 ;248
000038  a14f              ADR      r1,|L13.376|
00003a  2000              MOVS     r0,#0                 ;248
00003c  f7fffffe          BL       wpa_printf
000040  f04f30ff          MOV      r0,#0xffffffff        ;250
000044  e7eb              B        |L13.30|
                  |L13.70|
000046  7922              LDRB     r2,[r4,#4]            ;252
000048  a154              ADR      r1,|L13.412|
00004a  2000              MOVS     r0,#0                 ;252
00004c  f7fffffe          BL       wpa_printf
000050  7963              LDRB     r3,[r4,#5]            ;254
000052  9300              STR      r3,[sp,#0]            ;254
000054  7822              LDRB     r2,[r4,#0]            ;254
000056  462b              MOV      r3,r5                 ;254
000058  a157              ADR      r1,|L13.440|
00005a  2000              MOVS     r0,#0                 ;254
00005c  f7fffffe          BL       wpa_printf
000060  79e3              LDRB     r3,[r4,#7]            ;257
000062  79a2              LDRB     r2,[r4,#6]            ;257
000064  a162              ADR      r1,|L13.496|
000066  2000              MOVS     r0,#0                 ;257
000068  f7fffffe          BL       wpa_printf
00006c  7820              LDRB     r0,[r4,#0]            ;260
00006e  b148              CBZ      r0,|L13.132|
000070  7820              LDRB     r0,[r4,#0]            ;260
000072  2802              CMP      r0,#2                 ;260
000074  d006              BEQ      |L13.132|
000076  a168              ADR      r1,|L13.536|
000078  2000              MOVS     r0,#0                 ;261
00007a  f7fffffe          BL       wpa_printf
00007e  f04f30ff          MOV      r0,#0xffffffff        ;262
000082  e7cc              B        |L13.30|
                  |L13.132|
000084  7960              LDRB     r0,[r4,#5]            ;265
000086  2801              CMP      r0,#1                 ;265
000088  d006              BEQ      |L13.152|
00008a  a16b              ADR      r1,|L13.568|
00008c  2000              MOVS     r0,#0                 ;266
00008e  f7fffffe          BL       wpa_printf
000092  f04f30ff          MOV      r0,#0xffffffff        ;268
000096  e7c2              B        |L13.30|
                  |L13.152|
000098  7920              LDRB     r0,[r4,#4]            ;271
00009a  f8981000          LDRB     r1,[r8,#0]            ;271
00009e  4288              CMP      r0,r1                 ;271
0000a0  d010              BEQ      |L13.196|
0000a2  7921              LDRB     r1,[r4,#4]            ;272
0000a4  f8980000          LDRB     r0,[r8,#0]            ;272
0000a8  1c40              ADDS     r0,r0,#1              ;272
0000aa  4281              CMP      r1,r0                 ;272
0000ac  d103              BNE      |L13.182|
0000ae  7920              LDRB     r0,[r4,#4]            ;273
0000b0  f8880000          STRB     r0,[r8,#0]            ;273
0000b4  e006              B        |L13.196|
                  |L13.182|
0000b6  a170              ADR      r1,|L13.632|
0000b8  2000              MOVS     r0,#0                 ;275
0000ba  f7fffffe          BL       wpa_printf
0000be  f04f30ff          MOV      r0,#0xffffffff        ;276
0000c2  e7ac              B        |L13.30|
                  |L13.196|
0000c4  f1040708          ADD      r7,r4,#8              ;280
0000c8  eb060905          ADD      r9,r6,r5              ;281
0000cc  79a0              LDRB     r0,[r4,#6]            ;282
0000ce  4438              ADD      r0,r0,r7              ;282
0000d0  4548              CMP      r0,r9                 ;282
0000d2  d906              BLS      |L13.226|
0000d4  a170              ADR      r1,|L13.664|
0000d6  2000              MOVS     r0,#0                 ;283
0000d8  f7fffffe          BL       wpa_printf
0000dc  f04f30ff          MOV      r0,#0xffffffff        ;285
0000e0  e79d              B        |L13.30|
                  |L13.226|
0000e2  79a0              LDRB     r0,[r4,#6]            ;287
0000e4  b138              CBZ      r0,|L13.246|
0000e6  79a3              LDRB     r3,[r4,#6]            ;288
0000e8  463a              MOV      r2,r7                 ;288
0000ea  a176              ADR      r1,|L13.708|
0000ec  2000              MOVS     r0,#0                 ;288
0000ee  f7fffffe          BL       wpa_hexdump
0000f2  79a0              LDRB     r0,[r4,#6]            ;290
0000f4  4407              ADD      r7,r7,r0              ;290
                  |L13.246|
0000f6  79a0              LDRB     r0,[r4,#6]            ;298
0000f8  b130              CBZ      r0,|L13.264|
0000fa  a176              ADR      r1,|L13.724|
0000fc  2000              MOVS     r0,#0                 ;299
0000fe  f7fffffe          BL       wpa_printf
000102  f04f30ff          MOV      r0,#0xffffffff        ;300
000106  e78a              B        |L13.30|
                  |L13.264|
000108  79e0              LDRB     r0,[r4,#7]            ;303
00010a  b930              CBNZ     r0,|L13.282|
00010c  a178              ADR      r1,|L13.752|
00010e  2000              MOVS     r0,#0                 ;304
000110  f7fffffe          BL       wpa_printf
000114  f04f30ff          MOV      r0,#0xffffffff        ;305
000118  e781              B        |L13.30|
                  |L13.282|
00011a  f04f0b00          MOV      r11,#0                ;308
00011e  e00f              B        |L13.320|
                  |L13.288|
000120  464a              MOV      r2,r9                 ;309
000122  4639              MOV      r1,r7                 ;309
000124  4640              MOV      r0,r8                 ;309
000126  f7fffffe          BL       ikev2_parse_transform
00012a  9000              STR      r0,[sp,#0]            ;309
00012c  9800              LDR      r0,[sp,#0]            ;310
00012e  2800              CMP      r0,#0                 ;310
000130  da02              BGE      |L13.312|
000132  f04f30ff          MOV      r0,#0xffffffff        ;311
000136  e772              B        |L13.30|
                  |L13.312|
000138  9800              LDR      r0,[sp,#0]            ;312
00013a  4407              ADD      r7,r7,r0              ;312
00013c  f10b0b01          ADD      r11,r11,#1            ;308
                  |L13.320|
000140  79e0              LDRB     r0,[r4,#7]            ;308
000142  4558              CMP      r0,r11                ;308
000144  dcec              BGT      |L13.288|
000146  454f              CMP      r7,r9                 ;315
000148  d006              BEQ      |L13.344|
00014a  a173              ADR      r1,|L13.792|
00014c  2000              MOVS     r0,#0                 ;316
00014e  f7fffffe          BL       wpa_printf
000152  f04f30ff          MOV      r0,#0xffffffff        ;318
000156  e762              B        |L13.30|
                  |L13.344|
000158  4628              MOV      r0,r5                 ;321
00015a  e760              B        |L13.30|
;;;323    
                          ENDP

                  |L13.348|
00015c  494b4556          DCB      "IKEV2: Too short proposal",0
000160  323a2054
000164  6f6f2073
000168  686f7274
00016c  2070726f
000170  706f7361
000174  6c00    
000176  00                DCB      0
000177  00                DCB      0
                  |L13.376|
000178  494b4556          DCB      "IKEV2: Invalid proposal length %d",0
00017c  323a2049
000180  6e76616c
000184  69642070
000188  726f706f
00018c  73616c20
000190  6c656e67
000194  74682025
000198  6400    
00019a  00                DCB      0
00019b  00                DCB      0
                  |L13.412|
00019c  494b4556          DCB      "IKEV2: SAi1 Proposal # %d",0
0001a0  323a2053
0001a4  41693120
0001a8  50726f70
0001ac  6f73616c
0001b0  20232025
0001b4  6400    
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L13.440|
0001b8  494b4556          DCB      "IKEV2:   Type: %d  Proposal Length: %d  Protocol ID: %d"
0001bc  323a2020
0001c0  20547970
0001c4  653a2025
0001c8  64202050
0001cc  726f706f
0001d0  73616c20
0001d4  4c656e67
0001d8  74683a20
0001dc  25642020
0001e0  50726f74
0001e4  6f636f6c
0001e8  2049443a
0001ec  202564  
0001ef  00                DCB      0
                  |L13.496|
0001f0  494b4556          DCB      "IKEV2:   SPI Size: %d  Transforms: %d",0
0001f4  323a2020
0001f8  20535049
0001fc  2053697a
000200  653a2025
000204  64202054
000208  72616e73
00020c  666f726d
000210  733a2025
000214  6400    
000216  00                DCB      0
000217  00                DCB      0
                  |L13.536|
000218  494b4556          DCB      "IKEV2: Unexpected Proposal type",0
00021c  323a2055
000220  6e657870
000224  65637465
000228  64205072
00022c  6f706f73
000230  616c2074
000234  79706500
                  |L13.568|
000238  494b4556          DCB      "IKEV2: Unexpected Protocol ID (only IKE allowed for EAP"
00023c  323a2055
000240  6e657870
000244  65637465
000248  64205072
00024c  6f746f63
000250  6f6c2049
000254  4420286f
000258  6e6c7920
00025c  494b4520
000260  616c6c6f
000264  77656420
000268  666f7220
00026c  454150  
00026f  2d494b45          DCB      "-IKEv2)",0
000273  76322900
000277  00                DCB      0
                  |L13.632|
000278  494b4556          DCB      "IKEV2: Unexpected Proposal #",0
00027c  323a2055
000280  6e657870
000284  65637465
000288  64205072
00028c  6f706f73
000290  616c2023
000294  00      
000295  00                DCB      0
000296  00                DCB      0
000297  00                DCB      0
                  |L13.664|
000298  494b4556          DCB      "IKEV2: Not enough room for SPI in proposal",0
00029c  323a204e
0002a0  6f742065
0002a4  6e6f7567
0002a8  6820726f
0002ac  6f6d2066
0002b0  6f722053
0002b4  50492069
0002b8  6e207072
0002bc  6f706f73
0002c0  616c00  
0002c3  00                DCB      0
                  |L13.708|
0002c4  494b4556          DCB      "IKEV2:    SPI",0
0002c8  323a2020
0002cc  20205350
0002d0  4900    
0002d2  00                DCB      0
0002d3  00                DCB      0
                  |L13.724|
0002d4  494b4556          DCB      "IKEV2: Unexpected SPI Size",0
0002d8  323a2055
0002dc  6e657870
0002e0  65637465
0002e4  64205350
0002e8  49205369
0002ec  7a6500  
0002ef  00                DCB      0
                  |L13.752|
0002f0  494b4556          DCB      "IKEV2: At least one transform required",0
0002f4  323a2041
0002f8  74206c65
0002fc  61737420
000300  6f6e6520
000304  7472616e
000308  73666f72
00030c  6d207265
000310  71756972
000314  656400  
000317  00                DCB      0
                  |L13.792|
000318  494b4556          DCB      "IKEV2: Unexpected data after transforms",0
00031c  323a2055
000320  6e657870
000324  65637465
000328  64206461
00032c  74612061
000330  66746572
000334  20747261
000338  6e73666f
00033c  726d7300

                          AREA ||i.ikev2_parse_transform||, CODE, READONLY, ALIGN=2

                  ikev2_parse_transform PROC
;;;137    
;;;138    static int ikev2_parse_transform(struct ikev2_proposal_data *prop,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;139    				 const u8 *pos, const u8 *end)
;;;140    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4692              MOV      r10,r2
;;;141    	int transform_len;
;;;142    	const struct ikev2_transform *t;
;;;143    	u16 transform_id;
;;;144    	const u8 *tend;
;;;145    
;;;146    	if (end - pos < (int) sizeof(*t)) {
00000a  ebaa0004          SUB      r0,r10,r4
00000e  2808              CMP      r0,#8
000010  da07              BGE      |L14.34|
;;;147    		wpa_printf(MSG_INFO, "IKEV2: Too short transform");
000012  a14a              ADR      r1,|L14.316|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;148    		return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L14.30|
;;;149    	}
;;;150    
;;;151    	t = (const struct ikev2_transform *) pos;
;;;152    	transform_len = WPA_GET_BE16(t->transform_length);
;;;153    	if (transform_len < (int) sizeof(*t) || pos + transform_len > end) {
;;;154    		wpa_printf(MSG_INFO, "IKEV2: Invalid transform length %d",
;;;155    			   transform_len);
;;;156    		return -1;
;;;157    	}
;;;158    	tend = pos + transform_len;
;;;159    
;;;160    	transform_id = WPA_GET_BE16(t->transform_id);
;;;161    
;;;162    	wpa_printf(MSG_DEBUG, "IKEV2:   Transform:");
;;;163    	wpa_printf(MSG_DEBUG, "IKEV2:     Type: %d  Transform Length: %d  "
;;;164    		   "Transform Type: %d  Transform ID: %d",
;;;165    		   t->type, transform_len, t->transform_type, transform_id);
;;;166    
;;;167    	if (t->type != 0 && t->type != 3) {
;;;168    		wpa_printf(MSG_INFO, "IKEV2: Unexpected Transform type");
;;;169    		return -1;
;;;170    	}
;;;171    
;;;172    	pos = (const u8 *) (t + 1);
;;;173    	if (pos < tend) {
;;;174    		wpa_hexdump(MSG_DEBUG, "IKEV2:     Transform Attributes",
;;;175    			    pos, tend - pos);
;;;176    	}
;;;177    
;;;178    	switch (t->transform_type) {
;;;179    	case IKEV2_TRANSFORM_ENCR:
;;;180    		if (ikev2_get_encr(transform_id)) {
;;;181    			if (transform_id == ENCR_AES_CBC) {
;;;182    				if (tend - pos != 4) {
;;;183    					wpa_printf(MSG_DEBUG, "IKEV2: No "
;;;184    						   "Transform Attr for AES");
;;;185    					break;
;;;186    				}
;;;187    #ifdef CCNS_PL
;;;188    				if (WPA_GET_BE16(pos) != 0x001d /* ?? */) {
;;;189    					wpa_printf(MSG_DEBUG, "IKEV2: Not a "
;;;190    						   "Key Size attribute for "
;;;191    						   "AES");
;;;192    					break;
;;;193    				}
;;;194    #else /* CCNS_PL */
;;;195    				if (WPA_GET_BE16(pos) != 0x800e) {
;;;196    					wpa_printf(MSG_DEBUG, "IKEV2: Not a "
;;;197    						   "Key Size attribute for "
;;;198    						   "AES");
;;;199    					break;
;;;200    				}
;;;201    #endif /* CCNS_PL */
;;;202    				if (WPA_GET_BE16(pos + 2) != 128) {
;;;203    					wpa_printf(MSG_DEBUG, "IKEV2: "
;;;204    						   "Unsupported AES key size "
;;;205    						   "%d bits",
;;;206    						   WPA_GET_BE16(pos + 2));
;;;207    					break;
;;;208    				}
;;;209    			}
;;;210    			prop->encr = transform_id;
;;;211    		}
;;;212    		break;
;;;213    	case IKEV2_TRANSFORM_PRF:
;;;214    		if (ikev2_get_prf(transform_id))
;;;215    			prop->prf = transform_id;
;;;216    		break;
;;;217    	case IKEV2_TRANSFORM_INTEG:
;;;218    		if (ikev2_get_integ(transform_id))
;;;219    			prop->integ = transform_id;
;;;220    		break;
;;;221    	case IKEV2_TRANSFORM_DH:
;;;222    		if (dh_groups_get(transform_id))
;;;223    			prop->dh = transform_id;
;;;224    		break;
;;;225    	}
;;;226    
;;;227    	return transform_len;
;;;228    }
00001e  e8bd87fc          POP      {r2-r10,pc}
                  |L14.34|
000022  4625              MOV      r5,r4                 ;151
000024  78e8              LDRB     r0,[r5,#3]            ;152
000026  462c              MOV      r4,r5                 ;152
000028  78a9              LDRB     r1,[r5,#2]            ;152
00002a  ea402701          ORR      r7,r0,r1,LSL #8       ;152
00002e  2f08              CMP      r7,#8                 ;153
000030  db02              BLT      |L14.56|
000032  19e0              ADDS     r0,r4,r7              ;153
000034  4550              CMP      r0,r10                ;153
000036  d907              BLS      |L14.72|
                  |L14.56|
000038  463a              MOV      r2,r7                 ;154
00003a  a147              ADR      r1,|L14.344|
00003c  2000              MOVS     r0,#0                 ;154
00003e  f7fffffe          BL       wpa_printf
000042  f04f30ff          MOV      r0,#0xffffffff        ;156
000046  e7ea              B        |L14.30|
                  |L14.72|
000048  eb040907          ADD      r9,r4,r7              ;158
00004c  79e8              LDRB     r0,[r5,#7]            ;160
00004e  79a9              LDRB     r1,[r5,#6]            ;160
000050  ea402601          ORR      r6,r0,r1,LSL #8       ;160
000054  a149              ADR      r1,|L14.380|
000056  2000              MOVS     r0,#0                 ;162
000058  f7fffffe          BL       wpa_printf
00005c  792a              LDRB     r2,[r5,#4]            ;163
00005e  e9cd2600          STRD     r2,r6,[sp,#0]         ;163
000062  782a              LDRB     r2,[r5,#0]            ;163
000064  463b              MOV      r3,r7                 ;163
000066  494a              LDR      r1,|L14.400|
000068  2000              MOVS     r0,#0                 ;163
00006a  f7fffffe          BL       wpa_printf
00006e  7828              LDRB     r0,[r5,#0]            ;167
000070  b148              CBZ      r0,|L14.134|
000072  7828              LDRB     r0,[r5,#0]            ;167
000074  2803              CMP      r0,#3                 ;167
000076  d006              BEQ      |L14.134|
000078  a146              ADR      r1,|L14.404|
00007a  2000              MOVS     r0,#0                 ;168
00007c  f7fffffe          BL       wpa_printf
000080  f04f30ff          MOV      r0,#0xffffffff        ;169
000084  e7cb              B        |L14.30|
                  |L14.134|
000086  f1050408          ADD      r4,r5,#8              ;172
00008a  454c              CMP      r4,r9                 ;173
00008c  d206              BCS      |L14.156|
00008e  eba90304          SUB      r3,r9,r4              ;174
000092  4622              MOV      r2,r4                 ;174
000094  a148              ADR      r1,|L14.440|
000096  2000              MOVS     r0,#0                 ;174
000098  f7fffffe          BL       wpa_hexdump
                  |L14.156|
00009c  7928              LDRB     r0,[r5,#4]            ;178
00009e  2801              CMP      r0,#1                 ;178
0000a0  d006              BEQ      |L14.176|
0000a2  2802              CMP      r0,#2                 ;178
0000a4  d032              BEQ      |L14.268|
0000a6  2803              CMP      r0,#3                 ;178
0000a8  d037              BEQ      |L14.282|
0000aa  2804              CMP      r0,#4                 ;178
0000ac  d143              BNE      |L14.310|
0000ae  e03b              B        |L14.296|
                  |L14.176|
0000b0  4630              MOV      r0,r6                 ;180
0000b2  f7fffffe          BL       ikev2_get_encr
0000b6  b340              CBZ      r0,|L14.266|
0000b8  2e0c              CMP      r6,#0xc               ;181
0000ba  d124              BNE      |L14.262|
0000bc  eba90004          SUB      r0,r9,r4              ;182
0000c0  2804              CMP      r0,#4                 ;182
0000c2  d004              BEQ      |L14.206|
0000c4  a144              ADR      r1,|L14.472|
0000c6  2000              MOVS     r0,#0                 ;183
0000c8  f7fffffe          BL       wpa_printf
0000cc  e033              B        |L14.310|
                  |L14.206|
0000ce  7860              LDRB     r0,[r4,#1]            ;195
0000d0  7821              LDRB     r1,[r4,#0]            ;195
0000d2  ea402001          ORR      r0,r0,r1,LSL #8       ;195
0000d6  f5a04100          SUB      r1,r0,#0x8000         ;195
0000da  390e              SUBS     r1,r1,#0xe            ;195
0000dc  d004              BEQ      |L14.232|
0000de  a147              ADR      r1,|L14.508|
0000e0  2000              MOVS     r0,#0                 ;196
0000e2  f7fffffe          BL       wpa_printf
0000e6  e026              B        |L14.310|
                  |L14.232|
0000e8  78e0              LDRB     r0,[r4,#3]            ;202
0000ea  78a1              LDRB     r1,[r4,#2]            ;202
0000ec  ea402001          ORR      r0,r0,r1,LSL #8       ;202
0000f0  2880              CMP      r0,#0x80              ;202
0000f2  d008              BEQ      |L14.262|
0000f4  78e0              LDRB     r0,[r4,#3]            ;203
0000f6  78a1              LDRB     r1,[r4,#2]            ;203
0000f8  ea402201          ORR      r2,r0,r1,LSL #8       ;203
0000fc  a149              ADR      r1,|L14.548|
0000fe  2000              MOVS     r0,#0                 ;203
000100  f7fffffe          BL       wpa_printf
000104  e017              B        |L14.310|
                  |L14.262|
000106  f8c8600c          STR      r6,[r8,#0xc]          ;210
                  |L14.266|
00010a  e014              B        |L14.310|
                  |L14.268|
00010c  4630              MOV      r0,r6                 ;214
00010e  f7fffffe          BL       ikev2_get_prf
000112  b108              CBZ      r0,|L14.280|
000114  f8c86008          STR      r6,[r8,#8]            ;215
                  |L14.280|
000118  e00d              B        |L14.310|
                  |L14.282|
00011a  4630              MOV      r0,r6                 ;218
00011c  f7fffffe          BL       ikev2_get_integ
000120  b108              CBZ      r0,|L14.294|
000122  f8c86004          STR      r6,[r8,#4]            ;219
                  |L14.294|
000126  e006              B        |L14.310|
                  |L14.296|
000128  4630              MOV      r0,r6                 ;222
00012a  f7fffffe          BL       dh_groups_get
00012e  b108              CBZ      r0,|L14.308|
000130  f8c86010          STR      r6,[r8,#0x10]         ;223
                  |L14.308|
000134  bf00              NOP                            ;224
                  |L14.310|
000136  bf00              NOP                            ;185
000138  4638              MOV      r0,r7                 ;227
00013a  e770              B        |L14.30|
;;;229    
                          ENDP

                  |L14.316|
00013c  494b4556          DCB      "IKEV2: Too short transform",0
000140  323a2054
000144  6f6f2073
000148  686f7274
00014c  20747261
000150  6e73666f
000154  726d00  
000157  00                DCB      0
                  |L14.344|
000158  494b4556          DCB      "IKEV2: Invalid transform length %d",0
00015c  323a2049
000160  6e76616c
000164  69642074
000168  72616e73
00016c  666f726d
000170  206c656e
000174  67746820
000178  256400  
00017b  00                DCB      0
                  |L14.380|
00017c  494b4556          DCB      "IKEV2:   Transform:",0
000180  323a2020
000184  20547261
000188  6e73666f
00018c  726d3a00
                  |L14.400|
                          DCD      ||.constdata||
                  |L14.404|
000194  494b4556          DCB      "IKEV2: Unexpected Transform type",0
000198  323a2055
00019c  6e657870
0001a0  65637465
0001a4  64205472
0001a8  616e7366
0001ac  6f726d20
0001b0  74797065
0001b4  00      
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L14.440|
0001b8  494b4556          DCB      "IKEV2:     Transform Attributes",0
0001bc  323a2020
0001c0  20202054
0001c4  72616e73
0001c8  666f726d
0001cc  20417474
0001d0  72696275
0001d4  74657300
                  |L14.472|
0001d8  494b4556          DCB      "IKEV2: No Transform Attr for AES",0
0001dc  323a204e
0001e0  6f205472
0001e4  616e7366
0001e8  6f726d20
0001ec  41747472
0001f0  20666f72
0001f4  20414553
0001f8  00      
0001f9  00                DCB      0
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L14.508|
0001fc  494b4556          DCB      "IKEV2: Not a Key Size attribute for AES",0
000200  323a204e
000204  6f742061
000208  204b6579
00020c  2053697a
000210  65206174
000214  74726962
000218  75746520
00021c  666f7220
000220  41455300
                  |L14.548|
000224  494b4556          DCB      "IKEV2: Unsupported AES key size %d bits",0
000228  323a2055
00022c  6e737570
000230  706f7274
000234  65642041
000238  4553206b
00023c  65792073
000240  697a6520
000244  25642062
000248  69747300

                          AREA ||i.ikev2_process_auth||, CODE, READONLY, ALIGN=2

                  ikev2_process_auth PROC
;;;624    
;;;625    static int ikev2_process_auth(struct ikev2_responder_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;626    			      const u8 *auth, size_t auth_len)
;;;627    {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;628    	u8 auth_method;
;;;629    
;;;630    	if (auth == NULL) {
00000a  b93c              CBNZ     r4,|L15.28|
;;;631    		wpa_printf(MSG_INFO, "IKEV2: No Authentication Payload");
00000c  a11a              ADR      r1,|L15.120|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;632    		return -1;
000014  f04f30ff          MOV      r0,#0xffffffff
                  |L15.24|
;;;633    	}
;;;634    
;;;635    	if (auth_len < 4) {
;;;636    		wpa_printf(MSG_INFO, "IKEV2: Too short Authentication "
;;;637    			   "Payload");
;;;638    		return -1;
;;;639    	}
;;;640    
;;;641    	auth_method = auth[0];
;;;642    	auth += 4;
;;;643    	auth_len -= 4;
;;;644    
;;;645    	wpa_printf(MSG_DEBUG, "IKEV2: Auth Method %d", auth_method);
;;;646    	wpa_hexdump(MSG_MSGDUMP, "IKEV2: Authentication Data", auth, auth_len);
;;;647    
;;;648    	switch (data->peer_auth) {
;;;649    	case PEER_AUTH_CERT:
;;;650    		return ikev2_process_auth_cert(data, auth_method, auth,
;;;651    					       auth_len);
;;;652    	case PEER_AUTH_SECRET:
;;;653    		return ikev2_process_auth_secret(data, auth_method, auth,
;;;654    						 auth_len);
;;;655    	}
;;;656    
;;;657    	return -1;
;;;658    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L15.28|
00001c  2d04              CMP      r5,#4                 ;635
00001e  d206              BCS      |L15.46|
000020  a11e              ADR      r1,|L15.156|
000022  2000              MOVS     r0,#0                 ;636
000024  f7fffffe          BL       wpa_printf
000028  f04f30ff          MOV      r0,#0xffffffff        ;638
00002c  e7f4              B        |L15.24|
                  |L15.46|
00002e  7826              LDRB     r6,[r4,#0]            ;641
000030  1d24              ADDS     r4,r4,#4              ;642
000032  1f2d              SUBS     r5,r5,#4              ;643
000034  4632              MOV      r2,r6                 ;645
000036  a123              ADR      r1,|L15.196|
000038  2000              MOVS     r0,#0                 ;645
00003a  f7fffffe          BL       wpa_printf
00003e  462b              MOV      r3,r5                 ;646
000040  4622              MOV      r2,r4                 ;646
000042  a126              ADR      r1,|L15.220|
000044  2000              MOVS     r0,#0                 ;646
000046  f7fffffe          BL       wpa_hexdump
00004a  f897028c          LDRB     r0,[r7,#0x28c]        ;648
00004e  b110              CBZ      r0,|L15.86|
000050  2801              CMP      r0,#1                 ;648
000052  d10e              BNE      |L15.114|
000054  e006              B        |L15.100|
                  |L15.86|
000056  462b              MOV      r3,r5                 ;650
000058  4622              MOV      r2,r4                 ;650
00005a  4631              MOV      r1,r6                 ;650
00005c  4638              MOV      r0,r7                 ;650
00005e  f7fffffe          BL       ikev2_process_auth_cert
000062  e7d9              B        |L15.24|
                  |L15.100|
000064  462b              MOV      r3,r5                 ;653
000066  4622              MOV      r2,r4                 ;653
000068  4631              MOV      r1,r6                 ;653
00006a  4638              MOV      r0,r7                 ;653
00006c  f7fffffe          BL       ikev2_process_auth_secret
000070  e7d2              B        |L15.24|
                  |L15.114|
000072  f04f30ff          MOV      r0,#0xffffffff        ;657
000076  e7cf              B        |L15.24|
;;;659    
                          ENDP

                  |L15.120|
000078  494b4556          DCB      "IKEV2: No Authentication Payload",0
00007c  323a204e
000080  6f204175
000084  7468656e
000088  74696361
00008c  74696f6e
000090  20506179
000094  6c6f6164
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L15.156|
00009c  494b4556          DCB      "IKEV2: Too short Authentication Payload",0
0000a0  323a2054
0000a4  6f6f2073
0000a8  686f7274
0000ac  20417574
0000b0  68656e74
0000b4  69636174
0000b8  696f6e20
0000bc  5061796c
0000c0  6f616400
                  |L15.196|
0000c4  494b4556          DCB      "IKEV2: Auth Method %d",0
0000c8  323a2041
0000cc  75746820
0000d0  4d657468
0000d4  6f642025
0000d8  6400    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L15.220|
0000dc  494b4556          DCB      "IKEV2: Authentication Data",0
0000e0  323a2041
0000e4  75746865
0000e8  6e746963
0000ec  6174696f
0000f0  6e204461
0000f4  746100  
0000f7  00                DCB      0

                          AREA ||i.ikev2_process_auth_cert||, CODE, READONLY, ALIGN=2

                  ikev2_process_auth_cert PROC
;;;559    
;;;560    static int ikev2_process_auth_cert(struct ikev2_responder_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;561    				   u8 method, const u8 *auth, size_t auth_len)
;;;562    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;563    	if (method != AUTH_RSA_SIGN) {
00000c  2c01              CMP      r4,#1
00000e  d008              BEQ      |L16.34|
;;;564    		wpa_printf(MSG_INFO, "IKEV2: Unsupported authentication "
000010  4622              MOV      r2,r4
000012  a105              ADR      r1,|L16.40|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;565    			   "method %d", method);
;;;566    		return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L16.30|
;;;567    	}
;;;568    
;;;569    	/* TODO: validate AUTH */
;;;570    	return 0;
;;;571    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L16.34|
000022  2000              MOVS     r0,#0                 ;570
000024  e7fb              B        |L16.30|
;;;572    
                          ENDP

000026  0000              DCW      0x0000
                  |L16.40|
000028  494b4556          DCB      "IKEV2: Unsupported authentication method %d",0
00002c  323a2055
000030  6e737570
000034  706f7274
000038  65642061
00003c  75746865
000040  6e746963
000044  6174696f
000048  6e206d65
00004c  74686f64
000050  20256400

                          AREA ||i.ikev2_process_auth_secret||, CODE, READONLY, ALIGN=2

                  ikev2_process_auth_secret PROC
;;;573    
;;;574    static int ikev2_process_auth_secret(struct ikev2_responder_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;575    				     u8 method, const u8 *auth,
;;;576    				     size_t auth_len)
;;;577    {
000004  b090              SUB      sp,sp,#0x40
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
00000a  4690              MOV      r8,r2
00000c  461f              MOV      r7,r3
;;;578    	u8 auth_data[IKEV2_MAX_HASH_LEN];
;;;579    	const struct ikev2_prf_alg *prf;
;;;580    
;;;581    	if (method != AUTH_SHARED_KEY_MIC) {
00000e  2e02              CMP      r6,#2
000010  d009              BEQ      |L17.38|
;;;582    		wpa_printf(MSG_INFO, "IKEV2: Unsupported authentication "
000012  4632              MOV      r2,r6
000014  a133              ADR      r1,|L17.228|
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       wpa_printf
;;;583    			   "method %d", method);
;;;584    		return -1;
00001c  f04f30ff          MOV      r0,#0xffffffff
                  |L17.32|
;;;585    	}
;;;586    
;;;587    	/* msg | Nr | prf(SK_pi,IDi') */
;;;588    	if (ikev2_derive_auth_data(data->proposal.prf, data->i_sign_msg,
;;;589    				   data->IDi, data->IDi_len, data->IDi_type,
;;;590    				   &data->keys, 1, data->shared_secret,
;;;591    				   data->shared_secret_len,
;;;592    				   data->r_nonce, data->r_nonce_len,
;;;593    				   data->key_pad, data->key_pad_len,
;;;594    				   auth_data) < 0) {
;;;595    		wpa_printf(MSG_INFO, "IKEV2: Could not derive AUTH data");
;;;596    		return -1;
;;;597    	}
;;;598    
;;;599    	wpabuf_free(data->i_sign_msg);
;;;600    	data->i_sign_msg = NULL;
;;;601    
;;;602    	prf = ikev2_get_prf(data->proposal.prf);
;;;603    	if (prf == NULL)
;;;604    		return -1;
;;;605    
;;;606    	if (auth_len != prf->hash_len ||
;;;607    	    os_memcmp(auth, auth_data, auth_len) != 0) {
;;;608    		wpa_printf(MSG_INFO, "IKEV2: Invalid Authentication Data");
;;;609    		wpa_hexdump(MSG_DEBUG, "IKEV2: Received Authentication Data",
;;;610    			    auth, auth_len);
;;;611    		wpa_hexdump(MSG_DEBUG, "IKEV2: Expected Authentication Data",
;;;612    			    auth_data, prf->hash_len);
;;;613    		data->error_type = AUTHENTICATION_FAILED;
;;;614    		data->state = NOTIFY;
;;;615    		return -1;
;;;616    	}
;;;617    
;;;618    	wpa_printf(MSG_DEBUG, "IKEV2: Server authenticated successfully "
;;;619    		   "using shared keys");
;;;620    
;;;621    	return 0;
;;;622    }
000020  b010              ADD      sp,sp,#0x40
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L17.38|
000026  ab0b              ADD      r3,sp,#0x2c           ;588
000028  f5047124          ADD      r1,r4,#0x290          ;588
00002c  c906              LDM      r1,{r1,r2}            ;588
00002e  f8d40218          LDR      r0,[r4,#0x218]        ;588
000032  ad06              ADD      r5,sp,#0x18           ;588
000034  c50f              STM      r5!,{r0-r3}           ;588
000036  f504738c          ADD      r3,r4,#0x118          ;588
00003a  2001              MOVS     r0,#1                 ;588
00003c  f5047121          ADD      r1,r4,#0x284          ;588
000040  c906              LDM      r1,{r1,r2}            ;588
000042  ad02              ADD      r5,sp,#8              ;588
000044  c50f              STM      r5!,{r0-r3}           ;588
000046  f504730f          ADD      r3,r4,#0x23c          ;588
00004a  f8942270          LDRB     r2,[r4,#0x270]        ;588
00004e  e9cd2300          STRD     r2,r3,[sp,#0]         ;588
000052  f504721a          ADD      r2,r4,#0x268          ;588
000056  ca0c              LDM      r2,{r2,r3}            ;588
000058  f8d41280          LDR      r1,[r4,#0x280]        ;588
00005c  f8d4022c          LDR      r0,[r4,#0x22c]        ;588
000060  f7fffffe          BL       ikev2_derive_auth_data
000064  2800              CMP      r0,#0                 ;588
000066  da06              BGE      |L17.118|
000068  a129              ADR      r1,|L17.272|
00006a  2000              MOVS     r0,#0                 ;595
00006c  f7fffffe          BL       wpa_printf
000070  f04f30ff          MOV      r0,#0xffffffff        ;596
000074  e7d4              B        |L17.32|
                  |L17.118|
000076  f8d40280          LDR      r0,[r4,#0x280]        ;599
00007a  f7fffffe          BL       wpabuf_free
00007e  2000              MOVS     r0,#0                 ;600
000080  f8c40280          STR      r0,[r4,#0x280]        ;600
000084  f44f710b          MOV      r1,#0x22c             ;602
000088  5908              LDR      r0,[r1,r4]            ;602
00008a  f7fffffe          BL       ikev2_get_prf
00008e  4605              MOV      r5,r0                 ;602
000090  b915              CBNZ     r5,|L17.152|
000092  f04f30ff          MOV      r0,#0xffffffff        ;604
000096  e7c3              B        |L17.32|
                  |L17.152|
000098  68a8              LDR      r0,[r5,#8]            ;606
00009a  42b8              CMP      r0,r7                 ;606
00009c  d105              BNE      |L17.170|
00009e  463a              MOV      r2,r7                 ;607
0000a0  a90b              ADD      r1,sp,#0x2c           ;607
0000a2  4640              MOV      r0,r8                 ;607
0000a4  f7fffffe          BL       os_memcmp
0000a8  b1b0              CBZ      r0,|L17.216|
                  |L17.170|
0000aa  a122              ADR      r1,|L17.308|
0000ac  2000              MOVS     r0,#0                 ;608
0000ae  f7fffffe          BL       wpa_printf
0000b2  463b              MOV      r3,r7                 ;609
0000b4  4642              MOV      r2,r8                 ;609
0000b6  a128              ADR      r1,|L17.344|
0000b8  2000              MOVS     r0,#0                 ;609
0000ba  f7fffffe          BL       wpa_hexdump
0000be  aa0b              ADD      r2,sp,#0x2c           ;611
0000c0  a12e              ADR      r1,|L17.380|
0000c2  2000              MOVS     r0,#0                 ;611
0000c4  68ab              LDR      r3,[r5,#8]            ;611
0000c6  f7fffffe          BL       wpa_hexdump
0000ca  2018              MOVS     r0,#0x18              ;613
0000cc  f8a40298          STRH     r0,[r4,#0x298]        ;613
0000d0  2003              MOVS     r0,#3                 ;614
0000d2  7020              STRB     r0,[r4,#0]            ;614
0000d4  1f00              SUBS     r0,r0,#4              ;615
0000d6  e7a3              B        |L17.32|
                  |L17.216|
0000d8  a131              ADR      r1,|L17.416|
0000da  2000              MOVS     r0,#0                 ;618
0000dc  f7fffffe          BL       wpa_printf
0000e0  2000              MOVS     r0,#0                 ;621
0000e2  e79d              B        |L17.32|
;;;623    
                          ENDP

                  |L17.228|
0000e4  494b4556          DCB      "IKEV2: Unsupported authentication method %d",0
0000e8  323a2055
0000ec  6e737570
0000f0  706f7274
0000f4  65642061
0000f8  75746865
0000fc  6e746963
000100  6174696f
000104  6e206d65
000108  74686f64
00010c  20256400
                  |L17.272|
000110  494b4556          DCB      "IKEV2: Could not derive AUTH data",0
000114  323a2043
000118  6f756c64
00011c  206e6f74
000120  20646572
000124  69766520
000128  41555448
00012c  20646174
000130  6100    
000132  00                DCB      0
000133  00                DCB      0
                  |L17.308|
000134  494b4556          DCB      "IKEV2: Invalid Authentication Data",0
000138  323a2049
00013c  6e76616c
000140  69642041
000144  75746865
000148  6e746963
00014c  6174696f
000150  6e204461
000154  746100  
000157  00                DCB      0
                  |L17.344|
000158  494b4556          DCB      "IKEV2: Received Authentication Data",0
00015c  323a2052
000160  65636569
000164  76656420
000168  41757468
00016c  656e7469
000170  63617469
000174  6f6e2044
000178  61746100
                  |L17.380|
00017c  494b4556          DCB      "IKEV2: Expected Authentication Data",0
000180  323a2045
000184  78706563
000188  74656420
00018c  41757468
000190  656e7469
000194  63617469
000198  6f6e2044
00019c  61746100
                  |L17.416|
0001a0  494b4556          DCB      "IKEV2: Server authenticated successfully using shared k"
0001a4  323a2053
0001a8  65727665
0001ac  72206175
0001b0  7468656e
0001b4  74696361
0001b8  74656420
0001bc  73756363
0001c0  65737366
0001c4  756c6c79
0001c8  20757369
0001cc  6e672073
0001d0  68617265
0001d4  64206b  
0001d7  65797300          DCB      "eys",0
0001db  00                DCB      0

                          AREA ||i.ikev2_process_cert||, CODE, READONLY, ALIGN=2

                  ikev2_process_cert PROC
;;;528    
;;;529    static int ikev2_process_cert(struct ikev2_responder_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;530    			      const u8 *cert, size_t cert_len)
;;;531    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;532    	u8 cert_encoding;
;;;533    
;;;534    	if (cert == NULL) {
00000a  b964              CBNZ     r4,|L18.38|
;;;535    		if (data->peer_auth == PEER_AUTH_CERT) {
00000c  f896028c          LDRB     r0,[r6,#0x28c]
000010  b938              CBNZ     r0,|L18.34|
;;;536    			wpa_printf(MSG_INFO, "IKEV2: No Certificate received");
000012  a111              ADR      r1,|L18.88|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;537    			return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L18.30|
;;;538    		}
;;;539    		return 0;
;;;540    	}
;;;541    
;;;542    	if (cert_len < 1) {
;;;543    		wpa_printf(MSG_INFO, "IKEV2: No Cert Encoding field");
;;;544    		return -1;
;;;545    	}
;;;546    
;;;547    	cert_encoding = cert[0];
;;;548    	cert++;
;;;549    	cert_len--;
;;;550    
;;;551    	wpa_printf(MSG_DEBUG, "IKEV2: Cert Encoding %d", cert_encoding);
;;;552    	wpa_hexdump(MSG_MSGDUMP, "IKEV2: Certificate Data", cert, cert_len);
;;;553    
;;;554    	/* TODO: validate certificate */
;;;555    
;;;556    	return 0;
;;;557    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L18.34|
000022  2000              MOVS     r0,#0                 ;539
000024  e7fb              B        |L18.30|
                  |L18.38|
000026  b935              CBNZ     r5,|L18.54|
000028  a113              ADR      r1,|L18.120|
00002a  2000              MOVS     r0,#0                 ;543
00002c  f7fffffe          BL       wpa_printf
000030  f04f30ff          MOV      r0,#0xffffffff        ;544
000034  e7f3              B        |L18.30|
                  |L18.54|
000036  7827              LDRB     r7,[r4,#0]            ;547
000038  1c64              ADDS     r4,r4,#1              ;548
00003a  1e6d              SUBS     r5,r5,#1              ;549
00003c  463a              MOV      r2,r7                 ;551
00003e  a116              ADR      r1,|L18.152|
000040  2000              MOVS     r0,#0                 ;551
000042  f7fffffe          BL       wpa_printf
000046  462b              MOV      r3,r5                 ;552
000048  4622              MOV      r2,r4                 ;552
00004a  a119              ADR      r1,|L18.176|
00004c  2000              MOVS     r0,#0                 ;552
00004e  f7fffffe          BL       wpa_hexdump
000052  2000              MOVS     r0,#0                 ;556
000054  e7e3              B        |L18.30|
;;;558    
                          ENDP

000056  0000              DCW      0x0000
                  |L18.88|
000058  494b4556          DCB      "IKEV2: No Certificate received",0
00005c  323a204e
000060  6f204365
000064  72746966
000068  69636174
00006c  65207265
000070  63656976
000074  656400  
000077  00                DCB      0
                  |L18.120|
000078  494b4556          DCB      "IKEV2: No Cert Encoding field",0
00007c  323a204e
000080  6f204365
000084  72742045
000088  6e636f64
00008c  696e6720
000090  6669656c
000094  6400    
000096  00                DCB      0
000097  00                DCB      0
                  |L18.152|
000098  494b4556          DCB      "IKEV2: Cert Encoding %d",0
00009c  323a2043
0000a0  65727420
0000a4  456e636f
0000a8  64696e67
0000ac  20256400
                  |L18.176|
0000b0  494b4556          DCB      "IKEV2: Certificate Data",0
0000b4  323a2043
0000b8  65727469
0000bc  66696361
0000c0  74652044
0000c4  61746100

                          AREA ||i.ikev2_process_idi||, CODE, READONLY, ALIGN=2

                  ikev2_process_idi PROC
;;;495    
;;;496    static int ikev2_process_idi(struct ikev2_responder_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;497    			     const u8 *idi, size_t idi_len)
;;;498    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;499    	u8 id_type;
;;;500    
;;;501    	if (idi == NULL) {
00000a  b93e              CBNZ     r6,|L19.28|
;;;502    		wpa_printf(MSG_INFO, "IKEV2: No IDi received");
00000c  a11c              ADR      r1,|L19.128|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;503    		return -1;
000014  f04f30ff          MOV      r0,#0xffffffff
                  |L19.24|
;;;504    	}
;;;505    
;;;506    	if (idi_len < 4) {
;;;507    		wpa_printf(MSG_INFO, "IKEV2: Too short IDi payload");
;;;508    		return -1;
;;;509    	}
;;;510    
;;;511    	id_type = idi[0];
;;;512    	idi += 4;
;;;513    	idi_len -= 4;
;;;514    
;;;515    	wpa_printf(MSG_DEBUG, "IKEV2: IDi ID Type %d", id_type);
;;;516    	wpa_hexdump_ascii(MSG_DEBUG, "IKEV2: IDi", idi, idi_len);
;;;517    	os_free(data->IDi);
;;;518    	data->IDi = os_malloc(idi_len);
;;;519    	if (data->IDi == NULL)
;;;520    		return -1;
;;;521    	os_memcpy(data->IDi, idi, idi_len);
;;;522    	data->IDi_len = idi_len;
;;;523    	data->IDi_type = id_type;
;;;524    
;;;525    	return 0;
;;;526    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L19.28|
00001c  2d04              CMP      r5,#4                 ;506
00001e  d206              BCS      |L19.46|
000020  a11d              ADR      r1,|L19.152|
000022  2000              MOVS     r0,#0                 ;507
000024  f7fffffe          BL       wpa_printf
000028  f04f30ff          MOV      r0,#0xffffffff        ;508
00002c  e7f4              B        |L19.24|
                  |L19.46|
00002e  7837              LDRB     r7,[r6,#0]            ;511
000030  1d36              ADDS     r6,r6,#4              ;512
000032  1f2d              SUBS     r5,r5,#4              ;513
000034  463a              MOV      r2,r7                 ;515
000036  a120              ADR      r1,|L19.184|
000038  2000              MOVS     r0,#0                 ;515
00003a  f7fffffe          BL       wpa_printf
00003e  462b              MOV      r3,r5                 ;516
000040  4632              MOV      r2,r6                 ;516
000042  a123              ADR      r1,|L19.208|
000044  2000              MOVS     r0,#0                 ;516
000046  f7fffffe          BL       wpa_hexdump_ascii
00004a  f8d40268          LDR      r0,[r4,#0x268]        ;517
00004e  f7fffffe          BL       os_free
000052  4628              MOV      r0,r5                 ;518
000054  f7fffffe          BL       os_malloc
000058  f8c40268          STR      r0,[r4,#0x268]        ;518
00005c  f8d40268          LDR      r0,[r4,#0x268]        ;519
000060  b910              CBNZ     r0,|L19.104|
000062  f04f30ff          MOV      r0,#0xffffffff        ;520
000066  e7d7              B        |L19.24|
                  |L19.104|
000068  462a              MOV      r2,r5                 ;521
00006a  4631              MOV      r1,r6                 ;521
00006c  f8d40268          LDR      r0,[r4,#0x268]        ;521
000070  f7fffffe          BL       os_memcpy
000074  f8c4526c          STR      r5,[r4,#0x26c]        ;522
000078  f8847270          STRB     r7,[r4,#0x270]        ;523
00007c  2000              MOVS     r0,#0                 ;525
00007e  e7cb              B        |L19.24|
;;;527    
                          ENDP

                  |L19.128|
000080  494b4556          DCB      "IKEV2: No IDi received",0
000084  323a204e
000088  6f204944
00008c  69207265
000090  63656976
000094  656400  
000097  00                DCB      0
                  |L19.152|
000098  494b4556          DCB      "IKEV2: Too short IDi payload",0
00009c  323a2054
0000a0  6f6f2073
0000a4  686f7274
0000a8  20494469
0000ac  20706179
0000b0  6c6f6164
0000b4  00      
0000b5  00                DCB      0
0000b6  00                DCB      0
0000b7  00                DCB      0
                  |L19.184|
0000b8  494b4556          DCB      "IKEV2: IDi ID Type %d",0
0000bc  323a2049
0000c0  44692049
0000c4  44205479
0000c8  70652025
0000cc  6400    
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L19.208|
0000d0  494b4556          DCB      "IKEV2: IDi",0
0000d4  323a2049
0000d8  446900  
0000db  00                DCB      0

                          AREA ||i.ikev2_process_kei||, CODE, READONLY, ALIGN=2

                  ikev2_process_kei PROC
;;;384    
;;;385    static int ikev2_process_kei(struct ikev2_responder_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;386    			     const u8 *kei, size_t kei_len)
;;;387    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;388    	u16 group;
;;;389    
;;;390    	/*
;;;391    	 * Key Exchange Payload:
;;;392    	 * DH Group # (16 bits)
;;;393    	 * RESERVED (16 bits)
;;;394    	 * Key Exchange Data (Diffie-Hellman public value)
;;;395    	 */
;;;396    
;;;397    	if (kei == NULL) {
00000a  b93e              CBNZ     r6,|L20.28|
;;;398    		wpa_printf(MSG_INFO, "IKEV2: KEi not received");
00000c  a132              ADR      r1,|L20.216|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;399    		return -1;
000014  f04f30ff          MOV      r0,#0xffffffff
                  |L20.24|
;;;400    	}
;;;401    
;;;402    	if (kei_len < 4 + 96) {
;;;403    		wpa_printf(MSG_INFO, "IKEV2: Too show Key Exchange Payload");
;;;404    		return -1;
;;;405    	}
;;;406    
;;;407    	group = WPA_GET_BE16(kei);
;;;408    	wpa_printf(MSG_DEBUG, "IKEV2: KEi DH Group #%u", group);
;;;409    
;;;410    	if (group != data->proposal.dh) {
;;;411    		wpa_printf(MSG_DEBUG, "IKEV2: KEi DH Group #%u does not match "
;;;412    			   "with the selected proposal (%u)",
;;;413    			   group, data->proposal.dh);
;;;414    		/* Reject message with Notify payload of type
;;;415    		 * INVALID_KE_PAYLOAD (RFC 4306, Sect. 3.4) */
;;;416    		data->error_type = INVALID_KE_PAYLOAD;
;;;417    		data->state = NOTIFY;
;;;418    		return -1;
;;;419    	}
;;;420    
;;;421    	if (data->dh == NULL) {
;;;422    		wpa_printf(MSG_INFO, "IKEV2: Unsupported DH group");
;;;423    		return -1;
;;;424    	}
;;;425    
;;;426    	/* RFC 4306, Section 3.4:
;;;427    	 * The length of DH public value MUST be equal to the lenght of the
;;;428    	 * prime modulus.
;;;429    	 */
;;;430    	if (kei_len - 4 != data->dh->prime_len) {
;;;431    		wpa_printf(MSG_INFO, "IKEV2: Invalid DH public value length "
;;;432    			   "%ld (expected %ld)",
;;;433    			   (long) (kei_len - 4), (long) data->dh->prime_len);
;;;434    		return -1;
;;;435    	}
;;;436    
;;;437    	wpabuf_free(data->i_dh_public);
;;;438    	data->i_dh_public = wpabuf_alloc(kei_len - 4);
;;;439    	if (data->i_dh_public == NULL)
;;;440    		return -1;
;;;441    	wpabuf_put_data(data->i_dh_public, kei + 4, kei_len - 4);
;;;442    
;;;443    	wpa_hexdump_buf(MSG_DEBUG, "IKEV2: KEi Diffie-Hellman Public Value",
;;;444    			data->i_dh_public);
;;;445    	
;;;446    	return 0;
;;;447    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L20.28|
00001c  2d64              CMP      r5,#0x64              ;402
00001e  d206              BCS      |L20.46|
000020  a133              ADR      r1,|L20.240|
000022  2000              MOVS     r0,#0                 ;403
000024  f7fffffe          BL       wpa_printf
000028  f04f30ff          MOV      r0,#0xffffffff        ;404
00002c  e7f4              B        |L20.24|
                  |L20.46|
00002e  7870              LDRB     r0,[r6,#1]            ;407
000030  7831              LDRB     r1,[r6,#0]            ;407
000032  ea402701          ORR      r7,r0,r1,LSL #8       ;407
000036  463a              MOV      r2,r7                 ;408
000038  a137              ADR      r1,|L20.280|
00003a  2000              MOVS     r0,#0                 ;408
00003c  f7fffffe          BL       wpa_printf
000040  f44f700d          MOV      r0,#0x234             ;410
000044  5900              LDR      r0,[r0,r4]            ;410
000046  42b8              CMP      r0,r7                 ;410
000048  d00e              BEQ      |L20.104|
00004a  f44f700d          MOV      r0,#0x234             ;411
00004e  5903              LDR      r3,[r0,r4]            ;411
000050  463a              MOV      r2,r7                 ;411
000052  4937              LDR      r1,|L20.304|
000054  2000              MOVS     r0,#0                 ;411
000056  f7fffffe          BL       wpa_printf
00005a  2011              MOVS     r0,#0x11              ;416
00005c  f8a40298          STRH     r0,[r4,#0x298]        ;416
000060  2003              MOVS     r0,#3                 ;417
000062  7020              STRB     r0,[r4,#0]            ;417
000064  1f00              SUBS     r0,r0,#4              ;418
000066  e7d7              B        |L20.24|
                  |L20.104|
000068  f8d40238          LDR      r0,[r4,#0x238]        ;421
00006c  b930              CBNZ     r0,|L20.124|
00006e  a131              ADR      r1,|L20.308|
000070  2000              MOVS     r0,#0                 ;422
000072  f7fffffe          BL       wpa_printf
000076  f04f30ff          MOV      r0,#0xffffffff        ;423
00007a  e7cd              B        |L20.24|
                  |L20.124|
00007c  1f28              SUBS     r0,r5,#4              ;430
00007e  f8d41238          LDR      r1,[r4,#0x238]        ;430
000082  6909              LDR      r1,[r1,#0x10]         ;430
000084  4288              CMP      r0,r1                 ;430
000086  d00a              BEQ      |L20.158|
000088  f8d40238          LDR      r0,[r4,#0x238]        ;431
00008c  1f2a              SUBS     r2,r5,#4              ;431
00008e  a130              ADR      r1,|L20.336|
000090  6903              LDR      r3,[r0,#0x10]         ;431
000092  2000              MOVS     r0,#0                 ;431
000094  f7fffffe          BL       wpa_printf
000098  f04f30ff          MOV      r0,#0xffffffff        ;434
00009c  e7bc              B        |L20.24|
                  |L20.158|
00009e  f8d4021c          LDR      r0,[r4,#0x21c]        ;437
0000a2  f7fffffe          BL       wpabuf_free
0000a6  1f28              SUBS     r0,r5,#4              ;438
0000a8  f7fffffe          BL       wpabuf_alloc
0000ac  f8c4021c          STR      r0,[r4,#0x21c]        ;438
0000b0  f8d4021c          LDR      r0,[r4,#0x21c]        ;439
0000b4  b910              CBNZ     r0,|L20.188|
0000b6  f04f30ff          MOV      r0,#0xffffffff        ;440
0000ba  e7ad              B        |L20.24|
                  |L20.188|
0000bc  1f2a              SUBS     r2,r5,#4              ;441
0000be  1d31              ADDS     r1,r6,#4              ;441
0000c0  f8d4021c          LDR      r0,[r4,#0x21c]        ;441
0000c4  f7fffffe          BL       wpabuf_put_data
0000c8  a130              ADR      r1,|L20.396|
0000ca  2000              MOVS     r0,#0                 ;443
0000cc  f8d4221c          LDR      r2,[r4,#0x21c]        ;443
0000d0  f7fffffe          BL       wpa_hexdump_buf
0000d4  2000              MOVS     r0,#0                 ;446
0000d6  e79f              B        |L20.24|
;;;448    
                          ENDP

                  |L20.216|
0000d8  494b4556          DCB      "IKEV2: KEi not received",0
0000dc  323a204b
0000e0  4569206e
0000e4  6f742072
0000e8  65636569
0000ec  76656400
                  |L20.240|
0000f0  494b4556          DCB      "IKEV2: Too show Key Exchange Payload",0
0000f4  323a2054
0000f8  6f6f2073
0000fc  686f7720
000100  4b657920
000104  45786368
000108  616e6765
00010c  20506179
000110  6c6f6164
000114  00      
000115  00                DCB      0
000116  00                DCB      0
000117  00                DCB      0
                  |L20.280|
000118  494b4556          DCB      "IKEV2: KEi DH Group #%u",0
00011c  323a204b
000120  45692044
000124  48204772
000128  6f757020
00012c  23257500
                  |L20.304|
                          DCD      ||.constdata||+0x50
                  |L20.308|
000134  494b4556          DCB      "IKEV2: Unsupported DH group",0
000138  323a2055
00013c  6e737570
000140  706f7274
000144  65642044
000148  48206772
00014c  6f757000
                  |L20.336|
000150  494b4556          DCB      "IKEV2: Invalid DH public value length %ld (expected %ld"
000154  323a2049
000158  6e76616c
00015c  69642044
000160  48207075
000164  626c6963
000168  2076616c
00016c  7565206c
000170  656e6774
000174  6820256c
000178  64202865
00017c  78706563
000180  74656420
000184  256c64  
000187  2900              DCB      ")",0
000189  00                DCB      0
00018a  00                DCB      0
00018b  00                DCB      0
                  |L20.396|
00018c  494b4556          DCB      "IKEV2: KEi Diffie-Hellman Public Value",0
000190  323a204b
000194  45692044
000198  69666669
00019c  652d4865
0001a0  6c6c6d61
0001a4  6e205075
0001a8  626c6963
0001ac  2056616c
0001b0  756500  
0001b3  00                DCB      0

                          AREA ||i.ikev2_process_ni||, CODE, READONLY, ALIGN=2

                  ikev2_process_ni PROC
;;;449    
;;;450    static int ikev2_process_ni(struct ikev2_responder_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;451    			    const u8 *ni, size_t ni_len)
;;;452    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;453    	if (ni == NULL) {
000008  b936              CBNZ     r6,|L21.24|
;;;454    		wpa_printf(MSG_INFO, "IKEV2: Ni not received");
00000a  a113              ADR      r1,|L21.88|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       wpa_printf
;;;455    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L21.22|
;;;456    	}
;;;457    
;;;458    	if (ni_len < IKEV2_NONCE_MIN_LEN || ni_len > IKEV2_NONCE_MAX_LEN) {
;;;459    		wpa_printf(MSG_INFO, "IKEV2: Invalid Ni length %ld",
;;;460    		           (long) ni_len);
;;;461    		return -1;
;;;462    	}
;;;463    
;;;464    #ifdef CCNS_PL
;;;465    	/* Zeros are removed incorrectly from the beginning of the nonces */
;;;466    	while (ni_len > 1 && *ni == 0) {
;;;467    		ni_len--;
;;;468    		ni++;
;;;469    	}
;;;470    #endif /* CCNS_PL */
;;;471    
;;;472    	data->i_nonce_len = ni_len;
;;;473    	os_memcpy(data->i_nonce, ni, ni_len);
;;;474    	wpa_hexdump(MSG_MSGDUMP, "IKEV2: Ni",
;;;475    		    data->i_nonce, data->i_nonce_len);
;;;476    
;;;477    	return 0;
;;;478    }
000016  bd70              POP      {r4-r6,pc}
                  |L21.24|
000018  2d10              CMP      r5,#0x10              ;458
00001a  d302              BCC      |L21.34|
00001c  f5b57f80          CMP      r5,#0x100             ;458
000020  d907              BLS      |L21.50|
                  |L21.34|
000022  462a              MOV      r2,r5                 ;459
000024  a112              ADR      r1,|L21.112|
000026  2000              MOVS     r0,#0                 ;459
000028  f7fffffe          BL       wpa_printf
00002c  f04f30ff          MOV      r0,#0xffffffff        ;461
000030  e7f1              B        |L21.22|
                  |L21.50|
000032  f8c45114          STR      r5,[r4,#0x114]        ;472
000036  462a              MOV      r2,r5                 ;473
000038  4631              MOV      r1,r6                 ;473
00003a  f1040011          ADD      r0,r4,#0x11           ;473
00003e  f7fffffe          BL       os_memcpy
000042  f1040211          ADD      r2,r4,#0x11           ;474
000046  a112              ADR      r1,|L21.144|
000048  2000              MOVS     r0,#0                 ;474
00004a  f8d43114          LDR      r3,[r4,#0x114]        ;474
00004e  f7fffffe          BL       wpa_hexdump
000052  2000              MOVS     r0,#0                 ;477
000054  e7df              B        |L21.22|
;;;479    
                          ENDP

000056  0000              DCW      0x0000
                  |L21.88|
000058  494b4556          DCB      "IKEV2: Ni not received",0
00005c  323a204e
000060  69206e6f
000064  74207265
000068  63656976
00006c  656400  
00006f  00                DCB      0
                  |L21.112|
000070  494b4556          DCB      "IKEV2: Invalid Ni length %ld",0
000074  323a2049
000078  6e76616c
00007c  6964204e
000080  69206c65
000084  6e677468
000088  20256c64
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L21.144|
000090  494b4556          DCB      "IKEV2: Ni",0
000094  323a204e
000098  6900    
00009a  00                DCB      0
00009b  00                DCB      0

                          AREA ||i.ikev2_process_sa_auth||, CODE, READONLY, ALIGN=1

                  ikev2_process_sa_auth PROC
;;;684    
;;;685    static int ikev2_process_sa_auth(struct ikev2_responder_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;686    				 const struct ikev2_hdr *hdr,
;;;687    				 struct ikev2_payloads *pl)
;;;688    {
000004  b086              SUB      sp,sp,#0x18
000006  4604              MOV      r4,r0
000008  460f              MOV      r7,r1
00000a  4615              MOV      r5,r2
;;;689    	u8 *decrypted;
;;;690    	size_t decrypted_len;
;;;691    	int ret;
;;;692    
;;;693    	decrypted = ikev2_decrypt_payload(data->proposal.encr,
00000c  ab05              ADD      r3,sp,#0x14
00000e  e9d5120e          LDRD     r1,r2,[r5,#0x38]
000012  e9cd7100          STRD     r7,r1,[sp,#0]
000016  e9cd2302          STRD     r2,r3,[sp,#8]
00001a  f44f720a          MOV      r2,#0x228
00001e  5911              LDR      r1,[r2,r4]
000020  f44f720c          MOV      r2,#0x230
000024  5910              LDR      r0,[r2,r4]
000026  2301              MOVS     r3,#1
000028  f504720f          ADD      r2,r4,#0x23c
00002c  f7fffffe          BL       ikev2_decrypt_payload
000030  4606              MOV      r6,r0
;;;694    					  data->proposal.integ,
;;;695    					  &data->keys, 1, hdr, pl->encrypted,
;;;696    					  pl->encrypted_len, &decrypted_len);
;;;697    	if (decrypted == NULL)
000032  b926              CBNZ     r6,|L22.62|
;;;698    		return -1;
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L22.56|
;;;699    
;;;700    	ret = ikev2_process_sa_auth_decrypted(data, pl->encr_next_payload,
;;;701    					      decrypted, decrypted_len);
;;;702    	os_free(decrypted);
;;;703    
;;;704    	return ret;
;;;705    }
000038  b006              ADD      sp,sp,#0x18
00003a  e8bd81f0          POP      {r4-r8,pc}
                  |L22.62|
00003e  f8951040          LDRB     r1,[r5,#0x40]         ;700
000042  4632              MOV      r2,r6                 ;700
000044  4620              MOV      r0,r4                 ;700
000046  9b05              LDR      r3,[sp,#0x14]         ;700
000048  f7fffffe          BL       ikev2_process_sa_auth_decrypted
00004c  4680              MOV      r8,r0                 ;700
00004e  4630              MOV      r0,r6                 ;702
000050  f7fffffe          BL       os_free
000054  4640              MOV      r0,r8                 ;704
000056  e7ef              B        |L22.56|
;;;706    
                          ENDP


                          AREA ||i.ikev2_process_sa_auth_decrypted||, CODE, READONLY, ALIGN=2

                  ikev2_process_sa_auth_decrypted PROC
;;;660    
;;;661    static int ikev2_process_sa_auth_decrypted(struct ikev2_responder_data *data,
000000  b5f0              PUSH     {r4-r7,lr}
;;;662    					   u8 next_payload,
;;;663    					   u8 *payload, size_t payload_len)
;;;664    {
000002  b093              SUB      sp,sp,#0x4c
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;665    	struct ikev2_payloads pl;
;;;666    
;;;667    	wpa_printf(MSG_DEBUG, "IKEV2: Processing decrypted payloads");
00000c  a116              ADR      r1,|L23.104|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;668    
;;;669    	if (ikev2_parse_payloads(&pl, next_payload, payload, payload +
000014  1963              ADDS     r3,r4,r5
000016  4622              MOV      r2,r4
000018  4639              MOV      r1,r7
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       ikev2_parse_payloads
000020  2800              CMP      r0,#0
000022  da07              BGE      |L23.52|
;;;670    				 payload_len) < 0) {
;;;671    		wpa_printf(MSG_INFO, "IKEV2: Failed to parse decrypted "
000024  a11a              ADR      r1,|L23.144|
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       wpa_printf
;;;672    			   "payloads");
;;;673    		return -1;
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L23.48|
;;;674    	}
;;;675    
;;;676    	if (ikev2_process_idi(data, pl.idi, pl.idi_len) < 0 ||
;;;677    	    ikev2_process_cert(data, pl.cert, pl.cert_len) < 0 ||
;;;678    	    ikev2_process_auth(data, pl.auth, pl.auth_len) < 0)
;;;679    		return -1;
;;;680    
;;;681    	return 0;
;;;682    }
000030  b013              ADD      sp,sp,#0x4c
000032  bdf0              POP      {r4-r7,pc}
                  |L23.52|
000034  4630              MOV      r0,r6                 ;676
000036  e9dd1204          LDRD     r1,r2,[sp,#0x10]      ;676
00003a  f7fffffe          BL       ikev2_process_idi
00003e  2800              CMP      r0,#0                 ;676
000040  db0d              BLT      |L23.94|
000042  4630              MOV      r0,r6                 ;677
000044  e9dd1208          LDRD     r1,r2,[sp,#0x20]      ;677
000048  f7fffffe          BL       ikev2_process_cert
00004c  2800              CMP      r0,#0                 ;677
00004e  db06              BLT      |L23.94|
000050  4630              MOV      r0,r6                 ;678
000052  e9dd120a          LDRD     r1,r2,[sp,#0x28]      ;678
000056  f7fffffe          BL       ikev2_process_auth
00005a  2800              CMP      r0,#0                 ;678
00005c  da02              BGE      |L23.100|
                  |L23.94|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;679
000062  e7e5              B        |L23.48|
                  |L23.100|
000064  2000              MOVS     r0,#0                 ;681
000066  e7e3              B        |L23.48|
;;;683    
                          ENDP

                  |L23.104|
000068  494b4556          DCB      "IKEV2: Processing decrypted payloads",0
00006c  323a2050
000070  726f6365
000074  7373696e
000078  67206465
00007c  63727970
000080  74656420
000084  7061796c
000088  6f616473
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L23.144|
000090  494b4556          DCB      "IKEV2: Failed to parse decrypted payloads",0
000094  323a2046
000098  61696c65
00009c  6420746f
0000a0  20706172
0000a4  73652064
0000a8  65637279
0000ac  70746564
0000b0  20706179
0000b4  6c6f6164
0000b8  7300    
0000ba  00                DCB      0
0000bb  00                DCB      0

                          AREA ||i.ikev2_process_sa_init||, CODE, READONLY, ALIGN=1

                  ikev2_process_sa_init PROC
;;;480    
;;;481    static int ikev2_process_sa_init(struct ikev2_responder_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;482    				 const struct ikev2_hdr *hdr,
;;;483    				 struct ikev2_payloads *pl)
;;;484    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;485    	if (ikev2_process_sai1(data, pl->sa, pl->sa_len) < 0 ||
000008  4628              MOV      r0,r5
00000a  e9d41200          LDRD     r1,r2,[r4,#0]
00000e  f7fffffe          BL       ikev2_process_sai1
000012  2800              CMP      r0,#0
000014  db0d              BLT      |L24.50|
;;;486    	    ikev2_process_kei(data, pl->ke, pl->ke_len) < 0 ||
000016  4628              MOV      r0,r5
000018  e9d41202          LDRD     r1,r2,[r4,#8]
00001c  f7fffffe          BL       ikev2_process_kei
000020  2800              CMP      r0,#0
000022  db06              BLT      |L24.50|
;;;487    	    ikev2_process_ni(data, pl->nonce, pl->nonce_len) < 0)
000024  4628              MOV      r0,r5
000026  e9d4120c          LDRD     r1,r2,[r4,#0x30]
00002a  f7fffffe          BL       ikev2_process_ni
00002e  2800              CMP      r0,#0
000030  da02              BGE      |L24.56|
                  |L24.50|
;;;488    		return -1;
000032  f04f30ff          MOV      r0,#0xffffffff
                  |L24.54|
;;;489    
;;;490    	os_memcpy(data->i_spi, hdr->i_spi, IKEV2_SPI_LEN);
;;;491    
;;;492    	return 0;
;;;493    }
000036  bd70              POP      {r4-r6,pc}
                  |L24.56|
000038  2208              MOVS     r2,#8                 ;490
00003a  4631              MOV      r1,r6                 ;490
00003c  1c68              ADDS     r0,r5,#1              ;490
00003e  f7fffffe          BL       os_memcpy
000042  2000              MOVS     r0,#0                 ;492
000044  e7f7              B        |L24.54|
;;;494    
                          ENDP


                          AREA ||i.ikev2_process_sai1||, CODE, READONLY, ALIGN=2

                  ikev2_process_sai1 PROC
;;;324    
;;;325    static int ikev2_process_sai1(struct ikev2_responder_data *data,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;326    			      const u8 *sai1, size_t sai1_len)
;;;327    {
000004  b088              SUB      sp,sp,#0x20
000006  4604              MOV      r4,r0
000008  460e              MOV      r6,r1
00000a  4690              MOV      r8,r2
;;;328    	struct ikev2_proposal_data prop;
;;;329    	const u8 *pos, *end;
;;;330    	int found = 0;
00000c  f04f0900          MOV      r9,#0
;;;331    
;;;332    	/* Security Association Payloads: <Proposals> */
;;;333    
;;;334    	if (sai1 == NULL) {
000010  b946              CBNZ     r6,|L25.36|
;;;335    		wpa_printf(MSG_INFO, "IKEV2: SAi1 not received");
000012  a137              ADR      r1,|L25.240|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;336    		return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L25.30|
;;;337    	}
;;;338    
;;;339    	os_memset(&prop, 0, sizeof(prop));
;;;340    	prop.proposal_num = 1;
;;;341    
;;;342    	pos = sai1;
;;;343    	end = sai1 + sai1_len;
;;;344    
;;;345    	while (pos < end) {
;;;346    		int plen;
;;;347    
;;;348    		prop.integ = -1;
;;;349    		prop.prf = -1;
;;;350    		prop.encr = -1;
;;;351    		prop.dh = -1;
;;;352    		plen = ikev2_parse_proposal(&prop, pos, end);
;;;353    		if (plen < 0)
;;;354    			return -1;
;;;355    
;;;356    		if (!found && prop.integ != -1 && prop.prf != -1 &&
;;;357    		    prop.encr != -1 && prop.dh != -1) {
;;;358    			os_memcpy(&data->proposal, &prop, sizeof(prop));
;;;359    			data->dh = dh_groups_get(prop.dh);
;;;360    			found = 1;
;;;361    		}
;;;362    
;;;363    		pos += plen;
;;;364    	}
;;;365    
;;;366    	if (pos != end) {
;;;367    		wpa_printf(MSG_INFO, "IKEV2: Unexpected data after proposals");
;;;368    		return -1;
;;;369    	}
;;;370    
;;;371    	if (!found) {
;;;372    		wpa_printf(MSG_INFO, "IKEV2: No acceptable proposal found");
;;;373    		return -1;
;;;374    	}
;;;375    
;;;376    	wpa_printf(MSG_DEBUG, "IKEV2: Accepted proposal #%d: ENCR:%d PRF:%d "
;;;377    		   "INTEG:%d D-H:%d", data->proposal.proposal_num,
;;;378    		   data->proposal.encr, data->proposal.prf,
;;;379    		   data->proposal.integ, data->proposal.dh);
;;;380    
;;;381    	return 0;
;;;382    }
00001e  b008              ADD      sp,sp,#0x20
000020  e8bd87f0          POP      {r4-r10,pc}
                  |L25.36|
000024  2214              MOVS     r2,#0x14              ;339
000026  2100              MOVS     r1,#0                 ;339
000028  a803              ADD      r0,sp,#0xc            ;339
00002a  f7fffffe          BL       os_memset
00002e  2001              MOVS     r0,#1                 ;340
000030  f88d000c          STRB     r0,[sp,#0xc]          ;340
000034  4635              MOV      r5,r6                 ;342
000036  eb060708          ADD      r7,r6,r8              ;343
00003a  e02f              B        |L25.156|
                  |L25.60|
00003c  f04f30ff          MOV      r0,#0xffffffff        ;348
000040  9004              STR      r0,[sp,#0x10]         ;348
000042  9005              STR      r0,[sp,#0x14]         ;349
000044  9006              STR      r0,[sp,#0x18]         ;350
000046  9007              STR      r0,[sp,#0x1c]         ;351
000048  463a              MOV      r2,r7                 ;352
00004a  4629              MOV      r1,r5                 ;352
00004c  a803              ADD      r0,sp,#0xc            ;352
00004e  f7fffffe          BL       ikev2_parse_proposal
000052  4682              MOV      r10,r0                ;352
000054  f1ba0f00          CMP      r10,#0                ;353
000058  da02              BGE      |L25.96|
00005a  f04f30ff          MOV      r0,#0xffffffff        ;354
00005e  e7de              B        |L25.30|
                  |L25.96|
000060  f1b90f00          CMP      r9,#0                 ;356
000064  d118              BNE      |L25.152|
000066  9804              LDR      r0,[sp,#0x10]         ;356
000068  1c40              ADDS     r0,r0,#1              ;356
00006a  d015              BEQ      |L25.152|
00006c  9805              LDR      r0,[sp,#0x14]         ;356
00006e  1c40              ADDS     r0,r0,#1              ;356
000070  d012              BEQ      |L25.152|
000072  9806              LDR      r0,[sp,#0x18]         ;357
000074  1c40              ADDS     r0,r0,#1              ;357
000076  d00f              BEQ      |L25.152|
000078  9807              LDR      r0,[sp,#0x1c]         ;357
00007a  1c40              ADDS     r0,r0,#1              ;357
00007c  d00c              BEQ      |L25.152|
00007e  2214              MOVS     r2,#0x14              ;358
000080  a903              ADD      r1,sp,#0xc            ;358
000082  f5047009          ADD      r0,r4,#0x224          ;358
000086  f7fffffe          BL       os_memcpy
00008a  9807              LDR      r0,[sp,#0x1c]         ;359
00008c  f7fffffe          BL       dh_groups_get
000090  f8c40238          STR      r0,[r4,#0x238]        ;359
000094  f04f0901          MOV      r9,#1                 ;360
                  |L25.152|
000098  4455              ADD      r5,r5,r10             ;363
00009a  bf00              NOP                            ;364
                  |L25.156|
00009c  42bd              CMP      r5,r7                 ;345
00009e  d3cd              BCC      |L25.60|
0000a0  42bd              CMP      r5,r7                 ;366
0000a2  d006              BEQ      |L25.178|
0000a4  a119              ADR      r1,|L25.268|
0000a6  2000              MOVS     r0,#0                 ;367
0000a8  f7fffffe          BL       wpa_printf
0000ac  f04f30ff          MOV      r0,#0xffffffff        ;368
0000b0  e7b5              B        |L25.30|
                  |L25.178|
0000b2  f1b90f00          CMP      r9,#0                 ;371
0000b6  d106              BNE      |L25.198|
0000b8  a11e              ADR      r1,|L25.308|
0000ba  2000              MOVS     r0,#0                 ;372
0000bc  f7fffffe          BL       wpa_printf
0000c0  f04f30ff          MOV      r0,#0xffffffff        ;373
0000c4  e7ab              B        |L25.30|
                  |L25.198|
0000c6  f44f700d          MOV      r0,#0x234             ;376
0000ca  5903              LDR      r3,[r0,r4]            ;376
0000cc  f44f700a          MOV      r0,#0x228             ;376
0000d0  5902              LDR      r2,[r0,r4]            ;376
0000d2  1d00              ADDS     r0,r0,#4              ;376
0000d4  5901              LDR      r1,[r0,r4]            ;376
0000d6  1d00              ADDS     r0,r0,#4              ;376
0000d8  e88d000e          STM      sp,{r1-r3}            ;376
0000dc  5903              LDR      r3,[r0,r4]            ;376
0000de  f8942224          LDRB     r2,[r4,#0x224]        ;376
0000e2  a11d              ADR      r1,|L25.344|
0000e4  2000              MOVS     r0,#0                 ;376
0000e6  f7fffffe          BL       wpa_printf
0000ea  2000              MOVS     r0,#0                 ;381
0000ec  e797              B        |L25.30|
;;;383    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L25.240|
0000f0  494b4556          DCB      "IKEV2: SAi1 not received",0
0000f4  323a2053
0000f8  41693120
0000fc  6e6f7420
000100  72656365
000104  69766564
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L25.268|
00010c  494b4556          DCB      "IKEV2: Unexpected data after proposals",0
000110  323a2055
000114  6e657870
000118  65637465
00011c  64206461
000120  74612061
000124  66746572
000128  2070726f
00012c  706f7361
000130  6c7300  
000133  00                DCB      0
                  |L25.308|
000134  494b4556          DCB      "IKEV2: No acceptable proposal found",0
000138  323a204e
00013c  6f206163
000140  63657074
000144  61626c65
000148  2070726f
00014c  706f7361
000150  6c20666f
000154  756e6400
                  |L25.344|
000158  494b4556          DCB      "IKEV2: Accepted proposal #%d: ENCR:%d PRF:%d INTEG:%d D"
00015c  323a2041
000160  63636570
000164  74656420
000168  70726f70
00016c  6f73616c
000170  20232564
000174  3a20454e
000178  43523a25
00017c  64205052
000180  463a2564
000184  20494e54
000188  45473a25
00018c  642044  
00018f  2d483a25          DCB      "-H:%d",0
000193  6400    
000195  00                DCB      0
000196  00                DCB      0
000197  00                DCB      0

                          AREA ||i.ikev2_responder_build||, CODE, READONLY, ALIGN=1

                  ikev2_responder_build PROC
;;;1286   
;;;1287   struct wpabuf * ikev2_responder_build(struct ikev2_responder_data *data)
000000  b510              PUSH     {r4,lr}
;;;1288   {
000002  4604              MOV      r4,r0
;;;1289   	switch (data->state) {
000004  7820              LDRB     r0,[r4,#0]
000006  2806              CMP      r0,#6
000008  d215              BCS      |L26.54|
00000a  e8dff000          TBB      [pc,r0]
00000e  0307              DCB      0x03,0x07
000010  0b0d1112          DCB      0x0b,0x0d,0x11,0x12
;;;1290   	case SA_INIT:
;;;1291   		return ikev2_build_sa_init(data);
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       ikev2_build_sa_init
                  |L26.26|
;;;1292   	case SA_AUTH:
;;;1293   		return ikev2_build_sa_auth(data);
;;;1294   	case CHILD_SA:
;;;1295   		return NULL;
;;;1296   	case NOTIFY:
;;;1297   		return ikev2_build_notify(data);
;;;1298   	case IKEV2_DONE:
;;;1299   	case IKEV2_FAILED:
;;;1300   		return NULL;
;;;1301   	}
;;;1302   	return NULL;
;;;1303   }
00001a  bd10              POP      {r4,pc}
00001c  4620              MOV      r0,r4                 ;1293
00001e  f7fffffe          BL       ikev2_build_sa_auth
000022  e7fa              B        |L26.26|
000024  2000              MOVS     r0,#0                 ;1295
000026  e7f8              B        |L26.26|
000028  4620              MOV      r0,r4                 ;1297
00002a  f7fffffe          BL       ikev2_build_notify
00002e  e7f4              B        |L26.26|
000030  bf00              NOP                            ;1299
000032  2000              MOVS     r0,#0                 ;1300
000034  e7f1              B        |L26.26|
                  |L26.54|
000036  2000              MOVS     r0,#0                 ;1302
000038  e7ef              B        |L26.26|
                          ENDP


                          AREA ||i.ikev2_responder_deinit||, CODE, READONLY, ALIGN=1

                  ikev2_responder_deinit PROC
;;;21     
;;;22     void ikev2_responder_deinit(struct ikev2_responder_data *data)
000000  b510              PUSH     {r4,lr}
;;;23     {
000002  4604              MOV      r4,r0
;;;24     	ikev2_free_keys(&data->keys);
000004  f504700f          ADD      r0,r4,#0x23c
000008  f7fffffe          BL       ikev2_free_keys
;;;25     	wpabuf_free(data->i_dh_public);
00000c  f5047407          ADD      r4,r4,#0x21c
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       wpabuf_free
;;;26     	wpabuf_free(data->r_dh_private);
000016  6860              LDR      r0,[r4,#4]
000018  f7fffffe          BL       wpabuf_free
;;;27     	os_free(data->IDi);
00001c  6ce0              LDR      r0,[r4,#0x4c]
00001e  f7fffffe          BL       os_free
;;;28     	os_free(data->IDr);
000022  6da0              LDR      r0,[r4,#0x58]
000024  f7fffffe          BL       os_free
;;;29     	os_free(data->shared_secret);
000028  6ea0              LDR      r0,[r4,#0x68]
00002a  f7fffffe          BL       os_free
;;;30     	wpabuf_free(data->i_sign_msg);
00002e  6e60              LDR      r0,[r4,#0x64]
000030  f7fffffe          BL       wpabuf_free
;;;31     	wpabuf_free(data->r_sign_msg);
000034  6e20              LDR      r0,[r4,#0x60]
000036  f7fffffe          BL       wpabuf_free
;;;32     	os_free(data->key_pad);
00003a  6f60              LDR      r0,[r4,#0x74]
00003c  f5a47407          SUB      r4,r4,#0x21c
000040  f7fffffe          BL       os_free
;;;33     }
000044  bd10              POP      {r4,pc}
;;;34     
                          ENDP


                          AREA ||i.ikev2_responder_process||, CODE, READONLY, ALIGN=2

                  ikev2_responder_process PROC
;;;762    
;;;763    int ikev2_responder_process(struct ikev2_responder_data *data,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;764    			    const struct wpabuf *buf)
;;;765    {
000004  b095              SUB      sp,sp,#0x54
000006  4605              MOV      r5,r0
000008  460f              MOV      r7,r1
;;;766    	const struct ikev2_hdr *hdr;
;;;767    	u32 length, message_id;
;;;768    	const u8 *pos, *end;
;;;769    	struct ikev2_payloads pl;
;;;770    
;;;771    	wpa_printf(MSG_MSGDUMP, "IKEV2: Received message (len %lu)",
00000a  4638              MOV      r0,r7
00000c  f7fffffe          BL       wpabuf_len
000010  4683              MOV      r11,r0
000012  4602              MOV      r2,r0
000014  a172              ADR      r1,|L28.480|
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       wpa_printf
;;;772    		   (unsigned long) wpabuf_len(buf));
;;;773    
;;;774    	if (wpabuf_len(buf) < sizeof(*hdr)) {
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       wpabuf_len
000022  281c              CMP      r0,#0x1c
000024  d208              BCS      |L28.56|
;;;775    		wpa_printf(MSG_INFO, "IKEV2: Too short frame to include HDR");
000026  a177              ADR      r1,|L28.516|
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       wpa_printf
;;;776    		return -1;
00002e  f04f30ff          MOV      r0,#0xffffffff
                  |L28.50|
;;;777    	}
;;;778    
;;;779    	data->error_type = 0;
;;;780    	hdr = (const struct ikev2_hdr *) wpabuf_head(buf);
;;;781    	end = wpabuf_head_u8(buf) + wpabuf_len(buf);
;;;782    	message_id = WPA_GET_BE32(hdr->message_id);
;;;783    	length = WPA_GET_BE32(hdr->length);
;;;784    
;;;785    	wpa_hexdump(MSG_DEBUG, "IKEV2:   IKE_SA Initiator's SPI",
;;;786    		    hdr->i_spi, IKEV2_SPI_LEN);
;;;787    	wpa_hexdump(MSG_DEBUG, "IKEV2:   IKE_SA Responder's SPI",
;;;788    		    hdr->r_spi, IKEV2_SPI_LEN);
;;;789    	wpa_printf(MSG_DEBUG, "IKEV2:   Next Payload: %u  Version: 0x%x  "
;;;790    		   "Exchange Type: %u",
;;;791    		   hdr->next_payload, hdr->version, hdr->exchange_type);
;;;792    	wpa_printf(MSG_DEBUG, "IKEV2:   Message ID: %u  Length: %u",
;;;793    		   message_id, length);
;;;794    
;;;795    	if (hdr->version != IKEV2_VERSION) {
;;;796    		wpa_printf(MSG_INFO, "IKEV2: Unsupported HDR version 0x%x "
;;;797    			   "(expected 0x%x)", hdr->version, IKEV2_VERSION);
;;;798    		return -1;
;;;799    	}
;;;800    
;;;801    	if (length != wpabuf_len(buf)) {
;;;802    		wpa_printf(MSG_INFO, "IKEV2: Invalid length (HDR: %lu != "
;;;803    			   "RX: %lu)", (unsigned long) length,
;;;804    			   (unsigned long) wpabuf_len(buf));
;;;805    		return -1;
;;;806    	}
;;;807    
;;;808    	if (ikev2_validate_rx_state(data, hdr->exchange_type, message_id) < 0)
;;;809    		return -1;
;;;810    
;;;811    	if ((hdr->flags & (IKEV2_HDR_INITIATOR | IKEV2_HDR_RESPONSE)) !=
;;;812    	    IKEV2_HDR_INITIATOR) {
;;;813    		wpa_printf(MSG_INFO, "IKEV2: Unexpected Flags value 0x%x",
;;;814    			   hdr->flags);
;;;815    		return -1;
;;;816    	}
;;;817    
;;;818    	if (data->state != SA_INIT) {
;;;819    		if (os_memcmp(data->i_spi, hdr->i_spi, IKEV2_SPI_LEN) != 0) {
;;;820    			wpa_printf(MSG_INFO, "IKEV2: Unexpected IKE_SA "
;;;821    				   "Initiator's SPI");
;;;822    			return -1;
;;;823    		}
;;;824    		if (os_memcmp(data->r_spi, hdr->r_spi, IKEV2_SPI_LEN) != 0) {
;;;825    			wpa_printf(MSG_INFO, "IKEV2: Unexpected IKE_SA "
;;;826    				   "Responder's SPI");
;;;827    			return -1;
;;;828    		}
;;;829    	}
;;;830    
;;;831    	pos = (const u8 *) (hdr + 1);
;;;832    	if (ikev2_parse_payloads(&pl, hdr->next_payload, pos, end) < 0)
;;;833    		return -1;
;;;834    
;;;835    	if (data->state == SA_INIT) {
;;;836    		data->last_msg = LAST_MSG_SA_INIT;
;;;837    		if (ikev2_process_sa_init(data, hdr, &pl) < 0) {
;;;838    			if (data->state == NOTIFY)
;;;839    				return 0;
;;;840    			return -1;
;;;841    		}
;;;842    		wpabuf_free(data->i_sign_msg);
;;;843    		data->i_sign_msg = wpabuf_dup(buf);
;;;844    	}
;;;845    
;;;846    	if (data->state == SA_AUTH) {
;;;847    		data->last_msg = LAST_MSG_SA_AUTH;
;;;848    		if (ikev2_process_sa_auth(data, hdr, &pl) < 0) {
;;;849    			if (data->state == NOTIFY)
;;;850    				return 0;
;;;851    			return -1;
;;;852    		}
;;;853    	}
;;;854    
;;;855    	return 0;
;;;856    }
000032  b015              ADD      sp,sp,#0x54
000034  e8bd8ff0          POP      {r4-r11,pc}
                  |L28.56|
000038  2000              MOVS     r0,#0                 ;779
00003a  f8a50298          STRH     r0,[r5,#0x298]        ;779
00003e  4638              MOV      r0,r7                 ;780
000040  f7fffffe          BL       wpabuf_head
000044  4604              MOV      r4,r0                 ;780
000046  4638              MOV      r0,r7                 ;781
000048  f7fffffe          BL       wpabuf_head_u8
00004c  4683              MOV      r11,r0                ;781
00004e  4638              MOV      r0,r7                 ;781
000050  f7fffffe          BL       wpabuf_len
000054  eb0b0a00          ADD      r10,r11,r0            ;781
000058  7d20              LDRB     r0,[r4,#0x14]         ;782
00005a  0601              LSLS     r1,r0,#24             ;782
00005c  7d60              LDRB     r0,[r4,#0x15]         ;782
00005e  ea414100          ORR      r1,r1,r0,LSL #16      ;782
000062  7da0              LDRB     r0,[r4,#0x16]         ;782
000064  ea412000          ORR      r0,r1,r0,LSL #8       ;782
000068  7de1              LDRB     r1,[r4,#0x17]         ;782
00006a  ea400801          ORR      r8,r0,r1              ;782
00006e  7e20              LDRB     r0,[r4,#0x18]         ;783
000070  0601              LSLS     r1,r0,#24             ;783
000072  7e60              LDRB     r0,[r4,#0x19]         ;783
000074  ea414100          ORR      r1,r1,r0,LSL #16      ;783
000078  7ea0              LDRB     r0,[r4,#0x1a]         ;783
00007a  ea412000          ORR      r0,r1,r0,LSL #8       ;783
00007e  7ee1              LDRB     r1,[r4,#0x1b]         ;783
000080  ea400601          ORR      r6,r0,r1              ;783
000084  2308              MOVS     r3,#8                 ;785
000086  4622              MOV      r2,r4                 ;785
000088  a168              ADR      r1,|L28.556|
00008a  2000              MOVS     r0,#0                 ;785
00008c  f7fffffe          BL       wpa_hexdump
000090  2308              MOVS     r3,#8                 ;787
000092  f1040208          ADD      r2,r4,#8              ;787
000096  a16d              ADR      r1,|L28.588|
000098  2000              MOVS     r0,#0                 ;787
00009a  f7fffffe          BL       wpa_hexdump
00009e  7ca3              LDRB     r3,[r4,#0x12]         ;789
0000a0  9300              STR      r3,[sp,#0]            ;789
0000a2  7c63              LDRB     r3,[r4,#0x11]         ;789
0000a4  7c22              LDRB     r2,[r4,#0x10]         ;789
0000a6  a171              ADR      r1,|L28.620|
0000a8  2000              MOVS     r0,#0                 ;789
0000aa  f7fffffe          BL       wpa_printf
0000ae  4633              MOV      r3,r6                 ;792
0000b0  4642              MOV      r2,r8                 ;792
0000b2  a17d              ADR      r1,|L28.680|
0000b4  2000              MOVS     r0,#0                 ;792
0000b6  f7fffffe          BL       wpa_printf
0000ba  7c60              LDRB     r0,[r4,#0x11]         ;795
0000bc  2820              CMP      r0,#0x20              ;795
0000be  d008              BEQ      |L28.210|
0000c0  7c62              LDRB     r2,[r4,#0x11]         ;796
0000c2  2320              MOVS     r3,#0x20              ;796
0000c4  a181              ADR      r1,|L28.716|
0000c6  2000              MOVS     r0,#0                 ;796
0000c8  f7fffffe          BL       wpa_printf
0000cc  f04f30ff          MOV      r0,#0xffffffff        ;798
0000d0  e7af              B        |L28.50|
                  |L28.210|
0000d2  4638              MOV      r0,r7                 ;801
0000d4  f7fffffe          BL       wpabuf_len
0000d8  42b0              CMP      r0,r6                 ;801
0000da  d00c              BEQ      |L28.246|
0000dc  4638              MOV      r0,r7                 ;802
0000de  f7fffffe          BL       wpabuf_len
0000e2  4683              MOV      r11,r0                ;802
0000e4  4603              MOV      r3,r0                 ;802
0000e6  4632              MOV      r2,r6                 ;802
0000e8  a185              ADR      r1,|L28.768|
0000ea  2000              MOVS     r0,#0                 ;802
0000ec  f7fffffe          BL       wpa_printf
0000f0  f04f30ff          MOV      r0,#0xffffffff        ;805
0000f4  e79d              B        |L28.50|
                  |L28.246|
0000f6  7ca1              LDRB     r1,[r4,#0x12]         ;808
0000f8  4642              MOV      r2,r8                 ;808
0000fa  4628              MOV      r0,r5                 ;808
0000fc  f7fffffe          BL       ikev2_validate_rx_state
000100  2800              CMP      r0,#0                 ;808
000102  da02              BGE      |L28.266|
000104  f04f30ff          MOV      r0,#0xffffffff        ;809
000108  e793              B        |L28.50|
                  |L28.266|
00010a  7ce0              LDRB     r0,[r4,#0x13]         ;811
00010c  f0000028          AND      r0,r0,#0x28           ;811
000110  2808              CMP      r0,#8                 ;811
000112  d007              BEQ      |L28.292|
000114  7ce2              LDRB     r2,[r4,#0x13]         ;813
000116  a185              ADR      r1,|L28.812|
000118  2000              MOVS     r0,#0                 ;813
00011a  f7fffffe          BL       wpa_printf
00011e  f04f30ff          MOV      r0,#0xffffffff        ;815
000122  e786              B        |L28.50|
                  |L28.292|
000124  7828              LDRB     r0,[r5,#0]            ;818
000126  b1d8              CBZ      r0,|L28.352|
000128  2208              MOVS     r2,#8                 ;819
00012a  4621              MOV      r1,r4                 ;819
00012c  1c68              ADDS     r0,r5,#1              ;819
00012e  f7fffffe          BL       os_memcmp
000132  b130              CBZ      r0,|L28.322|
000134  a186              ADR      r1,|L28.848|
000136  2000              MOVS     r0,#0                 ;820
000138  f7fffffe          BL       wpa_printf
00013c  f04f30ff          MOV      r0,#0xffffffff        ;822
000140  e777              B        |L28.50|
                  |L28.322|
000142  2208              MOVS     r2,#8                 ;824
000144  f1040108          ADD      r1,r4,#8              ;824
000148  f1050009          ADD      r0,r5,#9              ;824
00014c  f7fffffe          BL       os_memcmp
000150  b130              CBZ      r0,|L28.352|
000152  a18a              ADR      r1,|L28.892|
000154  2000              MOVS     r0,#0                 ;825
000156  f7fffffe          BL       wpa_printf
00015a  f04f30ff          MOV      r0,#0xffffffff        ;827
00015e  e768              B        |L28.50|
                  |L28.352|
000160  f104091c          ADD      r9,r4,#0x1c           ;831
000164  7c21              LDRB     r1,[r4,#0x10]         ;832
000166  4653              MOV      r3,r10                ;832
000168  464a              MOV      r2,r9                 ;832
00016a  a802              ADD      r0,sp,#8              ;832
00016c  f7fffffe          BL       ikev2_parse_payloads
000170  2800              CMP      r0,#0                 ;832
000172  da02              BGE      |L28.378|
000174  f04f30ff          MOV      r0,#0xffffffff        ;833
000178  e75b              B        |L28.50|
                  |L28.378|
00017a  7828              LDRB     r0,[r5,#0]            ;835
00017c  b9d0              CBNZ     r0,|L28.436|
00017e  2000              MOVS     r0,#0                 ;836
000180  f885029a          STRB     r0,[r5,#0x29a]        ;836
000184  aa02              ADD      r2,sp,#8              ;837
000186  4621              MOV      r1,r4                 ;837
000188  4628              MOV      r0,r5                 ;837
00018a  f7fffffe          BL       ikev2_process_sa_init
00018e  2800              CMP      r0,#0                 ;837
000190  da07              BGE      |L28.418|
000192  7828              LDRB     r0,[r5,#0]            ;838
000194  2803              CMP      r0,#3                 ;838
000196  d101              BNE      |L28.412|
000198  2000              MOVS     r0,#0                 ;839
00019a  e74a              B        |L28.50|
                  |L28.412|
00019c  f04f30ff          MOV      r0,#0xffffffff        ;840
0001a0  e747              B        |L28.50|
                  |L28.418|
0001a2  f8d50280          LDR      r0,[r5,#0x280]        ;842
0001a6  f7fffffe          BL       wpabuf_free
0001aa  4638              MOV      r0,r7                 ;843
0001ac  f7fffffe          BL       wpabuf_dup
0001b0  f8c50280          STR      r0,[r5,#0x280]        ;843
                  |L28.436|
0001b4  7828              LDRB     r0,[r5,#0]            ;846
0001b6  2801              CMP      r0,#1                 ;846
0001b8  d110              BNE      |L28.476|
0001ba  f885029a          STRB     r0,[r5,#0x29a]        ;847
0001be  aa02              ADD      r2,sp,#8              ;848
0001c0  4621              MOV      r1,r4                 ;848
0001c2  4628              MOV      r0,r5                 ;848
0001c4  f7fffffe          BL       ikev2_process_sa_auth
0001c8  2800              CMP      r0,#0                 ;848
0001ca  da07              BGE      |L28.476|
0001cc  7828              LDRB     r0,[r5,#0]            ;849
0001ce  2803              CMP      r0,#3                 ;849
0001d0  d101              BNE      |L28.470|
0001d2  2000              MOVS     r0,#0                 ;850
0001d4  e72d              B        |L28.50|
                  |L28.470|
0001d6  f04f30ff          MOV      r0,#0xffffffff        ;851
0001da  e72a              B        |L28.50|
                  |L28.476|
0001dc  2000              MOVS     r0,#0                 ;855
0001de  e728              B        |L28.50|
;;;857    
                          ENDP

                  |L28.480|
0001e0  494b4556          DCB      "IKEV2: Received message (len %lu)",0
0001e4  323a2052
0001e8  65636569
0001ec  76656420
0001f0  6d657373
0001f4  61676520
0001f8  286c656e
0001fc  20256c75
000200  2900    
000202  00                DCB      0
000203  00                DCB      0
                  |L28.516|
000204  494b4556          DCB      "IKEV2: Too short frame to include HDR",0
000208  323a2054
00020c  6f6f2073
000210  686f7274
000214  20667261
000218  6d652074
00021c  6f20696e
000220  636c7564
000224  65204844
000228  5200    
00022a  00                DCB      0
00022b  00                DCB      0
                  |L28.556|
00022c  494b4556          DCB      "IKEV2:   IKE_SA Initiator's SPI",0
000230  323a2020
000234  20494b45
000238  5f534120
00023c  496e6974
000240  6961746f
000244  72277320
000248  53504900
                  |L28.588|
00024c  494b4556          DCB      "IKEV2:   IKE_SA Responder's SPI",0
000250  323a2020
000254  20494b45
000258  5f534120
00025c  52657370
000260  6f6e6465
000264  72277320
000268  53504900
                  |L28.620|
00026c  494b4556          DCB      "IKEV2:   Next Payload: %u  Version: 0x%x  Exchange Type"
000270  323a2020
000274  204e6578
000278  74205061
00027c  796c6f61
000280  643a2025
000284  75202056
000288  65727369
00028c  6f6e3a20
000290  30782578
000294  20204578
000298  6368616e
00029c  67652054
0002a0  797065  
0002a3  3a202575          DCB      ": %u",0
0002a7  00      
                  |L28.680|
0002a8  494b4556          DCB      "IKEV2:   Message ID: %u  Length: %u",0
0002ac  323a2020
0002b0  204d6573
0002b4  73616765
0002b8  2049443a
0002bc  20257520
0002c0  204c656e
0002c4  6774683a
0002c8  20257500
                  |L28.716|
0002cc  494b4556          DCB      "IKEV2: Unsupported HDR version 0x%x (expected 0x%x)",0
0002d0  323a2055
0002d4  6e737570
0002d8  706f7274
0002dc  65642048
0002e0  44522076
0002e4  65727369
0002e8  6f6e2030
0002ec  78257820
0002f0  28657870
0002f4  65637465
0002f8  64203078
0002fc  25782900
                  |L28.768|
000300  494b4556          DCB      "IKEV2: Invalid length (HDR: %lu != RX: %lu)",0
000304  323a2049
000308  6e76616c
00030c  6964206c
000310  656e6774
000314  68202848
000318  44523a20
00031c  256c7520
000320  213d2052
000324  583a2025
000328  6c752900
                  |L28.812|
00032c  494b4556          DCB      "IKEV2: Unexpected Flags value 0x%x",0
000330  323a2055
000334  6e657870
000338  65637465
00033c  6420466c
000340  61677320
000344  76616c75
000348  65203078
00034c  257800  
00034f  00                DCB      0
                  |L28.848|
000350  494b4556          DCB      "IKEV2: Unexpected IKE_SA Initiator's SPI",0
000354  323a2055
000358  6e657870
00035c  65637465
000360  6420494b
000364  455f5341
000368  20496e69
00036c  74696174
000370  6f722773
000374  20535049
000378  00      
000379  00                DCB      0
00037a  00                DCB      0
00037b  00                DCB      0
                  |L28.892|
00037c  494b4556          DCB      "IKEV2: Unexpected IKE_SA Responder's SPI",0
000380  323a2055
000384  6e657870
000388  65637465
00038c  6420494b
000390  455f5341
000394  20526573
000398  706f6e64
00039c  65722773
0003a0  20535049
0003a4  00      
0003a5  00                DCB      0
0003a6  00                DCB      0
0003a7  00                DCB      0

                          AREA ||i.ikev2_validate_rx_state||, CODE, READONLY, ALIGN=2

                  ikev2_validate_rx_state PROC
;;;707    
;;;708    static int ikev2_validate_rx_state(struct ikev2_responder_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;709    				   u8 exchange_type, u32 message_id)
;;;710    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;711    	switch (data->state) {
000008  7830              LDRB     r0,[r6,#0]
00000a  2806              CMP      r0,#6
00000c  d247              BCS      |L29.158|
00000e  e8dff000          TBB      [pc,r0]
000012  0317              DCB      0x03,0x17
000014  2c414243          DCB      0x2c,0x41,0x42,0x43
;;;712    	case SA_INIT:
;;;713    		/* Expect to receive IKE_SA_INIT: HDR, SAi1, KEi, Ni */
;;;714    		if (exchange_type != IKE_SA_INIT) {
000018  2c22              CMP      r4,#0x22
00001a  d007              BEQ      |L29.44|
;;;715    			wpa_printf(MSG_INFO, "IKEV2: Unexpected Exchange Type "
00001c  4622              MOV      r2,r4
00001e  a121              ADR      r1,|L29.164|
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       wpa_printf
;;;716    				   "%u in SA_INIT state", exchange_type);
;;;717    			return -1;
000026  f04f30ff          MOV      r0,#0xffffffff
                  |L29.42|
;;;718    		}
;;;719    		if (message_id != 0) {
;;;720    			wpa_printf(MSG_INFO, "IKEV2: Unexpected Message ID %u "
;;;721    				   "in SA_INIT state", message_id);
;;;722    			return -1;
;;;723    		}
;;;724    		break;
;;;725    	case SA_AUTH:
;;;726    		/* Expect to receive IKE_SA_AUTH:
;;;727    		 * HDR, SK {IDi, [CERT,] [CERTREQ,] [IDr,]
;;;728    		 *	AUTH, SAi2, TSi, TSr}
;;;729    		 */
;;;730    		if (exchange_type != IKE_SA_AUTH) {
;;;731    			wpa_printf(MSG_INFO, "IKEV2: Unexpected Exchange Type "
;;;732    				   "%u in SA_AUTH state", exchange_type);
;;;733    			return -1;
;;;734    		}
;;;735    		if (message_id != 1) {
;;;736    			wpa_printf(MSG_INFO, "IKEV2: Unexpected Message ID %u "
;;;737    				   "in SA_AUTH state", message_id);
;;;738    			return -1;
;;;739    		}
;;;740    		break;
;;;741    	case CHILD_SA:
;;;742    		if (exchange_type != CREATE_CHILD_SA) {
;;;743    			wpa_printf(MSG_INFO, "IKEV2: Unexpected Exchange Type "
;;;744    				   "%u in CHILD_SA state", exchange_type);
;;;745    			return -1;
;;;746    		}
;;;747    		if (message_id != 2) {
;;;748    			wpa_printf(MSG_INFO, "IKEV2: Unexpected Message ID %u "
;;;749    				   "in CHILD_SA state", message_id);
;;;750    			return -1;
;;;751    		}
;;;752    		break;
;;;753    	case NOTIFY:
;;;754    	case IKEV2_DONE:
;;;755    	case IKEV2_FAILED:
;;;756    		return -1;
;;;757    	}
;;;758    
;;;759    	return 0;
;;;760    }
00002a  bd70              POP      {r4-r6,pc}
                  |L29.44|
00002c  b13d              CBZ      r5,|L29.62|
00002e  462a              MOV      r2,r5                 ;720
000030  a129              ADR      r1,|L29.216|
000032  2000              MOVS     r0,#0                 ;720
000034  f7fffffe          BL       wpa_printf
000038  f04f30ff          MOV      r0,#0xffffffff        ;722
00003c  e7f5              B        |L29.42|
                  |L29.62|
00003e  e02e              B        |L29.158|
000040  2c23              CMP      r4,#0x23              ;730
000042  d007              BEQ      |L29.84|
000044  4622              MOV      r2,r4                 ;731
000046  a131              ADR      r1,|L29.268|
000048  2000              MOVS     r0,#0                 ;731
00004a  f7fffffe          BL       wpa_printf
00004e  f04f30ff          MOV      r0,#0xffffffff        ;733
000052  e7ea              B        |L29.42|
                  |L29.84|
000054  2d01              CMP      r5,#1                 ;735
000056  d007              BEQ      |L29.104|
000058  462a              MOV      r2,r5                 ;736
00005a  a139              ADR      r1,|L29.320|
00005c  2000              MOVS     r0,#0                 ;736
00005e  f7fffffe          BL       wpa_printf
000062  f04f30ff          MOV      r0,#0xffffffff        ;738
000066  e7e0              B        |L29.42|
                  |L29.104|
000068  e019              B        |L29.158|
00006a  2c24              CMP      r4,#0x24              ;742
00006c  d007              BEQ      |L29.126|
00006e  4622              MOV      r2,r4                 ;743
000070  a140              ADR      r1,|L29.372|
000072  2000              MOVS     r0,#0                 ;743
000074  f7fffffe          BL       wpa_printf
000078  f04f30ff          MOV      r0,#0xffffffff        ;745
00007c  e7d5              B        |L29.42|
                  |L29.126|
00007e  2d02              CMP      r5,#2                 ;747
000080  d007              BEQ      |L29.146|
000082  462a              MOV      r2,r5                 ;748
000084  a149              ADR      r1,|L29.428|
000086  2000              MOVS     r0,#0                 ;748
000088  f7fffffe          BL       wpa_printf
00008c  f04f30ff          MOV      r0,#0xffffffff        ;750
000090  e7cb              B        |L29.42|
                  |L29.146|
000092  e004              B        |L29.158|
000094  bf00              NOP                            ;754
000096  bf00              NOP                            ;755
000098  f04f30ff          MOV      r0,#0xffffffff        ;756
00009c  e7c5              B        |L29.42|
                  |L29.158|
00009e  bf00              NOP                            ;724
0000a0  2000              MOVS     r0,#0                 ;759
0000a2  e7c2              B        |L29.42|
;;;761    
                          ENDP

                  |L29.164|
0000a4  494b4556          DCB      "IKEV2: Unexpected Exchange Type %u in SA_INIT state",0
0000a8  323a2055
0000ac  6e657870
0000b0  65637465
0000b4  64204578
0000b8  6368616e
0000bc  67652054
0000c0  79706520
0000c4  25752069
0000c8  6e205341
0000cc  5f494e49
0000d0  54207374
0000d4  61746500
                  |L29.216|
0000d8  494b4556          DCB      "IKEV2: Unexpected Message ID %u in SA_INIT state",0
0000dc  323a2055
0000e0  6e657870
0000e4  65637465
0000e8  64204d65
0000ec  73736167
0000f0  65204944
0000f4  20257520
0000f8  696e2053
0000fc  415f494e
000100  49542073
000104  74617465
000108  00      
000109  00                DCB      0
00010a  00                DCB      0
00010b  00                DCB      0
                  |L29.268|
00010c  494b4556          DCB      "IKEV2: Unexpected Exchange Type %u in SA_AUTH state",0
000110  323a2055
000114  6e657870
000118  65637465
00011c  64204578
000120  6368616e
000124  67652054
000128  79706520
00012c  25752069
000130  6e205341
000134  5f415554
000138  48207374
00013c  61746500
                  |L29.320|
000140  494b4556          DCB      "IKEV2: Unexpected Message ID %u in SA_AUTH state",0
000144  323a2055
000148  6e657870
00014c  65637465
000150  64204d65
000154  73736167
000158  65204944
00015c  20257520
000160  696e2053
000164  415f4155
000168  54482073
00016c  74617465
000170  00      
000171  00                DCB      0
000172  00                DCB      0
000173  00                DCB      0
                  |L29.372|
000174  494b4556          DCB      "IKEV2: Unexpected Exchange Type %u in CHILD_SA state",0
000178  323a2055
00017c  6e657870
000180  65637465
000184  64204578
000188  6368616e
00018c  67652054
000190  79706520
000194  25752069
000198  6e204348
00019c  494c445f
0001a0  53412073
0001a4  74617465
0001a8  00      
0001a9  00                DCB      0
0001aa  00                DCB      0
0001ab  00                DCB      0
                  |L29.428|
0001ac  494b4556          DCB      "IKEV2: Unexpected Message ID %u in CHILD_SA state",0
0001b0  323a2055
0001b4  6e657870
0001b8  65637465
0001bc  64204d65
0001c0  73736167
0001c4  65204944
0001c8  20257520
0001cc  696e2043
0001d0  48494c44
0001d4  5f534120
0001d8  73746174
0001dc  6500    
0001de  00                DCB      0
0001df  00                DCB      0

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L30.30|
00001a  2001              MOVS     r0,#1
                  |L30.28|
;;;495    }
00001c  4770              BX       lr
                  |L30.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L30.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L35.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L35.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L35.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L35.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L38.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L38.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L38.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L38.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L44.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L44.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  494b4556          DCB      0x49,0x4b,0x45,0x56
000004  323a2020          DCB      0x32,0x3a,0x20,0x20
000008  20202054          DCB      0x20,0x20,0x20,0x54
00000c  7970653a          DCB      0x79,0x70,0x65,0x3a
000010  20256420          DCB      0x20,0x25,0x64,0x20
000014  20547261          DCB      0x20,0x54,0x72,0x61
000018  6e73666f          DCB      0x6e,0x73,0x66,0x6f
00001c  726d204c          DCB      0x72,0x6d,0x20,0x4c
000020  656e6774          DCB      0x65,0x6e,0x67,0x74
000024  683a2025          DCB      0x68,0x3a,0x20,0x25
000028  64202054          DCB      0x64,0x20,0x20,0x54
00002c  72616e73          DCB      0x72,0x61,0x6e,0x73
000030  666f726d          DCB      0x66,0x6f,0x72,0x6d
000034  20547970          DCB      0x20,0x54,0x79,0x70
000038  653a2025          DCB      0x65,0x3a,0x20,0x25
00003c  64202054          DCB      0x64,0x20,0x20,0x54
000040  72616e73          DCB      0x72,0x61,0x6e,0x73
000044  666f726d          DCB      0x66,0x6f,0x72,0x6d
000048  2049443a          DCB      0x20,0x49,0x44,0x3a
00004c  20256400          DCB      0x20,0x25,0x64,0x00
000050  494b4556          DCB      0x49,0x4b,0x45,0x56
000054  323a204b          DCB      0x32,0x3a,0x20,0x4b
000058  45692044          DCB      0x45,0x69,0x20,0x44
00005c  48204772          DCB      0x48,0x20,0x47,0x72
000060  6f757020          DCB      0x6f,0x75,0x70,0x20
000064  23257520          DCB      0x23,0x25,0x75,0x20
000068  646f6573          DCB      0x64,0x6f,0x65,0x73
00006c  206e6f74          DCB      0x20,0x6e,0x6f,0x74
000070  206d6174          DCB      0x20,0x6d,0x61,0x74
000074  63682077          DCB      0x63,0x68,0x20,0x77
000078  69746820          DCB      0x69,0x74,0x68,0x20
00007c  74686520          DCB      0x74,0x68,0x65,0x20
000080  73656c65          DCB      0x73,0x65,0x6c,0x65
000084  63746564          DCB      0x63,0x74,0x65,0x64
000088  2070726f          DCB      0x20,0x70,0x72,0x6f
00008c  706f7361          DCB      0x70,0x6f,0x73,0x61
000090  6c202825          DCB      0x6c,0x20,0x28,0x25
000094  75290000          DCB      0x75,0x29,0x00,0x00
000098  494b4556          DCB      0x49,0x4b,0x45,0x56
00009c  323a204e          DCB      0x32,0x3a,0x20,0x4e
0000a0  6f204448          DCB      0x6f,0x20,0x44,0x48
0000a4  2047726f          DCB      0x20,0x47,0x72,0x6f
0000a8  75702073          DCB      0x75,0x70,0x20,0x73
0000ac  656c6563          DCB      0x65,0x6c,0x65,0x63
0000b0  74656420          DCB      0x74,0x65,0x64,0x20
0000b4  666f7220          DCB      0x66,0x6f,0x72,0x20
0000b8  494e5641          DCB      0x49,0x4e,0x56,0x41
0000bc  4c49445f          DCB      0x4c,0x49,0x44,0x5f
0000c0  4b455f50          DCB      0x4b,0x45,0x5f,0x50
0000c4  41594c4f          DCB      0x41,0x59,0x4c,0x4f
0000c8  4144206e          DCB      0x41,0x44,0x20,0x6e
0000cc  6f746966          DCB      0x6f,0x74,0x69,0x66
0000d0  69636174          DCB      0x69,0x63,0x61,0x74
0000d4  696f6e73          DCB      0x69,0x6f,0x6e,0x73
0000d8  00                DCB      0x00
