; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_sim_common.o --depend=.\obj\eap_sim_common.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_sim_common.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_common\eap_sim_common.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_aka_derive_mk||, CODE, READONLY, ALIGN=2

                  eap_aka_derive_mk PROC
;;;62     
;;;63     void eap_aka_derive_mk(const u8 *identity, size_t identity_len,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;64     		       const u8 *ik, const u8 *ck, u8 *mk)
;;;65     {
000004  b086              SUB      sp,sp,#0x18
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  461c              MOV      r4,r3
00000e  f8dd8030          LDR      r8,[sp,#0x30]
;;;66     	const u8 *addr[3];
;;;67     	size_t len[3];
;;;68     
;;;69     	addr[0] = identity;
000012  9503              STR      r5,[sp,#0xc]
;;;70     	len[0] = identity_len;
000014  9600              STR      r6,[sp,#0]
;;;71     	addr[1] = ik;
000016  9704              STR      r7,[sp,#0x10]
;;;72     	len[1] = EAP_AKA_IK_LEN;
000018  2010              MOVS     r0,#0x10
00001a  9001              STR      r0,[sp,#4]
;;;73     	addr[2] = ck;
00001c  9405              STR      r4,[sp,#0x14]
;;;74     	len[2] = EAP_AKA_CK_LEN;
00001e  9002              STR      r0,[sp,#8]
;;;75     
;;;76     	/* MK = SHA1(Identity|IK|CK) */
;;;77     	sha1_vector(3, addr, len, mk);
000020  4643              MOV      r3,r8
000022  466a              MOV      r2,sp
000024  a903              ADD      r1,sp,#0xc
000026  2003              MOVS     r0,#3
000028  f7fffffe          BL       sha1_vector
;;;78     	wpa_hexdump_key(MSG_DEBUG, "EAP-AKA: IK", ik, EAP_AKA_IK_LEN);
00002c  2310              MOVS     r3,#0x10
00002e  463a              MOV      r2,r7
000030  a109              ADR      r1,|L2.88|
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       wpa_hexdump_key
;;;79     	wpa_hexdump_key(MSG_DEBUG, "EAP-AKA: CK", ck, EAP_AKA_CK_LEN);
000038  2310              MOVS     r3,#0x10
00003a  4622              MOV      r2,r4
00003c  a109              ADR      r1,|L2.100|
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       wpa_hexdump_key
;;;80     	wpa_hexdump_key(MSG_DEBUG, "EAP-AKA: MK", mk, EAP_SIM_MK_LEN);
000044  2314              MOVS     r3,#0x14
000046  4642              MOV      r2,r8
000048  a109              ADR      r1,|L2.112|
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       wpa_hexdump_key
;;;81     }
000050  b006              ADD      sp,sp,#0x18
000052  e8bd81f0          POP      {r4-r8,pc}
;;;82     
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
000058  4541502d          DCB      "EAP-AKA: IK",0
00005c  414b413a
000060  20494b00
                  |L2.100|
000064  4541502d          DCB      "EAP-AKA: CK",0
000068  414b413a
00006c  20434b00
                  |L2.112|
000070  4541502d          DCB      "EAP-AKA: MK",0
000074  414b413a
000078  204d4b00

                          AREA ||i.eap_aka_prime_derive_keys||, CODE, READONLY, ALIGN=1

                  eap_aka_prime_derive_keys PROC
;;;113    #else /* EAP_AKA_PRIME || EAP_SERVER_AKA_PRIME */
;;;114    static inline void eap_aka_prime_derive_keys(const u8 *identity,
000000  b5f0              PUSH     {r4-r7,lr}
;;;115    					     size_t identity_len,
;;;116    					     const u8 *ik, const u8 *ck,
;;;117    					     u8 *k_encr, u8 *k_aut, u8 *k_re,
;;;118    					     u8 *msk, u8 *emsk)
;;;119    {
000002  ac05              ADD      r4,sp,#0x14
000004  e89410f0          LDM      r4,{r4-r7,r12}
;;;120    }
000008  bdf0              POP      {r4-r7,pc}
;;;121    
                          ENDP


                          AREA ||i.eap_aka_prime_derive_keys_reauth||, CODE, READONLY, ALIGN=1

                  eap_aka_prime_derive_keys_reauth PROC
;;;121    
;;;122    static inline int eap_aka_prime_derive_keys_reauth(const u8 *k_re, u16 counter,
000000  b5f0              PUSH     {r4-r7,lr}
;;;123    						   const u8 *identity,
;;;124    						   size_t identity_len,
;;;125    						   const u8 *nonce_s, u8 *msk,
;;;126    						   u8 *emsk)
;;;127    {
000002  4607              MOV      r7,r0
000004  ac05              ADD      r4,sp,#0x14
000006  cc70              LDM      r4,{r4-r6}
;;;128    	return -1;
000008  f04f30ff          MOV      r0,#0xffffffff
;;;129    }
00000c  bdf0              POP      {r4-r7,pc}
;;;130    
                          ENDP


                          AREA ||i.eap_sim_add_mac||, CODE, READONLY, ALIGN=2

                  eap_sim_add_mac PROC
;;;211    
;;;212    void eap_sim_add_mac(const u8 *k_aut, const u8 *msg, size_t msg_len, u8 *mac,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;213    		     const u8 *extra, size_t extra_len)
;;;214    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4607              MOV      r7,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
00000c  461e              MOV      r6,r3
00000e  e9dd8912          LDRD     r8,r9,[sp,#0x48]
;;;215    	unsigned char hmac[SHA1_MAC_LEN];
;;;216    	const u8 *addr[2];
;;;217    	size_t len[2];
;;;218    
;;;219    	addr[0] = msg;
000012  9404              STR      r4,[sp,#0x10]
;;;220    	len[0] = msg_len;
000014  9502              STR      r5,[sp,#8]
;;;221    	addr[1] = extra;
000016  f8cd8014          STR      r8,[sp,#0x14]
;;;222    	len[1] = extra_len;
00001a  f8cd900c          STR      r9,[sp,#0xc]
;;;223    
;;;224    	/* HMAC-SHA1-128 */
;;;225    	os_memset(mac, 0, EAP_SIM_MAC_LEN);
00001e  2210              MOVS     r2,#0x10
000020  2100              MOVS     r1,#0
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       os_memset
;;;226    	wpa_hexdump(MSG_MSGDUMP, "EAP-SIM: Add MAC - msg", msg, msg_len);
000028  462b              MOV      r3,r5
00002a  4622              MOV      r2,r4
00002c  a113              ADR      r1,|L5.124|
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       wpa_hexdump
;;;227    	wpa_hexdump(MSG_MSGDUMP, "EAP-SIM: Add MAC - extra data",
000034  464b              MOV      r3,r9
000036  4642              MOV      r2,r8
000038  a116              ADR      r1,|L5.148|
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       wpa_hexdump
;;;228    		    extra, extra_len);
;;;229    	wpa_hexdump_key(MSG_MSGDUMP, "EAP-SIM: Add MAC - K_aut",
000040  2310              MOVS     r3,#0x10
000042  463a              MOV      r2,r7
000044  a11b              ADR      r1,|L5.180|
000046  2000              MOVS     r0,#0
000048  f7fffffe          BL       wpa_hexdump_key
;;;230    			k_aut, EAP_SIM_K_AUT_LEN);
;;;231    	hmac_sha1_vector(k_aut, EAP_SIM_K_AUT_LEN, 2, addr, len, hmac);
00004c  ab06              ADD      r3,sp,#0x18
00004e  aa02              ADD      r2,sp,#8
000050  e9cd2300          STRD     r2,r3,[sp,#0]
000054  ab04              ADD      r3,sp,#0x10
000056  2202              MOVS     r2,#2
000058  2110              MOVS     r1,#0x10
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       hmac_sha1_vector
;;;232    	os_memcpy(mac, hmac, EAP_SIM_MAC_LEN);
000060  2210              MOVS     r2,#0x10
000062  a906              ADD      r1,sp,#0x18
000064  4630              MOV      r0,r6
000066  f7fffffe          BL       os_memcpy
;;;233    	wpa_hexdump(MSG_MSGDUMP, "EAP-SIM: Add MAC: MAC",
00006a  2310              MOVS     r3,#0x10
00006c  4632              MOV      r2,r6
00006e  a118              ADR      r1,|L5.208|
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       wpa_hexdump
;;;234    		    mac, EAP_SIM_MAC_LEN);
;;;235    }
000076  b00b              ADD      sp,sp,#0x2c
000078  e8bd83f0          POP      {r4-r9,pc}
;;;236    
                          ENDP

                  |L5.124|
00007c  4541502d          DCB      "EAP-SIM: Add MAC - msg",0
000080  53494d3a
000084  20416464
000088  204d4143
00008c  202d206d
000090  736700  
000093  00                DCB      0
                  |L5.148|
000094  4541502d          DCB      "EAP-SIM: Add MAC - extra data",0
000098  53494d3a
00009c  20416464
0000a0  204d4143
0000a4  202d2065
0000a8  78747261
0000ac  20646174
0000b0  6100    
0000b2  00                DCB      0
0000b3  00                DCB      0
                  |L5.180|
0000b4  4541502d          DCB      "EAP-SIM: Add MAC - K_aut",0
0000b8  53494d3a
0000bc  20416464
0000c0  204d4143
0000c4  202d204b
0000c8  5f617574
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L5.208|
0000d0  4541502d          DCB      "EAP-SIM: Add MAC: MAC",0
0000d4  53494d3a
0000d8  20416464
0000dc  204d4143
0000e0  3a204d41
0000e4  4300    
0000e6  00                DCB      0
0000e7  00                DCB      0

                          AREA ||i.eap_sim_derive_keys||, CODE, READONLY, ALIGN=2

                  eap_sim_derive_keys PROC
;;;83     
;;;84     int eap_sim_derive_keys(const u8 *mk, u8 *k_encr, u8 *k_aut, u8 *msk, u8 *emsk)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;85     {
000004  b0a9              SUB      sp,sp,#0xa4
000006  4681              MOV      r9,r0
000008  460d              MOV      r5,r1
00000a  4617              MOV      r7,r2
00000c  461e              MOV      r6,r3
00000e  f8dd80c0          LDR      r8,[sp,#0xc0]
;;;86     	u8 buf[EAP_SIM_K_ENCR_LEN + EAP_SIM_K_AUT_LEN +
;;;87     	       EAP_SIM_KEYING_DATA_LEN + EAP_EMSK_LEN], *pos;
;;;88     	if (eap_sim_prf(mk, buf, sizeof(buf)) < 0) {
000012  22a0              MOVS     r2,#0xa0
000014  a901              ADD      r1,sp,#4
000016  4648              MOV      r0,r9
000018  f7fffffe          BL       eap_sim_prf
00001c  2800              CMP      r0,#0
00001e  da08              BGE      |L6.50|
;;;89     		wpa_printf(MSG_ERROR, "EAP-SIM: Failed to derive keys");
000020  a11f              ADR      r1,|L6.160|
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       wpa_printf
;;;90     		return -1;
000028  f04f30ff          MOV      r0,#0xffffffff
                  |L6.44|
;;;91     	}
;;;92     	pos = buf;
;;;93     	os_memcpy(k_encr, pos, EAP_SIM_K_ENCR_LEN);
;;;94     	pos += EAP_SIM_K_ENCR_LEN;
;;;95     	os_memcpy(k_aut, pos, EAP_SIM_K_AUT_LEN);
;;;96     	pos += EAP_SIM_K_AUT_LEN;
;;;97     	os_memcpy(msk, pos, EAP_SIM_KEYING_DATA_LEN);
;;;98     	pos += EAP_SIM_KEYING_DATA_LEN;
;;;99     	os_memcpy(emsk, pos, EAP_EMSK_LEN);
;;;100    
;;;101    	wpa_hexdump_key(MSG_DEBUG, "EAP-SIM: K_encr",
;;;102    			k_encr, EAP_SIM_K_ENCR_LEN);
;;;103    	wpa_hexdump_key(MSG_DEBUG, "EAP-SIM: K_aut",
;;;104    			k_aut, EAP_SIM_K_AUT_LEN);
;;;105    	wpa_hexdump_key(MSG_DEBUG, "EAP-SIM: keying material (MSK)",
;;;106    			msk, EAP_SIM_KEYING_DATA_LEN);
;;;107    	wpa_hexdump_key(MSG_DEBUG, "EAP-SIM: EMSK", emsk, EAP_EMSK_LEN);
;;;108    	os_memset(buf, 0, sizeof(buf));
;;;109    
;;;110    	return 0;
;;;111    }
00002c  b029              ADD      sp,sp,#0xa4
00002e  e8bd83f0          POP      {r4-r9,pc}
                  |L6.50|
000032  ac01              ADD      r4,sp,#4              ;92
000034  2210              MOVS     r2,#0x10              ;93
000036  4621              MOV      r1,r4                 ;93
000038  4628              MOV      r0,r5                 ;93
00003a  f7fffffe          BL       os_memcpy
00003e  3410              ADDS     r4,r4,#0x10           ;94
000040  2210              MOVS     r2,#0x10              ;95
000042  4621              MOV      r1,r4                 ;95
000044  4638              MOV      r0,r7                 ;95
000046  f7fffffe          BL       os_memcpy
00004a  3410              ADDS     r4,r4,#0x10           ;96
00004c  2240              MOVS     r2,#0x40              ;97
00004e  4621              MOV      r1,r4                 ;97
000050  4630              MOV      r0,r6                 ;97
000052  f7fffffe          BL       os_memcpy
000056  3440              ADDS     r4,r4,#0x40           ;98
000058  2240              MOVS     r2,#0x40              ;99
00005a  4621              MOV      r1,r4                 ;99
00005c  4640              MOV      r0,r8                 ;99
00005e  f7fffffe          BL       os_memcpy
000062  2310              MOVS     r3,#0x10              ;101
000064  462a              MOV      r2,r5                 ;101
000066  a116              ADR      r1,|L6.192|
000068  2000              MOVS     r0,#0                 ;101
00006a  f7fffffe          BL       wpa_hexdump_key
00006e  2310              MOVS     r3,#0x10              ;103
000070  463a              MOV      r2,r7                 ;103
000072  a117              ADR      r1,|L6.208|
000074  2000              MOVS     r0,#0                 ;103
000076  f7fffffe          BL       wpa_hexdump_key
00007a  2340              MOVS     r3,#0x40              ;105
00007c  4632              MOV      r2,r6                 ;105
00007e  a118              ADR      r1,|L6.224|
000080  2000              MOVS     r0,#0                 ;105
000082  f7fffffe          BL       wpa_hexdump_key
000086  2340              MOVS     r3,#0x40              ;107
000088  4642              MOV      r2,r8                 ;107
00008a  a11d              ADR      r1,|L6.256|
00008c  2000              MOVS     r0,#0                 ;107
00008e  f7fffffe          BL       wpa_hexdump_key
000092  22a0              MOVS     r2,#0xa0              ;108
000094  2100              MOVS     r1,#0                 ;108
000096  a801              ADD      r0,sp,#4              ;108
000098  f7fffffe          BL       os_memset
00009c  2000              MOVS     r0,#0                 ;110
00009e  e7c5              B        |L6.44|
;;;112    
                          ENDP

                  |L6.160|
0000a0  4541502d          DCB      "EAP-SIM: Failed to derive keys",0
0000a4  53494d3a
0000a8  20466169
0000ac  6c656420
0000b0  746f2064
0000b4  65726976
0000b8  65206b65
0000bc  797300  
0000bf  00                DCB      0
                  |L6.192|
0000c0  4541502d          DCB      "EAP-SIM: K_encr",0
0000c4  53494d3a
0000c8  204b5f65
0000cc  6e637200
                  |L6.208|
0000d0  4541502d          DCB      "EAP-SIM: K_aut",0
0000d4  53494d3a
0000d8  204b5f61
0000dc  757400  
0000df  00                DCB      0
                  |L6.224|
0000e0  4541502d          DCB      "EAP-SIM: keying material (MSK)",0
0000e4  53494d3a
0000e8  206b6579
0000ec  696e6720
0000f0  6d617465
0000f4  7269616c
0000f8  20284d53
0000fc  4b2900  
0000ff  00                DCB      0
                  |L6.256|
000100  4541502d          DCB      "EAP-SIM: EMSK",0
000104  53494d3a
000108  20454d53
00010c  4b00    
00010e  00                DCB      0
00010f  00                DCB      0

                          AREA ||i.eap_sim_derive_keys_reauth||, CODE, READONLY, ALIGN=2

                  eap_sim_derive_keys_reauth PROC
;;;113    
;;;114    int eap_sim_derive_keys_reauth(u16 _counter,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;115    			       const u8 *identity, size_t identity_len,
;;;116    			       const u8 *nonce_s, const u8 *mk, u8 *msk,
;;;117    			       u8 *emsk)
;;;118    {
000004  b0b6              SUB      sp,sp,#0xd8
000006  4606              MOV      r6,r0
000008  460d              MOV      r5,r1
00000a  4614              MOV      r4,r2
00000c  461f              MOV      r7,r3
00000e  e9dda83e          LDRD     r10,r8,[sp,#0xf8]
000012  f8dd9100          LDR      r9,[sp,#0x100]
;;;119    	u8 xkey[SHA1_MAC_LEN];
;;;120    	u8 buf[EAP_SIM_KEYING_DATA_LEN + EAP_EMSK_LEN + 32];
;;;121    	u8 counter[2];
;;;122    	const u8 *addr[4];
;;;123    	size_t len[4];
;;;124    
;;;125    	while (identity_len > 0 && identity[identity_len - 1] == 0) {
000016  e004              B        |L7.34|
                  |L7.24|
;;;126    		wpa_printf(MSG_DEBUG, "EAP-SIM: Workaround - drop null "
000018  493c              LDR      r1,|L7.268|
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       wpa_printf
;;;127    			   "character from the end of identity");
;;;128    		identity_len--;
000020  1e64              SUBS     r4,r4,#1
                  |L7.34|
000022  b11c              CBZ      r4,|L7.44|
000024  1e60              SUBS     r0,r4,#1              ;125
000026  5c28              LDRB     r0,[r5,r0]            ;125
000028  2800              CMP      r0,#0                 ;125
00002a  d0f5              BEQ      |L7.24|
                  |L7.44|
;;;129    	}
;;;130    	addr[0] = identity;
00002c  9504              STR      r5,[sp,#0x10]
;;;131    	len[0] = identity_len;
00002e  9400              STR      r4,[sp,#0]
;;;132    	addr[1] = counter;
000030  a808              ADD      r0,sp,#0x20
000032  9005              STR      r0,[sp,#0x14]
;;;133    	len[1] = 2;
000034  2002              MOVS     r0,#2
000036  9001              STR      r0,[sp,#4]
;;;134    	addr[2] = nonce_s;
000038  9706              STR      r7,[sp,#0x18]
;;;135    	len[2] = EAP_SIM_NONCE_S_LEN;
00003a  2010              MOVS     r0,#0x10
00003c  9002              STR      r0,[sp,#8]
;;;136    	addr[3] = mk;
00003e  f8cda01c          STR      r10,[sp,#0x1c]
;;;137    	len[3] = EAP_SIM_MK_LEN;
000042  2014              MOVS     r0,#0x14
000044  9003              STR      r0,[sp,#0xc]
;;;138    
;;;139    	WPA_PUT_BE16(counter, _counter);
000046  bf00              NOP      
000048  1230              ASRS     r0,r6,#8
00004a  f88d0020          STRB     r0,[sp,#0x20]
00004e  b2f0              UXTB     r0,r6
000050  f88d0021          STRB     r0,[sp,#0x21]
000054  bf00              NOP      
;;;140    
;;;141    	wpa_printf(MSG_DEBUG, "EAP-SIM: Deriving keying data from reauth");
000056  a12e              ADR      r1,|L7.272|
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       wpa_printf
;;;142    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-SIM: Identity",
00005e  4623              MOV      r3,r4
000060  462a              MOV      r2,r5
000062  a136              ADR      r1,|L7.316|
000064  2000              MOVS     r0,#0
000066  f7fffffe          BL       wpa_hexdump_ascii
;;;143    			  identity, identity_len);
;;;144    	wpa_hexdump(MSG_DEBUG, "EAP-SIM: counter", counter, 2);
00006a  2302              MOVS     r3,#2
00006c  aa08              ADD      r2,sp,#0x20
00006e  a138              ADR      r1,|L7.336|
000070  2000              MOVS     r0,#0
000072  f7fffffe          BL       wpa_hexdump
;;;145    	wpa_hexdump(MSG_DEBUG, "EAP-SIM: NONCE_S", nonce_s,
000076  2310              MOVS     r3,#0x10
000078  463a              MOV      r2,r7
00007a  a13a              ADR      r1,|L7.356|
00007c  2000              MOVS     r0,#0
00007e  f7fffffe          BL       wpa_hexdump
;;;146    		    EAP_SIM_NONCE_S_LEN);
;;;147    	wpa_hexdump_key(MSG_DEBUG, "EAP-SIM: MK", mk, EAP_SIM_MK_LEN);
000082  2314              MOVS     r3,#0x14
000084  4652              MOV      r2,r10
000086  a13c              ADR      r1,|L7.376|
000088  2000              MOVS     r0,#0
00008a  f7fffffe          BL       wpa_hexdump_key
;;;148    
;;;149    	/* XKEY' = SHA1(Identity|counter|NONCE_S|MK) */
;;;150    	sha1_vector(4, addr, len, xkey);
00008e  ab31              ADD      r3,sp,#0xc4
000090  466a              MOV      r2,sp
000092  a904              ADD      r1,sp,#0x10
000094  2004              MOVS     r0,#4
000096  f7fffffe          BL       sha1_vector
;;;151    	wpa_hexdump(MSG_DEBUG, "EAP-SIM: XKEY'", xkey, SHA1_MAC_LEN);
00009a  2314              MOVS     r3,#0x14
00009c  aa31              ADD      r2,sp,#0xc4
00009e  a139              ADR      r1,|L7.388|
0000a0  2000              MOVS     r0,#0
0000a2  f7fffffe          BL       wpa_hexdump
;;;152    
;;;153    	if (eap_sim_prf(xkey, buf, sizeof(buf)) < 0) {
0000a6  22a0              MOVS     r2,#0xa0
0000a8  a909              ADD      r1,sp,#0x24
0000aa  a831              ADD      r0,sp,#0xc4
0000ac  f7fffffe          BL       eap_sim_prf
0000b0  2800              CMP      r0,#0
0000b2  da08              BGE      |L7.198|
;;;154    		wpa_printf(MSG_ERROR, "EAP-SIM: Failed to derive keys");
0000b4  a137              ADR      r1,|L7.404|
0000b6  2000              MOVS     r0,#0
0000b8  f7fffffe          BL       wpa_printf
;;;155    		return -1;
0000bc  f04f30ff          MOV      r0,#0xffffffff
                  |L7.192|
;;;156    	}
;;;157    	if (msk) {
;;;158    		os_memcpy(msk, buf, EAP_SIM_KEYING_DATA_LEN);
;;;159    		wpa_hexdump(MSG_DEBUG, "EAP-SIM: keying material (MSK)",
;;;160    			    msk, EAP_SIM_KEYING_DATA_LEN);
;;;161    	}
;;;162    	if (emsk) {
;;;163    		os_memcpy(emsk, buf + EAP_SIM_KEYING_DATA_LEN, EAP_EMSK_LEN);
;;;164    		wpa_hexdump(MSG_DEBUG, "EAP-SIM: EMSK", emsk, EAP_EMSK_LEN);
;;;165    	}
;;;166    	os_memset(buf, 0, sizeof(buf));
;;;167    
;;;168    	return 0;
;;;169    }
0000c0  b036              ADD      sp,sp,#0xd8
0000c2  e8bd87f0          POP      {r4-r10,pc}
                  |L7.198|
0000c6  f1b80f00          CMP      r8,#0                 ;157
0000ca  d00a              BEQ      |L7.226|
0000cc  2240              MOVS     r2,#0x40              ;158
0000ce  a909              ADD      r1,sp,#0x24           ;158
0000d0  4640              MOV      r0,r8                 ;158
0000d2  f7fffffe          BL       os_memcpy
0000d6  2340              MOVS     r3,#0x40              ;159
0000d8  4642              MOV      r2,r8                 ;159
0000da  a136              ADR      r1,|L7.436|
0000dc  2000              MOVS     r0,#0                 ;159
0000de  f7fffffe          BL       wpa_hexdump
                  |L7.226|
0000e2  f1b90f00          CMP      r9,#0                 ;162
0000e6  d00a              BEQ      |L7.254|
0000e8  2240              MOVS     r2,#0x40              ;163
0000ea  a919              ADD      r1,sp,#0x64           ;163
0000ec  4648              MOV      r0,r9                 ;163
0000ee  f7fffffe          BL       os_memcpy
0000f2  2340              MOVS     r3,#0x40              ;164
0000f4  464a              MOV      r2,r9                 ;164
0000f6  a137              ADR      r1,|L7.468|
0000f8  2000              MOVS     r0,#0                 ;164
0000fa  f7fffffe          BL       wpa_hexdump
                  |L7.254|
0000fe  22a0              MOVS     r2,#0xa0              ;166
000100  2100              MOVS     r1,#0                 ;166
000102  a809              ADD      r0,sp,#0x24           ;166
000104  f7fffffe          BL       os_memset
000108  2000              MOVS     r0,#0                 ;168
00010a  e7d9              B        |L7.192|
;;;170    
                          ENDP

                  |L7.268|
                          DCD      ||.constdata||
                  |L7.272|
000110  4541502d          DCB      "EAP-SIM: Deriving keying data from reauth",0
000114  53494d3a
000118  20446572
00011c  6976696e
000120  67206b65
000124  79696e67
000128  20646174
00012c  61206672
000130  6f6d2072
000134  65617574
000138  6800    
00013a  00                DCB      0
00013b  00                DCB      0
                  |L7.316|
00013c  4541502d          DCB      "EAP-SIM: Identity",0
000140  53494d3a
000144  20496465
000148  6e746974
00014c  7900    
00014e  00                DCB      0
00014f  00                DCB      0
                  |L7.336|
000150  4541502d          DCB      "EAP-SIM: counter",0
000154  53494d3a
000158  20636f75
00015c  6e746572
000160  00      
000161  00                DCB      0
000162  00                DCB      0
000163  00                DCB      0
                  |L7.356|
000164  4541502d          DCB      "EAP-SIM: NONCE_S",0
000168  53494d3a
00016c  204e4f4e
000170  43455f53
000174  00      
000175  00                DCB      0
000176  00                DCB      0
000177  00                DCB      0
                  |L7.376|
000178  4541502d          DCB      "EAP-SIM: MK",0
00017c  53494d3a
000180  204d4b00
                  |L7.388|
000184  4541502d          DCB      "EAP-SIM: XKEY'",0
000188  53494d3a
00018c  20584b45
000190  592700  
000193  00                DCB      0
                  |L7.404|
000194  4541502d          DCB      "EAP-SIM: Failed to derive keys",0
000198  53494d3a
00019c  20466169
0001a0  6c656420
0001a4  746f2064
0001a8  65726976
0001ac  65206b65
0001b0  797300  
0001b3  00                DCB      0
                  |L7.436|
0001b4  4541502d          DCB      "EAP-SIM: keying material (MSK)",0
0001b8  53494d3a
0001bc  206b6579
0001c0  696e6720
0001c4  6d617465
0001c8  7269616c
0001cc  20284d53
0001d0  4b2900  
0001d3  00                DCB      0
                  |L7.468|
0001d4  4541502d          DCB      "EAP-SIM: EMSK",0
0001d8  53494d3a
0001dc  20454d53
0001e0  4b00    
0001e2  00                DCB      0
0001e3  00                DCB      0

                          AREA ||i.eap_sim_derive_mk||, CODE, READONLY, ALIGN=2

                  eap_sim_derive_mk PROC
;;;34     
;;;35     void eap_sim_derive_mk(const u8 *identity, size_t identity_len,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;36     		       const u8 *nonce_mt, u16 selected_version,
;;;37     		       const u8 *ver_list, size_t ver_list_len,
;;;38     		       int num_chal, const u8 *kc, u8 *mk)
;;;39     {
000004  b08b              SUB      sp,sp,#0x2c
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4617              MOV      r7,r2
00000c  461c              MOV      r4,r3
00000e  e9ddab19          LDRD     r10,r11,[sp,#0x64]
000012  f8dd9060          LDR      r9,[sp,#0x60]
000016  f8dd8070          LDR      r8,[sp,#0x70]
;;;40     	u8 sel_ver[2];
;;;41     	const unsigned char *addr[5];
;;;42     	size_t len[5];
;;;43     
;;;44     	addr[0] = identity;
00001a  9505              STR      r5,[sp,#0x14]
;;;45     	len[0] = identity_len;
00001c  9600              STR      r6,[sp,#0]
;;;46     	addr[1] = kc;
00001e  981b              LDR      r0,[sp,#0x6c]
000020  9006              STR      r0,[sp,#0x18]
;;;47     	len[1] = num_chal * EAP_SIM_KC_LEN;
000022  ea4f00cb          LSL      r0,r11,#3
000026  9001              STR      r0,[sp,#4]
;;;48     	addr[2] = nonce_mt;
000028  9707              STR      r7,[sp,#0x1c]
;;;49     	len[2] = EAP_SIM_NONCE_MT_LEN;
00002a  2010              MOVS     r0,#0x10
00002c  9002              STR      r0,[sp,#8]
;;;50     	addr[3] = ver_list;
00002e  f8cd9020          STR      r9,[sp,#0x20]
;;;51     	len[3] = ver_list_len;
000032  f8cda00c          STR      r10,[sp,#0xc]
;;;52     	addr[4] = sel_ver;
000036  a80a              ADD      r0,sp,#0x28
000038  9009              STR      r0,[sp,#0x24]
;;;53     	len[4] = 2;
00003a  2002              MOVS     r0,#2
00003c  9004              STR      r0,[sp,#0x10]
;;;54     
;;;55     	WPA_PUT_BE16(sel_ver, selected_version);
00003e  bf00              NOP      
000040  1220              ASRS     r0,r4,#8
000042  f88d0028          STRB     r0,[sp,#0x28]
000046  b2e0              UXTB     r0,r4
000048  f88d0029          STRB     r0,[sp,#0x29]
00004c  bf00              NOP      
;;;56     
;;;57     	/* MK = SHA1(Identity|n*Kc|NONCE_MT|Version List|Selected Version) */
;;;58     	sha1_vector(5, addr, len, mk);
00004e  4643              MOV      r3,r8
000050  466a              MOV      r2,sp
000052  a905              ADD      r1,sp,#0x14
000054  2005              MOVS     r0,#5
000056  f7fffffe          BL       sha1_vector
;;;59     	wpa_hexdump_key(MSG_DEBUG, "EAP-SIM: MK", mk, EAP_SIM_MK_LEN);
00005a  2314              MOVS     r3,#0x14
00005c  4642              MOV      r2,r8
00005e  a103              ADR      r1,|L8.108|
000060  2000              MOVS     r0,#0
000062  f7fffffe          BL       wpa_hexdump_key
;;;60     }
000066  b00f              ADD      sp,sp,#0x3c
000068  e8bd8ff0          POP      {r4-r11,pc}
;;;61     
                          ENDP

                  |L8.108|
00006c  4541502d          DCB      "EAP-SIM: MK",0
000070  53494d3a
000074  204d4b00

                          AREA ||i.eap_sim_msg_add||, CODE, READONLY, ALIGN=1

                  eap_sim_msg_add PROC
;;;1081   
;;;1082   u8 * eap_sim_msg_add(struct eap_sim_msg *msg, u8 attr, u16 value,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1083   		     const u8 *data, size_t len)
;;;1084   {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
000008  4691              MOV      r9,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;1085   	int attr_len = 4 + len;
000010  f1080504          ADD      r5,r8,#4
;;;1086   	int pad_len;
;;;1087   	u8 *start;
;;;1088   
;;;1089   	if (msg == NULL)
000014  b914              CBNZ     r4,|L9.28|
;;;1090   		return NULL;
000016  2000              MOVS     r0,#0
                  |L9.24|
;;;1091   
;;;1092   	pad_len = (4 - attr_len % 4) % 4;
;;;1093   	attr_len += pad_len;
;;;1094   	if (wpabuf_resize(&msg->buf, attr_len))
;;;1095   		return NULL;
;;;1096   	start = wpabuf_put(msg->buf, 0);
;;;1097   	wpabuf_put_u8(msg->buf, attr);
;;;1098   	wpabuf_put_u8(msg->buf, attr_len / 4);
;;;1099   	wpabuf_put_be16(msg->buf, value);
;;;1100   	if (data)
;;;1101   		wpabuf_put_data(msg->buf, data, len);
;;;1102   	else
;;;1103   		wpabuf_put(msg->buf, len);
;;;1104   	if (pad_len)
;;;1105   		os_memset(wpabuf_put(msg->buf, pad_len), 0, pad_len);
;;;1106   	return start;
;;;1107   }
000018  e8bd8ff8          POP      {r3-r11,pc}
                  |L9.28|
00001c  4629              MOV      r1,r5                 ;1092
00001e  17ea              ASRS     r2,r5,#31             ;1092
000020  eb057292          ADD      r2,r5,r2,LSR #30      ;1092
000024  1092              ASRS     r2,r2,#2              ;1092
000026  eba50282          SUB      r2,r5,r2,LSL #2       ;1092
00002a  f1c20004          RSB      r0,r2,#4              ;1092
00002e  17c2              ASRS     r2,r0,#31             ;1092
000030  eb007292          ADD      r2,r0,r2,LSR #30      ;1092
000034  1092              ASRS     r2,r2,#2              ;1092
000036  eba00682          SUB      r6,r0,r2,LSL #2       ;1092
00003a  4435              ADD      r5,r5,r6              ;1093
00003c  4629              MOV      r1,r5                 ;1094
00003e  4620              MOV      r0,r4                 ;1094
000040  f7fffffe          BL       wpabuf_resize
000044  b108              CBZ      r0,|L9.74|
000046  2000              MOVS     r0,#0                 ;1095
000048  e7e6              B        |L9.24|
                  |L9.74|
00004a  2100              MOVS     r1,#0                 ;1096
00004c  6820              LDR      r0,[r4,#0]            ;1096
00004e  f7fffffe          BL       wpabuf_put
000052  9000              STR      r0,[sp,#0]            ;1096
000054  4651              MOV      r1,r10                ;1097
000056  6820              LDR      r0,[r4,#0]            ;1097
000058  f7fffffe          BL       wpabuf_put_u8
00005c  46ab              MOV      r11,r5                ;1098
00005e  17ea              ASRS     r2,r5,#31             ;1098
000060  eb057292          ADD      r2,r5,r2,LSR #30      ;1098
000064  f3c20187          UBFX     r1,r2,#2,#8           ;1098
000068  6820              LDR      r0,[r4,#0]            ;1098
00006a  f7fffffe          BL       wpabuf_put_u8
00006e  4649              MOV      r1,r9                 ;1099
000070  6820              LDR      r0,[r4,#0]            ;1099
000072  f7fffffe          BL       wpabuf_put_be16
000076  b12f              CBZ      r7,|L9.132|
000078  4642              MOV      r2,r8                 ;1101
00007a  4639              MOV      r1,r7                 ;1101
00007c  6820              LDR      r0,[r4,#0]            ;1101
00007e  f7fffffe          BL       wpabuf_put_data
000082  e003              B        |L9.140|
                  |L9.132|
000084  4641              MOV      r1,r8                 ;1103
000086  6820              LDR      r0,[r4,#0]            ;1103
000088  f7fffffe          BL       wpabuf_put
                  |L9.140|
00008c  b146              CBZ      r6,|L9.160|
00008e  4631              MOV      r1,r6                 ;1105
000090  6820              LDR      r0,[r4,#0]            ;1105
000092  f7fffffe          BL       wpabuf_put
000096  4683              MOV      r11,r0                ;1105
000098  4632              MOV      r2,r6                 ;1105
00009a  2100              MOVS     r1,#0                 ;1105
00009c  f7fffffe          BL       os_memset
                  |L9.160|
0000a0  9800              LDR      r0,[sp,#0]            ;1106
0000a2  e7b9              B        |L9.24|
;;;1108   
                          ENDP


                          AREA ||i.eap_sim_msg_add_encr_end||, CODE, READONLY, ALIGN=2

                  eap_sim_msg_add_encr_end PROC
;;;1142   
;;;1143   int eap_sim_msg_add_encr_end(struct eap_sim_msg *msg, u8 *k_encr, int attr_pad)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1144   {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
;;;1145   	size_t encr_len;
;;;1146   
;;;1147   	if (msg == NULL || k_encr == NULL || msg->iv == 0 || msg->encr == 0)
00000a  b134              CBZ      r4,|L10.26|
00000c  f1b80f00          CMP      r8,#0
000010  d003              BEQ      |L10.26|
000012  68a0              LDR      r0,[r4,#8]
000014  b108              CBZ      r0,|L10.26|
000016  68e0              LDR      r0,[r4,#0xc]
000018  b918              CBNZ     r0,|L10.34|
                  |L10.26|
;;;1148   		return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L10.30|
;;;1149   
;;;1150   	encr_len = wpabuf_len(msg->buf) - msg->encr - 4;
;;;1151   	if (encr_len % 16) {
;;;1152   		u8 *pos;
;;;1153   		int pad_len = 16 - (encr_len % 16);
;;;1154   		if (pad_len < 4) {
;;;1155   			wpa_printf(MSG_WARNING, "EAP-SIM: "
;;;1156   				   "eap_sim_msg_add_encr_end - invalid pad_len"
;;;1157   				   " %d", pad_len);
;;;1158   			return -1;
;;;1159   		}
;;;1160   		wpa_printf(MSG_DEBUG, "   *AT_PADDING");
;;;1161   		pos = eap_sim_msg_add(msg, attr_pad, 0, NULL, pad_len - 4);
;;;1162   		if (pos == NULL)
;;;1163   			return -1;
;;;1164   		os_memset(pos + 4, 0, pad_len - 4);
;;;1165   		encr_len += pad_len;
;;;1166   	}
;;;1167   	wpa_printf(MSG_DEBUG, "   (AT_ENCR_DATA data len %lu)",
;;;1168   		   (unsigned long) encr_len);
;;;1169   	wpabuf_mhead_u8(msg->buf)[msg->encr + 1] = encr_len / 4 + 1;
;;;1170   	return aes_128_cbc_encrypt(k_encr, wpabuf_head_u8(msg->buf) + msg->iv,
;;;1171   				   wpabuf_mhead_u8(msg->buf) + msg->encr + 4,
;;;1172   				   encr_len);
;;;1173   }
00001e  e8bd83f8          POP      {r3-r9,pc}
                  |L10.34|
000022  6820              LDR      r0,[r4,#0]            ;1150
000024  f7fffffe          BL       wpabuf_len
000028  68e1              LDR      r1,[r4,#0xc]          ;1150
00002a  1a40              SUBS     r0,r0,r1              ;1150
00002c  1f05              SUBS     r5,r0,#4              ;1150
00002e  f0150f0f          TST      r5,#0xf               ;1151
000032  d026              BEQ      |L10.130|
000034  f005000f          AND      r0,r5,#0xf            ;1153
000038  f1c00610          RSB      r6,r0,#0x10           ;1153
00003c  2e04              CMP      r6,#4                 ;1154
00003e  da07              BGE      |L10.80|
000040  4632              MOV      r2,r6                 ;1155
000042  a120              ADR      r1,|L10.196|
000044  2000              MOVS     r0,#0                 ;1155
000046  f7fffffe          BL       wpa_printf
00004a  f04f30ff          MOV      r0,#0xffffffff        ;1158
00004e  e7e6              B        |L10.30|
                  |L10.80|
000050  a12a              ADR      r1,|L10.252|
000052  2000              MOVS     r0,#0                 ;1160
000054  f7fffffe          BL       wpa_printf
000058  1f33              SUBS     r3,r6,#4              ;1161
00005a  9300              STR      r3,[sp,#0]            ;1161
00005c  2300              MOVS     r3,#0                 ;1161
00005e  461a              MOV      r2,r3                 ;1161
000060  f00901ff          AND      r1,r9,#0xff           ;1161
000064  4620              MOV      r0,r4                 ;1161
000066  f7fffffe          BL       eap_sim_msg_add
00006a  4607              MOV      r7,r0                 ;1161
00006c  b917              CBNZ     r7,|L10.116|
00006e  f04f30ff          MOV      r0,#0xffffffff        ;1163
000072  e7d4              B        |L10.30|
                  |L10.116|
000074  1f32              SUBS     r2,r6,#4              ;1164
000076  2100              MOVS     r1,#0                 ;1164
000078  1d38              ADDS     r0,r7,#4              ;1164
00007a  f7fffffe          BL       os_memset
00007e  4435              ADD      r5,r5,r6              ;1165
000080  bf00              NOP                            ;1166
                  |L10.130|
000082  462a              MOV      r2,r5                 ;1167
000084  a121              ADR      r1,|L10.268|
000086  2000              MOVS     r0,#0                 ;1167
000088  f7fffffe          BL       wpa_printf
00008c  6820              LDR      r0,[r4,#0]            ;1169
00008e  f7fffffe          BL       wpabuf_mhead_u8
000092  4601              MOV      r1,r0                 ;1169
000094  68e0              LDR      r0,[r4,#0xc]          ;1169
000096  1c40              ADDS     r0,r0,#1              ;1169
000098  2201              MOVS     r2,#1                 ;1169
00009a  eb020295          ADD      r2,r2,r5,LSR #2       ;1169
00009e  540a              STRB     r2,[r1,r0]            ;1169
0000a0  6820              LDR      r0,[r4,#0]            ;1170
0000a2  f7fffffe          BL       wpabuf_mhead_u8
0000a6  68e1              LDR      r1,[r4,#0xc]          ;1170
0000a8  4408              ADD      r0,r0,r1              ;1170
0000aa  1d06              ADDS     r6,r0,#4              ;1170
0000ac  6820              LDR      r0,[r4,#0]            ;1170
0000ae  f7fffffe          BL       wpabuf_head_u8
0000b2  68a1              LDR      r1,[r4,#8]            ;1170
0000b4  1847              ADDS     r7,r0,r1              ;1170
0000b6  462b              MOV      r3,r5                 ;1170
0000b8  4632              MOV      r2,r6                 ;1170
0000ba  4639              MOV      r1,r7                 ;1170
0000bc  4640              MOV      r0,r8                 ;1170
0000be  f7fffffe          BL       aes_128_cbc_encrypt
0000c2  e7ac              B        |L10.30|
;;;1174   
                          ENDP

                  |L10.196|
0000c4  4541502d          DCB      "EAP-SIM: eap_sim_msg_add_encr_end - invalid pad_len %d",0
0000c8  53494d3a
0000cc  20656170
0000d0  5f73696d
0000d4  5f6d7367
0000d8  5f616464
0000dc  5f656e63
0000e0  725f656e
0000e4  64202d20
0000e8  696e7661
0000ec  6c696420
0000f0  7061645f
0000f4  6c656e20
0000f8  256400  
0000fb  00                DCB      0
                  |L10.252|
0000fc  2020202a          DCB      "   *AT_PADDING",0
000100  41545f50
000104  41444449
000108  4e4700  
00010b  00                DCB      0
                  |L10.268|
00010c  20202028          DCB      "   (AT_ENCR_DATA data len %lu)",0
000110  41545f45
000114  4e43525f
000118  44415441
00011c  20646174
000120  61206c65
000124  6e20256c
000128  752900  
00012b  00                DCB      0

                          AREA ||i.eap_sim_msg_add_encr_start||, CODE, READONLY, ALIGN=1

                  eap_sim_msg_add_encr_start PROC
;;;1118   
;;;1119   int eap_sim_msg_add_encr_start(struct eap_sim_msg *msg, u8 attr_iv,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1120   			       u8 attr_encr)
;;;1121   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
;;;1122   	u8 *pos = eap_sim_msg_add(msg, attr_iv, 0, NULL, EAP_SIM_IV_LEN);
00000a  2310              MOVS     r3,#0x10
00000c  9300              STR      r3,[sp,#0]
00000e  2300              MOVS     r3,#0
000010  461a              MOV      r2,r3
000012  4639              MOV      r1,r7
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       eap_sim_msg_add
00001a  4605              MOV      r5,r0
;;;1123   	if (pos == NULL)
00001c  b91d              CBNZ     r5,|L11.38|
;;;1124   		return -1;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L11.34|
;;;1125   	msg->iv = (pos - wpabuf_head_u8(msg->buf)) + 4;
;;;1126   	if (os_get_random(wpabuf_mhead_u8(msg->buf) + msg->iv,
;;;1127   			  EAP_SIM_IV_LEN)) {
;;;1128   		msg->iv = 0;
;;;1129   		return -1;
;;;1130   	}
;;;1131   
;;;1132   	pos = eap_sim_msg_add(msg, attr_encr, 0, NULL, 0);
;;;1133   	if (pos == NULL) {
;;;1134   		msg->iv = 0;
;;;1135   		return -1;
;;;1136   	}
;;;1137   	msg->encr = pos - wpabuf_head_u8(msg->buf);
;;;1138   
;;;1139   	return 0;
;;;1140   }
000022  e8bd83f8          POP      {r3-r9,pc}
                  |L11.38|
000026  6820              LDR      r0,[r4,#0]            ;1125
000028  f7fffffe          BL       wpabuf_head_u8
00002c  1a28              SUBS     r0,r5,r0              ;1125
00002e  1d00              ADDS     r0,r0,#4              ;1125
000030  60a0              STR      r0,[r4,#8]            ;1125
000032  6820              LDR      r0,[r4,#0]            ;1126
000034  f7fffffe          BL       wpabuf_mhead_u8
000038  68a1              LDR      r1,[r4,#8]            ;1126
00003a  eb000801          ADD      r8,r0,r1              ;1126
00003e  2110              MOVS     r1,#0x10              ;1126
000040  4640              MOV      r0,r8                 ;1126
000042  f7fffffe          BL       os_get_random
000046  b118              CBZ      r0,|L11.80|
000048  2000              MOVS     r0,#0                 ;1128
00004a  60a0              STR      r0,[r4,#8]            ;1128
00004c  1e40              SUBS     r0,r0,#1              ;1129
00004e  e7e8              B        |L11.34|
                  |L11.80|
000050  2300              MOVS     r3,#0                 ;1132
000052  461a              MOV      r2,r3                 ;1132
000054  4631              MOV      r1,r6                 ;1132
000056  4620              MOV      r0,r4                 ;1132
000058  9300              STR      r3,[sp,#0]            ;1132
00005a  f7fffffe          BL       eap_sim_msg_add
00005e  4605              MOV      r5,r0                 ;1132
000060  b91d              CBNZ     r5,|L11.106|
000062  2000              MOVS     r0,#0                 ;1134
000064  60a0              STR      r0,[r4,#8]            ;1134
000066  1e40              SUBS     r0,r0,#1              ;1135
000068  e7db              B        |L11.34|
                  |L11.106|
00006a  6820              LDR      r0,[r4,#0]            ;1137
00006c  f7fffffe          BL       wpabuf_head_u8
000070  1a28              SUBS     r0,r5,r0              ;1137
000072  60e0              STR      r0,[r4,#0xc]          ;1137
000074  2000              MOVS     r0,#0                 ;1139
000076  e7d4              B        |L11.34|
;;;1141   
                          ENDP


                          AREA ||i.eap_sim_msg_add_full||, CODE, READONLY, ALIGN=1

                  eap_sim_msg_add_full PROC
;;;1057   
;;;1058   u8 * eap_sim_msg_add_full(struct eap_sim_msg *msg, u8 attr,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1059   			  const u8 *data, size_t len)
;;;1060   {
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
000008  4690              MOV      r8,r2
00000a  461f              MOV      r7,r3
;;;1061   	int attr_len = 2 + len;
00000c  1cbc              ADDS     r4,r7,#2
;;;1062   	int pad_len;
;;;1063   	u8 *start;
;;;1064   
;;;1065   	if (msg == NULL)
00000e  b915              CBNZ     r5,|L12.22|
;;;1066   		return NULL;
000010  2000              MOVS     r0,#0
                  |L12.18|
;;;1067   
;;;1068   	pad_len = (4 - attr_len % 4) % 4;
;;;1069   	attr_len += pad_len;
;;;1070   	if (wpabuf_resize(&msg->buf, attr_len))
;;;1071   		return NULL;
;;;1072   	start = wpabuf_put(msg->buf, 0);
;;;1073   	wpabuf_put_u8(msg->buf, attr);
;;;1074   	wpabuf_put_u8(msg->buf, attr_len / 4);
;;;1075   	wpabuf_put_data(msg->buf, data, len);
;;;1076   	if (pad_len)
;;;1077   		os_memset(wpabuf_put(msg->buf, pad_len), 0, pad_len);
;;;1078   	return start;
;;;1079   }
000012  e8bd9ff0          POP      {r4-r12,pc}
                  |L12.22|
000016  4621              MOV      r1,r4                 ;1068
000018  17e2              ASRS     r2,r4,#31             ;1068
00001a  eb047292          ADD      r2,r4,r2,LSR #30      ;1068
00001e  1092              ASRS     r2,r2,#2              ;1068
000020  eba40282          SUB      r2,r4,r2,LSL #2       ;1068
000024  f1c20004          RSB      r0,r2,#4              ;1068
000028  17c2              ASRS     r2,r0,#31             ;1068
00002a  eb007292          ADD      r2,r0,r2,LSR #30      ;1068
00002e  1092              ASRS     r2,r2,#2              ;1068
000030  eba00682          SUB      r6,r0,r2,LSL #2       ;1068
000034  4434              ADD      r4,r4,r6              ;1069
000036  4621              MOV      r1,r4                 ;1070
000038  4628              MOV      r0,r5                 ;1070
00003a  f7fffffe          BL       wpabuf_resize
00003e  b108              CBZ      r0,|L12.68|
000040  2000              MOVS     r0,#0                 ;1071
000042  e7e6              B        |L12.18|
                  |L12.68|
000044  2100              MOVS     r1,#0                 ;1072
000046  6828              LDR      r0,[r5,#0]            ;1072
000048  f7fffffe          BL       wpabuf_put
00004c  4682              MOV      r10,r0                ;1072
00004e  4649              MOV      r1,r9                 ;1073
000050  6828              LDR      r0,[r5,#0]            ;1073
000052  f7fffffe          BL       wpabuf_put_u8
000056  46a3              MOV      r11,r4                ;1074
000058  17e2              ASRS     r2,r4,#31             ;1074
00005a  eb047292          ADD      r2,r4,r2,LSR #30      ;1074
00005e  f3c20187          UBFX     r1,r2,#2,#8           ;1074
000062  6828              LDR      r0,[r5,#0]            ;1074
000064  f7fffffe          BL       wpabuf_put_u8
000068  463a              MOV      r2,r7                 ;1075
00006a  4641              MOV      r1,r8                 ;1075
00006c  6828              LDR      r0,[r5,#0]            ;1075
00006e  f7fffffe          BL       wpabuf_put_data
000072  b146              CBZ      r6,|L12.134|
000074  4631              MOV      r1,r6                 ;1077
000076  6828              LDR      r0,[r5,#0]            ;1077
000078  f7fffffe          BL       wpabuf_put
00007c  4683              MOV      r11,r0                ;1077
00007e  4632              MOV      r2,r6                 ;1077
000080  2100              MOVS     r1,#0                 ;1077
000082  f7fffffe          BL       os_memset
                  |L12.134|
000086  4650              MOV      r0,r10                ;1078
000088  e7c3              B        |L12.18|
;;;1080   
                          ENDP


                          AREA ||i.eap_sim_msg_add_mac||, CODE, READONLY, ALIGN=1

                  eap_sim_msg_add_mac PROC
;;;1109   
;;;1110   u8 * eap_sim_msg_add_mac(struct eap_sim_msg *msg, u8 attr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1111   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;1112   	u8 *pos = eap_sim_msg_add(msg, attr, 0, NULL, EAP_SIM_MAC_LEN);
000006  2310              MOVS     r3,#0x10
000008  9300              STR      r3,[sp,#0]
00000a  2300              MOVS     r3,#0
00000c  461a              MOV      r2,r3
00000e  4631              MOV      r1,r6
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       eap_sim_msg_add
000016  4605              MOV      r5,r0
;;;1113   	if (pos)
000018  b12d              CBZ      r5,|L13.38|
;;;1114   		msg->mac = (pos - wpabuf_head_u8(msg->buf)) + 4;
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       wpabuf_head_u8
000020  1a28              SUBS     r0,r5,r0
000022  1d00              ADDS     r0,r0,#4
000024  6060              STR      r0,[r4,#4]
                  |L13.38|
;;;1115   	return pos;
000026  4628              MOV      r0,r5
;;;1116   }
000028  bdf8              POP      {r3-r7,pc}
;;;1117   
                          ENDP


                          AREA ||i.eap_sim_msg_finish||, CODE, READONLY, ALIGN=1

                  eap_sim_msg_finish PROC
;;;1015   
;;;1016   struct wpabuf * eap_sim_msg_finish(struct eap_sim_msg *msg, const u8 *k_aut,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;1017   				   const u8 *extra, size_t extra_len)
;;;1018   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;1019   	struct eap_hdr *eap;
;;;1020   	struct wpabuf *buf;
;;;1021   
;;;1022   	if (msg == NULL)
00000c  b914              CBNZ     r4,|L14.20|
;;;1023   		return NULL;
00000e  2000              MOVS     r0,#0
                  |L14.16|
;;;1024   
;;;1025   	eap = wpabuf_mhead(msg->buf);
;;;1026   	eap->length = host_to_be16(wpabuf_len(msg->buf));
;;;1027   
;;;1028   #if defined(EAP_AKA_PRIME) || defined(EAP_SERVER_AKA_PRIME)
;;;1029   	if (k_aut && msg->mac && msg->type == EAP_TYPE_AKA_PRIME) {
;;;1030   		eap_sim_add_mac_sha256(k_aut, (u8 *) wpabuf_head(msg->buf),
;;;1031   				       wpabuf_len(msg->buf),
;;;1032   				       (u8 *) wpabuf_mhead(msg->buf) +
;;;1033   				       msg->mac, extra, extra_len);
;;;1034   	} else
;;;1035   #endif /* EAP_AKA_PRIME || EAP_SERVER_AKA_PRIME */
;;;1036   	if (k_aut && msg->mac) {
;;;1037   		eap_sim_add_mac(k_aut, (u8 *) wpabuf_head(msg->buf),
;;;1038   				wpabuf_len(msg->buf),
;;;1039   				(u8 *) wpabuf_mhead(msg->buf) + msg->mac,
;;;1040   				extra, extra_len);
;;;1041   	}
;;;1042   
;;;1043   	buf = msg->buf;
;;;1044   	os_free(msg);
;;;1045   	return buf;
;;;1046   }
000010  e8bd8ffe          POP      {r1-r11,pc}
                  |L14.20|
000014  6820              LDR      r0,[r4,#0]            ;1025
000016  f7fffffe          BL       wpabuf_mhead
00001a  4606              MOV      r6,r0                 ;1025
00001c  6820              LDR      r0,[r4,#0]            ;1026
00001e  f7fffffe          BL       wpabuf_len
000022  b280              UXTH     r0,r0                 ;1026
000024  f44f417f          MOV      r1,#0xff00            ;1026
000028  ea012a00          AND      r10,r1,r0,LSL #8      ;1026
00002c  6820              LDR      r0,[r4,#0]            ;1026
00002e  f7fffffe          BL       wpabuf_len
000032  f3c02007          UBFX     r0,r0,#8,#8           ;1026
000036  ea4a0000          ORR      r0,r10,r0             ;1026
00003a  8070              STRH     r0,[r6,#2]            ;1026
00003c  b1bd              CBZ      r5,|L14.110|
00003e  6860              LDR      r0,[r4,#4]            ;1036
000040  b1a8              CBZ      r0,|L14.110|
000042  6820              LDR      r0,[r4,#0]            ;1037
000044  f7fffffe          BL       wpabuf_mhead
000048  6861              LDR      r1,[r4,#4]            ;1037
00004a  eb000a01          ADD      r10,r0,r1             ;1037
00004e  6820              LDR      r0,[r4,#0]            ;1037
000050  f7fffffe          BL       wpabuf_len
000054  4683              MOV      r11,r0                ;1037
000056  6820              LDR      r0,[r4,#0]            ;1037
000058  f7fffffe          BL       wpabuf_head
00005c  4653              MOV      r3,r10                ;1037
00005e  465a              MOV      r2,r11                ;1037
000060  4601              MOV      r1,r0                 ;1037
000062  e9cd8900          STRD     r8,r9,[sp,#0]         ;1037
000066  9002              STR      r0,[sp,#8]            ;1037
000068  4628              MOV      r0,r5                 ;1037
00006a  f7fffffe          BL       eap_sim_add_mac
                  |L14.110|
00006e  6827              LDR      r7,[r4,#0]            ;1043
000070  4620              MOV      r0,r4                 ;1044
000072  f7fffffe          BL       os_free
000076  4638              MOV      r0,r7                 ;1045
000078  e7ca              B        |L14.16|
;;;1047   
                          ENDP


                          AREA ||i.eap_sim_msg_free||, CODE, READONLY, ALIGN=1

                  eap_sim_msg_free PROC
;;;1048   
;;;1049   void eap_sim_msg_free(struct eap_sim_msg *msg)
000000  b510              PUSH     {r4,lr}
;;;1050   {
000002  4604              MOV      r4,r0
;;;1051   	if (msg) {
000004  b12c              CBZ      r4,|L15.18|
;;;1052   		wpabuf_free(msg->buf);
000006  6820              LDR      r0,[r4,#0]
000008  f7fffffe          BL       wpabuf_free
;;;1053   		os_free(msg);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       os_free
                  |L15.18|
;;;1054   	}
;;;1055   }
000012  bd10              POP      {r4,pc}
;;;1056   
                          ENDP


                          AREA ||i.eap_sim_msg_init||, CODE, READONLY, ALIGN=1

                  eap_sim_msg_init PROC
;;;985    
;;;986    struct eap_sim_msg * eap_sim_msg_init(int code, int id, int type, int subtype)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;987    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  469a              MOV      r10,r3
;;;988    	struct eap_sim_msg *msg;
;;;989    	struct eap_hdr *eap;
;;;990    	u8 *pos;
;;;991    
;;;992    	msg = os_zalloc(sizeof(*msg));
00000c  2014              MOVS     r0,#0x14
00000e  f7fffffe          BL       os_zalloc
000012  4605              MOV      r5,r0
;;;993    	if (msg == NULL)
000014  b915              CBNZ     r5,|L16.28|
;;;994    		return NULL;
000016  2000              MOVS     r0,#0
                  |L16.24|
;;;995    
;;;996    	msg->type = type;
;;;997    	msg->buf = wpabuf_alloc(EAP_SIM_INIT_LEN);
;;;998    	if (msg->buf == NULL) {
;;;999    		os_free(msg);
;;;1000   		return NULL;
;;;1001   	}
;;;1002   	eap = wpabuf_put(msg->buf, sizeof(*eap));
;;;1003   	eap->code = code;
;;;1004   	eap->identifier = id;
;;;1005   
;;;1006   	pos = wpabuf_put(msg->buf, 4);
;;;1007   	*pos++ = type;
;;;1008   	*pos++ = subtype;
;;;1009   	*pos++ = 0; /* Reserved */
;;;1010   	*pos++ = 0; /* Reserved */
;;;1011   
;;;1012   	return msg;
;;;1013   }
000018  e8bd87f0          POP      {r4-r10,pc}
                  |L16.28|
00001c  612e              STR      r6,[r5,#0x10]         ;996
00001e  2080              MOVS     r0,#0x80              ;997
000020  f7fffffe          BL       wpabuf_alloc
000024  6028              STR      r0,[r5,#0]            ;997
000026  6828              LDR      r0,[r5,#0]            ;998
000028  b920              CBNZ     r0,|L16.52|
00002a  4628              MOV      r0,r5                 ;999
00002c  f7fffffe          BL       os_free
000030  2000              MOVS     r0,#0                 ;1000
000032  e7f1              B        |L16.24|
                  |L16.52|
000034  2104              MOVS     r1,#4                 ;1002
000036  6828              LDR      r0,[r5,#0]            ;1002
000038  f7fffffe          BL       wpabuf_put
00003c  4607              MOV      r7,r0                 ;1002
00003e  f8878000          STRB     r8,[r7,#0]            ;1003
000042  f8879001          STRB     r9,[r7,#1]            ;1004
000046  2104              MOVS     r1,#4                 ;1006
000048  6828              LDR      r0,[r5,#0]            ;1006
00004a  f7fffffe          BL       wpabuf_put
00004e  4604              MOV      r4,r0                 ;1006
000050  f8046b01          STRB     r6,[r4],#1            ;1007
000054  f804ab01          STRB     r10,[r4],#1           ;1008
000058  2000              MOVS     r0,#0                 ;1009
00005a  f8040b01          STRB     r0,[r4],#1            ;1009
00005e  f8040b01          STRB     r0,[r4],#1            ;1010
000062  4628              MOV      r0,r5                 ;1012
000064  e7d8              B        |L16.24|
;;;1014   
                          ENDP


                          AREA ||i.eap_sim_parse_attr||, CODE, READONLY, ALIGN=2

                  eap_sim_parse_attr PROC
;;;503    
;;;504    int eap_sim_parse_attr(const u8 *start, const u8 *end,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;505    		       struct eap_sim_attrs *attr, int aka, int encr)
;;;506    {
000004  b083              SUB      sp,sp,#0xc
000006  468b              MOV      r11,r1
000008  4614              MOV      r4,r2
00000a  4698              MOV      r8,r3
00000c  f8dd9040          LDR      r9,[sp,#0x40]
;;;507    	const u8 *pos = start, *apos;
000010  9f03              LDR      r7,[sp,#0xc]
;;;508    	size_t alen, plen, i, list_len;
;;;509    
;;;510    	os_memset(attr, 0, sizeof(*attr));
000012  229c              MOVS     r2,#0x9c
000014  2100              MOVS     r1,#0
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       os_memset
;;;511    	attr->id_req = NO_ID_REQ;
00001c  2000              MOVS     r0,#0
00001e  f8840068          STRB     r0,[r4,#0x68]
;;;512    	attr->notification = -1;
000022  1e40              SUBS     r0,r0,#1
000024  66e0              STR      r0,[r4,#0x6c]
;;;513    	attr->counter = -1;
000026  6720              STR      r0,[r4,#0x70]
;;;514    	attr->selected_version = -1;
000028  6760              STR      r0,[r4,#0x74]
;;;515    	attr->client_error_code = -1;
00002a  67a0              STR      r0,[r4,#0x78]
;;;516    
;;;517    	while (pos < end) {
00002c  e3f1              B        |L17.2066|
                  |L17.46|
;;;518    		if (pos + 2 > end) {
00002e  1cb8              ADDS     r0,r7,#2
000030  4558              CMP      r0,r11
000032  d908              BLS      |L17.70|
;;;519    			wpa_printf(MSG_INFO, "EAP-SIM: Attribute overflow(1)");
000034  a1bd              ADR      r1,|L17.812|
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       wpa_printf
;;;520    			return -1;
00003c  f04f30ff          MOV      r0,#0xffffffff
                  |L17.64|
;;;521    		}
;;;522    		wpa_printf(MSG_MSGDUMP, "EAP-SIM: Attribute: Type=%d Len=%d",
;;;523    			   pos[0], pos[1] * 4);
;;;524    		if (pos + pos[1] * 4 > end) {
;;;525    			wpa_printf(MSG_INFO, "EAP-SIM: Attribute overflow "
;;;526    				   "(pos=%p len=%d end=%p)",
;;;527    				   pos, pos[1] * 4, end);
;;;528    			return -1;
;;;529    		}
;;;530    		if (pos[1] == 0) {
;;;531    			wpa_printf(MSG_INFO, "EAP-SIM: Attribute underflow");
;;;532    			return -1;
;;;533    		}
;;;534    		apos = pos + 2;
;;;535    		alen = pos[1] * 4 - 2;
;;;536    		wpa_hexdump(MSG_MSGDUMP, "EAP-SIM: Attribute data",
;;;537    			    apos, alen);
;;;538    
;;;539    		switch (pos[0]) {
;;;540    		case EAP_SIM_AT_RAND:
;;;541    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_RAND");
;;;542    			apos += 2;
;;;543    			alen -= 2;
;;;544    			if ((!aka && (alen % GSM_RAND_LEN)) ||
;;;545    			    (aka && alen != EAP_AKA_RAND_LEN)) {
;;;546    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid AT_RAND"
;;;547    					   " (len %lu)",
;;;548    					   (unsigned long) alen);
;;;549    				return -1;
;;;550    			}
;;;551    			attr->rand = apos;
;;;552    			attr->num_chal = alen / GSM_RAND_LEN;
;;;553    			break;
;;;554    		case EAP_SIM_AT_AUTN:
;;;555    			wpa_printf(MSG_DEBUG, "EAP-AKA: AT_AUTN");
;;;556    			if (!aka) {
;;;557    				wpa_printf(MSG_DEBUG, "EAP-SIM: "
;;;558    					   "Unexpected AT_AUTN");
;;;559    				return -1;
;;;560    			}
;;;561    			apos += 2;
;;;562    			alen -= 2;
;;;563    			if (alen != EAP_AKA_AUTN_LEN) {
;;;564    				wpa_printf(MSG_INFO, "EAP-AKA: Invalid AT_AUTN"
;;;565    					   " (len %lu)",
;;;566    					   (unsigned long) alen);
;;;567    				return -1;
;;;568    			}
;;;569    			attr->autn = apos;
;;;570    			break;
;;;571    		case EAP_SIM_AT_PADDING:
;;;572    			if (!encr) {
;;;573    				wpa_printf(MSG_ERROR, "EAP-SIM: Unencrypted "
;;;574    					   "AT_PADDING");
;;;575    				return -1;
;;;576    			}
;;;577    			wpa_printf(MSG_DEBUG, "EAP-SIM: (encr) AT_PADDING");
;;;578    			for (i = 2; i < alen; i++) {
;;;579    				if (apos[i] != 0) {
;;;580    					wpa_printf(MSG_INFO, "EAP-SIM: (encr) "
;;;581    						   "AT_PADDING used a non-zero"
;;;582    						   " padding byte");
;;;583    					wpa_hexdump(MSG_DEBUG, "EAP-SIM: "
;;;584    						    "(encr) padding bytes",
;;;585    						    apos + 2, alen - 2);
;;;586    					return -1;
;;;587    				}
;;;588    			}
;;;589    			break;
;;;590    		case EAP_SIM_AT_NONCE_MT:
;;;591    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_NONCE_MT");
;;;592    			if (alen != 2 + EAP_SIM_NONCE_MT_LEN) {
;;;593    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid "
;;;594    					   "AT_NONCE_MT length");
;;;595    				return -1;
;;;596    			}
;;;597    			attr->nonce_mt = apos + 2;
;;;598    			break;
;;;599    		case EAP_SIM_AT_PERMANENT_ID_REQ:
;;;600    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_PERMANENT_ID_REQ");
;;;601    			attr->id_req = PERMANENT_ID;
;;;602    			break;
;;;603    		case EAP_SIM_AT_MAC:
;;;604    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_MAC");
;;;605    			if (alen != 2 + EAP_SIM_MAC_LEN) {
;;;606    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid AT_MAC "
;;;607    					   "length");
;;;608    				return -1;
;;;609    			}
;;;610    			attr->mac = apos + 2;
;;;611    			break;
;;;612    		case EAP_SIM_AT_NOTIFICATION:
;;;613    			if (alen != 2) {
;;;614    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid "
;;;615    					   "AT_NOTIFICATION length %lu",
;;;616    					   (unsigned long) alen);
;;;617    				return -1;
;;;618    			}
;;;619    			attr->notification = apos[0] * 256 + apos[1];
;;;620    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_NOTIFICATION %d",
;;;621    				   attr->notification);
;;;622    			break;
;;;623    		case EAP_SIM_AT_ANY_ID_REQ:
;;;624    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_ANY_ID_REQ");
;;;625    			attr->id_req = ANY_ID;
;;;626    			break;
;;;627    		case EAP_SIM_AT_IDENTITY:
;;;628    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_IDENTITY");
;;;629    			plen = WPA_GET_BE16(apos);
;;;630    			apos += 2;
;;;631    			alen -= 2;
;;;632    			if (plen > alen) {
;;;633    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid "
;;;634    					   "AT_IDENTITY (Actual Length %lu, "
;;;635    					   "remaining length %lu)",
;;;636    					   (unsigned long) plen,
;;;637    					   (unsigned long) alen);
;;;638    				return -1;
;;;639    			}
;;;640    
;;;641    			attr->identity = apos;
;;;642    			attr->identity_len = plen;
;;;643    			break;
;;;644    		case EAP_SIM_AT_VERSION_LIST:
;;;645    			if (aka) {
;;;646    				wpa_printf(MSG_DEBUG, "EAP-AKA: "
;;;647    					   "Unexpected AT_VERSION_LIST");
;;;648    				return -1;
;;;649    			}
;;;650    			list_len = apos[0] * 256 + apos[1];
;;;651    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_VERSION_LIST");
;;;652    			if (list_len < 2 || list_len > alen - 2) {
;;;653    				wpa_printf(MSG_WARNING, "EAP-SIM: Invalid "
;;;654    					   "AT_VERSION_LIST (list_len=%lu "
;;;655    					   "attr_len=%lu)",
;;;656    					   (unsigned long) list_len,
;;;657    					   (unsigned long) alen);
;;;658    				return -1;
;;;659    			}
;;;660    			attr->version_list = apos + 2;
;;;661    			attr->version_list_len = list_len;
;;;662    			break;
;;;663    		case EAP_SIM_AT_SELECTED_VERSION:
;;;664    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_SELECTED_VERSION");
;;;665    			if (alen != 2) {
;;;666    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid "
;;;667    					   "AT_SELECTED_VERSION length %lu",
;;;668    					   (unsigned long) alen);
;;;669    				return -1;
;;;670    			}
;;;671    			attr->selected_version = apos[0] * 256 + apos[1];
;;;672    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_SELECTED_VERSION "
;;;673    				   "%d", attr->selected_version);
;;;674    			break;
;;;675    		case EAP_SIM_AT_FULLAUTH_ID_REQ:
;;;676    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_FULLAUTH_ID_REQ");
;;;677    			attr->id_req = FULLAUTH_ID;
;;;678    			break;
;;;679    		case EAP_SIM_AT_COUNTER:
;;;680    			if (!encr) {
;;;681    				wpa_printf(MSG_ERROR, "EAP-SIM: Unencrypted "
;;;682    					   "AT_COUNTER");
;;;683    				return -1;
;;;684    			}
;;;685    			if (alen != 2) {
;;;686    				wpa_printf(MSG_INFO, "EAP-SIM: (encr) Invalid "
;;;687    					   "AT_COUNTER (alen=%lu)",
;;;688    					   (unsigned long) alen);
;;;689    				return -1;
;;;690    			}
;;;691    			attr->counter = apos[0] * 256 + apos[1];
;;;692    			wpa_printf(MSG_DEBUG, "EAP-SIM: (encr) AT_COUNTER %d",
;;;693    				   attr->counter);
;;;694    			break;
;;;695    		case EAP_SIM_AT_COUNTER_TOO_SMALL:
;;;696    			if (!encr) {
;;;697    				wpa_printf(MSG_ERROR, "EAP-SIM: Unencrypted "
;;;698    					   "AT_COUNTER_TOO_SMALL");
;;;699    				return -1;
;;;700    			}
;;;701    			if (alen != 2) {
;;;702    				wpa_printf(MSG_INFO, "EAP-SIM: (encr) Invalid "
;;;703    					   "AT_COUNTER_TOO_SMALL (alen=%lu)",
;;;704    					   (unsigned long) alen);
;;;705    				return -1;
;;;706    			}
;;;707    			wpa_printf(MSG_DEBUG, "EAP-SIM: (encr) "
;;;708    				   "AT_COUNTER_TOO_SMALL");
;;;709    			attr->counter_too_small = 1;
;;;710    			break;
;;;711    		case EAP_SIM_AT_NONCE_S:
;;;712    			if (!encr) {
;;;713    				wpa_printf(MSG_ERROR, "EAP-SIM: Unencrypted "
;;;714    					   "AT_NONCE_S");
;;;715    				return -1;
;;;716    			}
;;;717    			wpa_printf(MSG_DEBUG, "EAP-SIM: (encr) "
;;;718    				   "AT_NONCE_S");
;;;719    			if (alen != 2 + EAP_SIM_NONCE_S_LEN) {
;;;720    				wpa_printf(MSG_INFO, "EAP-SIM: (encr) Invalid "
;;;721    					   "AT_NONCE_S (alen=%lu)",
;;;722    					   (unsigned long) alen);
;;;723    				return -1;
;;;724    			}
;;;725    			attr->nonce_s = apos + 2;
;;;726    			break;
;;;727    		case EAP_SIM_AT_CLIENT_ERROR_CODE:
;;;728    			if (alen != 2) {
;;;729    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid "
;;;730    					   "AT_CLIENT_ERROR_CODE length %lu",
;;;731    					   (unsigned long) alen);
;;;732    				return -1;
;;;733    			}
;;;734    			attr->client_error_code = apos[0] * 256 + apos[1];
;;;735    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_CLIENT_ERROR_CODE "
;;;736    				   "%d", attr->client_error_code);
;;;737    			break;
;;;738    		case EAP_SIM_AT_IV:
;;;739    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_IV");
;;;740    			if (alen != 2 + EAP_SIM_MAC_LEN) {
;;;741    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid AT_IV "
;;;742    					   "length %lu", (unsigned long) alen);
;;;743    				return -1;
;;;744    			}
;;;745    			attr->iv = apos + 2;
;;;746    			break;
;;;747    		case EAP_SIM_AT_ENCR_DATA:
;;;748    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_ENCR_DATA");
;;;749    			attr->encr_data = apos + 2;
;;;750    			attr->encr_data_len = alen - 2;
;;;751    			if (attr->encr_data_len % 16) {
;;;752    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid "
;;;753    					   "AT_ENCR_DATA length %lu",
;;;754    					   (unsigned long)
;;;755    					   attr->encr_data_len);
;;;756    				return -1;
;;;757    			}
;;;758    			break;
;;;759    		case EAP_SIM_AT_NEXT_PSEUDONYM:
;;;760    			if (!encr) {
;;;761    				wpa_printf(MSG_ERROR, "EAP-SIM: Unencrypted "
;;;762    					   "AT_NEXT_PSEUDONYM");
;;;763    				return -1;
;;;764    			}
;;;765    			wpa_printf(MSG_DEBUG, "EAP-SIM: (encr) "
;;;766    				   "AT_NEXT_PSEUDONYM");
;;;767    			plen = apos[0] * 256 + apos[1];
;;;768    			if (plen > alen - 2) {
;;;769    				wpa_printf(MSG_INFO, "EAP-SIM: (encr) Invalid"
;;;770    					   " AT_NEXT_PSEUDONYM (actual"
;;;771    					   " len %lu, attr len %lu)",
;;;772    					   (unsigned long) plen,
;;;773    					   (unsigned long) alen);
;;;774    				return -1;
;;;775    			}
;;;776    			attr->next_pseudonym = pos + 4;
;;;777    			attr->next_pseudonym_len = plen;
;;;778    			break;
;;;779    		case EAP_SIM_AT_NEXT_REAUTH_ID:
;;;780    			if (!encr) {
;;;781    				wpa_printf(MSG_ERROR, "EAP-SIM: Unencrypted "
;;;782    					   "AT_NEXT_REAUTH_ID");
;;;783    				return -1;
;;;784    			}
;;;785    			wpa_printf(MSG_DEBUG, "EAP-SIM: (encr) "
;;;786    				   "AT_NEXT_REAUTH_ID");
;;;787    			plen = apos[0] * 256 + apos[1];
;;;788    			if (plen > alen - 2) {
;;;789    				wpa_printf(MSG_INFO, "EAP-SIM: (encr) Invalid"
;;;790    					   " AT_NEXT_REAUTH_ID (actual"
;;;791    					   " len %lu, attr len %lu)",
;;;792    					   (unsigned long) plen,
;;;793    					   (unsigned long) alen);
;;;794    				return -1;
;;;795    			}
;;;796    			attr->next_reauth_id = pos + 4;
;;;797    			attr->next_reauth_id_len = plen;
;;;798    			break;
;;;799    		case EAP_SIM_AT_RES:
;;;800    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_RES");
;;;801    			attr->res_len_bits = WPA_GET_BE16(apos);
;;;802    			apos += 2;
;;;803    			alen -= 2;
;;;804    			if (!aka || alen < EAP_AKA_MIN_RES_LEN ||
;;;805    			    alen > EAP_AKA_MAX_RES_LEN) {
;;;806    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid AT_RES "
;;;807    					   "(len %lu)",
;;;808    					   (unsigned long) alen);
;;;809    				return -1;
;;;810    			}
;;;811    			attr->res = apos;
;;;812    			attr->res_len = alen;
;;;813    			break;
;;;814    		case EAP_SIM_AT_AUTS:
;;;815    			wpa_printf(MSG_DEBUG, "EAP-AKA: AT_AUTS");
;;;816    			if (!aka) {
;;;817    				wpa_printf(MSG_DEBUG, "EAP-SIM: "
;;;818    					   "Unexpected AT_AUTS");
;;;819    				return -1;
;;;820    			}
;;;821    			if (alen != EAP_AKA_AUTS_LEN) {
;;;822    				wpa_printf(MSG_INFO, "EAP-AKA: Invalid AT_AUTS"
;;;823    					   " (len %lu)",
;;;824    					   (unsigned long) alen);
;;;825    				return -1;
;;;826    			}
;;;827    			attr->auts = apos;
;;;828    			break;
;;;829    		case EAP_SIM_AT_CHECKCODE:
;;;830    			wpa_printf(MSG_DEBUG, "EAP-AKA: AT_CHECKCODE");
;;;831    			if (!aka) {
;;;832    				wpa_printf(MSG_DEBUG, "EAP-SIM: "
;;;833    					   "Unexpected AT_CHECKCODE");
;;;834    				return -1;
;;;835    			}
;;;836    			apos += 2;
;;;837    			alen -= 2;
;;;838    			if (alen != 0 && alen != EAP_AKA_CHECKCODE_LEN &&
;;;839    			    alen != EAP_AKA_PRIME_CHECKCODE_LEN) {
;;;840    				wpa_printf(MSG_INFO, "EAP-AKA: Invalid "
;;;841    					   "AT_CHECKCODE (len %lu)",
;;;842    					   (unsigned long) alen);
;;;843    				return -1;
;;;844    			}
;;;845    			attr->checkcode = apos;
;;;846    			attr->checkcode_len = alen;
;;;847    			break;
;;;848    		case EAP_SIM_AT_RESULT_IND:
;;;849    			if (encr) {
;;;850    				wpa_printf(MSG_ERROR, "EAP-SIM: Encrypted "
;;;851    					   "AT_RESULT_IND");
;;;852    				return -1;
;;;853    			}
;;;854    			if (alen != 2) {
;;;855    				wpa_printf(MSG_INFO, "EAP-SIM: Invalid "
;;;856    					   "AT_RESULT_IND (alen=%lu)",
;;;857    					   (unsigned long) alen);
;;;858    				return -1;
;;;859    			}
;;;860    			wpa_printf(MSG_DEBUG, "EAP-SIM: AT_RESULT_IND");
;;;861    			attr->result_ind = 1;
;;;862    			break;
;;;863    #if defined(EAP_AKA_PRIME) || defined(EAP_SERVER_AKA_PRIME)
;;;864    		case EAP_SIM_AT_KDF_INPUT:
;;;865    			if (aka != 2) {
;;;866    				wpa_printf(MSG_INFO, "EAP-AKA: Unexpected "
;;;867    					   "AT_KDF_INPUT");
;;;868    				return -1;
;;;869    			}
;;;870    
;;;871    			wpa_printf(MSG_DEBUG, "EAP-AKA: AT_KDF_INPUT");
;;;872    			plen = WPA_GET_BE16(apos);
;;;873    			apos += 2;
;;;874    			alen -= 2;
;;;875    			if (plen > alen) {
;;;876    				wpa_printf(MSG_INFO, "EAP-AKA': Invalid "
;;;877    					   "AT_KDF_INPUT (Actual Length %lu, "
;;;878    					   "remaining length %lu)",
;;;879    					   (unsigned long) plen,
;;;880    					   (unsigned long) alen);
;;;881    				return -1;
;;;882    			}
;;;883    			attr->kdf_input = apos;
;;;884    			attr->kdf_input_len = plen;
;;;885    			break;
;;;886    		case EAP_SIM_AT_KDF:
;;;887    			if (aka != 2) {
;;;888    				wpa_printf(MSG_INFO, "EAP-AKA: Unexpected "
;;;889    					   "AT_KDF");
;;;890    				return -1;
;;;891    			}
;;;892    
;;;893    			wpa_printf(MSG_DEBUG, "EAP-AKA: AT_KDF");
;;;894    			if (alen != 2) {
;;;895    				wpa_printf(MSG_INFO, "EAP-AKA': Invalid "
;;;896    					   "AT_KDF (len %lu)",
;;;897    					   (unsigned long) alen);
;;;898    				return -1;
;;;899    			}
;;;900    			if (attr->kdf_count == EAP_AKA_PRIME_KDF_MAX) {
;;;901    				wpa_printf(MSG_DEBUG, "EAP-AKA': Too many "
;;;902    					   "AT_KDF attributes - ignore this");
;;;903    				continue;
;;;904    			}
;;;905    			attr->kdf[attr->kdf_count] = WPA_GET_BE16(apos);
;;;906    			attr->kdf_count++;
;;;907    			break;
;;;908    		case EAP_SIM_AT_BIDDING:
;;;909    			wpa_printf(MSG_DEBUG, "EAP-AKA: AT_BIDDING");
;;;910    			if (alen != 2) {
;;;911    				wpa_printf(MSG_INFO, "EAP-AKA: Invalid "
;;;912    					   "AT_BIDDING (len %lu)",
;;;913    					   (unsigned long) alen);
;;;914    				return -1;
;;;915    			}
;;;916    			attr->bidding = apos;
;;;917    			break;
;;;918    #endif /* EAP_AKA_PRIME || EAP_SERVER_AKA_PRIME */
;;;919    		default:
;;;920    			if (pos[0] < 128) {
;;;921    				wpa_printf(MSG_INFO, "EAP-SIM: Unrecognized "
;;;922    					   "non-skippable attribute %d",
;;;923    					   pos[0]);
;;;924    				return -1;
;;;925    			}
;;;926    
;;;927    			wpa_printf(MSG_DEBUG, "EAP-SIM: Unrecognized skippable"
;;;928    				   " attribute %d ignored", pos[0]);
;;;929    			break;
;;;930    		}
;;;931    
;;;932    		pos += pos[1] * 4;
;;;933    	}
;;;934    
;;;935    	wpa_printf(MSG_DEBUG, "EAP-SIM: Attributes parsed successfully "
;;;936    		   "(aka=%d encr=%d)", aka, encr);
;;;937    
;;;938    	return 0;
;;;939    }
000040  b007              ADD      sp,sp,#0x1c
000042  e8bd8ff0          POP      {r4-r11,pc}
                  |L17.70|
000046  7878              LDRB     r0,[r7,#1]            ;522
000048  0083              LSLS     r3,r0,#2              ;522
00004a  783a              LDRB     r2,[r7,#0]            ;522
00004c  a1bf              ADR      r1,|L17.844|
00004e  2000              MOVS     r0,#0                 ;522
000050  f7fffffe          BL       wpa_printf
000054  7878              LDRB     r0,[r7,#1]            ;524
000056  eb070080          ADD      r0,r7,r0,LSL #2       ;524
00005a  4558              CMP      r0,r11                ;524
00005c  d90b              BLS      |L17.118|
00005e  f8cdb000          STR      r11,[sp,#0]           ;525
000062  7878              LDRB     r0,[r7,#1]            ;525
000064  0083              LSLS     r3,r0,#2              ;525
000066  463a              MOV      r2,r7                 ;525
000068  a1c1              ADR      r1,|L17.880|
00006a  2000              MOVS     r0,#0                 ;525
00006c  f7fffffe          BL       wpa_printf
000070  f04f30ff          MOV      r0,#0xffffffff        ;528
                  |L17.116|
000074  e7e4              B        |L17.64|
                  |L17.118|
000076  7878              LDRB     r0,[r7,#1]            ;530
000078  b930              CBNZ     r0,|L17.136|
00007a  a1ca              ADR      r1,|L17.932|
00007c  2000              MOVS     r0,#0                 ;531
00007e  f7fffffe          BL       wpa_printf
000082  f04f30ff          MOV      r0,#0xffffffff        ;532
                  |L17.134|
000086  e7db              B        |L17.64|
                  |L17.136|
000088  1cbd              ADDS     r5,r7,#2              ;534
00008a  7878              LDRB     r0,[r7,#1]            ;535
00008c  2102              MOVS     r1,#2                 ;535
00008e  ebc10680          RSB      r6,r1,r0,LSL #2       ;535
000092  4633              MOV      r3,r6                 ;536
000094  462a              MOV      r2,r5                 ;536
000096  a1cb              ADR      r1,|L17.964|
000098  2000              MOVS     r0,#0                 ;536
00009a  f7fffffe          BL       wpa_hexdump
00009e  7838              LDRB     r0,[r7,#0]            ;539
0000a0  2810              CMP      r0,#0x10              ;539
0000a2  d079              BEQ      |L17.408|
0000a4  dc0a              BGT      |L17.188|
0000a6  d278              BCS      |L17.410|
0000a8  e8dff000          TBB      [pc,r0]               ;539
0000ac  771c39fe          DCB      0x77,0x1c,0x39,0xfe
0000b0  fd775580          DCB      0xfd,0x77,0x55,0x80
0000b4  77779098          DCB      0x77,0x77,0x90,0x98
0000b8  a8bdc5de          DCB      0xa8,0xbd,0xc5,0xde
                  |L17.188|
0000bc  2881              CMP      r0,#0x81              ;539
0000be  d06d              BEQ      |L17.412|
0000c0  dc08              BGT      |L17.212|
0000c2  f1a00011          SUB      r0,r0,#0x11           ;539
0000c6  2806              CMP      r0,#6                 ;539
0000c8  d267              BCS      |L17.410|
0000ca  e8dff000          TBB      [pc,r0]               ;539
0000ce  f266              DCB      0xf2,0x66
0000d0  f1f0efee          DCB      0xf1,0xf0,0xef,0xee
                  |L17.212|
0000d4  3882              SUBS     r0,r0,#0x82           ;539
0000d6  2806              CMP      r0,#6                 ;539
0000d8  d25f              BCS      |L17.410|
0000da  e8dff000          TBB      [pc,r0]               ;539
0000de  ef5e              DCB      0xef,0x5e
0000e0  eeedeceb          DCB      0xee,0xed,0xec,0xeb
0000e4  a1bd              ADR      r1,|L17.988|
0000e6  2000              MOVS     r0,#0                 ;541
0000e8  f7fffffe          BL       wpa_printf
0000ec  1cad              ADDS     r5,r5,#2              ;542
0000ee  1eb6              SUBS     r6,r6,#2              ;543
0000f0  f1b80f00          CMP      r8,#0                 ;544
0000f4  d102              BNE      |L17.252|
0000f6  f0160f0f          TST      r6,#0xf               ;544
0000fa  d104              BNE      |L17.262|
                  |L17.252|
0000fc  f1b80f00          CMP      r8,#0                 ;545
000100  d009              BEQ      |L17.278|
000102  2e10              CMP      r6,#0x10              ;545
000104  d007              BEQ      |L17.278|
                  |L17.262|
000106  4632              MOV      r2,r6                 ;546
000108  a1b9              ADR      r1,|L17.1008|
00010a  2000              MOVS     r0,#0                 ;546
00010c  f7fffffe          BL       wpa_printf
000110  f04f30ff          MOV      r0,#0xffffffff        ;549
                  |L17.276|
000114  e794              B        |L17.64|
                  |L17.278|
000116  6025              STR      r5,[r4,#0]            ;551
000118  0930              LSRS     r0,r6,#4              ;552
00011a  6420              STR      r0,[r4,#0x40]         ;552
00011c  e31c              B        |L17.1880|
00011e  a1bd              ADR      r1,|L17.1044|
000120  2000              MOVS     r0,#0                 ;555
000122  f7fffffe          BL       wpa_printf
000126  f1b80f00          CMP      r8,#0                 ;556
00012a  d106              BNE      |L17.314|
00012c  a1be              ADR      r1,|L17.1064|
00012e  2000              MOVS     r0,#0                 ;557
000130  f7fffffe          BL       wpa_printf
000134  f04f30ff          MOV      r0,#0xffffffff        ;559
                  |L17.312|
000138  e782              B        |L17.64|
                  |L17.314|
00013a  1cad              ADDS     r5,r5,#2              ;561
00013c  1eb6              SUBS     r6,r6,#2              ;562
00013e  2e10              CMP      r6,#0x10              ;563
000140  d007              BEQ      |L17.338|
000142  4632              MOV      r2,r6                 ;564
000144  a1bf              ADR      r1,|L17.1092|
000146  2000              MOVS     r0,#0                 ;564
000148  f7fffffe          BL       wpa_printf
00014c  f04f30ff          MOV      r0,#0xffffffff        ;567
                  |L17.336|
000150  e776              B        |L17.64|
                  |L17.338|
000152  6065              STR      r5,[r4,#4]            ;569
000154  e300              B        |L17.1880|
000156  f1b90f00          CMP      r9,#0                 ;572
00015a  d106              BNE      |L17.362|
00015c  a1c2              ADR      r1,|L17.1128|
00015e  2000              MOVS     r0,#0                 ;573
000160  f7fffffe          BL       wpa_printf
000164  f04f30ff          MOV      r0,#0xffffffff        ;575
                  |L17.360|
000168  e76a              B        |L17.64|
                  |L17.362|
00016a  a1c7              ADR      r1,|L17.1160|
00016c  2000              MOVS     r0,#0                 ;577
00016e  f7fffffe          BL       wpa_printf
000172  2002              MOVS     r0,#2                 ;578
000174  9002              STR      r0,[sp,#8]            ;578
000176  e015              B        |L17.420|
                  |L17.376|
000178  9802              LDR      r0,[sp,#8]            ;579
00017a  5c28              LDRB     r0,[r5,r0]            ;579
00017c  b178              CBZ      r0,|L17.414|
00017e  a1c9              ADR      r1,|L17.1188|
000180  2000              MOVS     r0,#0                 ;580
000182  f7fffffe          BL       wpa_printf
000186  1eb3              SUBS     r3,r6,#2              ;583
000188  1caa              ADDS     r2,r5,#2              ;583
00018a  a1d4              ADR      r1,|L17.1244|
00018c  2000              MOVS     r0,#0                 ;583
00018e  f7fffffe          BL       wpa_hexdump
000192  f04f30ff          MOV      r0,#0xffffffff        ;586
                  |L17.406|
000196  e753              B        |L17.64|
                  |L17.408|
000198  e09b              B        |L17.722|
                  |L17.410|
00019a  e3f8              B        |L17.2446|
                  |L17.412|
00019c  e328              B        |L17.2032|
                  |L17.414|
00019e  9802              LDR      r0,[sp,#8]            ;578
0001a0  1c40              ADDS     r0,r0,#1              ;578
0001a2  9002              STR      r0,[sp,#8]            ;578
                  |L17.420|
0001a4  9802              LDR      r0,[sp,#8]            ;578
0001a6  42b0              CMP      r0,r6                 ;578
0001a8  d3e6              BCC      |L17.376|
0001aa  e2d5              B        |L17.1880|
0001ac  a1d3              ADR      r1,|L17.1276|
0001ae  2000              MOVS     r0,#0                 ;591
0001b0  f7fffffe          BL       wpa_printf
0001b4  2e12              CMP      r6,#0x12              ;592
0001b6  d006              BEQ      |L17.454|
0001b8  a1d6              ADR      r1,|L17.1300|
0001ba  2000              MOVS     r0,#0                 ;593
0001bc  f7fffffe          BL       wpa_printf
0001c0  f04f30ff          MOV      r0,#0xffffffff        ;595
                  |L17.452|
0001c4  e73c              B        |L17.64|
                  |L17.454|
0001c6  1ca8              ADDS     r0,r5,#2              ;597
0001c8  6260              STR      r0,[r4,#0x24]         ;597
0001ca  e2c5              B        |L17.1880|
0001cc  a1da              ADR      r1,|L17.1336|
0001ce  2000              MOVS     r0,#0                 ;600
0001d0  f7fffffe          BL       wpa_printf
0001d4  2003              MOVS     r0,#3                 ;601
0001d6  f8840068          STRB     r0,[r4,#0x68]         ;601
0001da  e2bd              B        |L17.1880|
0001dc  a1de              ADR      r1,|L17.1368|
0001de  2000              MOVS     r0,#0                 ;604
0001e0  f7fffffe          BL       wpa_printf
0001e4  2e12              CMP      r6,#0x12              ;605
0001e6  d006              BEQ      |L17.502|
0001e8  a1df              ADR      r1,|L17.1384|
0001ea  2000              MOVS     r0,#0                 ;606
0001ec  f7fffffe          BL       wpa_printf
0001f0  f04f30ff          MOV      r0,#0xffffffff        ;608
0001f4  e724              B        |L17.64|
                  |L17.502|
0001f6  1ca8              ADDS     r0,r5,#2              ;610
0001f8  60a0              STR      r0,[r4,#8]            ;610
0001fa  e2ad              B        |L17.1880|
0001fc  2e02              CMP      r6,#2                 ;613
0001fe  d007              BEQ      |L17.528|
000200  4632              MOV      r2,r6                 ;614
000202  a1e1              ADR      r1,|L17.1416|
000204  2000              MOVS     r0,#0                 ;614
000206  f7fffffe          BL       wpa_printf
00020a  f04f30ff          MOV      r0,#0xffffffff        ;617
00020e  e717              B        |L17.64|
                  |L17.528|
000210  7869              LDRB     r1,[r5,#1]            ;619
000212  7828              LDRB     r0,[r5,#0]            ;619
000214  eb012000          ADD      r0,r1,r0,LSL #8       ;619
000218  66e0              STR      r0,[r4,#0x6c]         ;619
00021a  a1e6              ADR      r1,|L17.1460|
00021c  2000              MOVS     r0,#0                 ;620
00021e  6ee2              LDR      r2,[r4,#0x6c]         ;620
000220  f7fffffe          BL       wpa_printf
000224  e298              B        |L17.1880|
000226  a1ea              ADR      r1,|L17.1488|
000228  2000              MOVS     r0,#0                 ;624
00022a  f7fffffe          BL       wpa_printf
00022e  2001              MOVS     r0,#1                 ;625
000230  f8840068          STRB     r0,[r4,#0x68]         ;625
000234  e290              B        |L17.1880|
000236  a1ec              ADR      r1,|L17.1512|
000238  2000              MOVS     r0,#0                 ;628
00023a  f7fffffe          BL       wpa_printf
00023e  7868              LDRB     r0,[r5,#1]            ;629
000240  7829              LDRB     r1,[r5,#0]            ;629
000242  ea402a01          ORR      r10,r0,r1,LSL #8      ;629
000246  1cad              ADDS     r5,r5,#2              ;630
000248  1eb6              SUBS     r6,r6,#2              ;631
00024a  45b2              CMP      r10,r6                ;632
00024c  d908              BLS      |L17.608|
00024e  4633              MOV      r3,r6                 ;633
000250  4652              MOV      r2,r10                ;633
000252  49eb              LDR      r1,|L17.1536|
000254  2000              MOVS     r0,#0                 ;633
000256  f7fffffe          BL       wpa_printf
00025a  f04f30ff          MOV      r0,#0xffffffff        ;638
00025e  e6ef              B        |L17.64|
                  |L17.608|
000260  62a5              STR      r5,[r4,#0x28]         ;641
000262  f8c4a054          STR      r10,[r4,#0x54]        ;642
000266  e277              B        |L17.1880|
000268  f1b80f00          CMP      r8,#0                 ;645
00026c  d006              BEQ      |L17.636|
00026e  a1e5              ADR      r1,|L17.1540|
000270  2000              MOVS     r0,#0                 ;646
000272  f7fffffe          BL       wpa_printf
000276  f04f30ff          MOV      r0,#0xffffffff        ;648
00027a  e6e1              B        |L17.64|
                  |L17.636|
00027c  7869              LDRB     r1,[r5,#1]            ;650
00027e  7828              LDRB     r0,[r5,#0]            ;650
000280  eb012000          ADD      r0,r1,r0,LSL #8       ;650
000284  9001              STR      r0,[sp,#4]            ;650
000286  a1e8              ADR      r1,|L17.1576|
000288  2000              MOVS     r0,#0                 ;651
00028a  f7fffffe          BL       wpa_printf
00028e  9801              LDR      r0,[sp,#4]            ;652
000290  2802              CMP      r0,#2                 ;652
000292  d303              BCC      |L17.668|
000294  1eb0              SUBS     r0,r6,#2              ;652
000296  9901              LDR      r1,[sp,#4]            ;652
000298  4288              CMP      r0,r1                 ;652
00029a  d215              BCS      |L17.712|
                  |L17.668|
00029c  4633              MOV      r3,r6                 ;653
00029e  a1e9              ADR      r1,|L17.1604|
0002a0  2000              MOVS     r0,#0                 ;653
0002a2  9a01              LDR      r2,[sp,#4]            ;653
0002a4  e00b              B        |L17.702|
0002a6  e32e              B        |L17.2310|
0002a8  e310              B        |L17.2252|
0002aa  e28c              B        |L17.1990|
0002ac  e270              B        |L17.1936|
0002ae  e254              B        |L17.1882|
0002b0  e030              B        |L17.788|
0002b2  e027              B        |L17.772|
0002b4  e361              B        |L17.2426|
0002b6  e340              B        |L17.2362|
0002b8  e2e4              B        |L17.2180|
0002ba  e2c0              B        |L17.2110|
0002bc  e2aa              B        |L17.2068|
                  |L17.702|
0002be  f7fffffe          BL       wpa_printf
0002c2  f04f30ff          MOV      r0,#0xffffffff        ;658
0002c6  e6bb              B        |L17.64|
                  |L17.712|
0002c8  1ca8              ADDS     r0,r5,#2              ;660
0002ca  6160              STR      r0,[r4,#0x14]         ;660
0002cc  9801              LDR      r0,[sp,#4]            ;661
0002ce  6460              STR      r0,[r4,#0x44]         ;661
0002d0  e242              B        |L17.1880|
                  |L17.722|
0002d2  a1ec              ADR      r1,|L17.1668|
0002d4  2000              MOVS     r0,#0                 ;664
0002d6  f7fffffe          BL       wpa_printf
0002da  2e02              CMP      r6,#2                 ;665
0002dc  d007              BEQ      |L17.750|
0002de  4632              MOV      r2,r6                 ;666
0002e0  a1f0              ADR      r1,|L17.1700|
0002e2  2000              MOVS     r0,#0                 ;666
0002e4  f7fffffe          BL       wpa_printf
0002e8  f04f30ff          MOV      r0,#0xffffffff        ;669
0002ec  e6a8              B        |L17.64|
                  |L17.750|
0002ee  7869              LDRB     r1,[r5,#1]            ;671
0002f0  7828              LDRB     r0,[r5,#0]            ;671
0002f2  eb012000          ADD      r0,r1,r0,LSL #8       ;671
0002f6  6760              STR      r0,[r4,#0x74]         ;671
0002f8  a1f6              ADR      r1,|L17.1748|
0002fa  2000              MOVS     r0,#0                 ;672
0002fc  6f62              LDR      r2,[r4,#0x74]         ;672
0002fe  f7fffffe          BL       wpa_printf
000302  e229              B        |L17.1880|
                  |L17.772|
000304  a1fb              ADR      r1,|L17.1780|
000306  2000              MOVS     r0,#0                 ;676
000308  f7fffffe          BL       wpa_printf
00030c  2002              MOVS     r0,#2                 ;677
00030e  f8840068          STRB     r0,[r4,#0x68]         ;677
000312  e221              B        |L17.1880|
                  |L17.788|
000314  f1b90f00          CMP      r9,#0                 ;680
000318  d106              BNE      |L17.808|
00031a  a1fd              ADR      r1,|L17.1808|
00031c  2000              MOVS     r0,#0                 ;681
00031e  f7fffffe          BL       wpa_printf
000322  f04f30ff          MOV      r0,#0xffffffff        ;683
000326  e68b              B        |L17.64|
                  |L17.808|
000328  e202              B        |L17.1840|
00032a  0000              DCW      0x0000
                  |L17.812|
00032c  4541502d          DCB      "EAP-SIM: Attribute overflow(1)",0
000330  53494d3a
000334  20417474
000338  72696275
00033c  7465206f
000340  76657266
000344  6c6f7728
000348  312900  
00034b  00                DCB      0
                  |L17.844|
00034c  4541502d          DCB      "EAP-SIM: Attribute: Type=%d Len=%d",0
000350  53494d3a
000354  20417474
000358  72696275
00035c  74653a20
000360  54797065
000364  3d256420
000368  4c656e3d
00036c  256400  
00036f  00                DCB      0
                  |L17.880|
000370  4541502d          DCB      "EAP-SIM: Attribute overflow (pos=%p len=%d end=%p)",0
000374  53494d3a
000378  20417474
00037c  72696275
000380  7465206f
000384  76657266
000388  6c6f7720
00038c  28706f73
000390  3d257020
000394  6c656e3d
000398  25642065
00039c  6e643d25
0003a0  702900  
0003a3  00                DCB      0
                  |L17.932|
0003a4  4541502d          DCB      "EAP-SIM: Attribute underflow",0
0003a8  53494d3a
0003ac  20417474
0003b0  72696275
0003b4  74652075
0003b8  6e646572
0003bc  666c6f77
0003c0  00      
0003c1  00                DCB      0
0003c2  00                DCB      0
0003c3  00                DCB      0
                  |L17.964|
0003c4  4541502d          DCB      "EAP-SIM: Attribute data",0
0003c8  53494d3a
0003cc  20417474
0003d0  72696275
0003d4  74652064
0003d8  61746100
                  |L17.988|
0003dc  4541502d          DCB      "EAP-SIM: AT_RAND",0
0003e0  53494d3a
0003e4  2041545f
0003e8  52414e44
0003ec  00      
0003ed  00                DCB      0
0003ee  00                DCB      0
0003ef  00                DCB      0
                  |L17.1008|
0003f0  4541502d          DCB      "EAP-SIM: Invalid AT_RAND (len %lu)",0
0003f4  53494d3a
0003f8  20496e76
0003fc  616c6964
000400  2041545f
000404  52414e44
000408  20286c65
00040c  6e20256c
000410  752900  
000413  00                DCB      0
                  |L17.1044|
000414  4541502d          DCB      "EAP-AKA: AT_AUTN",0
000418  414b413a
00041c  2041545f
000420  4155544e
000424  00      
000425  00                DCB      0
000426  00                DCB      0
000427  00                DCB      0
                  |L17.1064|
000428  4541502d          DCB      "EAP-SIM: Unexpected AT_AUTN",0
00042c  53494d3a
000430  20556e65
000434  78706563
000438  74656420
00043c  41545f41
000440  55544e00
                  |L17.1092|
000444  4541502d          DCB      "EAP-AKA: Invalid AT_AUTN (len %lu)",0
000448  414b413a
00044c  20496e76
000450  616c6964
000454  2041545f
000458  4155544e
00045c  20286c65
000460  6e20256c
000464  752900  
000467  00                DCB      0
                  |L17.1128|
000468  4541502d          DCB      "EAP-SIM: Unencrypted AT_PADDING",0
00046c  53494d3a
000470  20556e65
000474  6e637279
000478  70746564
00047c  2041545f
000480  50414444
000484  494e4700
                  |L17.1160|
000488  4541502d          DCB      "EAP-SIM: (encr) AT_PADDING",0
00048c  53494d3a
000490  2028656e
000494  63722920
000498  41545f50
00049c  41444449
0004a0  4e4700  
0004a3  00                DCB      0
                  |L17.1188|
0004a4  4541502d          DCB      "EAP-SIM: (encr) AT_PADDING used a non-zero padding byte"
0004a8  53494d3a
0004ac  2028656e
0004b0  63722920
0004b4  41545f50
0004b8  41444449
0004bc  4e472075
0004c0  73656420
0004c4  61206e6f
0004c8  6e2d7a65
0004cc  726f2070
0004d0  61646469
0004d4  6e672062
0004d8  797465  
0004db  00                DCB      0
                  |L17.1244|
0004dc  4541502d          DCB      "EAP-SIM: (encr) padding bytes",0
0004e0  53494d3a
0004e4  2028656e
0004e8  63722920
0004ec  70616464
0004f0  696e6720
0004f4  62797465
0004f8  7300    
0004fa  00                DCB      0
0004fb  00                DCB      0
                  |L17.1276|
0004fc  4541502d          DCB      "EAP-SIM: AT_NONCE_MT",0
000500  53494d3a
000504  2041545f
000508  4e4f4e43
00050c  455f4d54
000510  00      
000511  00                DCB      0
000512  00                DCB      0
000513  00                DCB      0
                  |L17.1300|
000514  4541502d          DCB      "EAP-SIM: Invalid AT_NONCE_MT length",0
000518  53494d3a
00051c  20496e76
000520  616c6964
000524  2041545f
000528  4e4f4e43
00052c  455f4d54
000530  206c656e
000534  67746800
                  |L17.1336|
000538  4541502d          DCB      "EAP-SIM: AT_PERMANENT_ID_REQ",0
00053c  53494d3a
000540  2041545f
000544  5045524d
000548  414e454e
00054c  545f4944
000550  5f524551
000554  00      
000555  00                DCB      0
000556  00                DCB      0
000557  00                DCB      0
                  |L17.1368|
000558  4541502d          DCB      "EAP-SIM: AT_MAC",0
00055c  53494d3a
000560  2041545f
000564  4d414300
                  |L17.1384|
000568  4541502d          DCB      "EAP-SIM: Invalid AT_MAC length",0
00056c  53494d3a
000570  20496e76
000574  616c6964
000578  2041545f
00057c  4d414320
000580  6c656e67
000584  746800  
000587  00                DCB      0
                  |L17.1416|
000588  4541502d          DCB      "EAP-SIM: Invalid AT_NOTIFICATION length %lu",0
00058c  53494d3a
000590  20496e76
000594  616c6964
000598  2041545f
00059c  4e4f5449
0005a0  46494341
0005a4  54494f4e
0005a8  206c656e
0005ac  67746820
0005b0  256c7500
                  |L17.1460|
0005b4  4541502d          DCB      "EAP-SIM: AT_NOTIFICATION %d",0
0005b8  53494d3a
0005bc  2041545f
0005c0  4e4f5449
0005c4  46494341
0005c8  54494f4e
0005cc  20256400
                  |L17.1488|
0005d0  4541502d          DCB      "EAP-SIM: AT_ANY_ID_REQ",0
0005d4  53494d3a
0005d8  2041545f
0005dc  414e595f
0005e0  49445f52
0005e4  455100  
0005e7  00                DCB      0
                  |L17.1512|
0005e8  4541502d          DCB      "EAP-SIM: AT_IDENTITY",0
0005ec  53494d3a
0005f0  2041545f
0005f4  4944454e
0005f8  54495459
0005fc  00      
0005fd  00                DCB      0
0005fe  00                DCB      0
0005ff  00                DCB      0
                  |L17.1536|
                          DCD      ||.constdata||+0x44
                  |L17.1540|
000604  4541502d          DCB      "EAP-AKA: Unexpected AT_VERSION_LIST",0
000608  414b413a
00060c  20556e65
000610  78706563
000614  74656420
000618  41545f56
00061c  45525349
000620  4f4e5f4c
000624  49535400
                  |L17.1576|
000628  4541502d          DCB      "EAP-SIM: AT_VERSION_LIST",0
00062c  53494d3a
000630  2041545f
000634  56455253
000638  494f4e5f
00063c  4c495354
000640  00      
000641  00                DCB      0
000642  00                DCB      0
000643  00                DCB      0
                  |L17.1604|
000644  4541502d          DCB      "EAP-SIM: Invalid AT_VERSION_LIST (list_len=%lu attr_len"
000648  53494d3a
00064c  20496e76
000650  616c6964
000654  2041545f
000658  56455253
00065c  494f4e5f
000660  4c495354
000664  20286c69
000668  73745f6c
00066c  656e3d25
000670  6c752061
000674  7474725f
000678  6c656e  
00067b  3d256c75          DCB      "=%lu)",0
00067f  2900    
000681  00                DCB      0
000682  00                DCB      0
000683  00                DCB      0
                  |L17.1668|
000684  4541502d          DCB      "EAP-SIM: AT_SELECTED_VERSION",0
000688  53494d3a
00068c  2041545f
000690  53454c45
000694  43544544
000698  5f564552
00069c  53494f4e
0006a0  00      
0006a1  00                DCB      0
0006a2  00                DCB      0
0006a3  00                DCB      0
                  |L17.1700|
0006a4  4541502d          DCB      "EAP-SIM: Invalid AT_SELECTED_VERSION length %lu",0
0006a8  53494d3a
0006ac  20496e76
0006b0  616c6964
0006b4  2041545f
0006b8  53454c45
0006bc  43544544
0006c0  5f564552
0006c4  53494f4e
0006c8  206c656e
0006cc  67746820
0006d0  256c7500
                  |L17.1748|
0006d4  4541502d          DCB      "EAP-SIM: AT_SELECTED_VERSION %d",0
0006d8  53494d3a
0006dc  2041545f
0006e0  53454c45
0006e4  43544544
0006e8  5f564552
0006ec  53494f4e
0006f0  20256400
                  |L17.1780|
0006f4  4541502d          DCB      "EAP-SIM: AT_FULLAUTH_ID_REQ",0
0006f8  53494d3a
0006fc  2041545f
000700  46554c4c
000704  41555448
000708  5f49445f
00070c  52455100
                  |L17.1808|
000710  4541502d          DCB      "EAP-SIM: Unencrypted AT_COUNTER",0
000714  53494d3a
000718  20556e65
00071c  6e637279
000720  70746564
000724  2041545f
000728  434f554e
00072c  54455200
                  |L17.1840|
000730  2e02              CMP      r6,#2                 ;685
000732  d007              BEQ      |L17.1860|
000734  4632              MOV      r2,r6                 ;686
000736  a19f              ADR      r1,|L17.2484|
000738  2000              MOVS     r0,#0                 ;686
00073a  f7fffffe          BL       wpa_printf
00073e  f04f30ff          MOV      r0,#0xffffffff        ;689
                  |L17.1858|
000742  e47d              B        |L17.64|
                  |L17.1860|
000744  7869              LDRB     r1,[r5,#1]            ;691
000746  7828              LDRB     r0,[r5,#0]            ;691
000748  eb012000          ADD      r0,r1,r0,LSL #8       ;691
00074c  6720              STR      r0,[r4,#0x70]         ;691
00074e  a1a5              ADR      r1,|L17.2532|
000750  2000              MOVS     r0,#0                 ;692
000752  6f22              LDR      r2,[r4,#0x70]         ;692
000754  f7fffffe          BL       wpa_printf
                  |L17.1880|
000758  e341              B        |L17.3550|
                  |L17.1882|
00075a  f1b90f00          CMP      r9,#0                 ;696
00075e  d106              BNE      |L17.1902|
000760  a1a8              ADR      r1,|L17.2564|
000762  2000              MOVS     r0,#0                 ;697
000764  f7fffffe          BL       wpa_printf
000768  f04f30ff          MOV      r0,#0xffffffff        ;699
00076c  e468              B        |L17.64|
                  |L17.1902|
00076e  2e02              CMP      r6,#2                 ;701
000770  d007              BEQ      |L17.1922|
000772  4632              MOV      r2,r6                 ;702
000774  a1ae              ADR      r1,|L17.2608|
000776  2000              MOVS     r0,#0                 ;702
000778  f7fffffe          BL       wpa_printf
00077c  f04f30ff          MOV      r0,#0xffffffff        ;705
000780  e45e              B        |L17.64|
                  |L17.1922|
000782  a1b9              ADR      r1,|L17.2664|
000784  2000              MOVS     r0,#0                 ;707
000786  f7fffffe          BL       wpa_printf
00078a  2001              MOVS     r0,#1                 ;709
00078c  67e0              STR      r0,[r4,#0x7c]         ;709
00078e  e326              B        |L17.3550|
                  |L17.1936|
000790  f1b90f00          CMP      r9,#0                 ;712
000794  d106              BNE      |L17.1956|
000796  a1be              ADR      r1,|L17.2704|
000798  2000              MOVS     r0,#0                 ;713
00079a  f7fffffe          BL       wpa_printf
00079e  f04f30ff          MOV      r0,#0xffffffff        ;715
0007a2  e44d              B        |L17.64|
                  |L17.1956|
0007a4  a1c2              ADR      r1,|L17.2736|
0007a6  2000              MOVS     r0,#0                 ;717
0007a8  f7fffffe          BL       wpa_printf
0007ac  2e12              CMP      r6,#0x12              ;719
0007ae  d007              BEQ      |L17.1984|
0007b0  4632              MOV      r2,r6                 ;720
0007b2  a1c6              ADR      r1,|L17.2764|
0007b4  2000              MOVS     r0,#0                 ;720
0007b6  f7fffffe          BL       wpa_printf
0007ba  f04f30ff          MOV      r0,#0xffffffff        ;723
0007be  e43f              B        |L17.64|
                  |L17.1984|
0007c0  1ca8              ADDS     r0,r5,#2              ;725
0007c2  61a0              STR      r0,[r4,#0x18]         ;725
0007c4  e30b              B        |L17.3550|
                  |L17.1990|
0007c6  2e02              CMP      r6,#2                 ;728
0007c8  d007              BEQ      |L17.2010|
0007ca  4632              MOV      r2,r6                 ;729
0007cc  a1cb              ADR      r1,|L17.2812|
0007ce  2000              MOVS     r0,#0                 ;729
0007d0  f7fffffe          BL       wpa_printf
0007d4  f04f30ff          MOV      r0,#0xffffffff        ;732
0007d8  e432              B        |L17.64|
                  |L17.2010|
0007da  7869              LDRB     r1,[r5,#1]            ;734
0007dc  7828              LDRB     r0,[r5,#0]            ;734
0007de  eb012000          ADD      r0,r1,r0,LSL #8       ;734
0007e2  67a0              STR      r0,[r4,#0x78]         ;734
0007e4  a1d2              ADR      r1,|L17.2864|
0007e6  2000              MOVS     r0,#0                 ;735
0007e8  6fa2              LDR      r2,[r4,#0x78]         ;735
0007ea  f7fffffe          BL       wpa_printf
0007ee  e2f6              B        |L17.3550|
                  |L17.2032|
0007f0  a1d8              ADR      r1,|L17.2900|
0007f2  2000              MOVS     r0,#0                 ;739
0007f4  f7fffffe          BL       wpa_printf
0007f8  2e12              CMP      r6,#0x12              ;740
0007fa  d007              BEQ      |L17.2060|
0007fc  4632              MOV      r2,r6                 ;741
0007fe  a1d9              ADR      r1,|L17.2916|
000800  2000              MOVS     r0,#0                 ;741
000802  f7fffffe          BL       wpa_printf
000806  f04f30ff          MOV      r0,#0xffffffff        ;743
00080a  e419              B        |L17.64|
                  |L17.2060|
00080c  1ca8              ADDS     r0,r5,#2              ;745
00080e  60e0              STR      r0,[r4,#0xc]          ;745
000810  e2e5              B        |L17.3550|
                  |L17.2066|
000812  e2e8              B        |L17.3558|
                  |L17.2068|
000814  a1dc              ADR      r1,|L17.2952|
000816  2000              MOVS     r0,#0                 ;748
000818  f7fffffe          BL       wpa_printf
00081c  1ca8              ADDS     r0,r5,#2              ;749
00081e  6120              STR      r0,[r4,#0x10]         ;749
000820  1eb0              SUBS     r0,r6,#2              ;750
000822  64a0              STR      r0,[r4,#0x48]         ;750
000824  6ca0              LDR      r0,[r4,#0x48]         ;751
000826  f0100f0f          TST      r0,#0xf               ;751
00082a  d007              BEQ      |L17.2108|
00082c  a1dc              ADR      r1,|L17.2976|
00082e  2000              MOVS     r0,#0                 ;752
000830  6ca2              LDR      r2,[r4,#0x48]         ;752
000832  f7fffffe          BL       wpa_printf
000836  f04f30ff          MOV      r0,#0xffffffff        ;756
00083a  e401              B        |L17.64|
                  |L17.2108|
00083c  e2cf              B        |L17.3550|
                  |L17.2110|
00083e  f1b90f00          CMP      r9,#0                 ;760
000842  d106              BNE      |L17.2130|
000844  a1e1              ADR      r1,|L17.3020|
000846  2000              MOVS     r0,#0                 ;761
000848  f7fffffe          BL       wpa_printf
00084c  f04f30ff          MOV      r0,#0xffffffff        ;763
000850  e410              B        |L17.116|
                  |L17.2130|
000852  a1e8              ADR      r1,|L17.3060|
000854  2000              MOVS     r0,#0                 ;765
000856  f7fffffe          BL       wpa_printf
00085a  7869              LDRB     r1,[r5,#1]            ;767
00085c  7828              LDRB     r0,[r5,#0]            ;767
00085e  eb012a00          ADD      r10,r1,r0,LSL #8      ;767
000862  1eb0              SUBS     r0,r6,#2              ;768
000864  4550              CMP      r0,r10                ;768
000866  d208              BCS      |L17.2170|
000868  4633              MOV      r3,r6                 ;769
00086a  4652              MOV      r2,r10                ;769
00086c  49ea              LDR      r1,|L17.3096|
00086e  2000              MOVS     r0,#0                 ;769
000870  f7fffffe          BL       wpa_printf
000874  f04f30ff          MOV      r0,#0xffffffff        ;774
000878  e405              B        |L17.134|
                  |L17.2170|
00087a  1d38              ADDS     r0,r7,#4              ;776
00087c  61e0              STR      r0,[r4,#0x1c]         ;776
00087e  f8c4a04c          STR      r10,[r4,#0x4c]        ;777
000882  e2ac              B        |L17.3550|
                  |L17.2180|
000884  f1b90f00          CMP      r9,#0                 ;780
000888  d106              BNE      |L17.2200|
00088a  a1e4              ADR      r1,|L17.3100|
00088c  2000              MOVS     r0,#0                 ;781
00088e  f7fffffe          BL       wpa_printf
000892  f04f30ff          MOV      r0,#0xffffffff        ;783
000896  e43d              B        |L17.276|
                  |L17.2200|
000898  a1ea              ADR      r1,|L17.3140|
00089a  2000              MOVS     r0,#0                 ;785
00089c  f7fffffe          BL       wpa_printf
0008a0  7869              LDRB     r1,[r5,#1]            ;787
0008a2  7828              LDRB     r0,[r5,#0]            ;787
0008a4  eb012a00          ADD      r10,r1,r0,LSL #8      ;787
0008a8  1eb0              SUBS     r0,r6,#2              ;788
0008aa  4550              CMP      r0,r10                ;788
0008ac  d209              BCS      |L17.2242|
0008ae  4633              MOV      r3,r6                 ;789
0008b0  4652              MOV      r2,r10                ;789
0008b2  49d9              LDR      r1,|L17.3096|
0008b4  314c              ADDS     r1,r1,#0x4c           ;789
0008b6  2000              MOVS     r0,#0                 ;789
0008b8  f7fffffe          BL       wpa_printf
0008bc  f04f30ff          MOV      r0,#0xffffffff        ;794
0008c0  e428              B        |L17.276|
                  |L17.2242|
0008c2  1d38              ADDS     r0,r7,#4              ;796
0008c4  6220              STR      r0,[r4,#0x20]         ;796
0008c6  f8c4a050          STR      r10,[r4,#0x50]        ;797
0008ca  e288              B        |L17.3550|
                  |L17.2252|
0008cc  a1e6              ADR      r1,|L17.3176|
0008ce  2000              MOVS     r0,#0                 ;800
0008d0  f7fffffe          BL       wpa_printf
0008d4  7868              LDRB     r0,[r5,#1]            ;801
0008d6  7829              LDRB     r1,[r5,#0]            ;801
0008d8  ea402001          ORR      r0,r0,r1,LSL #8       ;801
0008dc  65e0              STR      r0,[r4,#0x5c]         ;801
0008de  1cad              ADDS     r5,r5,#2              ;802
0008e0  1eb6              SUBS     r6,r6,#2              ;803
0008e2  f1b80f00          CMP      r8,#0                 ;804
0008e6  d003              BEQ      |L17.2288|
0008e8  2e04              CMP      r6,#4                 ;804
0008ea  d301              BCC      |L17.2288|
0008ec  2e10              CMP      r6,#0x10              ;805
0008ee  d907              BLS      |L17.2304|
                  |L17.2288|
0008f0  4632              MOV      r2,r6                 ;806
0008f2  a1e1              ADR      r1,|L17.3192|
0008f4  2000              MOVS     r0,#0                 ;806
0008f6  f7fffffe          BL       wpa_printf
0008fa  f04f30ff          MOV      r0,#0xffffffff        ;809
0008fe  e409              B        |L17.276|
                  |L17.2304|
000900  62e5              STR      r5,[r4,#0x2c]         ;811
000902  65a6              STR      r6,[r4,#0x58]         ;812
000904  e26b              B        |L17.3550|
                  |L17.2310|
000906  a1e5              ADR      r1,|L17.3228|
000908  2000              MOVS     r0,#0                 ;815
00090a  f7fffffe          BL       wpa_printf
00090e  f1b80f00          CMP      r8,#0                 ;816
000912  d106              BNE      |L17.2338|
000914  a1e6              ADR      r1,|L17.3248|
000916  2000              MOVS     r0,#0                 ;817
000918  f7fffffe          BL       wpa_printf
00091c  f04f30ff          MOV      r0,#0xffffffff        ;819
000920  e40a              B        |L17.312|
                  |L17.2338|
000922  2e0e              CMP      r6,#0xe               ;821
000924  d007              BEQ      |L17.2358|
000926  4632              MOV      r2,r6                 ;822
000928  a1e8              ADR      r1,|L17.3276|
00092a  2000              MOVS     r0,#0                 ;822
00092c  f7fffffe          BL       wpa_printf
000930  f04f30ff          MOV      r0,#0xffffffff        ;825
000934  e40c              B        |L17.336|
                  |L17.2358|
000936  6325              STR      r5,[r4,#0x30]         ;827
000938  e251              B        |L17.3550|
                  |L17.2362|
00093a  a1ed              ADR      r1,|L17.3312|
00093c  2000              MOVS     r0,#0                 ;830
00093e  f7fffffe          BL       wpa_printf
000942  f1b80f00          CMP      r8,#0                 ;831
000946  d106              BNE      |L17.2390|
000948  a1ef              ADR      r1,|L17.3336|
00094a  2000              MOVS     r0,#0                 ;832
00094c  f7fffffe          BL       wpa_printf
000950  f04f30ff          MOV      r0,#0xffffffff        ;834
000954  e408              B        |L17.360|
                  |L17.2390|
000956  1cad              ADDS     r5,r5,#2              ;836
000958  1eb6              SUBS     r6,r6,#2              ;837
00095a  b15e              CBZ      r6,|L17.2420|
00095c  2e14              CMP      r6,#0x14              ;838
00095e  d009              BEQ      |L17.2420|
000960  2e20              CMP      r6,#0x20              ;839
000962  d007              BEQ      |L17.2420|
000964  4632              MOV      r2,r6                 ;840
000966  a1f1              ADR      r1,|L17.3372|
000968  2000              MOVS     r0,#0                 ;840
00096a  f7fffffe          BL       wpa_printf
00096e  f04f30ff          MOV      r0,#0xffffffff        ;843
000972  e410              B        |L17.406|
                  |L17.2420|
000974  6365              STR      r5,[r4,#0x34]         ;845
000976  6626              STR      r6,[r4,#0x60]         ;846
000978  e231              B        |L17.3550|
                  |L17.2426|
00097a  f1b90f00          CMP      r9,#0                 ;849
00097e  d007              BEQ      |L17.2448|
000980  a1f4              ADR      r1,|L17.3412|
000982  2000              MOVS     r0,#0                 ;850
000984  f7fffffe          BL       wpa_printf
000988  f04f30ff          MOV      r0,#0xffffffff        ;852
00098c  e41a              B        |L17.452|
                  |L17.2446|
00098e  e215              B        |L17.3516|
                  |L17.2448|
000990  2e02              CMP      r6,#2                 ;854
000992  d007              BEQ      |L17.2468|
000994  4632              MOV      r2,r6                 ;855
000996  a1f8              ADR      r1,|L17.3448|
000998  2000              MOVS     r0,#0                 ;855
00099a  f7fffffe          BL       wpa_printf
00099e  f04f30ff          MOV      r0,#0xffffffff        ;858
0009a2  e40f              B        |L17.452|
                  |L17.2468|
0009a4  a1ff              ADR      r1,|L17.3492|
0009a6  2000              MOVS     r0,#0                 ;860
0009a8  f7fffffe          BL       wpa_printf
0009ac  2001              MOVS     r0,#1                 ;861
0009ae  f8c40080          STR      r0,[r4,#0x80]         ;861
0009b2  e214              B        |L17.3550|
                  |L17.2484|
0009b4  4541502d          DCB      "EAP-SIM: (encr) Invalid AT_COUNTER (alen=%lu)",0
0009b8  53494d3a
0009bc  2028656e
0009c0  63722920
0009c4  496e7661
0009c8  6c696420
0009cc  41545f43
0009d0  4f554e54
0009d4  45522028
0009d8  616c656e
0009dc  3d256c75
0009e0  2900    
0009e2  00                DCB      0
0009e3  00                DCB      0
                  |L17.2532|
0009e4  4541502d          DCB      "EAP-SIM: (encr) AT_COUNTER %d",0
0009e8  53494d3a
0009ec  2028656e
0009f0  63722920
0009f4  41545f43
0009f8  4f554e54
0009fc  45522025
000a00  6400    
000a02  00                DCB      0
000a03  00                DCB      0
                  |L17.2564|
000a04  4541502d          DCB      "EAP-SIM: Unencrypted AT_COUNTER_TOO_SMALL",0
000a08  53494d3a
000a0c  20556e65
000a10  6e637279
000a14  70746564
000a18  2041545f
000a1c  434f554e
000a20  5445525f
000a24  544f4f5f
000a28  534d414c
000a2c  4c00    
000a2e  00                DCB      0
000a2f  00                DCB      0
                  |L17.2608|
000a30  4541502d          DCB      "EAP-SIM: (encr) Invalid AT_COUNTER_TOO_SMALL (alen=%lu)"
000a34  53494d3a
000a38  2028656e
000a3c  63722920
000a40  496e7661
000a44  6c696420
000a48  41545f43
000a4c  4f554e54
000a50  45525f54
000a54  4f4f5f53
000a58  4d414c4c
000a5c  2028616c
000a60  656e3d25
000a64  6c7529  
000a67  00                DCB      0
                  |L17.2664|
000a68  4541502d          DCB      "EAP-SIM: (encr) AT_COUNTER_TOO_SMALL",0
000a6c  53494d3a
000a70  2028656e
000a74  63722920
000a78  41545f43
000a7c  4f554e54
000a80  45525f54
000a84  4f4f5f53
000a88  4d414c4c
000a8c  00      
000a8d  00                DCB      0
000a8e  00                DCB      0
000a8f  00                DCB      0
                  |L17.2704|
000a90  4541502d          DCB      "EAP-SIM: Unencrypted AT_NONCE_S",0
000a94  53494d3a
000a98  20556e65
000a9c  6e637279
000aa0  70746564
000aa4  2041545f
000aa8  4e4f4e43
000aac  455f5300
                  |L17.2736|
000ab0  4541502d          DCB      "EAP-SIM: (encr) AT_NONCE_S",0
000ab4  53494d3a
000ab8  2028656e
000abc  63722920
000ac0  41545f4e
000ac4  4f4e4345
000ac8  5f5300  
000acb  00                DCB      0
                  |L17.2764|
000acc  4541502d          DCB      "EAP-SIM: (encr) Invalid AT_NONCE_S (alen=%lu)",0
000ad0  53494d3a
000ad4  2028656e
000ad8  63722920
000adc  496e7661
000ae0  6c696420
000ae4  41545f4e
000ae8  4f4e4345
000aec  5f532028
000af0  616c656e
000af4  3d256c75
000af8  2900    
000afa  00                DCB      0
000afb  00                DCB      0
                  |L17.2812|
000afc  4541502d          DCB      "EAP-SIM: Invalid AT_CLIENT_ERROR_CODE length %lu",0
000b00  53494d3a
000b04  20496e76
000b08  616c6964
000b0c  2041545f
000b10  434c4945
000b14  4e545f45
000b18  52524f52
000b1c  5f434f44
000b20  45206c65
000b24  6e677468
000b28  20256c75
000b2c  00      
000b2d  00                DCB      0
000b2e  00                DCB      0
000b2f  00                DCB      0
                  |L17.2864|
000b30  4541502d          DCB      "EAP-SIM: AT_CLIENT_ERROR_CODE %d",0
000b34  53494d3a
000b38  2041545f
000b3c  434c4945
000b40  4e545f45
000b44  52524f52
000b48  5f434f44
000b4c  45202564
000b50  00      
000b51  00                DCB      0
000b52  00                DCB      0
000b53  00                DCB      0
                  |L17.2900|
000b54  4541502d          DCB      "EAP-SIM: AT_IV",0
000b58  53494d3a
000b5c  2041545f
000b60  495600  
000b63  00                DCB      0
                  |L17.2916|
000b64  4541502d          DCB      "EAP-SIM: Invalid AT_IV length %lu",0
000b68  53494d3a
000b6c  20496e76
000b70  616c6964
000b74  2041545f
000b78  4956206c
000b7c  656e6774
000b80  6820256c
000b84  7500    
000b86  00                DCB      0
000b87  00                DCB      0
                  |L17.2952|
000b88  4541502d          DCB      "EAP-SIM: AT_ENCR_DATA",0
000b8c  53494d3a
000b90  2041545f
000b94  454e4352
000b98  5f444154
000b9c  4100    
000b9e  00                DCB      0
000b9f  00                DCB      0
                  |L17.2976|
000ba0  4541502d          DCB      "EAP-SIM: Invalid AT_ENCR_DATA length %lu",0
000ba4  53494d3a
000ba8  20496e76
000bac  616c6964
000bb0  2041545f
000bb4  454e4352
000bb8  5f444154
000bbc  41206c65
000bc0  6e677468
000bc4  20256c75
000bc8  00      
000bc9  00                DCB      0
000bca  00                DCB      0
000bcb  00                DCB      0
                  |L17.3020|
000bcc  4541502d          DCB      "EAP-SIM: Unencrypted AT_NEXT_PSEUDONYM",0
000bd0  53494d3a
000bd4  20556e65
000bd8  6e637279
000bdc  70746564
000be0  2041545f
000be4  4e455854
000be8  5f505345
000bec  55444f4e
000bf0  594d00  
000bf3  00                DCB      0
                  |L17.3060|
000bf4  4541502d          DCB      "EAP-SIM: (encr) AT_NEXT_PSEUDONYM",0
000bf8  53494d3a
000bfc  2028656e
000c00  63722920
000c04  41545f4e
000c08  4558545f
000c0c  50534555
000c10  444f4e59
000c14  4d00    
000c16  00                DCB      0
000c17  00                DCB      0
                  |L17.3096|
                          DCD      ||.constdata||+0x8c
                  |L17.3100|
000c1c  4541502d          DCB      "EAP-SIM: Unencrypted AT_NEXT_REAUTH_ID",0
000c20  53494d3a
000c24  20556e65
000c28  6e637279
000c2c  70746564
000c30  2041545f
000c34  4e455854
000c38  5f524541
000c3c  5554485f
000c40  494400  
000c43  00                DCB      0
                  |L17.3140|
000c44  4541502d          DCB      "EAP-SIM: (encr) AT_NEXT_REAUTH_ID",0
000c48  53494d3a
000c4c  2028656e
000c50  63722920
000c54  41545f4e
000c58  4558545f
000c5c  52454155
000c60  54485f49
000c64  4400    
000c66  00                DCB      0
000c67  00                DCB      0
                  |L17.3176|
000c68  4541502d          DCB      "EAP-SIM: AT_RES",0
000c6c  53494d3a
000c70  2041545f
000c74  52455300
                  |L17.3192|
000c78  4541502d          DCB      "EAP-SIM: Invalid AT_RES (len %lu)",0
000c7c  53494d3a
000c80  20496e76
000c84  616c6964
000c88  2041545f
000c8c  52455320
000c90  286c656e
000c94  20256c75
000c98  2900    
000c9a  00                DCB      0
000c9b  00                DCB      0
                  |L17.3228|
000c9c  4541502d          DCB      "EAP-AKA: AT_AUTS",0
000ca0  414b413a
000ca4  2041545f
000ca8  41555453
000cac  00      
000cad  00                DCB      0
000cae  00                DCB      0
000caf  00                DCB      0
                  |L17.3248|
000cb0  4541502d          DCB      "EAP-SIM: Unexpected AT_AUTS",0
000cb4  53494d3a
000cb8  20556e65
000cbc  78706563
000cc0  74656420
000cc4  41545f41
000cc8  55545300
                  |L17.3276|
000ccc  4541502d          DCB      "EAP-AKA: Invalid AT_AUTS (len %lu)",0
000cd0  414b413a
000cd4  20496e76
000cd8  616c6964
000cdc  2041545f
000ce0  41555453
000ce4  20286c65
000ce8  6e20256c
000cec  752900  
000cef  00                DCB      0
                  |L17.3312|
000cf0  4541502d          DCB      "EAP-AKA: AT_CHECKCODE",0
000cf4  414b413a
000cf8  2041545f
000cfc  43484543
000d00  4b434f44
000d04  4500    
000d06  00                DCB      0
000d07  00                DCB      0
                  |L17.3336|
000d08  4541502d          DCB      "EAP-SIM: Unexpected AT_CHECKCODE",0
000d0c  53494d3a
000d10  20556e65
000d14  78706563
000d18  74656420
000d1c  41545f43
000d20  4845434b
000d24  434f4445
000d28  00      
000d29  00                DCB      0
000d2a  00                DCB      0
000d2b  00                DCB      0
                  |L17.3372|
000d2c  4541502d          DCB      "EAP-AKA: Invalid AT_CHECKCODE (len %lu)",0
000d30  414b413a
000d34  20496e76
000d38  616c6964
000d3c  2041545f
000d40  43484543
000d44  4b434f44
000d48  4520286c
000d4c  656e2025
000d50  6c752900
                  |L17.3412|
000d54  4541502d          DCB      "EAP-SIM: Encrypted AT_RESULT_IND",0
000d58  53494d3a
000d5c  20456e63
000d60  72797074
000d64  65642041
000d68  545f5245
000d6c  53554c54
000d70  5f494e44
000d74  00      
000d75  00                DCB      0
000d76  00                DCB      0
000d77  00                DCB      0
                  |L17.3448|
000d78  4541502d          DCB      "EAP-SIM: Invalid AT_RESULT_IND (alen=%lu)",0
000d7c  53494d3a
000d80  20496e76
000d84  616c6964
000d88  2041545f
000d8c  52455355
000d90  4c545f49
000d94  4e442028
000d98  616c656e
000d9c  3d256c75
000da0  2900    
000da2  00                DCB      0
000da3  00                DCB      0
                  |L17.3492|
000da4  4541502d          DCB      "EAP-SIM: AT_RESULT_IND",0
000da8  53494d3a
000dac  2041545f
000db0  52455355
000db4  4c545f49
000db8  4e4400  
000dbb  00                DCB      0
                  |L17.3516|
000dbc  7838              LDRB     r0,[r7,#0]            ;920
000dbe  2880              CMP      r0,#0x80              ;920
000dc0  da07              BGE      |L17.3538|
000dc2  783a              LDRB     r2,[r7,#0]            ;921
000dc4  a10d              ADR      r1,|L17.3580|
000dc6  2000              MOVS     r0,#0                 ;921
000dc8  f7fffffe          BL       wpa_printf
000dcc  f04f30ff          MOV      r0,#0xffffffff        ;924
000dd0  e4b7              B        |L17.1858|
                  |L17.3538|
000dd2  783a              LDRB     r2,[r7,#0]            ;927
000dd4  a116              ADR      r1,|L17.3632|
000dd6  2000              MOVS     r0,#0                 ;927
000dd8  f7fffffe          BL       wpa_printf
000ddc  bf00              NOP                            ;929
                  |L17.3550|
000dde  bf00              NOP                            ;553
000de0  7878              LDRB     r0,[r7,#1]            ;932
000de2  eb070780          ADD      r7,r7,r0,LSL #2       ;932
                  |L17.3558|
000de6  455f              CMP      r7,r11                ;517
000de8  f4ffa921          BCC      |L17.46|
000dec  464b              MOV      r3,r9                 ;935
000dee  4642              MOV      r2,r8                 ;935
000df0  a11d              ADR      r1,|L17.3688|
000df2  2000              MOVS     r0,#0                 ;935
000df4  f7fffffe          BL       wpa_printf
000df8  2000              MOVS     r0,#0                 ;938
000dfa  e4a2              B        |L17.1858|
;;;940    
                          ENDP

                  |L17.3580|
000dfc  4541502d          DCB      "EAP-SIM: Unrecognized non-skippable attribute %d",0
000e00  53494d3a
000e04  20556e72
000e08  65636f67
000e0c  6e697a65
000e10  64206e6f
000e14  6e2d736b
000e18  69707061
000e1c  626c6520
000e20  61747472
000e24  69627574
000e28  65202564
000e2c  00      
000e2d  00                DCB      0
000e2e  00                DCB      0
000e2f  00                DCB      0
                  |L17.3632|
000e30  4541502d          DCB      "EAP-SIM: Unrecognized skippable attribute %d ignored",0
000e34  53494d3a
000e38  20556e72
000e3c  65636f67
000e40  6e697a65
000e44  6420736b
000e48  69707061
000e4c  626c6520
000e50  61747472
000e54  69627574
000e58  65202564
000e5c  2069676e
000e60  6f726564
000e64  00      
000e65  00                DCB      0
000e66  00                DCB      0
000e67  00                DCB      0
                  |L17.3688|
000e68  4541502d          DCB      "EAP-SIM: Attributes parsed successfully (aka=%d encr=%d"
000e6c  53494d3a
000e70  20417474
000e74  72696275
000e78  74657320
000e7c  70617273
000e80  65642073
000e84  75636365
000e88  73736675
000e8c  6c6c7920
000e90  28616b61
000e94  3d256420
000e98  656e6372
000e9c  3d2564  
000e9f  2900              DCB      ")",0
000ea1  00                DCB      0
000ea2  00                DCB      0
000ea3  00                DCB      0

                          AREA ||i.eap_sim_parse_encr||, CODE, READONLY, ALIGN=2

                  eap_sim_parse_encr PROC
;;;941    
;;;942    u8 * eap_sim_parse_encr(const u8 *k_encr, const u8 *encr_data,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;943    			size_t encr_data_len, const u8 *iv,
;;;944    			struct eap_sim_attrs *attr, int aka)
;;;945    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  e9dd9a0a          LDRD     r9,r10,[sp,#0x28]
;;;946    	u8 *decrypted;
;;;947    
;;;948    	if (!iv) {
000010  b936              CBNZ     r6,|L18.32|
;;;949    		wpa_printf(MSG_INFO, "EAP-SIM: Encrypted data, but no IV");
000012  a11c              ADR      r1,|L18.132|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;950    		return NULL;
00001a  2000              MOVS     r0,#0
                  |L18.28|
;;;951    	}
;;;952    
;;;953    	decrypted = os_malloc(encr_data_len);
;;;954    	if (decrypted == NULL)
;;;955    		return NULL;
;;;956    	os_memcpy(decrypted, encr_data, encr_data_len);
;;;957    
;;;958    	if (aes_128_cbc_decrypt(k_encr, iv, decrypted, encr_data_len)) {
;;;959    		os_free(decrypted);
;;;960    		return NULL;
;;;961    	}
;;;962    	wpa_hexdump(MSG_MSGDUMP, "EAP-SIM: Decrypted AT_ENCR_DATA",
;;;963    		    decrypted, encr_data_len);
;;;964    
;;;965    	if (eap_sim_parse_attr(decrypted, decrypted + encr_data_len, attr,
;;;966    			       aka, 1)) {
;;;967    		wpa_printf(MSG_INFO, "EAP-SIM: (encr) Failed to parse "
;;;968    			   "decrypted AT_ENCR_DATA");
;;;969    		os_free(decrypted);
;;;970    		return NULL;
;;;971    	}
;;;972    
;;;973    	return decrypted;
;;;974    }
00001c  e8bd8ff8          POP      {r3-r11,pc}
                  |L18.32|
000020  4628              MOV      r0,r5                 ;953
000022  f7fffffe          BL       os_malloc
000026  4604              MOV      r4,r0                 ;953
000028  b90c              CBNZ     r4,|L18.46|
00002a  2000              MOVS     r0,#0                 ;955
00002c  e7f6              B        |L18.28|
                  |L18.46|
00002e  462a              MOV      r2,r5                 ;956
000030  4641              MOV      r1,r8                 ;956
000032  4620              MOV      r0,r4                 ;956
000034  f7fffffe          BL       os_memcpy
000038  462b              MOV      r3,r5                 ;958
00003a  4622              MOV      r2,r4                 ;958
00003c  4631              MOV      r1,r6                 ;958
00003e  4638              MOV      r0,r7                 ;958
000040  f7fffffe          BL       aes_128_cbc_decrypt
000044  b120              CBZ      r0,|L18.80|
000046  4620              MOV      r0,r4                 ;959
000048  f7fffffe          BL       os_free
00004c  2000              MOVS     r0,#0                 ;960
00004e  e7e5              B        |L18.28|
                  |L18.80|
000050  462b              MOV      r3,r5                 ;962
000052  4622              MOV      r2,r4                 ;962
000054  a114              ADR      r1,|L18.168|
000056  2000              MOVS     r0,#0                 ;962
000058  f7fffffe          BL       wpa_hexdump
00005c  2301              MOVS     r3,#1                 ;965
00005e  1961              ADDS     r1,r4,r5              ;965
000060  9300              STR      r3,[sp,#0]            ;965
000062  4653              MOV      r3,r10                ;965
000064  464a              MOV      r2,r9                 ;965
000066  4620              MOV      r0,r4                 ;965
000068  f7fffffe          BL       eap_sim_parse_attr
00006c  b140              CBZ      r0,|L18.128|
00006e  a116              ADR      r1,|L18.200|
000070  2000              MOVS     r0,#0                 ;967
000072  f7fffffe          BL       wpa_printf
000076  4620              MOV      r0,r4                 ;969
000078  f7fffffe          BL       os_free
00007c  2000              MOVS     r0,#0                 ;970
00007e  e7cd              B        |L18.28|
                  |L18.128|
000080  4620              MOV      r0,r4                 ;973
000082  e7cb              B        |L18.28|
;;;975    
                          ENDP

                  |L18.132|
000084  4541502d          DCB      "EAP-SIM: Encrypted data, but no IV",0
000088  53494d3a
00008c  20456e63
000090  72797074
000094  65642064
000098  6174612c
00009c  20627574
0000a0  206e6f20
0000a4  495600  
0000a7  00                DCB      0
                  |L18.168|
0000a8  4541502d          DCB      "EAP-SIM: Decrypted AT_ENCR_DATA",0
0000ac  53494d3a
0000b0  20446563
0000b4  72797074
0000b8  65642041
0000bc  545f454e
0000c0  43525f44
0000c4  41544100
                  |L18.200|
0000c8  4541502d          DCB      "EAP-SIM: (encr) Failed to parse decrypted AT_ENCR_DATA",0
0000cc  53494d3a
0000d0  2028656e
0000d4  63722920
0000d8  4661696c
0000dc  65642074
0000e0  6f207061
0000e4  72736520
0000e8  64656372
0000ec  79707465
0000f0  64204154
0000f4  5f454e43
0000f8  525f4441
0000fc  544100  
0000ff  00                DCB      0

                          AREA ||i.eap_sim_prf||, CODE, READONLY, ALIGN=1

                  eap_sim_prf PROC
;;;28     
;;;29     static int eap_sim_prf(const u8 *key, u8 *x, size_t xlen)
000000  b570              PUSH     {r4-r6,lr}
;;;30     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;31     	return fips186_2_prf(key, EAP_SIM_MK_LEN, x, xlen);
000008  462b              MOV      r3,r5
00000a  4622              MOV      r2,r4
00000c  2114              MOVS     r1,#0x14
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       fips186_2_prf
;;;32     }
000014  bd70              POP      {r4-r6,pc}
;;;33     
                          ENDP


                          AREA ||i.eap_sim_report_notification||, CODE, READONLY, ALIGN=2

                  eap_sim_report_notification PROC
;;;1175   
;;;1176   void eap_sim_report_notification(void *msg_ctx, int notification, int aka)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1177   {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;1178   #ifndef CONFIG_NO_STDOUT_DEBUG
;;;1179   	const char *type = aka ? "AKA" : "SIM";
00000a  b10d              CBZ      r5,|L20.16|
00000c  a025              ADR      r0,|L20.164|
00000e  e000              B        |L20.18|
                  |L20.16|
000010  a025              ADR      r0,|L20.168|
                  |L20.18|
000012  4606              MOV      r6,r0
;;;1180   #endif /* CONFIG_NO_STDOUT_DEBUG */
;;;1181   
;;;1182   	switch (notification) {
000014  f2404107          MOV      r1,#0x407
000018  1a60              SUBS     r0,r4,r1
00001a  428c              CMP      r4,r1
00001c  d01a              BEQ      |L20.84|
00001e  dc05              BGT      |L20.44|
000020  b164              CBZ      r4,|L20.60|
000022  f5a46080          SUB      r0,r4,#0x400
000026  3802              SUBS     r0,#2
000028  d127              BNE      |L20.122|
00002a  e00d              B        |L20.72|
                  |L20.44|
00002c  f5a0506c          SUB      r0,r0,#0x3b00
000030  38f9              SUBS     r0,r0,#0xf9
000032  d016              BEQ      |L20.98|
000034  f5b04f80          CMP      r0,#0x4000
000038  d11f              BNE      |L20.122|
00003a  e018              B        |L20.110|
                  |L20.60|
;;;1183   	case EAP_SIM_GENERAL_FAILURE_AFTER_AUTH:
;;;1184   		wpa_printf(MSG_WARNING, "EAP-%s: General failure "
00003c  4632              MOV      r2,r6
00003e  a11b              ADR      r1,|L20.172|
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       wpa_printf
;;;1185   			   "notification (after authentication)", type);
;;;1186   		break;
000046  e029              B        |L20.156|
                  |L20.72|
;;;1187   	case EAP_SIM_TEMPORARILY_DENIED:
;;;1188   		wpa_printf(MSG_WARNING, "EAP-%s: Failure notification: "
000048  4632              MOV      r2,r6
00004a  4927              LDR      r1,|L20.232|
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       wpa_printf
;;;1189   			   "User has been temporarily denied access to the "
;;;1190   			   "requested service", type);
;;;1191   		break;
000052  e023              B        |L20.156|
                  |L20.84|
;;;1192   	case EAP_SIM_NOT_SUBSCRIBED:
;;;1193   		wpa_printf(MSG_WARNING, "EAP-%s: Failure notification: "
000054  4632              MOV      r2,r6
000056  4924              LDR      r1,|L20.232|
000058  3160              ADDS     r1,r1,#0x60
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       wpa_printf
;;;1194   			   "User has not subscribed to the requested service",
;;;1195   			   type);
;;;1196   		break;
000060  e01c              B        |L20.156|
                  |L20.98|
;;;1197   	case EAP_SIM_GENERAL_FAILURE_BEFORE_AUTH:
;;;1198   		wpa_printf(MSG_WARNING, "EAP-%s: General failure "
000062  4632              MOV      r2,r6
000064  a121              ADR      r1,|L20.236|
000066  2000              MOVS     r0,#0
000068  f7fffffe          BL       wpa_printf
;;;1199   			   "notification (before authentication)", type);
;;;1200   		break;
00006c  e016              B        |L20.156|
                  |L20.110|
;;;1201   	case EAP_SIM_SUCCESS:
;;;1202   		wpa_printf(MSG_INFO, "EAP-%s: Successful authentication "
00006e  4632              MOV      r2,r6
000070  a12e              ADR      r1,|L20.300|
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       wpa_printf
;;;1203   			   "notification", type);
;;;1204   		break;
000078  e010              B        |L20.156|
                  |L20.122|
;;;1205   	default:
;;;1206   		if (notification >= 32768) {
00007a  f5b44f00          CMP      r4,#0x8000
00007e  db06              BLT      |L20.142|
;;;1207   			wpa_printf(MSG_INFO, "EAP-%s: Unrecognized "
000080  4623              MOV      r3,r4
000082  4632              MOV      r2,r6
000084  a135              ADR      r1,|L20.348|
000086  2000              MOVS     r0,#0
000088  f7fffffe          BL       wpa_printf
00008c  e005              B        |L20.154|
                  |L20.142|
;;;1208   				   "non-failure notification %d",
;;;1209   				   type, notification);
;;;1210   		} else {
;;;1211   			wpa_printf(MSG_WARNING, "EAP-%s: Unrecognized "
00008e  4623              MOV      r3,r4
000090  4632              MOV      r2,r6
000092  a13f              ADR      r1,|L20.400|
000094  2000              MOVS     r0,#0
000096  f7fffffe          BL       wpa_printf
                  |L20.154|
00009a  bf00              NOP                            ;1182
                  |L20.156|
00009c  bf00              NOP                            ;1186
;;;1212   				   "failure notification %d",
;;;1213   				   type, notification);
;;;1214   		}
;;;1215   	}
;;;1216   }
00009e  e8bd81f0          POP      {r4-r8,pc}
                          ENDP

0000a2  0000              DCW      0x0000
                  |L20.164|
0000a4  414b4100          DCB      "AKA",0
                  |L20.168|
0000a8  53494d00          DCB      "SIM",0
                  |L20.172|
0000ac  4541502d          DCB      "EAP-%s: General failure notification (after authenticat"
0000b0  25733a20
0000b4  47656e65
0000b8  72616c20
0000bc  6661696c
0000c0  75726520
0000c4  6e6f7469
0000c8  66696361
0000cc  74696f6e
0000d0  20286166
0000d4  74657220
0000d8  61757468
0000dc  656e7469
0000e0  636174  
0000e3  696f6e29          DCB      "ion)",0
0000e7  00      
                  |L20.232|
                          DCD      ||.constdata||+0x124
                  |L20.236|
0000ec  4541502d          DCB      "EAP-%s: General failure notification (before authentica"
0000f0  25733a20
0000f4  47656e65
0000f8  72616c20
0000fc  6661696c
000100  75726520
000104  6e6f7469
000108  66696361
00010c  74696f6e
000110  20286265
000114  666f7265
000118  20617574
00011c  68656e74
000120  696361  
000123  74696f6e          DCB      "tion)",0
000127  2900    
000129  00                DCB      0
00012a  00                DCB      0
00012b  00                DCB      0
                  |L20.300|
00012c  4541502d          DCB      "EAP-%s: Successful authentication notification",0
000130  25733a20
000134  53756363
000138  65737366
00013c  756c2061
000140  75746865
000144  6e746963
000148  6174696f
00014c  6e206e6f
000150  74696669
000154  63617469
000158  6f6e00  
00015b  00                DCB      0
                  |L20.348|
00015c  4541502d          DCB      "EAP-%s: Unrecognized non-failure notification %d",0
000160  25733a20
000164  556e7265
000168  636f676e
00016c  697a6564
000170  206e6f6e
000174  2d666169
000178  6c757265
00017c  206e6f74
000180  69666963
000184  6174696f
000188  6e202564
00018c  00      
00018d  00                DCB      0
00018e  00                DCB      0
00018f  00                DCB      0
                  |L20.400|
000190  4541502d          DCB      "EAP-%s: Unrecognized failure notification %d",0
000194  25733a20
000198  556e7265
00019c  636f676e
0001a0  697a6564
0001a4  20666169
0001a8  6c757265
0001ac  206e6f74
0001b0  69666963
0001b4  6174696f
0001b8  6e202564
0001bc  00      
0001bd  00                DCB      0
0001be  00                DCB      0
0001bf  00                DCB      0

                          AREA ||i.eap_sim_verify_mac||, CODE, READONLY, ALIGN=2

                  eap_sim_verify_mac PROC
;;;171    
;;;172    int eap_sim_verify_mac(const u8 *k_aut, const struct wpabuf *req,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;173    		       const u8 *mac, const u8 *extra, size_t extra_len)
;;;174    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4614              MOV      r4,r2
00000c  461e              MOV      r6,r3
00000e  f8dd9050          LDR      r9,[sp,#0x50]
;;;175    	unsigned char hmac[SHA1_MAC_LEN];
;;;176    	const u8 *addr[2];
;;;177    	size_t len[2];
;;;178    	u8 *tmp;
;;;179    
;;;180    	if (mac == NULL || wpabuf_len(req) < EAP_SIM_MAC_LEN ||
000012  b1a4              CBZ      r4,|L21.62|
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       wpabuf_len
00001a  2810              CMP      r0,#0x10
00001c  d30f              BCC      |L21.62|
;;;181    	    mac < wpabuf_head_u8(req) ||
00001e  4640              MOV      r0,r8
000020  f7fffffe          BL       wpabuf_head_u8
000024  42a0              CMP      r0,r4
000026  d80a              BHI      |L21.62|
;;;182    	    mac > wpabuf_head_u8(req) + wpabuf_len(req) - EAP_SIM_MAC_LEN)
000028  4640              MOV      r0,r8
00002a  f7fffffe          BL       wpabuf_head_u8
00002e  4682              MOV      r10,r0
000030  4640              MOV      r0,r8
000032  f7fffffe          BL       wpabuf_len
000036  4450              ADD      r0,r0,r10
000038  3810              SUBS     r0,r0,#0x10
00003a  42a0              CMP      r0,r4
00003c  d204              BCS      |L21.72|
                  |L21.62|
;;;183    		return -1;
00003e  f04f30ff          MOV      r0,#0xffffffff
                  |L21.66|
;;;184    
;;;185    	tmp = os_malloc(wpabuf_len(req));
;;;186    	if (tmp == NULL)
;;;187    		return -1;
;;;188    
;;;189    	addr[0] = tmp;
;;;190    	len[0] = wpabuf_len(req);
;;;191    	addr[1] = extra;
;;;192    	len[1] = extra_len;
;;;193    
;;;194    	/* HMAC-SHA1-128 */
;;;195    	os_memcpy(tmp, wpabuf_head(req), wpabuf_len(req));
;;;196    	os_memset(tmp + (mac - wpabuf_head_u8(req)), 0, EAP_SIM_MAC_LEN);
;;;197    	wpa_hexdump(MSG_MSGDUMP, "EAP-SIM: Verify MAC - msg",
;;;198    		    tmp, wpabuf_len(req));
;;;199    	wpa_hexdump(MSG_MSGDUMP, "EAP-SIM: Verify MAC - extra data",
;;;200    		    extra, extra_len);
;;;201    	wpa_hexdump_key(MSG_MSGDUMP, "EAP-SIM: Verify MAC - K_aut",
;;;202    			k_aut, EAP_SIM_K_AUT_LEN);
;;;203    	hmac_sha1_vector(k_aut, EAP_SIM_K_AUT_LEN, 2, addr, len, hmac);
;;;204    	wpa_hexdump(MSG_MSGDUMP, "EAP-SIM: Verify MAC: MAC",
;;;205    		    hmac, EAP_SIM_MAC_LEN);
;;;206    	os_free(tmp);
;;;207    
;;;208    	return (os_memcmp(hmac, mac, EAP_SIM_MAC_LEN) == 0) ? 0 : 1;
;;;209    }
000042  b00b              ADD      sp,sp,#0x2c
000044  e8bd8ff0          POP      {r4-r11,pc}
                  |L21.72|
000048  4640              MOV      r0,r8                 ;185
00004a  f7fffffe          BL       wpabuf_len
00004e  4682              MOV      r10,r0                ;185
000050  f7fffffe          BL       os_malloc
000054  4605              MOV      r5,r0                 ;185
000056  b915              CBNZ     r5,|L21.94|
000058  f04f30ff          MOV      r0,#0xffffffff        ;187
00005c  e7f1              B        |L21.66|
                  |L21.94|
00005e  9504              STR      r5,[sp,#0x10]         ;189
000060  4640              MOV      r0,r8                 ;190
000062  f7fffffe          BL       wpabuf_len
000066  9002              STR      r0,[sp,#8]            ;190
000068  9605              STR      r6,[sp,#0x14]         ;191
00006a  f8cd900c          STR      r9,[sp,#0xc]          ;192
00006e  4640              MOV      r0,r8                 ;195
000070  f7fffffe          BL       wpabuf_len
000074  4682              MOV      r10,r0                ;195
000076  4640              MOV      r0,r8                 ;195
000078  f7fffffe          BL       wpabuf_head
00007c  4683              MOV      r11,r0                ;195
00007e  4652              MOV      r2,r10                ;195
000080  4601              MOV      r1,r0                 ;195
000082  4628              MOV      r0,r5                 ;195
000084  f7fffffe          BL       os_memcpy
000088  4640              MOV      r0,r8                 ;196
00008a  f7fffffe          BL       wpabuf_head_u8
00008e  1a20              SUBS     r0,r4,r0              ;196
000090  eb000a05          ADD      r10,r0,r5             ;196
000094  2210              MOVS     r2,#0x10              ;196
000096  2100              MOVS     r1,#0                 ;196
000098  4650              MOV      r0,r10                ;196
00009a  f7fffffe          BL       os_memset
00009e  4640              MOV      r0,r8                 ;197
0000a0  f7fffffe          BL       wpabuf_len
0000a4  4682              MOV      r10,r0                ;197
0000a6  4603              MOV      r3,r0                 ;197
0000a8  462a              MOV      r2,r5                 ;197
0000aa  a116              ADR      r1,|L21.260|
0000ac  2000              MOVS     r0,#0                 ;197
0000ae  f7fffffe          BL       wpa_hexdump
0000b2  464b              MOV      r3,r9                 ;199
0000b4  4632              MOV      r2,r6                 ;199
0000b6  a11a              ADR      r1,|L21.288|
0000b8  2000              MOVS     r0,#0                 ;199
0000ba  f7fffffe          BL       wpa_hexdump
0000be  2310              MOVS     r3,#0x10              ;201
0000c0  463a              MOV      r2,r7                 ;201
0000c2  a120              ADR      r1,|L21.324|
0000c4  2000              MOVS     r0,#0                 ;201
0000c6  f7fffffe          BL       wpa_hexdump_key
0000ca  ab06              ADD      r3,sp,#0x18           ;203
0000cc  aa02              ADD      r2,sp,#8              ;203
0000ce  e9cd2300          STRD     r2,r3,[sp,#0]         ;203
0000d2  ab04              ADD      r3,sp,#0x10           ;203
0000d4  2202              MOVS     r2,#2                 ;203
0000d6  2110              MOVS     r1,#0x10              ;203
0000d8  4638              MOV      r0,r7                 ;203
0000da  f7fffffe          BL       hmac_sha1_vector
0000de  2310              MOVS     r3,#0x10              ;204
0000e0  aa06              ADD      r2,sp,#0x18           ;204
0000e2  a11f              ADR      r1,|L21.352|
0000e4  2000              MOVS     r0,#0                 ;204
0000e6  f7fffffe          BL       wpa_hexdump
0000ea  4628              MOV      r0,r5                 ;206
0000ec  f7fffffe          BL       os_free
0000f0  2210              MOVS     r2,#0x10              ;208
0000f2  4621              MOV      r1,r4                 ;208
0000f4  a806              ADD      r0,sp,#0x18           ;208
0000f6  f7fffffe          BL       os_memcmp
0000fa  b108              CBZ      r0,|L21.256|
0000fc  2001              MOVS     r0,#1                 ;208
0000fe  e7a0              B        |L21.66|
                  |L21.256|
000100  2000              MOVS     r0,#0                 ;208
000102  e79e              B        |L21.66|
;;;210    
                          ENDP

                  |L21.260|
000104  4541502d          DCB      "EAP-SIM: Verify MAC - msg",0
000108  53494d3a
00010c  20566572
000110  69667920
000114  4d414320
000118  2d206d73
00011c  6700    
00011e  00                DCB      0
00011f  00                DCB      0
                  |L21.288|
000120  4541502d          DCB      "EAP-SIM: Verify MAC - extra data",0
000124  53494d3a
000128  20566572
00012c  69667920
000130  4d414320
000134  2d206578
000138  74726120
00013c  64617461
000140  00      
000141  00                DCB      0
000142  00                DCB      0
000143  00                DCB      0
                  |L21.324|
000144  4541502d          DCB      "EAP-SIM: Verify MAC - K_aut",0
000148  53494d3a
00014c  20566572
000150  69667920
000154  4d414320
000158  2d204b5f
00015c  61757400
                  |L21.352|
000160  4541502d          DCB      "EAP-SIM: Verify MAC: MAC",0
000164  53494d3a
000168  20566572
00016c  69667920
000170  4d41433a
000174  204d4143
000178  00      
000179  00                DCB      0
00017a  00                DCB      0
00017b  00                DCB      0

                          AREA ||i.eap_sim_verify_mac_sha256||, CODE, READONLY, ALIGN=1

                  eap_sim_verify_mac_sha256 PROC
;;;130    
;;;131    static inline int eap_sim_verify_mac_sha256(const u8 *k_aut,
000000  b530              PUSH     {r4,r5,lr}
;;;132    					    const struct wpabuf *req,
;;;133    					    const u8 *mac, const u8 *extra,
;;;134    					    size_t extra_len)
;;;135    {
000002  4605              MOV      r5,r0
000004  9c03              LDR      r4,[sp,#0xc]
;;;136    	return -1;
000006  f04f30ff          MOV      r0,#0xffffffff
;;;137    }
00000a  bd30              POP      {r4,r5,pc}
;;;138    #endif /* EAP_AKA_PRIME || EAP_SERVER_AKA_PRIME */
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L23.30|
00001a  2001              MOVS     r0,#1
                  |L23.28|
;;;495    }
00001c  4770              BX       lr
                  |L23.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L23.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L28.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L28.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L28.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L28.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L31.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L31.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L31.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L31.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L37.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L37.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  53494d3a          DCB      0x53,0x49,0x4d,0x3a
000008  20576f72          DCB      0x20,0x57,0x6f,0x72
00000c  6b61726f          DCB      0x6b,0x61,0x72,0x6f
000010  756e6420          DCB      0x75,0x6e,0x64,0x20
000014  2d206472          DCB      0x2d,0x20,0x64,0x72
000018  6f70206e          DCB      0x6f,0x70,0x20,0x6e
00001c  756c6c20          DCB      0x75,0x6c,0x6c,0x20
000020  63686172          DCB      0x63,0x68,0x61,0x72
000024  61637465          DCB      0x61,0x63,0x74,0x65
000028  72206672          DCB      0x72,0x20,0x66,0x72
00002c  6f6d2074          DCB      0x6f,0x6d,0x20,0x74
000030  68652065          DCB      0x68,0x65,0x20,0x65
000034  6e64206f          DCB      0x6e,0x64,0x20,0x6f
000038  66206964          DCB      0x66,0x20,0x69,0x64
00003c  656e7469          DCB      0x65,0x6e,0x74,0x69
000040  74790000          DCB      0x74,0x79,0x00,0x00
000044  4541502d          DCB      0x45,0x41,0x50,0x2d
000048  53494d3a          DCB      0x53,0x49,0x4d,0x3a
00004c  20496e76          DCB      0x20,0x49,0x6e,0x76
000050  616c6964          DCB      0x61,0x6c,0x69,0x64
000054  2041545f          DCB      0x20,0x41,0x54,0x5f
000058  4944454e          DCB      0x49,0x44,0x45,0x4e
00005c  54495459          DCB      0x54,0x49,0x54,0x59
000060  20284163          DCB      0x20,0x28,0x41,0x63
000064  7475616c          DCB      0x74,0x75,0x61,0x6c
000068  204c656e          DCB      0x20,0x4c,0x65,0x6e
00006c  67746820          DCB      0x67,0x74,0x68,0x20
000070  256c752c          DCB      0x25,0x6c,0x75,0x2c
000074  2072656d          DCB      0x20,0x72,0x65,0x6d
000078  61696e69          DCB      0x61,0x69,0x6e,0x69
00007c  6e67206c          DCB      0x6e,0x67,0x20,0x6c
000080  656e6774          DCB      0x65,0x6e,0x67,0x74
000084  6820256c          DCB      0x68,0x20,0x25,0x6c
000088  75290000          DCB      0x75,0x29,0x00,0x00
00008c  4541502d          DCB      0x45,0x41,0x50,0x2d
000090  53494d3a          DCB      0x53,0x49,0x4d,0x3a
000094  2028656e          DCB      0x20,0x28,0x65,0x6e
000098  63722920          DCB      0x63,0x72,0x29,0x20
00009c  496e7661          DCB      0x49,0x6e,0x76,0x61
0000a0  6c696420          DCB      0x6c,0x69,0x64,0x20
0000a4  41545f4e          DCB      0x41,0x54,0x5f,0x4e
0000a8  4558545f          DCB      0x45,0x58,0x54,0x5f
0000ac  50534555          DCB      0x50,0x53,0x45,0x55
0000b0  444f4e59          DCB      0x44,0x4f,0x4e,0x59
0000b4  4d202861          DCB      0x4d,0x20,0x28,0x61
0000b8  63747561          DCB      0x63,0x74,0x75,0x61
0000bc  6c206c65          DCB      0x6c,0x20,0x6c,0x65
0000c0  6e20256c          DCB      0x6e,0x20,0x25,0x6c
0000c4  752c2061          DCB      0x75,0x2c,0x20,0x61
0000c8  74747220          DCB      0x74,0x74,0x72,0x20
0000cc  6c656e20          DCB      0x6c,0x65,0x6e,0x20
0000d0  256c7529          DCB      0x25,0x6c,0x75,0x29
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  4541502d          DCB      0x45,0x41,0x50,0x2d
0000dc  53494d3a          DCB      0x53,0x49,0x4d,0x3a
0000e0  2028656e          DCB      0x20,0x28,0x65,0x6e
0000e4  63722920          DCB      0x63,0x72,0x29,0x20
0000e8  496e7661          DCB      0x49,0x6e,0x76,0x61
0000ec  6c696420          DCB      0x6c,0x69,0x64,0x20
0000f0  41545f4e          DCB      0x41,0x54,0x5f,0x4e
0000f4  4558545f          DCB      0x45,0x58,0x54,0x5f
0000f8  52454155          DCB      0x52,0x45,0x41,0x55
0000fc  54485f49          DCB      0x54,0x48,0x5f,0x49
000100  44202861          DCB      0x44,0x20,0x28,0x61
000104  63747561          DCB      0x63,0x74,0x75,0x61
000108  6c206c65          DCB      0x6c,0x20,0x6c,0x65
00010c  6e20256c          DCB      0x6e,0x20,0x25,0x6c
000110  752c2061          DCB      0x75,0x2c,0x20,0x61
000114  74747220          DCB      0x74,0x74,0x72,0x20
000118  6c656e20          DCB      0x6c,0x65,0x6e,0x20
00011c  256c7529          DCB      0x25,0x6c,0x75,0x29
000120  00000000          DCB      0x00,0x00,0x00,0x00
000124  4541502d          DCB      0x45,0x41,0x50,0x2d
000128  25733a20          DCB      0x25,0x73,0x3a,0x20
00012c  4661696c          DCB      0x46,0x61,0x69,0x6c
000130  75726520          DCB      0x75,0x72,0x65,0x20
000134  6e6f7469          DCB      0x6e,0x6f,0x74,0x69
000138  66696361          DCB      0x66,0x69,0x63,0x61
00013c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000140  3a205573          DCB      0x3a,0x20,0x55,0x73
000144  65722068          DCB      0x65,0x72,0x20,0x68
000148  61732062          DCB      0x61,0x73,0x20,0x62
00014c  65656e20          DCB      0x65,0x65,0x6e,0x20
000150  74656d70          DCB      0x74,0x65,0x6d,0x70
000154  6f726172          DCB      0x6f,0x72,0x61,0x72
000158  696c7920          DCB      0x69,0x6c,0x79,0x20
00015c  64656e69          DCB      0x64,0x65,0x6e,0x69
000160  65642061          DCB      0x65,0x64,0x20,0x61
000164  63636573          DCB      0x63,0x63,0x65,0x73
000168  7320746f          DCB      0x73,0x20,0x74,0x6f
00016c  20746865          DCB      0x20,0x74,0x68,0x65
000170  20726571          DCB      0x20,0x72,0x65,0x71
000174  75657374          DCB      0x75,0x65,0x73,0x74
000178  65642073          DCB      0x65,0x64,0x20,0x73
00017c  65727669          DCB      0x65,0x72,0x76,0x69
000180  63650000          DCB      0x63,0x65,0x00,0x00
000184  4541502d          DCB      0x45,0x41,0x50,0x2d
000188  25733a20          DCB      0x25,0x73,0x3a,0x20
00018c  4661696c          DCB      0x46,0x61,0x69,0x6c
000190  75726520          DCB      0x75,0x72,0x65,0x20
000194  6e6f7469          DCB      0x6e,0x6f,0x74,0x69
000198  66696361          DCB      0x66,0x69,0x63,0x61
00019c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
0001a0  3a205573          DCB      0x3a,0x20,0x55,0x73
0001a4  65722068          DCB      0x65,0x72,0x20,0x68
0001a8  6173206e          DCB      0x61,0x73,0x20,0x6e
0001ac  6f742073          DCB      0x6f,0x74,0x20,0x73
0001b0  75627363          DCB      0x75,0x62,0x73,0x63
0001b4  72696265          DCB      0x72,0x69,0x62,0x65
0001b8  6420746f          DCB      0x64,0x20,0x74,0x6f
0001bc  20746865          DCB      0x20,0x74,0x68,0x65
0001c0  20726571          DCB      0x20,0x72,0x65,0x71
0001c4  75657374          DCB      0x75,0x65,0x73,0x74
0001c8  65642073          DCB      0x65,0x64,0x20,0x73
0001cc  65727669          DCB      0x65,0x72,0x76,0x69
0001d0  636500            DCB      0x63,0x65,0x00
