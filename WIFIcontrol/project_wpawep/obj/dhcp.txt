; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\dhcp.o --depend=.\obj\dhcp.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\dhcp.crf ..\lwIP\src\core\dhcp.c]
                          THUMB

                          AREA ||i.dhcp_arp_reply||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_arp_reply PROC
;;;714     */
;;;715    void dhcp_arp_reply(struct netif *netif, struct ip_addr *addr)
000000  b570              PUSH     {r4-r6,lr}
;;;716    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;717      LWIP_ERROR("netif != NULL", (netif != NULL), return;);
000006  bf00              NOP      
000008  b94c              CBNZ     r4,|L1.30|
00000a  bf00              NOP      
00000c  a30f              ADR      r3,|L1.76|
00000e  f24022cd          MOV      r2,#0x2cd
000012  a114              ADR      r1,|L1.100|
000014  a017              ADR      r0,|L1.116|
000016  f7fffffe          BL       __2printf
00001a  bf00              NOP      
                  |L1.28|
;;;718      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_arp_reply()\n"));
;;;719      /* is a DHCP client doing an ARP check? */
;;;720      if ((netif->dhcp != NULL) && (netif->dhcp->state == DHCP_CHECKING)) {
;;;721        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n", addr->addr));
;;;722        /* did a host respond with the address we
;;;723           were offered by the DHCP server? */
;;;724        if (ip_addr_cmp(addr, &netif->dhcp->offered_ip_addr)) {
;;;725          /* we will not accept the offered address */
;;;726          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | 1, ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
;;;727          dhcp_decline(netif);
;;;728        }
;;;729      }
;;;730    }
00001c  bd70              POP      {r4-r6,pc}
                  |L1.30|
00001e  bf00              NOP                            ;717
000020  bf00              NOP                            ;718
000022  bf00              NOP                            ;718
000024  6a20              LDR      r0,[r4,#0x20]         ;720
000026  b178              CBZ      r0,|L1.72|
000028  6a20              LDR      r0,[r4,#0x20]         ;720
00002a  7800              LDRB     r0,[r0,#0]            ;720
00002c  2808              CMP      r0,#8                 ;720
00002e  d10b              BNE      |L1.72|
000030  bf00              NOP                            ;721
000032  bf00              NOP                            ;721
000034  6828              LDR      r0,[r5,#0]            ;724
000036  6a21              LDR      r1,[r4,#0x20]         ;724
000038  6b09              LDR      r1,[r1,#0x30]         ;724
00003a  4288              CMP      r0,r1                 ;724
00003c  d104              BNE      |L1.72|
00003e  bf00              NOP                            ;726
000040  bf00              NOP                            ;726
000042  4620              MOV      r0,r4                 ;727
000044  f7fffffe          BL       dhcp_decline
                  |L1.72|
000048  bf00              NOP      
00004a  e7e7              B        |L1.28|
;;;731    
                          ENDP

                  |L1.76|
00004c  2e2e5c6c          DCB      "..\\lwIP\\src\\core\\dhcp.c",0
000050  7749505c
000054  7372635c
000058  636f7265
00005c  5c646863
000060  702e6300
                  |L1.100|
000064  6e657469          DCB      "netif != NULL",0
000068  6620213d
00006c  204e554c
000070  4c00    
000072  00                DCB      0
000073  00                DCB      0
                  |L1.116|
000074  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000078  7274696f
00007c  6e202225
000080  73222066
000084  61696c65
000088  64206174
00008c  206c696e
000090  65202564
000094  20696e20
000098  25730a00

                          AREA ||i.dhcp_bind||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_bind PROC
;;;843    static void
;;;844    dhcp_bind(struct netif *netif)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;845    {
000004  4606              MOV      r6,r0
;;;846      u32_t timeout;
;;;847      struct dhcp *dhcp;
;;;848      struct ip_addr sn_mask, gw_addr;
;;;849      LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
000006  bf00              NOP      
000008  b956              CBNZ     r6,|L2.32|
00000a  bf00              NOP      
00000c  a34a              ADR      r3,|L2.312|
00000e  f2403251          MOV      r2,#0x351
000012  a14f              ADR      r1,|L2.336|
000014  a055              ADR      r0,|L2.364|
000016  f7fffffe          BL       __2printf
00001a  bf00              NOP      
                  |L2.28|
;;;850      dhcp = netif->dhcp;
;;;851      LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
;;;852      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;853    
;;;854      /* temporary DHCP lease? */
;;;855      if (dhcp->offered_t1_renew != 0xffffffffUL) {
;;;856        /* set renewal period timer */
;;;857        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
;;;858        timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;859        if(timeout > 0xffff) {
;;;860          timeout = 0xffff;
;;;861        }
;;;862        dhcp->t1_timeout = (u16_t)timeout;
;;;863        if (dhcp->t1_timeout == 0) {
;;;864          dhcp->t1_timeout = 1;
;;;865        }
;;;866        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
;;;867      }
;;;868      /* set renewal period timer */
;;;869      if (dhcp->offered_t2_rebind != 0xffffffffUL) {
;;;870        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
;;;871        timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
;;;872        if(timeout > 0xffff) {
;;;873          timeout = 0xffff;
;;;874        }
;;;875        dhcp->t2_timeout = (u16_t)timeout;
;;;876        if (dhcp->t2_timeout == 0) {
;;;877          dhcp->t2_timeout = 1;
;;;878        }
;;;879        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
;;;880      }
;;;881      /* copy offered network mask */
;;;882      ip_addr_set(&sn_mask, &dhcp->offered_sn_mask);
;;;883    
;;;884      /* subnet mask not given? */
;;;885      /* TODO: this is not a valid check. what if the network mask is 0? */
;;;886      if (sn_mask.addr == 0) {
;;;887        /* choose a safe subnet mask given the network class */
;;;888        u8_t first_octet = ip4_addr1(&sn_mask);
;;;889        if (first_octet <= 127) {
;;;890          sn_mask.addr = htonl(0xff000000);
;;;891        } else if (first_octet >= 192) {
;;;892          sn_mask.addr = htonl(0xffffff00);
;;;893        } else {
;;;894          sn_mask.addr = htonl(0xffff0000);
;;;895        }
;;;896      }
;;;897    
;;;898      ip_addr_set(&gw_addr, &dhcp->offered_gw_addr);
;;;899      /* gateway address not given? */
;;;900      if (gw_addr.addr == 0) {
;;;901        /* copy network address */
;;;902        gw_addr.addr = (dhcp->offered_ip_addr.addr & sn_mask.addr);
;;;903        /* use first host address on network as gateway */
;;;904        gw_addr.addr |= htonl(0x00000001);
;;;905      }
;;;906    
;;;907    #if LWIP_DHCP_AUTOIP_COOP
;;;908      if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;909        autoip_stop(netif);
;;;910        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;911      }
;;;912    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;913    
;;;914      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F"\n", dhcp->offered_ip_addr.addr));
;;;915      netif_set_ipaddr(netif, &dhcp->offered_ip_addr);
;;;916      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): SN: 0x%08"X32_F"\n", sn_mask.addr));
;;;917      netif_set_netmask(netif, &sn_mask);
;;;918      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): GW: 0x%08"X32_F"\n", gw_addr.addr));
;;;919      netif_set_gw(netif, &gw_addr);
;;;920      /* bring the interface up */
;;;921      netif_set_up(netif);
;;;922      /* netif is now bound to DHCP leased address */
;;;923      dhcp_set_state(dhcp, DHCP_BOUND);
;;;924    }
00001c  e8bd81fc          POP      {r2-r8,pc}
                  |L2.32|
000020  bf00              NOP                            ;849
000022  6a34              LDR      r4,[r6,#0x20]         ;850
000024  bf00              NOP                            ;851
000026  b94c              CBNZ     r4,|L2.60|
000028  bf00              NOP                            ;851
00002a  a343              ADR      r3,|L2.312|
00002c  f2403253          MOV      r2,#0x353             ;851
000030  a158              ADR      r1,|L2.404|
000032  a04e              ADR      r0,|L2.364|
000034  f7fffffe          BL       __2printf
000038  bf00              NOP                            ;851
00003a  e7ef              B        |L2.28|
                  |L2.60|
00003c  bf00              NOP                            ;851
00003e  bf00              NOP                            ;852
000040  bf00              NOP                            ;852
000042  6d20              LDR      r0,[r4,#0x50]         ;855
000044  1c40              ADDS     r0,r0,#1              ;855
000046  d012              BEQ      |L2.110|
000048  bf00              NOP                            ;857
00004a  bf00              NOP                            ;857
00004c  6d20              LDR      r0,[r4,#0x50]         ;858
00004e  301e              ADDS     r0,r0,#0x1e           ;858
000050  213c              MOVS     r1,#0x3c              ;858
000052  fbb0f5f1          UDIV     r5,r0,r1              ;858
000056  f5b53f80          CMP      r5,#0x10000           ;859
00005a  d301              BCC      |L2.96|
00005c  f64f75ff          MOV      r5,#0xffff            ;860
                  |L2.96|
000060  8525              STRH     r5,[r4,#0x28]         ;862
000062  8d20              LDRH     r0,[r4,#0x28]         ;863
000064  b908              CBNZ     r0,|L2.106|
000066  2001              MOVS     r0,#1                 ;864
000068  8520              STRH     r0,[r4,#0x28]         ;864
                  |L2.106|
00006a  bf00              NOP                            ;866
00006c  bf00              NOP                            ;866
                  |L2.110|
00006e  6d60              LDR      r0,[r4,#0x54]         ;869
000070  1c40              ADDS     r0,r0,#1              ;869
000072  d012              BEQ      |L2.154|
000074  bf00              NOP                            ;870
000076  bf00              NOP                            ;870
000078  6d60              LDR      r0,[r4,#0x54]         ;871
00007a  301e              ADDS     r0,r0,#0x1e           ;871
00007c  213c              MOVS     r1,#0x3c              ;871
00007e  fbb0f5f1          UDIV     r5,r0,r1              ;871
000082  f5b53f80          CMP      r5,#0x10000           ;872
000086  d301              BCC      |L2.140|
000088  f64f75ff          MOV      r5,#0xffff            ;873
                  |L2.140|
00008c  8565              STRH     r5,[r4,#0x2a]         ;875
00008e  8d60              LDRH     r0,[r4,#0x2a]         ;876
000090  b908              CBNZ     r0,|L2.150|
000092  2001              MOVS     r0,#1                 ;877
000094  8560              STRH     r0,[r4,#0x2a]         ;877
                  |L2.150|
000096  bf00              NOP                            ;879
000098  bf00              NOP                            ;879
                  |L2.154|
00009a  f1140034          ADDS     r0,r4,#0x34           ;882
00009e  d100              BNE      |L2.162|
0000a0  e000              B        |L2.164|
                  |L2.162|
0000a2  6b60              LDR      r0,[r4,#0x34]         ;882
                  |L2.164|
0000a4  9001              STR      r0,[sp,#4]            ;882
0000a6  9801              LDR      r0,[sp,#4]            ;886
0000a8  b9c0              CBNZ     r0,|L2.220|
0000aa  9801              LDR      r0,[sp,#4]            ;888
0000ac  f7fffffe          BL       ntohl
0000b0  0e07              LSRS     r7,r0,#24             ;888
0000b2  2f7f              CMP      r7,#0x7f              ;889
0000b4  dc05              BGT      |L2.194|
0000b6  f04f407f          MOV      r0,#0xff000000        ;890
0000ba  f7fffffe          BL       htonl
0000be  9001              STR      r0,[sp,#4]            ;890
0000c0  e00b              B        |L2.218|
                  |L2.194|
0000c2  2fc0              CMP      r7,#0xc0              ;891
0000c4  db05              BLT      |L2.210|
0000c6  f06f00ff          MVN      r0,#0xff              ;892
0000ca  f7fffffe          BL       htonl
0000ce  9001              STR      r0,[sp,#4]            ;892
0000d0  e003              B        |L2.218|
                  |L2.210|
0000d2  4836              LDR      r0,|L2.428|
0000d4  f7fffffe          BL       htonl
0000d8  9001              STR      r0,[sp,#4]            ;894
                  |L2.218|
0000da  bf00              NOP                            ;896
                  |L2.220|
0000dc  f1140038          ADDS     r0,r4,#0x38           ;898
0000e0  d100              BNE      |L2.228|
0000e2  e000              B        |L2.230|
                  |L2.228|
0000e4  6ba0              LDR      r0,[r4,#0x38]         ;898
                  |L2.230|
0000e6  9000              STR      r0,[sp,#0]            ;898
0000e8  9800              LDR      r0,[sp,#0]            ;900
0000ea  b948              CBNZ     r0,|L2.256|
0000ec  6b20              LDR      r0,[r4,#0x30]         ;902
0000ee  9901              LDR      r1,[sp,#4]            ;902
0000f0  4008              ANDS     r0,r0,r1              ;902
0000f2  9000              STR      r0,[sp,#0]            ;902
0000f4  2001              MOVS     r0,#1                 ;904
0000f6  f7fffffe          BL       htonl
0000fa  9900              LDR      r1,[sp,#0]            ;904
0000fc  4308              ORRS     r0,r0,r1              ;904
0000fe  9000              STR      r0,[sp,#0]            ;904
                  |L2.256|
000100  bf00              NOP                            ;914
000102  bf00              NOP                            ;914
000104  f1040130          ADD      r1,r4,#0x30           ;915
000108  4630              MOV      r0,r6                 ;915
00010a  f7fffffe          BL       netif_set_ipaddr
00010e  bf00              NOP                            ;916
000110  bf00              NOP                            ;916
000112  a901              ADD      r1,sp,#4              ;917
000114  4630              MOV      r0,r6                 ;917
000116  f7fffffe          BL       netif_set_netmask
00011a  bf00              NOP                            ;918
00011c  bf00              NOP                            ;918
00011e  4669              MOV      r1,sp                 ;919
000120  4630              MOV      r0,r6                 ;919
000122  f7fffffe          BL       netif_set_gw
000126  4630              MOV      r0,r6                 ;921
000128  f7fffffe          BL       netif_set_up
00012c  210a              MOVS     r1,#0xa               ;923
00012e  4620              MOV      r0,r4                 ;923
000130  f7fffffe          BL       dhcp_set_state
000134  bf00              NOP      
000136  e771              B        |L2.28|
;;;925    
                          ENDP

                  |L2.312|
000138  2e2e5c6c          DCB      "..\\lwIP\\src\\core\\dhcp.c",0
00013c  7749505c
000140  7372635c
000144  636f7265
000148  5c646863
00014c  702e6300
                  |L2.336|
000150  64686370          DCB      "dhcp_bind: netif != NULL",0
000154  5f62696e
000158  643a206e
00015c  65746966
000160  20213d20
000164  4e554c4c
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0
                  |L2.364|
00016c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000170  7274696f
000174  6e202225
000178  73222066
00017c  61696c65
000180  64206174
000184  206c696e
000188  65202564
00018c  20696e20
000190  25730a00
                  |L2.404|
000194  64686370          DCB      "dhcp_bind: dhcp != NULL",0
000198  5f62696e
00019c  643a2064
0001a0  68637020
0001a4  213d204e
0001a8  554c4c00
                  |L2.428|
                          DCD      0xffff0000

                          AREA ||i.dhcp_check||, CODE, READONLY, ALIGN=1

                  dhcp_check PROC
;;;187    static void
;;;188    dhcp_check(struct netif *netif)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;189    {
000004  4606              MOV      r6,r0
;;;190      struct dhcp *dhcp = netif->dhcp;
000006  6a34              LDR      r4,[r6,#0x20]
;;;191      err_t result;
;;;192      u16_t msecs;
;;;193      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
000008  bf00              NOP      
00000a  bf00              NOP      
;;;194        (s16_t)netif->name[1]));
;;;195      dhcp_set_state(dhcp, DHCP_CHECKING);
00000c  2108              MOVS     r1,#8
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       dhcp_set_state
;;;196      /* create an ARP query for the offered IP address, expecting that no host
;;;197         responds, as the IP address should not be in use. */
;;;198      result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
000014  2200              MOVS     r2,#0
000016  f1040130          ADD      r1,r4,#0x30
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       etharp_query
000020  4605              MOV      r5,r0
;;;199      if (result != ERR_OK) {
000022  b10d              CBZ      r5,|L3.40|
;;;200        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_check: could not perform ARP query\n"));
000024  bf00              NOP      
000026  bf00              NOP      
                  |L3.40|
;;;201      }
;;;202      dhcp->tries++;
000028  7860              LDRB     r0,[r4,#1]
00002a  1c40              ADDS     r0,r0,#1
00002c  7060              STRB     r0,[r4,#1]
;;;203      msecs = 500;
00002e  f44f77fa          MOV      r7,#0x1f4
;;;204      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000032  f20710f3          ADD      r0,r7,#0x1f3
000036  4639              MOV      r1,r7
000038  fb90f0f1          SDIV     r0,r0,r1
00003c  84e0              STRH     r0,[r4,#0x26]
;;;205      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
00003e  bf00              NOP      
000040  bf00              NOP      
;;;206    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;207    
                          ENDP


                          AREA ||i.dhcp_coarse_tmr||, CODE, READONLY, ALIGN=2

                  dhcp_coarse_tmr PROC
;;;311    void
;;;312    dhcp_coarse_tmr()
000000  b510              PUSH     {r4,lr}
;;;313    {
;;;314      struct netif *netif = netif_list;
000002  4812              LDR      r0,|L4.76|
000004  6804              LDR      r4,[r0,#0]  ; netif_list
;;;315      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;316      /* iterate through all network interfaces */
;;;317      while (netif != NULL) {
00000a  e01b              B        |L4.68|
                  |L4.12|
;;;318        /* only act on DHCP configured interfaces */
;;;319        if (netif->dhcp != NULL) {
00000c  6a20              LDR      r0,[r4,#0x20]
00000e  b1c0              CBZ      r0,|L4.66|
;;;320          /* timer is active (non zero), and triggers (zeroes) now? */
;;;321          if (netif->dhcp->t2_timeout-- == 1) {
000010  6a20              LDR      r0,[r4,#0x20]
000012  8d41              LDRH     r1,[r0,#0x2a]
000014  1e48              SUBS     r0,r1,#1
000016  6a22              LDR      r2,[r4,#0x20]
000018  8550              STRH     r0,[r2,#0x2a]
00001a  2901              CMP      r1,#1
00001c  d105              BNE      |L4.42|
;;;322            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
00001e  bf00              NOP      
000020  bf00              NOP      
;;;323            /* this clients' rebind timeout triggered */
;;;324            dhcp_t2_timeout(netif);
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       dhcp_t2_timeout
000028  e00b              B        |L4.66|
                  |L4.42|
;;;325          /* timer is active (non zero), and triggers (zeroes) now */
;;;326          } else if (netif->dhcp->t1_timeout-- == 1) {
00002a  6a20              LDR      r0,[r4,#0x20]
00002c  8d01              LDRH     r1,[r0,#0x28]
00002e  1e48              SUBS     r0,r1,#1
000030  6a22              LDR      r2,[r4,#0x20]
000032  8510              STRH     r0,[r2,#0x28]
000034  2901              CMP      r1,#1
000036  d104              BNE      |L4.66|
;;;327            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
000038  bf00              NOP      
00003a  bf00              NOP      
;;;328            /* this clients' renewal timeout triggered */
;;;329            dhcp_t1_timeout(netif);
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       dhcp_t1_timeout
                  |L4.66|
;;;330          }
;;;331        }
;;;332        /* proceed to next netif */
;;;333        netif = netif->next;
000042  6824              LDR      r4,[r4,#0]
                  |L4.68|
000044  2c00              CMP      r4,#0                 ;317
000046  d1e1              BNE      |L4.12|
;;;334      }
;;;335    }
000048  bd10              POP      {r4,pc}
;;;336    
                          ENDP

00004a  0000              DCW      0x0000
                  |L4.76|
                          DCD      netif_list

                          AREA ||i.dhcp_create_request||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_create_request PROC
;;;1380   static err_t
;;;1381   dhcp_create_request(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;1382   {
000002  4606              MOV      r6,r0
;;;1383     struct dhcp *dhcp;
;;;1384     u16_t i;
;;;1385   #ifndef DHCP_GLOBAL_XID
;;;1386     /** default global transaction identifier starting value (easy to match
;;;1387      *  with a packet analyser). We simply increment for each new request.
;;;1388      *  Predefine DHCP_GLOBAL_XID to a better value or a function call to generate one
;;;1389      *  at runtime, any supporting function prototypes can be defined in DHCP_GLOBAL_XID_HEADER */
;;;1390     static u32_t xid = 0xABCD0000;
;;;1391   #else
;;;1392     static u32_t xid;
;;;1393     static u8_t xid_initialised = 0;
;;;1394     if (!xid_initialised) {
;;;1395       xid = DHCP_GLOBAL_XID;
;;;1396       xid_initialised = !xid_initialised;
;;;1397     }
;;;1398   #endif
;;;1399     LWIP_ERROR("dhcp_create_request: netif != NULL", (netif != NULL), return ERR_ARG;);
000004  bf00              NOP      
000006  b95e              CBNZ     r6,|L5.32|
000008  bf00              NOP      
00000a  a34e              ADR      r3,|L5.324|
00000c  f2405277          MOV      r2,#0x577
000010  a152              ADR      r1,|L5.348|
000012  a05b              ADR      r0,|L5.384|
000014  f7fffffe          BL       __2printf
000018  bf00              NOP      
00001a  f06f0009          MVN      r0,#9
                  |L5.30|
;;;1400     dhcp = netif->dhcp;
;;;1401     LWIP_ERROR("dhcp_create_request: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
;;;1402     LWIP_ASSERT("dhcp_create_request: dhcp->p_out == NULL", dhcp->p_out == NULL);
;;;1403     LWIP_ASSERT("dhcp_create_request: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
;;;1404     dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
;;;1405     if (dhcp->p_out == NULL) {
;;;1406       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_create_request(): could not allocate pbuf\n"));
;;;1407       return ERR_MEM;
;;;1408     }
;;;1409     LWIP_ASSERT("dhcp_create_request: check that first pbuf can hold struct dhcp_msg",
;;;1410              (dhcp->p_out->len >= sizeof(struct dhcp_msg)));
;;;1411   
;;;1412     /* reuse transaction identifier in retransmissions */
;;;1413     if (dhcp->tries==0)
;;;1414         xid++;
;;;1415     dhcp->xid = xid;
;;;1416     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2,
;;;1417                 ("transaction id xid(%"X32_F")\n", xid));
;;;1418   
;;;1419     dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
;;;1420   
;;;1421     dhcp->msg_out->op = DHCP_BOOTREQUEST;
;;;1422     /* TODO: make link layer independent */
;;;1423     dhcp->msg_out->htype = DHCP_HTYPE_ETH;
;;;1424     /* TODO: make link layer independent */
;;;1425     dhcp->msg_out->hlen = DHCP_HLEN_ETH;
;;;1426     dhcp->msg_out->hops = 0;
;;;1427     dhcp->msg_out->xid = htonl(dhcp->xid);
;;;1428     dhcp->msg_out->secs = 0;
;;;1429     dhcp->msg_out->flags = 0;
;;;1430     dhcp->msg_out->ciaddr.addr = 0;
;;;1431     if (dhcp->state==DHCP_BOUND || dhcp->state==DHCP_RENEWING || dhcp->state==DHCP_REBINDING) {
;;;1432       dhcp->msg_out->ciaddr.addr = netif->ip_addr.addr;
;;;1433     }
;;;1434     dhcp->msg_out->yiaddr.addr = 0;
;;;1435     dhcp->msg_out->siaddr.addr = 0;
;;;1436     dhcp->msg_out->giaddr.addr = 0;
;;;1437     for (i = 0; i < DHCP_CHADDR_LEN; i++) {
;;;1438       /* copy netif hardware address, pad with zeroes */
;;;1439       dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len) ? netif->hwaddr[i] : 0/* pad byte*/;
;;;1440     }
;;;1441     for (i = 0; i < DHCP_SNAME_LEN; i++) {
;;;1442       dhcp->msg_out->sname[i] = 0;
;;;1443     }
;;;1444     for (i = 0; i < DHCP_FILE_LEN; i++) {
;;;1445       dhcp->msg_out->file[i] = 0;
;;;1446     }
;;;1447     dhcp->msg_out->cookie = htonl(0x63825363UL);
;;;1448     dhcp->options_out_len = 0;
;;;1449     /* fill options field with an incrementing array (for debugging purposes) */
;;;1450     for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
;;;1451       dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
;;;1452     }
;;;1453     return ERR_OK;
;;;1454   }
00001e  bd70              POP      {r4-r6,pc}
                  |L5.32|
000020  bf00              NOP                            ;1399
000022  6a34              LDR      r4,[r6,#0x20]         ;1400
000024  bf00              NOP                            ;1401
000026  b95c              CBNZ     r4,|L5.64|
000028  bf00              NOP                            ;1401
00002a  a346              ADR      r3,|L5.324|
00002c  f2405279          MOV      r2,#0x579             ;1401
000030  a15d              ADR      r1,|L5.424|
000032  a053              ADR      r0,|L5.384|
000034  f7fffffe          BL       __2printf
000038  bf00              NOP                            ;1401
00003a  f06f0008          MVN      r0,#8                 ;1401
00003e  e7ee              B        |L5.30|
                  |L5.64|
000040  bf00              NOP                            ;1401
000042  2200              MOVS     r2,#0                 ;1404
000044  f44f719a          MOV      r1,#0x134             ;1404
000048  4610              MOV      r0,r2                 ;1404
00004a  f7fffffe          BL       pbuf_alloc
00004e  61e0              STR      r0,[r4,#0x1c]         ;1404
000050  69e0              LDR      r0,[r4,#0x1c]         ;1405
000052  b920              CBNZ     r0,|L5.94|
000054  bf00              NOP                            ;1406
000056  bf00              NOP                            ;1406
000058  f04f30ff          MOV      r0,#0xffffffff        ;1407
00005c  e7df              B        |L5.30|
                  |L5.94|
00005e  7860              LDRB     r0,[r4,#1]            ;1413
000060  b920              CBNZ     r0,|L5.108|
000062  485a              LDR      r0,|L5.460|
000064  6800              LDR      r0,[r0,#0]            ;1414  ; xid
000066  1c40              ADDS     r0,r0,#1              ;1414
000068  4958              LDR      r1,|L5.460|
00006a  6008              STR      r0,[r1,#0]            ;1414  ; xid
                  |L5.108|
00006c  4857              LDR      r0,|L5.460|
00006e  6800              LDR      r0,[r0,#0]            ;1415  ; xid
000070  6060              STR      r0,[r4,#4]            ;1415
000072  bf00              NOP                            ;1416
000074  bf00              NOP                            ;1416
000076  69e0              LDR      r0,[r4,#0x1c]         ;1419
000078  6840              LDR      r0,[r0,#4]            ;1419
00007a  6220              STR      r0,[r4,#0x20]         ;1419
00007c  2001              MOVS     r0,#1                 ;1421
00007e  6a21              LDR      r1,[r4,#0x20]         ;1421
000080  7008              STRB     r0,[r1,#0]            ;1421
000082  6a21              LDR      r1,[r4,#0x20]         ;1423
000084  7048              STRB     r0,[r1,#1]            ;1423
000086  2006              MOVS     r0,#6                 ;1425
000088  6a21              LDR      r1,[r4,#0x20]         ;1425
00008a  7088              STRB     r0,[r1,#2]            ;1425
00008c  2000              MOVS     r0,#0                 ;1426
00008e  6a21              LDR      r1,[r4,#0x20]         ;1426
000090  70c8              STRB     r0,[r1,#3]            ;1426
000092  6860              LDR      r0,[r4,#4]            ;1427
000094  f7fffffe          BL       htonl
000098  6a21              LDR      r1,[r4,#0x20]         ;1427
00009a  6048              STR      r0,[r1,#4]            ;1427
00009c  2000              MOVS     r0,#0                 ;1428
00009e  6a21              LDR      r1,[r4,#0x20]         ;1428
0000a0  8108              STRH     r0,[r1,#8]            ;1428
0000a2  6a21              LDR      r1,[r4,#0x20]         ;1429
0000a4  8148              STRH     r0,[r1,#0xa]          ;1429
0000a6  6a21              LDR      r1,[r4,#0x20]         ;1430
0000a8  60c8              STR      r0,[r1,#0xc]          ;1430
0000aa  7820              LDRB     r0,[r4,#0]            ;1431
0000ac  280a              CMP      r0,#0xa               ;1431
0000ae  d005              BEQ      |L5.188|
0000b0  7820              LDRB     r0,[r4,#0]            ;1431
0000b2  2805              CMP      r0,#5                 ;1431
0000b4  d002              BEQ      |L5.188|
0000b6  7820              LDRB     r0,[r4,#0]            ;1431
0000b8  2804              CMP      r0,#4                 ;1431
0000ba  d102              BNE      |L5.194|
                  |L5.188|
0000bc  6870              LDR      r0,[r6,#4]            ;1432
0000be  6a21              LDR      r1,[r4,#0x20]         ;1432
0000c0  60c8              STR      r0,[r1,#0xc]          ;1432
                  |L5.194|
0000c2  2000              MOVS     r0,#0                 ;1434
0000c4  6a21              LDR      r1,[r4,#0x20]         ;1434
0000c6  6108              STR      r0,[r1,#0x10]         ;1434
0000c8  6a21              LDR      r1,[r4,#0x20]         ;1435
0000ca  6148              STR      r0,[r1,#0x14]         ;1435
0000cc  6a21              LDR      r1,[r4,#0x20]         ;1436
0000ce  6188              STR      r0,[r1,#0x18]         ;1436
0000d0  2500              MOVS     r5,#0                 ;1437
0000d2  e00e              B        |L5.242|
                  |L5.212|
0000d4  f8960028          LDRB     r0,[r6,#0x28]         ;1439
0000d8  42a8              CMP      r0,r5                 ;1439
0000da  dd03              BLE      |L5.228|
0000dc  f1060029          ADD      r0,r6,#0x29           ;1439
0000e0  5d40              LDRB     r0,[r0,r5]            ;1439
0000e2  e000              B        |L5.230|
                  |L5.228|
0000e4  2000              MOVS     r0,#0                 ;1439
                  |L5.230|
0000e6  b2c1              UXTB     r1,r0                 ;1439
0000e8  6a20              LDR      r0,[r4,#0x20]         ;1439
0000ea  301c              ADDS     r0,r0,#0x1c           ;1439
0000ec  5541              STRB     r1,[r0,r5]            ;1439
0000ee  1c68              ADDS     r0,r5,#1              ;1437
0000f0  b285              UXTH     r5,r0                 ;1437
                  |L5.242|
0000f2  2d10              CMP      r5,#0x10              ;1437
0000f4  d3ee              BCC      |L5.212|
0000f6  2500              MOVS     r5,#0                 ;1441
0000f8  e005              B        |L5.262|
                  |L5.250|
0000fa  2100              MOVS     r1,#0                 ;1442
0000fc  6a20              LDR      r0,[r4,#0x20]         ;1442
0000fe  302c              ADDS     r0,r0,#0x2c           ;1442
000100  5541              STRB     r1,[r0,r5]            ;1442
000102  1c68              ADDS     r0,r5,#1              ;1441
000104  b285              UXTH     r5,r0                 ;1441
                  |L5.262|
000106  2d40              CMP      r5,#0x40              ;1441
000108  d3f7              BCC      |L5.250|
00010a  2500              MOVS     r5,#0                 ;1444
00010c  e005              B        |L5.282|
                  |L5.270|
00010e  2100              MOVS     r1,#0                 ;1445
000110  6a20              LDR      r0,[r4,#0x20]         ;1445
000112  306c              ADDS     r0,r0,#0x6c           ;1445
000114  5541              STRB     r1,[r0,r5]            ;1445
000116  1c68              ADDS     r0,r5,#1              ;1444
000118  b285              UXTH     r5,r0                 ;1444
                  |L5.282|
00011a  2d80              CMP      r5,#0x80              ;1444
00011c  d3f7              BCC      |L5.270|
00011e  482c              LDR      r0,|L5.464|
000120  f7fffffe          BL       htonl
000124  6a21              LDR      r1,[r4,#0x20]         ;1447
000126  f8c100ec          STR      r0,[r1,#0xec]         ;1447
00012a  2000              MOVS     r0,#0                 ;1448
00012c  84a0              STRH     r0,[r4,#0x24]         ;1448
00012e  2500              MOVS     r5,#0                 ;1450
000130  e004              B        |L5.316|
                  |L5.306|
000132  6a20              LDR      r0,[r4,#0x20]         ;1451
000134  30f0              ADDS     r0,r0,#0xf0           ;1451
000136  5545              STRB     r5,[r0,r5]            ;1451
000138  1c68              ADDS     r0,r5,#1              ;1450
00013a  b285              UXTH     r5,r0                 ;1450
                  |L5.316|
00013c  2d44              CMP      r5,#0x44              ;1450
00013e  d3f8              BCC      |L5.306|
000140  2000              MOVS     r0,#0                 ;1453
000142  e76c              B        |L5.30|
;;;1455   
                          ENDP

                  |L5.324|
000144  2e2e5c6c          DCB      "..\\lwIP\\src\\core\\dhcp.c",0
000148  7749505c
00014c  7372635c
000150  636f7265
000154  5c646863
000158  702e6300
                  |L5.348|
00015c  64686370          DCB      "dhcp_create_request: netif != NULL",0
000160  5f637265
000164  6174655f
000168  72657175
00016c  6573743a
000170  206e6574
000174  69662021
000178  3d204e55
00017c  4c4c00  
00017f  00                DCB      0
                  |L5.384|
000180  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000184  7274696f
000188  6e202225
00018c  73222066
000190  61696c65
000194  64206174
000198  206c696e
00019c  65202564
0001a0  20696e20
0001a4  25730a00
                  |L5.424|
0001a8  64686370          DCB      "dhcp_create_request: dhcp != NULL",0
0001ac  5f637265
0001b0  6174655f
0001b4  72657175
0001b8  6573743a
0001bc  20646863
0001c0  7020213d
0001c4  204e554c
0001c8  4c00    
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L5.460|
                          DCD      xid
                  |L5.464|
                          DCD      0x63825363

                          AREA ||i.dhcp_decline||, CODE, READONLY, ALIGN=2

                  dhcp_decline PROC
;;;741    static err_t
;;;742    dhcp_decline(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;743    {
000004  4605              MOV      r5,r0
;;;744      struct dhcp *dhcp = netif->dhcp;
000006  6a2c              LDR      r4,[r5,#0x20]
;;;745      err_t result = ERR_OK;
000008  2600              MOVS     r6,#0
;;;746      u16_t msecs;
;;;747      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_decline()\n"));
00000a  bf00              NOP      
00000c  bf00              NOP      
;;;748      dhcp_set_state(dhcp, DHCP_BACKING_OFF);
00000e  210c              MOVS     r1,#0xc
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       dhcp_set_state
;;;749      /* create and initialize the DHCP message header */
;;;750      result = dhcp_create_request(netif);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       dhcp_create_request
00001c  4606              MOV      r6,r0
;;;751      if (result == ERR_OK) {
00001e  bb7e              CBNZ     r6,|L6.128|
;;;752        dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
000020  2201              MOVS     r2,#1
000022  2135              MOVS     r1,#0x35
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       dhcp_option
;;;753        dhcp_option_byte(dhcp, DHCP_DECLINE);
00002a  2104              MOVS     r1,#4
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       dhcp_option_byte
;;;754    
;;;755        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000032  2204              MOVS     r2,#4
000034  2132              MOVS     r1,#0x32
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       dhcp_option
;;;756        dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
00003c  6b20              LDR      r0,[r4,#0x30]
00003e  f7fffffe          BL       ntohl
000042  4680              MOV      r8,r0
000044  4601              MOV      r1,r0
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       dhcp_option_long
;;;757    
;;;758        dhcp_option_trailer(dhcp);
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       dhcp_option_trailer
;;;759        /* resize pbuf to reflect true size of options */
;;;760        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000052  8ca2              LDRH     r2,[r4,#0x24]
000054  32f0              ADDS     r2,r2,#0xf0
000056  b291              UXTH     r1,r2
000058  69e0              LDR      r0,[r4,#0x1c]
00005a  f7fffffe          BL       pbuf_realloc
;;;761    
;;;762        /* @todo: should we really connect here? we are performing sendto() */
;;;763        udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
00005e  2243              MOVS     r2,#0x43
000060  4911              LDR      r1,|L6.168|
000062  68a0              LDR      r0,[r4,#8]
000064  f7fffffe          BL       udp_connect
;;;764        /* per section 4.4.4, broadcast DECLINE messages */
;;;765        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
000068  9500              STR      r5,[sp,#0]
00006a  2343              MOVS     r3,#0x43
00006c  4a0f              LDR      r2,|L6.172|
00006e  69e1              LDR      r1,[r4,#0x1c]
000070  68a0              LDR      r0,[r4,#8]
000072  f7fffffe          BL       udp_sendto_if
;;;766        dhcp_delete_request(netif);
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       dhcp_delete_request
;;;767        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
00007c  bf00              NOP      
00007e  e002              B        |L6.134|
                  |L6.128|
000080  e7ff              B        |L6.130|
                  |L6.130|
;;;768      } else {
;;;769        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_decline: could not allocate DHCP request\n"));
000082  bf00              NOP      
000084  bf00              NOP      
                  |L6.134|
;;;770      }
;;;771      dhcp->tries++;
000086  7860              LDRB     r0,[r4,#1]
000088  1c40              ADDS     r0,r0,#1
00008a  7060              STRB     r0,[r4,#1]
;;;772      msecs = 10*1000;
00008c  f2427710          MOV      r7,#0x2710
;;;773      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000090  f20710f3          ADD      r0,r7,#0x1f3
000094  f44f71fa          MOV      r1,#0x1f4
000098  fb90f0f1          SDIV     r0,r0,r1
00009c  84e0              STRH     r0,[r4,#0x26]
;;;774      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
00009e  bf00              NOP      
0000a0  bf00              NOP      
;;;775      return result;
0000a2  4630              MOV      r0,r6
;;;776    }
0000a4  e8bd83f8          POP      {r3-r9,pc}
;;;777    #endif
                          ENDP

                  |L6.168|
                          DCD      ip_addr_any
                  |L6.172|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_delete_request||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_delete_request PROC
;;;1461   static void
;;;1462   dhcp_delete_request(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;1463   {
000002  4605              MOV      r5,r0
;;;1464     struct dhcp *dhcp;
;;;1465     LWIP_ERROR("dhcp_delete_request: netif != NULL", (netif != NULL), return;);
000004  bf00              NOP      
000006  b94d              CBNZ     r5,|L7.28|
000008  bf00              NOP      
00000a  a311              ADR      r3,|L7.80|
00000c  f24052b9          MOV      r2,#0x5b9
000010  a115              ADR      r1,|L7.104|
000012  a01e              ADR      r0,|L7.140|
000014  f7fffffe          BL       __2printf
000018  bf00              NOP      
                  |L7.26|
;;;1466     dhcp = netif->dhcp;
;;;1467     LWIP_ERROR("dhcp_delete_request: dhcp != NULL", (dhcp != NULL), return;);
;;;1468     LWIP_ASSERT("dhcp_delete_request: dhcp->p_out != NULL", dhcp->p_out != NULL);
;;;1469     LWIP_ASSERT("dhcp_delete_request: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
;;;1470     if (dhcp->p_out != NULL) {
;;;1471       pbuf_free(dhcp->p_out);
;;;1472     }
;;;1473     dhcp->p_out = NULL;
;;;1474     dhcp->msg_out = NULL;
;;;1475   }
00001a  bd70              POP      {r4-r6,pc}
                  |L7.28|
00001c  bf00              NOP                            ;1465
00001e  6a2c              LDR      r4,[r5,#0x20]         ;1466
000020  bf00              NOP                            ;1467
000022  b94c              CBNZ     r4,|L7.56|
000024  bf00              NOP                            ;1467
000026  a30a              ADR      r3,|L7.80|
000028  f24052bb          MOV      r2,#0x5bb             ;1467
00002c  a121              ADR      r1,|L7.180|
00002e  a017              ADR      r0,|L7.140|
000030  f7fffffe          BL       __2printf
000034  bf00              NOP                            ;1467
000036  e7f0              B        |L7.26|
                  |L7.56|
000038  bf00              NOP                            ;1467
00003a  69e0              LDR      r0,[r4,#0x1c]         ;1470
00003c  b110              CBZ      r0,|L7.68|
00003e  69e0              LDR      r0,[r4,#0x1c]         ;1471
000040  f7fffffe          BL       pbuf_free
                  |L7.68|
000044  2000              MOVS     r0,#0                 ;1473
000046  61e0              STR      r0,[r4,#0x1c]         ;1473
000048  6220              STR      r0,[r4,#0x20]         ;1474
00004a  bf00              NOP      
00004c  e7e5              B        |L7.26|
;;;1476   
                          ENDP

00004e  0000              DCW      0x0000
                  |L7.80|
000050  2e2e5c6c          DCB      "..\\lwIP\\src\\core\\dhcp.c",0
000054  7749505c
000058  7372635c
00005c  636f7265
000060  5c646863
000064  702e6300
                  |L7.104|
000068  64686370          DCB      "dhcp_delete_request: netif != NULL",0
00006c  5f64656c
000070  6574655f
000074  72657175
000078  6573743a
00007c  206e6574
000080  69662021
000084  3d204e55
000088  4c4c00  
00008b  00                DCB      0
                  |L7.140|
00008c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000090  7274696f
000094  6e202225
000098  73222066
00009c  61696c65
0000a0  64206174
0000a4  206c696e
0000a8  65202564
0000ac  20696e20
0000b0  25730a00
                  |L7.180|
0000b4  64686370          DCB      "dhcp_delete_request: dhcp != NULL",0
0000b8  5f64656c
0000bc  6574655f
0000c0  72657175
0000c4  6573743a
0000c8  20646863
0000cc  7020213d
0000d0  204e554c
0000d4  4c00    
0000d6  00                DCB      0
0000d7  00                DCB      0

                          AREA ||i.dhcp_discover||, CODE, READONLY, ALIGN=2

                  dhcp_discover PROC
;;;785    static err_t
;;;786    dhcp_discover(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;787    {
000002  4605              MOV      r5,r0
;;;788      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;789      err_t result = ERR_OK;
000006  2600              MOVS     r6,#0
;;;790      u16_t msecs;
;;;791      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_discover()\n"));
000008  bf00              NOP      
00000a  bf00              NOP      
;;;792      ip_addr_set(&dhcp->offered_ip_addr, IP_ADDR_ANY);
00000c  483a              LDR      r0,|L8.248|
00000e  b908              CBNZ     r0,|L8.20|
000010  2000              MOVS     r0,#0
000012  e001              B        |L8.24|
                  |L8.20|
000014  4838              LDR      r0,|L8.248|
000016  6800              LDR      r0,[r0,#0]  ; ip_addr_any
                  |L8.24|
000018  6320              STR      r0,[r4,#0x30]
;;;793      dhcp_set_state(dhcp, DHCP_SELECTING);
00001a  2106              MOVS     r1,#6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       dhcp_set_state
;;;794      /* create and initialize the DHCP message header */
;;;795      result = dhcp_create_request(netif);
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       dhcp_create_request
000028  4606              MOV      r6,r0
;;;796      if (result == ERR_OK) {
00002a  bbf6              CBNZ     r6,|L8.170|
;;;797        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
00002c  bf00              NOP      
00002e  bf00              NOP      
;;;798        dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
000030  2201              MOVS     r2,#1
000032  2135              MOVS     r1,#0x35
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       dhcp_option
;;;799        dhcp_option_byte(dhcp, DHCP_DISCOVER);
00003a  2101              MOVS     r1,#1
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       dhcp_option_byte
;;;800    
;;;801        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000042  2202              MOVS     r2,#2
000044  2139              MOVS     r1,#0x39
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       dhcp_option
;;;802        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00004c  8e29              LDRH     r1,[r5,#0x30]
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       dhcp_option_short
;;;803    
;;;804        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
000054  2204              MOVS     r2,#4
000056  2137              MOVS     r1,#0x37
000058  4620              MOV      r0,r4
00005a  f7fffffe          BL       dhcp_option
;;;805        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
00005e  2101              MOVS     r1,#1
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       dhcp_option_byte
;;;806        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
000066  2103              MOVS     r1,#3
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       dhcp_option_byte
;;;807        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
00006e  211c              MOVS     r1,#0x1c
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       dhcp_option_byte
;;;808        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
000076  2106              MOVS     r1,#6
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       dhcp_option_byte
;;;809    
;;;810        dhcp_option_trailer(dhcp);
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       dhcp_option_trailer
;;;811    
;;;812        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
000084  bf00              NOP      
000086  bf00              NOP      
;;;813        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000088  8ca2              LDRH     r2,[r4,#0x24]
00008a  32f0              ADDS     r2,r2,#0xf0
00008c  b291              UXTH     r1,r2
00008e  69e0              LDR      r0,[r4,#0x1c]
000090  f7fffffe          BL       pbuf_realloc
;;;814    
;;;815        udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
000094  2243              MOVS     r2,#0x43
000096  4918              LDR      r1,|L8.248|
000098  68a0              LDR      r0,[r4,#8]
00009a  f7fffffe          BL       udp_connect
;;;816        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
00009e  bf00              NOP      
0000a0  bf00              NOP      
;;;817        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
0000a2  9500              STR      r5,[sp,#0]
0000a4  2343              MOVS     r3,#0x43
0000a6  4a15              LDR      r2,|L8.252|
0000a8  e000              B        |L8.172|
                  |L8.170|
0000aa  e00a              B        |L8.194|
                  |L8.172|
0000ac  69e1              LDR      r1,[r4,#0x1c]
0000ae  68a0              LDR      r0,[r4,#8]
0000b0  f7fffffe          BL       udp_sendto_if
;;;818        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
0000b4  bf00              NOP      
0000b6  bf00              NOP      
;;;819        dhcp_delete_request(netif);
0000b8  4628              MOV      r0,r5
0000ba  f7fffffe          BL       dhcp_delete_request
;;;820        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
0000be  bf00              NOP      
0000c0  e001              B        |L8.198|
                  |L8.194|
;;;821      } else {
;;;822        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_discover: could not allocate DHCP request\n"));
0000c2  bf00              NOP      
0000c4  bf00              NOP      
                  |L8.198|
;;;823      }
;;;824      dhcp->tries++;
0000c6  7860              LDRB     r0,[r4,#1]
0000c8  1c40              ADDS     r0,r0,#1
0000ca  7060              STRB     r0,[r4,#1]
;;;825    #if LWIP_DHCP_AUTOIP_COOP
;;;826      if(dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
;;;827        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
;;;828        autoip_start(netif);
;;;829      }
;;;830    #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;831      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
0000cc  7860              LDRB     r0,[r4,#1]
0000ce  2806              CMP      r0,#6
0000d0  da03              BGE      |L8.218|
0000d2  7861              LDRB     r1,[r4,#1]
0000d4  2001              MOVS     r0,#1
0000d6  4088              LSLS     r0,r0,r1
0000d8  e000              B        |L8.220|
                  |L8.218|
0000da  203c              MOVS     r0,#0x3c
                  |L8.220|
0000dc  f44f717a          MOV      r1,#0x3e8
0000e0  4348              MULS     r0,r1,r0
0000e2  b287              UXTH     r7,r0
;;;832      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000e4  f20710f3          ADD      r0,r7,#0x1f3
0000e8  1049              ASRS     r1,r1,#1
0000ea  fb90f0f1          SDIV     r0,r0,r1
0000ee  84e0              STRH     r0,[r4,#0x26]
;;;833      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
0000f0  bf00              NOP      
0000f2  bf00              NOP      
;;;834      return result;
0000f4  4630              MOV      r0,r6
;;;835    }
0000f6  bdf8              POP      {r3-r7,pc}
;;;836    
                          ENDP

                  |L8.248|
                          DCD      ip_addr_any
                  |L8.252|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_fine_tmr||, CODE, READONLY, ALIGN=2

                  dhcp_fine_tmr PROC
;;;344    void
;;;345    dhcp_fine_tmr()
000000  b510              PUSH     {r4,lr}
;;;346    {
;;;347      struct netif *netif = netif_list;
000002  4810              LDR      r0,|L9.68|
000004  6804              LDR      r4,[r0,#0]  ; netif_list
;;;348      /* loop through netif's */
;;;349      while (netif != NULL) {
000006  e01a              B        |L9.62|
                  |L9.8|
;;;350        /* only act on DHCP configured interfaces */
;;;351        if (netif->dhcp != NULL) {
000008  6a20              LDR      r0,[r4,#0x20]
00000a  b1b8              CBZ      r0,|L9.60|
;;;352          /* timer is active (non zero), and is about to trigger now */      
;;;353          if (netif->dhcp->request_timeout > 1) {
00000c  6a20              LDR      r0,[r4,#0x20]
00000e  8cc0              LDRH     r0,[r0,#0x26]
000010  2801              CMP      r0,#1
000012  dd05              BLE      |L9.32|
;;;354            netif->dhcp->request_timeout--;
000014  6a20              LDR      r0,[r4,#0x20]
000016  8cc0              LDRH     r0,[r0,#0x26]
000018  1e40              SUBS     r0,r0,#1
00001a  6a21              LDR      r1,[r4,#0x20]
00001c  84c8              STRH     r0,[r1,#0x26]
00001e  e00d              B        |L9.60|
                  |L9.32|
;;;355          }
;;;356          else if (netif->dhcp->request_timeout == 1) {
000020  6a20              LDR      r0,[r4,#0x20]
000022  8cc0              LDRH     r0,[r0,#0x26]
000024  2801              CMP      r0,#1
000026  d109              BNE      |L9.60|
;;;357            netif->dhcp->request_timeout--;
000028  6a20              LDR      r0,[r4,#0x20]
00002a  8cc0              LDRH     r0,[r0,#0x26]
00002c  1e40              SUBS     r0,r0,#1
00002e  6a21              LDR      r1,[r4,#0x20]
000030  84c8              STRH     r0,[r1,#0x26]
;;;358            /* { netif->dhcp->request_timeout == 0 } */
;;;359            LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
000032  bf00              NOP      
000034  bf00              NOP      
;;;360            /* this clients' request timeout triggered */
;;;361            dhcp_timeout(netif);
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       dhcp_timeout
                  |L9.60|
;;;362          }
;;;363        }
;;;364        /* proceed to next network interface */
;;;365        netif = netif->next;
00003c  6824              LDR      r4,[r4,#0]
                  |L9.62|
00003e  2c00              CMP      r4,#0                 ;349
000040  d1e2              BNE      |L9.8|
;;;366      }
;;;367    }
000042  bd10              POP      {r4,pc}
;;;368    
                          ENDP

                  |L9.68|
                          DCD      netif_list

                          AREA ||i.dhcp_free_reply||, CODE, READONLY, ALIGN=1

                  dhcp_free_reply PROC
;;;1262    */
;;;1263   static void dhcp_free_reply(struct dhcp *dhcp)
000000  b510              PUSH     {r4,lr}
;;;1264   {
000002  4604              MOV      r4,r0
;;;1265     if (dhcp->msg_in != NULL) {
000004  6920              LDR      r0,[r4,#0x10]
000006  b120              CBZ      r0,|L10.18|
;;;1266       mem_free((void *)dhcp->msg_in);
000008  6920              LDR      r0,[r4,#0x10]
00000a  f7fffffe          BL       mem_free
;;;1267       dhcp->msg_in = NULL;
00000e  2000              MOVS     r0,#0
000010  6120              STR      r0,[r4,#0x10]
                  |L10.18|
;;;1268     }
;;;1269     if (dhcp->options_in) {
000012  6960              LDR      r0,[r4,#0x14]
000014  b128              CBZ      r0,|L10.34|
;;;1270       mem_free((void *)dhcp->options_in);
000016  6960              LDR      r0,[r4,#0x14]
000018  f7fffffe          BL       mem_free
;;;1271       dhcp->options_in = NULL;
00001c  2000              MOVS     r0,#0
00001e  6160              STR      r0,[r4,#0x14]
;;;1272       dhcp->options_in_len = 0;
000020  8320              STRH     r0,[r4,#0x18]
                  |L10.34|
;;;1273     }
;;;1274     LWIP_DEBUGF(DHCP_DEBUG, ("dhcp_free_reply(): free'd\n"));
000022  bf00              NOP      
000024  bf00              NOP      
;;;1275   }
000026  bd10              POP      {r4,pc}
;;;1276   
                          ENDP


                          AREA ||i.dhcp_get_option_byte||, CODE, READONLY, ALIGN=1

                  dhcp_get_option_byte PROC
;;;1587   static u8_t
;;;1588   dhcp_get_option_byte(u8_t *ptr)
000000  4601              MOV      r1,r0
;;;1589   {
;;;1590     LWIP_DEBUGF(DHCP_DEBUG, ("option byte value=%"U16_F"\n", (u16_t)(*ptr)));
000002  bf00              NOP      
000004  bf00              NOP      
;;;1591     return *ptr;
000006  7808              LDRB     r0,[r1,#0]
;;;1592   }
000008  4770              BX       lr
;;;1593   
                          ENDP


                          AREA ||i.dhcp_get_option_long||, CODE, READONLY, ALIGN=1

                  dhcp_get_option_long PROC
;;;1621    */
;;;1622   static u32_t dhcp_get_option_long(u8_t *ptr)
000000  4601              MOV      r1,r0
;;;1623   {
;;;1624     u32_t value;
;;;1625     value = (u32_t)(*ptr++) << 24;
000002  f8113b01          LDRB     r3,[r1],#1
000006  0618              LSLS     r0,r3,#24
;;;1626     value |= (u32_t)(*ptr++) << 16;
000008  f8113b01          LDRB     r3,[r1],#1
00000c  ea404003          ORR      r0,r0,r3,LSL #16
;;;1627     value |= (u32_t)(*ptr++) << 8;
000010  f8113b01          LDRB     r3,[r1],#1
000014  ea402003          ORR      r0,r0,r3,LSL #8
;;;1628     value |= (u32_t)(*ptr++);
000018  f8112b01          LDRB     r2,[r1],#1
00001c  4310              ORRS     r0,r0,r2
;;;1629     LWIP_DEBUGF(DHCP_DEBUG, ("option long value=%"U32_F"\n", value));
00001e  bf00              NOP      
000020  bf00              NOP      
;;;1630     return value;
;;;1631   }
000022  4770              BX       lr
;;;1632   
                          ENDP


                          AREA ||i.dhcp_get_option_ptr||, CODE, READONLY, ALIGN=1

                  dhcp_get_option_ptr PROC
;;;1509    */
;;;1510   static u8_t *dhcp_get_option_ptr(struct dhcp *dhcp, u8_t option_type)
000000  b570              PUSH     {r4-r6,lr}
;;;1511   {
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
;;;1512     u8_t overload = DHCP_OVERLOAD_NONE;
000006  2600              MOVS     r6,#0
;;;1513   
;;;1514     /* options available? */
;;;1515     if ((dhcp->options_in != NULL) && (dhcp->options_in_len > 0)) {
000008  6958              LDR      r0,[r3,#0x14]
00000a  b380              CBZ      r0,|L13.110|
00000c  8b18              LDRH     r0,[r3,#0x18]
00000e  2800              CMP      r0,#0
000010  dd55              BLE      |L13.190|
;;;1516       /* start with options field */
;;;1517       u8_t *options = (u8_t *)dhcp->options_in;
000012  695a              LDR      r2,[r3,#0x14]
;;;1518       u16_t offset = 0;
000014  2100              MOVS     r1,#0
;;;1519       /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
;;;1520       while ((offset < dhcp->options_in_len) && (options[offset] != DHCP_OPTION_END)) {
000016  e01a              B        |L13.78|
                  |L13.24|
;;;1521         /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
;;;1522         /* are the sname and/or file field overloaded with options? */
;;;1523         if (options[offset] == DHCP_OPTION_OVERLOAD) {
000018  5c50              LDRB     r0,[r2,r1]
00001a  2834              CMP      r0,#0x34
00001c  d108              BNE      |L13.48|
;;;1524           LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("overloaded message detected\n"));
00001e  bf00              NOP      
000020  bf00              NOP      
;;;1525           /* skip option type and length */
;;;1526           offset += 2;
000022  1c88              ADDS     r0,r1,#2
000024  b281              UXTH     r1,r0
;;;1527           overload = options[offset++];
000026  4608              MOV      r0,r1
000028  1c4c              ADDS     r4,r1,#1
00002a  b2a1              UXTH     r1,r4
00002c  5c16              LDRB     r6,[r2,r0]
00002e  e00e              B        |L13.78|
                  |L13.48|
;;;1528         }
;;;1529         /* requested option found */
;;;1530         else if (options[offset] == option_type) {
000030  5c50              LDRB     r0,[r2,r1]
000032  42a8              CMP      r0,r5
000034  d103              BNE      |L13.62|
;;;1531           LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("option found at offset %"U16_F" in options\n", offset));
000036  bf00              NOP      
000038  bf00              NOP      
;;;1532           return &options[offset];
00003a  1850              ADDS     r0,r2,r1
                  |L13.60|
;;;1533         /* skip option */
;;;1534         } else {
;;;1535            LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", options[offset]));
;;;1536           /* skip option type */
;;;1537           offset++;
;;;1538           /* skip option length, and then length bytes */
;;;1539           offset += 1 + options[offset];
;;;1540         }
;;;1541       }
;;;1542       /* is this an overloaded message? */
;;;1543       if (overload != DHCP_OVERLOAD_NONE) {
;;;1544         u16_t field_len;
;;;1545         if (overload == DHCP_OVERLOAD_FILE) {
;;;1546           LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("overloaded file field\n"));
;;;1547           options = (u8_t *)&dhcp->msg_in->file;
;;;1548           field_len = DHCP_FILE_LEN;
;;;1549         } else if (overload == DHCP_OVERLOAD_SNAME) {
;;;1550           LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("overloaded sname field\n"));
;;;1551           options = (u8_t *)&dhcp->msg_in->sname;
;;;1552           field_len = DHCP_SNAME_LEN;
;;;1553         /* TODO: check if else if () is necessary */
;;;1554         } else {
;;;1555           LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("overloaded sname and file field\n"));
;;;1556           options = (u8_t *)&dhcp->msg_in->sname;
;;;1557           field_len = DHCP_FILE_LEN + DHCP_SNAME_LEN;
;;;1558         }
;;;1559         offset = 0;
;;;1560   
;;;1561         /* at least 1 byte to read and no end marker */
;;;1562         while ((offset < field_len) && (options[offset] != DHCP_OPTION_END)) {
;;;1563           if (options[offset] == option_type) {
;;;1564              LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("option found at offset=%"U16_F"\n", offset));
;;;1565             return &options[offset];
;;;1566           /* skip option */
;;;1567           } else {
;;;1568             LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("skipping option %"U16_F"\n", options[offset]));
;;;1569             /* skip option type */
;;;1570             offset++;
;;;1571             offset += 1 + options[offset];
;;;1572           }
;;;1573         }
;;;1574       }
;;;1575     }
;;;1576     return NULL;
;;;1577   }
00003c  bd70              POP      {r4-r6,pc}
                  |L13.62|
00003e  bf00              NOP                            ;1535
000040  bf00              NOP                            ;1535
000042  1c48              ADDS     r0,r1,#1              ;1537
000044  b281              UXTH     r1,r0                 ;1537
000046  5c50              LDRB     r0,[r2,r1]            ;1539
000048  1c40              ADDS     r0,r0,#1              ;1539
00004a  4408              ADD      r0,r0,r1              ;1539
00004c  b281              UXTH     r1,r0                 ;1539
                  |L13.78|
00004e  8b18              LDRH     r0,[r3,#0x18]         ;1520
000050  4288              CMP      r0,r1                 ;1520
000052  dd02              BLE      |L13.90|
000054  5c50              LDRB     r0,[r2,r1]            ;1520
000056  28ff              CMP      r0,#0xff              ;1520
000058  d1de              BNE      |L13.24|
                  |L13.90|
00005a  b37e              CBZ      r6,|L13.188|
00005c  2e01              CMP      r6,#1                 ;1545
00005e  d107              BNE      |L13.112|
000060  bf00              NOP                            ;1546
000062  bf00              NOP                            ;1546
000064  6918              LDR      r0,[r3,#0x10]         ;1547
000066  f100026c          ADD      r2,r0,#0x6c           ;1547
00006a  2480              MOVS     r4,#0x80              ;1548
00006c  e00f              B        |L13.142|
                  |L13.110|
00006e  e026              B        |L13.190|
                  |L13.112|
000070  2e02              CMP      r6,#2                 ;1549
000072  d106              BNE      |L13.130|
000074  bf00              NOP                            ;1550
000076  bf00              NOP                            ;1550
000078  6918              LDR      r0,[r3,#0x10]         ;1551
00007a  f100022c          ADD      r2,r0,#0x2c           ;1551
00007e  2440              MOVS     r4,#0x40              ;1552
000080  e005              B        |L13.142|
                  |L13.130|
000082  bf00              NOP                            ;1555
000084  bf00              NOP                            ;1555
000086  6918              LDR      r0,[r3,#0x10]         ;1556
000088  f100022c          ADD      r2,r0,#0x2c           ;1556
00008c  24c0              MOVS     r4,#0xc0              ;1557
                  |L13.142|
00008e  2100              MOVS     r1,#0                 ;1559
000090  e00e              B        |L13.176|
                  |L13.146|
000092  5c50              LDRB     r0,[r2,r1]            ;1563
000094  42a8              CMP      r0,r5                 ;1563
000096  d103              BNE      |L13.160|
000098  bf00              NOP                            ;1564
00009a  bf00              NOP                            ;1564
00009c  1850              ADDS     r0,r2,r1              ;1565
00009e  e7cd              B        |L13.60|
                  |L13.160|
0000a0  bf00              NOP                            ;1568
0000a2  bf00              NOP                            ;1568
0000a4  1c48              ADDS     r0,r1,#1              ;1570
0000a6  b281              UXTH     r1,r0                 ;1570
0000a8  5c50              LDRB     r0,[r2,r1]            ;1571
0000aa  1c40              ADDS     r0,r0,#1              ;1571
0000ac  4408              ADD      r0,r0,r1              ;1571
0000ae  b281              UXTH     r1,r0                 ;1571
                  |L13.176|
0000b0  42a1              CMP      r1,r4                 ;1562
0000b2  da02              BGE      |L13.186|
0000b4  5c50              LDRB     r0,[r2,r1]            ;1562
0000b6  28ff              CMP      r0,#0xff              ;1562
0000b8  d1eb              BNE      |L13.146|
                  |L13.186|
0000ba  bf00              NOP                            ;1574
                  |L13.188|
0000bc  bf00              NOP                            ;1575
                  |L13.190|
0000be  2000              MOVS     r0,#0                 ;1576
0000c0  e7bc              B        |L13.60|
;;;1578   
                          ENDP


                          AREA ||i.dhcp_handle_ack||, CODE, READONLY, ALIGN=2

                  dhcp_handle_ack PROC
;;;467    static void
;;;468    dhcp_handle_ack(struct netif *netif)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;469    {
000004  4607              MOV      r7,r0
;;;470      struct dhcp *dhcp = netif->dhcp;
000006  6a3c              LDR      r4,[r7,#0x20]
;;;471      u8_t *option_ptr;
;;;472      /* clear options we might not get from the ACK */
;;;473      dhcp->offered_sn_mask.addr = 0;
000008  2000              MOVS     r0,#0
00000a  6360              STR      r0,[r4,#0x34]
;;;474      dhcp->offered_gw_addr.addr = 0;
00000c  63a0              STR      r0,[r4,#0x38]
;;;475      dhcp->offered_bc_addr.addr = 0;
00000e  63e0              STR      r0,[r4,#0x3c]
;;;476    
;;;477      /* lease time given? */
;;;478      option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_LEASE_TIME);
000010  2133              MOVS     r1,#0x33
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       dhcp_get_option_ptr
000018  4605              MOV      r5,r0
;;;479      if (option_ptr != NULL) {
00001a  b11d              CBZ      r5,|L14.36|
;;;480        /* remember offered lease time */
;;;481        dhcp->offered_t0_lease = dhcp_get_option_long(option_ptr + 2);
00001c  1ca8              ADDS     r0,r5,#2
00001e  f7fffffe          BL       dhcp_get_option_long
000022  64e0              STR      r0,[r4,#0x4c]
                  |L14.36|
;;;482      }
;;;483      /* renewal period given? */
;;;484      option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_T1);
000024  213a              MOVS     r1,#0x3a
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       dhcp_get_option_ptr
00002c  4605              MOV      r5,r0
;;;485      if (option_ptr != NULL) {
00002e  b125              CBZ      r5,|L14.58|
;;;486        /* remember given renewal period */
;;;487        dhcp->offered_t1_renew = dhcp_get_option_long(option_ptr + 2);
000030  1ca8              ADDS     r0,r5,#2
000032  f7fffffe          BL       dhcp_get_option_long
000036  6520              STR      r0,[r4,#0x50]
000038  e002              B        |L14.64|
                  |L14.58|
;;;488      } else {
;;;489        /* calculate safe periods for renewal */
;;;490        dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
00003a  6ce0              LDR      r0,[r4,#0x4c]
00003c  0840              LSRS     r0,r0,#1
00003e  6520              STR      r0,[r4,#0x50]
                  |L14.64|
;;;491      }
;;;492    
;;;493      /* renewal period given? */
;;;494      option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_T2);
000040  213b              MOVS     r1,#0x3b
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       dhcp_get_option_ptr
000048  4605              MOV      r5,r0
;;;495      if (option_ptr != NULL) {
00004a  b125              CBZ      r5,|L14.86|
;;;496        /* remember given rebind period */
;;;497        dhcp->offered_t2_rebind = dhcp_get_option_long(option_ptr + 2);
00004c  1ca8              ADDS     r0,r5,#2
00004e  f7fffffe          BL       dhcp_get_option_long
000052  6560              STR      r0,[r4,#0x54]
000054  e001              B        |L14.90|
                  |L14.86|
;;;498      } else {
;;;499        /* calculate safe periods for rebinding */
;;;500        dhcp->offered_t2_rebind = dhcp->offered_t0_lease;
000056  6ce0              LDR      r0,[r4,#0x4c]
000058  6560              STR      r0,[r4,#0x54]
                  |L14.90|
;;;501      }
;;;502    
;;;503      /* (y)our internet address */
;;;504      ip_addr_set(&dhcp->offered_ip_addr, &dhcp->msg_in->yiaddr);
00005a  6920              LDR      r0,[r4,#0x10]
00005c  3010              ADDS     r0,r0,#0x10
00005e  d100              BNE      |L14.98|
000060  e001              B        |L14.102|
                  |L14.98|
000062  6920              LDR      r0,[r4,#0x10]
000064  6900              LDR      r0,[r0,#0x10]
                  |L14.102|
000066  6320              STR      r0,[r4,#0x30]
;;;505    
;;;506    /**
;;;507     * Patch #1308
;;;508     * TODO: we must check if the file field is not overloaded by DHCP options!
;;;509     */
;;;510    #if 0
;;;511      /* boot server address */
;;;512      ip_addr_set(&dhcp->offered_si_addr, &dhcp->msg_in->siaddr);
;;;513      /* boot file name */
;;;514      if (dhcp->msg_in->file[0]) {
;;;515        dhcp->boot_file_name = mem_malloc(strlen(dhcp->msg_in->file) + 1);
;;;516        strcpy(dhcp->boot_file_name, dhcp->msg_in->file);
;;;517      }
;;;518    #endif
;;;519    
;;;520      /* subnet mask */
;;;521      option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_SUBNET_MASK);
000068  2101              MOVS     r1,#1
00006a  4620              MOV      r0,r4
00006c  f7fffffe          BL       dhcp_get_option_ptr
000070  4605              MOV      r5,r0
;;;522      /* subnet mask given? */
;;;523      if (option_ptr != NULL) {
000072  b135              CBZ      r5,|L14.130|
;;;524        dhcp->offered_sn_mask.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
000074  1ca8              ADDS     r0,r5,#2
000076  f7fffffe          BL       dhcp_get_option_long
00007a  4606              MOV      r6,r0
00007c  f7fffffe          BL       htonl
000080  6360              STR      r0,[r4,#0x34]
                  |L14.130|
;;;525      }
;;;526    
;;;527      /* gateway router */
;;;528      option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_ROUTER);
000082  2103              MOVS     r1,#3
000084  4620              MOV      r0,r4
000086  f7fffffe          BL       dhcp_get_option_ptr
00008a  4605              MOV      r5,r0
;;;529      if (option_ptr != NULL) {
00008c  b135              CBZ      r5,|L14.156|
;;;530        dhcp->offered_gw_addr.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
00008e  1ca8              ADDS     r0,r5,#2
000090  f7fffffe          BL       dhcp_get_option_long
000094  4606              MOV      r6,r0
000096  f7fffffe          BL       htonl
00009a  63a0              STR      r0,[r4,#0x38]
                  |L14.156|
;;;531      }
;;;532    
;;;533      /* broadcast address */
;;;534      option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_BROADCAST);
00009c  211c              MOVS     r1,#0x1c
00009e  4620              MOV      r0,r4
0000a0  f7fffffe          BL       dhcp_get_option_ptr
0000a4  4605              MOV      r5,r0
;;;535      if (option_ptr != NULL) {
0000a6  b135              CBZ      r5,|L14.182|
;;;536        dhcp->offered_bc_addr.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
0000a8  1ca8              ADDS     r0,r5,#2
0000aa  f7fffffe          BL       dhcp_get_option_long
0000ae  4606              MOV      r6,r0
0000b0  f7fffffe          BL       htonl
0000b4  63e0              STR      r0,[r4,#0x3c]
                  |L14.182|
;;;537      }
;;;538      
;;;539      /* DNS servers */
;;;540      option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_DNS_SERVER);
0000b6  2106              MOVS     r1,#6
0000b8  4620              MOV      r0,r4
0000ba  f7fffffe          BL       dhcp_get_option_ptr
0000be  4605              MOV      r5,r0
;;;541      if (option_ptr != NULL) {
0000c0  b345              CBZ      r5,|L14.276|
;;;542        u8_t n;
;;;543        dhcp->dns_count = dhcp_get_option_byte(&option_ptr[1]) / (u32_t)sizeof(struct ip_addr);
0000c2  1c68              ADDS     r0,r5,#1
0000c4  f7fffffe          BL       dhcp_get_option_byte
0000c8  0880              LSRS     r0,r0,#2
0000ca  6420              STR      r0,[r4,#0x40]
;;;544        /* limit to at most DHCP_MAX_DNS DNS servers */
;;;545        if (dhcp->dns_count > DHCP_MAX_DNS)
0000cc  6c20              LDR      r0,[r4,#0x40]
0000ce  2802              CMP      r0,#2
0000d0  d901              BLS      |L14.214|
;;;546          dhcp->dns_count = DHCP_MAX_DNS;
0000d2  2002              MOVS     r0,#2
0000d4  6420              STR      r0,[r4,#0x40]
                  |L14.214|
;;;547        for (n = 0; n < dhcp->dns_count; n++) {
0000d6  2600              MOVS     r6,#0
0000d8  e014              B        |L14.260|
                  |L14.218|
;;;548          dhcp->offered_dns_addr[n].addr = htonl(dhcp_get_option_long(&option_ptr[2 + n * 4]));
0000da  2102              MOVS     r1,#2
0000dc  eb010186          ADD      r1,r1,r6,LSL #2
0000e0  1948              ADDS     r0,r1,r5
0000e2  f7fffffe          BL       dhcp_get_option_long
0000e6  4680              MOV      r8,r0
0000e8  f7fffffe          BL       htonl
0000ec  f1040144          ADD      r1,r4,#0x44
0000f0  f8410026          STR      r0,[r1,r6,LSL #2]
;;;549    #if LWIP_DNS
;;;550          dns_setserver( n, (struct ip_addr *)(&(dhcp->offered_dns_addr[n].addr)));
0000f4  4608              MOV      r0,r1
0000f6  eb000186          ADD      r1,r0,r6,LSL #2
0000fa  4630              MOV      r0,r6
0000fc  f7fffffe          BL       dns_setserver
000100  1c70              ADDS     r0,r6,#1              ;547
000102  b2c6              UXTB     r6,r0                 ;547
                  |L14.260|
000104  6c20              LDR      r0,[r4,#0x40]         ;547
000106  42b0              CMP      r0,r6                 ;547
000108  d8e7              BHI      |L14.218|
;;;551    #endif /* LWIP_DNS */
;;;552        }
;;;553    #if LWIP_DNS
;;;554        dns_setserver( n, (struct ip_addr *)(&ip_addr_any));
00010a  4903              LDR      r1,|L14.280|
00010c  4630              MOV      r0,r6
00010e  f7fffffe          BL       dns_setserver
;;;555    #endif /* LWIP_DNS */
;;;556      }
000112  bf00              NOP      
                  |L14.276|
;;;557    }
000114  e8bd81f0          POP      {r4-r8,pc}
;;;558    
                          ENDP

                  |L14.280|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_handle_nak||, CODE, READONLY, ALIGN=2

                  dhcp_handle_nak PROC
;;;160    static void
;;;161    dhcp_handle_nak(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;162    {
000002  4604              MOV      r4,r0
;;;163      struct dhcp *dhcp = netif->dhcp;
000004  6a25              LDR      r5,[r4,#0x20]
;;;164      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n", 
000006  bf00              NOP      
000008  bf00              NOP      
;;;165        (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;166      /* Set the interface down since the address must no longer be used, as per RFC2131 */
;;;167      netif_set_down(netif);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       netif_set_down
;;;168      /* remove IP address from interface */
;;;169      netif_set_ipaddr(netif, IP_ADDR_ANY);
000010  4909              LDR      r1,|L15.56|
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       netif_set_ipaddr
;;;170      netif_set_gw(netif, IP_ADDR_ANY);
000018  4907              LDR      r1,|L15.56|
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       netif_set_gw
;;;171      netif_set_netmask(netif, IP_ADDR_ANY); 
000020  4905              LDR      r1,|L15.56|
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       netif_set_netmask
;;;172      /* Change to a defined state */
;;;173      dhcp_set_state(dhcp, DHCP_BACKING_OFF);
000028  210c              MOVS     r1,#0xc
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       dhcp_set_state
;;;174      /* We can immediately restart discovery */
;;;175      dhcp_discover(netif);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       dhcp_discover
;;;176    }
000036  bd70              POP      {r4-r6,pc}
;;;177    
                          ENDP

                  |L15.56|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_handle_offer||, CODE, READONLY, ALIGN=1

                  dhcp_handle_offer PROC
;;;213    static void
;;;214    dhcp_handle_offer(struct netif *netif)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;215    {
000004  4605              MOV      r5,r0
;;;216      struct dhcp *dhcp = netif->dhcp;
000006  6a2c              LDR      r4,[r5,#0x20]
;;;217      /* obtain the server address */
;;;218      u8_t *option_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_SERVER_ID);
000008  2136              MOVS     r1,#0x36
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       dhcp_get_option_ptr
000010  4606              MOV      r6,r0
;;;219      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
000012  bf00              NOP      
000014  bf00              NOP      
;;;220        (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;221      if (option_ptr != NULL) {
000016  b1a6              CBZ      r6,|L16.66|
;;;222        dhcp->server_ip_addr.addr = htonl(dhcp_get_option_long(&option_ptr[2]));
000018  1cb0              ADDS     r0,r6,#2
00001a  f7fffffe          BL       dhcp_get_option_long
00001e  4607              MOV      r7,r0
000020  f7fffffe          BL       htonl
000024  62e0              STR      r0,[r4,#0x2c]
;;;223        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n", dhcp->server_ip_addr.addr));
000026  bf00              NOP      
000028  bf00              NOP      
;;;224        /* remember offered address */
;;;225        ip_addr_set(&dhcp->offered_ip_addr, (struct ip_addr *)&dhcp->msg_in->yiaddr);
00002a  6920              LDR      r0,[r4,#0x10]
00002c  3010              ADDS     r0,r0,#0x10
00002e  d100              BNE      |L16.50|
000030  e001              B        |L16.54|
                  |L16.50|
000032  6920              LDR      r0,[r4,#0x10]
000034  6900              LDR      r0,[r0,#0x10]
                  |L16.54|
000036  6320              STR      r0,[r4,#0x30]
;;;226        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n", dhcp->offered_ip_addr.addr));
000038  bf00              NOP      
00003a  bf00              NOP      
;;;227    
;;;228        dhcp_select(netif);
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       dhcp_select
                  |L16.66|
;;;229      }
;;;230    }
000042  e8bd81f0          POP      {r4-r8,pc}
;;;231    
                          ENDP


                          AREA ||i.dhcp_inform||, CODE, READONLY, ALIGN=2

                  dhcp_inform PROC
;;;652    void
;;;653    dhcp_inform(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;654    {
000002  4605              MOV      r5,r0
;;;655      struct dhcp *dhcp, *old_dhcp = netif->dhcp;
000004  6a2e              LDR      r6,[r5,#0x20]
;;;656      err_t result = ERR_OK;
000006  2700              MOVS     r7,#0
;;;657      dhcp = mem_malloc(sizeof(struct dhcp));
000008  2058              MOVS     r0,#0x58
00000a  f7fffffe          BL       mem_malloc
00000e  4604              MOV      r4,r0
;;;658      if (dhcp == NULL) {
000010  b914              CBNZ     r4,|L17.24|
;;;659        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_inform(): could not allocate dhcp\n"));
000012  bf00              NOP      
000014  bf00              NOP      
                  |L17.22|
;;;660        return;
;;;661      }
;;;662      netif->dhcp = dhcp;
;;;663      memset(dhcp, 0, sizeof(struct dhcp));
;;;664    
;;;665      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): allocated dhcp\n"));
;;;666      dhcp->pcb = udp_new();
;;;667      if (dhcp->pcb == NULL) {
;;;668        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_inform(): could not obtain pcb"));
;;;669        mem_free((void *)dhcp);
;;;670        return;
;;;671      }
;;;672      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_inform(): created new udp pcb\n"));
;;;673      /* create and initialize the DHCP message header */
;;;674      result = dhcp_create_request(netif);
;;;675      if (result == ERR_OK) {
;;;676    
;;;677        dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
;;;678        dhcp_option_byte(dhcp, DHCP_INFORM);
;;;679    
;;;680        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
;;;681        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
;;;682    
;;;683        dhcp_option_trailer(dhcp);
;;;684    
;;;685        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
;;;686    
;;;687    #if IP_SOF_BROADCAST
;;;688        dhcp->pcb->so_options|=SOF_BROADCAST;
;;;689    #endif /* IP_SOF_BROADCAST */
;;;690        udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
;;;691        udp_connect(dhcp->pcb, IP_ADDR_BROADCAST, DHCP_SERVER_PORT);
;;;692        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_inform: INFORMING\n"));
;;;693        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
;;;694        udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
;;;695        dhcp_delete_request(netif);
;;;696      } else {
;;;697        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_inform: could not allocate DHCP request\n"));
;;;698      }
;;;699    
;;;700      if (dhcp->pcb != NULL) {
;;;701        udp_remove(dhcp->pcb);
;;;702      }
;;;703      dhcp->pcb = NULL;
;;;704      mem_free((void *)dhcp);
;;;705      netif->dhcp = old_dhcp;
;;;706    }
000016  bdf8              POP      {r3-r7,pc}
                  |L17.24|
000018  622c              STR      r4,[r5,#0x20]         ;662
00001a  2158              MOVS     r1,#0x58              ;663
00001c  4620              MOV      r0,r4                 ;663
00001e  f7fffffe          BL       __aeabi_memclr4
000022  bf00              NOP                            ;665
000024  bf00              NOP                            ;665
000026  f7fffffe          BL       udp_new
00002a  60a0              STR      r0,[r4,#8]            ;666
00002c  68a0              LDR      r0,[r4,#8]            ;667
00002e  b928              CBNZ     r0,|L17.60|
000030  bf00              NOP                            ;668
000032  bf00              NOP                            ;668
000034  4620              MOV      r0,r4                 ;669
000036  f7fffffe          BL       mem_free
00003a  e7ec              B        |L17.22|
                  |L17.60|
00003c  bf00              NOP                            ;672
00003e  bf00              NOP                            ;672
000040  4628              MOV      r0,r5                 ;674
000042  f7fffffe          BL       dhcp_create_request
000046  4607              MOV      r7,r0                 ;674
000048  bbb7              CBNZ     r7,|L17.184|
00004a  2201              MOVS     r2,#1                 ;677
00004c  2135              MOVS     r1,#0x35              ;677
00004e  4620              MOV      r0,r4                 ;677
000050  f7fffffe          BL       dhcp_option
000054  2108              MOVS     r1,#8                 ;678
000056  4620              MOV      r0,r4                 ;678
000058  f7fffffe          BL       dhcp_option_byte
00005c  2202              MOVS     r2,#2                 ;680
00005e  2139              MOVS     r1,#0x39              ;680
000060  4620              MOV      r0,r4                 ;680
000062  f7fffffe          BL       dhcp_option
000066  8e29              LDRH     r1,[r5,#0x30]         ;681
000068  4620              MOV      r0,r4                 ;681
00006a  f7fffffe          BL       dhcp_option_short
00006e  4620              MOV      r0,r4                 ;683
000070  f7fffffe          BL       dhcp_option_trailer
000074  8ca2              LDRH     r2,[r4,#0x24]         ;685
000076  32f0              ADDS     r2,r2,#0xf0           ;685
000078  b291              UXTH     r1,r2                 ;685
00007a  69e0              LDR      r0,[r4,#0x1c]         ;685
00007c  f7fffffe          BL       pbuf_realloc
000080  2244              MOVS     r2,#0x44              ;690
000082  4915              LDR      r1,|L17.216|
000084  68a0              LDR      r0,[r4,#8]            ;690
000086  f7fffffe          BL       udp_bind
00008a  2243              MOVS     r2,#0x43              ;691
00008c  4913              LDR      r1,|L17.220|
00008e  68a0              LDR      r0,[r4,#8]            ;691
000090  f7fffffe          BL       udp_connect
000094  bf00              NOP                            ;692
000096  bf00              NOP                            ;692
000098  9500              STR      r5,[sp,#0]            ;693
00009a  2343              MOVS     r3,#0x43              ;693
00009c  4a0f              LDR      r2,|L17.220|
00009e  69e1              LDR      r1,[r4,#0x1c]         ;693
0000a0  68a0              LDR      r0,[r4,#8]            ;693
0000a2  f7fffffe          BL       udp_sendto_if
0000a6  2243              MOVS     r2,#0x43              ;694
0000a8  490b              LDR      r1,|L17.216|
0000aa  68a0              LDR      r0,[r4,#8]            ;694
0000ac  f7fffffe          BL       udp_connect
0000b0  4628              MOV      r0,r5                 ;695
0000b2  f7fffffe          BL       dhcp_delete_request
0000b6  e002              B        |L17.190|
                  |L17.184|
0000b8  e7ff              B        |L17.186|
                  |L17.186|
0000ba  bf00              NOP                            ;697
0000bc  bf00              NOP                            ;697
                  |L17.190|
0000be  68a0              LDR      r0,[r4,#8]            ;700
0000c0  b110              CBZ      r0,|L17.200|
0000c2  68a0              LDR      r0,[r4,#8]            ;701
0000c4  f7fffffe          BL       udp_remove
                  |L17.200|
0000c8  2000              MOVS     r0,#0                 ;703
0000ca  60a0              STR      r0,[r4,#8]            ;703
0000cc  4620              MOV      r0,r4                 ;704
0000ce  f7fffffe          BL       mem_free
0000d2  622e              STR      r6,[r5,#0x20]         ;705
0000d4  bf00              NOP      
0000d6  e79e              B        |L17.22|
;;;707    
                          ENDP

                  |L17.216|
                          DCD      ip_addr_any
                  |L17.220|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_option||, CODE, READONLY, ALIGN=1

                  dhcp_option PROC
;;;1170   static void
;;;1171   dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
000000  b510              PUSH     {r4,lr}
;;;1172   {
;;;1173     LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
;;;1174     dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
000002  8c84              LDRH     r4,[r0,#0x24]
000004  1c63              ADDS     r3,r4,#1
000006  8483              STRH     r3,[r0,#0x24]
000008  6a03              LDR      r3,[r0,#0x20]
00000a  33f0              ADDS     r3,r3,#0xf0
00000c  5519              STRB     r1,[r3,r4]
;;;1175     dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
00000e  8c84              LDRH     r4,[r0,#0x24]
000010  1c63              ADDS     r3,r4,#1
000012  8483              STRH     r3,[r0,#0x24]
000014  6a03              LDR      r3,[r0,#0x20]
000016  33f0              ADDS     r3,r3,#0xf0
000018  551a              STRB     r2,[r3,r4]
;;;1176   }
00001a  bd10              POP      {r4,pc}
;;;1177   /*
                          ENDP


                          AREA ||i.dhcp_option_byte||, CODE, READONLY, ALIGN=1

                  dhcp_option_byte PROC
;;;1181   static void
;;;1182   dhcp_option_byte(struct dhcp *dhcp, u8_t value)
000000  8c83              LDRH     r3,[r0,#0x24]
;;;1183   {
;;;1184     LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
;;;1185     dhcp->msg_out->options[dhcp->options_out_len++] = value;
000002  1c5a              ADDS     r2,r3,#1
000004  8482              STRH     r2,[r0,#0x24]
000006  6a02              LDR      r2,[r0,#0x20]
000008  32f0              ADDS     r2,r2,#0xf0
00000a  54d1              STRB     r1,[r2,r3]
;;;1186   }
00000c  4770              BX       lr
;;;1187   
                          ENDP


                          AREA ||i.dhcp_option_long||, CODE, READONLY, ALIGN=1

                  dhcp_option_long PROC
;;;1196   static void
;;;1197   dhcp_option_long(struct dhcp *dhcp, u32_t value)
000000  b510              PUSH     {r4,lr}
;;;1198   {
;;;1199     LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
;;;1200     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
000002  0e0a              LSRS     r2,r1,#24
000004  8c84              LDRH     r4,[r0,#0x24]
000006  1c63              ADDS     r3,r4,#1
000008  8483              STRH     r3,[r0,#0x24]
00000a  6a03              LDR      r3,[r0,#0x20]
00000c  33f0              ADDS     r3,r3,#0xf0
00000e  551a              STRB     r2,[r3,r4]
;;;1201     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
000010  f3c14207          UBFX     r2,r1,#16,#8
000014  8c84              LDRH     r4,[r0,#0x24]
000016  1c63              ADDS     r3,r4,#1
000018  8483              STRH     r3,[r0,#0x24]
00001a  6a03              LDR      r3,[r0,#0x20]
00001c  33f0              ADDS     r3,r3,#0xf0
00001e  551a              STRB     r2,[r3,r4]
;;;1202     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
000020  f3c12207          UBFX     r2,r1,#8,#8
000024  8c84              LDRH     r4,[r0,#0x24]
000026  1c63              ADDS     r3,r4,#1
000028  8483              STRH     r3,[r0,#0x24]
00002a  6a03              LDR      r3,[r0,#0x20]
00002c  33f0              ADDS     r3,r3,#0xf0
00002e  551a              STRB     r2,[r3,r4]
;;;1203     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
000030  8c84              LDRH     r4,[r0,#0x24]
000032  1c63              ADDS     r3,r4,#1
000034  8483              STRH     r3,[r0,#0x24]
000036  6a03              LDR      r3,[r0,#0x20]
000038  33f0              ADDS     r3,r3,#0xf0
00003a  5519              STRB     r1,[r3,r4]
;;;1204   }
00003c  bd10              POP      {r4,pc}
;;;1205   
                          ENDP


                          AREA ||i.dhcp_option_short||, CODE, READONLY, ALIGN=1

                  dhcp_option_short PROC
;;;1188   static void
;;;1189   dhcp_option_short(struct dhcp *dhcp, u16_t value)
000000  b510              PUSH     {r4,lr}
;;;1190   {
;;;1191     LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
;;;1192     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
000002  0a0a              LSRS     r2,r1,#8
000004  8c84              LDRH     r4,[r0,#0x24]
000006  1c63              ADDS     r3,r4,#1
000008  8483              STRH     r3,[r0,#0x24]
00000a  6a03              LDR      r3,[r0,#0x20]
00000c  33f0              ADDS     r3,r3,#0xf0
00000e  551a              STRB     r2,[r3,r4]
;;;1193     dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
000010  8c84              LDRH     r4,[r0,#0x24]
000012  1c63              ADDS     r3,r4,#1
000014  8483              STRH     r3,[r0,#0x24]
000016  6a03              LDR      r3,[r0,#0x20]
000018  33f0              ADDS     r3,r3,#0xf0
00001a  5519              STRB     r1,[r3,r4]
;;;1194   }
00001c  bd10              POP      {r4,pc}
;;;1195   
                          ENDP


                          AREA ||i.dhcp_option_trailer||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_option_trailer PROC
;;;1485   static void
;;;1486   dhcp_option_trailer(struct dhcp *dhcp)
000000  b510              PUSH     {r4,lr}
;;;1487   {
000002  4604              MOV      r4,r0
;;;1488     LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
000004  bf00              NOP      
000006  b94c              CBNZ     r4,|L22.28|
000008  bf00              NOP      
00000a  a311              ADR      r3,|L22.80|
00000c  f44f62ba          MOV      r2,#0x5d0
000010  a115              ADR      r1,|L22.104|
000012  a01e              ADR      r0,|L22.140|
000014  f7fffffe          BL       __2printf
000018  bf00              NOP      
                  |L22.26|
;;;1489     LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
;;;1490     LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
;;;1491     dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
;;;1492     /* packet is too small, or not 4 byte aligned? */
;;;1493     while ((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) {
;;;1494       /* LWIP_DEBUGF(DHCP_DEBUG,("dhcp_option_trailer:dhcp->options_out_len=%"U16_F", DHCP_OPTIONS_LEN=%"U16_F, dhcp->options_out_len, DHCP_OPTIONS_LEN)); */
;;;1495       LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
;;;1496       /* add a fill/padding byte */
;;;1497       dhcp->msg_out->options[dhcp->options_out_len++] = 0;
;;;1498     }
;;;1499   }
00001a  bd10              POP      {r4,pc}
                  |L22.28|
00001c  bf00              NOP                            ;1488
00001e  21ff              MOVS     r1,#0xff              ;1491
000020  8ca2              LDRH     r2,[r4,#0x24]         ;1491
000022  1c50              ADDS     r0,r2,#1              ;1491
000024  84a0              STRH     r0,[r4,#0x24]         ;1491
000026  6a20              LDR      r0,[r4,#0x20]         ;1491
000028  30f0              ADDS     r0,r0,#0xf0           ;1491
00002a  5481              STRB     r1,[r0,r2]            ;1491
00002c  e006              B        |L22.60|
                  |L22.46|
00002e  2100              MOVS     r1,#0                 ;1497
000030  8ca2              LDRH     r2,[r4,#0x24]         ;1497
000032  1c50              ADDS     r0,r2,#1              ;1497
000034  84a0              STRH     r0,[r4,#0x24]         ;1497
000036  6a20              LDR      r0,[r4,#0x20]         ;1497
000038  30f0              ADDS     r0,r0,#0xf0           ;1497
00003a  5481              STRB     r1,[r0,r2]            ;1497
                  |L22.60|
00003c  8ca0              LDRH     r0,[r4,#0x24]         ;1493
00003e  2844              CMP      r0,#0x44              ;1493
000040  d3f5              BCC      |L22.46|
000042  8ca0              LDRH     r0,[r4,#0x24]         ;1493
000044  f0100f03          TST      r0,#3                 ;1493
000048  d1f1              BNE      |L22.46|
00004a  bf00              NOP      
00004c  e7e5              B        |L22.26|
;;;1500   
                          ENDP

00004e  0000              DCW      0x0000
                  |L22.80|
000050  2e2e5c6c          DCB      "..\\lwIP\\src\\core\\dhcp.c",0
000054  7749505c
000058  7372635c
00005c  636f7265
000060  5c646863
000064  702e6300
                  |L22.104|
000068  64686370          DCB      "dhcp_option_trailer: dhcp != NULL",0
00006c  5f6f7074
000070  696f6e5f
000074  74726169
000078  6c65723a
00007c  20646863
000080  7020213d
000084  204e554c
000088  4c00    
00008a  00                DCB      0
00008b  00                DCB      0
                  |L22.140|
00008c  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
000090  7274696f
000094  6e202225
000098  73222066
00009c  61696c65
0000a0  64206174
0000a4  206c696e
0000a8  65202564
0000ac  20696e20
0000b0  25730a00

                          AREA ||i.dhcp_rebind||, CODE, READONLY, ALIGN=2

                  dhcp_rebind PROC
;;;998    static err_t
;;;999    dhcp_rebind(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1000   {
000002  4605              MOV      r5,r0
;;;1001     struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;1002     err_t result;
;;;1003     u16_t msecs;
;;;1004   #if LWIP_NETIF_HOSTNAME
;;;1005     const char *p;
;;;1006   #endif /* LWIP_NETIF_HOSTNAME */
;;;1007     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;1008     dhcp_set_state(dhcp, DHCP_REBINDING);
00000a  2104              MOVS     r1,#4
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       dhcp_set_state
;;;1009   
;;;1010     /* create and initialize the DHCP message header */
;;;1011     result = dhcp_create_request(netif);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       dhcp_create_request
000018  4606              MOV      r6,r0
;;;1012     if (result == ERR_OK) {
00001a  bb5e              CBNZ     r6,|L23.116|
;;;1013   
;;;1014       dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
00001c  2201              MOVS     r2,#1
00001e  2135              MOVS     r1,#0x35
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       dhcp_option
;;;1015       dhcp_option_byte(dhcp, DHCP_REQUEST);
000026  2103              MOVS     r1,#3
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dhcp_option_byte
;;;1016   
;;;1017       dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
00002e  2202              MOVS     r2,#2
000030  2139              MOVS     r1,#0x39
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       dhcp_option
;;;1018       dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000038  8e29              LDRH     r1,[r5,#0x30]
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       dhcp_option_short
;;;1019   
;;;1020   #if LWIP_NETIF_HOSTNAME
;;;1021       p = (const char*)netif->hostname;
;;;1022       if (p != NULL) {
;;;1023         dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, strlen(p));
;;;1024         while (*p) {
;;;1025           dhcp_option_byte(dhcp, *p++);
;;;1026         }
;;;1027       }
;;;1028   #endif /* LWIP_NETIF_HOSTNAME */
;;;1029   
;;;1030   #if 0
;;;1031       dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;1032       dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;1033   
;;;1034       dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;1035       dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;1036   #endif
;;;1037   
;;;1038       dhcp_option_trailer(dhcp);
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       dhcp_option_trailer
;;;1039   
;;;1040       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000046  8ca2              LDRH     r2,[r4,#0x24]
000048  32f0              ADDS     r2,r2,#0xf0
00004a  b291              UXTH     r1,r2
00004c  69e0              LDR      r0,[r4,#0x1c]
00004e  f7fffffe          BL       pbuf_realloc
;;;1041   
;;;1042       /* broadcast to server */
;;;1043       udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
000052  2243              MOVS     r2,#0x43
000054  4915              LDR      r1,|L23.172|
000056  68a0              LDR      r0,[r4,#8]
000058  f7fffffe          BL       udp_connect
;;;1044       udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
00005c  9500              STR      r5,[sp,#0]
00005e  2343              MOVS     r3,#0x43
000060  4a13              LDR      r2,|L23.176|
000062  69e1              LDR      r1,[r4,#0x1c]
000064  68a0              LDR      r0,[r4,#8]
000066  f7fffffe          BL       udp_sendto_if
;;;1045       dhcp_delete_request(netif);
00006a  4628              MOV      r0,r5
00006c  f7fffffe          BL       dhcp_delete_request
;;;1046       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
000070  bf00              NOP      
000072  e001              B        |L23.120|
                  |L23.116|
;;;1047     } else {
;;;1048       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_rebind: could not allocate DHCP request\n"));
000074  bf00              NOP      
000076  bf00              NOP      
                  |L23.120|
;;;1049     }
;;;1050     dhcp->tries++;
000078  7860              LDRB     r0,[r4,#1]
00007a  1c40              ADDS     r0,r0,#1
00007c  7060              STRB     r0,[r4,#1]
;;;1051     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
00007e  7860              LDRB     r0,[r4,#1]
000080  280a              CMP      r0,#0xa
000082  da04              BGE      |L23.142|
000084  7860              LDRB     r0,[r4,#1]
000086  f44f717a          MOV      r1,#0x3e8
00008a  4348              MULS     r0,r1,r0
00008c  e001              B        |L23.146|
                  |L23.142|
00008e  f2427010          MOV      r0,#0x2710
                  |L23.146|
000092  b287              UXTH     r7,r0
;;;1052     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000094  f20710f3          ADD      r0,r7,#0x1f3
000098  f44f71fa          MOV      r1,#0x1f4
00009c  fb90f0f1          SDIV     r0,r0,r1
0000a0  84e0              STRH     r0,[r4,#0x26]
;;;1053     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
0000a2  bf00              NOP      
0000a4  bf00              NOP      
;;;1054     return result;
0000a6  4630              MOV      r0,r6
;;;1055   }
0000a8  bdf8              POP      {r3-r7,pc}
;;;1056   
                          ENDP

0000aa  0000              DCW      0x0000
                  |L23.172|
                          DCD      ip_addr_any
                  |L23.176|
                          DCD      ip_addr_broadcast

                          AREA ||i.dhcp_recv||, CODE, READONLY, ALIGN=1

                  dhcp_recv PROC
;;;1280    */
;;;1281   static void dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, struct ip_addr *addr, u16_t port)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;1282   {
000004  4682              MOV      r10,r0
000006  4617              MOV      r7,r2
;;;1283     struct netif *netif = (struct netif *)arg;
000008  46d0              MOV      r8,r10
;;;1284     struct dhcp *dhcp = netif->dhcp;
00000a  f8d84020          LDR      r4,[r8,#0x20]
;;;1285     struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
00000e  f8d7b004          LDR      r11,[r7,#4]
;;;1286     u8_t *options_ptr;
;;;1287     u8_t msg_type;
;;;1288     u8_t i;
;;;1289     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void*)p,
000012  bf00              NOP      
000014  bf00              NOP      
;;;1290       (u16_t)(ntohl(addr->addr) >> 24 & 0xff), (u16_t)(ntohl(addr->addr) >> 16 & 0xff),
;;;1291       (u16_t)(ntohl(addr->addr) >>  8 & 0xff), (u16_t)(ntohl(addr->addr) & 0xff), port));
;;;1292     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
000016  bf00              NOP      
000018  bf00              NOP      
;;;1293     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
00001a  bf00              NOP      
00001c  bf00              NOP      
;;;1294     /* prevent warnings about unused arguments */
;;;1295     LWIP_UNUSED_ARG(pcb);
;;;1296     LWIP_UNUSED_ARG(addr);
;;;1297     LWIP_UNUSED_ARG(port);
;;;1298     dhcp->p = p;
00001e  60e7              STR      r7,[r4,#0xc]
;;;1299     /* TODO: check packet length before reading them */
;;;1300     if (reply_msg->op != DHCP_BOOTREPLY) {
000020  f89b0000          LDRB     r0,[r11,#0]
000024  2802              CMP      r0,#2
000026  d002              BEQ      |L24.46|
;;;1301       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
000028  bf00              NOP      
00002a  bf00              NOP      
;;;1302       goto free_pbuf_and_return;
00002c  e077              B        |L24.286|
                  |L24.46|
;;;1303     }
;;;1304     /* iterate through hardware address and match against DHCP message */
;;;1305     for (i = 0; i < netif->hwaddr_len; i++) {
00002e  2600              MOVS     r6,#0
000030  e00c              B        |L24.76|
                  |L24.50|
;;;1306       if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
000032  f1080029          ADD      r0,r8,#0x29
000036  5d81              LDRB     r1,[r0,r6]
000038  f10b001c          ADD      r0,r11,#0x1c
00003c  5d80              LDRB     r0,[r0,r6]
00003e  4281              CMP      r1,r0
000040  d002              BEQ      |L24.72|
;;;1307         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
000042  bf00              NOP      
000044  bf00              NOP      
;;;1308           (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
;;;1309         goto free_pbuf_and_return;
000046  e06a              B        |L24.286|
                  |L24.72|
000048  1c70              ADDS     r0,r6,#1              ;1305
00004a  b2c6              UXTB     r6,r0                 ;1305
                  |L24.76|
00004c  f8980028          LDRB     r0,[r8,#0x28]         ;1305
000050  42b0              CMP      r0,r6                 ;1305
000052  dcee              BGT      |L24.50|
;;;1310       }
;;;1311     }
;;;1312     /* match transaction ID against what we expected */
;;;1313     if (ntohl(reply_msg->xid) != dhcp->xid) {
000054  f8db0004          LDR      r0,[r11,#4]
000058  f7fffffe          BL       ntohl
00005c  6861              LDR      r1,[r4,#4]
00005e  4288              CMP      r0,r1
000060  d002              BEQ      |L24.104|
;;;1314       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",ntohl(reply_msg->xid),dhcp->xid));
000062  bf00              NOP      
000064  bf00              NOP      
;;;1315       goto free_pbuf_and_return;
000066  e05a              B        |L24.286|
                  |L24.104|
;;;1316     }
;;;1317     /* option fields could be unfold? */
;;;1318     if (dhcp_unfold_reply(dhcp) != ERR_OK) {
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       dhcp_unfold_reply
00006e  b110              CBZ      r0,|L24.118|
;;;1319       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("problem unfolding DHCP message - too short on memory?\n"));
000070  bf00              NOP      
000072  bf00              NOP      
;;;1320       goto free_pbuf_and_return;
000074  e053              B        |L24.286|
                  |L24.118|
;;;1321     }
;;;1322   
;;;1323     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
000076  bf00              NOP      
000078  bf00              NOP      
;;;1324     /* obtain pointer to DHCP message type */
;;;1325     options_ptr = dhcp_get_option_ptr(dhcp, DHCP_OPTION_MESSAGE_TYPE);
00007a  2135              MOVS     r1,#0x35
00007c  4620              MOV      r0,r4
00007e  f7fffffe          BL       dhcp_get_option_ptr
000082  4681              MOV      r9,r0
;;;1326     if (options_ptr == NULL) {
000084  f1b90f00          CMP      r9,#0
000088  d102              BNE      |L24.144|
;;;1327       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
00008a  bf00              NOP      
00008c  bf00              NOP      
;;;1328       goto free_pbuf_and_return;
00008e  e046              B        |L24.286|
                  |L24.144|
;;;1329     }
;;;1330   
;;;1331     /* read DHCP message type */
;;;1332     msg_type = dhcp_get_option_byte(options_ptr + 2);
000090  f1090002          ADD      r0,r9,#2
000094  f7fffffe          BL       dhcp_get_option_byte
000098  4605              MOV      r5,r0
;;;1333     /* message type is DHCP ACK? */
;;;1334     if (msg_type == DHCP_ACK) {
00009a  2d05              CMP      r5,#5
00009c  d11c              BNE      |L24.216|
;;;1335       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_ACK received\n"));
00009e  bf00              NOP      
0000a0  bf00              NOP      
;;;1336       /* in requesting state? */
;;;1337       if (dhcp->state == DHCP_REQUESTING) {
0000a2  7820              LDRB     r0,[r4,#0]
0000a4  2801              CMP      r0,#1
0000a6  d108              BNE      |L24.186|
;;;1338         dhcp_handle_ack(netif);
0000a8  4640              MOV      r0,r8
0000aa  f7fffffe          BL       dhcp_handle_ack
;;;1339         dhcp->request_timeout = 0;
0000ae  2000              MOVS     r0,#0
0000b0  84e0              STRH     r0,[r4,#0x26]
;;;1340   #if DHCP_DOES_ARP_CHECK
;;;1341         /* check if the acknowledged lease address is already in use */
;;;1342         dhcp_check(netif);
0000b2  4640              MOV      r0,r8
0000b4  f7fffffe          BL       dhcp_check
0000b8  e030              B        |L24.284|
                  |L24.186|
;;;1343   #else
;;;1344         /* bind interface to the acknowledged lease address */
;;;1345         dhcp_bind(netif);
;;;1346   #endif
;;;1347       }
;;;1348       /* already bound to the given lease address? */
;;;1349       else if ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING)) {
0000ba  7820              LDRB     r0,[r4,#0]
0000bc  2803              CMP      r0,#3
0000be  d005              BEQ      |L24.204|
0000c0  7820              LDRB     r0,[r4,#0]
0000c2  2804              CMP      r0,#4
0000c4  d002              BEQ      |L24.204|
0000c6  7820              LDRB     r0,[r4,#0]
0000c8  2805              CMP      r0,#5
0000ca  d127              BNE      |L24.284|
                  |L24.204|
;;;1350         dhcp->request_timeout = 0;
0000cc  2000              MOVS     r0,#0
0000ce  84e0              STRH     r0,[r4,#0x26]
;;;1351         dhcp_bind(netif);
0000d0  4640              MOV      r0,r8
0000d2  f7fffffe          BL       dhcp_bind
0000d6  e021              B        |L24.284|
                  |L24.216|
;;;1352       }
;;;1353     }
;;;1354     /* received a DHCP_NAK in appropriate state? */
;;;1355     else if ((msg_type == DHCP_NAK) &&
0000d8  2d06              CMP      r5,#6
0000da  d113              BNE      |L24.260|
;;;1356       ((dhcp->state == DHCP_REBOOTING) || (dhcp->state == DHCP_REQUESTING) ||
0000dc  7820              LDRB     r0,[r4,#0]
0000de  2803              CMP      r0,#3
0000e0  d008              BEQ      |L24.244|
0000e2  7820              LDRB     r0,[r4,#0]
0000e4  2801              CMP      r0,#1
0000e6  d005              BEQ      |L24.244|
;;;1357        (dhcp->state == DHCP_REBINDING) || (dhcp->state == DHCP_RENEWING  ))) {
0000e8  7820              LDRB     r0,[r4,#0]
0000ea  2804              CMP      r0,#4
0000ec  d002              BEQ      |L24.244|
0000ee  7820              LDRB     r0,[r4,#0]
0000f0  2805              CMP      r0,#5
0000f2  d107              BNE      |L24.260|
                  |L24.244|
;;;1358       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_NAK received\n"));
0000f4  bf00              NOP      
0000f6  bf00              NOP      
;;;1359       dhcp->request_timeout = 0;
0000f8  2000              MOVS     r0,#0
0000fa  84e0              STRH     r0,[r4,#0x26]
;;;1360       dhcp_handle_nak(netif);
0000fc  4640              MOV      r0,r8
0000fe  f7fffffe          BL       dhcp_handle_nak
000102  e00b              B        |L24.284|
                  |L24.260|
;;;1361     }
;;;1362     /* received a DHCP_OFFER in DHCP_SELECTING state? */
;;;1363     else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_SELECTING)) {
000104  2d02              CMP      r5,#2
000106  d109              BNE      |L24.284|
000108  7820              LDRB     r0,[r4,#0]
00010a  2806              CMP      r0,#6
00010c  d106              BNE      |L24.284|
;;;1364       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 1, ("DHCP_OFFER received in DHCP_SELECTING state\n"));
00010e  bf00              NOP      
000110  bf00              NOP      
;;;1365       dhcp->request_timeout = 0;
000112  2000              MOVS     r0,#0
000114  84e0              STRH     r0,[r4,#0x26]
;;;1366       /* remember offered lease */
;;;1367       dhcp_handle_offer(netif);
000116  4640              MOV      r0,r8
000118  f7fffffe          BL       dhcp_handle_offer
                  |L24.284|
;;;1368     }
;;;1369   free_pbuf_and_return:
00011c  bf00              NOP      
                  |L24.286|
;;;1370     dhcp_free_reply(dhcp);
00011e  4620              MOV      r0,r4
000120  f7fffffe          BL       dhcp_free_reply
;;;1371     pbuf_free(p);
000124  4638              MOV      r0,r7
000126  f7fffffe          BL       pbuf_free
;;;1372     dhcp->p = NULL;
00012a  2000              MOVS     r0,#0
00012c  60e0              STR      r0,[r4,#0xc]
;;;1373   }
00012e  e8bd9ff0          POP      {r4-r12,pc}
;;;1374   
                          ENDP


                          AREA ||i.dhcp_release||, CODE, READONLY, ALIGN=2

                  dhcp_release PROC
;;;1062   err_t
;;;1063   dhcp_release(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1064   {
000002  4605              MOV      r5,r0
;;;1065     struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;1066     err_t result;
;;;1067     u16_t msecs;
;;;1068     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_release()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;1069   
;;;1070     /* idle DHCP client */
;;;1071     dhcp_set_state(dhcp, DHCP_OFF);
00000a  210d              MOVS     r1,#0xd
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       dhcp_set_state
;;;1072     /* clean old DHCP offer */
;;;1073     dhcp->server_ip_addr.addr = 0;
000012  2000              MOVS     r0,#0
000014  62e0              STR      r0,[r4,#0x2c]
;;;1074     dhcp->offered_ip_addr.addr = dhcp->offered_sn_mask.addr = 0;
000016  6360              STR      r0,[r4,#0x34]
000018  6320              STR      r0,[r4,#0x30]
;;;1075     dhcp->offered_gw_addr.addr = dhcp->offered_bc_addr.addr = 0;
00001a  63e0              STR      r0,[r4,#0x3c]
00001c  63a0              STR      r0,[r4,#0x38]
;;;1076     dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
00001e  6560              STR      r0,[r4,#0x54]
000020  6520              STR      r0,[r4,#0x50]
000022  64e0              STR      r0,[r4,#0x4c]
;;;1077     dhcp->dns_count = 0;
000024  6420              STR      r0,[r4,#0x40]
;;;1078     
;;;1079     /* create and initialize the DHCP message header */
;;;1080     result = dhcp_create_request(netif);
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       dhcp_create_request
00002c  4606              MOV      r6,r0
;;;1081     if (result == ERR_OK) {
00002e  bb26              CBNZ     r6,|L25.122|
;;;1082       dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
000030  2201              MOVS     r2,#1
000032  2135              MOVS     r1,#0x35
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       dhcp_option
;;;1083       dhcp_option_byte(dhcp, DHCP_RELEASE);
00003a  2107              MOVS     r1,#7
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       dhcp_option_byte
;;;1084   
;;;1085       dhcp_option_trailer(dhcp);
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       dhcp_option_trailer
;;;1086   
;;;1087       pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000048  8ca2              LDRH     r2,[r4,#0x24]
00004a  32f0              ADDS     r2,r2,#0xf0
00004c  b291              UXTH     r1,r2
00004e  69e0              LDR      r0,[r4,#0x1c]
000050  f7fffffe          BL       pbuf_realloc
;;;1088   
;;;1089       udp_connect(dhcp->pcb, &dhcp->server_ip_addr, DHCP_SERVER_PORT);
000054  2243              MOVS     r2,#0x43
000056  f104012c          ADD      r1,r4,#0x2c
00005a  68a0              LDR      r0,[r4,#8]
00005c  f7fffffe          BL       udp_connect
;;;1090       udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
000060  9500              STR      r5,[sp,#0]
000062  2343              MOVS     r3,#0x43
000064  f104022c          ADD      r2,r4,#0x2c
000068  69e1              LDR      r1,[r4,#0x1c]
00006a  68a0              LDR      r0,[r4,#8]
00006c  f7fffffe          BL       udp_sendto_if
;;;1091       dhcp_delete_request(netif);
000070  4628              MOV      r0,r5
000072  f7fffffe          BL       dhcp_delete_request
;;;1092       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_OFF\n"));
000076  bf00              NOP      
000078  e001              B        |L25.126|
                  |L25.122|
;;;1093     } else {
;;;1094       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_release: could not allocate DHCP request\n"));
00007a  bf00              NOP      
00007c  bf00              NOP      
                  |L25.126|
;;;1095     }
;;;1096     dhcp->tries++;
00007e  7860              LDRB     r0,[r4,#1]
000080  1c40              ADDS     r0,r0,#1
000082  7060              STRB     r0,[r4,#1]
;;;1097     msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
000084  7860              LDRB     r0,[r4,#1]
000086  280a              CMP      r0,#0xa
000088  da04              BGE      |L25.148|
00008a  7860              LDRB     r0,[r4,#1]
00008c  f44f717a          MOV      r1,#0x3e8
000090  4348              MULS     r0,r1,r0
000092  e001              B        |L25.152|
                  |L25.148|
000094  f2427010          MOV      r0,#0x2710
                  |L25.152|
000098  b287              UXTH     r7,r0
;;;1098     dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
00009a  f20710f3          ADD      r0,r7,#0x1f3
00009e  f44f71fa          MOV      r1,#0x1f4
0000a2  fb90f0f1          SDIV     r0,r0,r1
0000a6  84e0              STRH     r0,[r4,#0x26]
;;;1099     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release(): set request timeout %"U16_F" msecs\n", msecs));
0000a8  bf00              NOP      
0000aa  bf00              NOP      
;;;1100     /* bring the interface down */
;;;1101     netif_set_down(netif);
0000ac  4628              MOV      r0,r5
0000ae  f7fffffe          BL       netif_set_down
;;;1102     /* remove IP address from interface */
;;;1103     netif_set_ipaddr(netif, IP_ADDR_ANY);
0000b2  4907              LDR      r1,|L25.208|
0000b4  4628              MOV      r0,r5
0000b6  f7fffffe          BL       netif_set_ipaddr
;;;1104     netif_set_gw(netif, IP_ADDR_ANY);
0000ba  4905              LDR      r1,|L25.208|
0000bc  4628              MOV      r0,r5
0000be  f7fffffe          BL       netif_set_gw
;;;1105     netif_set_netmask(netif, IP_ADDR_ANY);
0000c2  4903              LDR      r1,|L25.208|
0000c4  4628              MOV      r0,r5
0000c6  f7fffffe          BL       netif_set_netmask
;;;1106     
;;;1107     /* TODO: netif_down(netif); */
;;;1108     return result;
0000ca  4630              MOV      r0,r6
;;;1109   }
0000cc  bdf8              POP      {r3-r7,pc}
;;;1110   
                          ENDP

0000ce  0000              DCW      0x0000
                  |L25.208|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_renew||, CODE, READONLY, ALIGN=1

                  dhcp_renew PROC
;;;931    err_t
;;;932    dhcp_renew(struct netif *netif)
000000  b5f8              PUSH     {r3-r7,lr}
;;;933    {
000002  4605              MOV      r5,r0
;;;934      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;935      err_t result;
;;;936      u16_t msecs;
;;;937    #if LWIP_NETIF_HOSTNAME
;;;938      const char *p;
;;;939    #endif /* LWIP_NETIF_HOSTNAME */
;;;940      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_renew()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;941      dhcp_set_state(dhcp, DHCP_RENEWING);
00000a  2105              MOVS     r1,#5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       dhcp_set_state
;;;942    
;;;943      /* create and initialize the DHCP message header */
;;;944      result = dhcp_create_request(netif);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       dhcp_create_request
000018  4606              MOV      r6,r0
;;;945      if (result == ERR_OK) {
00001a  bb6e              CBNZ     r6,|L26.120|
;;;946    
;;;947        dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
00001c  2201              MOVS     r2,#1
00001e  2135              MOVS     r1,#0x35
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       dhcp_option
;;;948        dhcp_option_byte(dhcp, DHCP_REQUEST);
000026  2103              MOVS     r1,#3
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       dhcp_option_byte
;;;949    
;;;950        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
00002e  2202              MOVS     r2,#2
000030  2139              MOVS     r1,#0x39
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       dhcp_option
;;;951        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
000038  8e29              LDRH     r1,[r5,#0x30]
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       dhcp_option_short
;;;952    
;;;953    #if LWIP_NETIF_HOSTNAME
;;;954        p = (const char*)netif->hostname;
;;;955        if (p != NULL) {
;;;956          dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, strlen(p));
;;;957          while (*p) {
;;;958            dhcp_option_byte(dhcp, *p++);
;;;959          }
;;;960        }
;;;961    #endif /* LWIP_NETIF_HOSTNAME */
;;;962    
;;;963    #if 0
;;;964        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
;;;965        dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
;;;966    #endif
;;;967    
;;;968    #if 0
;;;969        dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
;;;970        dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
;;;971    #endif
;;;972        /* append DHCP message trailer */
;;;973        dhcp_option_trailer(dhcp);
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       dhcp_option_trailer
;;;974    
;;;975        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
000046  8ca2              LDRH     r2,[r4,#0x24]
000048  32f0              ADDS     r2,r2,#0xf0
00004a  b291              UXTH     r1,r2
00004c  69e0              LDR      r0,[r4,#0x1c]
00004e  f7fffffe          BL       pbuf_realloc
;;;976    
;;;977        udp_connect(dhcp->pcb, &dhcp->server_ip_addr, DHCP_SERVER_PORT);
000052  2243              MOVS     r2,#0x43
000054  f104012c          ADD      r1,r4,#0x2c
000058  68a0              LDR      r0,[r4,#8]
00005a  f7fffffe          BL       udp_connect
;;;978        udp_sendto_if(dhcp->pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
00005e  9500              STR      r5,[sp,#0]
000060  2343              MOVS     r3,#0x43
000062  f104022c          ADD      r2,r4,#0x2c
000066  69e1              LDR      r1,[r4,#0x1c]
000068  68a0              LDR      r0,[r4,#8]
00006a  f7fffffe          BL       udp_sendto_if
;;;979        dhcp_delete_request(netif);
00006e  4628              MOV      r0,r5
000070  f7fffffe          BL       dhcp_delete_request
;;;980    
;;;981        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
000074  bf00              NOP      
000076  e001              B        |L26.124|
                  |L26.120|
;;;982      } else {
;;;983        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_renew: could not allocate DHCP request\n"));
000078  bf00              NOP      
00007a  bf00              NOP      
                  |L26.124|
;;;984      }
;;;985      dhcp->tries++;
00007c  7860              LDRB     r0,[r4,#1]
00007e  1c40              ADDS     r0,r0,#1
000080  7060              STRB     r0,[r4,#1]
;;;986      /* back-off on retries, but to a maximum of 20 seconds */
;;;987      msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
000082  7860              LDRB     r0,[r4,#1]
000084  280a              CMP      r0,#0xa
000086  da04              BGE      |L26.146|
000088  7860              LDRB     r0,[r4,#1]
00008a  f44f61fa          MOV      r1,#0x7d0
00008e  4348              MULS     r0,r1,r0
000090  e001              B        |L26.150|
                  |L26.146|
000092  f6446020          MOV      r0,#0x4e20
                  |L26.150|
000096  b287              UXTH     r7,r0
;;;988      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
000098  f20710f3          ADD      r0,r7,#0x1f3
00009c  f44f71fa          MOV      r1,#0x1f4
0000a0  fb90f0f1          SDIV     r0,r0,r1
0000a4  84e0              STRH     r0,[r4,#0x26]
;;;989      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
0000a6  bf00              NOP      
0000a8  bf00              NOP      
;;;990      return result;
0000aa  4630              MOV      r0,r6
;;;991    }
0000ac  bdf8              POP      {r3-r7,pc}
;;;992    
                          ENDP


                          AREA ||i.dhcp_select||, CODE, READONLY, ALIGN=2

                  dhcp_select PROC
;;;240    static err_t
;;;241    dhcp_select(struct netif *netif)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;242    {
000004  4605              MOV      r5,r0
;;;243      struct dhcp *dhcp = netif->dhcp;
000006  6a2c              LDR      r4,[r5,#0x20]
;;;244      err_t result;
;;;245      u16_t msecs;
;;;246    #if LWIP_NETIF_HOSTNAME
;;;247      const char *p;
;;;248    #endif /* LWIP_NETIF_HOSTNAME */
;;;249    
;;;250      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
000008  bf00              NOP      
00000a  bf00              NOP      
;;;251      dhcp_set_state(dhcp, DHCP_REQUESTING);
00000c  2101              MOVS     r1,#1
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       dhcp_set_state
;;;252    
;;;253      /* create and initialize the DHCP message header */
;;;254      result = dhcp_create_request(netif);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       dhcp_create_request
00001a  4606              MOV      r6,r0
;;;255      if (result == ERR_OK) {
00001c  bbf6              CBNZ     r6,|L27.156|
;;;256        dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
00001e  2201              MOVS     r2,#1
000020  2135              MOVS     r1,#0x35
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       dhcp_option
;;;257        dhcp_option_byte(dhcp, DHCP_REQUEST);
000028  2103              MOVS     r1,#3
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       dhcp_option_byte
;;;258    
;;;259        dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
000030  2202              MOVS     r2,#2
000032  2139              MOVS     r1,#0x39
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       dhcp_option
;;;260        dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
00003a  8e29              LDRH     r1,[r5,#0x30]
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       dhcp_option_short
;;;261    
;;;262        /* MUST request the offered IP address */
;;;263        dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
000042  2204              MOVS     r2,#4
000044  2132              MOVS     r1,#0x32
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       dhcp_option
;;;264        dhcp_option_long(dhcp, ntohl(dhcp->offered_ip_addr.addr));
00004c  6b20              LDR      r0,[r4,#0x30]
00004e  f7fffffe          BL       ntohl
000052  4680              MOV      r8,r0
000054  4601              MOV      r1,r0
000056  4620              MOV      r0,r4
000058  f7fffffe          BL       dhcp_option_long
;;;265    
;;;266        dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
00005c  2204              MOVS     r2,#4
00005e  2136              MOVS     r1,#0x36
000060  4620              MOV      r0,r4
000062  f7fffffe          BL       dhcp_option
;;;267        dhcp_option_long(dhcp, ntohl(dhcp->server_ip_addr.addr));
000066  6ae0              LDR      r0,[r4,#0x2c]
000068  f7fffffe          BL       ntohl
00006c  4680              MOV      r8,r0
00006e  4601              MOV      r1,r0
000070  4620              MOV      r0,r4
000072  f7fffffe          BL       dhcp_option_long
;;;268    
;;;269        dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, 4/*num options*/);
000076  2204              MOVS     r2,#4
000078  2137              MOVS     r1,#0x37
00007a  4620              MOV      r0,r4
00007c  f7fffffe          BL       dhcp_option
;;;270        dhcp_option_byte(dhcp, DHCP_OPTION_SUBNET_MASK);
000080  2101              MOVS     r1,#1
000082  4620              MOV      r0,r4
000084  f7fffffe          BL       dhcp_option_byte
;;;271        dhcp_option_byte(dhcp, DHCP_OPTION_ROUTER);
000088  2103              MOVS     r1,#3
00008a  4620              MOV      r0,r4
00008c  f7fffffe          BL       dhcp_option_byte
;;;272        dhcp_option_byte(dhcp, DHCP_OPTION_BROADCAST);
000090  211c              MOVS     r1,#0x1c
000092  4620              MOV      r0,r4
000094  f7fffffe          BL       dhcp_option_byte
;;;273        dhcp_option_byte(dhcp, DHCP_OPTION_DNS_SERVER);
000098  2106              MOVS     r1,#6
00009a  e000              B        |L27.158|
                  |L27.156|
00009c  e01c              B        |L27.216|
                  |L27.158|
00009e  4620              MOV      r0,r4
0000a0  f7fffffe          BL       dhcp_option_byte
;;;274    
;;;275    #if LWIP_NETIF_HOSTNAME
;;;276        p = (const char*)netif->hostname;
;;;277        if (p != NULL) {
;;;278          dhcp_option(dhcp, DHCP_OPTION_HOSTNAME, strlen(p));
;;;279          while (*p) {
;;;280            dhcp_option_byte(dhcp, *p++);
;;;281          }
;;;282        }
;;;283    #endif /* LWIP_NETIF_HOSTNAME */
;;;284    
;;;285        dhcp_option_trailer(dhcp);
0000a4  4620              MOV      r0,r4
0000a6  f7fffffe          BL       dhcp_option_trailer
;;;286        /* shrink the pbuf to the actual content length */
;;;287        pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
0000aa  8ca2              LDRH     r2,[r4,#0x24]
0000ac  32f0              ADDS     r2,r2,#0xf0
0000ae  b291              UXTH     r1,r2
0000b0  69e0              LDR      r0,[r4,#0x1c]
0000b2  f7fffffe          BL       pbuf_realloc
;;;288    
;;;289        /* TODO: we really should bind to a specific local interface here
;;;290           but we cannot specify an unconfigured netif as it is addressless */
;;;291        /* send broadcast to any DHCP server */
;;;292        udp_sendto_if(dhcp->pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
0000b6  9500              STR      r5,[sp,#0]
0000b8  2343              MOVS     r3,#0x43
0000ba  4a15              LDR      r2,|L27.272|
0000bc  69e1              LDR      r1,[r4,#0x1c]
0000be  68a0              LDR      r0,[r4,#8]
0000c0  f7fffffe          BL       udp_sendto_if
;;;293        /* reconnect to any (or to server here?!) */
;;;294        udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
0000c4  2243              MOVS     r2,#0x43
0000c6  4913              LDR      r1,|L27.276|
0000c8  68a0              LDR      r0,[r4,#8]
0000ca  f7fffffe          BL       udp_connect
;;;295        dhcp_delete_request(netif);
0000ce  4628              MOV      r0,r5
0000d0  f7fffffe          BL       dhcp_delete_request
;;;296        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
0000d4  bf00              NOP      
0000d6  e001              B        |L27.220|
                  |L27.216|
;;;297      } else {
;;;298        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_select: could not allocate DHCP request\n"));
0000d8  bf00              NOP      
0000da  bf00              NOP      
                  |L27.220|
;;;299      }
;;;300      dhcp->tries++;
0000dc  7860              LDRB     r0,[r4,#1]
0000de  1c40              ADDS     r0,r0,#1
0000e0  7060              STRB     r0,[r4,#1]
;;;301      msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
0000e2  7860              LDRB     r0,[r4,#1]
0000e4  2806              CMP      r0,#6
0000e6  da03              BGE      |L27.240|
0000e8  7861              LDRB     r1,[r4,#1]
0000ea  2001              MOVS     r0,#1
0000ec  4088              LSLS     r0,r0,r1
0000ee  e000              B        |L27.242|
                  |L27.240|
0000f0  203c              MOVS     r0,#0x3c
                  |L27.242|
0000f2  f44f717a          MOV      r1,#0x3e8
0000f6  4348              MULS     r0,r1,r0
0000f8  b287              UXTH     r7,r0
;;;302      dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
0000fa  f20710f3          ADD      r0,r7,#0x1f3
0000fe  1049              ASRS     r1,r1,#1
000100  fb90f0f1          SDIV     r0,r0,r1
000104  84e0              STRH     r0,[r4,#0x26]
;;;303      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
000106  bf00              NOP      
000108  bf00              NOP      
;;;304      return result;
00010a  4630              MOV      r0,r6
;;;305    }
00010c  e8bd83f8          POP      {r3-r9,pc}
;;;306    
                          ENDP

                  |L27.272|
                          DCD      ip_addr_broadcast
                  |L27.276|
                          DCD      ip_addr_any

                          AREA ||i.dhcp_set_state||, CODE, READONLY, ALIGN=1

                  dhcp_set_state PROC
;;;1156   static void
;;;1157   dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
000000  7802              LDRB     r2,[r0,#0]
;;;1158   {
;;;1159     if (new_state != dhcp->state) {
000002  428a              CMP      r2,r1
000004  d002              BEQ      |L28.12|
;;;1160       dhcp->state = new_state;
000006  7001              STRB     r1,[r0,#0]
;;;1161       dhcp->tries = 0;
000008  2200              MOVS     r2,#0
00000a  7042              STRB     r2,[r0,#1]
                  |L28.12|
;;;1162     }
;;;1163   }
00000c  4770              BX       lr
;;;1164   
                          ENDP


                          AREA ||i.dhcp_start||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_start PROC
;;;571    err_t
;;;572    dhcp_start(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;573    {
000002  4605              MOV      r5,r0
;;;574      struct dhcp *dhcp;
;;;575      err_t result = ERR_OK;
000004  2600              MOVS     r6,#0
;;;576    
;;;577      LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
000006  bf00              NOP      
000008  b95d              CBNZ     r5,|L29.34|
00000a  bf00              NOP      
00000c  a338              ADR      r3,|L29.240|
00000e  f2402241          MOV      r2,#0x241
000012  a13d              ADR      r1,|L29.264|
000014  a040              ADR      r0,|L29.280|
000016  f7fffffe          BL       __2printf
00001a  bf00              NOP      
00001c  f06f0009          MVN      r0,#9
                  |L29.32|
;;;578      dhcp = netif->dhcp;
;;;579      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
;;;580      /* Remove the flag that says this netif is handled by DHCP,
;;;581         it is set when we succeeded starting. */
;;;582      netif->flags &= ~NETIF_FLAG_DHCP;
;;;583    
;;;584      /* check MTU of the netif */
;;;585      if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
;;;586        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
;;;587        return ERR_MEM;
;;;588      }
;;;589    
;;;590      /* no DHCP client attached yet? */
;;;591      if (dhcp == NULL) {
;;;592        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting new DHCP client\n"));
;;;593        dhcp = mem_malloc(sizeof(struct dhcp));
;;;594        if (dhcp == NULL) {
;;;595          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
;;;596          return ERR_MEM;
;;;597        }
;;;598        /* store this dhcp client in the netif */
;;;599        netif->dhcp = dhcp;
;;;600        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
;;;601      /* already has DHCP client attached */
;;;602      } else {
;;;603        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | 3, ("dhcp_start(): restarting DHCP configuration\n"));
;;;604        if (dhcp->pcb != NULL) {
;;;605          udp_remove(dhcp->pcb);
;;;606        }
;;;607        if (dhcp->p != NULL) {
;;;608          pbuf_free(dhcp->p);
;;;609        }
;;;610      }
;;;611        
;;;612      /* clear data structure */
;;;613      memset(dhcp, 0, sizeof(struct dhcp));
;;;614      /* allocate UDP PCB */
;;;615      dhcp->pcb = udp_new();
;;;616      if (dhcp->pcb == NULL) {
;;;617        LWIP_DEBUGF(DHCP_DEBUG  | LWIP_DBG_TRACE, ("dhcp_start(): could not obtain pcb\n"));
;;;618        mem_free((void *)dhcp);
;;;619        netif->dhcp = dhcp = NULL;
;;;620        return ERR_MEM;
;;;621      }
;;;622    #if IP_SOF_BROADCAST
;;;623      dhcp->pcb->so_options|=SOF_BROADCAST;
;;;624    #endif /* IP_SOF_BROADCAST */
;;;625      /* set up local and remote port for the pcb */
;;;626      udp_bind(dhcp->pcb, IP_ADDR_ANY, DHCP_CLIENT_PORT);
;;;627      udp_connect(dhcp->pcb, IP_ADDR_ANY, DHCP_SERVER_PORT);
;;;628      /* set up the recv callback and argument */
;;;629      udp_recv(dhcp->pcb, dhcp_recv, netif);
;;;630      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
;;;631      /* (re)start the DHCP negotiation */
;;;632      result = dhcp_discover(netif);
;;;633      if (result != ERR_OK) {
;;;634        /* free resources allocated above */
;;;635        dhcp_stop(netif);
;;;636        return ERR_MEM;
;;;637      }
;;;638      /* Set the flag that says this netif is handled by DHCP. */
;;;639      netif->flags |= NETIF_FLAG_DHCP;
;;;640      return result;
;;;641    }
000020  bd70              POP      {r4-r6,pc}
                  |L29.34|
000022  bf00              NOP                            ;577
000024  6a2c              LDR      r4,[r5,#0x20]         ;578
000026  bf00              NOP                            ;579
000028  bf00              NOP                            ;579
00002a  f8950032          LDRB     r0,[r5,#0x32]         ;582
00002e  f0200008          BIC      r0,r0,#8              ;582
000032  f8850032          STRB     r0,[r5,#0x32]         ;582
000036  8e28              LDRH     r0,[r5,#0x30]         ;585
000038  f5b07f10          CMP      r0,#0x240             ;585
00003c  da04              BGE      |L29.72|
00003e  bf00              NOP                            ;586
000040  bf00              NOP                            ;586
000042  f04f30ff          MOV      r0,#0xffffffff        ;587
000046  e7eb              B        |L29.32|
                  |L29.72|
000048  b974              CBNZ     r4,|L29.104|
00004a  bf00              NOP                            ;592
00004c  bf00              NOP                            ;592
00004e  2058              MOVS     r0,#0x58              ;593
000050  f7fffffe          BL       mem_malloc
000054  4604              MOV      r4,r0                 ;593
000056  b924              CBNZ     r4,|L29.98|
000058  bf00              NOP                            ;595
00005a  bf00              NOP                            ;595
00005c  f04f30ff          MOV      r0,#0xffffffff        ;596
000060  e7de              B        |L29.32|
                  |L29.98|
000062  622c              STR      r4,[r5,#0x20]         ;599
000064  bf00              NOP                            ;600
000066  e00b              B        |L29.128|
                  |L29.104|
000068  bf00              NOP                            ;603
00006a  bf00              NOP                            ;603
00006c  68a0              LDR      r0,[r4,#8]            ;604
00006e  b110              CBZ      r0,|L29.118|
000070  68a0              LDR      r0,[r4,#8]            ;605
000072  f7fffffe          BL       udp_remove
                  |L29.118|
000076  68e0              LDR      r0,[r4,#0xc]          ;607
000078  b110              CBZ      r0,|L29.128|
00007a  68e0              LDR      r0,[r4,#0xc]          ;608
00007c  f7fffffe          BL       pbuf_free
                  |L29.128|
000080  2158              MOVS     r1,#0x58              ;613
000082  4620              MOV      r0,r4                 ;613
000084  f7fffffe          BL       __aeabi_memclr4
000088  f7fffffe          BL       udp_new
00008c  60a0              STR      r0,[r4,#8]            ;615
00008e  68a0              LDR      r0,[r4,#8]            ;616
000090  b948              CBNZ     r0,|L29.166|
000092  bf00              NOP                            ;617
000094  bf00              NOP                            ;617
000096  4620              MOV      r0,r4                 ;618
000098  f7fffffe          BL       mem_free
00009c  2000              MOVS     r0,#0                 ;619
00009e  4604              MOV      r4,r0                 ;619
0000a0  6228              STR      r0,[r5,#0x20]         ;619
0000a2  1e40              SUBS     r0,r0,#1              ;620
0000a4  e7bc              B        |L29.32|
                  |L29.166|
0000a6  2244              MOVS     r2,#0x44              ;626
0000a8  4925              LDR      r1,|L29.320|
0000aa  68a0              LDR      r0,[r4,#8]            ;626
0000ac  f7fffffe          BL       udp_bind
0000b0  2243              MOVS     r2,#0x43              ;627
0000b2  4923              LDR      r1,|L29.320|
0000b4  68a0              LDR      r0,[r4,#8]            ;627
0000b6  f7fffffe          BL       udp_connect
0000ba  462a              MOV      r2,r5                 ;629
0000bc  4921              LDR      r1,|L29.324|
0000be  68a0              LDR      r0,[r4,#8]            ;629
0000c0  f7fffffe          BL       udp_recv
0000c4  bf00              NOP                            ;630
0000c6  bf00              NOP                            ;630
0000c8  4628              MOV      r0,r5                 ;632
0000ca  f7fffffe          BL       dhcp_discover
0000ce  4606              MOV      r6,r0                 ;632
0000d0  b12e              CBZ      r6,|L29.222|
0000d2  4628              MOV      r0,r5                 ;635
0000d4  f7fffffe          BL       dhcp_stop
0000d8  f04f30ff          MOV      r0,#0xffffffff        ;636
0000dc  e7a0              B        |L29.32|
                  |L29.222|
0000de  f8950032          LDRB     r0,[r5,#0x32]         ;639
0000e2  f0400008          ORR      r0,r0,#8              ;639
0000e6  f8850032          STRB     r0,[r5,#0x32]         ;639
0000ea  4630              MOV      r0,r6                 ;640
0000ec  e798              B        |L29.32|
;;;642    
                          ENDP

0000ee  0000              DCW      0x0000
                  |L29.240|
0000f0  2e2e5c6c          DCB      "..\\lwIP\\src\\core\\dhcp.c",0
0000f4  7749505c
0000f8  7372635c
0000fc  636f7265
000100  5c646863
000104  702e6300
                  |L29.264|
000108  6e657469          DCB      "netif != NULL",0
00010c  6620213d
000110  204e554c
000114  4c00    
000116  00                DCB      0
000117  00                DCB      0
                  |L29.280|
000118  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
00011c  7274696f
000120  6e202225
000124  73222066
000128  61696c65
00012c  64206174
000130  206c696e
000134  65202564
000138  20696e20
00013c  25730a00
                  |L29.320|
                          DCD      ip_addr_any
                  |L29.324|
                          DCD      dhcp_recv

                          AREA ||i.dhcp_stop||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  dhcp_stop PROC
;;;1116   void
;;;1117   dhcp_stop(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;1118   {
000002  4605              MOV      r5,r0
;;;1119     struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;1120     LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
000006  bf00              NOP      
000008  b94d              CBNZ     r5,|L30.30|
00000a  bf00              NOP      
00000c  a315              ADR      r3,|L30.100|
00000e  f44f628c          MOV      r2,#0x460
000012  a11a              ADR      r1,|L30.124|
000014  a020              ADR      r0,|L30.152|
000016  f7fffffe          BL       __2printf
00001a  bf00              NOP      
                  |L30.28|
;;;1121     /* Remove the flag that says this netif is handled by DHCP. */
;;;1122     netif->flags &= ~NETIF_FLAG_DHCP;
;;;1123   
;;;1124     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_stop()\n"));
;;;1125     /* netif is DHCP configured? */
;;;1126     if (dhcp != NULL) {
;;;1127   #if LWIP_DHCP_AUTOIP_COOP
;;;1128     if(dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_ON) {
;;;1129       autoip_stop(netif);
;;;1130       dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
;;;1131     }
;;;1132   #endif /* LWIP_DHCP_AUTOIP_COOP */
;;;1133   
;;;1134       if (dhcp->pcb != NULL) {
;;;1135         udp_remove(dhcp->pcb);
;;;1136         dhcp->pcb = NULL;
;;;1137       }
;;;1138       if (dhcp->p != NULL) {
;;;1139         pbuf_free(dhcp->p);
;;;1140         dhcp->p = NULL;
;;;1141       }
;;;1142       /* free unfolded reply */
;;;1143       dhcp_free_reply(dhcp);
;;;1144       mem_free((void *)dhcp);
;;;1145       netif->dhcp = NULL;
;;;1146     }
;;;1147   }
00001c  bd70              POP      {r4-r6,pc}
                  |L30.30|
00001e  bf00              NOP                            ;1120
000020  f8950032          LDRB     r0,[r5,#0x32]         ;1122
000024  f0200008          BIC      r0,r0,#8              ;1122
000028  f8850032          STRB     r0,[r5,#0x32]         ;1122
00002c  bf00              NOP                            ;1124
00002e  bf00              NOP                            ;1124
000030  b1ac              CBZ      r4,|L30.94|
000032  68a0              LDR      r0,[r4,#8]            ;1134
000034  b120              CBZ      r0,|L30.64|
000036  68a0              LDR      r0,[r4,#8]            ;1135
000038  f7fffffe          BL       udp_remove
00003c  2000              MOVS     r0,#0                 ;1136
00003e  60a0              STR      r0,[r4,#8]            ;1136
                  |L30.64|
000040  68e0              LDR      r0,[r4,#0xc]          ;1138
000042  b120              CBZ      r0,|L30.78|
000044  68e0              LDR      r0,[r4,#0xc]          ;1139
000046  f7fffffe          BL       pbuf_free
00004a  2000              MOVS     r0,#0                 ;1140
00004c  60e0              STR      r0,[r4,#0xc]          ;1140
                  |L30.78|
00004e  4620              MOV      r0,r4                 ;1143
000050  f7fffffe          BL       dhcp_free_reply
000054  4620              MOV      r0,r4                 ;1144
000056  f7fffffe          BL       mem_free
00005a  2000              MOVS     r0,#0                 ;1145
00005c  6228              STR      r0,[r5,#0x20]         ;1145
                  |L30.94|
00005e  bf00              NOP      
000060  e7dc              B        |L30.28|
;;;1148   
                          ENDP

000062  0000              DCW      0x0000
                  |L30.100|
000064  2e2e5c6c          DCB      "..\\lwIP\\src\\core\\dhcp.c",0
000068  7749505c
00006c  7372635c
000070  636f7265
000074  5c646863
000078  702e6300
                  |L30.124|
00007c  64686370          DCB      "dhcp_stop: netif != NULL",0
000080  5f73746f
000084  703a206e
000088  65746966
00008c  20213d20
000090  4e554c4c
000094  00      
000095  00                DCB      0
000096  00                DCB      0
000097  00                DCB      0
                  |L30.152|
000098  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
00009c  7274696f
0000a0  6e202225
0000a4  73222066
0000a8  61696c65
0000ac  64206174
0000b0  206c696e
0000b4  65202564
0000b8  20696e20
0000bc  25730a00

                          AREA ||i.dhcp_t1_timeout||, CODE, READONLY, ALIGN=1

                  dhcp_t1_timeout PROC
;;;432    static void
;;;433    dhcp_t1_timeout(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;434    {
000002  4605              MOV      r5,r0
;;;435      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;436      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;437      if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) || (dhcp->state == DHCP_RENEWING)) {
00000a  7820              LDRB     r0,[r4,#0]
00000c  2801              CMP      r0,#1
00000e  d005              BEQ      |L31.28|
000010  7820              LDRB     r0,[r4,#0]
000012  280a              CMP      r0,#0xa
000014  d002              BEQ      |L31.28|
000016  7820              LDRB     r0,[r4,#0]
000018  2805              CMP      r0,#5
00001a  d104              BNE      |L31.38|
                  |L31.28|
;;;438        /* just retry to renew - note that the rebind timer (t2) will
;;;439         * eventually time-out if renew tries fail. */
;;;440        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t1_timeout(): must renew\n"));
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;441        dhcp_renew(netif);
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       dhcp_renew
                  |L31.38|
;;;442      }
;;;443    }
000026  bd70              POP      {r4-r6,pc}
;;;444    
                          ENDP


                          AREA ||i.dhcp_t2_timeout||, CODE, READONLY, ALIGN=1

                  dhcp_t2_timeout PROC
;;;450    static void
;;;451    dhcp_t2_timeout(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;452    {
000002  4605              MOV      r5,r0
;;;453      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;454      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;455      if ((dhcp->state == DHCP_REQUESTING) || (dhcp->state == DHCP_BOUND) || (dhcp->state == DHCP_RENEWING)) {
00000a  7820              LDRB     r0,[r4,#0]
00000c  2801              CMP      r0,#1
00000e  d005              BEQ      |L32.28|
000010  7820              LDRB     r0,[r4,#0]
000012  280a              CMP      r0,#0xa
000014  d002              BEQ      |L32.28|
000016  7820              LDRB     r0,[r4,#0]
000018  2805              CMP      r0,#5
00001a  d104              BNE      |L32.38|
                  |L32.28|
;;;456        /* just retry to rebind */
;;;457        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout(): must rebind\n"));
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;458        dhcp_rebind(netif);
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       dhcp_rebind
                  |L32.38|
;;;459      }
;;;460    }
000026  bd70              POP      {r4-r6,pc}
;;;461    
                          ENDP


                          AREA ||i.dhcp_timeout||, CODE, READONLY, ALIGN=1

                  dhcp_timeout PROC
;;;377    static void
;;;378    dhcp_timeout(struct netif *netif)
000000  b570              PUSH     {r4-r6,lr}
;;;379    {
000002  4605              MOV      r5,r0
;;;380      struct dhcp *dhcp = netif->dhcp;
000004  6a2c              LDR      r4,[r5,#0x20]
;;;381      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 3, ("dhcp_timeout()\n"));
000006  bf00              NOP      
000008  bf00              NOP      
;;;382      /* back-off period has passed, or server selection timed out */
;;;383      if ((dhcp->state == DHCP_BACKING_OFF) || (dhcp->state == DHCP_SELECTING)) {
00000a  7820              LDRB     r0,[r4,#0]
00000c  280c              CMP      r0,#0xc
00000e  d002              BEQ      |L33.22|
000010  7820              LDRB     r0,[r4,#0]
000012  2806              CMP      r0,#6
000014  d105              BNE      |L33.34|
                  |L33.22|
;;;384        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
000016  bf00              NOP      
000018  bf00              NOP      
;;;385        dhcp_discover(netif);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       dhcp_discover
000020  e041              B        |L33.166|
                  |L33.34|
;;;386      /* receiving the requested lease timed out */
;;;387      } else if (dhcp->state == DHCP_REQUESTING) {
000022  7820              LDRB     r0,[r4,#0]
000024  2801              CMP      r0,#1
000026  d111              BNE      |L33.76|
;;;388        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
000028  bf00              NOP      
00002a  bf00              NOP      
;;;389        if (dhcp->tries <= 5) {
00002c  7860              LDRB     r0,[r4,#1]
00002e  2805              CMP      r0,#5
000030  dc03              BGT      |L33.58|
;;;390          dhcp_select(netif);
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       dhcp_select
000038  e035              B        |L33.166|
                  |L33.58|
;;;391        } else {
;;;392          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
00003a  bf00              NOP      
00003c  bf00              NOP      
;;;393          dhcp_release(netif);
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       dhcp_release
;;;394          dhcp_discover(netif);
000044  4628              MOV      r0,r5
000046  f7fffffe          BL       dhcp_discover
00004a  e02c              B        |L33.166|
                  |L33.76|
;;;395        }
;;;396      /* received no ARP reply for the offered address (which is good) */
;;;397      } else if (dhcp->state == DHCP_CHECKING) {
00004c  7820              LDRB     r0,[r4,#0]
00004e  2808              CMP      r0,#8
000050  d10c              BNE      |L33.108|
;;;398        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
000052  bf00              NOP      
000054  bf00              NOP      
;;;399        if (dhcp->tries <= 1) {
000056  7860              LDRB     r0,[r4,#1]
000058  2801              CMP      r0,#1
00005a  dc03              BGT      |L33.100|
;;;400          dhcp_check(netif);
00005c  4628              MOV      r0,r5
00005e  f7fffffe          BL       dhcp_check
000062  e020              B        |L33.166|
                  |L33.100|
;;;401        /* no ARP replies on the offered address,
;;;402           looks like the IP address is indeed free */
;;;403        } else {
;;;404          /* bind the interface to the offered address */
;;;405          dhcp_bind(netif);
000064  4628              MOV      r0,r5
000066  f7fffffe          BL       dhcp_bind
00006a  e01c              B        |L33.166|
                  |L33.108|
;;;406        }
;;;407      }
;;;408      /* did not get response to renew request? */
;;;409      else if (dhcp->state == DHCP_RENEWING) {
00006c  7820              LDRB     r0,[r4,#0]
00006e  2805              CMP      r0,#5
000070  d105              BNE      |L33.126|
;;;410        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RENEWING, DHCP request timed out\n"));
000072  bf00              NOP      
000074  bf00              NOP      
;;;411        /* just retry renewal */
;;;412        /* note that the rebind timer will eventually time-out if renew does not work */
;;;413        dhcp_renew(netif);
000076  4628              MOV      r0,r5
000078  f7fffffe          BL       dhcp_renew
00007c  e013              B        |L33.166|
                  |L33.126|
;;;414      /* did not get response to rebind request? */
;;;415      } else if (dhcp->state == DHCP_REBINDING) {
00007e  7820              LDRB     r0,[r4,#0]
000080  2804              CMP      r0,#4
000082  d110              BNE      |L33.166|
;;;416        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REBINDING, DHCP request timed out\n"));
000084  bf00              NOP      
000086  bf00              NOP      
;;;417        if (dhcp->tries <= 8) {
000088  7860              LDRB     r0,[r4,#1]
00008a  2808              CMP      r0,#8
00008c  dc03              BGT      |L33.150|
;;;418          dhcp_rebind(netif);
00008e  4628              MOV      r0,r5
000090  f7fffffe          BL       dhcp_rebind
000094  e007              B        |L33.166|
                  |L33.150|
;;;419        } else {
;;;420          LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): RELEASING, DISCOVERING\n"));
000096  bf00              NOP      
000098  bf00              NOP      
;;;421          dhcp_release(netif);
00009a  4628              MOV      r0,r5
00009c  f7fffffe          BL       dhcp_release
;;;422          dhcp_discover(netif);
0000a0  4628              MOV      r0,r5
0000a2  f7fffffe          BL       dhcp_discover
                  |L33.166|
;;;423        }
;;;424      }
;;;425    }
0000a6  bd70              POP      {r4-r6,pc}
;;;426    
                          ENDP


                          AREA ||i.dhcp_unfold_reply||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                          REQUIRE _printf_str
                  dhcp_unfold_reply PROC
;;;1216   static err_t
;;;1217   dhcp_unfold_reply(struct dhcp *dhcp)
000000  b570              PUSH     {r4-r6,lr}
;;;1218   {
000002  4604              MOV      r4,r0
;;;1219     u16_t ret;
;;;1220     LWIP_ERROR("dhcp != NULL", (dhcp != NULL), return ERR_ARG;);
000004  bf00              NOP      
000006  b95c              CBNZ     r4,|L34.32|
000008  bf00              NOP      
00000a  a32b              ADR      r3,|L34.184|
00000c  f24042c4          MOV      r2,#0x4c4
000010  a12f              ADR      r1,|L34.208|
000012  a033              ADR      r0,|L34.224|
000014  f7fffffe          BL       __2printf
000018  bf00              NOP      
00001a  f06f0009          MVN      r0,#9
                  |L34.30|
;;;1221     LWIP_ERROR("dhcp->p != NULL", (dhcp->p != NULL), return ERR_VAL;);
;;;1222     /* free any left-overs from previous unfolds */
;;;1223     dhcp_free_reply(dhcp);
;;;1224     /* options present? */
;;;1225     if (dhcp->p->tot_len > (sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN)) {
;;;1226       dhcp->options_in_len = dhcp->p->tot_len - (sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
;;;1227       dhcp->options_in = mem_malloc(dhcp->options_in_len);
;;;1228       if (dhcp->options_in == NULL) {
;;;1229         LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_unfold_reply(): could not allocate dhcp->options\n"));
;;;1230         return ERR_MEM;
;;;1231       }
;;;1232     }
;;;1233     dhcp->msg_in = mem_malloc(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
;;;1234     if (dhcp->msg_in == NULL) {
;;;1235       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | 2, ("dhcp_unfold_reply(): could not allocate dhcp->msg_in\n"));
;;;1236       mem_free((void *)dhcp->options_in);
;;;1237       dhcp->options_in = NULL;
;;;1238       return ERR_MEM;
;;;1239     }
;;;1240   
;;;1241     /** copy the DHCP message without options */
;;;1242     ret = pbuf_copy_partial(dhcp->p, dhcp->msg_in, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN, 0);
;;;1243     LWIP_ASSERT("ret == sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN", ret == sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
;;;1244     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_unfold_reply(): copied %"U16_F" bytes into dhcp->msg_in[]\n",
;;;1245        sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN));
;;;1246   
;;;1247     if (dhcp->options_in != NULL) {
;;;1248       /** copy the DHCP options */
;;;1249       ret = pbuf_copy_partial(dhcp->p, dhcp->options_in, dhcp->options_in_len, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN);
;;;1250       LWIP_ASSERT("ret == dhcp->options_in_len", ret == dhcp->options_in_len);
;;;1251       LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_unfold_reply(): copied %"U16_F" bytes to dhcp->options_in[]\n",
;;;1252         dhcp->options_in_len));
;;;1253     }
;;;1254     LWIP_UNUSED_ARG(ret);
;;;1255     return ERR_OK;
;;;1256   }
00001e  bd70              POP      {r4-r6,pc}
                  |L34.32|
000020  bf00              NOP                            ;1220
000022  bf00              NOP                            ;1221
000024  68e0              LDR      r0,[r4,#0xc]          ;1221
000026  b958              CBNZ     r0,|L34.64|
000028  bf00              NOP                            ;1221
00002a  a323              ADR      r3,|L34.184|
00002c  f24042c5          MOV      r2,#0x4c5             ;1221
000030  a135              ADR      r1,|L34.264|
000032  a02b              ADR      r0,|L34.224|
000034  f7fffffe          BL       __2printf
000038  bf00              NOP                            ;1221
00003a  f06f0008          MVN      r0,#8                 ;1221
00003e  e7ee              B        |L34.30|
                  |L34.64|
000040  bf00              NOP                            ;1221
000042  4620              MOV      r0,r4                 ;1223
000044  f7fffffe          BL       dhcp_free_reply
000048  68e0              LDR      r0,[r4,#0xc]          ;1225
00004a  8900              LDRH     r0,[r0,#8]            ;1225
00004c  28f0              CMP      r0,#0xf0              ;1225
00004e  d90e              BLS      |L34.110|
000050  68e0              LDR      r0,[r4,#0xc]          ;1226
000052  8900              LDRH     r0,[r0,#8]            ;1226
000054  38f0              SUBS     r0,r0,#0xf0           ;1226
000056  8320              STRH     r0,[r4,#0x18]         ;1226
000058  8b20              LDRH     r0,[r4,#0x18]         ;1227
00005a  f7fffffe          BL       mem_malloc
00005e  6160              STR      r0,[r4,#0x14]         ;1227
000060  6960              LDR      r0,[r4,#0x14]         ;1228
000062  b920              CBNZ     r0,|L34.110|
000064  bf00              NOP                            ;1229
000066  bf00              NOP                            ;1229
000068  f04f30ff          MOV      r0,#0xffffffff        ;1230
00006c  e7d7              B        |L34.30|
                  |L34.110|
00006e  20f0              MOVS     r0,#0xf0              ;1233
000070  f7fffffe          BL       mem_malloc
000074  6120              STR      r0,[r4,#0x10]         ;1233
000076  6920              LDR      r0,[r4,#0x10]         ;1234
000078  b940              CBNZ     r0,|L34.140|
00007a  bf00              NOP                            ;1235
00007c  bf00              NOP                            ;1235
00007e  6960              LDR      r0,[r4,#0x14]         ;1236
000080  f7fffffe          BL       mem_free
000084  2000              MOVS     r0,#0                 ;1237
000086  6160              STR      r0,[r4,#0x14]         ;1237
000088  1e40              SUBS     r0,r0,#1              ;1238
00008a  e7c8              B        |L34.30|
                  |L34.140|
00008c  2300              MOVS     r3,#0                 ;1242
00008e  22f0              MOVS     r2,#0xf0              ;1242
000090  e9d40103          LDRD     r0,r1,[r4,#0xc]       ;1242
000094  f7fffffe          BL       pbuf_copy_partial
000098  4605              MOV      r5,r0                 ;1242
00009a  bf00              NOP                            ;1244
00009c  bf00              NOP                            ;1244
00009e  6960              LDR      r0,[r4,#0x14]         ;1247
0000a0  b140              CBZ      r0,|L34.180|
0000a2  8b22              LDRH     r2,[r4,#0x18]         ;1249
0000a4  23f0              MOVS     r3,#0xf0              ;1249
0000a6  6961              LDR      r1,[r4,#0x14]         ;1249
0000a8  68e0              LDR      r0,[r4,#0xc]          ;1249
0000aa  f7fffffe          BL       pbuf_copy_partial
0000ae  4605              MOV      r5,r0                 ;1249
0000b0  bf00              NOP                            ;1251
0000b2  bf00              NOP                            ;1251
                  |L34.180|
0000b4  2000              MOVS     r0,#0                 ;1255
0000b6  e7b2              B        |L34.30|
;;;1257   
                          ENDP

                  |L34.184|
0000b8  2e2e5c6c          DCB      "..\\lwIP\\src\\core\\dhcp.c",0
0000bc  7749505c
0000c0  7372635c
0000c4  636f7265
0000c8  5c646863
0000cc  702e6300
                  |L34.208|
0000d0  64686370          DCB      "dhcp != NULL",0
0000d4  20213d20
0000d8  4e554c4c
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L34.224|
0000e0  41737365          DCB      "Assertion ""%s"" failed at line %d in %s\n",0
0000e4  7274696f
0000e8  6e202225
0000ec  73222066
0000f0  61696c65
0000f4  64206174
0000f8  206c696e
0000fc  65202564
000100  20696e20
000104  25730a00
                  |L34.264|
000108  64686370          DCB      "dhcp->p != NULL",0
00010c  2d3e7020
000110  213d204e
000114  554c4c00

                          AREA ||.data||, DATA, ALIGN=2

                  xid
                          DCD      0xabcd0000
