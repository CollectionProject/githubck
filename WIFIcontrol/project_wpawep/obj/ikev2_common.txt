; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\ikev2_common.o --depend=.\obj\ikev2_common.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\ikev2_common.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_common\ikev2_common.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.ikev2_build_encrypted||, CODE, READONLY, ALIGN=2

                  ikev2_build_encrypted PROC
;;;596    
;;;597    int ikev2_build_encrypted(int encr_id, int integ_id, struct ikev2_keys *keys,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;598    			  int initiator, struct wpabuf *msg,
;;;599    			  struct wpabuf *plain, u8 next_payload)
;;;600    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4614              MOV      r4,r2
000008  469b              MOV      r11,r3
;;;601    	struct ikev2_payload_hdr *phdr;
;;;602    	size_t plen;
;;;603    	size_t iv_len, pad_len;
;;;604    	u8 *icv, *iv;
;;;605    	const struct ikev2_integ_alg *integ_alg;
;;;606    	const struct ikev2_encr_alg *encr_alg;
;;;607    	const u8 *SK_e = initiator ? keys->SK_ei : keys->SK_er;
00000a  f1bb0f00          CMP      r11,#0
00000e  d001              BEQ      |L2.20|
000010  68e0              LDR      r0,[r4,#0xc]
000012  e000              B        |L2.22|
                  |L2.20|
000014  6920              LDR      r0,[r4,#0x10]
                  |L2.22|
000016  9008              STR      r0,[sp,#0x20]
;;;608    	const u8 *SK_a = initiator ? keys->SK_ai : keys->SK_ar;
000018  f1bb0f00          CMP      r11,#0
00001c  d001              BEQ      |L2.34|
00001e  6860              LDR      r0,[r4,#4]
000020  e000              B        |L2.36|
                  |L2.34|
000022  68a0              LDR      r0,[r4,#8]
                  |L2.36|
000024  9007              STR      r0,[sp,#0x1c]
;;;609    
;;;610    	wpa_printf(MSG_DEBUG, "IKEV2: Adding Encrypted payload");
000026  a157              ADR      r1,|L2.388|
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       wpa_printf
;;;611    
;;;612    	/* Encr - RFC 4306, Sect. 3.14 */
;;;613    
;;;614    	encr_alg = ikev2_get_encr(encr_id);
00002e  980b              LDR      r0,[sp,#0x2c]
000030  f7fffffe          BL       ikev2_get_encr
000034  4680              MOV      r8,r0
;;;615    	if (encr_alg == NULL) {
000036  f1b80f00          CMP      r8,#0
00003a  d108              BNE      |L2.78|
;;;616    		wpa_printf(MSG_INFO, "IKEV2: Unsupported encryption type");
00003c  a159              ADR      r1,|L2.420|
00003e  2000              MOVS     r0,#0
000040  f7fffffe          BL       wpa_printf
;;;617    		return -1;
000044  f04f30ff          MOV      r0,#0xffffffff
                  |L2.72|
;;;618    	}
;;;619    	iv_len = encr_alg->block_size;
;;;620    
;;;621    	integ_alg = ikev2_get_integ(integ_id);
;;;622    	if (integ_alg == NULL) {
;;;623    		wpa_printf(MSG_INFO, "IKEV2: Unsupported intergrity type");
;;;624    		return -1;
;;;625    	}
;;;626    
;;;627    	if (SK_e == NULL) {
;;;628    		wpa_printf(MSG_INFO, "IKEV2: No SK_e available");
;;;629    		return -1;
;;;630    	}
;;;631    
;;;632    	if (SK_a == NULL) {
;;;633    		wpa_printf(MSG_INFO, "IKEV2: No SK_a available");
;;;634    		return -1;
;;;635    	}
;;;636    
;;;637    	phdr = wpabuf_put(msg, sizeof(*phdr));
;;;638    	phdr->next_payload = next_payload;
;;;639    	phdr->flags = 0;
;;;640    
;;;641    	iv = wpabuf_put(msg, iv_len);
;;;642    	if (os_get_random(iv, iv_len)) {
;;;643    		wpa_printf(MSG_INFO, "IKEV2: Could not generate IV");
;;;644    		return -1;
;;;645    	}
;;;646    
;;;647    	pad_len = iv_len - (wpabuf_len(plain) + 1) % iv_len;
;;;648    	if (pad_len == iv_len)
;;;649    		pad_len = 0;
;;;650    	wpabuf_put(plain, pad_len);
;;;651    	wpabuf_put_u8(plain, pad_len);
;;;652    
;;;653    	if (ikev2_encr_encrypt(encr_alg->id, SK_e, keys->SK_encr_len, iv,
;;;654    			       wpabuf_head(plain), wpabuf_mhead(plain),
;;;655    			       wpabuf_len(plain)) < 0)
;;;656    		return -1;
;;;657    
;;;658    	wpabuf_put_buf(msg, plain);
;;;659    
;;;660    	/* Need to update all headers (Length fields) prior to hash func */
;;;661    	icv = wpabuf_put(msg, integ_alg->hash_len);
;;;662    	plen = (u8 *) wpabuf_put(msg, 0) - (u8 *) phdr;
;;;663    	WPA_PUT_BE16(phdr->payload_length, plen);
;;;664    
;;;665    	ikev2_update_hdr(msg);
;;;666    
;;;667    	return ikev2_integ_hash(integ_id, SK_a, keys->SK_integ_len,
;;;668    				wpabuf_head(msg),
;;;669    				wpabuf_len(msg) - integ_alg->hash_len, icv);
;;;670    
;;;671    	return 0;
;;;672    }
000048  b00f              ADD      sp,sp,#0x3c
00004a  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.78|
00004e  f8d86008          LDR      r6,[r8,#8]            ;619
000052  980c              LDR      r0,[sp,#0x30]         ;621
000054  f7fffffe          BL       ikev2_get_integ
000058  4607              MOV      r7,r0                 ;621
00005a  b937              CBNZ     r7,|L2.106|
00005c  a15a              ADR      r1,|L2.456|
00005e  2000              MOVS     r0,#0                 ;623
000060  f7fffffe          BL       wpa_printf
000064  f04f30ff          MOV      r0,#0xffffffff        ;624
000068  e7ee              B        |L2.72|
                  |L2.106|
00006a  9808              LDR      r0,[sp,#0x20]         ;627
00006c  b930              CBNZ     r0,|L2.124|
00006e  a15f              ADR      r1,|L2.492|
000070  2000              MOVS     r0,#0                 ;628
000072  f7fffffe          BL       wpa_printf
000076  f04f30ff          MOV      r0,#0xffffffff        ;629
00007a  e7e5              B        |L2.72|
                  |L2.124|
00007c  9807              LDR      r0,[sp,#0x1c]         ;632
00007e  b930              CBNZ     r0,|L2.142|
000080  a161              ADR      r1,|L2.520|
000082  2000              MOVS     r0,#0                 ;633
000084  f7fffffe          BL       wpa_printf
000088  f04f30ff          MOV      r0,#0xffffffff        ;634
00008c  e7dc              B        |L2.72|
                  |L2.142|
00008e  2104              MOVS     r1,#4                 ;637
000090  9818              LDR      r0,[sp,#0x60]         ;637
000092  f7fffffe          BL       wpabuf_put
000096  4605              MOV      r5,r0                 ;637
000098  981a              LDR      r0,[sp,#0x68]         ;638
00009a  7028              STRB     r0,[r5,#0]            ;638
00009c  2000              MOVS     r0,#0                 ;639
00009e  7068              STRB     r0,[r5,#1]            ;639
0000a0  4631              MOV      r1,r6                 ;641
0000a2  9818              LDR      r0,[sp,#0x60]         ;641
0000a4  f7fffffe          BL       wpabuf_put
0000a8  9009              STR      r0,[sp,#0x24]         ;641
0000aa  4631              MOV      r1,r6                 ;642
0000ac  9809              LDR      r0,[sp,#0x24]         ;642
0000ae  f7fffffe          BL       os_get_random
0000b2  b130              CBZ      r0,|L2.194|
0000b4  a15b              ADR      r1,|L2.548|
0000b6  2000              MOVS     r0,#0                 ;643
0000b8  f7fffffe          BL       wpa_printf
0000bc  f04f30ff          MOV      r0,#0xffffffff        ;644
0000c0  e7c2              B        |L2.72|
                  |L2.194|
0000c2  9819              LDR      r0,[sp,#0x64]         ;647
0000c4  f7fffffe          BL       wpabuf_len
0000c8  1c40              ADDS     r0,r0,#1              ;647
0000ca  fbb0f1f6          UDIV     r1,r0,r6              ;647
0000ce  fb060011          MLS      r0,r6,r1,r0           ;647
0000d2  eba60a00          SUB      r10,r6,r0             ;647
0000d6  45b2              CMP      r10,r6                ;648
0000d8  d101              BNE      |L2.222|
0000da  f04f0a00          MOV      r10,#0                ;649
                  |L2.222|
0000de  4651              MOV      r1,r10                ;650
0000e0  9819              LDR      r0,[sp,#0x64]         ;650
0000e2  f7fffffe          BL       wpabuf_put
0000e6  f00a01ff          AND      r1,r10,#0xff          ;651
0000ea  9819              LDR      r0,[sp,#0x64]         ;651
0000ec  f7fffffe          BL       wpabuf_put_u8
0000f0  9819              LDR      r0,[sp,#0x64]         ;653
0000f2  f7fffffe          BL       wpabuf_len
0000f6  9006              STR      r0,[sp,#0x18]         ;653
0000f8  9819              LDR      r0,[sp,#0x64]         ;653
0000fa  f7fffffe          BL       wpabuf_mhead
0000fe  9005              STR      r0,[sp,#0x14]         ;653
000100  9819              LDR      r0,[sp,#0x64]         ;653
000102  f7fffffe          BL       wpabuf_head
000106  9004              STR      r0,[sp,#0x10]         ;653
000108  e9dd2305          LDRD     r2,r3,[sp,#0x14]      ;653
00010c  e88d000d          STM      sp,{r0,r2,r3}         ;653
000110  6a62              LDR      r2,[r4,#0x24]         ;653
000112  f8d80000          LDR      r0,[r8,#0]            ;653
000116  e9dd1308          LDRD     r1,r3,[sp,#0x20]      ;653
00011a  f7fffffe          BL       ikev2_encr_encrypt
00011e  2800              CMP      r0,#0                 ;653
000120  da02              BGE      |L2.296|
000122  f04f30ff          MOV      r0,#0xffffffff        ;656
000126  e78f              B        |L2.72|
                  |L2.296|
000128  e9dd0118          LDRD     r0,r1,[sp,#0x60]      ;658
00012c  f7fffffe          BL       wpabuf_put_buf
000130  68b9              LDR      r1,[r7,#8]            ;661
000132  9818              LDR      r0,[sp,#0x60]         ;661
000134  f7fffffe          BL       wpabuf_put
000138  900a              STR      r0,[sp,#0x28]         ;661
00013a  2100              MOVS     r1,#0                 ;662
00013c  9818              LDR      r0,[sp,#0x60]         ;662
00013e  f7fffffe          BL       wpabuf_put
000142  eba00905          SUB      r9,r0,r5              ;662
000146  bf00              NOP                            ;663
000148  ea4f2019          LSR      r0,r9,#8              ;663
00014c  70a8              STRB     r0,[r5,#2]            ;663
00014e  f8859003          STRB     r9,[r5,#3]            ;663
000152  bf00              NOP                            ;663
000154  9818              LDR      r0,[sp,#0x60]         ;665
000156  f7fffffe          BL       ikev2_update_hdr
00015a  9818              LDR      r0,[sp,#0x60]         ;667
00015c  f7fffffe          BL       wpabuf_len
000160  68b9              LDR      r1,[r7,#8]            ;667
000162  1a40              SUBS     r0,r0,r1              ;667
000164  9006              STR      r0,[sp,#0x18]         ;667
000166  9818              LDR      r0,[sp,#0x60]         ;667
000168  f7fffffe          BL       wpabuf_head
00016c  9005              STR      r0,[sp,#0x14]         ;667
00016e  9b0a              LDR      r3,[sp,#0x28]         ;667
000170  9a06              LDR      r2,[sp,#0x18]         ;667
000172  e9cd2300          STRD     r2,r3,[sp,#0]         ;667
000176  4603              MOV      r3,r0                 ;667
000178  6a22              LDR      r2,[r4,#0x20]         ;667
00017a  9907              LDR      r1,[sp,#0x1c]         ;667
00017c  980c              LDR      r0,[sp,#0x30]         ;667
00017e  f7fffffe          BL       ikev2_integ_hash
000182  e761              B        |L2.72|
;;;673    
                          ENDP

                  |L2.388|
000184  494b4556          DCB      "IKEV2: Adding Encrypted payload",0
000188  323a2041
00018c  6464696e
000190  6720456e
000194  63727970
000198  74656420
00019c  7061796c
0001a0  6f616400
                  |L2.420|
0001a4  494b4556          DCB      "IKEV2: Unsupported encryption type",0
0001a8  323a2055
0001ac  6e737570
0001b0  706f7274
0001b4  65642065
0001b8  6e637279
0001bc  7074696f
0001c0  6e207479
0001c4  706500  
0001c7  00                DCB      0
                  |L2.456|
0001c8  494b4556          DCB      "IKEV2: Unsupported intergrity type",0
0001cc  323a2055
0001d0  6e737570
0001d4  706f7274
0001d8  65642069
0001dc  6e746572
0001e0  67726974
0001e4  79207479
0001e8  706500  
0001eb  00                DCB      0
                  |L2.492|
0001ec  494b4556          DCB      "IKEV2: No SK_e available",0
0001f0  323a204e
0001f4  6f20534b
0001f8  5f652061
0001fc  7661696c
000200  61626c65
000204  00      
000205  00                DCB      0
000206  00                DCB      0
000207  00                DCB      0
                  |L2.520|
000208  494b4556          DCB      "IKEV2: No SK_a available",0
00020c  323a204e
000210  6f20534b
000214  5f612061
000218  7661696c
00021c  61626c65
000220  00      
000221  00                DCB      0
000222  00                DCB      0
000223  00                DCB      0
                  |L2.548|
000224  494b4556          DCB      "IKEV2: Could not generate IV",0
000228  323a2043
00022c  6f756c64
000230  206e6f74
000234  2067656e
000238  65726174
00023c  65204956
000240  00      
000241  00                DCB      0
000242  00                DCB      0
000243  00                DCB      0

                          AREA ||i.ikev2_decrypt_payload||, CODE, READONLY, ALIGN=2

                  ikev2_decrypt_payload PROC
;;;494    
;;;495    u8 * ikev2_decrypt_payload(int encr_id, int integ_id,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;496    			   struct ikev2_keys *keys, int initiator,
;;;497    			   const struct ikev2_hdr *hdr,
;;;498    			   const u8 *encrypted, size_t encrypted_len,
;;;499    			   size_t *res_len)
;;;500    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4614              MOV      r4,r2
000008  f8dd9074          LDR      r9,[sp,#0x74]
;;;501    	size_t iv_len;
;;;502    	const u8 *pos, *end, *iv, *integ;
;;;503    	u8 hash[IKEV2_MAX_HASH_LEN], *decrypted;
;;;504    	size_t decrypted_len, pad_len;
;;;505    	const struct ikev2_integ_alg *integ_alg;
;;;506    	const struct ikev2_encr_alg *encr_alg;
;;;507    	const u8 *SK_e = initiator ? keys->SK_ei : keys->SK_er;
00000c  9812              LDR      r0,[sp,#0x48]
00000e  b108              CBZ      r0,|L3.20|
000010  68e0              LDR      r0,[r4,#0xc]
000012  e000              B        |L3.22|
                  |L3.20|
000014  6920              LDR      r0,[r4,#0x10]
                  |L3.22|
000016  9005              STR      r0,[sp,#0x14]
;;;508    	const u8 *SK_a = initiator ? keys->SK_ai : keys->SK_ar;
000018  9812              LDR      r0,[sp,#0x48]
00001a  b108              CBZ      r0,|L3.32|
00001c  6860              LDR      r0,[r4,#4]
00001e  e000              B        |L3.34|
                  |L3.32|
000020  68a0              LDR      r0,[r4,#8]
                  |L3.34|
000022  9004              STR      r0,[sp,#0x10]
;;;509    
;;;510    	if (encrypted == NULL) {
000024  f1b90f00          CMP      r9,#0
000028  d107              BNE      |L3.58|
;;;511    		wpa_printf(MSG_INFO, "IKEV2: No Encrypted payload in SA_AUTH");
00002a  a14f              ADR      r1,|L3.360|
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       wpa_printf
;;;512    		return NULL;
000032  2000              MOVS     r0,#0
                  |L3.52|
;;;513    	}
;;;514    
;;;515    	encr_alg = ikev2_get_encr(encr_id);
;;;516    	if (encr_alg == NULL) {
;;;517    		wpa_printf(MSG_INFO, "IKEV2: Unsupported encryption type");
;;;518    		return NULL;
;;;519    	}
;;;520    	iv_len = encr_alg->block_size;
;;;521    
;;;522    	integ_alg = ikev2_get_integ(integ_id);
;;;523    	if (integ_alg == NULL) {
;;;524    		wpa_printf(MSG_INFO, "IKEV2: Unsupported intergrity type");
;;;525    		return NULL;
;;;526    	}
;;;527    
;;;528    	if (encrypted_len < iv_len + 1 + integ_alg->hash_len) {
;;;529    		wpa_printf(MSG_INFO, "IKEV2: No room for IV or Integrity "
;;;530    			  "Checksum");
;;;531    		return NULL;
;;;532    	}
;;;533    
;;;534    	iv = encrypted;
;;;535    	pos = iv + iv_len;
;;;536    	end = encrypted + encrypted_len;
;;;537    	integ = end - integ_alg->hash_len;
;;;538    
;;;539    	if (SK_a == NULL) {
;;;540    		wpa_printf(MSG_INFO, "IKEV2: No SK_a available");
;;;541    		return NULL;
;;;542    	}
;;;543    	if (ikev2_integ_hash(integ_id, SK_a, keys->SK_integ_len,
;;;544    			     (const u8 *) hdr,
;;;545    			     integ - (const u8 *) hdr, hash) < 0) {
;;;546    		wpa_printf(MSG_INFO, "IKEV2: Failed to calculate integrity "
;;;547    			   "hash");
;;;548    		return NULL;
;;;549    	}
;;;550    	if (os_memcmp(integ, hash, integ_alg->hash_len) != 0) {
;;;551    		wpa_printf(MSG_INFO, "IKEV2: Incorrect Integrity Checksum "
;;;552    			   "Data");
;;;553    		return NULL;
;;;554    	}
;;;555    
;;;556    	if (SK_e == NULL) {
;;;557    		wpa_printf(MSG_INFO, "IKEV2: No SK_e available");
;;;558    		return NULL;
;;;559    	}
;;;560    
;;;561    	decrypted_len = integ - pos;
;;;562    	decrypted = os_malloc(decrypted_len);
;;;563    	if (decrypted == NULL)
;;;564    		return NULL;
;;;565    
;;;566    	if (ikev2_encr_decrypt(encr_alg->id, SK_e, keys->SK_encr_len, iv, pos,
;;;567    			       decrypted, decrypted_len) < 0) {
;;;568    		os_free(decrypted);
;;;569    		return NULL;
;;;570    	}
;;;571    
;;;572    	pad_len = decrypted[decrypted_len - 1];
;;;573    	if (decrypted_len < pad_len + 1) {
;;;574    		wpa_printf(MSG_INFO, "IKEV2: Invalid padding in encrypted "
;;;575    			   "payload");
;;;576    		os_free(decrypted);
;;;577    		return NULL;
;;;578    	}
;;;579    
;;;580    	decrypted_len -= pad_len + 1;
;;;581    
;;;582    	*res_len = decrypted_len;
;;;583    	return decrypted;
;;;584    }
000034  b013              ADD      sp,sp,#0x4c
000036  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.58|
00003a  980f              LDR      r0,[sp,#0x3c]         ;515
00003c  f7fffffe          BL       ikev2_get_encr
000040  4680              MOV      r8,r0                 ;515
000042  f1b80f00          CMP      r8,#0                 ;516
000046  d105              BNE      |L3.84|
000048  a151              ADR      r1,|L3.400|
00004a  2000              MOVS     r0,#0                 ;517
00004c  f7fffffe          BL       wpa_printf
000050  2000              MOVS     r0,#0                 ;518
000052  e7ef              B        |L3.52|
                  |L3.84|
000054  f8d80008          LDR      r0,[r8,#8]            ;520
000058  900e              STR      r0,[sp,#0x38]         ;520
00005a  9810              LDR      r0,[sp,#0x40]         ;522
00005c  f7fffffe          BL       ikev2_get_integ
000060  4606              MOV      r6,r0                 ;522
000062  b92e              CBNZ     r6,|L3.112|
000064  a153              ADR      r1,|L3.436|
000066  2000              MOVS     r0,#0                 ;524
000068  f7fffffe          BL       wpa_printf
00006c  2000              MOVS     r0,#0                 ;525
00006e  e7e1              B        |L3.52|
                  |L3.112|
000070  68b1              LDR      r1,[r6,#8]            ;528
000072  980e              LDR      r0,[sp,#0x38]         ;528
000074  1c40              ADDS     r0,r0,#1              ;528
000076  4401              ADD      r1,r1,r0              ;528
000078  981e              LDR      r0,[sp,#0x78]         ;528
00007a  4281              CMP      r1,r0                 ;528
00007c  d905              BLS      |L3.138|
00007e  a156              ADR      r1,|L3.472|
000080  2000              MOVS     r0,#0                 ;529
000082  f7fffffe          BL       wpa_printf
000086  2000              MOVS     r0,#0                 ;531
000088  e7d4              B        |L3.52|
                  |L3.138|
00008a  46ca              MOV      r10,r9                ;534
00008c  46d1              MOV      r9,r10                ;535
00008e  980e              LDR      r0,[sp,#0x38]         ;535
000090  4450              ADD      r0,r0,r10             ;535
000092  900d              STR      r0,[sp,#0x34]         ;535
000094  981e              LDR      r0,[sp,#0x78]         ;536
000096  4448              ADD      r0,r0,r9              ;536
000098  900c              STR      r0,[sp,#0x30]         ;536
00009a  68b1              LDR      r1,[r6,#8]            ;537
00009c  980c              LDR      r0,[sp,#0x30]         ;537
00009e  eba00b01          SUB      r11,r0,r1             ;537
0000a2  9804              LDR      r0,[sp,#0x10]         ;539
0000a4  b928              CBNZ     r0,|L3.178|
0000a6  a157              ADR      r1,|L3.516|
0000a8  2000              MOVS     r0,#0                 ;540
0000aa  f7fffffe          BL       wpa_printf
0000ae  2000              MOVS     r0,#0                 ;541
0000b0  e7c0              B        |L3.52|
                  |L3.178|
0000b2  ab07              ADD      r3,sp,#0x1c           ;543
0000b4  981c              LDR      r0,[sp,#0x70]         ;543
0000b6  ebab0200          SUB      r2,r11,r0             ;543
0000ba  e9cd2300          STRD     r2,r3,[sp,#0]         ;543
0000be  4603              MOV      r3,r0                 ;543
0000c0  6a22              LDR      r2,[r4,#0x20]         ;543
0000c2  9904              LDR      r1,[sp,#0x10]         ;543
0000c4  9810              LDR      r0,[sp,#0x40]         ;543
0000c6  f7fffffe          BL       ikev2_integ_hash
0000ca  2800              CMP      r0,#0                 ;543
0000cc  da05              BGE      |L3.218|
0000ce  a154              ADR      r1,|L3.544|
0000d0  2000              MOVS     r0,#0                 ;546
0000d2  f7fffffe          BL       wpa_printf
0000d6  2000              MOVS     r0,#0                 ;548
0000d8  e7ac              B        |L3.52|
                  |L3.218|
0000da  a907              ADD      r1,sp,#0x1c           ;550
0000dc  4658              MOV      r0,r11                ;550
0000de  68b2              LDR      r2,[r6,#8]            ;550
0000e0  f7fffffe          BL       os_memcmp
0000e4  b128              CBZ      r0,|L3.242|
0000e6  a159              ADR      r1,|L3.588|
0000e8  2000              MOVS     r0,#0                 ;551
0000ea  f7fffffe          BL       wpa_printf
0000ee  2000              MOVS     r0,#0                 ;553
0000f0  e7a0              B        |L3.52|
                  |L3.242|
0000f2  9805              LDR      r0,[sp,#0x14]         ;556
0000f4  b928              CBNZ     r0,|L3.258|
0000f6  a160              ADR      r1,|L3.632|
0000f8  2000              MOVS     r0,#0                 ;557
0000fa  f7fffffe          BL       wpa_printf
0000fe  2000              MOVS     r0,#0                 ;558
000100  e798              B        |L3.52|
                  |L3.258|
000102  980d              LDR      r0,[sp,#0x34]         ;561
000104  ebab0500          SUB      r5,r11,r0             ;561
000108  4628              MOV      r0,r5                 ;562
00010a  f7fffffe          BL       os_malloc
00010e  4607              MOV      r7,r0                 ;562
000110  b90f              CBNZ     r7,|L3.278|
000112  2000              MOVS     r0,#0                 ;564
000114  e78e              B        |L3.52|
                  |L3.278|
000116  990d              LDR      r1,[sp,#0x34]         ;566
000118  e9cd7501          STRD     r7,r5,[sp,#4]         ;566
00011c  9100              STR      r1,[sp,#0]            ;566
00011e  6a62              LDR      r2,[r4,#0x24]         ;566
000120  4653              MOV      r3,r10                ;566
000122  f8d80000          LDR      r0,[r8,#0]            ;566
000126  9905              LDR      r1,[sp,#0x14]         ;566
000128  f7fffffe          BL       ikev2_encr_decrypt
00012c  2800              CMP      r0,#0                 ;566
00012e  da04              BGE      |L3.314|
000130  4638              MOV      r0,r7                 ;568
000132  f7fffffe          BL       os_free
000136  2000              MOVS     r0,#0                 ;569
000138  e77c              B        |L3.52|
                  |L3.314|
00013a  1e68              SUBS     r0,r5,#1              ;572
00013c  5c38              LDRB     r0,[r7,r0]            ;572
00013e  9006              STR      r0,[sp,#0x18]         ;572
000140  9806              LDR      r0,[sp,#0x18]         ;573
000142  1c40              ADDS     r0,r0,#1              ;573
000144  4285              CMP      r5,r0                 ;573
000146  d208              BCS      |L3.346|
000148  a152              ADR      r1,|L3.660|
00014a  2000              MOVS     r0,#0                 ;574
00014c  f7fffffe          BL       wpa_printf
000150  4638              MOV      r0,r7                 ;576
000152  f7fffffe          BL       os_free
000156  2000              MOVS     r0,#0                 ;577
000158  e76c              B        |L3.52|
                  |L3.346|
00015a  9806              LDR      r0,[sp,#0x18]         ;580
00015c  1c40              ADDS     r0,r0,#1              ;580
00015e  1a2d              SUBS     r5,r5,r0              ;580
000160  981f              LDR      r0,[sp,#0x7c]         ;582
000162  6005              STR      r5,[r0,#0]            ;582
000164  4638              MOV      r0,r7                 ;583
000166  e765              B        |L3.52|
;;;585    
                          ENDP

                  |L3.360|
000168  494b4556          DCB      "IKEV2: No Encrypted payload in SA_AUTH",0
00016c  323a204e
000170  6f20456e
000174  63727970
000178  74656420
00017c  7061796c
000180  6f616420
000184  696e2053
000188  415f4155
00018c  544800  
00018f  00                DCB      0
                  |L3.400|
000190  494b4556          DCB      "IKEV2: Unsupported encryption type",0
000194  323a2055
000198  6e737570
00019c  706f7274
0001a0  65642065
0001a4  6e637279
0001a8  7074696f
0001ac  6e207479
0001b0  706500  
0001b3  00                DCB      0
                  |L3.436|
0001b4  494b4556          DCB      "IKEV2: Unsupported intergrity type",0
0001b8  323a2055
0001bc  6e737570
0001c0  706f7274
0001c4  65642069
0001c8  6e746572
0001cc  67726974
0001d0  79207479
0001d4  706500  
0001d7  00                DCB      0
                  |L3.472|
0001d8  494b4556          DCB      "IKEV2: No room for IV or Integrity Checksum",0
0001dc  323a204e
0001e0  6f20726f
0001e4  6f6d2066
0001e8  6f722049
0001ec  56206f72
0001f0  20496e74
0001f4  65677269
0001f8  74792043
0001fc  6865636b
000200  73756d00
                  |L3.516|
000204  494b4556          DCB      "IKEV2: No SK_a available",0
000208  323a204e
00020c  6f20534b
000210  5f612061
000214  7661696c
000218  61626c65
00021c  00      
00021d  00                DCB      0
00021e  00                DCB      0
00021f  00                DCB      0
                  |L3.544|
000220  494b4556          DCB      "IKEV2: Failed to calculate integrity hash",0
000224  323a2046
000228  61696c65
00022c  6420746f
000230  2063616c
000234  63756c61
000238  74652069
00023c  6e746567
000240  72697479
000244  20686173
000248  6800    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L3.588|
00024c  494b4556          DCB      "IKEV2: Incorrect Integrity Checksum Data",0
000250  323a2049
000254  6e636f72
000258  72656374
00025c  20496e74
000260  65677269
000264  74792043
000268  6865636b
00026c  73756d20
000270  44617461
000274  00      
000275  00                DCB      0
000276  00                DCB      0
000277  00                DCB      0
                  |L3.632|
000278  494b4556          DCB      "IKEV2: No SK_e available",0
00027c  323a204e
000280  6f20534b
000284  5f652061
000288  7661696c
00028c  61626c65
000290  00      
000291  00                DCB      0
000292  00                DCB      0
000293  00                DCB      0
                  |L3.660|
000294  494b4556          DCB      "IKEV2: Invalid padding in encrypted payload",0
000298  323a2049
00029c  6e76616c
0002a0  69642070
0002a4  61646469
0002a8  6e672069
0002ac  6e20656e
0002b0  63727970
0002b4  74656420
0002b8  7061796c
0002bc  6f616400

                          AREA ||i.ikev2_derive_auth_data||, CODE, READONLY, ALIGN=1

                  ikev2_derive_auth_data PROC
;;;435    
;;;436    int ikev2_derive_auth_data(int prf_alg, const struct wpabuf *sign_msg,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;437    			   const u8 *ID, size_t ID_len, u8 ID_type,
;;;438    			   struct ikev2_keys *keys, int initiator,
;;;439    			   const u8 *shared_secret, size_t shared_secret_len,
;;;440    			   const u8 *nonce, size_t nonce_len,
;;;441    			   const u8 *key_pad, size_t key_pad_len,
;;;442    			   u8 *auth_data)
;;;443    {
000004  b08d              SUB      sp,sp,#0x34
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8ddb074          LDR      r11,[sp,#0x74]
000010  f8dd9080          LDR      r9,[sp,#0x80]
000014  f8dd806c          LDR      r8,[sp,#0x6c]
;;;444    	size_t sign_len, buf_len;
;;;445    	u8 *sign_data, *pos, *buf, hash[IKEV2_MAX_HASH_LEN];
;;;446    	const struct ikev2_prf_alg *prf;
;;;447    	const u8 *SK_p = initiator ? keys->SK_pi : keys->SK_pr;
000018  981c              LDR      r0,[sp,#0x70]
00001a  b110              CBZ      r0,|L4.34|
00001c  f8d80014          LDR      r0,[r8,#0x14]
000020  e001              B        |L4.38|
                  |L4.34|
000022  f8d80018          LDR      r0,[r8,#0x18]
                  |L4.38|
000026  9003              STR      r0,[sp,#0xc]
;;;448    
;;;449    	prf = ikev2_get_prf(prf_alg);
000028  980d              LDR      r0,[sp,#0x34]
00002a  f7fffffe          BL       ikev2_get_prf
00002e  4604              MOV      r4,r0
;;;450    	if (sign_msg == NULL || ID == NULL || SK_p == NULL ||
000030  b145              CBZ      r5,|L4.68|
000032  b13e              CBZ      r6,|L4.68|
000034  9803              LDR      r0,[sp,#0xc]
000036  b128              CBZ      r0,|L4.68|
;;;451    	    shared_secret == NULL || nonce == NULL || prf == NULL)
000038  f1bb0f00          CMP      r11,#0
00003c  d002              BEQ      |L4.68|
00003e  981f              LDR      r0,[sp,#0x7c]
000040  b100              CBZ      r0,|L4.68|
000042  b924              CBNZ     r4,|L4.78|
                  |L4.68|
;;;452    		return -1;
000044  f04f30ff          MOV      r0,#0xffffffff
                  |L4.72|
;;;453    
;;;454    	/* prf(SK_pi/r,IDi/r') */
;;;455    	buf_len = 4 + ID_len;
;;;456    	buf = os_zalloc(buf_len);
;;;457    	if (buf == NULL)
;;;458    		return -1;
;;;459    	buf[0] = ID_type;
;;;460    	os_memcpy(buf + 4, ID, ID_len);
;;;461    	if (ikev2_prf_hash(prf->id, SK_p, keys->SK_prf_len,
;;;462    			   1, (const u8 **) &buf, &buf_len, hash) < 0) {
;;;463    		os_free(buf);
;;;464    		return -1;
;;;465    	}
;;;466    	os_free(buf);
;;;467    
;;;468    	/* sign_data = msg | Nr/i | prf(SK_pi/r,IDi/r') */
;;;469    	sign_len = wpabuf_len(sign_msg) + nonce_len + prf->hash_len;
;;;470    	sign_data = os_malloc(sign_len);
;;;471    	if (sign_data == NULL)
;;;472    		return -1;
;;;473    	pos = sign_data;
;;;474    	os_memcpy(pos, wpabuf_head(sign_msg), wpabuf_len(sign_msg));
;;;475    	pos += wpabuf_len(sign_msg);
;;;476    	os_memcpy(pos, nonce, nonce_len);
;;;477    	pos += nonce_len;
;;;478    	os_memcpy(pos, hash, prf->hash_len);
;;;479    
;;;480    	/* AUTH = prf(prf(Shared Secret, key pad, sign_data) */
;;;481    	if (ikev2_prf_hash(prf->id, shared_secret, shared_secret_len, 1,
;;;482    			   &key_pad, &key_pad_len, hash) < 0 ||
;;;483    	    ikev2_prf_hash(prf->id, hash, prf->hash_len, 1,
;;;484    			   (const u8 **) &sign_data, &sign_len, auth_data) < 0)
;;;485    	{
;;;486    		os_free(sign_data);
;;;487    		return -1;
;;;488    	}
;;;489    	os_free(sign_data);
;;;490    
;;;491    	return 0;
;;;492    }
000048  b011              ADD      sp,sp,#0x44
00004a  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.78|
00004e  1d38              ADDS     r0,r7,#4              ;455
000050  900b              STR      r0,[sp,#0x2c]         ;455
000052  980b              LDR      r0,[sp,#0x2c]         ;456
000054  f7fffffe          BL       os_zalloc
000058  9009              STR      r0,[sp,#0x24]         ;456
00005a  9809              LDR      r0,[sp,#0x24]         ;457
00005c  b910              CBNZ     r0,|L4.100|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;458
000062  e7f1              B        |L4.72|
                  |L4.100|
000064  9909              LDR      r1,[sp,#0x24]         ;459
000066  981a              LDR      r0,[sp,#0x68]         ;459
000068  7008              STRB     r0,[r1,#0]            ;459
00006a  463a              MOV      r2,r7                 ;460
00006c  4631              MOV      r1,r6                 ;460
00006e  9809              LDR      r0,[sp,#0x24]         ;460
000070  1d00              ADDS     r0,r0,#4              ;460
000072  f7fffffe          BL       os_memcpy
000076  ab04              ADD      r3,sp,#0x10           ;461
000078  aa0b              ADD      r2,sp,#0x2c           ;461
00007a  a909              ADD      r1,sp,#0x24           ;461
00007c  e88d000e          STM      sp,{r1-r3}            ;461
000080  f8d82028          LDR      r2,[r8,#0x28]         ;461
000084  2301              MOVS     r3,#1                 ;461
000086  6820              LDR      r0,[r4,#0]            ;461
000088  9903              LDR      r1,[sp,#0xc]          ;461
00008a  f7fffffe          BL       ikev2_prf_hash
00008e  2800              CMP      r0,#0                 ;461
000090  da05              BGE      |L4.158|
000092  9809              LDR      r0,[sp,#0x24]         ;463
000094  f7fffffe          BL       os_free
000098  f04f30ff          MOV      r0,#0xffffffff        ;464
00009c  e7d4              B        |L4.72|
                  |L4.158|
00009e  9809              LDR      r0,[sp,#0x24]         ;466
0000a0  f7fffffe          BL       os_free
0000a4  4628              MOV      r0,r5                 ;469
0000a6  f7fffffe          BL       wpabuf_len
0000aa  4448              ADD      r0,r0,r9              ;469
0000ac  68a1              LDR      r1,[r4,#8]            ;469
0000ae  4408              ADD      r0,r0,r1              ;469
0000b0  900c              STR      r0,[sp,#0x30]         ;469
0000b2  980c              LDR      r0,[sp,#0x30]         ;470
0000b4  f7fffffe          BL       os_malloc
0000b8  900a              STR      r0,[sp,#0x28]         ;470
0000ba  980a              LDR      r0,[sp,#0x28]         ;471
0000bc  b910              CBNZ     r0,|L4.196|
0000be  f04f30ff          MOV      r0,#0xffffffff        ;472
0000c2  e7c1              B        |L4.72|
                  |L4.196|
0000c4  f8dda028          LDR      r10,[sp,#0x28]        ;473
0000c8  4628              MOV      r0,r5                 ;474
0000ca  f7fffffe          BL       wpabuf_len
0000ce  9002              STR      r0,[sp,#8]            ;474
0000d0  4628              MOV      r0,r5                 ;474
0000d2  f7fffffe          BL       wpabuf_head
0000d6  9001              STR      r0,[sp,#4]            ;474
0000d8  4601              MOV      r1,r0                 ;474
0000da  4650              MOV      r0,r10                ;474
0000dc  9a02              LDR      r2,[sp,#8]            ;474
0000de  f7fffffe          BL       os_memcpy
0000e2  4628              MOV      r0,r5                 ;475
0000e4  f7fffffe          BL       wpabuf_len
0000e8  4482              ADD      r10,r10,r0            ;475
0000ea  464a              MOV      r2,r9                 ;476
0000ec  4650              MOV      r0,r10                ;476
0000ee  991f              LDR      r1,[sp,#0x7c]         ;476
0000f0  f7fffffe          BL       os_memcpy
0000f4  44ca              ADD      r10,r10,r9            ;477
0000f6  a904              ADD      r1,sp,#0x10           ;478
0000f8  4650              MOV      r0,r10                ;478
0000fa  68a2              LDR      r2,[r4,#8]            ;478
0000fc  f7fffffe          BL       os_memcpy
000100  ab04              ADD      r3,sp,#0x10           ;481
000102  aa22              ADD      r2,sp,#0x88           ;481
000104  a921              ADD      r1,sp,#0x84           ;481
000106  e88d000e          STM      sp,{r1-r3}            ;481
00010a  2301              MOVS     r3,#1                 ;481
00010c  6820              LDR      r0,[r4,#0]            ;481
00010e  4659              MOV      r1,r11                ;481
000110  9a1e              LDR      r2,[sp,#0x78]         ;481
000112  f7fffffe          BL       ikev2_prf_hash
000116  2800              CMP      r0,#0                 ;481
000118  db0c              BLT      |L4.308|
00011a  aa0c              ADD      r2,sp,#0x30           ;483
00011c  a90a              ADD      r1,sp,#0x28           ;483
00011e  9b23              LDR      r3,[sp,#0x8c]         ;483
000120  e88d000e          STM      sp,{r1-r3}            ;483
000124  2301              MOVS     r3,#1                 ;483
000126  a904              ADD      r1,sp,#0x10           ;483
000128  68a2              LDR      r2,[r4,#8]            ;483
00012a  6820              LDR      r0,[r4,#0]            ;483
00012c  f7fffffe          BL       ikev2_prf_hash
000130  2800              CMP      r0,#0                 ;483
000132  da05              BGE      |L4.320|
                  |L4.308|
000134  980a              LDR      r0,[sp,#0x28]         ;486
000136  f7fffffe          BL       os_free
00013a  f04f30ff          MOV      r0,#0xffffffff        ;487
00013e  e783              B        |L4.72|
                  |L4.320|
000140  980a              LDR      r0,[sp,#0x28]         ;489
000142  f7fffffe          BL       os_free
000146  2000              MOVS     r0,#0                 ;491
000148  e77e              B        |L4.72|
;;;493    
                          ENDP


                          AREA ||i.ikev2_derive_sk_keys||, CODE, READONLY, ALIGN=2

                  ikev2_derive_sk_keys PROC
;;;695    
;;;696    int ikev2_derive_sk_keys(const struct ikev2_prf_alg *prf,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;697    			 const struct ikev2_integ_alg *integ,
;;;698    			 const struct ikev2_encr_alg *encr,
;;;699    			 const u8 *skeyseed, const u8 *data, size_t data_len,
;;;700    			 struct ikev2_keys *keys)
;;;701    {
000004  b083              SUB      sp,sp,#0xc
000006  4606              MOV      r6,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
00000e  9c12              LDR      r4,[sp,#0x48]
;;;702    	u8 *keybuf, *pos;
;;;703    	size_t keybuf_len;
;;;704    
;;;705    	/*
;;;706    	 * {SK_d | SK_ai | SK_ar | SK_ei | SK_er | SK_pi | SK_pr } =
;;;707    	 *	prf+(SKEYSEED, Ni | Nr | SPIi | SPIr )
;;;708    	 */
;;;709    	ikev2_free_keys(keys);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       ikev2_free_keys
;;;710    	keys->SK_d_len = prf->key_len;
000016  6870              LDR      r0,[r6,#4]
000018  61e0              STR      r0,[r4,#0x1c]
;;;711    	keys->SK_integ_len = integ->key_len;
00001a  f8d80004          LDR      r0,[r8,#4]
00001e  6220              STR      r0,[r4,#0x20]
;;;712    	keys->SK_encr_len = encr->key_len;
000020  f8d90004          LDR      r0,[r9,#4]
000024  6260              STR      r0,[r4,#0x24]
;;;713    	keys->SK_prf_len = prf->key_len;
000026  6870              LDR      r0,[r6,#4]
000028  62a0              STR      r0,[r4,#0x28]
;;;714    #ifdef CCNS_PL
;;;715    	/* Uses encryption key length for SK_d; should be PRF length */
;;;716    	keys->SK_d_len = keys->SK_encr_len;
;;;717    #endif /* CCNS_PL */
;;;718    
;;;719    	keybuf_len = keys->SK_d_len + 2 * keys->SK_integ_len +
00002a  2202              MOVS     r2,#2
00002c  e9d40107          LDRD     r0,r1,[r4,#0x1c]
000030  fb020001          MLA      r0,r2,r1,r0
000034  6a61              LDR      r1,[r4,#0x24]
000036  fb020001          MLA      r0,r2,r1,r0
00003a  6aa1              LDR      r1,[r4,#0x28]
00003c  fb020b01          MLA      r11,r2,r1,r0
;;;720    		2 * keys->SK_encr_len + 2 * keys->SK_prf_len;
;;;721    	keybuf = os_malloc(keybuf_len);
000040  4658              MOV      r0,r11
000042  f7fffffe          BL       os_malloc
000046  4607              MOV      r7,r0
;;;722    	if (keybuf == NULL)
000048  b927              CBNZ     r7,|L5.84|
;;;723    		return -1;
00004a  f04f30ff          MOV      r0,#0xffffffff
                  |L5.78|
;;;724    
;;;725    	if (ikev2_prf_plus(prf->id, skeyseed, prf->hash_len,
;;;726    			   data, data_len, keybuf, keybuf_len)) {
;;;727    		os_free(keybuf);
;;;728    		return -1;
;;;729    	}
;;;730    
;;;731    	pos = keybuf;
;;;732    
;;;733    	keys->SK_d = os_malloc(keys->SK_d_len);
;;;734    	if (keys->SK_d) {
;;;735    		os_memcpy(keys->SK_d, pos, keys->SK_d_len);
;;;736    		wpa_hexdump_key(MSG_DEBUG, "IKEV2: SK_d",
;;;737    				keys->SK_d, keys->SK_d_len);
;;;738    	}
;;;739    	pos += keys->SK_d_len;
;;;740    
;;;741    	keys->SK_ai = os_malloc(keys->SK_integ_len);
;;;742    	if (keys->SK_ai) {
;;;743    		os_memcpy(keys->SK_ai, pos, keys->SK_integ_len);
;;;744    		wpa_hexdump_key(MSG_DEBUG, "IKEV2: SK_ai",
;;;745    				keys->SK_ai, keys->SK_integ_len);
;;;746    	}
;;;747    	pos += keys->SK_integ_len;
;;;748    
;;;749    	keys->SK_ar = os_malloc(keys->SK_integ_len);
;;;750    	if (keys->SK_ar) {
;;;751    		os_memcpy(keys->SK_ar, pos, keys->SK_integ_len);
;;;752    		wpa_hexdump_key(MSG_DEBUG, "IKEV2: SK_ar",
;;;753    				keys->SK_ar, keys->SK_integ_len);
;;;754    	}
;;;755    	pos += keys->SK_integ_len;
;;;756    
;;;757    	keys->SK_ei = os_malloc(keys->SK_encr_len);
;;;758    	if (keys->SK_ei) {
;;;759    		os_memcpy(keys->SK_ei, pos, keys->SK_encr_len);
;;;760    		wpa_hexdump_key(MSG_DEBUG, "IKEV2: SK_ei",
;;;761    				keys->SK_ei, keys->SK_encr_len);
;;;762    	}
;;;763    	pos += keys->SK_encr_len;
;;;764    
;;;765    	keys->SK_er = os_malloc(keys->SK_encr_len);
;;;766    	if (keys->SK_er) {
;;;767    		os_memcpy(keys->SK_er, pos, keys->SK_encr_len);
;;;768    		wpa_hexdump_key(MSG_DEBUG, "IKEV2: SK_er",
;;;769    				keys->SK_er, keys->SK_encr_len);
;;;770    	}
;;;771    	pos += keys->SK_encr_len;
;;;772    
;;;773    	keys->SK_pi = os_malloc(keys->SK_prf_len);
;;;774    	if (keys->SK_pi) {
;;;775    		os_memcpy(keys->SK_pi, pos, keys->SK_prf_len);
;;;776    		wpa_hexdump_key(MSG_DEBUG, "IKEV2: SK_pi",
;;;777    				keys->SK_pi, keys->SK_prf_len);
;;;778    	}
;;;779    	pos += keys->SK_prf_len;
;;;780    
;;;781    	keys->SK_pr = os_malloc(keys->SK_prf_len);
;;;782    	if (keys->SK_pr) {
;;;783    		os_memcpy(keys->SK_pr, pos, keys->SK_prf_len);
;;;784    		wpa_hexdump_key(MSG_DEBUG, "IKEV2: SK_pr",
;;;785    				keys->SK_pr, keys->SK_prf_len);
;;;786    	}
;;;787    
;;;788    	os_free(keybuf);
;;;789    
;;;790    	if (!ikev2_keys_set(keys)) {
;;;791    		ikev2_free_keys(keys);
;;;792    		return -1;
;;;793    	}
;;;794    
;;;795    	return 0;
;;;796    }
00004e  b007              ADD      sp,sp,#0x1c
000050  e8bd8ff0          POP      {r4-r11,pc}
                  |L5.84|
000054  9911              LDR      r1,[sp,#0x44]         ;725
000056  e88d0882          STM      sp,{r1,r7,r11}        ;725
00005a  68b2              LDR      r2,[r6,#8]            ;725
00005c  6830              LDR      r0,[r6,#0]            ;725
00005e  4651              MOV      r1,r10                ;725
000060  9b10              LDR      r3,[sp,#0x40]         ;725
000062  f7fffffe          BL       ikev2_prf_plus
000066  b128              CBZ      r0,|L5.116|
000068  4638              MOV      r0,r7                 ;727
00006a  f7fffffe          BL       os_free
00006e  f04f30ff          MOV      r0,#0xffffffff        ;728
000072  e7ec              B        |L5.78|
                  |L5.116|
000074  463d              MOV      r5,r7                 ;731
000076  69e0              LDR      r0,[r4,#0x1c]         ;733
000078  f7fffffe          BL       os_malloc
00007c  6020              STR      r0,[r4,#0]            ;733
00007e  6820              LDR      r0,[r4,#0]            ;734
000080  b150              CBZ      r0,|L5.152|
000082  4629              MOV      r1,r5                 ;735
000084  69e2              LDR      r2,[r4,#0x1c]         ;735
000086  6820              LDR      r0,[r4,#0]            ;735
000088  f7fffffe          BL       os_memcpy
00008c  a143              ADR      r1,|L5.412|
00008e  2000              MOVS     r0,#0                 ;736
000090  69e3              LDR      r3,[r4,#0x1c]         ;736
000092  6822              LDR      r2,[r4,#0]            ;736
000094  f7fffffe          BL       wpa_hexdump_key
                  |L5.152|
000098  69e0              LDR      r0,[r4,#0x1c]         ;739
00009a  4405              ADD      r5,r5,r0              ;739
00009c  6a20              LDR      r0,[r4,#0x20]         ;741
00009e  f7fffffe          BL       os_malloc
0000a2  6060              STR      r0,[r4,#4]            ;741
0000a4  6860              LDR      r0,[r4,#4]            ;742
0000a6  b150              CBZ      r0,|L5.190|
0000a8  4629              MOV      r1,r5                 ;743
0000aa  6a22              LDR      r2,[r4,#0x20]         ;743
0000ac  6860              LDR      r0,[r4,#4]            ;743
0000ae  f7fffffe          BL       os_memcpy
0000b2  a13d              ADR      r1,|L5.424|
0000b4  2000              MOVS     r0,#0                 ;744
0000b6  6a23              LDR      r3,[r4,#0x20]         ;744
0000b8  6862              LDR      r2,[r4,#4]            ;744
0000ba  f7fffffe          BL       wpa_hexdump_key
                  |L5.190|
0000be  6a20              LDR      r0,[r4,#0x20]         ;747
0000c0  4405              ADD      r5,r5,r0              ;747
0000c2  6a20              LDR      r0,[r4,#0x20]         ;749
0000c4  f7fffffe          BL       os_malloc
0000c8  60a0              STR      r0,[r4,#8]            ;749
0000ca  68a0              LDR      r0,[r4,#8]            ;750
0000cc  b150              CBZ      r0,|L5.228|
0000ce  4629              MOV      r1,r5                 ;751
0000d0  6a22              LDR      r2,[r4,#0x20]         ;751
0000d2  68a0              LDR      r0,[r4,#8]            ;751
0000d4  f7fffffe          BL       os_memcpy
0000d8  a137              ADR      r1,|L5.440|
0000da  2000              MOVS     r0,#0                 ;752
0000dc  6a23              LDR      r3,[r4,#0x20]         ;752
0000de  68a2              LDR      r2,[r4,#8]            ;752
0000e0  f7fffffe          BL       wpa_hexdump_key
                  |L5.228|
0000e4  6a20              LDR      r0,[r4,#0x20]         ;755
0000e6  4405              ADD      r5,r5,r0              ;755
0000e8  6a60              LDR      r0,[r4,#0x24]         ;757
0000ea  f7fffffe          BL       os_malloc
0000ee  60e0              STR      r0,[r4,#0xc]          ;757
0000f0  68e0              LDR      r0,[r4,#0xc]          ;758
0000f2  b150              CBZ      r0,|L5.266|
0000f4  4629              MOV      r1,r5                 ;759
0000f6  6a62              LDR      r2,[r4,#0x24]         ;759
0000f8  68e0              LDR      r0,[r4,#0xc]          ;759
0000fa  f7fffffe          BL       os_memcpy
0000fe  a132              ADR      r1,|L5.456|
000100  2000              MOVS     r0,#0                 ;760
000102  6a63              LDR      r3,[r4,#0x24]         ;760
000104  68e2              LDR      r2,[r4,#0xc]          ;760
000106  f7fffffe          BL       wpa_hexdump_key
                  |L5.266|
00010a  6a60              LDR      r0,[r4,#0x24]         ;763
00010c  4405              ADD      r5,r5,r0              ;763
00010e  6a60              LDR      r0,[r4,#0x24]         ;765
000110  f7fffffe          BL       os_malloc
000114  6120              STR      r0,[r4,#0x10]         ;765
000116  6920              LDR      r0,[r4,#0x10]         ;766
000118  b150              CBZ      r0,|L5.304|
00011a  4629              MOV      r1,r5                 ;767
00011c  6a62              LDR      r2,[r4,#0x24]         ;767
00011e  6920              LDR      r0,[r4,#0x10]         ;767
000120  f7fffffe          BL       os_memcpy
000124  a12c              ADR      r1,|L5.472|
000126  2000              MOVS     r0,#0                 ;768
000128  6a63              LDR      r3,[r4,#0x24]         ;768
00012a  6922              LDR      r2,[r4,#0x10]         ;768
00012c  f7fffffe          BL       wpa_hexdump_key
                  |L5.304|
000130  6a60              LDR      r0,[r4,#0x24]         ;771
000132  4405              ADD      r5,r5,r0              ;771
000134  6aa0              LDR      r0,[r4,#0x28]         ;773
000136  f7fffffe          BL       os_malloc
00013a  6160              STR      r0,[r4,#0x14]         ;773
00013c  6960              LDR      r0,[r4,#0x14]         ;774
00013e  b150              CBZ      r0,|L5.342|
000140  4629              MOV      r1,r5                 ;775
000142  6aa2              LDR      r2,[r4,#0x28]         ;775
000144  6960              LDR      r0,[r4,#0x14]         ;775
000146  f7fffffe          BL       os_memcpy
00014a  a127              ADR      r1,|L5.488|
00014c  2000              MOVS     r0,#0                 ;776
00014e  6aa3              LDR      r3,[r4,#0x28]         ;776
000150  6962              LDR      r2,[r4,#0x14]         ;776
000152  f7fffffe          BL       wpa_hexdump_key
                  |L5.342|
000156  6aa0              LDR      r0,[r4,#0x28]         ;779
000158  4405              ADD      r5,r5,r0              ;779
00015a  6aa0              LDR      r0,[r4,#0x28]         ;781
00015c  f7fffffe          BL       os_malloc
000160  61a0              STR      r0,[r4,#0x18]         ;781
000162  69a0              LDR      r0,[r4,#0x18]         ;782
000164  b150              CBZ      r0,|L5.380|
000166  4629              MOV      r1,r5                 ;783
000168  6aa2              LDR      r2,[r4,#0x28]         ;783
00016a  69a0              LDR      r0,[r4,#0x18]         ;783
00016c  f7fffffe          BL       os_memcpy
000170  a121              ADR      r1,|L5.504|
000172  2000              MOVS     r0,#0                 ;784
000174  6aa3              LDR      r3,[r4,#0x28]         ;784
000176  69a2              LDR      r2,[r4,#0x18]         ;784
000178  f7fffffe          BL       wpa_hexdump_key
                  |L5.380|
00017c  4638              MOV      r0,r7                 ;788
00017e  f7fffffe          BL       os_free
000182  4620              MOV      r0,r4                 ;790
000184  f7fffffe          BL       ikev2_keys_set
000188  b928              CBNZ     r0,|L5.406|
00018a  4620              MOV      r0,r4                 ;791
00018c  f7fffffe          BL       ikev2_free_keys
000190  f04f30ff          MOV      r0,#0xffffffff        ;792
000194  e75b              B        |L5.78|
                  |L5.406|
000196  2000              MOVS     r0,#0                 ;795
000198  e759              B        |L5.78|
                          ENDP

00019a  0000              DCW      0x0000
                  |L5.412|
00019c  494b4556          DCB      "IKEV2: SK_d",0
0001a0  323a2053
0001a4  4b5f6400
                  |L5.424|
0001a8  494b4556          DCB      "IKEV2: SK_ai",0
0001ac  323a2053
0001b0  4b5f6169
0001b4  00      
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L5.440|
0001b8  494b4556          DCB      "IKEV2: SK_ar",0
0001bc  323a2053
0001c0  4b5f6172
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L5.456|
0001c8  494b4556          DCB      "IKEV2: SK_ei",0
0001cc  323a2053
0001d0  4b5f6569
0001d4  00      
0001d5  00                DCB      0
0001d6  00                DCB      0
0001d7  00                DCB      0
                  |L5.472|
0001d8  494b4556          DCB      "IKEV2: SK_er",0
0001dc  323a2053
0001e0  4b5f6572
0001e4  00      
0001e5  00                DCB      0
0001e6  00                DCB      0
0001e7  00                DCB      0
                  |L5.488|
0001e8  494b4556          DCB      "IKEV2: SK_pi",0
0001ec  323a2053
0001f0  4b5f7069
0001f4  00      
0001f5  00                DCB      0
0001f6  00                DCB      0
0001f7  00                DCB      0
                  |L5.504|
0001f8  494b4556          DCB      "IKEV2: SK_pr",0
0001fc  323a2053
000200  4b5f7072
000204  00      
000205  00                DCB      0
000206  00                DCB      0
000207  00                DCB      0

                          AREA ||i.ikev2_encr_decrypt||, CODE, READONLY, ALIGN=2

                  ikev2_encr_decrypt PROC
;;;252    
;;;253    int ikev2_encr_decrypt(int alg, const u8 *key, size_t key_len, const u8 *iv,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;254    		       const u8 *crypt, u8 *plain, size_t len)
;;;255    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0e          LDRD     r10,r11,[sp,#0x38]
;;;256    	struct crypto_cipher *cipher;
;;;257    	int encr_alg;
;;;258    
;;;259    #ifdef CCNS_PL
;;;260    	if (alg == ENCR_3DES) {
;;;261    		struct des3_key_s des3key;
;;;262    		size_t i, blocks;
;;;263    
;;;264    		/* ECB mode is used incorrectly for 3DES!? */
;;;265    		if (key_len != 24) {
;;;266    			wpa_printf(MSG_INFO, "IKEV2: Invalid encr key length");
;;;267    			return -1;
;;;268    		}
;;;269    		des3_key_setup(key, &des3key);
;;;270    
;;;271    		if (len % 8) {
;;;272    			wpa_printf(MSG_INFO, "IKEV2: Invalid encrypted "
;;;273    				   "length");
;;;274    			return -1;
;;;275    		}
;;;276    		blocks = len / 8;
;;;277    		for (i = 0; i < blocks; i++) {
;;;278    			des3_decrypt(crypt, &des3key, plain);
;;;279    			plain += 8;
;;;280    			crypt += 8;
;;;281    		}
;;;282    	} else {
;;;283    #endif /* CCNS_PL */
;;;284    	switch (alg) {
000010  2c03              CMP      r4,#3
000012  d002              BEQ      |L6.26|
000014  2c0c              CMP      r4,#0xc
000016  d104              BNE      |L6.34|
000018  e001              B        |L6.30|
                  |L6.26|
;;;285    	case ENCR_3DES:
;;;286    		encr_alg = CRYPTO_CIPHER_ALG_3DES;
00001a  2602              MOVS     r6,#2
;;;287    		break;
00001c  e00b              B        |L6.54|
                  |L6.30|
;;;288    	case ENCR_AES_CBC:
;;;289    		encr_alg = CRYPTO_CIPHER_ALG_AES;
00001e  2601              MOVS     r6,#1
;;;290    		break;
000020  e009              B        |L6.54|
                  |L6.34|
;;;291    	default:
;;;292    		wpa_printf(MSG_DEBUG, "IKEV2: Unsupported encr alg %d", alg);
000022  4622              MOV      r2,r4
000024  a117              ADR      r1,|L6.132|
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       wpa_printf
;;;293    		return -1;
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L6.48|
;;;294    	}
;;;295    
;;;296    	cipher = crypto_cipher_init(encr_alg, iv, key, key_len);
;;;297    	if (cipher == NULL) {
;;;298    		wpa_printf(MSG_INFO, "IKEV2: Failed to initialize cipher");
;;;299    		return -1;
;;;300    	}
;;;301    
;;;302    	if (crypto_cipher_decrypt(cipher, crypt, plain, len) < 0) {
;;;303    		wpa_printf(MSG_INFO, "IKEV2: Decryption failed");
;;;304    		crypto_cipher_deinit(cipher);
;;;305    		return -1;
;;;306    	}
;;;307    	crypto_cipher_deinit(cipher);
;;;308    #ifdef CCNS_PL
;;;309    	}
;;;310    #endif /* CCNS_PL */
;;;311    
;;;312    	return 0;
;;;313    }
000030  b004              ADD      sp,sp,#0x10
000032  e8bd9ff0          POP      {r4-r12,pc}
                  |L6.54|
000036  bf00              NOP                            ;287
000038  4643              MOV      r3,r8                 ;296
00003a  463a              MOV      r2,r7                 ;296
00003c  4649              MOV      r1,r9                 ;296
00003e  b2f0              UXTB     r0,r6                 ;296
000040  f7fffffe          BL       crypto_cipher_init
000044  4605              MOV      r5,r0                 ;296
000046  b935              CBNZ     r5,|L6.86|
000048  a116              ADR      r1,|L6.164|
00004a  2000              MOVS     r0,#0                 ;298
00004c  f7fffffe          BL       wpa_printf
000050  f04f30ff          MOV      r0,#0xffffffff        ;299
000054  e7ec              B        |L6.48|
                  |L6.86|
000056  465a              MOV      r2,r11                ;302
000058  4651              MOV      r1,r10                ;302
00005a  4628              MOV      r0,r5                 ;302
00005c  9b10              LDR      r3,[sp,#0x40]         ;302
00005e  f7fffffe          BL       crypto_cipher_decrypt
000062  2800              CMP      r0,#0                 ;302
000064  da09              BGE      |L6.122|
000066  a118              ADR      r1,|L6.200|
000068  2000              MOVS     r0,#0                 ;303
00006a  f7fffffe          BL       wpa_printf
00006e  4628              MOV      r0,r5                 ;304
000070  f7fffffe          BL       crypto_cipher_deinit
000074  f04f30ff          MOV      r0,#0xffffffff        ;305
000078  e7da              B        |L6.48|
                  |L6.122|
00007a  4628              MOV      r0,r5                 ;307
00007c  f7fffffe          BL       crypto_cipher_deinit
000080  2000              MOVS     r0,#0                 ;312
000082  e7d5              B        |L6.48|
;;;314    
                          ENDP

                  |L6.132|
000084  494b4556          DCB      "IKEV2: Unsupported encr alg %d",0
000088  323a2055
00008c  6e737570
000090  706f7274
000094  65642065
000098  6e637220
00009c  616c6720
0000a0  256400  
0000a3  00                DCB      0
                  |L6.164|
0000a4  494b4556          DCB      "IKEV2: Failed to initialize cipher",0
0000a8  323a2046
0000ac  61696c65
0000b0  6420746f
0000b4  20696e69
0000b8  7469616c
0000bc  697a6520
0000c0  63697068
0000c4  657200  
0000c7  00                DCB      0
                  |L6.200|
0000c8  494b4556          DCB      "IKEV2: Decryption failed",0
0000cc  323a2044
0000d0  65637279
0000d4  7074696f
0000d8  6e206661
0000dc  696c6564
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i.ikev2_encr_encrypt||, CODE, READONLY, ALIGN=2

                  ikev2_encr_encrypt PROC
;;;193    
;;;194    int ikev2_encr_encrypt(int alg, const u8 *key, size_t key_len, const u8 *iv,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;195    		       const u8 *plain, u8 *crypt, size_t len)
;;;196    {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  e9ddab0e          LDRD     r10,r11,[sp,#0x38]
;;;197    	struct crypto_cipher *cipher;
;;;198    	int encr_alg;
;;;199    
;;;200    #ifdef CCNS_PL
;;;201    	if (alg == ENCR_3DES) {
;;;202    		struct des3_key_s des3key;
;;;203    		size_t i, blocks;
;;;204    		u8 *pos;
;;;205    
;;;206    		/* ECB mode is used incorrectly for 3DES!? */
;;;207    		if (key_len != 24) {
;;;208    			wpa_printf(MSG_INFO, "IKEV2: Invalid encr key length");
;;;209    			return -1;
;;;210    		}
;;;211    		des3_key_setup(key, &des3key);
;;;212    
;;;213    		blocks = len / 8;
;;;214    		pos = crypt;
;;;215    		for (i = 0; i < blocks; i++) {
;;;216    			des3_encrypt(pos, &des3key, pos);
;;;217    			pos += 8;
;;;218    		}
;;;219    	} else {
;;;220    #endif /* CCNS_PL */
;;;221    	switch (alg) {
000010  2c03              CMP      r4,#3
000012  d002              BEQ      |L7.26|
000014  2c0c              CMP      r4,#0xc
000016  d104              BNE      |L7.34|
000018  e001              B        |L7.30|
                  |L7.26|
;;;222    	case ENCR_3DES:
;;;223    		encr_alg = CRYPTO_CIPHER_ALG_3DES;
00001a  2602              MOVS     r6,#2
;;;224    		break;
00001c  e00b              B        |L7.54|
                  |L7.30|
;;;225    	case ENCR_AES_CBC:
;;;226    		encr_alg = CRYPTO_CIPHER_ALG_AES;
00001e  2601              MOVS     r6,#1
;;;227    		break;
000020  e009              B        |L7.54|
                  |L7.34|
;;;228    	default:
;;;229    		wpa_printf(MSG_DEBUG, "IKEV2: Unsupported encr alg %d", alg);
000022  4622              MOV      r2,r4
000024  a117              ADR      r1,|L7.132|
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       wpa_printf
;;;230    		return -1;
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L7.48|
;;;231    	}
;;;232    
;;;233    	cipher = crypto_cipher_init(encr_alg, iv, key, key_len);
;;;234    	if (cipher == NULL) {
;;;235    		wpa_printf(MSG_INFO, "IKEV2: Failed to initialize cipher");
;;;236    		return -1;
;;;237    	}
;;;238    
;;;239    	if (crypto_cipher_encrypt(cipher, plain, crypt, len) < 0) {
;;;240    		wpa_printf(MSG_INFO, "IKEV2: Encryption failed");
;;;241    		crypto_cipher_deinit(cipher);
;;;242    		return -1;
;;;243    	}
;;;244    	crypto_cipher_deinit(cipher);
;;;245    #ifdef CCNS_PL
;;;246    	}
;;;247    #endif /* CCNS_PL */
;;;248    
;;;249    	return 0;
;;;250    }
000030  b004              ADD      sp,sp,#0x10
000032  e8bd9ff0          POP      {r4-r12,pc}
                  |L7.54|
000036  bf00              NOP                            ;224
000038  4643              MOV      r3,r8                 ;233
00003a  463a              MOV      r2,r7                 ;233
00003c  4649              MOV      r1,r9                 ;233
00003e  b2f0              UXTB     r0,r6                 ;233
000040  f7fffffe          BL       crypto_cipher_init
000044  4605              MOV      r5,r0                 ;233
000046  b935              CBNZ     r5,|L7.86|
000048  a116              ADR      r1,|L7.164|
00004a  2000              MOVS     r0,#0                 ;235
00004c  f7fffffe          BL       wpa_printf
000050  f04f30ff          MOV      r0,#0xffffffff        ;236
000054  e7ec              B        |L7.48|
                  |L7.86|
000056  465a              MOV      r2,r11                ;239
000058  4651              MOV      r1,r10                ;239
00005a  4628              MOV      r0,r5                 ;239
00005c  9b10              LDR      r3,[sp,#0x40]         ;239
00005e  f7fffffe          BL       crypto_cipher_encrypt
000062  2800              CMP      r0,#0                 ;239
000064  da09              BGE      |L7.122|
000066  a118              ADR      r1,|L7.200|
000068  2000              MOVS     r0,#0                 ;240
00006a  f7fffffe          BL       wpa_printf
00006e  4628              MOV      r0,r5                 ;241
000070  f7fffffe          BL       crypto_cipher_deinit
000074  f04f30ff          MOV      r0,#0xffffffff        ;242
000078  e7da              B        |L7.48|
                  |L7.122|
00007a  4628              MOV      r0,r5                 ;244
00007c  f7fffffe          BL       crypto_cipher_deinit
000080  2000              MOVS     r0,#0                 ;249
000082  e7d5              B        |L7.48|
;;;251    
                          ENDP

                  |L7.132|
000084  494b4556          DCB      "IKEV2: Unsupported encr alg %d",0
000088  323a2055
00008c  6e737570
000090  706f7274
000094  65642065
000098  6e637220
00009c  616c6720
0000a0  256400  
0000a3  00                DCB      0
                  |L7.164|
0000a4  494b4556          DCB      "IKEV2: Failed to initialize cipher",0
0000a8  323a2046
0000ac  61696c65
0000b0  6420746f
0000b4  20696e69
0000b8  7469616c
0000bc  697a6520
0000c0  63697068
0000c4  657200  
0000c7  00                DCB      0
                  |L7.200|
0000c8  494b4556          DCB      "IKEV2: Encryption failed",0
0000cc  323a2045
0000d0  6e637279
0000d4  7074696f
0000d8  6e206661
0000dc  696c6564
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0

                          AREA ||i.ikev2_free_keys||, CODE, READONLY, ALIGN=1

                  ikev2_free_keys PROC
;;;681    
;;;682    void ikev2_free_keys(struct ikev2_keys *keys)
000000  b510              PUSH     {r4,lr}
;;;683    {
000002  4604              MOV      r4,r0
;;;684    	os_free(keys->SK_d);
000004  6820              LDR      r0,[r4,#0]
000006  f7fffffe          BL       os_free
;;;685    	os_free(keys->SK_ai);
00000a  6860              LDR      r0,[r4,#4]
00000c  f7fffffe          BL       os_free
;;;686    	os_free(keys->SK_ar);
000010  68a0              LDR      r0,[r4,#8]
000012  f7fffffe          BL       os_free
;;;687    	os_free(keys->SK_ei);
000016  68e0              LDR      r0,[r4,#0xc]
000018  f7fffffe          BL       os_free
;;;688    	os_free(keys->SK_er);
00001c  6920              LDR      r0,[r4,#0x10]
00001e  f7fffffe          BL       os_free
;;;689    	os_free(keys->SK_pi);
000022  6960              LDR      r0,[r4,#0x14]
000024  f7fffffe          BL       os_free
;;;690    	os_free(keys->SK_pr);
000028  69a0              LDR      r0,[r4,#0x18]
00002a  f7fffffe          BL       os_free
;;;691    	keys->SK_d = keys->SK_ai = keys->SK_ar = keys->SK_ei = keys->SK_er =
00002e  2000              MOVS     r0,#0
000030  61a0              STR      r0,[r4,#0x18]
000032  6160              STR      r0,[r4,#0x14]
000034  6120              STR      r0,[r4,#0x10]
000036  60e0              STR      r0,[r4,#0xc]
000038  60a0              STR      r0,[r4,#8]
00003a  6060              STR      r0,[r4,#4]
00003c  6020              STR      r0,[r4,#0]
;;;692    		keys->SK_pi = keys->SK_pr = NULL;
;;;693    }
00003e  bd10              POP      {r4,pc}
;;;694    
                          ENDP


                          AREA ||i.ikev2_get_encr||, CODE, READONLY, ALIGN=2

                  ikev2_get_encr PROC
;;;167    
;;;168    const struct ikev2_encr_alg * ikev2_get_encr(int id)
000000  4602              MOV      r2,r0
;;;169    {
;;;170    	size_t i;
;;;171    
;;;172    	for (i = 0; i < NUM_ENCR_ALGS; i++) {
000002  2100              MOVS     r1,#0
000004  e00c              B        |L9.32|
                  |L9.6|
;;;173    		if (ikev2_encr_algs[i].id == id)
000006  eb010041          ADD      r0,r1,r1,LSL #1
00000a  4b07              LDR      r3,|L9.40|
00000c  f8530020          LDR      r0,[r3,r0,LSL #2]
000010  4290              CMP      r0,r2
000012  d104              BNE      |L9.30|
;;;174    			return &ikev2_encr_algs[i];
000014  eb010041          ADD      r0,r1,r1,LSL #1
000018  eb030080          ADD      r0,r3,r0,LSL #2
                  |L9.28|
;;;175    	}
;;;176    
;;;177    	return NULL;
;;;178    }
00001c  4770              BX       lr
                  |L9.30|
00001e  1c49              ADDS     r1,r1,#1              ;172
                  |L9.32|
000020  2902              CMP      r1,#2                 ;172
000022  d3f0              BCC      |L9.6|
000024  2000              MOVS     r0,#0                 ;177
000026  e7f9              B        |L9.28|
;;;179    
                          ENDP

                  |L9.40|
                          DCD      ikev2_encr_algs

                          AREA ||i.ikev2_get_integ||, CODE, READONLY, ALIGN=2

                  ikev2_get_integ PROC
;;;47     
;;;48     const struct ikev2_integ_alg * ikev2_get_integ(int id)
000000  4602              MOV      r2,r0
;;;49     {
;;;50     	size_t i;
;;;51     
;;;52     	for (i = 0; i < NUM_INTEG_ALGS; i++) {
000002  2100              MOVS     r1,#0
000004  e00c              B        |L10.32|
                  |L10.6|
;;;53     		if (ikev2_integ_algs[i].id == id)
000006  eb010041          ADD      r0,r1,r1,LSL #1
00000a  4b07              LDR      r3,|L10.40|
00000c  f8530020          LDR      r0,[r3,r0,LSL #2]
000010  4290              CMP      r0,r2
000012  d104              BNE      |L10.30|
;;;54     			return &ikev2_integ_algs[i];
000014  eb010041          ADD      r0,r1,r1,LSL #1
000018  eb030080          ADD      r0,r3,r0,LSL #2
                  |L10.28|
;;;55     	}
;;;56     
;;;57     	return NULL;
;;;58     }
00001c  4770              BX       lr
                  |L10.30|
00001e  1c49              ADDS     r1,r1,#1              ;52
                  |L10.32|
000020  2902              CMP      r1,#2                 ;52
000022  d3f0              BCC      |L10.6|
000024  2000              MOVS     r0,#0                 ;57
000026  e7f9              B        |L10.28|
;;;59     
                          ENDP

                  |L10.40|
                          DCD      ikev2_integ_algs

                          AREA ||i.ikev2_get_prf||, CODE, READONLY, ALIGN=2

                  ikev2_get_prf PROC
;;;86     
;;;87     const struct ikev2_prf_alg * ikev2_get_prf(int id)
000000  4602              MOV      r2,r0
;;;88     {
;;;89     	size_t i;
;;;90     
;;;91     	for (i = 0; i < NUM_PRF_ALGS; i++) {
000002  2100              MOVS     r1,#0
000004  e00c              B        |L11.32|
                  |L11.6|
;;;92     		if (ikev2_prf_algs[i].id == id)
000006  eb010041          ADD      r0,r1,r1,LSL #1
00000a  4b07              LDR      r3,|L11.40|
00000c  f8530020          LDR      r0,[r3,r0,LSL #2]
000010  4290              CMP      r0,r2
000012  d104              BNE      |L11.30|
;;;93     			return &ikev2_prf_algs[i];
000014  eb010041          ADD      r0,r1,r1,LSL #1
000018  eb030080          ADD      r0,r3,r0,LSL #2
                  |L11.28|
;;;94     	}
;;;95     
;;;96     	return NULL;
;;;97     }
00001c  4770              BX       lr
                  |L11.30|
00001e  1c49              ADDS     r1,r1,#1              ;91
                  |L11.32|
000020  2902              CMP      r1,#2                 ;91
000022  d3f0              BCC      |L11.6|
000024  2000              MOVS     r0,#0                 ;96
000026  e7f9              B        |L11.28|
;;;98     
                          ENDP

                  |L11.40|
                          DCD      ikev2_prf_algs

                          AREA ||i.ikev2_integ_hash||, CODE, READONLY, ALIGN=1

                  ikev2_integ_hash PROC
;;;60     
;;;61     int ikev2_integ_hash(int alg, const u8 *key, size_t key_len, const u8 *data,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;62     		     size_t data_len, u8 *hash)
;;;63     {
000004  b087              SUB      sp,sp,#0x1c
000006  4605              MOV      r5,r0
000008  460e              MOV      r6,r1
00000a  4614              MOV      r4,r2
00000c  461f              MOV      r7,r3
00000e  e9dd890e          LDRD     r8,r9,[sp,#0x38]
;;;64     	u8 tmphash[IKEV2_MAX_HASH_LEN];
;;;65     
;;;66     	switch (alg) {
000012  2d01              CMP      r5,#1
000014  d015              BEQ      |L12.66|
000016  2d02              CMP      r5,#2
000018  d126              BNE      |L12.104|
;;;67     	case AUTH_HMAC_SHA1_96:
;;;68     		if (key_len != 20)
00001a  2c14              CMP      r4,#0x14
00001c  d003              BEQ      |L12.38|
;;;69     			return -1;
00001e  1ec0              SUBS     r0,r0,#3
                  |L12.32|
;;;70     		hmac_sha1(key, key_len, data, data_len, tmphash);
;;;71     		os_memcpy(hash, tmphash, 12);
;;;72     		break;
;;;73     	case AUTH_HMAC_MD5_96:
;;;74     		if (key_len != 16)
;;;75     			return -1;
;;;76     		hmac_md5(key, key_len, data, data_len, tmphash);
;;;77     		os_memcpy(hash, tmphash, 12);
;;;78     		break;
;;;79     	default:
;;;80     		return -1;
;;;81     	}
;;;82     
;;;83     	return 0;
;;;84     }
000020  b007              ADD      sp,sp,#0x1c
000022  e8bd83f0          POP      {r4-r9,pc}
                  |L12.38|
000026  ab02              ADD      r3,sp,#8              ;70
000028  9300              STR      r3,[sp,#0]            ;70
00002a  4643              MOV      r3,r8                 ;70
00002c  463a              MOV      r2,r7                 ;70
00002e  4621              MOV      r1,r4                 ;70
000030  4630              MOV      r0,r6                 ;70
000032  f7fffffe          BL       hmac_sha1
000036  220c              MOVS     r2,#0xc               ;71
000038  a902              ADD      r1,sp,#8              ;71
00003a  4648              MOV      r0,r9                 ;71
00003c  f7fffffe          BL       os_memcpy
000040  e015              B        |L12.110|
                  |L12.66|
000042  2c10              CMP      r4,#0x10              ;74
000044  d002              BEQ      |L12.76|
000046  f04f30ff          MOV      r0,#0xffffffff        ;75
00004a  e7e9              B        |L12.32|
                  |L12.76|
00004c  ab02              ADD      r3,sp,#8              ;76
00004e  9300              STR      r3,[sp,#0]            ;76
000050  4643              MOV      r3,r8                 ;76
000052  463a              MOV      r2,r7                 ;76
000054  4621              MOV      r1,r4                 ;76
000056  4630              MOV      r0,r6                 ;76
000058  f7fffffe          BL       hmac_md5
00005c  220c              MOVS     r2,#0xc               ;77
00005e  a902              ADD      r1,sp,#8              ;77
000060  4648              MOV      r0,r9                 ;77
000062  f7fffffe          BL       os_memcpy
000066  e002              B        |L12.110|
                  |L12.104|
000068  f04f30ff          MOV      r0,#0xffffffff        ;80
00006c  e7d8              B        |L12.32|
                  |L12.110|
00006e  bf00              NOP                            ;72
000070  2000              MOVS     r0,#0                 ;83
000072  e7d5              B        |L12.32|
;;;85     
                          ENDP


                          AREA ||i.ikev2_keys_set||, CODE, READONLY, ALIGN=1

                  ikev2_keys_set PROC
;;;674    
;;;675    int ikev2_keys_set(struct ikev2_keys *keys)
000000  4601              MOV      r1,r0
;;;676    {
;;;677    	return keys->SK_d && keys->SK_ai && keys->SK_ar && keys->SK_ei &&
000002  6808              LDR      r0,[r1,#0]
000004  b168              CBZ      r0,|L13.34|
000006  6848              LDR      r0,[r1,#4]
000008  b158              CBZ      r0,|L13.34|
00000a  6888              LDR      r0,[r1,#8]
00000c  b148              CBZ      r0,|L13.34|
00000e  68c8              LDR      r0,[r1,#0xc]
000010  b138              CBZ      r0,|L13.34|
;;;678    		keys->SK_er && keys->SK_pi && keys->SK_pr;
000012  6908              LDR      r0,[r1,#0x10]
000014  b128              CBZ      r0,|L13.34|
000016  6948              LDR      r0,[r1,#0x14]
000018  b118              CBZ      r0,|L13.34|
00001a  6988              LDR      r0,[r1,#0x18]
00001c  b108              CBZ      r0,|L13.34|
00001e  2001              MOVS     r0,#1                 ;677
                  |L13.32|
;;;679    }
000020  4770              BX       lr
                  |L13.34|
000022  2000              MOVS     r0,#0                 ;677
000024  e7fc              B        |L13.32|
;;;680    
                          ENDP


                          AREA ||i.ikev2_parse_payloads||, CODE, READONLY, ALIGN=2

                  ikev2_parse_payloads PROC
;;;315    
;;;316    int ikev2_parse_payloads(struct ikev2_payloads *payloads,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;317    			 u8 next_payload, const u8 *pos, const u8 *end)
;;;318    {
000004  4604              MOV      r4,r0
000006  468b              MOV      r11,r1
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
;;;319    	const struct ikev2_payload_hdr *phdr;
;;;320    
;;;321    	os_memset(payloads, 0, sizeof(*payloads));
00000c  224c              MOVS     r2,#0x4c
00000e  2100              MOVS     r1,#0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       os_memset
;;;322    
;;;323    	while (next_payload != IKEV2_PAYLOAD_NO_NEXT_PAYLOAD) {
000016  e0a6              B        |L14.358|
                  |L14.24|
;;;324    		int plen, pdatalen;
;;;325    		const u8 *pdata;
;;;326    		wpa_printf(MSG_DEBUG, "IKEV2: Processing payload %u",
000018  465a              MOV      r2,r11
00001a  a15a              ADR      r1,|L14.388|
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       wpa_printf
;;;327    			   next_payload);
;;;328    		if (end - pos < (int) sizeof(*phdr)) {
000022  ebaa0005          SUB      r0,r10,r5
000026  2804              CMP      r0,#4
000028  da05              BGE      |L14.54|
;;;329    			wpa_printf(MSG_INFO, "IKEV2:   Too short message for "
00002a  ebaa0205          SUB      r2,r10,r5
00002e  a15d              ADR      r1,|L14.420|
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       wpa_printf
                  |L14.54|
;;;330    				   "payload header (left=%ld)",
;;;331    				   (long) (end - pos));
;;;332    		}
;;;333    		phdr = (const struct ikev2_payload_hdr *) pos;
000036  46a8              MOV      r8,r5
;;;334    		plen = WPA_GET_BE16(phdr->payload_length);
000038  f8980003          LDRB     r0,[r8,#3]
00003c  4645              MOV      r5,r8
00003e  f8981002          LDRB     r1,[r8,#2]
000042  ea402901          ORR      r9,r0,r1,LSL #8
;;;335    		if (plen < (int) sizeof(*phdr) || pos + plen > end) {
000046  f1b90f04          CMP      r9,#4
00004a  db03              BLT      |L14.84|
00004c  eb050009          ADD      r0,r5,r9
000050  4550              CMP      r0,r10
000052  d908              BLS      |L14.102|
                  |L14.84|
;;;336    			wpa_printf(MSG_INFO, "IKEV2:   Invalid payload header "
000054  464a              MOV      r2,r9
000056  a162              ADR      r1,|L14.480|
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       wpa_printf
;;;337    				   "length %d", plen);
;;;338    			return -1;
00005e  f04f30ff          MOV      r0,#0xffffffff
                  |L14.98|
;;;339    		}
;;;340    
;;;341    		wpa_printf(MSG_DEBUG, "IKEV2:   Next Payload: %u  Flags: 0x%x"
;;;342    			   "  Payload Length: %d",
;;;343    			   phdr->next_payload, phdr->flags, plen);
;;;344    
;;;345    		pdata = (const u8 *) (phdr + 1);
;;;346    		pdatalen = plen - sizeof(*phdr);
;;;347    
;;;348    		switch (next_payload) {
;;;349    		case IKEV2_PAYLOAD_SA:
;;;350    			wpa_printf(MSG_DEBUG, "IKEV2:   Payload: Security "
;;;351    				   "Association");
;;;352    			payloads->sa = pdata;
;;;353    			payloads->sa_len = pdatalen;
;;;354    			break;
;;;355    		case IKEV2_PAYLOAD_KEY_EXCHANGE:
;;;356    			wpa_printf(MSG_DEBUG, "IKEV2:   Payload: Key "
;;;357    				   "Exchange");
;;;358    			payloads->ke = pdata;
;;;359    			payloads->ke_len = pdatalen;
;;;360    			break;
;;;361    		case IKEV2_PAYLOAD_IDi:
;;;362    			wpa_printf(MSG_DEBUG, "IKEV2:   Payload: IDi");
;;;363    			payloads->idi = pdata;
;;;364    			payloads->idi_len = pdatalen;
;;;365    			break;
;;;366    		case IKEV2_PAYLOAD_IDr:
;;;367    			wpa_printf(MSG_DEBUG, "IKEV2:   Payload: IDr");
;;;368    			payloads->idr = pdata;
;;;369    			payloads->idr_len = pdatalen;
;;;370    			break;
;;;371    		case IKEV2_PAYLOAD_CERTIFICATE:
;;;372    			wpa_printf(MSG_DEBUG, "IKEV2:   Payload: Certificate");
;;;373    			payloads->cert = pdata;
;;;374    			payloads->cert_len = pdatalen;
;;;375    			break;
;;;376    		case IKEV2_PAYLOAD_AUTHENTICATION:
;;;377    			wpa_printf(MSG_DEBUG, "IKEV2:   Payload: "
;;;378    				   "Authentication");
;;;379    			payloads->auth = pdata;
;;;380    			payloads->auth_len = pdatalen;
;;;381    			break;
;;;382    		case IKEV2_PAYLOAD_NONCE:
;;;383    			wpa_printf(MSG_DEBUG, "IKEV2:   Payload: Nonce");
;;;384    			payloads->nonce = pdata;
;;;385    			payloads->nonce_len = pdatalen;
;;;386    			break;
;;;387    		case IKEV2_PAYLOAD_ENCRYPTED:
;;;388    			wpa_printf(MSG_DEBUG, "IKEV2:   Payload: Encrypted");
;;;389    			payloads->encrypted = pdata;
;;;390    			payloads->encrypted_len = pdatalen;
;;;391    			break;
;;;392    		case IKEV2_PAYLOAD_NOTIFICATION:
;;;393    			wpa_printf(MSG_DEBUG, "IKEV2:   Payload: "
;;;394    				   "Notification");
;;;395    			payloads->notification = pdata;
;;;396    			payloads->notification_len = pdatalen;
;;;397    			break;
;;;398    		default:
;;;399    			if (phdr->flags & IKEV2_PAYLOAD_FLAGS_CRITICAL) {
;;;400    				wpa_printf(MSG_INFO, "IKEV2:   Unsupported "
;;;401    					   "critical payload %u - reject the "
;;;402    					   "entire message", next_payload);
;;;403    				return -1;
;;;404    			} else {
;;;405    				wpa_printf(MSG_DEBUG, "IKEV2:   Skipped "
;;;406    					   "unsupported payload %u",
;;;407    					   next_payload);
;;;408    			}
;;;409    		}
;;;410    
;;;411    		if (next_payload == IKEV2_PAYLOAD_ENCRYPTED &&
;;;412    		    pos + plen == end) {
;;;413    			/*
;;;414    			 * Next Payload in the case of Encrypted Payload is
;;;415    			 * actually the payload type for the first embedded
;;;416    			 * payload.
;;;417    			 */
;;;418    			payloads->encr_next_payload = phdr->next_payload;
;;;419    			next_payload = IKEV2_PAYLOAD_NO_NEXT_PAYLOAD;
;;;420    		} else
;;;421    			next_payload = phdr->next_payload;
;;;422    
;;;423    		pos += plen;
;;;424    	}
;;;425    
;;;426    	if (pos != end) {
;;;427    		wpa_printf(MSG_INFO, "IKEV2: Unexpected extra data after "
;;;428    			   "payloads");
;;;429    		return -1;
;;;430    	}
;;;431    
;;;432    	return 0;
;;;433    }
000062  e8bd8ff8          POP      {r3-r11,pc}
                  |L14.102|
000066  f8cd9000          STR      r9,[sp,#0]            ;341
00006a  f8983001          LDRB     r3,[r8,#1]            ;341
00006e  f8982000          LDRB     r2,[r8,#0]            ;341
000072  a166              ADR      r1,|L14.524|
000074  2000              MOVS     r0,#0                 ;341
000076  f7fffffe          BL       wpa_printf
00007a  f1080704          ADD      r7,r8,#4              ;345
00007e  f1a90604          SUB      r6,r9,#4              ;346
000082  f1ab0021          SUB      r0,r11,#0x21          ;348
000086  280e              CMP      r0,#0xe               ;348
000088  d247              BCS      |L14.282|
00008a  e8dff000          TBB      [pc,r0]               ;348
00008e  070e              DCB      0x07,0x0e
000090  151c2346          DCB      0x15,0x1c,0x23,0x46
000094  2a313f46          DCB      0x2a,0x31,0x3f,0x46
000098  46464638          DCB      0x46,0x46,0x46,0x38
00009c  a16a              ADR      r1,|L14.584|
00009e  2000              MOVS     r0,#0                 ;350
0000a0  f7fffffe          BL       wpa_printf
0000a4  6027              STR      r7,[r4,#0]            ;352
0000a6  6066              STR      r6,[r4,#4]            ;353
0000a8  e04a              B        |L14.320|
0000aa  a171              ADR      r1,|L14.624|
0000ac  2000              MOVS     r0,#0                 ;356
0000ae  f7fffffe          BL       wpa_printf
0000b2  60a7              STR      r7,[r4,#8]            ;358
0000b4  60e6              STR      r6,[r4,#0xc]          ;359
0000b6  e043              B        |L14.320|
0000b8  a175              ADR      r1,|L14.656|
0000ba  2000              MOVS     r0,#0                 ;362
0000bc  f7fffffe          BL       wpa_printf
0000c0  6127              STR      r7,[r4,#0x10]         ;363
0000c2  6166              STR      r6,[r4,#0x14]         ;364
0000c4  e03c              B        |L14.320|
0000c6  a178              ADR      r1,|L14.680|
0000c8  2000              MOVS     r0,#0                 ;367
0000ca  f7fffffe          BL       wpa_printf
0000ce  61a7              STR      r7,[r4,#0x18]         ;368
0000d0  61e6              STR      r6,[r4,#0x1c]         ;369
0000d2  e035              B        |L14.320|
0000d4  a17a              ADR      r1,|L14.704|
0000d6  2000              MOVS     r0,#0                 ;372
0000d8  f7fffffe          BL       wpa_printf
0000dc  6227              STR      r7,[r4,#0x20]         ;373
0000de  6266              STR      r6,[r4,#0x24]         ;374
0000e0  e02e              B        |L14.320|
0000e2  a17f              ADR      r1,|L14.736|
0000e4  2000              MOVS     r0,#0                 ;377
0000e6  f7fffffe          BL       wpa_printf
0000ea  62a7              STR      r7,[r4,#0x28]         ;379
0000ec  62e6              STR      r6,[r4,#0x2c]         ;380
0000ee  e027              B        |L14.320|
0000f0  a184              ADR      r1,|L14.772|
0000f2  2000              MOVS     r0,#0                 ;383
0000f4  f7fffffe          BL       wpa_printf
0000f8  6327              STR      r7,[r4,#0x30]         ;384
0000fa  6366              STR      r6,[r4,#0x34]         ;385
0000fc  e020              B        |L14.320|
0000fe  a187              ADR      r1,|L14.796|
000100  2000              MOVS     r0,#0                 ;388
000102  f7fffffe          BL       wpa_printf
000106  63a7              STR      r7,[r4,#0x38]         ;389
000108  63e6              STR      r6,[r4,#0x3c]         ;390
00010a  e019              B        |L14.320|
00010c  a18a              ADR      r1,|L14.824|
00010e  2000              MOVS     r0,#0                 ;393
000110  f7fffffe          BL       wpa_printf
000114  6467              STR      r7,[r4,#0x44]         ;395
000116  64a6              STR      r6,[r4,#0x48]         ;396
000118  e012              B        |L14.320|
                  |L14.282|
00011a  f8980001          LDRB     r0,[r8,#1]            ;399
00011e  f0100f01          TST      r0,#1                 ;399
000122  d007              BEQ      |L14.308|
000124  465a              MOV      r2,r11                ;400
000126  498c              LDR      r1,|L14.856|
000128  2000              MOVS     r0,#0                 ;400
00012a  f7fffffe          BL       wpa_printf
00012e  f04f30ff          MOV      r0,#0xffffffff        ;403
000132  e796              B        |L14.98|
                  |L14.308|
000134  465a              MOV      r2,r11                ;405
000136  a189              ADR      r1,|L14.860|
000138  2000              MOVS     r0,#0                 ;405
00013a  f7fffffe          BL       wpa_printf
00013e  bf00              NOP                            ;348
                  |L14.320|
000140  bf00              NOP                            ;354
000142  f1bb0f2e          CMP      r11,#0x2e             ;411
000146  d10a              BNE      |L14.350|
000148  eb050009          ADD      r0,r5,r9              ;412
00014c  4550              CMP      r0,r10                ;412
00014e  d106              BNE      |L14.350|
000150  f8980000          LDRB     r0,[r8,#0]            ;418
000154  f8840040          STRB     r0,[r4,#0x40]         ;418
000158  f04f0b00          MOV      r11,#0                ;419
00015c  e001              B        |L14.354|
                  |L14.350|
00015e  f898b000          LDRB     r11,[r8,#0]           ;421
                  |L14.354|
000162  444d              ADD      r5,r5,r9              ;423
000164  bf00              NOP                            ;424
                  |L14.358|
000166  f1bb0f00          CMP      r11,#0                ;323
00016a  f47faf55          BNE      |L14.24|
00016e  4555              CMP      r5,r10                ;426
000170  d006              BEQ      |L14.384|
000172  a184              ADR      r1,|L14.900|
000174  2000              MOVS     r0,#0                 ;427
000176  f7fffffe          BL       wpa_printf
00017a  f04f30ff          MOV      r0,#0xffffffff        ;429
00017e  e770              B        |L14.98|
                  |L14.384|
000180  2000              MOVS     r0,#0                 ;432
000182  e76e              B        |L14.98|
;;;434    
                          ENDP

                  |L14.388|
000184  494b4556          DCB      "IKEV2: Processing payload %u",0
000188  323a2050
00018c  726f6365
000190  7373696e
000194  67207061
000198  796c6f61
00019c  64202575
0001a0  00      
0001a1  00                DCB      0
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L14.420|
0001a4  494b4556          DCB      "IKEV2:   Too short message for payload header (left=%ld"
0001a8  323a2020
0001ac  20546f6f
0001b0  2073686f
0001b4  7274206d
0001b8  65737361
0001bc  67652066
0001c0  6f722070
0001c4  61796c6f
0001c8  61642068
0001cc  65616465
0001d0  7220286c
0001d4  6566743d
0001d8  256c64  
0001db  2900              DCB      ")",0
0001dd  00                DCB      0
0001de  00                DCB      0
0001df  00                DCB      0
                  |L14.480|
0001e0  494b4556          DCB      "IKEV2:   Invalid payload header length %d",0
0001e4  323a2020
0001e8  20496e76
0001ec  616c6964
0001f0  20706179
0001f4  6c6f6164
0001f8  20686561
0001fc  64657220
000200  6c656e67
000204  74682025
000208  6400    
00020a  00                DCB      0
00020b  00                DCB      0
                  |L14.524|
00020c  494b4556          DCB      "IKEV2:   Next Payload: %u  Flags: 0x%x  Payload Length:"
000210  323a2020
000214  204e6578
000218  74205061
00021c  796c6f61
000220  643a2025
000224  75202046
000228  6c616773
00022c  3a203078
000230  25782020
000234  5061796c
000238  6f616420
00023c  4c656e67
000240  74683a  
000243  20256400          DCB      " %d",0
000247  00                DCB      0
                  |L14.584|
000248  494b4556          DCB      "IKEV2:   Payload: Security Association",0
00024c  323a2020
000250  20506179
000254  6c6f6164
000258  3a205365
00025c  63757269
000260  74792041
000264  73736f63
000268  69617469
00026c  6f6e00  
00026f  00                DCB      0
                  |L14.624|
000270  494b4556          DCB      "IKEV2:   Payload: Key Exchange",0
000274  323a2020
000278  20506179
00027c  6c6f6164
000280  3a204b65
000284  79204578
000288  6368616e
00028c  676500  
00028f  00                DCB      0
                  |L14.656|
000290  494b4556          DCB      "IKEV2:   Payload: IDi",0
000294  323a2020
000298  20506179
00029c  6c6f6164
0002a0  3a204944
0002a4  6900    
0002a6  00                DCB      0
0002a7  00                DCB      0
                  |L14.680|
0002a8  494b4556          DCB      "IKEV2:   Payload: IDr",0
0002ac  323a2020
0002b0  20506179
0002b4  6c6f6164
0002b8  3a204944
0002bc  7200    
0002be  00                DCB      0
0002bf  00                DCB      0
                  |L14.704|
0002c0  494b4556          DCB      "IKEV2:   Payload: Certificate",0
0002c4  323a2020
0002c8  20506179
0002cc  6c6f6164
0002d0  3a204365
0002d4  72746966
0002d8  69636174
0002dc  6500    
0002de  00                DCB      0
0002df  00                DCB      0
                  |L14.736|
0002e0  494b4556          DCB      "IKEV2:   Payload: Authentication",0
0002e4  323a2020
0002e8  20506179
0002ec  6c6f6164
0002f0  3a204175
0002f4  7468656e
0002f8  74696361
0002fc  74696f6e
000300  00      
000301  00                DCB      0
000302  00                DCB      0
000303  00                DCB      0
                  |L14.772|
000304  494b4556          DCB      "IKEV2:   Payload: Nonce",0
000308  323a2020
00030c  20506179
000310  6c6f6164
000314  3a204e6f
000318  6e636500
                  |L14.796|
00031c  494b4556          DCB      "IKEV2:   Payload: Encrypted",0
000320  323a2020
000324  20506179
000328  6c6f6164
00032c  3a20456e
000330  63727970
000334  74656400
                  |L14.824|
000338  494b4556          DCB      "IKEV2:   Payload: Notification",0
00033c  323a2020
000340  20506179
000344  6c6f6164
000348  3a204e6f
00034c  74696669
000350  63617469
000354  6f6e00  
000357  00                DCB      0
                  |L14.856|
                          DCD      ||.constdata||
                  |L14.860|
00035c  494b4556          DCB      "IKEV2:   Skipped unsupported payload %u",0
000360  323a2020
000364  20536b69
000368  70706564
00036c  20756e73
000370  7570706f
000374  72746564
000378  20706179
00037c  6c6f6164
000380  20257500
                  |L14.900|
000384  494b4556          DCB      "IKEV2: Unexpected extra data after payloads",0
000388  323a2055
00038c  6e657870
000390  65637465
000394  64206578
000398  74726120
00039c  64617461
0003a0  20616674
0003a4  65722070
0003a8  61796c6f
0003ac  61647300

                          AREA ||i.ikev2_prf_hash||, CODE, READONLY, ALIGN=1

                  ikev2_prf_hash PROC
;;;99     
;;;100    int ikev2_prf_hash(int alg, const u8 *key, size_t key_len,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;101    		   size_t num_elem, const u8 *addr[], const size_t *len,
;;;102    		   u8 *hash)
;;;103    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dd9a0b          LDRD     r9,r10,[sp,#0x2c]
000010  f8dd8028          LDR      r8,[sp,#0x28]
;;;104    	switch (alg) {
000014  2c01              CMP      r4,#1
000016  d00a              BEQ      |L15.46|
000018  2c02              CMP      r4,#2
00001a  d111              BNE      |L15.64|
;;;105    	case PRF_HMAC_SHA1:
;;;106    		hmac_sha1_vector(key, key_len, num_elem, addr, len, hash);
00001c  4643              MOV      r3,r8
00001e  463a              MOV      r2,r7
000020  4631              MOV      r1,r6
000022  4628              MOV      r0,r5
000024  e9cd9a00          STRD     r9,r10,[sp,#0]
000028  f7fffffe          BL       hmac_sha1_vector
;;;107    		break;
00002c  e00c              B        |L15.72|
                  |L15.46|
;;;108    	case PRF_HMAC_MD5:
;;;109    		hmac_md5_vector(key, key_len, num_elem, addr, len, hash);
00002e  4643              MOV      r3,r8
000030  463a              MOV      r2,r7
000032  4631              MOV      r1,r6
000034  4628              MOV      r0,r5
000036  e9cd9a00          STRD     r9,r10,[sp,#0]
00003a  f7fffffe          BL       hmac_md5_vector
;;;110    		break;
00003e  e003              B        |L15.72|
                  |L15.64|
;;;111    	default:
;;;112    		return -1;
000040  f04f30ff          MOV      r0,#0xffffffff
                  |L15.68|
;;;113    	}
;;;114    
;;;115    	return 0;
;;;116    }
000044  e8bd87fc          POP      {r2-r10,pc}
                  |L15.72|
000048  bf00              NOP                            ;107
00004a  2000              MOVS     r0,#0                 ;115
00004c  e7fa              B        |L15.68|
;;;117    
                          ENDP


                          AREA ||i.ikev2_prf_plus||, CODE, READONLY, ALIGN=1

                  ikev2_prf_plus PROC
;;;118    
;;;119    int ikev2_prf_plus(int alg, const u8 *key, size_t key_len,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;120    		   const u8 *data, size_t data_len,
;;;121    		   u8 *out, size_t out_len)
;;;122    {
000004  b091              SUB      sp,sp,#0x44
000006  4698              MOV      r8,r3
000008  e9ddb91e          LDRD     r11,r9,[sp,#0x78]
;;;123    	u8 hash[IKEV2_MAX_HASH_LEN];
;;;124    	size_t hash_len;
;;;125    	u8 iter, *pos, *end;
;;;126    	const u8 *addr[3];
;;;127    	size_t len[3];
;;;128    	const struct ikev2_prf_alg *prf;
;;;129    	int res;
;;;130    
;;;131    	prf = ikev2_get_prf(alg);
00000c  9811              LDR      r0,[sp,#0x44]
00000e  f7fffffe          BL       ikev2_get_prf
000012  4682              MOV      r10,r0
;;;132    	if (prf == NULL)
000014  f1ba0f00          CMP      r10,#0
000018  d104              BNE      |L16.36|
;;;133    		return -1;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L16.30|
;;;134    	hash_len = prf->hash_len;
;;;135    
;;;136    	addr[0] = hash;
;;;137    	len[0] = hash_len;
;;;138    	addr[1] = data;
;;;139    	len[1] = data_len;
;;;140    	addr[2] = &iter;
;;;141    	len[2] = 1;
;;;142    
;;;143    	pos = out;
;;;144    	end = out + out_len;
;;;145    	iter = 1;
;;;146    	while (pos < end) {
;;;147    		size_t clen;
;;;148    		if (iter == 1)
;;;149    			res = ikev2_prf_hash(alg, key, key_len, 2, &addr[1],
;;;150    					     &len[1], hash);
;;;151    		else
;;;152    			res = ikev2_prf_hash(alg, key, key_len, 3, addr, len,
;;;153    					     hash);
;;;154    		if (res < 0)
;;;155    			return -1;
;;;156    		clen = hash_len;
;;;157    		if ((int) clen > end - pos)
;;;158    			clen = end - pos;
;;;159    		os_memcpy(pos, hash, clen);
;;;160    		pos += clen;
;;;161    		iter++;
;;;162    	}
;;;163    
;;;164    	return 0;
;;;165    }
00001e  b015              ADD      sp,sp,#0x54
000020  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.36|
000024  f8da5008          LDR      r5,[r10,#8]           ;134
000028  a80c              ADD      r0,sp,#0x30           ;136
00002a  9008              STR      r0,[sp,#0x20]         ;136
00002c  9505              STR      r5,[sp,#0x14]         ;137
00002e  f8cd8024          STR      r8,[sp,#0x24]         ;138
000032  f8cdb018          STR      r11,[sp,#0x18]        ;139
000036  a80b              ADD      r0,sp,#0x2c           ;140
000038  900a              STR      r0,[sp,#0x28]         ;140
00003a  2001              MOVS     r0,#1                 ;141
00003c  9007              STR      r0,[sp,#0x1c]         ;141
00003e  464c              MOV      r4,r9                 ;143
000040  9820              LDR      r0,[sp,#0x80]         ;144
000042  eb090600          ADD      r6,r9,r0              ;144
000046  2001              MOVS     r0,#1                 ;145
000048  900b              STR      r0,[sp,#0x2c]         ;145
00004a  e031              B        |L16.176|
                  |L16.76|
00004c  f89d002c          LDRB     r0,[sp,#0x2c]         ;148
000050  2801              CMP      r0,#1                 ;148
000052  d10b              BNE      |L16.108|
000054  ab0c              ADD      r3,sp,#0x30           ;149
000056  aa06              ADD      r2,sp,#0x18           ;149
000058  a909              ADD      r1,sp,#0x24           ;149
00005a  e88d000e          STM      sp,{r1-r3}            ;149
00005e  2302              MOVS     r3,#2                 ;149
000060  a811              ADD      r0,sp,#0x44           ;149
000062  c807              LDM      r0,{r0-r2}            ;149
000064  f7fffffe          BL       ikev2_prf_hash
000068  9004              STR      r0,[sp,#0x10]         ;149
00006a  e00a              B        |L16.130|
                  |L16.108|
00006c  ab0c              ADD      r3,sp,#0x30           ;152
00006e  aa05              ADD      r2,sp,#0x14           ;152
000070  a908              ADD      r1,sp,#0x20           ;152
000072  e88d000e          STM      sp,{r1-r3}            ;152
000076  2303              MOVS     r3,#3                 ;152
000078  a811              ADD      r0,sp,#0x44           ;152
00007a  c807              LDM      r0,{r0-r2}            ;152
00007c  f7fffffe          BL       ikev2_prf_hash
000080  9004              STR      r0,[sp,#0x10]         ;152
                  |L16.130|
000082  9804              LDR      r0,[sp,#0x10]         ;154
000084  2800              CMP      r0,#0                 ;154
000086  da02              BGE      |L16.142|
000088  f04f30ff          MOV      r0,#0xffffffff        ;155
00008c  e7c7              B        |L16.30|
                  |L16.142|
00008e  462f              MOV      r7,r5                 ;156
000090  1b30              SUBS     r0,r6,r4              ;157
000092  42b8              CMP      r0,r7                 ;157
000094  da00              BGE      |L16.152|
000096  1b37              SUBS     r7,r6,r4              ;158
                  |L16.152|
000098  463a              MOV      r2,r7                 ;159
00009a  a90c              ADD      r1,sp,#0x30           ;159
00009c  4620              MOV      r0,r4                 ;159
00009e  f7fffffe          BL       os_memcpy
0000a2  443c              ADD      r4,r4,r7              ;160
0000a4  f89d002c          LDRB     r0,[sp,#0x2c]         ;161
0000a8  1c40              ADDS     r0,r0,#1              ;161
0000aa  b2c0              UXTB     r0,r0                 ;161
0000ac  900b              STR      r0,[sp,#0x2c]         ;161
0000ae  bf00              NOP                            ;162
                  |L16.176|
0000b0  42b4              CMP      r4,r6                 ;146
0000b2  d3cb              BCC      |L16.76|
0000b4  2000              MOVS     r0,#0                 ;164
0000b6  e7b2              B        |L16.30|
;;;166    
                          ENDP


                          AREA ||i.ikev2_update_hdr||, CODE, READONLY, ALIGN=1

                  ikev2_update_hdr PROC
;;;586    
;;;587    void ikev2_update_hdr(struct wpabuf *msg)
000000  b570              PUSH     {r4-r6,lr}
;;;588    {
000002  4605              MOV      r5,r0
;;;589    	struct ikev2_hdr *hdr;
;;;590    
;;;591    	/* Update lenth field in HDR */
;;;592    	hdr = wpabuf_mhead(msg);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       wpabuf_mhead
00000a  4604              MOV      r4,r0
;;;593    	WPA_PUT_BE32(hdr->length, wpabuf_len(msg));
00000c  bf00              NOP      
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       wpabuf_len
000014  0e00              LSRS     r0,r0,#24
000016  7620              STRB     r0,[r4,#0x18]
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       wpabuf_len
00001e  0c00              LSRS     r0,r0,#16
000020  7660              STRB     r0,[r4,#0x19]
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       wpabuf_len
000028  0a00              LSRS     r0,r0,#8
00002a  76a0              STRB     r0,[r4,#0x1a]
00002c  4628              MOV      r0,r5
00002e  f7fffffe          BL       wpabuf_len
000032  76e0              STRB     r0,[r4,#0x1b]
000034  bf00              NOP      
;;;594    }
000036  bd70              POP      {r4-r6,pc}
;;;595    
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L18.30|
00001a  2001              MOVS     r0,#1
                  |L18.28|
;;;495    }
00001c  4770              BX       lr
                  |L18.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L18.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L23.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L23.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L23.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L23.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L26.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L26.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L26.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L26.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L32.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L32.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  494b4556          DCB      0x49,0x4b,0x45,0x56
000004  323a2020          DCB      0x32,0x3a,0x20,0x20
000008  20556e73          DCB      0x20,0x55,0x6e,0x73
00000c  7570706f          DCB      0x75,0x70,0x70,0x6f
000010  72746564          DCB      0x72,0x74,0x65,0x64
000014  20637269          DCB      0x20,0x63,0x72,0x69
000018  74696361          DCB      0x74,0x69,0x63,0x61
00001c  6c207061          DCB      0x6c,0x20,0x70,0x61
000020  796c6f61          DCB      0x79,0x6c,0x6f,0x61
000024  64202575          DCB      0x64,0x20,0x25,0x75
000028  202d2072          DCB      0x20,0x2d,0x20,0x72
00002c  656a6563          DCB      0x65,0x6a,0x65,0x63
000030  74207468          DCB      0x74,0x20,0x74,0x68
000034  6520656e          DCB      0x65,0x20,0x65,0x6e
000038  74697265          DCB      0x74,0x69,0x72,0x65
00003c  206d6573          DCB      0x20,0x6d,0x65,0x73
000040  73616765          DCB      0x73,0x61,0x67,0x65
000044  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ikev2_integ_algs
                          DCD      0x00000002
                          DCD      0x00000014
                          DCD      0x0000000c
                          DCD      0x00000001
                          DCD      0x00000010
                          DCD      0x0000000c
                  ikev2_prf_algs
                          DCD      0x00000002
                          DCD      0x00000014
                          DCD      0x00000014
                          DCD      0x00000001
                          DCD      0x00000010
                          DCD      0x00000010
                  ikev2_encr_algs
                          DCD      0x0000000c
                          DCD      0x00000010
                          DCD      0x00000010
                          DCD      0x00000003
                          DCD      0x00000018
                          DCD      0x00000008
