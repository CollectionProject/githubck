; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_ikev2.o --depend=.\obj\eap_ikev2.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_ikev2.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_ikev2.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_ikev2_build_msg||, CODE, READONLY, ALIGN=2

                  eap_ikev2_build_msg PROC
;;;136    
;;;137    static struct wpabuf * eap_ikev2_build_msg(struct eap_ikev2_data *data,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;138    					   struct eap_method_ret *ret, u8 id)
;;;139    {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4692              MOV      r10,r2
;;;140    	struct wpabuf *resp;
;;;141    	u8 flags;
;;;142    	size_t send_len, plen, icv_len = 0;
00000c  2000              MOVS     r0,#0
00000e  9004              STR      r0,[sp,#0x10]
;;;143    
;;;144    	ret->ignore = FALSE;
000010  6028              STR      r0,[r5,#0]
;;;145    	wpa_printf(MSG_DEBUG, "EAP-IKEV2: Generating Response");
000012  a178              ADR      r1,|L2.500|
000014  f7fffffe          BL       wpa_printf
;;;146    	ret->allowNotifications = TRUE;
000018  2001              MOVS     r0,#1
00001a  60a8              STR      r0,[r5,#8]
;;;147    
;;;148    	flags = 0;
00001c  2600              MOVS     r6,#0
;;;149    	send_len = wpabuf_len(data->out_buf) - data->out_used;
00001e  f8d402a4          LDR      r0,[r4,#0x2a4]
000022  f7fffffe          BL       wpabuf_len
000026  f8d412a8          LDR      r1,[r4,#0x2a8]
00002a  1a47              SUBS     r7,r0,r1
;;;150    	if (1 + send_len > data->fragment_size) {
00002c  1c78              ADDS     r0,r7,#1
00002e  f8d412ac          LDR      r1,[r4,#0x2ac]
000032  4288              CMP      r0,r1
000034  d90a              BLS      |L2.76|
;;;151    		send_len = data->fragment_size - 1;
000036  f8d402ac          LDR      r0,[r4,#0x2ac]
00003a  1e47              SUBS     r7,r0,#1
;;;152    		flags |= IKEV2_FLAGS_MORE_FRAGMENTS;
00003c  f0460640          ORR      r6,r6,#0x40
;;;153    		if (data->out_used == 0) {
000040  f8d402a8          LDR      r0,[r4,#0x2a8]
000044  b910              CBNZ     r0,|L2.76|
;;;154    			flags |= IKEV2_FLAGS_LENGTH_INCLUDED;
000046  f0460680          ORR      r6,r6,#0x80
;;;155    			send_len -= 4;
00004a  1f3f              SUBS     r7,r7,#4
                  |L2.76|
;;;156    		}
;;;157    	}
;;;158    #ifdef CCNS_PL
;;;159    	/* Some issues figuring out the length of the message if Message Length
;;;160    	 * field not included?! */
;;;161    	if (!(flags & IKEV2_FLAGS_LENGTH_INCLUDED))
;;;162    		flags |= IKEV2_FLAGS_LENGTH_INCLUDED;
;;;163    #endif /* CCNS_PL */
;;;164    
;;;165    	plen = 1 + send_len;
00004c  f1070801          ADD      r8,r7,#1
;;;166    	if (flags & IKEV2_FLAGS_LENGTH_INCLUDED)
000050  f0160f80          TST      r6,#0x80
000054  d001              BEQ      |L2.90|
;;;167    		plen += 4;
000056  f1080804          ADD      r8,r8,#4
                  |L2.90|
;;;168    	if (data->keys_ready) {
00005a  f8d402b0          LDR      r0,[r4,#0x2b0]
00005e  b1e0              CBZ      r0,|L2.154|
;;;169    		const struct ikev2_integ_alg *integ;
;;;170    		wpa_printf(MSG_DEBUG, "EAP-IKEV2: Add Integrity Checksum "
000060  a16c              ADR      r1,|L2.532|
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       wpa_printf
;;;171    			   "Data");
;;;172    		flags |= IKEV2_FLAGS_ICV_INCLUDED;
000068  f0460620          ORR      r6,r6,#0x20
;;;173    		integ = ikev2_get_integ(data->ikev2.proposal.integ);
00006c  f44f710a          MOV      r1,#0x228
000070  5908              LDR      r0,[r1,r4]
000072  f7fffffe          BL       ikev2_get_integ
000076  4683              MOV      r11,r0
;;;174    		if (integ == NULL) {
000078  f1bb0f00          CMP      r11,#0
00007c  d107              BNE      |L2.142|
;;;175    			wpa_printf(MSG_DEBUG, "EAP-IKEV2: Unknown INTEG "
00007e  a16f              ADR      r1,|L2.572|
000080  2000              MOVS     r0,#0
000082  f7fffffe          BL       wpa_printf
;;;176    				   "transform / cannot generate ICV");
;;;177    			return NULL;
000086  2000              MOVS     r0,#0
                  |L2.136|
;;;178    		}
;;;179    		icv_len = integ->hash_len;
;;;180    
;;;181    		plen += icv_len;
;;;182    	}
;;;183    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_IKEV2, plen,
;;;184    			     EAP_CODE_RESPONSE, id);
;;;185    	if (resp == NULL)
;;;186    		return NULL;
;;;187    
;;;188    	wpabuf_put_u8(resp, flags); /* Flags */
;;;189    	if (flags & IKEV2_FLAGS_LENGTH_INCLUDED)
;;;190    		wpabuf_put_be32(resp, wpabuf_len(data->out_buf));
;;;191    
;;;192    	wpabuf_put_data(resp, wpabuf_head_u8(data->out_buf) + data->out_used,
;;;193    			send_len);
;;;194    	data->out_used += send_len;
;;;195    
;;;196    	if (flags & IKEV2_FLAGS_ICV_INCLUDED) {
;;;197    		const u8 *msg = wpabuf_head(resp);
;;;198    		size_t len = wpabuf_len(resp);
;;;199    		ikev2_integ_hash(data->ikev2.proposal.integ,
;;;200    				 data->ikev2.keys.SK_ar,
;;;201    				 data->ikev2.keys.SK_integ_len,
;;;202    				 msg, len, wpabuf_put(resp, icv_len));
;;;203    	}
;;;204    
;;;205    	ret->methodState = METHOD_MAY_CONT;
;;;206    	ret->decision = DECISION_FAIL;
;;;207    
;;;208    	if (data->out_used == wpabuf_len(data->out_buf)) {
;;;209    		wpa_printf(MSG_DEBUG, "EAP-IKEV2: Sending out %lu bytes "
;;;210    			   "(message sent completely)",
;;;211    			   (unsigned long) send_len);
;;;212    		wpabuf_free(data->out_buf);
;;;213    		data->out_buf = NULL;
;;;214    		data->out_used = 0;
;;;215    		switch (data->ikev2.state) {
;;;216    		case SA_AUTH:
;;;217    			/* SA_INIT was sent out, so message have to be
;;;218    			 * integrity protected from now on. */
;;;219    			data->keys_ready = 1;
;;;220    			break;
;;;221    		case IKEV2_DONE:
;;;222    			ret->methodState = METHOD_DONE;
;;;223    			if (data->state == FAIL)
;;;224    				break;
;;;225    			ret->decision = DECISION_COND_SUCC;
;;;226    			wpa_printf(MSG_DEBUG, "EAP-IKEV2: Authentication "
;;;227    				   "completed successfully");
;;;228    			if (eap_ikev2_peer_keymat(data))
;;;229    				break;
;;;230    			eap_ikev2_state(data, DONE);
;;;231    			break;
;;;232    		case IKEV2_FAILED:
;;;233    			wpa_printf(MSG_DEBUG, "EAP-IKEV2: Authentication "
;;;234    				   "failed");
;;;235    			ret->methodState = METHOD_DONE;
;;;236    			ret->decision = DECISION_FAIL;
;;;237    			break;
;;;238    		default:
;;;239    			break;
;;;240    		}
;;;241    	} else {
;;;242    		wpa_printf(MSG_DEBUG, "EAP-IKEV2: Sending out %lu bytes "
;;;243    			   "(%lu more to send)", (unsigned long) send_len,
;;;244    			   (unsigned long) wpabuf_len(data->out_buf) -
;;;245    			   data->out_used);
;;;246    		eap_ikev2_state(data, WAIT_FRAG_ACK);
;;;247    	}
;;;248    
;;;249    	return resp;
;;;250    }
000088  b005              ADD      sp,sp,#0x14
00008a  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.142|
00008e  f8db0008          LDR      r0,[r11,#8]           ;179
000092  9004              STR      r0,[sp,#0x10]         ;179
000094  9804              LDR      r0,[sp,#0x10]         ;181
000096  4480              ADD      r8,r8,r0              ;181
000098  bf00              NOP                            ;182
                  |L2.154|
00009a  2302              MOVS     r3,#2                 ;183
00009c  4642              MOV      r2,r8                 ;183
00009e  2131              MOVS     r1,#0x31              ;183
0000a0  2000              MOVS     r0,#0                 ;183
0000a2  f8cda000          STR      r10,[sp,#0]           ;183
0000a6  f7fffffe          BL       eap_msg_alloc
0000aa  4681              MOV      r9,r0                 ;183
0000ac  f1b90f00          CMP      r9,#0                 ;185
0000b0  d101              BNE      |L2.182|
0000b2  2000              MOVS     r0,#0                 ;186
0000b4  e7e8              B        |L2.136|
                  |L2.182|
0000b6  4631              MOV      r1,r6                 ;188
0000b8  4648              MOV      r0,r9                 ;188
0000ba  f7fffffe          BL       wpabuf_put_u8
0000be  f0160f80          TST      r6,#0x80              ;189
0000c2  d008              BEQ      |L2.214|
0000c4  f8d402a4          LDR      r0,[r4,#0x2a4]        ;190
0000c8  f7fffffe          BL       wpabuf_len
0000cc  4683              MOV      r11,r0                ;190
0000ce  4601              MOV      r1,r0                 ;190
0000d0  4648              MOV      r0,r9                 ;190
0000d2  f7fffffe          BL       wpabuf_put_be32
                  |L2.214|
0000d6  f8d402a4          LDR      r0,[r4,#0x2a4]        ;192
0000da  f7fffffe          BL       wpabuf_head_u8
0000de  f8d412a8          LDR      r1,[r4,#0x2a8]        ;192
0000e2  eb000b01          ADD      r11,r0,r1             ;192
0000e6  463a              MOV      r2,r7                 ;192
0000e8  4659              MOV      r1,r11                ;192
0000ea  4648              MOV      r0,r9                 ;192
0000ec  f7fffffe          BL       wpabuf_put_data
0000f0  f8d402a8          LDR      r0,[r4,#0x2a8]        ;194
0000f4  4438              ADD      r0,r0,r7              ;194
0000f6  f8c402a8          STR      r0,[r4,#0x2a8]        ;194
0000fa  f0160f20          TST      r6,#0x20              ;196
0000fe  d01c              BEQ      |L2.314|
000100  4648              MOV      r0,r9                 ;197
000102  f7fffffe          BL       wpabuf_head
000106  9003              STR      r0,[sp,#0xc]          ;197
000108  4648              MOV      r0,r9                 ;198
00010a  f7fffffe          BL       wpabuf_len
00010e  9002              STR      r0,[sp,#8]            ;198
000110  4648              MOV      r0,r9                 ;199
000112  9904              LDR      r1,[sp,#0x10]         ;199
000114  f7fffffe          BL       wpabuf_put
000118  4683              MOV      r11,r0                ;199
00011a  9a02              LDR      r2,[sp,#8]            ;199
00011c  f44f7317          MOV      r3,#0x25c             ;199
000120  e9cd2000          STRD     r2,r0,[sp,#0]         ;199
000124  591a              LDR      r2,[r3,r4]            ;199
000126  f44f7311          MOV      r3,#0x244             ;199
00012a  5919              LDR      r1,[r3,r4]            ;199
00012c  f44f730a          MOV      r3,#0x228             ;199
000130  5918              LDR      r0,[r3,r4]            ;199
000132  9b03              LDR      r3,[sp,#0xc]          ;199
000134  f7fffffe          BL       ikev2_integ_hash
000138  bf00              NOP                            ;203
                  |L2.314|
00013a  2003              MOVS     r0,#3                 ;205
00013c  7128              STRB     r0,[r5,#4]            ;205
00013e  2000              MOVS     r0,#0                 ;206
000140  7168              STRB     r0,[r5,#5]            ;206
000142  f8d402a4          LDR      r0,[r4,#0x2a4]        ;208
000146  f7fffffe          BL       wpabuf_len
00014a  f8d412a8          LDR      r1,[r4,#0x2a8]        ;208
00014e  4288              CMP      r0,r1                 ;208
000150  d13b              BNE      |L2.458|
000152  463a              MOV      r2,r7                 ;209
000154  a148              ADR      r1,|L2.632|
000156  2000              MOVS     r0,#0                 ;209
000158  f7fffffe          BL       wpa_printf
00015c  f8d402a4          LDR      r0,[r4,#0x2a4]        ;212
000160  f7fffffe          BL       wpabuf_free
000164  2000              MOVS     r0,#0                 ;213
000166  f8c402a4          STR      r0,[r4,#0x2a4]        ;213
00016a  f8c402a8          STR      r0,[r4,#0x2a8]        ;214
00016e  7820              LDRB     r0,[r4,#0]            ;215
000170  2801              CMP      r0,#1                 ;215
000172  d004              BEQ      |L2.382|
000174  2804              CMP      r0,#4                 ;215
000176  d006              BEQ      |L2.390|
000178  2805              CMP      r0,#5                 ;215
00017a  d124              BNE      |L2.454|
00017c  e01a              B        |L2.436|
                  |L2.382|
00017e  2001              MOVS     r0,#1                 ;219
000180  f8c402b0          STR      r0,[r4,#0x2b0]        ;219
000184  e020              B        |L2.456|
                  |L2.390|
000186  2004              MOVS     r0,#4                 ;222
000188  7128              STRB     r0,[r5,#4]            ;222
00018a  f894029c          LDRB     r0,[r4,#0x29c]        ;223
00018e  2804              CMP      r0,#4                 ;223
000190  d100              BNE      |L2.404|
000192  e019              B        |L2.456|
                  |L2.404|
000194  2001              MOVS     r0,#1                 ;225
000196  7168              STRB     r0,[r5,#5]            ;225
000198  a146              ADR      r1,|L2.692|
00019a  2000              MOVS     r0,#0                 ;226
00019c  f7fffffe          BL       wpa_printf
0001a0  4620              MOV      r0,r4                 ;228
0001a2  f7fffffe          BL       eap_ikev2_peer_keymat
0001a6  b100              CBZ      r0,|L2.426|
0001a8  e00e              B        |L2.456|
                  |L2.426|
0001aa  2103              MOVS     r1,#3                 ;230
0001ac  4620              MOV      r0,r4                 ;230
0001ae  f7fffffe          BL       eap_ikev2_state
0001b2  e009              B        |L2.456|
                  |L2.436|
0001b4  a14c              ADR      r1,|L2.744|
0001b6  2000              MOVS     r0,#0                 ;233
0001b8  f7fffffe          BL       wpa_printf
0001bc  2004              MOVS     r0,#4                 ;235
0001be  7128              STRB     r0,[r5,#4]            ;235
0001c0  2000              MOVS     r0,#0                 ;236
0001c2  7168              STRB     r0,[r5,#5]            ;236
0001c4  e000              B        |L2.456|
                  |L2.454|
0001c6  bf00              NOP                            ;239
                  |L2.456|
0001c8  e011              B        |L2.494|
                  |L2.458|
0001ca  f8d402a4          LDR      r0,[r4,#0x2a4]        ;242
0001ce  f7fffffe          BL       wpabuf_len
0001d2  f8d412a8          LDR      r1,[r4,#0x2a8]        ;242
0001d6  eba00b01          SUB      r11,r0,r1             ;242
0001da  465b              MOV      r3,r11                ;242
0001dc  463a              MOV      r2,r7                 ;242
0001de  a14b              ADR      r1,|L2.780|
0001e0  2000              MOVS     r0,#0                 ;242
0001e2  f7fffffe          BL       wpa_printf
0001e6  2102              MOVS     r1,#2                 ;246
0001e8  4620              MOV      r0,r4                 ;246
0001ea  f7fffffe          BL       eap_ikev2_state
                  |L2.494|
0001ee  4648              MOV      r0,r9                 ;249
0001f0  e74a              B        |L2.136|
;;;251    
                          ENDP

0001f2  0000              DCW      0x0000
                  |L2.500|
0001f4  4541502d          DCB      "EAP-IKEV2: Generating Response",0
0001f8  494b4556
0001fc  323a2047
000200  656e6572
000204  6174696e
000208  67205265
00020c  73706f6e
000210  736500  
000213  00                DCB      0
                  |L2.532|
000214  4541502d          DCB      "EAP-IKEV2: Add Integrity Checksum Data",0
000218  494b4556
00021c  323a2041
000220  64642049
000224  6e746567
000228  72697479
00022c  20436865
000230  636b7375
000234  6d204461
000238  746100  
00023b  00                DCB      0
                  |L2.572|
00023c  4541502d          DCB      "EAP-IKEV2: Unknown INTEG transform / cannot generate IC"
000240  494b4556
000244  323a2055
000248  6e6b6e6f
00024c  776e2049
000250  4e544547
000254  20747261
000258  6e73666f
00025c  726d202f
000260  2063616e
000264  6e6f7420
000268  67656e65
00026c  72617465
000270  204943  
000273  5600              DCB      "V",0
000275  00                DCB      0
000276  00                DCB      0
000277  00                DCB      0
                  |L2.632|
000278  4541502d          DCB      "EAP-IKEV2: Sending out %lu bytes (message sent complete"
00027c  494b4556
000280  323a2053
000284  656e6469
000288  6e67206f
00028c  75742025
000290  6c752062
000294  79746573
000298  20286d65
00029c  73736167
0002a0  65207365
0002a4  6e742063
0002a8  6f6d706c
0002ac  657465  
0002af  6c792900          DCB      "ly)",0
0002b3  00                DCB      0
                  |L2.692|
0002b4  4541502d          DCB      "EAP-IKEV2: Authentication completed successfully",0
0002b8  494b4556
0002bc  323a2041
0002c0  75746865
0002c4  6e746963
0002c8  6174696f
0002cc  6e20636f
0002d0  6d706c65
0002d4  74656420
0002d8  73756363
0002dc  65737366
0002e0  756c6c79
0002e4  00      
0002e5  00                DCB      0
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L2.744|
0002e8  4541502d          DCB      "EAP-IKEV2: Authentication failed",0
0002ec  494b4556
0002f0  323a2041
0002f4  75746865
0002f8  6e746963
0002fc  6174696f
000300  6e206661
000304  696c6564
000308  00      
000309  00                DCB      0
00030a  00                DCB      0
00030b  00                DCB      0
                  |L2.780|
00030c  4541502d          DCB      "EAP-IKEV2: Sending out %lu bytes (%lu more to send)",0
000310  494b4556
000314  323a2053
000318  656e6469
00031c  6e67206f
000320  75742025
000324  6c752062
000328  79746573
00032c  2028256c
000330  75206d6f
000334  72652074
000338  6f207365
00033c  6e642900

                          AREA ||i.eap_ikev2_deinit||, CODE, READONLY, ALIGN=1

                  eap_ikev2_deinit PROC
;;;110    
;;;111    static void eap_ikev2_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;113    	struct eap_ikev2_data *data = priv;
000006  4625              MOV      r5,r4
;;;114    	wpabuf_free(data->in_buf);
000008  f8d502a0          LDR      r0,[r5,#0x2a0]
00000c  f7fffffe          BL       wpabuf_free
;;;115    	wpabuf_free(data->out_buf);
000010  f8d502a4          LDR      r0,[r5,#0x2a4]
000014  f7fffffe          BL       wpabuf_free
;;;116    	ikev2_responder_deinit(&data->ikev2);
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       ikev2_responder_deinit
;;;117    	os_free(data);
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       os_free
;;;118    }
000024  bd70              POP      {r4-r6,pc}
;;;119    
                          ENDP


                          AREA ||i.eap_ikev2_getKey||, CODE, READONLY, ALIGN=1

                  eap_ikev2_getKey PROC
;;;447    
;;;448    static u8 * eap_ikev2_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;449    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;450    	struct eap_ikev2_data *data = priv;
00000a  4625              MOV      r5,r4
;;;451    	u8 *key;
;;;452    
;;;453    	if (data->state != DONE || !data->keymat_ok)
00000c  f895029c          LDRB     r0,[r5,#0x29c]
000010  2803              CMP      r0,#3
000012  d102              BNE      |L4.26|
000014  f8d50334          LDR      r0,[r5,#0x334]
000018  b910              CBNZ     r0,|L4.32|
                  |L4.26|
;;;454    		return NULL;
00001a  2000              MOVS     r0,#0
                  |L4.28|
;;;455    
;;;456    	key = os_malloc(EAP_MSK_LEN);
;;;457    	if (key) {
;;;458    		os_memcpy(key, data->keymat, EAP_MSK_LEN);
;;;459    		*len = EAP_MSK_LEN;
;;;460    	}
;;;461    
;;;462    	return key;
;;;463    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L4.32|
000020  2040              MOVS     r0,#0x40              ;456
000022  f7fffffe          BL       os_malloc
000026  4606              MOV      r6,r0                 ;456
000028  b13e              CBZ      r6,|L4.58|
00002a  2240              MOVS     r2,#0x40              ;458
00002c  f505712d          ADD      r1,r5,#0x2b4          ;458
000030  4630              MOV      r0,r6                 ;458
000032  f7fffffe          BL       os_memcpy
000036  2040              MOVS     r0,#0x40              ;459
000038  6038              STR      r0,[r7,#0]            ;459
                  |L4.58|
00003a  4630              MOV      r0,r6                 ;462
00003c  e7ee              B        |L4.28|
;;;464    
                          ENDP


                          AREA ||i.eap_ikev2_get_emsk||, CODE, READONLY, ALIGN=1

                  eap_ikev2_get_emsk PROC
;;;465    
;;;466    static u8 * eap_ikev2_get_emsk(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;467    {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;468    	struct eap_ikev2_data *data = priv;
00000a  4625              MOV      r5,r4
;;;469    	u8 *key;
;;;470    
;;;471    	if (data->state != DONE || !data->keymat_ok)
00000c  f895029c          LDRB     r0,[r5,#0x29c]
000010  2803              CMP      r0,#3
000012  d102              BNE      |L5.26|
000014  f8d50334          LDR      r0,[r5,#0x334]
000018  b910              CBNZ     r0,|L5.32|
                  |L5.26|
;;;472    		return NULL;
00001a  2000              MOVS     r0,#0
                  |L5.28|
;;;473    
;;;474    	key = os_malloc(EAP_EMSK_LEN);
;;;475    	if (key) {
;;;476    		os_memcpy(key, data->keymat + EAP_MSK_LEN, EAP_EMSK_LEN);
;;;477    		*len = EAP_EMSK_LEN;
;;;478    	}
;;;479    
;;;480    	return key;
;;;481    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L5.32|
000020  2040              MOVS     r0,#0x40              ;474
000022  f7fffffe          BL       os_malloc
000026  4606              MOV      r6,r0                 ;474
000028  b13e              CBZ      r6,|L5.58|
00002a  2240              MOVS     r2,#0x40              ;476
00002c  f505713d          ADD      r1,r5,#0x2f4          ;476
000030  4630              MOV      r0,r6                 ;476
000032  f7fffffe          BL       os_memcpy
000036  2040              MOVS     r0,#0x40              ;477
000038  6038              STR      r0,[r7,#0]            ;477
                  |L5.58|
00003a  4630              MOV      r0,r6                 ;480
00003c  e7ee              B        |L5.28|
;;;482    
                          ENDP


                          AREA ||i.eap_ikev2_init||, CODE, READONLY, ALIGN=2

                  eap_ikev2_init PROC
;;;63     
;;;64     static void * eap_ikev2_init(struct eap_sm *sm)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;65     {
000004  4607              MOV      r7,r0
;;;66     	struct eap_ikev2_data *data;
;;;67     	const u8 *identity, *password;
;;;68     	size_t identity_len, password_len;
;;;69     
;;;70     	identity = eap_get_config_identity(sm, &identity_len);
000006  a901              ADD      r1,sp,#4
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       eap_get_config_identity
00000e  4606              MOV      r6,r0
;;;71     	if (identity == NULL) {
000010  b936              CBNZ     r6,|L6.32|
;;;72     		wpa_printf(MSG_INFO, "EAP-IKEV2: No identity available");
000012  a12d              ADR      r1,|L6.200|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;73     		return NULL;
00001a  2000              MOVS     r0,#0
                  |L6.28|
;;;74     	}
;;;75     
;;;76     	data = os_zalloc(sizeof(*data));
;;;77     	if (data == NULL)
;;;78     		return NULL;
;;;79     	data->state = WAIT_START;
;;;80     	data->fragment_size = IKEV2_FRAGMENT_SIZE;
;;;81     	data->ikev2.state = SA_INIT;
;;;82     	data->ikev2.peer_auth = PEER_AUTH_SECRET;
;;;83     	data->ikev2.key_pad = (u8 *) os_strdup("Key Pad for EAP-IKEv2");
;;;84     	if (data->ikev2.key_pad == NULL)
;;;85     		goto failed;
;;;86     	data->ikev2.key_pad_len = 21;
;;;87     	data->ikev2.IDr = os_malloc(identity_len);
;;;88     	if (data->ikev2.IDr == NULL)
;;;89     		goto failed;
;;;90     	os_memcpy(data->ikev2.IDr, identity, identity_len);
;;;91     	data->ikev2.IDr_len = identity_len;
;;;92     
;;;93     	password = eap_get_config_password(sm, &password_len);
;;;94     	if (password) {
;;;95     		data->ikev2.shared_secret = os_malloc(password_len);
;;;96     		if (data->ikev2.shared_secret == NULL)
;;;97     			goto failed;
;;;98     		os_memcpy(data->ikev2.shared_secret, password, password_len);
;;;99     		data->ikev2.shared_secret_len = password_len;
;;;100    	}
;;;101    
;;;102    	return data;
;;;103    
;;;104    failed:
;;;105    	ikev2_responder_deinit(&data->ikev2);
;;;106    	os_free(data);
;;;107    	return NULL;
;;;108    }
00001c  e8bd81fc          POP      {r2-r8,pc}
                  |L6.32|
000020  f44f704e          MOV      r0,#0x338             ;76
000024  f7fffffe          BL       os_zalloc
000028  4604              MOV      r4,r0                 ;76
00002a  b90c              CBNZ     r4,|L6.48|
00002c  2000              MOVS     r0,#0                 ;78
00002e  e7f5              B        |L6.28|
                  |L6.48|
000030  2000              MOVS     r0,#0                 ;79
000032  f884029c          STRB     r0,[r4,#0x29c]        ;79
000036  f44f60af          MOV      r0,#0x578             ;80
00003a  f8c402ac          STR      r0,[r4,#0x2ac]        ;80
00003e  2000              MOVS     r0,#0                 ;81
000040  7020              STRB     r0,[r4,#0]            ;81
000042  2001              MOVS     r0,#1                 ;82
000044  f884028c          STRB     r0,[r4,#0x28c]        ;82
000048  a028              ADR      r0,|L6.236|
00004a  f7fffffe          BL       os_strdup
00004e  f8c40290          STR      r0,[r4,#0x290]        ;83
000052  f8d40290          LDR      r0,[r4,#0x290]        ;84
000056  b900              CBNZ     r0,|L6.90|
000058  e02e              B        |L6.184|
                  |L6.90|
00005a  2015              MOVS     r0,#0x15              ;86
00005c  f8c40294          STR      r0,[r4,#0x294]        ;86
000060  9801              LDR      r0,[sp,#4]            ;87
000062  f7fffffe          BL       os_malloc
000066  f8c40274          STR      r0,[r4,#0x274]        ;87
00006a  f8d40274          LDR      r0,[r4,#0x274]        ;88
00006e  b900              CBNZ     r0,|L6.114|
000070  e022              B        |L6.184|
                  |L6.114|
000072  f8d40274          LDR      r0,[r4,#0x274]        ;90
000076  4631              MOV      r1,r6                 ;90
000078  9a01              LDR      r2,[sp,#4]            ;90
00007a  f7fffffe          BL       os_memcpy
00007e  9801              LDR      r0,[sp,#4]            ;91
000080  f8c40278          STR      r0,[r4,#0x278]        ;91
000084  4669              MOV      r1,sp                 ;93
000086  4638              MOV      r0,r7                 ;93
000088  f7fffffe          BL       eap_get_config_password
00008c  4605              MOV      r5,r0                 ;93
00008e  b18d              CBZ      r5,|L6.180|
000090  9800              LDR      r0,[sp,#0]            ;95
000092  f7fffffe          BL       os_malloc
000096  f8c40284          STR      r0,[r4,#0x284]        ;95
00009a  f8d40284          LDR      r0,[r4,#0x284]        ;96
00009e  b900              CBNZ     r0,|L6.162|
0000a0  e00a              B        |L6.184|
                  |L6.162|
0000a2  f8d40284          LDR      r0,[r4,#0x284]        ;98
0000a6  4629              MOV      r1,r5                 ;98
0000a8  9a00              LDR      r2,[sp,#0]            ;98
0000aa  f7fffffe          BL       os_memcpy
0000ae  9800              LDR      r0,[sp,#0]            ;99
0000b0  f8c40288          STR      r0,[r4,#0x288]        ;99
                  |L6.180|
0000b4  4620              MOV      r0,r4                 ;102
0000b6  e7b1              B        |L6.28|
                  |L6.184|
0000b8  4620              MOV      r0,r4                 ;105
0000ba  f7fffffe          BL       ikev2_responder_deinit
0000be  4620              MOV      r0,r4                 ;106
0000c0  f7fffffe          BL       os_free
0000c4  2000              MOVS     r0,#0                 ;107
0000c6  e7a9              B        |L6.28|
;;;109    
                          ENDP

                  |L6.200|
0000c8  4541502d          DCB      "EAP-IKEV2: No identity available",0
0000cc  494b4556
0000d0  323a204e
0000d4  6f206964
0000d8  656e7469
0000dc  74792061
0000e0  7661696c
0000e4  61626c65
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L6.236|
0000ec  4b657920          DCB      "Key Pad for EAP-IKEv2",0
0000f0  50616420
0000f4  666f7220
0000f8  4541502d
0000fc  494b4576
000100  3200    
000102  00                DCB      0
000103  00                DCB      0

                          AREA ||i.eap_ikev2_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_ikev2_isKeyAvailable PROC
;;;440    
;;;441    static Boolean eap_ikev2_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;442    {
;;;443    	struct eap_ikev2_data *data = priv;
000002  460a              MOV      r2,r1
;;;444    	return data->state == DONE && data->keymat_ok;
000004  f892029c          LDRB     r0,[r2,#0x29c]
000008  2803              CMP      r0,#3
00000a  d104              BNE      |L7.22|
00000c  f8d20334          LDR      r0,[r2,#0x334]
000010  b108              CBZ      r0,|L7.22|
000012  2001              MOVS     r0,#1
                  |L7.20|
;;;445    }
000014  4770              BX       lr
                  |L7.22|
000016  2000              MOVS     r0,#0                 ;444
000018  e7fc              B        |L7.20|
;;;446    
                          ENDP


                          AREA ||i.eap_ikev2_peer_keymat||, CODE, READONLY, ALIGN=2

                  eap_ikev2_peer_keymat PROC
;;;120    
;;;121    static int eap_ikev2_peer_keymat(struct eap_ikev2_data *data)
000000  b53e              PUSH     {r1-r5,lr}
;;;122    {
000002  4604              MOV      r4,r0
;;;123    	if (eap_ikev2_derive_keymat(
000004  f504732d          ADD      r3,r4,#0x2b4
000008  f504718c          ADD      r1,r4,#0x118
00000c  f8d42218          LDR      r2,[r4,#0x218]
000010  e88d000e          STM      sp,{r1-r3}
000014  f44f710b          MOV      r1,#0x22c
000018  5908              LDR      r0,[r1,r4]
00001a  f1040211          ADD      r2,r4,#0x11
00001e  f504710f          ADD      r1,r4,#0x23c
000022  f8d43114          LDR      r3,[r4,#0x114]
000026  f7fffffe          BL       eap_ikev2_derive_keymat
00002a  2800              CMP      r0,#0
00002c  da06              BGE      |L8.60|
;;;124    		    data->ikev2.proposal.prf, &data->ikev2.keys,
;;;125    		    data->ikev2.i_nonce, data->ikev2.i_nonce_len,
;;;126    		    data->ikev2.r_nonce, data->ikev2.r_nonce_len,
;;;127    		    data->keymat) < 0) {
;;;128    		wpa_printf(MSG_DEBUG, "EAP-IKEV2: Failed to "
00002e  a106              ADR      r1,|L8.72|
000030  2000              MOVS     r0,#0
000032  f7fffffe          BL       wpa_printf
;;;129    			   "derive key material");
;;;130    		return -1;
000036  f04f30ff          MOV      r0,#0xffffffff
                  |L8.58|
;;;131    	}
;;;132    	data->keymat_ok = 1;
;;;133    	return 0;
;;;134    }
00003a  bd3e              POP      {r1-r5,pc}
                  |L8.60|
00003c  2001              MOVS     r0,#1                 ;132
00003e  f8c40334          STR      r0,[r4,#0x334]        ;132
000042  2000              MOVS     r0,#0                 ;133
000044  e7f9              B        |L8.58|
;;;135    
                          ENDP

000046  0000              DCW      0x0000
                  |L8.72|
000048  4541502d          DCB      "EAP-IKEV2: Failed to derive key material",0
00004c  494b4556
000050  323a2046
000054  61696c65
000058  6420746f
00005c  20646572
000060  69766520
000064  6b657920
000068  6d617465
00006c  7269616c
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0

                          AREA ||i.eap_ikev2_process||, CODE, READONLY, ALIGN=2

                  eap_ikev2_process PROC
;;;327    
;;;328    static struct wpabuf * eap_ikev2_process(struct eap_sm *sm, void *priv,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;329    					 struct eap_method_ret *ret,
;;;330    					 const struct wpabuf *reqData)
;;;331    {
000004  b089              SUB      sp,sp,#0x24
000006  468a              MOV      r10,r1
000008  4616              MOV      r6,r2
00000a  4698              MOV      r8,r3
;;;332    	struct eap_ikev2_data *data = priv;
00000c  4655              MOV      r5,r10
;;;333    	const u8 *start, *pos, *end;
;;;334    	size_t len;
;;;335    	u8 flags, id;
;;;336    	u32 message_length = 0;
00000e  f04f0900          MOV      r9,#0
;;;337    	struct wpabuf tmpbuf;
;;;338    
;;;339    	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_IKEV2, reqData, &len);
000012  ab07              ADD      r3,sp,#0x1c
000014  4642              MOV      r2,r8
000016  2131              MOVS     r1,#0x31
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       eap_hdr_validate
00001e  4604              MOV      r4,r0
;;;340    	if (pos == NULL) {
000020  b92c              CBNZ     r4,|L9.46|
;;;341    		ret->ignore = TRUE;
000022  2001              MOVS     r0,#1
000024  6030              STR      r0,[r6,#0]
;;;342    		return NULL;
000026  2000              MOVS     r0,#0
                  |L9.40|
;;;343    	}
;;;344    
;;;345    	id = eap_get_id(reqData);
;;;346    
;;;347    	start = pos;
;;;348    	end = start + len;
;;;349    
;;;350    	if (len == 0)
;;;351    		flags = 0; /* fragment ack */
;;;352    	else
;;;353    		flags = *pos++;
;;;354    
;;;355    	if (eap_ikev2_process_icv(data, reqData, flags, pos, &end) < 0) {
;;;356    		ret->ignore = TRUE;
;;;357    		return NULL;
;;;358    	}
;;;359    
;;;360    	if (flags & IKEV2_FLAGS_LENGTH_INCLUDED) {
;;;361    		if (end - pos < 4) {
;;;362    			wpa_printf(MSG_DEBUG, "EAP-IKEV2: Message underflow");
;;;363    			ret->ignore = TRUE;
;;;364    			return NULL;
;;;365    		}
;;;366    		message_length = WPA_GET_BE32(pos);
;;;367    		pos += 4;
;;;368    
;;;369    		if (message_length < (u32) (end - pos)) {
;;;370    			wpa_printf(MSG_DEBUG, "EAP-IKEV2: Invalid Message "
;;;371    				   "Length (%d; %ld remaining in this msg)",
;;;372    				   message_length, (long) (end - pos));
;;;373    			ret->ignore = TRUE;
;;;374    			return NULL;
;;;375    		}
;;;376    	}
;;;377    
;;;378    	wpa_printf(MSG_DEBUG, "EAP-IKEV2: Received packet: Flags 0x%x "
;;;379    		   "Message Length %u", flags, message_length);
;;;380    
;;;381    	if (data->state == WAIT_FRAG_ACK) {
;;;382    #ifdef CCNS_PL
;;;383    		if (len > 1) /* Empty Flags field included in ACK */
;;;384    #else /* CCNS_PL */
;;;385    		if (len != 0)
;;;386    #endif /* CCNS_PL */
;;;387    		{
;;;388    			wpa_printf(MSG_DEBUG, "EAP-IKEV2: Unexpected payload "
;;;389    				   "in WAIT_FRAG_ACK state");
;;;390    			ret->ignore = TRUE;
;;;391    			return NULL;
;;;392    		}
;;;393    		wpa_printf(MSG_DEBUG, "EAP-IKEV2: Fragment acknowledged");
;;;394    		eap_ikev2_state(data, PROC_MSG);
;;;395    		return eap_ikev2_build_msg(data, ret, id);
;;;396    	}
;;;397    
;;;398    	if (data->in_buf && eap_ikev2_process_cont(data, pos, end - pos) < 0) {
;;;399    		ret->ignore = TRUE;
;;;400    		return NULL;
;;;401    	}
;;;402    		
;;;403    	if (flags & IKEV2_FLAGS_MORE_FRAGMENTS) {
;;;404    		return eap_ikev2_process_fragment(data, ret, id, flags,
;;;405    						  message_length, pos,
;;;406    						  end - pos);
;;;407    	}
;;;408    
;;;409    	if (data->in_buf == NULL) {
;;;410    		/* Wrap unfragmented messages as wpabuf without extra copy */
;;;411    		wpabuf_set(&tmpbuf, pos, end - pos);
;;;412    		data->in_buf = &tmpbuf;
;;;413    	}
;;;414    
;;;415    	if (ikev2_responder_process(&data->ikev2, data->in_buf) < 0) {
;;;416    		if (data->in_buf == &tmpbuf)
;;;417    			data->in_buf = NULL;
;;;418    		eap_ikev2_state(data, FAIL);
;;;419    		return NULL;
;;;420    	}
;;;421    
;;;422    	if (data->in_buf != &tmpbuf)
;;;423    		wpabuf_free(data->in_buf);
;;;424    	data->in_buf = NULL;
;;;425    
;;;426    	if (data->out_buf == NULL) {
;;;427    		data->out_buf = ikev2_responder_build(&data->ikev2);
;;;428    		if (data->out_buf == NULL) {
;;;429    			wpa_printf(MSG_DEBUG, "EAP-IKEV2: Failed to generate "
;;;430    				   "IKEv2 message");
;;;431    			return NULL;
;;;432    		}
;;;433    		data->out_used = 0;
;;;434    	}
;;;435    
;;;436    	eap_ikev2_state(data, PROC_MSG);
;;;437    	return eap_ikev2_build_msg(data, ret, id);
;;;438    }
000028  b009              ADD      sp,sp,#0x24
00002a  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.46|
00002e  4640              MOV      r0,r8                 ;345
000030  f7fffffe          BL       eap_get_id
000034  9006              STR      r0,[sp,#0x18]         ;345
000036  46a3              MOV      r11,r4                ;347
000038  465c              MOV      r4,r11                ;348
00003a  9807              LDR      r0,[sp,#0x1c]         ;348
00003c  4458              ADD      r0,r0,r11             ;348
00003e  9008              STR      r0,[sp,#0x20]         ;348
000040  9807              LDR      r0,[sp,#0x1c]         ;350
000042  b908              CBNZ     r0,|L9.72|
000044  2700              MOVS     r7,#0                 ;351
000046  e001              B        |L9.76|
                  |L9.72|
000048  f8147b01          LDRB     r7,[r4],#1            ;353
                  |L9.76|
00004c  ab08              ADD      r3,sp,#0x20           ;355
00004e  9300              STR      r3,[sp,#0]            ;355
000050  4623              MOV      r3,r4                 ;355
000052  463a              MOV      r2,r7                 ;355
000054  4641              MOV      r1,r8                 ;355
000056  4628              MOV      r0,r5                 ;355
000058  f7fffffe          BL       eap_ikev2_process_icv
00005c  2800              CMP      r0,#0                 ;355
00005e  da03              BGE      |L9.104|
000060  2001              MOVS     r0,#1                 ;356
000062  6030              STR      r0,[r6,#0]            ;356
000064  2000              MOVS     r0,#0                 ;357
000066  e7df              B        |L9.40|
                  |L9.104|
000068  f0170f80          TST      r7,#0x80              ;360
00006c  d026              BEQ      |L9.188|
00006e  9808              LDR      r0,[sp,#0x20]         ;361
000070  1b00              SUBS     r0,r0,r4              ;361
000072  2804              CMP      r0,#4                 ;361
000074  da07              BGE      |L9.134|
000076  a157              ADR      r1,|L9.468|
000078  2000              MOVS     r0,#0                 ;362
00007a  f7fffffe          BL       wpa_printf
00007e  2001              MOVS     r0,#1                 ;363
000080  6030              STR      r0,[r6,#0]            ;363
000082  2000              MOVS     r0,#0                 ;364
000084  e7d0              B        |L9.40|
                  |L9.134|
000086  7820              LDRB     r0,[r4,#0]            ;366
000088  0600              LSLS     r0,r0,#24             ;366
00008a  7861              LDRB     r1,[r4,#1]            ;366
00008c  ea404001          ORR      r0,r0,r1,LSL #16      ;366
000090  78a1              LDRB     r1,[r4,#2]            ;366
000092  ea402001          ORR      r0,r0,r1,LSL #8       ;366
000096  78e1              LDRB     r1,[r4,#3]            ;366
000098  ea400901          ORR      r9,r0,r1              ;366
00009c  1d24              ADDS     r4,r4,#4              ;367
00009e  9808              LDR      r0,[sp,#0x20]         ;369
0000a0  1b00              SUBS     r0,r0,r4              ;369
0000a2  4548              CMP      r0,r9                 ;369
0000a4  d90a              BLS      |L9.188|
0000a6  9808              LDR      r0,[sp,#0x20]         ;370
0000a8  1b03              SUBS     r3,r0,r4              ;370
0000aa  464a              MOV      r2,r9                 ;370
0000ac  4951              LDR      r1,|L9.500|
0000ae  2000              MOVS     r0,#0                 ;370
0000b0  f7fffffe          BL       wpa_printf
0000b4  2001              MOVS     r0,#1                 ;373
0000b6  6030              STR      r0,[r6,#0]            ;373
0000b8  2000              MOVS     r0,#0                 ;374
0000ba  e7b5              B        |L9.40|
                  |L9.188|
0000bc  464b              MOV      r3,r9                 ;378
0000be  463a              MOV      r2,r7                 ;378
0000c0  a14d              ADR      r1,|L9.504|
0000c2  2000              MOVS     r0,#0                 ;378
0000c4  f7fffffe          BL       wpa_printf
0000c8  f895029c          LDRB     r0,[r5,#0x29c]        ;381
0000cc  2802              CMP      r0,#2                 ;381
0000ce  d117              BNE      |L9.256|
0000d0  9807              LDR      r0,[sp,#0x1c]         ;385
0000d2  b138              CBZ      r0,|L9.228|
0000d4  a157              ADR      r1,|L9.564|
0000d6  2000              MOVS     r0,#0                 ;388
0000d8  f7fffffe          BL       wpa_printf
0000dc  2001              MOVS     r0,#1                 ;390
0000de  6030              STR      r0,[r6,#0]            ;390
0000e0  2000              MOVS     r0,#0                 ;391
0000e2  e7a1              B        |L9.40|
                  |L9.228|
0000e4  a161              ADR      r1,|L9.620|
0000e6  2000              MOVS     r0,#0                 ;393
0000e8  f7fffffe          BL       wpa_printf
0000ec  2101              MOVS     r1,#1                 ;394
0000ee  4628              MOV      r0,r5                 ;394
0000f0  f7fffffe          BL       eap_ikev2_state
0000f4  4631              MOV      r1,r6                 ;395
0000f6  4628              MOV      r0,r5                 ;395
0000f8  9a06              LDR      r2,[sp,#0x18]         ;395
0000fa  f7fffffe          BL       eap_ikev2_build_msg
0000fe  e793              B        |L9.40|
                  |L9.256|
000100  f8d502a0          LDR      r0,[r5,#0x2a0]        ;398
000104  b158              CBZ      r0,|L9.286|
000106  9808              LDR      r0,[sp,#0x20]         ;398
000108  1b02              SUBS     r2,r0,r4              ;398
00010a  4621              MOV      r1,r4                 ;398
00010c  4628              MOV      r0,r5                 ;398
00010e  f7fffffe          BL       eap_ikev2_process_cont
000112  2800              CMP      r0,#0                 ;398
000114  da03              BGE      |L9.286|
000116  2001              MOVS     r0,#1                 ;399
000118  6030              STR      r0,[r6,#0]            ;399
00011a  2000              MOVS     r0,#0                 ;400
00011c  e784              B        |L9.40|
                  |L9.286|
00011e  f0170f40          TST      r7,#0x40              ;403
000122  d00b              BEQ      |L9.316|
000124  9808              LDR      r0,[sp,#0x20]         ;404
000126  1b03              SUBS     r3,r0,r4              ;404
000128  e9cd9400          STRD     r9,r4,[sp,#0]         ;404
00012c  9302              STR      r3,[sp,#8]            ;404
00012e  463b              MOV      r3,r7                 ;404
000130  4631              MOV      r1,r6                 ;404
000132  4628              MOV      r0,r5                 ;404
000134  9a06              LDR      r2,[sp,#0x18]         ;404
000136  f7fffffe          BL       eap_ikev2_process_fragment
00013a  e775              B        |L9.40|
                  |L9.316|
00013c  f8d502a0          LDR      r0,[r5,#0x2a0]        ;409
000140  b940              CBNZ     r0,|L9.340|
000142  9808              LDR      r0,[sp,#0x20]         ;411
000144  1b02              SUBS     r2,r0,r4              ;411
000146  4621              MOV      r1,r4                 ;411
000148  a803              ADD      r0,sp,#0xc            ;411
00014a  f7fffffe          BL       wpabuf_set
00014e  a803              ADD      r0,sp,#0xc            ;412
000150  f8c502a0          STR      r0,[r5,#0x2a0]        ;412
                  |L9.340|
000154  4628              MOV      r0,r5                 ;415
000156  f8d512a0          LDR      r1,[r5,#0x2a0]        ;415
00015a  f7fffffe          BL       ikev2_responder_process
00015e  2800              CMP      r0,#0                 ;415
000160  da0d              BGE      |L9.382|
000162  a903              ADD      r1,sp,#0xc            ;416
000164  f8d502a0          LDR      r0,[r5,#0x2a0]        ;416
000168  4288              CMP      r0,r1                 ;416
00016a  d102              BNE      |L9.370|
00016c  2000              MOVS     r0,#0                 ;417
00016e  f8c502a0          STR      r0,[r5,#0x2a0]        ;417
                  |L9.370|
000172  2104              MOVS     r1,#4                 ;418
000174  4628              MOV      r0,r5                 ;418
000176  f7fffffe          BL       eap_ikev2_state
00017a  2000              MOVS     r0,#0                 ;419
00017c  e754              B        |L9.40|
                  |L9.382|
00017e  a903              ADD      r1,sp,#0xc            ;422
000180  f8d502a0          LDR      r0,[r5,#0x2a0]        ;422
000184  4288              CMP      r0,r1                 ;422
000186  d003              BEQ      |L9.400|
000188  f8d502a0          LDR      r0,[r5,#0x2a0]        ;423
00018c  f7fffffe          BL       wpabuf_free
                  |L9.400|
000190  2000              MOVS     r0,#0                 ;424
000192  f8c502a0          STR      r0,[r5,#0x2a0]        ;424
000196  f8d502a4          LDR      r0,[r5,#0x2a4]        ;426
00019a  b980              CBNZ     r0,|L9.446|
00019c  4628              MOV      r0,r5                 ;427
00019e  f7fffffe          BL       ikev2_responder_build
0001a2  f8c502a4          STR      r0,[r5,#0x2a4]        ;427
0001a6  f8d502a4          LDR      r0,[r5,#0x2a4]        ;428
0001aa  b928              CBNZ     r0,|L9.440|
0001ac  a138              ADR      r1,|L9.656|
0001ae  2000              MOVS     r0,#0                 ;429
0001b0  f7fffffe          BL       wpa_printf
0001b4  2000              MOVS     r0,#0                 ;431
0001b6  e737              B        |L9.40|
                  |L9.440|
0001b8  2000              MOVS     r0,#0                 ;433
0001ba  f8c502a8          STR      r0,[r5,#0x2a8]        ;433
                  |L9.446|
0001be  2101              MOVS     r1,#1                 ;436
0001c0  4628              MOV      r0,r5                 ;436
0001c2  f7fffffe          BL       eap_ikev2_state
0001c6  4631              MOV      r1,r6                 ;437
0001c8  4628              MOV      r0,r5                 ;437
0001ca  9a06              LDR      r2,[sp,#0x18]         ;437
0001cc  f7fffffe          BL       eap_ikev2_build_msg
0001d0  e72a              B        |L9.40|
;;;439    
                          ENDP

0001d2  0000              DCW      0x0000
                  |L9.468|
0001d4  4541502d          DCB      "EAP-IKEV2: Message underflow",0
0001d8  494b4556
0001dc  323a204d
0001e0  65737361
0001e4  67652075
0001e8  6e646572
0001ec  666c6f77
0001f0  00      
0001f1  00                DCB      0
0001f2  00                DCB      0
0001f3  00                DCB      0
                  |L9.500|
                          DCD      ||.constdata||+0x4c
                  |L9.504|
0001f8  4541502d          DCB      "EAP-IKEV2: Received packet: Flags 0x%x Message Length %"
0001fc  494b4556
000200  323a2052
000204  65636569
000208  76656420
00020c  7061636b
000210  65743a20
000214  466c6167
000218  73203078
00021c  2578204d
000220  65737361
000224  6765204c
000228  656e6774
00022c  682025  
00022f  7500              DCB      "u",0
000231  00                DCB      0
000232  00                DCB      0
000233  00                DCB      0
                  |L9.564|
000234  4541502d          DCB      "EAP-IKEV2: Unexpected payload in WAIT_FRAG_ACK state",0
000238  494b4556
00023c  323a2055
000240  6e657870
000244  65637465
000248  64207061
00024c  796c6f61
000250  6420696e
000254  20574149
000258  545f4652
00025c  41475f41
000260  434b2073
000264  74617465
000268  00      
000269  00                DCB      0
00026a  00                DCB      0
00026b  00                DCB      0
                  |L9.620|
00026c  4541502d          DCB      "EAP-IKEV2: Fragment acknowledged",0
000270  494b4556
000274  323a2046
000278  7261676d
00027c  656e7420
000280  61636b6e
000284  6f776c65
000288  64676564
00028c  00      
00028d  00                DCB      0
00028e  00                DCB      0
00028f  00                DCB      0
                  |L9.656|
000290  4541502d          DCB      "EAP-IKEV2: Failed to generate IKEv2 message",0
000294  494b4556
000298  323a2046
00029c  61696c65
0002a0  6420746f
0002a4  2067656e
0002a8  65726174
0002ac  6520494b
0002b0  45763220
0002b4  6d657373
0002b8  61676500

                          AREA ||i.eap_ikev2_process_cont||, CODE, READONLY, ALIGN=2

                  eap_ikev2_process_cont PROC
;;;274    
;;;275    static int eap_ikev2_process_cont(struct eap_ikev2_data *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;276    				  const u8 *buf, size_t len)
;;;277    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;278    	/* Process continuation of a pending message */
;;;279    	if (len > wpabuf_tailroom(data->in_buf)) {
00000a  f8d402a0          LDR      r0,[r4,#0x2a0]
00000e  f7fffffe          BL       wpabuf_tailroom
000012  42a8              CMP      r0,r5
000014  d20b              BCS      |L10.46|
;;;280    		wpa_printf(MSG_DEBUG, "EAP-IKEV2: Fragment overflow");
000016  a10f              ADR      r1,|L10.84|
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       wpa_printf
;;;281    		eap_ikev2_state(data, FAIL);
00001e  2104              MOVS     r1,#4
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       eap_ikev2_state
;;;282    		return -1;
000026  f04f30ff          MOV      r0,#0xffffffff
                  |L10.42|
;;;283    	}
;;;284    
;;;285    	wpabuf_put_data(data->in_buf, buf, len);
;;;286    	wpa_printf(MSG_DEBUG, "EAP-IKEV2: Received %lu bytes, waiting "
;;;287    		   "for %lu bytes more", (unsigned long) len,
;;;288    		   (unsigned long) wpabuf_tailroom(data->in_buf));
;;;289    
;;;290    	return 0;
;;;291    }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L10.46|
00002e  462a              MOV      r2,r5                 ;285
000030  4631              MOV      r1,r6                 ;285
000032  f8d402a0          LDR      r0,[r4,#0x2a0]        ;285
000036  f7fffffe          BL       wpabuf_put_data
00003a  f8d402a0          LDR      r0,[r4,#0x2a0]        ;286
00003e  f7fffffe          BL       wpabuf_tailroom
000042  4607              MOV      r7,r0                 ;286
000044  4603              MOV      r3,r0                 ;286
000046  462a              MOV      r2,r5                 ;286
000048  a10a              ADR      r1,|L10.116|
00004a  2000              MOVS     r0,#0                 ;286
00004c  f7fffffe          BL       wpa_printf
000050  2000              MOVS     r0,#0                 ;290
000052  e7ea              B        |L10.42|
;;;292    
                          ENDP

                  |L10.84|
000054  4541502d          DCB      "EAP-IKEV2: Fragment overflow",0
000058  494b4556
00005c  323a2046
000060  7261676d
000064  656e7420
000068  6f766572
00006c  666c6f77
000070  00      
000071  00                DCB      0
000072  00                DCB      0
000073  00                DCB      0
                  |L10.116|
000074  4541502d          DCB      "EAP-IKEV2: Received %lu bytes, waiting for %lu bytes mo"
000078  494b4556
00007c  323a2052
000080  65636569
000084  76656420
000088  256c7520
00008c  62797465
000090  732c2077
000094  61697469
000098  6e672066
00009c  6f722025
0000a0  6c752062
0000a4  79746573
0000a8  206d6f  
0000ab  726500            DCB      "re",0
0000ae  00                DCB      0
0000af  00                DCB      0

                          AREA ||i.eap_ikev2_process_fragment||, CODE, READONLY, ALIGN=2

                  eap_ikev2_process_fragment PROC
;;;293    
;;;294    static struct wpabuf * eap_ikev2_process_fragment(struct eap_ikev2_data *data,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;295    						  struct eap_method_ret *ret,
;;;296    						  u8 id, u8 flags,
;;;297    						  u32 message_length,
;;;298    						  const u8 *buf, size_t len)
;;;299    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  e9dd9a0b          LDRD     r9,r10,[sp,#0x2c]
000010  f8dd8028          LDR      r8,[sp,#0x28]
;;;300    	/* Process a fragment that is not the last one of the message */
;;;301    	if (data->in_buf == NULL && !(flags & IKEV2_FLAGS_LENGTH_INCLUDED)) {
000014  f8d402a0          LDR      r0,[r4,#0x2a0]
000018  b958              CBNZ     r0,|L11.50|
00001a  f0170f80          TST      r7,#0x80
00001e  d108              BNE      |L11.50|
;;;302    		wpa_printf(MSG_DEBUG, "EAP-IKEV2: No Message Length field in "
000020  a118              ADR      r1,|L11.132|
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       wpa_printf
;;;303    			   "a fragmented packet");
;;;304    		ret->ignore = TRUE;
000028  2001              MOVS     r0,#1
00002a  6028              STR      r0,[r5,#0]
;;;305    		return NULL;
00002c  2000              MOVS     r0,#0
                  |L11.46|
;;;306    	}
;;;307    
;;;308    	if (data->in_buf == NULL) {
;;;309    		/* First fragment of the message */
;;;310    		data->in_buf = wpabuf_alloc(message_length);
;;;311    		if (data->in_buf == NULL) {
;;;312    			wpa_printf(MSG_DEBUG, "EAP-IKEV2: No memory for "
;;;313    				   "message");
;;;314    			ret->ignore = TRUE;
;;;315    			return NULL;
;;;316    		}
;;;317    		wpabuf_put_data(data->in_buf, buf, len);
;;;318    		wpa_printf(MSG_DEBUG, "EAP-IKEV2: Received %lu bytes in first "
;;;319    			   "fragment, waiting for %lu bytes more",
;;;320    			   (unsigned long) len,
;;;321    			   (unsigned long) wpabuf_tailroom(data->in_buf));
;;;322    	}
;;;323    
;;;324    	return eap_ikev2_build_frag_ack(id, EAP_CODE_RESPONSE);
;;;325    }
00002e  e8bd9ff0          POP      {r4-r12,pc}
                  |L11.50|
000032  f8d402a0          LDR      r0,[r4,#0x2a0]        ;308
000036  bb00              CBNZ     r0,|L11.122|
000038  4640              MOV      r0,r8                 ;310
00003a  f7fffffe          BL       wpabuf_alloc
00003e  f8c402a0          STR      r0,[r4,#0x2a0]        ;310
000042  f8d402a0          LDR      r0,[r4,#0x2a0]        ;311
000046  b938              CBNZ     r0,|L11.88|
000048  a11d              ADR      r1,|L11.192|
00004a  2000              MOVS     r0,#0                 ;312
00004c  f7fffffe          BL       wpa_printf
000050  2001              MOVS     r0,#1                 ;314
000052  6028              STR      r0,[r5,#0]            ;314
000054  2000              MOVS     r0,#0                 ;315
000056  e7ea              B        |L11.46|
                  |L11.88|
000058  4652              MOV      r2,r10                ;317
00005a  4649              MOV      r1,r9                 ;317
00005c  f8d402a0          LDR      r0,[r4,#0x2a0]        ;317
000060  f7fffffe          BL       wpabuf_put_data
000064  f8d402a0          LDR      r0,[r4,#0x2a0]        ;318
000068  f7fffffe          BL       wpabuf_tailroom
00006c  4683              MOV      r11,r0                ;318
00006e  4603              MOV      r3,r0                 ;318
000070  4652              MOV      r2,r10                ;318
000072  491c              LDR      r1,|L11.228|
000074  2000              MOVS     r0,#0                 ;318
000076  f7fffffe          BL       wpa_printf
                  |L11.122|
00007a  2102              MOVS     r1,#2                 ;324
00007c  4630              MOV      r0,r6                 ;324
00007e  f7fffffe          BL       eap_ikev2_build_frag_ack
000082  e7d4              B        |L11.46|
;;;326    
                          ENDP

                  |L11.132|
000084  4541502d          DCB      "EAP-IKEV2: No Message Length field in a fragmented pack"
000088  494b4556
00008c  323a204e
000090  6f204d65
000094  73736167
000098  65204c65
00009c  6e677468
0000a0  20666965
0000a4  6c642069
0000a8  6e206120
0000ac  66726167
0000b0  6d656e74
0000b4  65642070
0000b8  61636b  
0000bb  657400            DCB      "et",0
0000be  00                DCB      0
0000bf  00                DCB      0
                  |L11.192|
0000c0  4541502d          DCB      "EAP-IKEV2: No memory for message",0
0000c4  494b4556
0000c8  323a204e
0000cc  6f206d65
0000d0  6d6f7279
0000d4  20666f72
0000d8  206d6573
0000dc  73616765
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L11.228|
                          DCD      ||.constdata||

                          AREA ||i.eap_ikev2_process_icv||, CODE, READONLY, ALIGN=2

                  eap_ikev2_process_icv PROC
;;;252    
;;;253    static int eap_ikev2_process_icv(struct eap_ikev2_data *data,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;254    				 const struct wpabuf *reqData,
;;;255    				 u8 flags, const u8 *pos, const u8 **end)
;;;256    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9d0a              LDR      r5,[sp,#0x28]
;;;257    	if (flags & IKEV2_FLAGS_ICV_INCLUDED) {
00000e  f0170f20          TST      r7,#0x20
000012  d018              BEQ      |L12.70|
;;;258    		int icv_len = eap_ikev2_validate_icv(
000014  682b              LDR      r3,[r5,#0]
000016  f44f710a          MOV      r1,#0x228
00001a  e9cd8300          STRD     r8,r3,[sp,#0]
00001e  5908              LDR      r0,[r1,r4]
000020  4633              MOV      r3,r6
000022  2201              MOVS     r2,#1
000024  f504710f          ADD      r1,r4,#0x23c
000028  f7fffffe          BL       eap_ikev2_validate_icv
00002c  4681              MOV      r9,r0
;;;259    			data->ikev2.proposal.integ, &data->ikev2.keys, 1,
;;;260    			reqData, pos, *end);
;;;261    		if (icv_len < 0)
00002e  f1b90f00          CMP      r9,#0
000032  da03              BGE      |L12.60|
;;;262    			return -1;
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L12.56|
;;;263    		/* Hide Integrity Checksum Data from further processing */
;;;264    		*end -= icv_len;
;;;265    	} else if (data->keys_ready) {
;;;266    		wpa_printf(MSG_INFO, "EAP-IKEV2: The message should have "
;;;267    			   "included integrity checksum");
;;;268    		return -1;
;;;269    	}
;;;270    
;;;271    	return 0;
;;;272    }
000038  e8bd87fc          POP      {r2-r10,pc}
                  |L12.60|
00003c  6828              LDR      r0,[r5,#0]            ;264
00003e  eba00009          SUB      r0,r0,r9              ;264
000042  6028              STR      r0,[r5,#0]            ;264
000044  e009              B        |L12.90|
                  |L12.70|
000046  f8d402b0          LDR      r0,[r4,#0x2b0]        ;265
00004a  b130              CBZ      r0,|L12.90|
00004c  a104              ADR      r1,|L12.96|
00004e  2000              MOVS     r0,#0                 ;266
000050  f7fffffe          BL       wpa_printf
000054  f04f30ff          MOV      r0,#0xffffffff        ;268
000058  e7ee              B        |L12.56|
                  |L12.90|
00005a  2000              MOVS     r0,#0                 ;271
00005c  e7ec              B        |L12.56|
;;;273    
                          ENDP

00005e  0000              DCW      0x0000
                  |L12.96|
000060  4541502d          DCB      "EAP-IKEV2: The message should have included integrity c"
000064  494b4556
000068  323a2054
00006c  6865206d
000070  65737361
000074  67652073
000078  686f756c
00007c  64206861
000080  76652069
000084  6e636c75
000088  64656420
00008c  696e7465
000090  67726974
000094  792063  
000097  6865636b          DCB      "hecksum",0
00009b  73756d00
00009f  00                DCB      0

                          AREA ||i.eap_ikev2_state||, CODE, READONLY, ALIGN=2

                  eap_ikev2_state PROC
;;;54     
;;;55     static void eap_ikev2_state(struct eap_ikev2_data *data, int state)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;56     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;57     	wpa_printf(MSG_DEBUG, "EAP-IKEV2: %s -> %s",
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       eap_ikev2_state_txt
00000e  4606              MOV      r6,r0
000010  f894029c          LDRB     r0,[r4,#0x29c]
000014  f7fffffe          BL       eap_ikev2_state_txt
000018  4607              MOV      r7,r0
00001a  4633              MOV      r3,r6
00001c  4602              MOV      r2,r0
00001e  a104              ADR      r1,|L13.48|
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       wpa_printf
;;;58     		   eap_ikev2_state_txt(data->state),
;;;59     		   eap_ikev2_state_txt(state));
;;;60     	data->state = state;
000026  f884529c          STRB     r5,[r4,#0x29c]
;;;61     }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;62     
                          ENDP

00002e  0000              DCW      0x0000
                  |L13.48|
000030  4541502d          DCB      "EAP-IKEV2: %s -> %s",0
000034  494b4556
000038  323a2025
00003c  73202d3e
000040  20257300

                          AREA ||i.eap_ikev2_state_txt||, CODE, READONLY, ALIGN=2

                  eap_ikev2_state_txt PROC
;;;35     
;;;36     static const char * eap_ikev2_state_txt(int state)
000000  4601              MOV      r1,r0
;;;37     {
;;;38     	switch (state) {
000002  2905              CMP      r1,#5
000004  d20e              BCS      |L14.36|
000006  e8dff001          TBB      [pc,r1]
00000a  0305              DCB      0x03,0x05
00000c  07090b00          DCB      0x07,0x09,0x0b,0x00
;;;39     	case WAIT_START:
;;;40     		return "WAIT_START";
000010  a005              ADR      r0,|L14.40|
                  |L14.18|
;;;41     	case PROC_MSG:
;;;42     		return "PROC_MSG";
;;;43     	case WAIT_FRAG_ACK:
;;;44     		return "WAIT_FRAG_ACK";
;;;45     	case DONE:
;;;46     		return "DONE";
;;;47     	case FAIL:
;;;48     		return "FAIL";
;;;49     	default:
;;;50     		return "?";
;;;51     	}
;;;52     }
000012  4770              BX       lr
000014  a007              ADR      r0,|L14.52|
000016  e7fc              B        |L14.18|
000018  a009              ADR      r0,|L14.64|
00001a  e7fa              B        |L14.18|
00001c  a00c              ADR      r0,|L14.80|
00001e  e7f8              B        |L14.18|
000020  a00d              ADR      r0,|L14.88|
000022  e7f6              B        |L14.18|
                  |L14.36|
000024  a00e              ADR      r0,|L14.96|
000026  e7f4              B        |L14.18|
;;;53     
                          ENDP

                  |L14.40|
000028  57414954          DCB      "WAIT_START",0
00002c  5f535441
000030  525400  
000033  00                DCB      0
                  |L14.52|
000034  50524f43          DCB      "PROC_MSG",0
000038  5f4d5347
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0
                  |L14.64|
000040  57414954          DCB      "WAIT_FRAG_ACK",0
000044  5f465241
000048  475f4143
00004c  4b00    
00004e  00                DCB      0
00004f  00                DCB      0
                  |L14.80|
000050  444f4e45          DCB      "DONE",0
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L14.88|
000058  4641494c          DCB      "FAIL",0
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
                  |L14.96|
000060  3f00              DCB      "?",0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.eap_peer_ikev2_register||, CODE, READONLY, ALIGN=2

                  eap_peer_ikev2_register PROC
;;;483    
;;;484    int eap_peer_ikev2_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;485    {
;;;486    	struct eap_method *eap;
;;;487    	int ret;
;;;488    
;;;489    	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a310              ADR      r3,|L15.68|
000004  2231              MOVS     r2,#0x31
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;490    				    EAP_VENDOR_IETF, EAP_TYPE_IKEV2,
;;;491    				    "IKEV2");
;;;492    	if (eap == NULL)
000010  b914              CBNZ     r4,|L15.24|
;;;493    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L15.22|
;;;494    
;;;495    	eap->init = eap_ikev2_init;
;;;496    	eap->deinit = eap_ikev2_deinit;
;;;497    	eap->process = eap_ikev2_process;
;;;498    	eap->isKeyAvailable = eap_ikev2_isKeyAvailable;
;;;499    	eap->getKey = eap_ikev2_getKey;
;;;500    	eap->get_emsk = eap_ikev2_get_emsk;
;;;501    
;;;502    	ret = eap_peer_method_register(eap);
;;;503    	if (ret)
;;;504    		eap_peer_method_free(eap);
;;;505    	return ret;
;;;506    }
000016  bd70              POP      {r4-r6,pc}
                  |L15.24|
000018  480c              LDR      r0,|L15.76|
00001a  60e0              STR      r0,[r4,#0xc]          ;495
00001c  480c              LDR      r0,|L15.80|
00001e  6120              STR      r0,[r4,#0x10]         ;496
000020  480c              LDR      r0,|L15.84|
000022  6160              STR      r0,[r4,#0x14]         ;497
000024  480c              LDR      r0,|L15.88|
000026  61a0              STR      r0,[r4,#0x18]         ;498
000028  480c              LDR      r0,|L15.92|
00002a  61e0              STR      r0,[r4,#0x1c]         ;499
00002c  480c              LDR      r0,|L15.96|
00002e  6420              STR      r0,[r4,#0x40]         ;500
000030  4620              MOV      r0,r4                 ;502
000032  f7fffffe          BL       eap_peer_method_register
000036  4605              MOV      r5,r0                 ;502
000038  b115              CBZ      r5,|L15.64|
00003a  4620              MOV      r0,r4                 ;504
00003c  f7fffffe          BL       eap_peer_method_free
                  |L15.64|
000040  4628              MOV      r0,r5                 ;505
000042  e7e8              B        |L15.22|
                          ENDP

                  |L15.68|
000044  494b4556          DCB      "IKEV2",0
000048  3200    
00004a  00                DCB      0
00004b  00                DCB      0
                  |L15.76|
                          DCD      eap_ikev2_init
                  |L15.80|
                          DCD      eap_ikev2_deinit
                  |L15.84|
                          DCD      eap_ikev2_process
                  |L15.88|
                          DCD      eap_ikev2_isKeyAvailable
                  |L15.92|
                          DCD      eap_ikev2_getKey
                  |L15.96|
                          DCD      eap_ikev2_get_emsk

                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L18.30|
00001a  2001              MOVS     r0,#1
                  |L18.28|
;;;495    }
00001c  4770              BX       lr
                  |L18.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L18.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L23.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L23.14|
                  |L23.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L23.12|
;;;70     }
00000c  4770              BX       lr
                  |L23.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L23.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L24.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L24.16|
                  |L24.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L24.14|
;;;76     }
00000e  4770              BX       lr
                  |L24.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L24.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L25.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L25.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L25.18|
                  |L25.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L25.16|
;;;57     }
000010  4770              BX       lr
                  |L25.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L25.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L26.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L26.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L26.20|
                  |L26.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L26.18|
;;;64     }
000012  4770              BX       lr
                  |L26.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L26.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L27.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L27.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L27.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L27.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L30.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L30.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L30.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L30.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L36.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L36.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  494b4556          DCB      0x49,0x4b,0x45,0x56
000008  323a2052          DCB      0x32,0x3a,0x20,0x52
00000c  65636569          DCB      0x65,0x63,0x65,0x69
000010  76656420          DCB      0x76,0x65,0x64,0x20
000014  256c7520          DCB      0x25,0x6c,0x75,0x20
000018  62797465          DCB      0x62,0x79,0x74,0x65
00001c  7320696e          DCB      0x73,0x20,0x69,0x6e
000020  20666972          DCB      0x20,0x66,0x69,0x72
000024  73742066          DCB      0x73,0x74,0x20,0x66
000028  7261676d          DCB      0x72,0x61,0x67,0x6d
00002c  656e742c          DCB      0x65,0x6e,0x74,0x2c
000030  20776169          DCB      0x20,0x77,0x61,0x69
000034  74696e67          DCB      0x74,0x69,0x6e,0x67
000038  20666f72          DCB      0x20,0x66,0x6f,0x72
00003c  20256c75          DCB      0x20,0x25,0x6c,0x75
000040  20627974          DCB      0x20,0x62,0x79,0x74
000044  6573206d          DCB      0x65,0x73,0x20,0x6d
000048  6f726500          DCB      0x6f,0x72,0x65,0x00
00004c  4541502d          DCB      0x45,0x41,0x50,0x2d
000050  494b4556          DCB      0x49,0x4b,0x45,0x56
000054  323a2049          DCB      0x32,0x3a,0x20,0x49
000058  6e76616c          DCB      0x6e,0x76,0x61,0x6c
00005c  6964204d          DCB      0x69,0x64,0x20,0x4d
000060  65737361          DCB      0x65,0x73,0x73,0x61
000064  6765204c          DCB      0x67,0x65,0x20,0x4c
000068  656e6774          DCB      0x65,0x6e,0x67,0x74
00006c  68202825          DCB      0x68,0x20,0x28,0x25
000070  643b2025          DCB      0x64,0x3b,0x20,0x25
000074  6c642072          DCB      0x6c,0x64,0x20,0x72
000078  656d6169          DCB      0x65,0x6d,0x61,0x69
00007c  6e696e67          DCB      0x6e,0x69,0x6e,0x67
000080  20696e20          DCB      0x20,0x69,0x6e,0x20
000084  74686973          DCB      0x74,0x68,0x69,0x73
000088  206d7367          DCB      0x20,0x6d,0x73,0x67
00008c  2900              DCB      0x29,0x00
