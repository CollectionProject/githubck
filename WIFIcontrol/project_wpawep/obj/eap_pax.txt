; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_pax.o --depend=.\obj\eap_pax.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_pax.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_pax.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_pax_alloc_resp||, CODE, READONLY, ALIGN=1

                  eap_pax_alloc_resp PROC
;;;97     
;;;98     static struct wpabuf * eap_pax_alloc_resp(const struct eap_pax_hdr *req,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;99     					  u8 id, u8 op_code, size_t plen)
;;;100    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;101    	struct wpabuf *resp;
;;;102    	struct eap_pax_hdr *pax;
;;;103    
;;;104    	resp = eap_msg_alloc(EAP_VENDOR_IETF, EAP_TYPE_PAX,
00000c  f1080205          ADD      r2,r8,#5
000010  2302              MOVS     r3,#2
000012  212e              MOVS     r1,#0x2e
000014  2000              MOVS     r0,#0
000016  9600              STR      r6,[sp,#0]
000018  f7fffffe          BL       eap_msg_alloc
00001c  4681              MOV      r9,r0
;;;105    			     sizeof(*pax) + plen, EAP_CODE_RESPONSE, id);
;;;106    	if (resp == NULL)
00001e  f1b90f00          CMP      r9,#0
000022  d102              BNE      |L2.42|
;;;107    		return NULL;
000024  2000              MOVS     r0,#0
                  |L2.38|
;;;108    
;;;109    	pax = wpabuf_put(resp, sizeof(*pax));
;;;110    	pax->op_code = op_code;
;;;111    	pax->flags = 0;
;;;112    	pax->mac_id = req->mac_id;
;;;113    	pax->dh_group_id = req->dh_group_id;
;;;114    	pax->public_key_id = req->public_key_id;
;;;115    
;;;116    	return resp;
;;;117    }
000026  e8bd83f8          POP      {r3-r9,pc}
                  |L2.42|
00002a  2105              MOVS     r1,#5                 ;109
00002c  4648              MOV      r0,r9                 ;109
00002e  f7fffffe          BL       wpabuf_put
000032  4604              MOV      r4,r0                 ;109
000034  7027              STRB     r7,[r4,#0]            ;110
000036  2000              MOVS     r0,#0                 ;111
000038  7060              STRB     r0,[r4,#1]            ;111
00003a  78a8              LDRB     r0,[r5,#2]            ;112
00003c  70a0              STRB     r0,[r4,#2]            ;112
00003e  78e8              LDRB     r0,[r5,#3]            ;113
000040  70e0              STRB     r0,[r4,#3]            ;113
000042  7928              LDRB     r0,[r5,#4]            ;114
000044  7120              STRB     r0,[r4,#4]            ;114
000046  4648              MOV      r0,r9                 ;116
000048  e7ed              B        |L2.38|
;;;118    
                          ENDP


                          AREA ||i.eap_pax_deinit||, CODE, READONLY, ALIGN=1

                  eap_pax_deinit PROC
;;;89     
;;;90     static void eap_pax_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;91     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;92     	struct eap_pax_data *data = priv;
000006  4625              MOV      r5,r4
;;;93     	os_free(data->cid);
000008  6c68              LDR      r0,[r5,#0x44]
00000a  f7fffffe          BL       os_free
;;;94     	os_free(data);
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       os_free
;;;95     }
000014  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP


                          AREA ||i.eap_pax_getKey||, CODE, READONLY, ALIGN=2

                  eap_pax_getKey PROC
;;;465    
;;;466    static u8 * eap_pax_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;467    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;468    	struct eap_pax_data *data = priv;
00000a  4634              MOV      r4,r6
;;;469    	u8 *key;
;;;470    
;;;471    	if (data->state != PAX_DONE)
00000c  7820              LDRB     r0,[r4,#0]
00000e  2802              CMP      r0,#2
000010  d003              BEQ      |L4.26|
;;;472    		return NULL;
000012  2000              MOVS     r0,#0
                  |L4.20|
;;;473    
;;;474    	key = os_malloc(EAP_MSK_LEN);
;;;475    	if (key == NULL)
;;;476    		return NULL;
;;;477    
;;;478    	*len = EAP_MSK_LEN;
;;;479    	eap_pax_kdf(data->mac_id, data->mk, EAP_PAX_MK_LEN,
;;;480    		    "Master Session Key", data->rand.e, 2 * EAP_PAX_RAND_LEN,
;;;481    		    EAP_MSK_LEN, key);
;;;482    
;;;483    	return key;
;;;484    }
000014  b004              ADD      sp,sp,#0x10
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L4.26|
00001a  2040              MOVS     r0,#0x40              ;474
00001c  f7fffffe          BL       os_malloc
000020  4605              MOV      r5,r0                 ;474
000022  b90d              CBNZ     r5,|L4.40|
000024  2000              MOVS     r0,#0                 ;476
000026  e7f5              B        |L4.20|
                  |L4.40|
000028  2040              MOVS     r0,#0x40              ;478
00002a  6038              STR      r0,[r7,#0]            ;478
00002c  2240              MOVS     r2,#0x40              ;479
00002e  1d20              ADDS     r0,r4,#4              ;479
000030  e9cd0200          STRD     r0,r2,[sp,#0]         ;479
000034  e9cd2502          STRD     r2,r5,[sp,#8]         ;479
000038  7860              LDRB     r0,[r4,#1]            ;479
00003a  a304              ADR      r3,|L4.76|
00003c  2210              MOVS     r2,#0x10              ;479
00003e  f104015c          ADD      r1,r4,#0x5c           ;479
000042  f7fffffe          BL       eap_pax_kdf
000046  4628              MOV      r0,r5                 ;483
000048  e7e4              B        |L4.20|
;;;485    
                          ENDP

00004a  0000              DCW      0x0000
                  |L4.76|
00004c  4d617374          DCB      "Master Session Key",0
000050  65722053
000054  65737369
000058  6f6e204b
00005c  657900  
00005f  00                DCB      0

                          AREA ||i.eap_pax_get_emsk||, CODE, READONLY, ALIGN=2

                  eap_pax_get_emsk PROC
;;;486    
;;;487    static u8 * eap_pax_get_emsk(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;488    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;489    	struct eap_pax_data *data = priv;
00000a  4634              MOV      r4,r6
;;;490    	u8 *key;
;;;491    
;;;492    	if (data->state != PAX_DONE)
00000c  7820              LDRB     r0,[r4,#0]
00000e  2802              CMP      r0,#2
000010  d003              BEQ      |L5.26|
;;;493    		return NULL;
000012  2000              MOVS     r0,#0
                  |L5.20|
;;;494    
;;;495    	key = os_malloc(EAP_EMSK_LEN);
;;;496    	if (key == NULL)
;;;497    		return NULL;
;;;498    
;;;499    	*len = EAP_EMSK_LEN;
;;;500    	eap_pax_kdf(data->mac_id, data->mk, EAP_PAX_MK_LEN,
;;;501    		    "Extended Master Session Key",
;;;502    		    data->rand.e, 2 * EAP_PAX_RAND_LEN,
;;;503    		    EAP_EMSK_LEN, key);
;;;504    
;;;505    	return key;
;;;506    }
000014  b004              ADD      sp,sp,#0x10
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L5.26|
00001a  2040              MOVS     r0,#0x40              ;495
00001c  f7fffffe          BL       os_malloc
000020  4605              MOV      r5,r0                 ;495
000022  b90d              CBNZ     r5,|L5.40|
000024  2000              MOVS     r0,#0                 ;497
000026  e7f5              B        |L5.20|
                  |L5.40|
000028  2040              MOVS     r0,#0x40              ;499
00002a  6038              STR      r0,[r7,#0]            ;499
00002c  2240              MOVS     r2,#0x40              ;500
00002e  1d20              ADDS     r0,r4,#4              ;500
000030  e9cd0200          STRD     r0,r2,[sp,#0]         ;500
000034  e9cd2502          STRD     r2,r5,[sp,#8]         ;500
000038  7860              LDRB     r0,[r4,#1]            ;500
00003a  a304              ADR      r3,|L5.76|
00003c  2210              MOVS     r2,#0x10              ;500
00003e  f104015c          ADD      r1,r4,#0x5c           ;500
000042  f7fffffe          BL       eap_pax_kdf
000046  4628              MOV      r0,r5                 ;505
000048  e7e4              B        |L5.20|
;;;507    
                          ENDP

00004a  0000              DCW      0x0000
                  |L5.76|
00004c  45787465          DCB      "Extended Master Session Key",0
000050  6e646564
000054  204d6173
000058  74657220
00005c  53657373
000060  696f6e20
000064  4b657900

                          AREA ||i.eap_pax_init||, CODE, READONLY, ALIGN=2

                  eap_pax_init PROC
;;;51     
;;;52     static void * eap_pax_init(struct eap_sm *sm)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;53     {
000004  4607              MOV      r7,r0
;;;54     	struct eap_pax_data *data;
;;;55     	const u8 *identity, *password;
;;;56     	size_t identity_len, password_len;
;;;57     
;;;58     	identity = eap_get_config_identity(sm, &identity_len);
000006  a901              ADD      r1,sp,#4
000008  4638              MOV      r0,r7
00000a  f7fffffe          BL       eap_get_config_identity
00000e  4605              MOV      r5,r0
;;;59     	password = eap_get_config_password(sm, &password_len);
000010  4669              MOV      r1,sp
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       eap_get_config_password
000018  4606              MOV      r6,r0
;;;60     	if (!identity || !password) {
00001a  b105              CBZ      r5,|L6.30|
00001c  b936              CBNZ     r6,|L6.44|
                  |L6.30|
;;;61     		wpa_printf(MSG_INFO, "EAP-PAX: CID (nai) or key (password) "
00001e  a11a              ADR      r1,|L6.136|
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       wpa_printf
;;;62     			   "not configured");
;;;63     		return NULL;
000026  2000              MOVS     r0,#0
                  |L6.40|
;;;64     	}
;;;65     
;;;66     	if (password_len != EAP_PAX_AK_LEN) {
;;;67     		wpa_printf(MSG_INFO, "EAP-PAX: Invalid PSK length");
;;;68     		return NULL;
;;;69     	}
;;;70     
;;;71     	data = os_zalloc(sizeof(*data));
;;;72     	if (data == NULL)
;;;73     		return NULL;
;;;74     	data->state = PAX_INIT;
;;;75     
;;;76     	data->cid = os_malloc(identity_len);
;;;77     	if (data->cid == NULL) {
;;;78     		eap_pax_deinit(sm, data);
;;;79     		return NULL;
;;;80     	}
;;;81     	os_memcpy(data->cid, identity, identity_len);
;;;82     	data->cid_len = identity_len;
;;;83     
;;;84     	os_memcpy(data->ak, password, EAP_PAX_AK_LEN);
;;;85     
;;;86     	return data;
;;;87     }
000028  e8bd81fc          POP      {r2-r8,pc}
                  |L6.44|
00002c  9800              LDR      r0,[sp,#0]            ;66
00002e  2810              CMP      r0,#0x10              ;66
000030  d005              BEQ      |L6.62|
000032  a122              ADR      r1,|L6.188|
000034  2000              MOVS     r0,#0                 ;67
000036  f7fffffe          BL       wpa_printf
00003a  2000              MOVS     r0,#0                 ;68
00003c  e7f4              B        |L6.40|
                  |L6.62|
00003e  208c              MOVS     r0,#0x8c              ;71
000040  f7fffffe          BL       os_zalloc
000044  4604              MOV      r4,r0                 ;71
000046  b90c              CBNZ     r4,|L6.76|
000048  2000              MOVS     r0,#0                 ;73
00004a  e7ed              B        |L6.40|
                  |L6.76|
00004c  2000              MOVS     r0,#0                 ;74
00004e  7020              STRB     r0,[r4,#0]            ;74
000050  9801              LDR      r0,[sp,#4]            ;76
000052  f7fffffe          BL       os_malloc
000056  6460              STR      r0,[r4,#0x44]         ;76
000058  6c60              LDR      r0,[r4,#0x44]         ;77
00005a  b928              CBNZ     r0,|L6.104|
00005c  4621              MOV      r1,r4                 ;78
00005e  4638              MOV      r0,r7                 ;78
000060  f7fffffe          BL       eap_pax_deinit
000064  2000              MOVS     r0,#0                 ;79
000066  e7df              B        |L6.40|
                  |L6.104|
000068  6c60              LDR      r0,[r4,#0x44]         ;81
00006a  4629              MOV      r1,r5                 ;81
00006c  9a01              LDR      r2,[sp,#4]            ;81
00006e  f7fffffe          BL       os_memcpy
000072  9801              LDR      r0,[sp,#4]            ;82
000074  64a0              STR      r0,[r4,#0x48]         ;82
000076  2210              MOVS     r2,#0x10              ;84
000078  4631              MOV      r1,r6                 ;84
00007a  f104004c          ADD      r0,r4,#0x4c           ;84
00007e  f7fffffe          BL       os_memcpy
000082  4620              MOV      r0,r4                 ;86
000084  e7d0              B        |L6.40|
;;;88     
                          ENDP

000086  0000              DCW      0x0000
                  |L6.136|
000088  4541502d          DCB      "EAP-PAX: CID (nai) or key (password) not configured",0
00008c  5041583a
000090  20434944
000094  20286e61
000098  6929206f
00009c  72206b65
0000a0  79202870
0000a4  61737377
0000a8  6f726429
0000ac  206e6f74
0000b0  20636f6e
0000b4  66696775
0000b8  72656400
                  |L6.188|
0000bc  4541502d          DCB      "EAP-PAX: Invalid PSK length",0
0000c0  5041583a
0000c4  20496e76
0000c8  616c6964
0000cc  2050534b
0000d0  206c656e
0000d4  67746800

                          AREA ||i.eap_pax_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_pax_isKeyAvailable PROC
;;;458    
;;;459    static Boolean eap_pax_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;460    {
;;;461    	struct eap_pax_data *data = priv;
000002  460a              MOV      r2,r1
;;;462    	return data->state == PAX_DONE;
000004  7810              LDRB     r0,[r2,#0]
000006  2802              CMP      r0,#2
000008  d101              BNE      |L7.14|
00000a  2001              MOVS     r0,#1
                  |L7.12|
;;;463    }
00000c  4770              BX       lr
                  |L7.14|
00000e  2000              MOVS     r0,#0                 ;462
000010  e7fc              B        |L7.12|
;;;464    
                          ENDP


                          AREA ||i.eap_pax_process||, CODE, READONLY, ALIGN=2

                  eap_pax_process PROC
;;;326    
;;;327    static struct wpabuf * eap_pax_process(struct eap_sm *sm, void *priv,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;328    				       struct eap_method_ret *ret,
;;;329    				       const struct wpabuf *reqData)
;;;330    {
000004  b08f              SUB      sp,sp,#0x3c
000006  468b              MOV      r11,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
;;;331    	struct eap_pax_data *data = priv;
00000c  465e              MOV      r6,r11
;;;332    	const struct eap_pax_hdr *req;
;;;333    	struct wpabuf *resp;
;;;334    	u8 icvbuf[EAP_PAX_ICV_LEN], id;
;;;335    	const u8 *icv, *pos;
;;;336    	size_t len;
;;;337    	u16 flen, mlen;
;;;338    
;;;339    	pos = eap_hdr_validate(EAP_VENDOR_IETF, EAP_TYPE_PAX, reqData, &len);
00000e  ab09              ADD      r3,sp,#0x24
000010  4642              MOV      r2,r8
000012  212e              MOVS     r1,#0x2e
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       eap_hdr_validate
00001a  4607              MOV      r7,r0
;;;340    	if (pos == NULL || len < EAP_PAX_ICV_LEN) {
00001c  b117              CBZ      r7,|L8.36|
00001e  9809              LDR      r0,[sp,#0x24]
000020  2810              CMP      r0,#0x10
000022  d205              BCS      |L8.48|
                  |L8.36|
;;;341    		ret->ignore = TRUE;
000024  2001              MOVS     r0,#1
000026  6028              STR      r0,[r5,#0]
;;;342    		return NULL;
000028  2000              MOVS     r0,#0
                  |L8.42|
;;;343    	}
;;;344    	id = eap_get_id(reqData);
;;;345    	req = (const struct eap_pax_hdr *) pos;
;;;346    	flen = len - EAP_PAX_ICV_LEN;
;;;347    	mlen = wpabuf_len(reqData) - EAP_PAX_ICV_LEN;
;;;348    
;;;349    	wpa_printf(MSG_DEBUG, "EAP-PAX: received frame: op_code 0x%x "
;;;350    		   "flags 0x%x mac_id 0x%x dh_group_id 0x%x "
;;;351    		   "public_key_id 0x%x",
;;;352    		   req->op_code, req->flags, req->mac_id, req->dh_group_id,
;;;353    		   req->public_key_id);
;;;354    	wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: received payload",
;;;355    		    pos, len - EAP_PAX_ICV_LEN);
;;;356    
;;;357    	if (data->state != PAX_INIT && data->mac_id != req->mac_id) {
;;;358    		wpa_printf(MSG_INFO, "EAP-PAX: MAC ID changed during "
;;;359    			   "authentication (was 0x%d, is 0x%d)",
;;;360    			   data->mac_id, req->mac_id);
;;;361    		ret->ignore = TRUE;
;;;362    		return NULL;
;;;363    	}
;;;364    
;;;365    	if (data->state != PAX_INIT && data->dh_group_id != req->dh_group_id) {
;;;366    		wpa_printf(MSG_INFO, "EAP-PAX: DH Group ID changed during "
;;;367    			   "authentication (was 0x%d, is 0x%d)",
;;;368    			   data->dh_group_id, req->dh_group_id);
;;;369    		ret->ignore = TRUE;
;;;370    		return NULL;
;;;371    	}
;;;372    
;;;373    	if (data->state != PAX_INIT &&
;;;374    	    data->public_key_id != req->public_key_id) {
;;;375    		wpa_printf(MSG_INFO, "EAP-PAX: Public Key ID changed during "
;;;376    			   "authentication (was 0x%d, is 0x%d)",
;;;377    			   data->public_key_id, req->public_key_id);
;;;378    		ret->ignore = TRUE;
;;;379    		return NULL;
;;;380    	}
;;;381    
;;;382    	/* TODO: add support EAP_PAX_HMAC_SHA256_128 */
;;;383    	if (req->mac_id != EAP_PAX_MAC_HMAC_SHA1_128) {
;;;384    		wpa_printf(MSG_INFO, "EAP-PAX: Unsupported MAC ID 0x%x",
;;;385    			   req->mac_id);
;;;386    		ret->ignore = TRUE;
;;;387    		return NULL;
;;;388    	}
;;;389    
;;;390    	if (req->dh_group_id != EAP_PAX_DH_GROUP_NONE) {
;;;391    		wpa_printf(MSG_INFO, "EAP-PAX: Unsupported DH Group ID 0x%x",
;;;392    			   req->dh_group_id);
;;;393    		ret->ignore = TRUE;
;;;394    		return NULL;
;;;395    	}
;;;396    
;;;397    	if (req->public_key_id != EAP_PAX_PUBLIC_KEY_NONE) {
;;;398    		wpa_printf(MSG_INFO, "EAP-PAX: Unsupported Public Key ID 0x%x",
;;;399    			   req->public_key_id);
;;;400    		ret->ignore = TRUE;
;;;401    		return NULL;
;;;402    	}
;;;403    
;;;404    	if (req->flags & EAP_PAX_FLAGS_MF) {
;;;405    		/* TODO: add support for reassembling fragments */
;;;406    		wpa_printf(MSG_INFO, "EAP-PAX: fragmentation not supported - "
;;;407    			   "ignored packet");
;;;408    		ret->ignore = TRUE;
;;;409    		return NULL;
;;;410    	}
;;;411    
;;;412    	icv = pos + len - EAP_PAX_ICV_LEN;
;;;413    	wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: ICV", icv, EAP_PAX_ICV_LEN);
;;;414    	if (req->op_code == EAP_PAX_OP_STD_1) {
;;;415    		eap_pax_mac(req->mac_id, (u8 *) "", 0,
;;;416    			    wpabuf_head(reqData), mlen, NULL, 0, NULL, 0,
;;;417    			    icvbuf);
;;;418    	} else {
;;;419    		eap_pax_mac(req->mac_id, data->ick, EAP_PAX_ICK_LEN,
;;;420    			    wpabuf_head(reqData), mlen, NULL, 0, NULL, 0,
;;;421    			    icvbuf);
;;;422    	}
;;;423    	if (os_memcmp(icv, icvbuf, EAP_PAX_ICV_LEN) != 0) {
;;;424    		wpa_printf(MSG_DEBUG, "EAP-PAX: invalid ICV - ignoring the "
;;;425    			   "message");
;;;426    		wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: expected ICV",
;;;427    			    icvbuf, EAP_PAX_ICV_LEN);
;;;428    		ret->ignore = TRUE;
;;;429    		return NULL;
;;;430    	}
;;;431    
;;;432    	ret->ignore = FALSE;
;;;433    	ret->methodState = METHOD_MAY_CONT;
;;;434    	ret->decision = DECISION_FAIL;
;;;435    	ret->allowNotifications = TRUE;
;;;436    
;;;437    	switch (req->op_code) {
;;;438    	case EAP_PAX_OP_STD_1:
;;;439    		resp = eap_pax_process_std_1(data, ret, id, req, flen);
;;;440    		break;
;;;441    	case EAP_PAX_OP_STD_3:
;;;442    		resp = eap_pax_process_std_3(data, ret, id, req, flen);
;;;443    		break;
;;;444    	default:
;;;445    		wpa_printf(MSG_DEBUG, "EAP-PAX: ignoring message with unknown "
;;;446    			   "op_code %d", req->op_code);
;;;447    		ret->ignore = TRUE;
;;;448    		return NULL;
;;;449    	}
;;;450    
;;;451    	if (ret->methodState == METHOD_DONE) {
;;;452    		ret->allowNotifications = FALSE;
;;;453    	}
;;;454    
;;;455    	return resp;
;;;456    }
00002a  b00f              ADD      sp,sp,#0x3c
00002c  e8bd8ff0          POP      {r4-r11,pc}
                  |L8.48|
000030  4640              MOV      r0,r8                 ;344
000032  f7fffffe          BL       eap_get_id
000036  900a              STR      r0,[sp,#0x28]         ;344
000038  463c              MOV      r4,r7                 ;345
00003a  9809              LDR      r0,[sp,#0x24]         ;346
00003c  3810              SUBS     r0,r0,#0x10           ;346
00003e  b280              UXTH     r0,r0                 ;346
000040  9008              STR      r0,[sp,#0x20]         ;346
000042  4640              MOV      r0,r8                 ;347
000044  f7fffffe          BL       wpabuf_len
000048  3810              SUBS     r0,r0,#0x10           ;347
00004a  b280              UXTH     r0,r0                 ;347
00004c  9007              STR      r0,[sp,#0x1c]         ;347
00004e  7923              LDRB     r3,[r4,#4]            ;349
000050  78e2              LDRB     r2,[r4,#3]            ;349
000052  78a1              LDRB     r1,[r4,#2]            ;349
000054  e88d000e          STM      sp,{r1-r3}            ;349
000058  7863              LDRB     r3,[r4,#1]            ;349
00005a  7822              LDRB     r2,[r4,#0]            ;349
00005c  4975              LDR      r1,|L8.564|
00005e  2000              MOVS     r0,#0                 ;349
000060  f7fffffe          BL       wpa_printf
000064  9809              LDR      r0,[sp,#0x24]         ;354
000066  f1a00310          SUB      r3,r0,#0x10           ;354
00006a  463a              MOV      r2,r7                 ;354
00006c  a172              ADR      r1,|L8.568|
00006e  2000              MOVS     r0,#0                 ;354
000070  f7fffffe          BL       wpa_hexdump
000074  7830              LDRB     r0,[r6,#0]            ;357
000076  b170              CBZ      r0,|L8.150|
000078  7870              LDRB     r0,[r6,#1]            ;357
00007a  78a1              LDRB     r1,[r4,#2]            ;357
00007c  4288              CMP      r0,r1                 ;357
00007e  d00a              BEQ      |L8.150|
000080  78a3              LDRB     r3,[r4,#2]            ;358
000082  7872              LDRB     r2,[r6,#1]            ;358
000084  496b              LDR      r1,|L8.564|
000086  3164              ADDS     r1,r1,#0x64           ;358
000088  2000              MOVS     r0,#0                 ;358
00008a  f7fffffe          BL       wpa_printf
00008e  2001              MOVS     r0,#1                 ;361
000090  6028              STR      r0,[r5,#0]            ;361
000092  2000              MOVS     r0,#0                 ;362
000094  e7c9              B        |L8.42|
                  |L8.150|
000096  7830              LDRB     r0,[r6,#0]            ;365
000098  b170              CBZ      r0,|L8.184|
00009a  78b0              LDRB     r0,[r6,#2]            ;365
00009c  78e1              LDRB     r1,[r4,#3]            ;365
00009e  4288              CMP      r0,r1                 ;365
0000a0  d00a              BEQ      |L8.184|
0000a2  78e3              LDRB     r3,[r4,#3]            ;366
0000a4  78b2              LDRB     r2,[r6,#2]            ;366
0000a6  4963              LDR      r1,|L8.564|
0000a8  31a8              ADDS     r1,r1,#0xa8           ;366
0000aa  2000              MOVS     r0,#0                 ;366
0000ac  f7fffffe          BL       wpa_printf
0000b0  2001              MOVS     r0,#1                 ;369
0000b2  6028              STR      r0,[r5,#0]            ;369
0000b4  2000              MOVS     r0,#0                 ;370
0000b6  e7b8              B        |L8.42|
                  |L8.184|
0000b8  7830              LDRB     r0,[r6,#0]            ;373
0000ba  b170              CBZ      r0,|L8.218|
0000bc  78f0              LDRB     r0,[r6,#3]            ;374
0000be  7921              LDRB     r1,[r4,#4]            ;374
0000c0  4288              CMP      r0,r1                 ;374
0000c2  d00a              BEQ      |L8.218|
0000c4  7923              LDRB     r3,[r4,#4]            ;375
0000c6  78f2              LDRB     r2,[r6,#3]            ;375
0000c8  495a              LDR      r1,|L8.564|
0000ca  31f0              ADDS     r1,r1,#0xf0           ;375
0000cc  2000              MOVS     r0,#0                 ;375
0000ce  f7fffffe          BL       wpa_printf
0000d2  2001              MOVS     r0,#1                 ;378
0000d4  6028              STR      r0,[r5,#0]            ;378
0000d6  2000              MOVS     r0,#0                 ;379
0000d8  e7a7              B        |L8.42|
                  |L8.218|
0000da  78a0              LDRB     r0,[r4,#2]            ;383
0000dc  2801              CMP      r0,#1                 ;383
0000de  d008              BEQ      |L8.242|
0000e0  78a2              LDRB     r2,[r4,#2]            ;384
0000e2  a15c              ADR      r1,|L8.596|
0000e4  2000              MOVS     r0,#0                 ;384
0000e6  f7fffffe          BL       wpa_printf
0000ea  2001              MOVS     r0,#1                 ;386
0000ec  6028              STR      r0,[r5,#0]            ;386
0000ee  2000              MOVS     r0,#0                 ;387
0000f0  e79b              B        |L8.42|
                  |L8.242|
0000f2  78e0              LDRB     r0,[r4,#3]            ;390
0000f4  b140              CBZ      r0,|L8.264|
0000f6  78e2              LDRB     r2,[r4,#3]            ;391
0000f8  a15f              ADR      r1,|L8.632|
0000fa  2000              MOVS     r0,#0                 ;391
0000fc  f7fffffe          BL       wpa_printf
000100  2001              MOVS     r0,#1                 ;393
000102  6028              STR      r0,[r5,#0]            ;393
000104  2000              MOVS     r0,#0                 ;394
000106  e790              B        |L8.42|
                  |L8.264|
000108  7920              LDRB     r0,[r4,#4]            ;397
00010a  b140              CBZ      r0,|L8.286|
00010c  7922              LDRB     r2,[r4,#4]            ;398
00010e  a164              ADR      r1,|L8.672|
000110  2000              MOVS     r0,#0                 ;398
000112  f7fffffe          BL       wpa_printf
000116  2001              MOVS     r0,#1                 ;400
000118  6028              STR      r0,[r5,#0]            ;400
00011a  2000              MOVS     r0,#0                 ;401
00011c  e785              B        |L8.42|
                  |L8.286|
00011e  7860              LDRB     r0,[r4,#1]            ;404
000120  f0100f01          TST      r0,#1                 ;404
000124  d007              BEQ      |L8.310|
000126  a168              ADR      r1,|L8.712|
000128  2000              MOVS     r0,#0                 ;406
00012a  f7fffffe          BL       wpa_printf
00012e  2001              MOVS     r0,#1                 ;408
000130  6028              STR      r0,[r5,#0]            ;408
000132  2000              MOVS     r0,#0                 ;409
000134  e779              B        |L8.42|
                  |L8.310|
000136  9809              LDR      r0,[sp,#0x24]         ;412
000138  4438              ADD      r0,r0,r7              ;412
00013a  f1a00a10          SUB      r10,r0,#0x10          ;412
00013e  2310              MOVS     r3,#0x10              ;413
000140  4652              MOV      r2,r10                ;413
000142  a16f              ADR      r1,|L8.768|
000144  2000              MOVS     r0,#0                 ;413
000146  f7fffffe          BL       wpa_hexdump
00014a  7820              LDRB     r0,[r4,#0]            ;414
00014c  2801              CMP      r0,#1                 ;414
00014e  d114              BNE      |L8.378|
000150  4640              MOV      r0,r8                 ;415
000152  f7fffffe          BL       wpabuf_head
000156  ab0b              ADD      r3,sp,#0x2c           ;415
000158  2200              MOVS     r2,#0                 ;415
00015a  9202              STR      r2,[sp,#8]            ;415
00015c  9203              STR      r2,[sp,#0xc]          ;415
00015e  e9cd2304          STRD     r2,r3,[sp,#0x10]      ;415
000162  9006              STR      r0,[sp,#0x18]         ;415
000164  4613              MOV      r3,r2                 ;415
000166  9a07              LDR      r2,[sp,#0x1c]         ;415
000168  e9cd2300          STRD     r2,r3,[sp,#0]         ;415
00016c  78a0              LDRB     r0,[r4,#2]            ;415
00016e  2200              MOVS     r2,#0                 ;415
000170  a140              ADR      r1,|L8.628|
000172  9b06              LDR      r3,[sp,#0x18]         ;415
000174  f7fffffe          BL       eap_pax_mac
000178  e014              B        |L8.420|
                  |L8.378|
00017a  4640              MOV      r0,r8                 ;419
00017c  f7fffffe          BL       wpabuf_head
000180  ab0b              ADD      r3,sp,#0x2c           ;419
000182  2200              MOVS     r2,#0                 ;419
000184  9202              STR      r2,[sp,#8]            ;419
000186  9203              STR      r2,[sp,#0xc]          ;419
000188  e9cd2304          STRD     r2,r3,[sp,#0x10]      ;419
00018c  9006              STR      r0,[sp,#0x18]         ;419
00018e  4613              MOV      r3,r2                 ;419
000190  9a07              LDR      r2,[sp,#0x1c]         ;419
000192  e9cd2300          STRD     r2,r3,[sp,#0]         ;419
000196  78a0              LDRB     r0,[r4,#2]            ;419
000198  2210              MOVS     r2,#0x10              ;419
00019a  f106017c          ADD      r1,r6,#0x7c           ;419
00019e  9b06              LDR      r3,[sp,#0x18]         ;419
0001a0  f7fffffe          BL       eap_pax_mac
                  |L8.420|
0001a4  2210              MOVS     r2,#0x10              ;423
0001a6  a90b              ADD      r1,sp,#0x2c           ;423
0001a8  4650              MOV      r0,r10                ;423
0001aa  f7fffffe          BL       os_memcmp
0001ae  b168              CBZ      r0,|L8.460|
0001b0  a157              ADR      r1,|L8.784|
0001b2  2000              MOVS     r0,#0                 ;424
0001b4  f7fffffe          BL       wpa_printf
0001b8  2310              MOVS     r3,#0x10              ;426
0001ba  aa0b              ADD      r2,sp,#0x2c           ;426
0001bc  a15f              ADR      r1,|L8.828|
0001be  2000              MOVS     r0,#0                 ;426
0001c0  f7fffffe          BL       wpa_hexdump
0001c4  2001              MOVS     r0,#1                 ;428
0001c6  6028              STR      r0,[r5,#0]            ;428
0001c8  2000              MOVS     r0,#0                 ;429
0001ca  e72e              B        |L8.42|
                  |L8.460|
0001cc  2000              MOVS     r0,#0                 ;432
0001ce  6028              STR      r0,[r5,#0]            ;432
0001d0  2003              MOVS     r0,#3                 ;433
0001d2  7128              STRB     r0,[r5,#4]            ;433
0001d4  2000              MOVS     r0,#0                 ;434
0001d6  7168              STRB     r0,[r5,#5]            ;434
0001d8  2001              MOVS     r0,#1                 ;435
0001da  60a8              STR      r0,[r5,#8]            ;435
0001dc  7820              LDRB     r0,[r4,#0]            ;437
0001de  2801              CMP      r0,#1                 ;437
0001e0  d002              BEQ      |L8.488|
0001e2  2803              CMP      r0,#3                 ;437
0001e4  d114              BNE      |L8.528|
0001e6  e009              B        |L8.508|
                  |L8.488|
0001e8  9b08              LDR      r3,[sp,#0x20]         ;439
0001ea  9300              STR      r3,[sp,#0]            ;439
0001ec  4623              MOV      r3,r4                 ;439
0001ee  4629              MOV      r1,r5                 ;439
0001f0  4630              MOV      r0,r6                 ;439
0001f2  9a0a              LDR      r2,[sp,#0x28]         ;439
0001f4  f7fffffe          BL       eap_pax_process_std_1
0001f8  4681              MOV      r9,r0                 ;439
0001fa  e012              B        |L8.546|
                  |L8.508|
0001fc  9b08              LDR      r3,[sp,#0x20]         ;442
0001fe  9300              STR      r3,[sp,#0]            ;442
000200  4623              MOV      r3,r4                 ;442
000202  4629              MOV      r1,r5                 ;442
000204  4630              MOV      r0,r6                 ;442
000206  9a0a              LDR      r2,[sp,#0x28]         ;442
000208  f7fffffe          BL       eap_pax_process_std_3
00020c  4681              MOV      r9,r0                 ;442
00020e  e008              B        |L8.546|
                  |L8.528|
000210  7822              LDRB     r2,[r4,#0]            ;445
000212  a150              ADR      r1,|L8.852|
000214  2000              MOVS     r0,#0                 ;445
000216  f7fffffe          BL       wpa_printf
00021a  2001              MOVS     r0,#1                 ;447
00021c  6028              STR      r0,[r5,#0]            ;447
00021e  2000              MOVS     r0,#0                 ;448
000220  e703              B        |L8.42|
                  |L8.546|
000222  bf00              NOP                            ;440
000224  7928              LDRB     r0,[r5,#4]            ;451
000226  2804              CMP      r0,#4                 ;451
000228  d101              BNE      |L8.558|
00022a  2000              MOVS     r0,#0                 ;452
00022c  60a8              STR      r0,[r5,#8]            ;452
                  |L8.558|
00022e  4648              MOV      r0,r9                 ;455
000230  e6fb              B        |L8.42|
;;;457    
                          ENDP

000232  0000              DCW      0x0000
                  |L8.564|
                          DCD      ||.constdata||+0x44
                  |L8.568|
000238  4541502d          DCB      "EAP-PAX: received payload",0
00023c  5041583a
000240  20726563
000244  65697665
000248  64207061
00024c  796c6f61
000250  6400    
000252  00                DCB      0
000253  00                DCB      0
                  |L8.596|
000254  4541502d          DCB      "EAP-PAX: Unsupported MAC ID 0x%x"
000258  5041583a
00025c  20556e73
000260  7570706f
000264  72746564
000268  204d4143
00026c  20494420
000270  30782578
                  |L8.628|
000274  00                DCB      0
000275  00                DCB      0
000276  00                DCB      0
000277  00                DCB      0
                  |L8.632|
000278  4541502d          DCB      "EAP-PAX: Unsupported DH Group ID 0x%x",0
00027c  5041583a
000280  20556e73
000284  7570706f
000288  72746564
00028c  20444820
000290  47726f75
000294  70204944
000298  20307825
00029c  7800    
00029e  00                DCB      0
00029f  00                DCB      0
                  |L8.672|
0002a0  4541502d          DCB      "EAP-PAX: Unsupported Public Key ID 0x%x",0
0002a4  5041583a
0002a8  20556e73
0002ac  7570706f
0002b0  72746564
0002b4  20507562
0002b8  6c696320
0002bc  4b657920
0002c0  49442030
0002c4  78257800
                  |L8.712|
0002c8  4541502d          DCB      "EAP-PAX: fragmentation not supported - ignored packet",0
0002cc  5041583a
0002d0  20667261
0002d4  676d656e
0002d8  74617469
0002dc  6f6e206e
0002e0  6f742073
0002e4  7570706f
0002e8  72746564
0002ec  202d2069
0002f0  676e6f72
0002f4  65642070
0002f8  61636b65
0002fc  7400    
0002fe  00                DCB      0
0002ff  00                DCB      0
                  |L8.768|
000300  4541502d          DCB      "EAP-PAX: ICV",0
000304  5041583a
000308  20494356
00030c  00      
00030d  00                DCB      0
00030e  00                DCB      0
00030f  00                DCB      0
                  |L8.784|
000310  4541502d          DCB      "EAP-PAX: invalid ICV - ignoring the message",0
000314  5041583a
000318  20696e76
00031c  616c6964
000320  20494356
000324  202d2069
000328  676e6f72
00032c  696e6720
000330  74686520
000334  6d657373
000338  61676500
                  |L8.828|
00033c  4541502d          DCB      "EAP-PAX: expected ICV",0
000340  5041583a
000344  20657870
000348  65637465
00034c  64204943
000350  5600    
000352  00                DCB      0
000353  00                DCB      0
                  |L8.852|
000354  4541502d          DCB      "EAP-PAX: ignoring message with unknown op_code %d",0
000358  5041583a
00035c  2069676e
000360  6f72696e
000364  67206d65
000368  73736167
00036c  65207769
000370  74682075
000374  6e6b6e6f
000378  776e206f
00037c  705f636f
000380  64652025
000384  6400    
000386  00                DCB      0
000387  00                DCB      0

                          AREA ||i.eap_pax_process_std_1||, CODE, READONLY, ALIGN=2

                  eap_pax_process_std_1 PROC
;;;119    
;;;120    static struct wpabuf * eap_pax_process_std_1(struct eap_pax_data *data,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;121    					     struct eap_method_ret *ret, u8 id,
;;;122    					     const struct eap_pax_hdr *req,
;;;123    					     size_t req_plen)
;;;124    {
000004  b089              SUB      sp,sp,#0x24
000006  4604              MOV      r4,r0
000008  460f              MOV      r7,r1
00000a  4692              MOV      r10,r2
00000c  461d              MOV      r5,r3
;;;125    	struct wpabuf *resp;
;;;126    	const u8 *pos;
;;;127    	u8 *rpos;
;;;128    	size_t left, plen;
;;;129    
;;;130    	wpa_printf(MSG_DEBUG, "EAP-PAX: PAX_STD-1 (received)");
00000e  a183              ADR      r1,|L9.540|
000010  2000              MOVS     r0,#0
000012  f7fffffe          BL       wpa_printf
;;;131    
;;;132    	if (data->state != PAX_INIT) {
000016  7820              LDRB     r0,[r4,#0]
000018  b150              CBZ      r0,|L9.48|
;;;133    		wpa_printf(MSG_INFO, "EAP-PAX: PAX_STD-1 received in "
00001a  7822              LDRB     r2,[r4,#0]
00001c  a187              ADR      r1,|L9.572|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       wpa_printf
;;;134    			   "unexpected state (%d) - ignored", data->state);
;;;135    		ret->ignore = TRUE;
000024  2001              MOVS     r0,#1
000026  6038              STR      r0,[r7,#0]
;;;136    		return NULL;
000028  2000              MOVS     r0,#0
                  |L9.42|
;;;137    	}
;;;138    
;;;139    	if (req->flags & EAP_PAX_FLAGS_CE) {
;;;140    		wpa_printf(MSG_INFO, "EAP-PAX: PAX_STD-1 with CE flag set - "
;;;141    			   "ignored");
;;;142    		ret->ignore = TRUE;
;;;143    		return NULL;
;;;144    	}
;;;145    
;;;146    	left = req_plen - sizeof(*req);
;;;147    
;;;148    	if (left < 2 + EAP_PAX_RAND_LEN) {
;;;149    		wpa_printf(MSG_INFO, "EAP-PAX: PAX_STD-1 with too short "
;;;150    			   "payload");
;;;151    		ret->ignore = TRUE;
;;;152    		return NULL;
;;;153    	}
;;;154    
;;;155    	pos = (const u8 *) (req + 1);
;;;156    	if (WPA_GET_BE16(pos) != EAP_PAX_RAND_LEN) {
;;;157    		wpa_printf(MSG_INFO, "EAP-PAX: PAX_STD-1 with incorrect A "
;;;158    			   "length %d (expected %d)",
;;;159    			   WPA_GET_BE16(pos), EAP_PAX_RAND_LEN);
;;;160    		ret->ignore = TRUE;
;;;161    		return NULL;
;;;162    	}
;;;163    
;;;164    	pos += 2;
;;;165    	left -= 2;
;;;166    	os_memcpy(data->rand.r.x, pos, EAP_PAX_RAND_LEN);
;;;167    	wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: X (server rand)",
;;;168    		    data->rand.r.x, EAP_PAX_RAND_LEN);
;;;169    	pos += EAP_PAX_RAND_LEN;
;;;170    	left -= EAP_PAX_RAND_LEN;
;;;171    
;;;172    	if (left > 0) {
;;;173    		wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: ignored extra payload",
;;;174    			    pos, left);
;;;175    	}
;;;176    
;;;177    	if (os_get_random(data->rand.r.y, EAP_PAX_RAND_LEN)) {
;;;178    		wpa_printf(MSG_ERROR, "EAP-PAX: Failed to get random data");
;;;179    		ret->ignore = TRUE;
;;;180    		return NULL;
;;;181    	}
;;;182    	wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: Y (client rand)",
;;;183    		    data->rand.r.y, EAP_PAX_RAND_LEN);
;;;184    
;;;185    	if (eap_pax_initial_key_derivation(req->mac_id, data->ak, data->rand.e,
;;;186    					   data->mk, data->ck, data->ick) < 0)
;;;187    	{
;;;188    		ret->ignore = TRUE;
;;;189    		return NULL;
;;;190    	}
;;;191    
;;;192    	wpa_printf(MSG_DEBUG, "EAP-PAX: PAX_STD-2 (sending)");
;;;193    
;;;194    	plen = 2 + EAP_PAX_RAND_LEN + 2 + data->cid_len + 2 + EAP_PAX_MAC_LEN +
;;;195    		EAP_PAX_ICV_LEN;
;;;196    	resp = eap_pax_alloc_resp(req, id, EAP_PAX_OP_STD_2, plen);
;;;197    	if (resp == NULL)
;;;198    		return NULL;
;;;199    
;;;200    	wpabuf_put_be16(resp, EAP_PAX_RAND_LEN);
;;;201    	wpabuf_put_data(resp, data->rand.r.y, EAP_PAX_RAND_LEN);
;;;202    	wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: B = Y (client rand)",
;;;203    		    data->rand.r.y, EAP_PAX_RAND_LEN);
;;;204    
;;;205    	wpabuf_put_be16(resp, data->cid_len);
;;;206    	wpabuf_put_data(resp, data->cid, data->cid_len);
;;;207    	wpa_hexdump_ascii(MSG_MSGDUMP, "EAP-PAX: CID",
;;;208    			  (u8 *) data->cid, data->cid_len);
;;;209    
;;;210    	wpabuf_put_be16(resp, EAP_PAX_MAC_LEN);
;;;211    	rpos = wpabuf_put(resp, EAP_PAX_MAC_LEN);
;;;212    	eap_pax_mac(req->mac_id, data->ck, EAP_PAX_CK_LEN,
;;;213    		    data->rand.r.x, EAP_PAX_RAND_LEN,
;;;214    		    data->rand.r.y, EAP_PAX_RAND_LEN,
;;;215    		    (u8 *) data->cid, data->cid_len, rpos);
;;;216    	wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: MAC_CK(A, B, CID)",
;;;217    		    rpos, EAP_PAX_MAC_LEN);
;;;218    
;;;219    	/* Optional ADE could be added here, if needed */
;;;220    
;;;221    	rpos = wpabuf_put(resp, EAP_PAX_ICV_LEN);
;;;222    	eap_pax_mac(req->mac_id, data->ick, EAP_PAX_ICK_LEN,
;;;223    		    wpabuf_head(resp), wpabuf_len(resp) - EAP_PAX_ICV_LEN,
;;;224    		    NULL, 0, NULL, 0, rpos);
;;;225    	wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: ICV", rpos, EAP_PAX_ICV_LEN);
;;;226    
;;;227    	data->state = PAX_STD_2_SENT;
;;;228    	data->mac_id = req->mac_id;
;;;229    	data->dh_group_id = req->dh_group_id;
;;;230    	data->public_key_id = req->public_key_id;
;;;231    
;;;232    	return resp;
;;;233    }
00002a  b00d              ADD      sp,sp,#0x34
00002c  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.48|
000030  7868              LDRB     r0,[r5,#1]            ;139
000032  f0100f02          TST      r0,#2                 ;139
000036  d007              BEQ      |L9.72|
000038  a190              ADR      r1,|L9.636|
00003a  2000              MOVS     r0,#0                 ;140
00003c  f7fffffe          BL       wpa_printf
000040  2001              MOVS     r0,#1                 ;142
000042  6038              STR      r0,[r7,#0]            ;142
000044  2000              MOVS     r0,#0                 ;143
000046  e7f0              B        |L9.42|
                  |L9.72|
000048  9816              LDR      r0,[sp,#0x58]         ;146
00004a  f1a00805          SUB      r8,r0,#5              ;146
00004e  f1b80f22          CMP      r8,#0x22              ;148
000052  d207              BCS      |L9.100|
000054  a195              ADR      r1,|L9.684|
000056  2000              MOVS     r0,#0                 ;149
000058  f7fffffe          BL       wpa_printf
00005c  2001              MOVS     r0,#1                 ;151
00005e  6038              STR      r0,[r7,#0]            ;151
000060  2000              MOVS     r0,#0                 ;152
000062  e7e2              B        |L9.42|
                  |L9.100|
000064  1d6e              ADDS     r6,r5,#5              ;155
000066  7870              LDRB     r0,[r6,#1]            ;156
000068  7831              LDRB     r1,[r6,#0]            ;156
00006a  ea402001          ORR      r0,r0,r1,LSL #8       ;156
00006e  2820              CMP      r0,#0x20              ;156
000070  d00c              BEQ      |L9.140|
000072  7870              LDRB     r0,[r6,#1]            ;157
000074  7831              LDRB     r1,[r6,#0]            ;157
000076  ea402201          ORR      r2,r0,r1,LSL #8       ;157
00007a  2320              MOVS     r3,#0x20              ;157
00007c  a196              ADR      r1,|L9.728|
00007e  2000              MOVS     r0,#0                 ;157
000080  f7fffffe          BL       wpa_printf
000084  2001              MOVS     r0,#1                 ;160
000086  6038              STR      r0,[r7,#0]            ;160
000088  2000              MOVS     r0,#0                 ;161
00008a  e7ce              B        |L9.42|
                  |L9.140|
00008c  1cb6              ADDS     r6,r6,#2              ;164
00008e  f1a80802          SUB      r8,r8,#2              ;165
000092  2220              MOVS     r2,#0x20              ;166
000094  4631              MOV      r1,r6                 ;166
000096  1d20              ADDS     r0,r4,#4              ;166
000098  f7fffffe          BL       os_memcpy
00009c  2320              MOVS     r3,#0x20              ;167
00009e  1d22              ADDS     r2,r4,#4              ;167
0000a0  a19c              ADR      r1,|L9.788|
0000a2  2000              MOVS     r0,#0                 ;167
0000a4  f7fffffe          BL       wpa_hexdump
0000a8  3620              ADDS     r6,r6,#0x20           ;169
0000aa  f1a80820          SUB      r8,r8,#0x20           ;170
0000ae  f1b80f00          CMP      r8,#0                 ;172
0000b2  d005              BEQ      |L9.192|
0000b4  4643              MOV      r3,r8                 ;173
0000b6  4632              MOV      r2,r6                 ;173
0000b8  a19d              ADR      r1,|L9.816|
0000ba  2000              MOVS     r0,#0                 ;173
0000bc  f7fffffe          BL       wpa_hexdump
                  |L9.192|
0000c0  2120              MOVS     r1,#0x20              ;177
0000c2  f1040024          ADD      r0,r4,#0x24           ;177
0000c6  f7fffffe          BL       os_get_random
0000ca  b138              CBZ      r0,|L9.220|
0000cc  a1a0              ADR      r1,|L9.848|
0000ce  2000              MOVS     r0,#0                 ;178
0000d0  f7fffffe          BL       wpa_printf
0000d4  2001              MOVS     r0,#1                 ;179
0000d6  6038              STR      r0,[r7,#0]            ;179
0000d8  2000              MOVS     r0,#0                 ;180
0000da  e7a6              B        |L9.42|
                  |L9.220|
0000dc  2320              MOVS     r3,#0x20              ;182
0000de  f1040224          ADD      r2,r4,#0x24           ;182
0000e2  a1a4              ADR      r1,|L9.884|
0000e4  2000              MOVS     r0,#0                 ;182
0000e6  f7fffffe          BL       wpa_hexdump
0000ea  f104037c          ADD      r3,r4,#0x7c           ;185
0000ee  f104026c          ADD      r2,r4,#0x6c           ;185
0000f2  e9cd2300          STRD     r2,r3,[sp,#0]         ;185
0000f6  78a8              LDRB     r0,[r5,#2]            ;185
0000f8  3b20              SUBS     r3,r3,#0x20           ;185
0000fa  1d22              ADDS     r2,r4,#4              ;185
0000fc  f104014c          ADD      r1,r4,#0x4c           ;185
000100  f7fffffe          BL       eap_pax_initial_key_derivation
000104  2800              CMP      r0,#0                 ;185
000106  da03              BGE      |L9.272|
000108  2001              MOVS     r0,#1                 ;188
00010a  6038              STR      r0,[r7,#0]            ;188
00010c  2000              MOVS     r0,#0                 ;189
00010e  e78c              B        |L9.42|
                  |L9.272|
000110  a19f              ADR      r1,|L9.912|
000112  2000              MOVS     r0,#0                 ;192
000114  f7fffffe          BL       wpa_printf
000118  6ca0              LDR      r0,[r4,#0x48]         ;194
00011a  f1000b46          ADD      r11,r0,#0x46          ;194
00011e  465b              MOV      r3,r11                ;196
000120  2202              MOVS     r2,#2                 ;196
000122  4651              MOV      r1,r10                ;196
000124  4628              MOV      r0,r5                 ;196
000126  f7fffffe          BL       eap_pax_alloc_resp
00012a  4681              MOV      r9,r0                 ;196
00012c  f1b90f00          CMP      r9,#0                 ;197
000130  d101              BNE      |L9.310|
000132  2000              MOVS     r0,#0                 ;198
000134  e779              B        |L9.42|
                  |L9.310|
000136  2120              MOVS     r1,#0x20              ;200
000138  4648              MOV      r0,r9                 ;200
00013a  f7fffffe          BL       wpabuf_put_be16
00013e  2220              MOVS     r2,#0x20              ;201
000140  f1040124          ADD      r1,r4,#0x24           ;201
000144  4648              MOV      r0,r9                 ;201
000146  f7fffffe          BL       wpabuf_put_data
00014a  2320              MOVS     r3,#0x20              ;202
00014c  f1040224          ADD      r2,r4,#0x24           ;202
000150  a197              ADR      r1,|L9.944|
000152  2000              MOVS     r0,#0                 ;202
000154  f7fffffe          BL       wpa_hexdump
000158  6ca0              LDR      r0,[r4,#0x48]         ;205
00015a  b281              UXTH     r1,r0                 ;205
00015c  4648              MOV      r0,r9                 ;205
00015e  f7fffffe          BL       wpabuf_put_be16
000162  4648              MOV      r0,r9                 ;206
000164  e9d41211          LDRD     r1,r2,[r4,#0x44]      ;206
000168  f7fffffe          BL       wpabuf_put_data
00016c  a198              ADR      r1,|L9.976|
00016e  2000              MOVS     r0,#0                 ;207
000170  e9d42311          LDRD     r2,r3,[r4,#0x44]      ;207
000174  f7fffffe          BL       wpa_hexdump_ascii
000178  2110              MOVS     r1,#0x10              ;210
00017a  4648              MOV      r0,r9                 ;210
00017c  f7fffffe          BL       wpabuf_put_be16
000180  2110              MOVS     r1,#0x10              ;211
000182  4648              MOV      r0,r9                 ;211
000184  f7fffffe          BL       wpabuf_put
000188  9008              STR      r0,[sp,#0x20]         ;211
00018a  9b08              LDR      r3,[sp,#0x20]         ;212
00018c  2020              MOVS     r0,#0x20              ;212
00018e  e9d41211          LDRD     r1,r2,[r4,#0x44]      ;212
000192  e9cd2304          STRD     r2,r3,[sp,#0x10]      ;212
000196  e9cd0102          STRD     r0,r1,[sp,#8]         ;212
00019a  f1040324          ADD      r3,r4,#0x24           ;212
00019e  e9cd0300          STRD     r0,r3,[sp,#0]         ;212
0001a2  78a8              LDRB     r0,[r5,#2]            ;212
0001a4  1d23              ADDS     r3,r4,#4              ;212
0001a6  2210              MOVS     r2,#0x10              ;212
0001a8  f104016c          ADD      r1,r4,#0x6c           ;212
0001ac  f7fffffe          BL       eap_pax_mac
0001b0  2310              MOVS     r3,#0x10              ;216
0001b2  a18b              ADR      r1,|L9.992|
0001b4  2000              MOVS     r0,#0                 ;216
0001b6  9a08              LDR      r2,[sp,#0x20]         ;216
0001b8  f7fffffe          BL       wpa_hexdump
0001bc  2110              MOVS     r1,#0x10              ;221
0001be  4648              MOV      r0,r9                 ;221
0001c0  f7fffffe          BL       wpabuf_put
0001c4  9008              STR      r0,[sp,#0x20]         ;221
0001c6  4648              MOV      r0,r9                 ;222
0001c8  f7fffffe          BL       wpabuf_len
0001cc  3810              SUBS     r0,r0,#0x10           ;222
0001ce  9007              STR      r0,[sp,#0x1c]         ;222
0001d0  4648              MOV      r0,r9                 ;222
0001d2  f7fffffe          BL       wpabuf_head
0001d6  9006              STR      r0,[sp,#0x18]         ;222
0001d8  2200              MOVS     r2,#0                 ;222
0001da  9b08              LDR      r3,[sp,#0x20]         ;222
0001dc  9202              STR      r2,[sp,#8]            ;222
0001de  9203              STR      r2,[sp,#0xc]          ;222
0001e0  e9cd2304          STRD     r2,r3,[sp,#0x10]      ;222
0001e4  4613              MOV      r3,r2                 ;222
0001e6  9a07              LDR      r2,[sp,#0x1c]         ;222
0001e8  e9cd2300          STRD     r2,r3,[sp,#0]         ;222
0001ec  78a8              LDRB     r0,[r5,#2]            ;222
0001ee  2210              MOVS     r2,#0x10              ;222
0001f0  f104017c          ADD      r1,r4,#0x7c           ;222
0001f4  9b06              LDR      r3,[sp,#0x18]         ;222
0001f6  f7fffffe          BL       eap_pax_mac
0001fa  2310              MOVS     r3,#0x10              ;225
0001fc  a17f              ADR      r1,|L9.1020|
0001fe  2000              MOVS     r0,#0                 ;225
000200  9a08              LDR      r2,[sp,#0x20]         ;225
000202  f7fffffe          BL       wpa_hexdump
000206  2001              MOVS     r0,#1                 ;227
000208  7020              STRB     r0,[r4,#0]            ;227
00020a  78a8              LDRB     r0,[r5,#2]            ;228
00020c  7060              STRB     r0,[r4,#1]            ;228
00020e  78e8              LDRB     r0,[r5,#3]            ;229
000210  70a0              STRB     r0,[r4,#2]            ;229
000212  7928              LDRB     r0,[r5,#4]            ;230
000214  70e0              STRB     r0,[r4,#3]            ;230
000216  4648              MOV      r0,r9                 ;232
000218  e707              B        |L9.42|
;;;234    
                          ENDP

00021a  0000              DCW      0x0000
                  |L9.540|
00021c  4541502d          DCB      "EAP-PAX: PAX_STD-1 (received)",0
000220  5041583a
000224  20504158
000228  5f535444
00022c  2d312028
000230  72656365
000234  69766564
000238  2900    
00023a  00                DCB      0
00023b  00                DCB      0
                  |L9.572|
00023c  4541502d          DCB      "EAP-PAX: PAX_STD-1 received in unexpected state (%d) - "
000240  5041583a
000244  20504158
000248  5f535444
00024c  2d312072
000250  65636569
000254  76656420
000258  696e2075
00025c  6e657870
000260  65637465
000264  64207374
000268  61746520
00026c  28256429
000270  202d20  
000273  69676e6f          DCB      "ignored",0
000277  72656400
00027b  00                DCB      0
                  |L9.636|
00027c  4541502d          DCB      "EAP-PAX: PAX_STD-1 with CE flag set - ignored",0
000280  5041583a
000284  20504158
000288  5f535444
00028c  2d312077
000290  69746820
000294  43452066
000298  6c616720
00029c  73657420
0002a0  2d206967
0002a4  6e6f7265
0002a8  6400    
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L9.684|
0002ac  4541502d          DCB      "EAP-PAX: PAX_STD-1 with too short payload",0
0002b0  5041583a
0002b4  20504158
0002b8  5f535444
0002bc  2d312077
0002c0  69746820
0002c4  746f6f20
0002c8  73686f72
0002cc  74207061
0002d0  796c6f61
0002d4  6400    
0002d6  00                DCB      0
0002d7  00                DCB      0
                  |L9.728|
0002d8  4541502d          DCB      "EAP-PAX: PAX_STD-1 with incorrect A length %d (expected"
0002dc  5041583a
0002e0  20504158
0002e4  5f535444
0002e8  2d312077
0002ec  69746820
0002f0  696e636f
0002f4  72726563
0002f8  74204120
0002fc  6c656e67
000300  74682025
000304  64202865
000308  78706563
00030c  746564  
00030f  20256429          DCB      " %d)",0
000313  00      
                  |L9.788|
000314  4541502d          DCB      "EAP-PAX: X (server rand)",0
000318  5041583a
00031c  20582028
000320  73657276
000324  65722072
000328  616e6429
00032c  00      
00032d  00                DCB      0
00032e  00                DCB      0
00032f  00                DCB      0
                  |L9.816|
000330  4541502d          DCB      "EAP-PAX: ignored extra payload",0
000334  5041583a
000338  2069676e
00033c  6f726564
000340  20657874
000344  72612070
000348  61796c6f
00034c  616400  
00034f  00                DCB      0
                  |L9.848|
000350  4541502d          DCB      "EAP-PAX: Failed to get random data",0
000354  5041583a
000358  20466169
00035c  6c656420
000360  746f2067
000364  65742072
000368  616e646f
00036c  6d206461
000370  746100  
000373  00                DCB      0
                  |L9.884|
000374  4541502d          DCB      "EAP-PAX: Y (client rand)",0
000378  5041583a
00037c  20592028
000380  636c6965
000384  6e742072
000388  616e6429
00038c  00      
00038d  00                DCB      0
00038e  00                DCB      0
00038f  00                DCB      0
                  |L9.912|
000390  4541502d          DCB      "EAP-PAX: PAX_STD-2 (sending)",0
000394  5041583a
000398  20504158
00039c  5f535444
0003a0  2d322028
0003a4  73656e64
0003a8  696e6729
0003ac  00      
0003ad  00                DCB      0
0003ae  00                DCB      0
0003af  00                DCB      0
                  |L9.944|
0003b0  4541502d          DCB      "EAP-PAX: B = Y (client rand)",0
0003b4  5041583a
0003b8  2042203d
0003bc  20592028
0003c0  636c6965
0003c4  6e742072
0003c8  616e6429
0003cc  00      
0003cd  00                DCB      0
0003ce  00                DCB      0
0003cf  00                DCB      0
                  |L9.976|
0003d0  4541502d          DCB      "EAP-PAX: CID",0
0003d4  5041583a
0003d8  20434944
0003dc  00      
0003dd  00                DCB      0
0003de  00                DCB      0
0003df  00                DCB      0
                  |L9.992|
0003e0  4541502d          DCB      "EAP-PAX: MAC_CK(A, B, CID)",0
0003e4  5041583a
0003e8  204d4143
0003ec  5f434b28
0003f0  412c2042
0003f4  2c204349
0003f8  442900  
0003fb  00                DCB      0
                  |L9.1020|
0003fc  4541502d          DCB      "EAP-PAX: ICV",0
000400  5041583a
000404  20494356
000408  00      
000409  00                DCB      0
00040a  00                DCB      0
00040b  00                DCB      0

                          AREA ||i.eap_pax_process_std_3||, CODE, READONLY, ALIGN=2

                  eap_pax_process_std_3 PROC
;;;235    
;;;236    static struct wpabuf * eap_pax_process_std_3(struct eap_pax_data *data,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;237    					     struct eap_method_ret *ret, u8 id,
;;;238    					     const struct eap_pax_hdr *req,
;;;239    					     size_t req_plen)
;;;240    {
000004  b08d              SUB      sp,sp,#0x34
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4692              MOV      r10,r2
00000c  4698              MOV      r8,r3
00000e  f8ddb058          LDR      r11,[sp,#0x58]
;;;241    	struct wpabuf *resp;
;;;242    	u8 *rpos, mac[EAP_PAX_MAC_LEN];
;;;243    	const u8 *pos;
;;;244    	size_t left;
;;;245    
;;;246    	wpa_printf(MSG_DEBUG, "EAP-PAX: PAX_STD-3 (received)");
000012  a15c              ADR      r1,|L10.388|
000014  2000              MOVS     r0,#0
000016  f7fffffe          BL       wpa_printf
;;;247    
;;;248    	if (data->state != PAX_STD_2_SENT) {
00001a  7820              LDRB     r0,[r4,#0]
00001c  2801              CMP      r0,#1
00001e  d00a              BEQ      |L10.54|
;;;249    		wpa_printf(MSG_INFO, "EAP-PAX: PAX_STD-3 received in "
000020  7822              LDRB     r2,[r4,#0]
000022  a160              ADR      r1,|L10.420|
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       wpa_printf
;;;250    			   "unexpected state (%d) - ignored", data->state);
;;;251    		ret->ignore = TRUE;
00002a  2001              MOVS     r0,#1
00002c  6028              STR      r0,[r5,#0]
;;;252    		return NULL;
00002e  2000              MOVS     r0,#0
                  |L10.48|
;;;253    	}
;;;254    
;;;255    	if (req->flags & EAP_PAX_FLAGS_CE) {
;;;256    		wpa_printf(MSG_INFO, "EAP-PAX: PAX_STD-3 with CE flag set - "
;;;257    			   "ignored");
;;;258    		ret->ignore = TRUE;
;;;259    		return NULL;
;;;260    	}
;;;261    
;;;262    	left = req_plen - sizeof(*req);
;;;263    
;;;264    	if (left < 2 + EAP_PAX_MAC_LEN) {
;;;265    		wpa_printf(MSG_INFO, "EAP-PAX: PAX_STD-3 with too short "
;;;266    			   "payload");
;;;267    		ret->ignore = TRUE;
;;;268    		return NULL;
;;;269    	}
;;;270    
;;;271    	pos = (const u8 *) (req + 1);
;;;272    	if (WPA_GET_BE16(pos) != EAP_PAX_MAC_LEN) {
;;;273    		wpa_printf(MSG_INFO, "EAP-PAX: PAX_STD-3 with incorrect "
;;;274    			   "MAC_CK length %d (expected %d)",
;;;275    			   WPA_GET_BE16(pos), EAP_PAX_MAC_LEN);
;;;276    		ret->ignore = TRUE;
;;;277    		return NULL;
;;;278    	}
;;;279    	pos += 2;
;;;280    	left -= 2;
;;;281    	wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: MAC_CK(B, CID)",
;;;282    		    pos, EAP_PAX_MAC_LEN);
;;;283    	eap_pax_mac(data->mac_id, data->ck, EAP_PAX_CK_LEN,
;;;284    		    data->rand.r.y, EAP_PAX_RAND_LEN,
;;;285    		    (u8 *) data->cid, data->cid_len, NULL, 0, mac);
;;;286    	if (os_memcmp(pos, mac, EAP_PAX_MAC_LEN) != 0) {
;;;287    		wpa_printf(MSG_INFO, "EAP-PAX: Invalid MAC_CK(B, CID) "
;;;288    			   "received");
;;;289    		wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: expected MAC_CK(B, CID)",
;;;290    			    mac, EAP_PAX_MAC_LEN);
;;;291    		ret->methodState = METHOD_DONE;
;;;292    		ret->decision = DECISION_FAIL;
;;;293    		return NULL;
;;;294    	}
;;;295    
;;;296    	pos += EAP_PAX_MAC_LEN;
;;;297    	left -= EAP_PAX_MAC_LEN;
;;;298    
;;;299    	if (left > 0) {
;;;300    		wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: ignored extra payload",
;;;301    			    pos, left);
;;;302    	}
;;;303    
;;;304    	wpa_printf(MSG_DEBUG, "EAP-PAX: PAX-ACK (sending)");
;;;305    
;;;306    	resp = eap_pax_alloc_resp(req, id, EAP_PAX_OP_ACK, EAP_PAX_ICV_LEN);
;;;307    	if (resp == NULL)
;;;308    		return NULL;
;;;309    
;;;310    	/* Optional ADE could be added here, if needed */
;;;311    
;;;312    	rpos = wpabuf_put(resp, EAP_PAX_ICV_LEN);
;;;313    	eap_pax_mac(data->mac_id, data->ick, EAP_PAX_ICK_LEN,
;;;314    		    wpabuf_head(resp), wpabuf_len(resp) - EAP_PAX_ICV_LEN,
;;;315    		    NULL, 0, NULL, 0, rpos);
;;;316    	wpa_hexdump(MSG_MSGDUMP, "EAP-PAX: ICV", rpos, EAP_PAX_ICV_LEN);
;;;317    
;;;318    	data->state = PAX_DONE;
;;;319    	ret->methodState = METHOD_DONE;
;;;320    	ret->decision = DECISION_UNCOND_SUCC;
;;;321    	ret->allowNotifications = FALSE;
;;;322    
;;;323    	return resp;
;;;324    }
000030  b00d              ADD      sp,sp,#0x34
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.54|
000036  f8980001          LDRB     r0,[r8,#1]            ;255
00003a  f0100f02          TST      r0,#2                 ;255
00003e  d007              BEQ      |L10.80|
000040  a168              ADR      r1,|L10.484|
000042  2000              MOVS     r0,#0                 ;256
000044  f7fffffe          BL       wpa_printf
000048  2001              MOVS     r0,#1                 ;258
00004a  6028              STR      r0,[r5,#0]            ;258
00004c  2000              MOVS     r0,#0                 ;259
00004e  e7ef              B        |L10.48|
                  |L10.80|
000050  f1ab0705          SUB      r7,r11,#5             ;262
000054  2f12              CMP      r7,#0x12              ;264
000056  d207              BCS      |L10.104|
000058  a16e              ADR      r1,|L10.532|
00005a  2000              MOVS     r0,#0                 ;265
00005c  f7fffffe          BL       wpa_printf
000060  2001              MOVS     r0,#1                 ;267
000062  6028              STR      r0,[r5,#0]            ;267
000064  2000              MOVS     r0,#0                 ;268
000066  e7e3              B        |L10.48|
                  |L10.104|
000068  f1080605          ADD      r6,r8,#5              ;271
00006c  7870              LDRB     r0,[r6,#1]            ;272
00006e  7831              LDRB     r1,[r6,#0]            ;272
000070  ea402001          ORR      r0,r0,r1,LSL #8       ;272
000074  2810              CMP      r0,#0x10              ;272
000076  d00c              BEQ      |L10.146|
000078  7870              LDRB     r0,[r6,#1]            ;273
00007a  7831              LDRB     r1,[r6,#0]            ;273
00007c  ea402201          ORR      r2,r0,r1,LSL #8       ;273
000080  2310              MOVS     r3,#0x10              ;273
000082  496f              LDR      r1,|L10.576|
000084  2000              MOVS     r0,#0                 ;273
000086  f7fffffe          BL       wpa_printf
00008a  2001              MOVS     r0,#1                 ;276
00008c  6028              STR      r0,[r5,#0]            ;276
00008e  2000              MOVS     r0,#0                 ;277
000090  e7ce              B        |L10.48|
                  |L10.146|
000092  1cb6              ADDS     r6,r6,#2              ;279
000094  1ebf              SUBS     r7,r7,#2              ;280
000096  2310              MOVS     r3,#0x10              ;281
000098  4632              MOV      r2,r6                 ;281
00009a  a16a              ADR      r1,|L10.580|
00009c  2000              MOVS     r0,#0                 ;281
00009e  f7fffffe          BL       wpa_hexdump
0000a2  ab08              ADD      r3,sp,#0x20           ;283
0000a4  2200              MOVS     r2,#0                 ;283
0000a6  6ca0              LDR      r0,[r4,#0x48]         ;283
0000a8  e9cd0202          STRD     r0,r2,[sp,#8]         ;283
0000ac  e9cd2304          STRD     r2,r3,[sp,#0x10]      ;283
0000b0  2220              MOVS     r2,#0x20              ;283
0000b2  6c63              LDR      r3,[r4,#0x44]         ;283
0000b4  e9cd2300          STRD     r2,r3,[sp,#0]         ;283
0000b8  7860              LDRB     r0,[r4,#1]            ;283
0000ba  f1040324          ADD      r3,r4,#0x24           ;283
0000be  2210              MOVS     r2,#0x10              ;283
0000c0  f104016c          ADD      r1,r4,#0x6c           ;283
0000c4  f7fffffe          BL       eap_pax_mac
0000c8  2210              MOVS     r2,#0x10              ;286
0000ca  a908              ADD      r1,sp,#0x20           ;286
0000cc  4630              MOV      r0,r6                 ;286
0000ce  f7fffffe          BL       os_memcmp
0000d2  b170              CBZ      r0,|L10.242|
0000d4  a161              ADR      r1,|L10.604|
0000d6  2000              MOVS     r0,#0                 ;287
0000d8  f7fffffe          BL       wpa_printf
0000dc  2310              MOVS     r3,#0x10              ;289
0000de  aa08              ADD      r2,sp,#0x20           ;289
0000e0  a169              ADR      r1,|L10.648|
0000e2  2000              MOVS     r0,#0                 ;289
0000e4  f7fffffe          BL       wpa_hexdump
0000e8  2004              MOVS     r0,#4                 ;291
0000ea  7128              STRB     r0,[r5,#4]            ;291
0000ec  2000              MOVS     r0,#0                 ;292
0000ee  7168              STRB     r0,[r5,#5]            ;292
0000f0  e79e              B        |L10.48|
                  |L10.242|
0000f2  3610              ADDS     r6,r6,#0x10           ;296
0000f4  3f10              SUBS     r7,r7,#0x10           ;297
0000f6  b12f              CBZ      r7,|L10.260|
0000f8  463b              MOV      r3,r7                 ;300
0000fa  4632              MOV      r2,r6                 ;300
0000fc  a16b              ADR      r1,|L10.684|
0000fe  2000              MOVS     r0,#0                 ;300
000100  f7fffffe          BL       wpa_hexdump
                  |L10.260|
000104  a171              ADR      r1,|L10.716|
000106  2000              MOVS     r0,#0                 ;304
000108  f7fffffe          BL       wpa_printf
00010c  2310              MOVS     r3,#0x10              ;306
00010e  2221              MOVS     r2,#0x21              ;306
000110  4651              MOV      r1,r10                ;306
000112  4640              MOV      r0,r8                 ;306
000114  f7fffffe          BL       eap_pax_alloc_resp
000118  4681              MOV      r9,r0                 ;306
00011a  f1b90f00          CMP      r9,#0                 ;307
00011e  d101              BNE      |L10.292|
000120  2000              MOVS     r0,#0                 ;308
000122  e785              B        |L10.48|
                  |L10.292|
000124  2110              MOVS     r1,#0x10              ;312
000126  4648              MOV      r0,r9                 ;312
000128  f7fffffe          BL       wpabuf_put
00012c  900c              STR      r0,[sp,#0x30]         ;312
00012e  4648              MOV      r0,r9                 ;313
000130  f7fffffe          BL       wpabuf_len
000134  3810              SUBS     r0,r0,#0x10           ;313
000136  9007              STR      r0,[sp,#0x1c]         ;313
000138  4648              MOV      r0,r9                 ;313
00013a  f7fffffe          BL       wpabuf_head
00013e  9006              STR      r0,[sp,#0x18]         ;313
000140  2200              MOVS     r2,#0                 ;313
000142  9b0c              LDR      r3,[sp,#0x30]         ;313
000144  9202              STR      r2,[sp,#8]            ;313
000146  9203              STR      r2,[sp,#0xc]          ;313
000148  e9cd2304          STRD     r2,r3,[sp,#0x10]      ;313
00014c  4613              MOV      r3,r2                 ;313
00014e  9a07              LDR      r2,[sp,#0x1c]         ;313
000150  e9cd2300          STRD     r2,r3,[sp,#0]         ;313
000154  7860              LDRB     r0,[r4,#1]            ;313
000156  2210              MOVS     r2,#0x10              ;313
000158  f104017c          ADD      r1,r4,#0x7c           ;313
00015c  9b06              LDR      r3,[sp,#0x18]         ;313
00015e  f7fffffe          BL       eap_pax_mac
000162  2310              MOVS     r3,#0x10              ;316
000164  a160              ADR      r1,|L10.744|
000166  2000              MOVS     r0,#0                 ;316
000168  9a0c              LDR      r2,[sp,#0x30]         ;316
00016a  f7fffffe          BL       wpa_hexdump
00016e  2002              MOVS     r0,#2                 ;318
000170  7020              STRB     r0,[r4,#0]            ;318
000172  2004              MOVS     r0,#4                 ;319
000174  7128              STRB     r0,[r5,#4]            ;319
000176  2002              MOVS     r0,#2                 ;320
000178  7168              STRB     r0,[r5,#5]            ;320
00017a  2000              MOVS     r0,#0                 ;321
00017c  60a8              STR      r0,[r5,#8]            ;321
00017e  4648              MOV      r0,r9                 ;323
000180  e756              B        |L10.48|
;;;325    
                          ENDP

000182  0000              DCW      0x0000
                  |L10.388|
000184  4541502d          DCB      "EAP-PAX: PAX_STD-3 (received)",0
000188  5041583a
00018c  20504158
000190  5f535444
000194  2d332028
000198  72656365
00019c  69766564
0001a0  2900    
0001a2  00                DCB      0
0001a3  00                DCB      0
                  |L10.420|
0001a4  4541502d          DCB      "EAP-PAX: PAX_STD-3 received in unexpected state (%d) - "
0001a8  5041583a
0001ac  20504158
0001b0  5f535444
0001b4  2d332072
0001b8  65636569
0001bc  76656420
0001c0  696e2075
0001c4  6e657870
0001c8  65637465
0001cc  64207374
0001d0  61746520
0001d4  28256429
0001d8  202d20  
0001db  69676e6f          DCB      "ignored",0
0001df  72656400
0001e3  00                DCB      0
                  |L10.484|
0001e4  4541502d          DCB      "EAP-PAX: PAX_STD-3 with CE flag set - ignored",0
0001e8  5041583a
0001ec  20504158
0001f0  5f535444
0001f4  2d332077
0001f8  69746820
0001fc  43452066
000200  6c616720
000204  73657420
000208  2d206967
00020c  6e6f7265
000210  6400    
000212  00                DCB      0
000213  00                DCB      0
                  |L10.532|
000214  4541502d          DCB      "EAP-PAX: PAX_STD-3 with too short payload",0
000218  5041583a
00021c  20504158
000220  5f535444
000224  2d332077
000228  69746820
00022c  746f6f20
000230  73686f72
000234  74207061
000238  796c6f61
00023c  6400    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L10.576|
                          DCD      ||.constdata||
                  |L10.580|
000244  4541502d          DCB      "EAP-PAX: MAC_CK(B, CID)",0
000248  5041583a
00024c  204d4143
000250  5f434b28
000254  422c2043
000258  49442900
                  |L10.604|
00025c  4541502d          DCB      "EAP-PAX: Invalid MAC_CK(B, CID) received",0
000260  5041583a
000264  20496e76
000268  616c6964
00026c  204d4143
000270  5f434b28
000274  422c2043
000278  49442920
00027c  72656365
000280  69766564
000284  00      
000285  00                DCB      0
000286  00                DCB      0
000287  00                DCB      0
                  |L10.648|
000288  4541502d          DCB      "EAP-PAX: expected MAC_CK(B, CID)",0
00028c  5041583a
000290  20657870
000294  65637465
000298  64204d41
00029c  435f434b
0002a0  28422c20
0002a4  43494429
0002a8  00      
0002a9  00                DCB      0
0002aa  00                DCB      0
0002ab  00                DCB      0
                  |L10.684|
0002ac  4541502d          DCB      "EAP-PAX: ignored extra payload",0
0002b0  5041583a
0002b4  2069676e
0002b8  6f726564
0002bc  20657874
0002c0  72612070
0002c4  61796c6f
0002c8  616400  
0002cb  00                DCB      0
                  |L10.716|
0002cc  4541502d          DCB      "EAP-PAX: PAX-ACK (sending)",0
0002d0  5041583a
0002d4  20504158
0002d8  2d41434b
0002dc  20287365
0002e0  6e64696e
0002e4  672900  
0002e7  00                DCB      0
                  |L10.744|
0002e8  4541502d          DCB      "EAP-PAX: ICV",0
0002ec  5041583a
0002f0  20494356
0002f4  00      
0002f5  00                DCB      0
0002f6  00                DCB      0
0002f7  00                DCB      0

                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.eap_peer_pax_register||, CODE, READONLY, ALIGN=2

                  eap_peer_pax_register PROC
;;;508    
;;;509    int eap_peer_pax_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;510    {
;;;511    	struct eap_method *eap;
;;;512    	int ret;
;;;513    
;;;514    	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a310              ADR      r3,|L13.68|
000004  222e              MOVS     r2,#0x2e
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;515    				    EAP_VENDOR_IETF, EAP_TYPE_PAX, "PAX");
;;;516    	if (eap == NULL)
000010  b914              CBNZ     r4,|L13.24|
;;;517    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L13.22|
;;;518    
;;;519    	eap->init = eap_pax_init;
;;;520    	eap->deinit = eap_pax_deinit;
;;;521    	eap->process = eap_pax_process;
;;;522    	eap->isKeyAvailable = eap_pax_isKeyAvailable;
;;;523    	eap->getKey = eap_pax_getKey;
;;;524    	eap->get_emsk = eap_pax_get_emsk;
;;;525    
;;;526    	ret = eap_peer_method_register(eap);
;;;527    	if (ret)
;;;528    		eap_peer_method_free(eap);
;;;529    	return ret;
;;;530    }
000016  bd70              POP      {r4-r6,pc}
                  |L13.24|
000018  480b              LDR      r0,|L13.72|
00001a  60e0              STR      r0,[r4,#0xc]          ;519
00001c  480b              LDR      r0,|L13.76|
00001e  6120              STR      r0,[r4,#0x10]         ;520
000020  480b              LDR      r0,|L13.80|
000022  6160              STR      r0,[r4,#0x14]         ;521
000024  480b              LDR      r0,|L13.84|
000026  61a0              STR      r0,[r4,#0x18]         ;522
000028  480b              LDR      r0,|L13.88|
00002a  61e0              STR      r0,[r4,#0x1c]         ;523
00002c  480b              LDR      r0,|L13.92|
00002e  6420              STR      r0,[r4,#0x40]         ;524
000030  4620              MOV      r0,r4                 ;526
000032  f7fffffe          BL       eap_peer_method_register
000036  4605              MOV      r5,r0                 ;526
000038  b115              CBZ      r5,|L13.64|
00003a  4620              MOV      r0,r4                 ;528
00003c  f7fffffe          BL       eap_peer_method_free
                  |L13.64|
000040  4628              MOV      r0,r5                 ;529
000042  e7e8              B        |L13.22|
                          ENDP

                  |L13.68|
000044  50415800          DCB      "PAX",0
                  |L13.72|
                          DCD      eap_pax_init
                  |L13.76|
                          DCD      eap_pax_deinit
                  |L13.80|
                          DCD      eap_pax_process
                  |L13.84|
                          DCD      eap_pax_isKeyAvailable
                  |L13.88|
                          DCD      eap_pax_getKey
                  |L13.92|
                          DCD      eap_pax_get_emsk

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L14.30|
00001a  2001              MOVS     r0,#1
                  |L14.28|
;;;495    }
00001c  4770              BX       lr
                  |L14.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L14.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L19.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L19.14|
                  |L19.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L19.12|
;;;70     }
00000c  4770              BX       lr
                  |L19.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L19.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L20.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L20.16|
                  |L20.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L20.14|
;;;76     }
00000e  4770              BX       lr
                  |L20.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L20.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L21.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L21.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L21.18|
                  |L21.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L21.16|
;;;57     }
000010  4770              BX       lr
                  |L21.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L21.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L22.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L22.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L22.20|
                  |L22.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L22.18|
;;;64     }
000012  4770              BX       lr
                  |L22.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L22.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L23.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L23.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L23.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L23.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L26.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L26.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L26.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L26.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L32.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L32.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  5041583a          DCB      0x50,0x41,0x58,0x3a
000008  20504158          DCB      0x20,0x50,0x41,0x58
00000c  5f535444          DCB      0x5f,0x53,0x54,0x44
000010  2d332077          DCB      0x2d,0x33,0x20,0x77
000014  69746820          DCB      0x69,0x74,0x68,0x20
000018  696e636f          DCB      0x69,0x6e,0x63,0x6f
00001c  72726563          DCB      0x72,0x72,0x65,0x63
000020  74204d41          DCB      0x74,0x20,0x4d,0x41
000024  435f434b          DCB      0x43,0x5f,0x43,0x4b
000028  206c656e          DCB      0x20,0x6c,0x65,0x6e
00002c  67746820          DCB      0x67,0x74,0x68,0x20
000030  25642028          DCB      0x25,0x64,0x20,0x28
000034  65787065          DCB      0x65,0x78,0x70,0x65
000038  63746564          DCB      0x63,0x74,0x65,0x64
00003c  20256429          DCB      0x20,0x25,0x64,0x29
000040  00000000          DCB      0x00,0x00,0x00,0x00
000044  4541502d          DCB      0x45,0x41,0x50,0x2d
000048  5041583a          DCB      0x50,0x41,0x58,0x3a
00004c  20726563          DCB      0x20,0x72,0x65,0x63
000050  65697665          DCB      0x65,0x69,0x76,0x65
000054  64206672          DCB      0x64,0x20,0x66,0x72
000058  616d653a          DCB      0x61,0x6d,0x65,0x3a
00005c  206f705f          DCB      0x20,0x6f,0x70,0x5f
000060  636f6465          DCB      0x63,0x6f,0x64,0x65
000064  20307825          DCB      0x20,0x30,0x78,0x25
000068  7820666c          DCB      0x78,0x20,0x66,0x6c
00006c  61677320          DCB      0x61,0x67,0x73,0x20
000070  30782578          DCB      0x30,0x78,0x25,0x78
000074  206d6163          DCB      0x20,0x6d,0x61,0x63
000078  5f696420          DCB      0x5f,0x69,0x64,0x20
00007c  30782578          DCB      0x30,0x78,0x25,0x78
000080  2064685f          DCB      0x20,0x64,0x68,0x5f
000084  67726f75          DCB      0x67,0x72,0x6f,0x75
000088  705f6964          DCB      0x70,0x5f,0x69,0x64
00008c  20307825          DCB      0x20,0x30,0x78,0x25
000090  78207075          DCB      0x78,0x20,0x70,0x75
000094  626c6963          DCB      0x62,0x6c,0x69,0x63
000098  5f6b6579          DCB      0x5f,0x6b,0x65,0x79
00009c  5f696420          DCB      0x5f,0x69,0x64,0x20
0000a0  30782578          DCB      0x30,0x78,0x25,0x78
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  4541502d          DCB      0x45,0x41,0x50,0x2d
0000ac  5041583a          DCB      0x50,0x41,0x58,0x3a
0000b0  204d4143          DCB      0x20,0x4d,0x41,0x43
0000b4  20494420          DCB      0x20,0x49,0x44,0x20
0000b8  6368616e          DCB      0x63,0x68,0x61,0x6e
0000bc  67656420          DCB      0x67,0x65,0x64,0x20
0000c0  64757269          DCB      0x64,0x75,0x72,0x69
0000c4  6e672061          DCB      0x6e,0x67,0x20,0x61
0000c8  75746865          DCB      0x75,0x74,0x68,0x65
0000cc  6e746963          DCB      0x6e,0x74,0x69,0x63
0000d0  6174696f          DCB      0x61,0x74,0x69,0x6f
0000d4  6e202877          DCB      0x6e,0x20,0x28,0x77
0000d8  61732030          DCB      0x61,0x73,0x20,0x30
0000dc  7825642c          DCB      0x78,0x25,0x64,0x2c
0000e0  20697320          DCB      0x20,0x69,0x73,0x20
0000e4  30782564          DCB      0x30,0x78,0x25,0x64
0000e8  29000000          DCB      0x29,0x00,0x00,0x00
0000ec  4541502d          DCB      0x45,0x41,0x50,0x2d
0000f0  5041583a          DCB      0x50,0x41,0x58,0x3a
0000f4  20444820          DCB      0x20,0x44,0x48,0x20
0000f8  47726f75          DCB      0x47,0x72,0x6f,0x75
0000fc  70204944          DCB      0x70,0x20,0x49,0x44
000100  20636861          DCB      0x20,0x63,0x68,0x61
000104  6e676564          DCB      0x6e,0x67,0x65,0x64
000108  20647572          DCB      0x20,0x64,0x75,0x72
00010c  696e6720          DCB      0x69,0x6e,0x67,0x20
000110  61757468          DCB      0x61,0x75,0x74,0x68
000114  656e7469          DCB      0x65,0x6e,0x74,0x69
000118  63617469          DCB      0x63,0x61,0x74,0x69
00011c  6f6e2028          DCB      0x6f,0x6e,0x20,0x28
000120  77617320          DCB      0x77,0x61,0x73,0x20
000124  30782564          DCB      0x30,0x78,0x25,0x64
000128  2c206973          DCB      0x2c,0x20,0x69,0x73
00012c  20307825          DCB      0x20,0x30,0x78,0x25
000130  64290000          DCB      0x64,0x29,0x00,0x00
000134  4541502d          DCB      0x45,0x41,0x50,0x2d
000138  5041583a          DCB      0x50,0x41,0x58,0x3a
00013c  20507562          DCB      0x20,0x50,0x75,0x62
000140  6c696320          DCB      0x6c,0x69,0x63,0x20
000144  4b657920          DCB      0x4b,0x65,0x79,0x20
000148  49442063          DCB      0x49,0x44,0x20,0x63
00014c  68616e67          DCB      0x68,0x61,0x6e,0x67
000150  65642064          DCB      0x65,0x64,0x20,0x64
000154  7572696e          DCB      0x75,0x72,0x69,0x6e
000158  67206175          DCB      0x67,0x20,0x61,0x75
00015c  7468656e          DCB      0x74,0x68,0x65,0x6e
000160  74696361          DCB      0x74,0x69,0x63,0x61
000164  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000168  20287761          DCB      0x20,0x28,0x77,0x61
00016c  73203078          DCB      0x73,0x20,0x30,0x78
000170  25642c20          DCB      0x25,0x64,0x2c,0x20
000174  69732030          DCB      0x69,0x73,0x20,0x30
000178  78256429          DCB      0x78,0x25,0x64,0x29
00017c  00                DCB      0x00
