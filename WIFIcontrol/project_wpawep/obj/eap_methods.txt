; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_methods.o --depend=.\obj\eap_methods.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_methods.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_methods.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_get_name||, CODE, READONLY, ALIGN=2

                  eap_get_name PROC
;;;76      */
;;;77     const char * eap_get_name(int vendor, EapType type)
000000  4602              MOV      r2,r0
;;;78     {
000002  460b              MOV      r3,r1
;;;79     	struct eap_method *m;
;;;80     	for (m = eap_methods; m; m = m->next) {
000004  4807              LDR      r0,|L2.36|
000006  6801              LDR      r1,[r0,#0]  ; eap_methods
000008  e008              B        |L2.28|
                  |L2.10|
;;;81     		if (m->vendor == vendor && m->method == type)
00000a  6808              LDR      r0,[r1,#0]
00000c  4290              CMP      r0,r2
00000e  d104              BNE      |L2.26|
000010  7908              LDRB     r0,[r1,#4]
000012  4298              CMP      r0,r3
000014  d101              BNE      |L2.26|
;;;82     			return m->name;
000016  6888              LDR      r0,[r1,#8]
                  |L2.24|
;;;83     	}
;;;84     	return NULL;
;;;85     }
000018  4770              BX       lr
                  |L2.26|
00001a  6bc9              LDR      r1,[r1,#0x3c]         ;80
                  |L2.28|
00001c  2900              CMP      r1,#0                 ;80
00001e  d1f4              BNE      |L2.10|
000020  2000              MOVS     r0,#0                 ;84
000022  e7f9              B        |L2.24|
;;;86     
                          ENDP

                  |L2.36|
                          DCD      eap_methods

                          AREA ||i.eap_get_names||, CODE, READONLY, ALIGN=2

                  eap_get_names PROC
;;;94      */
;;;95     size_t eap_get_names(char *buf, size_t buflen)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;96     {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
;;;97     	char *pos, *end;
;;;98     	struct eap_method *m;
;;;99     	int ret;
;;;100    
;;;101    	if (buflen == 0)
000008  f1b80f00          CMP      r8,#0
00000c  d102              BNE      |L3.20|
;;;102    		return 0;
00000e  2000              MOVS     r0,#0
                  |L3.16|
;;;103    
;;;104    	pos = buf;
;;;105    	end = pos + buflen;
;;;106    
;;;107    	for (m = eap_methods; m; m = m->next) {
;;;108    		ret = os_snprintf(pos, end - pos, "%s%s",
;;;109    				  m == eap_methods ? "" : " ", m->name);
;;;110    		if (ret < 0 || ret >= end - pos)
;;;111    			break;
;;;112    		pos += ret;
;;;113    	}
;;;114    	buf[buflen - 1] = '\0';
;;;115    
;;;116    	return pos - buf;
;;;117    }
000010  e8bd83f8          POP      {r3-r9,pc}
                  |L3.20|
000014  462c              MOV      r4,r5                 ;104
000016  eb040908          ADD      r9,r4,r8              ;105
00001a  4813              LDR      r0,|L3.104|
00001c  6806              LDR      r6,[r0,#0]            ;107  ; eap_methods
00001e  e019              B        |L3.84|
                  |L3.32|
000020  68b3              LDR      r3,[r6,#8]            ;108
000022  4811              LDR      r0,|L3.104|
000024  9300              STR      r3,[sp,#0]            ;108
000026  6800              LDR      r0,[r0,#0]            ;108  ; eap_methods
000028  4286              CMP      r6,r0                 ;108
00002a  d101              BNE      |L3.48|
00002c  a00f              ADR      r0,|L3.108|
00002e  e000              B        |L3.50|
                  |L3.48|
000030  a00f              ADR      r0,|L3.112|
                  |L3.50|
000032  4603              MOV      r3,r0                 ;109
000034  eba90104          SUB      r1,r9,r4              ;109
000038  a20e              ADR      r2,|L3.116|
00003a  4620              MOV      r0,r4                 ;109
00003c  f7fffffe          BL       os_snprintf
000040  4607              MOV      r7,r0                 ;109
000042  2f00              CMP      r7,#0                 ;110
000044  db03              BLT      |L3.78|
000046  eba90004          SUB      r0,r9,r4              ;110
00004a  42b8              CMP      r0,r7                 ;110
00004c  dc00              BGT      |L3.80|
                  |L3.78|
00004e  e003              B        |L3.88|
                  |L3.80|
000050  443c              ADD      r4,r4,r7              ;112
000052  6bf6              LDR      r6,[r6,#0x3c]         ;107
                  |L3.84|
000054  2e00              CMP      r6,#0                 ;107
000056  d1e3              BNE      |L3.32|
                  |L3.88|
000058  bf00              NOP                            ;111
00005a  2100              MOVS     r1,#0                 ;114
00005c  f1a80001          SUB      r0,r8,#1              ;114
000060  5429              STRB     r1,[r5,r0]            ;114
000062  1b60              SUBS     r0,r4,r5              ;116
000064  e7d4              B        |L3.16|
;;;118    
                          ENDP

000066  0000              DCW      0x0000
                  |L3.104|
                          DCD      eap_methods
                  |L3.108|
00006c  00                DCB      0
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L3.112|
000070  2000              DCB      " ",0
000072  00                DCB      0
000073  00                DCB      0
                  |L3.116|
000074  25732573          DCB      "%s%s",0
000078  00      
000079  00                DCB      0
00007a  00                DCB      0
00007b  00                DCB      0

                          AREA ||i.eap_get_names_as_string_array||, CODE, READONLY, ALIGN=2

                  eap_get_names_as_string_array PROC
;;;129     */
;;;130    char ** eap_get_names_as_string_array(size_t *num)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;131    {
000004  4680              MOV      r8,r0
;;;132    	struct eap_method *m;
;;;133    	size_t array_len = 0;
000006  f04f0900          MOV      r9,#0
;;;134    	char **array;
;;;135    	int i = 0, j;
00000a  2600              MOVS     r6,#0
;;;136    
;;;137    	for (m = eap_methods; m; m = m->next)
00000c  481d              LDR      r0,|L4.132|
00000e  6805              LDR      r5,[r0,#0]  ; eap_methods
000010  e002              B        |L4.24|
                  |L4.18|
;;;138    		array_len++;
000012  f1090901          ADD      r9,r9,#1
000016  6bed              LDR      r5,[r5,#0x3c]         ;137
                  |L4.24|
000018  2d00              CMP      r5,#0                 ;137
00001a  d1fa              BNE      |L4.18|
;;;139    
;;;140    	array = os_zalloc(sizeof(char *) * (array_len + 1));
00001c  f1090101          ADD      r1,r9,#1
000020  0088              LSLS     r0,r1,#2
000022  f7fffffe          BL       os_zalloc
000026  4604              MOV      r4,r0
;;;141    	if (array == NULL)
000028  b914              CBNZ     r4,|L4.48|
;;;142    		return NULL;
00002a  2000              MOVS     r0,#0
                  |L4.44|
;;;143    
;;;144    	for (m = eap_methods; m; m = m->next) {
;;;145    		array[i++] = (char*)os_strdup(m->name);
;;;146    		if (array[i - 1] == NULL) {
;;;147    			for (j = 0; j < i; j++)
;;;148    				os_free(array[j]);
;;;149    			os_free(array);
;;;150    			return NULL;
;;;151    		}
;;;152    	}
;;;153    	array[i] = NULL;
;;;154    
;;;155    	if (num)
;;;156    		*num = array_len;
;;;157    
;;;158    	return array;
;;;159    }
00002c  e8bd87f0          POP      {r4-r10,pc}
                  |L4.48|
000030  4814              LDR      r0,|L4.132|
000032  6805              LDR      r5,[r0,#0]            ;144  ; eap_methods
000034  e019              B        |L4.106|
                  |L4.54|
000036  68a8              LDR      r0,[r5,#8]            ;145
000038  f7fffffe          BL       os_strdup
00003c  4631              MOV      r1,r6                 ;145
00003e  1c76              ADDS     r6,r6,#1              ;145
000040  f8440021          STR      r0,[r4,r1,LSL #2]     ;145
000044  1e70              SUBS     r0,r6,#1              ;146
000046  f8540020          LDR      r0,[r4,r0,LSL #2]     ;146
00004a  b968              CBNZ     r0,|L4.104|
00004c  2700              MOVS     r7,#0                 ;147
00004e  e004              B        |L4.90|
                  |L4.80|
000050  f8540027          LDR      r0,[r4,r7,LSL #2]     ;148
000054  f7fffffe          BL       os_free
000058  1c7f              ADDS     r7,r7,#1              ;147
                  |L4.90|
00005a  42b7              CMP      r7,r6                 ;147
00005c  dbf8              BLT      |L4.80|
00005e  4620              MOV      r0,r4                 ;149
000060  f7fffffe          BL       os_free
000064  2000              MOVS     r0,#0                 ;150
000066  e7e1              B        |L4.44|
                  |L4.104|
000068  6bed              LDR      r5,[r5,#0x3c]         ;144
                  |L4.106|
00006a  2d00              CMP      r5,#0                 ;144
00006c  d1e3              BNE      |L4.54|
00006e  2000              MOVS     r0,#0                 ;153
000070  f8440026          STR      r0,[r4,r6,LSL #2]     ;153
000074  f1b80f00          CMP      r8,#0                 ;155
000078  d001              BEQ      |L4.126|
00007a  f8c89000          STR      r9,[r8,#0]            ;156
                  |L4.126|
00007e  4620              MOV      r0,r4                 ;158
000080  e7d4              B        |L4.44|
;;;160    
                          ENDP

000082  0000              DCW      0x0000
                  |L4.132|
                          DCD      eap_methods

                          AREA ||i.eap_peer_get_eap_method||, CODE, READONLY, ALIGN=2

                  eap_peer_get_eap_method PROC
;;;33      */
;;;34     const struct eap_method * eap_peer_get_eap_method(int vendor, EapType method)
000000  4602              MOV      r2,r0
;;;35     {
000002  460b              MOV      r3,r1
;;;36     	struct eap_method *m;
;;;37     	for (m = eap_methods; m; m = m->next) {
000004  4807              LDR      r0,|L5.36|
000006  6801              LDR      r1,[r0,#0]  ; eap_methods
000008  e008              B        |L5.28|
                  |L5.10|
;;;38     		if (m->vendor == vendor && m->method == method)
00000a  6808              LDR      r0,[r1,#0]
00000c  4290              CMP      r0,r2
00000e  d104              BNE      |L5.26|
000010  7908              LDRB     r0,[r1,#4]
000012  4298              CMP      r0,r3
000014  d101              BNE      |L5.26|
;;;39     			return m;
000016  4608              MOV      r0,r1
                  |L5.24|
;;;40     	}
;;;41     	return NULL;
;;;42     }
000018  4770              BX       lr
                  |L5.26|
00001a  6bc9              LDR      r1,[r1,#0x3c]         ;37
                  |L5.28|
00001c  2900              CMP      r1,#0                 ;37
00001e  d1f4              BNE      |L5.10|
000020  2000              MOVS     r0,#0                 ;41
000022  e7f9              B        |L5.24|
;;;43     
                          ENDP

                  |L5.36|
                          DCD      eap_methods

                          AREA ||i.eap_peer_get_methods||, CODE, READONLY, ALIGN=2

                  eap_peer_get_methods PROC
;;;166     */
;;;167    const struct eap_method * eap_peer_get_methods(size_t *count)
000000  4601              MOV      r1,r0
;;;168    {
;;;169    	int c = 0;
000002  2300              MOVS     r3,#0
;;;170    	struct eap_method *m;
;;;171    
;;;172    	for (m = eap_methods; m; m = m->next)
000004  4805              LDR      r0,|L6.28|
000006  6802              LDR      r2,[r0,#0]  ; eap_methods
000008  e001              B        |L6.14|
                  |L6.10|
;;;173    		c++;
00000a  1c5b              ADDS     r3,r3,#1
00000c  6bd2              LDR      r2,[r2,#0x3c]         ;172
                  |L6.14|
00000e  2a00              CMP      r2,#0                 ;172
000010  d1fb              BNE      |L6.10|
;;;174    	
;;;175    	*count = c;
000012  600b              STR      r3,[r1,#0]
;;;176    	return eap_methods;
000014  4801              LDR      r0,|L6.28|
000016  6800              LDR      r0,[r0,#0]  ; eap_methods
;;;177    }
000018  4770              BX       lr
;;;178    
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      eap_methods

                          AREA ||i.eap_peer_get_type||, CODE, READONLY, ALIGN=2

                  eap_peer_get_type PROC
;;;53      */
;;;54     EapType eap_peer_get_type(const char *name, int *vendor)
000000  b570              PUSH     {r4-r6,lr}
;;;55     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;56     	struct eap_method *m;
;;;57     	for (m = eap_methods; m; m = m->next) {
000006  4809              LDR      r0,|L7.44|
000008  6804              LDR      r4,[r0,#0]  ; eap_methods
00000a  e009              B        |L7.32|
                  |L7.12|
;;;58     		if (os_strcmp(m->name, name) == 0) {
00000c  4631              MOV      r1,r6
00000e  68a0              LDR      r0,[r4,#8]
000010  f7fffffe          BL       os_strcmp
000014  b918              CBNZ     r0,|L7.30|
;;;59     			*vendor = m->vendor;
000016  6820              LDR      r0,[r4,#0]
000018  6028              STR      r0,[r5,#0]
;;;60     			return m->method;
00001a  7920              LDRB     r0,[r4,#4]
                  |L7.28|
;;;61     		}
;;;62     	}
;;;63     	*vendor = EAP_VENDOR_IETF;
;;;64     	return EAP_TYPE_NONE;
;;;65     }
00001c  bd70              POP      {r4-r6,pc}
                  |L7.30|
00001e  6be4              LDR      r4,[r4,#0x3c]         ;57
                  |L7.32|
000020  2c00              CMP      r4,#0                 ;57
000022  d1f3              BNE      |L7.12|
000024  2000              MOVS     r0,#0                 ;63
000026  6028              STR      r0,[r5,#0]            ;63
000028  bf00              NOP                            ;64
00002a  e7f7              B        |L7.28|
;;;66     
                          ENDP

                  |L7.44|
                          DCD      eap_methods

                          AREA ||i.eap_peer_method_alloc||, CODE, READONLY, ALIGN=1

                  eap_peer_method_alloc PROC
;;;282     */
;;;283    struct eap_method * eap_peer_method_alloc(int version, int vendor,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;284    					  EapType method, const char *name)
;;;285    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  4698              MOV      r8,r3
;;;286    	struct eap_method *eap;
;;;287    	eap = os_zalloc(sizeof(*eap));
00000c  2044              MOVS     r0,#0x44
00000e  f7fffffe          BL       os_zalloc
000012  4604              MOV      r4,r0
;;;288    	if (eap == NULL)
000014  b914              CBNZ     r4,|L8.28|
;;;289    		return NULL;
000016  2000              MOVS     r0,#0
                  |L8.24|
;;;290    	eap->version = version;
;;;291    	eap->vendor = vendor;
;;;292    	eap->method = method;
;;;293    	eap->name = name;
;;;294    	return eap;
;;;295    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L8.28|
00001c  63a5              STR      r5,[r4,#0x38]         ;290
00001e  6027              STR      r7,[r4,#0]            ;291
000020  7126              STRB     r6,[r4,#4]            ;292
000022  f8c48008          STR      r8,[r4,#8]            ;293
000026  4620              MOV      r0,r4                 ;294
000028  e7f6              B        |L8.24|
;;;296    
                          ENDP


                          AREA ||i.eap_peer_method_free||, CODE, READONLY, ALIGN=1

                  eap_peer_method_free PROC
;;;301     */
;;;302    void eap_peer_method_free(struct eap_method *method)
000000  b510              PUSH     {r4,lr}
;;;303    {
000002  4604              MOV      r4,r0
;;;304    	os_free(method);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       os_free
;;;305    }
00000a  bd10              POP      {r4,pc}
;;;306    
                          ENDP


                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_register||, CODE, READONLY, ALIGN=2

                  eap_peer_method_register PROC
;;;316     */
;;;317    int eap_peer_method_register(struct eap_method *method)
000000  b570              PUSH     {r4-r6,lr}
;;;318    {
000002  4604              MOV      r4,r0
;;;319    	struct eap_method *m, *last = NULL;
000004  2600              MOVS     r6,#0
;;;320    
;;;321    	if (method == NULL || method->name == NULL ||
000006  b124              CBZ      r4,|L11.18|
000008  68a0              LDR      r0,[r4,#8]
00000a  b110              CBZ      r0,|L11.18|
;;;322    	    method->version != EAP_PEER_METHOD_INTERFACE_VERSION)
00000c  6ba0              LDR      r0,[r4,#0x38]
00000e  2801              CMP      r0,#1
000010  d002              BEQ      |L11.24|
                  |L11.18|
;;;323    		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L11.22|
;;;324    
;;;325    	for (m = eap_methods; m; m = m->next) {
;;;326    		if ((m->vendor == method->vendor &&
;;;327    		     m->method == method->method) ||
;;;328    		    os_strcmp(m->name, method->name) == 0)
;;;329    			return -2;
;;;330    		last = m;
;;;331    	}
;;;332    
;;;333    	if (last)
;;;334    		last->next = method;
;;;335    	else
;;;336    		eap_methods = method;
;;;337    
;;;338    	return 0;
;;;339    }
000016  bd70              POP      {r4-r6,pc}
                  |L11.24|
000018  480e              LDR      r0,|L11.84|
00001a  6805              LDR      r5,[r0,#0]            ;325  ; eap_methods
00001c  e011              B        |L11.66|
                  |L11.30|
00001e  6828              LDR      r0,[r5,#0]            ;326
000020  6821              LDR      r1,[r4,#0]            ;326
000022  4288              CMP      r0,r1                 ;326
000024  d103              BNE      |L11.46|
000026  7928              LDRB     r0,[r5,#4]            ;327
000028  7921              LDRB     r1,[r4,#4]            ;327
00002a  4288              CMP      r0,r1                 ;327
00002c  d004              BEQ      |L11.56|
                  |L11.46|
00002e  68a1              LDR      r1,[r4,#8]            ;328
000030  68a8              LDR      r0,[r5,#8]            ;328
000032  f7fffffe          BL       os_strcmp
000036  b910              CBNZ     r0,|L11.62|
                  |L11.56|
000038  f06f0001          MVN      r0,#1                 ;329
00003c  e7eb              B        |L11.22|
                  |L11.62|
00003e  462e              MOV      r6,r5                 ;330
000040  6bed              LDR      r5,[r5,#0x3c]         ;325
                  |L11.66|
000042  2d00              CMP      r5,#0                 ;325
000044  d1eb              BNE      |L11.30|
000046  b10e              CBZ      r6,|L11.76|
000048  63f4              STR      r4,[r6,#0x3c]         ;334
00004a  e001              B        |L11.80|
                  |L11.76|
00004c  4801              LDR      r0,|L11.84|
00004e  6004              STR      r4,[r0,#0]            ;336  ; eap_methods
                  |L11.80|
000050  2000              MOVS     r0,#0                 ;338
000052  e7e0              B        |L11.22|
;;;340    
                          ENDP

                  |L11.84|
                          DCD      eap_methods

                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.eap_peer_unregister_methods||, CODE, READONLY, ALIGN=2

                  eap_peer_unregister_methods PROC
;;;347     */
;;;348    void eap_peer_unregister_methods(void)
000000  b510              PUSH     {r4,lr}
;;;349    {
;;;350    	struct eap_method *m;
;;;351    #ifdef CONFIG_DYNAMIC_EAP_METHODS
;;;352    	void *handle;
;;;353    #endif /* CONFIG_DYNAMIC_EAP_METHODS */
;;;354    
;;;355    	while (eap_methods) {
000002  e00e              B        |L13.34|
                  |L13.4|
;;;356    		m = eap_methods;
000004  4809              LDR      r0,|L13.44|
000006  6804              LDR      r4,[r0,#0]  ; eap_methods
;;;357    		eap_methods = eap_methods->next;
000008  6800              LDR      r0,[r0,#0]  ; eap_methods
00000a  6bc0              LDR      r0,[r0,#0x3c]
00000c  4907              LDR      r1,|L13.44|
00000e  6008              STR      r0,[r1,#0]  ; eap_methods
;;;358    
;;;359    #ifdef CONFIG_DYNAMIC_EAP_METHODS
;;;360    		handle = m->dl_handle;
;;;361    #endif /* CONFIG_DYNAMIC_EAP_METHODS */
;;;362    
;;;363    		if (m->free)
000010  6b60              LDR      r0,[r4,#0x34]
000012  b118              CBZ      r0,|L13.28|
;;;364    			m->free(m);
000014  4620              MOV      r0,r4
000016  6b61              LDR      r1,[r4,#0x34]
000018  4788              BLX      r1
00001a  e002              B        |L13.34|
                  |L13.28|
;;;365    		else
;;;366    			eap_peer_method_free(m);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       eap_peer_method_free
                  |L13.34|
000022  4802              LDR      r0,|L13.44|
000024  6800              LDR      r0,[r0,#0]            ;355  ; eap_methods
000026  2800              CMP      r0,#0                 ;355
000028  d1ec              BNE      |L13.4|
;;;367    
;;;368    #ifdef CONFIG_DYNAMIC_EAP_METHODS
;;;369    		if (handle)
;;;370    			dlclose(handle);
;;;371    #endif /* CONFIG_DYNAMIC_EAP_METHODS */
;;;372    	}
;;;373    }
00002a  bd10              POP      {r4,pc}
                          ENDP

                  |L13.44|
                          DCD      eap_methods

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L14.30|
00001a  2001              MOVS     r0,#1
                  |L14.28|
;;;495    }
00001c  4770              BX       lr
                  |L14.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L14.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L19.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L19.14|
                  |L19.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L19.12|
;;;70     }
00000c  4770              BX       lr
                  |L19.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L19.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L20.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L20.16|
                  |L20.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L20.14|
;;;76     }
00000e  4770              BX       lr
                  |L20.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L20.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L21.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L21.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L21.18|
                  |L21.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L21.16|
;;;57     }
000010  4770              BX       lr
                  |L21.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L21.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L22.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L22.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L22.20|
                  |L22.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L22.18|
;;;64     }
000012  4770              BX       lr
                  |L22.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L22.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L23.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L23.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L23.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L23.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L26.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L26.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L26.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L26.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L32.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L32.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  eap_methods
                          DCD      0x00000000
