; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_ttls.o --depend=.\obj\eap_ttls.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_ttls.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_peer\eap_ttls.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_peer_method_load||, CODE, READONLY, ALIGN=1

                  eap_peer_method_load PROC
;;;78     
;;;79     static inline int eap_peer_method_load(const char *so)
000000  4601              MOV      r1,r0
;;;80     {
;;;81     	return 0;
000002  2000              MOVS     r0,#0
;;;82     }
000004  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.eap_peer_method_unload||, CODE, READONLY, ALIGN=1

                  eap_peer_method_unload PROC
;;;83     
;;;84     static inline int eap_peer_method_unload(struct eap_method *method)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	return 0;
000002  2000              MOVS     r0,#0
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.eap_peer_ttls_register||, CODE, READONLY, ALIGN=2

                  eap_peer_ttls_register PROC
;;;1961   
;;;1962   int eap_peer_ttls_register(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1963   {
;;;1964   	struct eap_method *eap;
;;;1965   	int ret;
;;;1966   
;;;1967   	eap = eap_peer_method_alloc(EAP_PEER_METHOD_INTERFACE_VERSION,
000002  a313              ADR      r3,|L4.80|
000004  2215              MOVS     r2,#0x15
000006  2100              MOVS     r1,#0
000008  2001              MOVS     r0,#1
00000a  f7fffffe          BL       eap_peer_method_alloc
00000e  4604              MOV      r4,r0
;;;1968   				    EAP_VENDOR_IETF, EAP_TYPE_TTLS, "TTLS");
;;;1969   	if (eap == NULL)
000010  b914              CBNZ     r4,|L4.24|
;;;1970   		return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L4.22|
;;;1971   
;;;1972   	eap->init = eap_ttls_init;
;;;1973   	eap->deinit = eap_ttls_deinit;
;;;1974   	eap->process = eap_ttls_process;
;;;1975   	eap->isKeyAvailable = eap_ttls_isKeyAvailable;
;;;1976   	eap->getKey = eap_ttls_getKey;
;;;1977   	eap->get_status = eap_ttls_get_status;
;;;1978   	eap->has_reauth_data = eap_ttls_has_reauth_data;
;;;1979   	eap->deinit_for_reauth = eap_ttls_deinit_for_reauth;
;;;1980   	eap->init_for_reauth = eap_ttls_init_for_reauth;
;;;1981   
;;;1982   	ret = eap_peer_method_register(eap);
;;;1983   	if (ret)
;;;1984   		eap_peer_method_free(eap);
;;;1985   	return ret;
;;;1986   }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  480f              LDR      r0,|L4.88|
00001a  60e0              STR      r0,[r4,#0xc]          ;1972
00001c  480f              LDR      r0,|L4.92|
00001e  6120              STR      r0,[r4,#0x10]         ;1973
000020  480f              LDR      r0,|L4.96|
000022  6160              STR      r0,[r4,#0x14]         ;1974
000024  480f              LDR      r0,|L4.100|
000026  61a0              STR      r0,[r4,#0x18]         ;1975
000028  480f              LDR      r0,|L4.104|
00002a  61e0              STR      r0,[r4,#0x1c]         ;1976
00002c  480f              LDR      r0,|L4.108|
00002e  6220              STR      r0,[r4,#0x20]         ;1977
000030  480f              LDR      r0,|L4.112|
000032  6260              STR      r0,[r4,#0x24]         ;1978
000034  480f              LDR      r0,|L4.116|
000036  62a0              STR      r0,[r4,#0x28]         ;1979
000038  480f              LDR      r0,|L4.120|
00003a  62e0              STR      r0,[r4,#0x2c]         ;1980
00003c  4620              MOV      r0,r4                 ;1982
00003e  f7fffffe          BL       eap_peer_method_register
000042  4605              MOV      r5,r0                 ;1982
000044  b115              CBZ      r5,|L4.76|
000046  4620              MOV      r0,r4                 ;1984
000048  f7fffffe          BL       eap_peer_method_free
                  |L4.76|
00004c  4628              MOV      r0,r5                 ;1985
00004e  e7e2              B        |L4.22|
                          ENDP

                  |L4.80|
000050  54544c53          DCB      "TTLS",0
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0
                  |L4.88|
                          DCD      eap_ttls_init
                  |L4.92|
                          DCD      eap_ttls_deinit
                  |L4.96|
                          DCD      eap_ttls_process
                  |L4.100|
                          DCD      eap_ttls_isKeyAvailable
                  |L4.104|
                          DCD      eap_ttls_getKey
                  |L4.108|
                          DCD      eap_ttls_get_status
                  |L4.112|
                          DCD      eap_ttls_has_reauth_data
                  |L4.116|
                          DCD      eap_ttls_deinit_for_reauth
                  |L4.120|
                          DCD      eap_ttls_init_for_reauth

                          AREA ||i.eap_ttls_avp_add||, CODE, READONLY, ALIGN=1

                  eap_ttls_avp_add PROC
;;;210    
;;;211    static u8 * eap_ttls_avp_add(u8 *start, u8 *avphdr, u32 avp_code,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;212    			     u32 vendor_id, int mandatory,
;;;213    			     const u8 *data, size_t len)
;;;214    {
000004  b081              SUB      sp,sp,#4
000006  4606              MOV      r6,r0
000008  460f              MOV      r7,r1
00000a  4690              MOV      r8,r2
00000c  4699              MOV      r9,r3
00000e  f8ddb038          LDR      r11,[sp,#0x38]
000012  9d10              LDR      r5,[sp,#0x40]
;;;215    	u8 *pos;
;;;216    	pos = eap_ttls_avp_hdr(avphdr, avp_code, vendor_id, mandatory, len);
000014  465b              MOV      r3,r11
000016  464a              MOV      r2,r9
000018  4641              MOV      r1,r8
00001a  4638              MOV      r0,r7
00001c  9500              STR      r5,[sp,#0]
00001e  f7fffffe          BL       eap_ttls_avp_hdr
000022  4604              MOV      r4,r0
;;;217    	os_memcpy(pos, data, len);
000024  462a              MOV      r2,r5
000026  4620              MOV      r0,r4
000028  990f              LDR      r1,[sp,#0x3c]
00002a  f7fffffe          BL       os_memcpy
;;;218    	pos += len;
00002e  442c              ADD      r4,r4,r5
;;;219    	AVP_PAD(start, pos);
000030  bf00              NOP      
000032  1ba0              SUBS     r0,r4,r6
000034  4240              RSBS     r0,r0,#0
000036  f0000a03          AND      r10,r0,#3
00003a  4652              MOV      r2,r10
00003c  2100              MOVS     r1,#0
00003e  4620              MOV      r0,r4
000040  f7fffffe          BL       os_memset
000044  4454              ADD      r4,r4,r10
000046  bf00              NOP      
;;;220    	return pos;
000048  4620              MOV      r0,r4
;;;221    }
00004a  b005              ADD      sp,sp,#0x14
00004c  e8bd8ff0          POP      {r4-r11,pc}
;;;222    
                          ENDP


                          AREA ||i.eap_ttls_avp_encapsulate||, CODE, READONLY, ALIGN=1

                  eap_ttls_avp_encapsulate PROC
;;;223    
;;;224    static int eap_ttls_avp_encapsulate(struct wpabuf **resp, u32 avp_code,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;225    				    int mandatory)
;;;226    {
000004  4604              MOV      r4,r0
000006  468a              MOV      r10,r1
000008  4690              MOV      r8,r2
;;;227    	struct wpabuf *msg;
;;;228    	u8 *avp, *pos;
;;;229    
;;;230    	msg = wpabuf_alloc(sizeof(struct ttls_avp) + wpabuf_len(*resp) + 4);
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       wpabuf_len
000010  f100090c          ADD      r9,r0,#0xc
000014  4648              MOV      r0,r9
000016  f7fffffe          BL       wpabuf_alloc
00001a  4607              MOV      r7,r0
;;;231    	if (msg == NULL) {
00001c  b93f              CBNZ     r7,|L6.46|
;;;232    		wpabuf_free(*resp);
00001e  6820              LDR      r0,[r4,#0]
000020  f7fffffe          BL       wpabuf_free
;;;233    		*resp = NULL;
000024  2000              MOVS     r0,#0
000026  6020              STR      r0,[r4,#0]
;;;234    		return -1;
000028  1e40              SUBS     r0,r0,#1
                  |L6.42|
;;;235    	}
;;;236    
;;;237    	avp = wpabuf_mhead(msg);
;;;238    	pos = eap_ttls_avp_hdr(avp, avp_code, 0, mandatory, wpabuf_len(*resp));
;;;239    	os_memcpy(pos, wpabuf_head(*resp), wpabuf_len(*resp));
;;;240    	pos += wpabuf_len(*resp);
;;;241    	AVP_PAD(avp, pos);
;;;242    	wpabuf_free(*resp);
;;;243    	wpabuf_put(msg, pos - avp);
;;;244    	*resp = msg;
;;;245    	return 0;
;;;246    }
00002a  e8bd8ff8          POP      {r3-r11,pc}
                  |L6.46|
00002e  4638              MOV      r0,r7                 ;237
000030  f7fffffe          BL       wpabuf_mhead
000034  4606              MOV      r6,r0                 ;237
000036  6820              LDR      r0,[r4,#0]            ;238
000038  f7fffffe          BL       wpabuf_len
00003c  4681              MOV      r9,r0                 ;238
00003e  4643              MOV      r3,r8                 ;238
000040  2200              MOVS     r2,#0                 ;238
000042  4651              MOV      r1,r10                ;238
000044  9000              STR      r0,[sp,#0]            ;238
000046  4630              MOV      r0,r6                 ;238
000048  f7fffffe          BL       eap_ttls_avp_hdr
00004c  4605              MOV      r5,r0                 ;238
00004e  6820              LDR      r0,[r4,#0]            ;239
000050  f7fffffe          BL       wpabuf_len
000054  4681              MOV      r9,r0                 ;239
000056  6820              LDR      r0,[r4,#0]            ;239
000058  f7fffffe          BL       wpabuf_head
00005c  4683              MOV      r11,r0                ;239
00005e  464a              MOV      r2,r9                 ;239
000060  4601              MOV      r1,r0                 ;239
000062  4628              MOV      r0,r5                 ;239
000064  f7fffffe          BL       os_memcpy
000068  6820              LDR      r0,[r4,#0]            ;240
00006a  f7fffffe          BL       wpabuf_len
00006e  4405              ADD      r5,r5,r0              ;240
000070  bf00              NOP                            ;241
000072  1ba8              SUBS     r0,r5,r6              ;241
000074  4240              RSBS     r0,r0,#0              ;241
000076  f0000903          AND      r9,r0,#3              ;241
00007a  464a              MOV      r2,r9                 ;241
00007c  2100              MOVS     r1,#0                 ;241
00007e  4628              MOV      r0,r5                 ;241
000080  f7fffffe          BL       os_memset
000084  444d              ADD      r5,r5,r9              ;241
000086  bf00              NOP                            ;241
000088  6820              LDR      r0,[r4,#0]            ;242
00008a  f7fffffe          BL       wpabuf_free
00008e  1ba9              SUBS     r1,r5,r6              ;243
000090  4638              MOV      r0,r7                 ;243
000092  f7fffffe          BL       wpabuf_put
000096  6027              STR      r7,[r4,#0]            ;244
000098  2000              MOVS     r0,#0                 ;245
00009a  e7c6              B        |L6.42|
;;;247    
                          ENDP


                          AREA ||i.eap_ttls_avp_hdr||, CODE, READONLY, ALIGN=1

                  eap_ttls_avp_hdr PROC
;;;186    
;;;187    static u8 * eap_ttls_avp_hdr(u8 *avphdr, u32 avp_code, u32 vendor_id,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;188    			     int mandatory, size_t len)
;;;189    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  469c              MOV      r12,r3
00000a  9d07              LDR      r5,[sp,#0x1c]
;;;190    	struct ttls_avp_vendor *avp;
;;;191    	u8 flags;
;;;192    	size_t hdrlen;
;;;193    
;;;194    	avp = (struct ttls_avp_vendor *) avphdr;
00000c  4637              MOV      r7,r6
;;;195    	flags = mandatory ? AVP_FLAGS_MANDATORY : 0;
00000e  f1bc0f00          CMP      r12,#0
000012  d001              BEQ      |L7.24|
000014  2040              MOVS     r0,#0x40
000016  e000              B        |L7.26|
                  |L7.24|
000018  2000              MOVS     r0,#0
                  |L7.26|
00001a  b2c3              UXTB     r3,r0
;;;196    	if (vendor_id) {
00001c  b1b2              CBZ      r2,|L7.76|
;;;197    		flags |= AVP_FLAGS_VENDOR;
00001e  f0430380          ORR      r3,r3,#0x80
;;;198    		hdrlen = sizeof(*avp);
000022  210c              MOVS     r1,#0xc
;;;199    		avp->vendor_id = host_to_be32(vendor_id);
000024  f04f407f          MOV      r0,#0xff000000
000028  ea006002          AND      r0,r0,r2,LSL #24
00002c  f44f087f          MOV      r8,#0xff0000
000030  ea082802          AND      r8,r8,r2,LSL #8
000034  ea400008          ORR      r0,r0,r8
000038  f44f487f          MOV      r8,#0xff00
00003c  ea082812          AND      r8,r8,r2,LSR #8
000040  ea400008          ORR      r0,r0,r8
000044  ea406012          ORR      r0,r0,r2,LSR #24
000048  60b8              STR      r0,[r7,#8]
00004a  e000              B        |L7.78|
                  |L7.76|
;;;200    	} else {
;;;201    		hdrlen = sizeof(struct ttls_avp);
00004c  2108              MOVS     r1,#8
                  |L7.78|
;;;202    	}
;;;203    
;;;204    	avp->avp_code = host_to_be32(avp_code);
00004e  f04f407f          MOV      r0,#0xff000000
000052  ea006004          AND      r0,r0,r4,LSL #24
000056  f44f087f          MOV      r8,#0xff0000
00005a  ea082804          AND      r8,r8,r4,LSL #8
00005e  ea400008          ORR      r0,r0,r8
000062  f44f487f          MOV      r8,#0xff00
000066  ea082814          AND      r8,r8,r4,LSR #8
00006a  ea400008          ORR      r0,r0,r8
00006e  ea406014          ORR      r0,r0,r4,LSR #24
000072  6038              STR      r0,[r7,#0]
;;;205    	avp->avp_length = host_to_be32((flags << 24) | (hdrlen + len));
000074  1948              ADDS     r0,r1,r5
000076  ea406003          ORR      r0,r0,r3,LSL #24
00007a  f04f487f          MOV      r8,#0xff000000
00007e  ea086000          AND      r0,r8,r0,LSL #24
000082  eb010805          ADD      r8,r1,r5
000086  ea486803          ORR      r8,r8,r3,LSL #24
00008a  f44f097f          MOV      r9,#0xff0000
00008e  ea092808          AND      r8,r9,r8,LSL #8
000092  ea400008          ORR      r0,r0,r8
000096  eb010805          ADD      r8,r1,r5
00009a  ea486803          ORR      r8,r8,r3,LSL #24
00009e  f44f497f          MOV      r9,#0xff00
0000a2  ea092818          AND      r8,r9,r8,LSR #8
0000a6  ea400008          ORR      r0,r0,r8
0000aa  eb010805          ADD      r8,r1,r5
0000ae  ea486803          ORR      r8,r8,r3,LSL #24
0000b2  ea406018          ORR      r0,r0,r8,LSR #24
0000b6  6078              STR      r0,[r7,#4]
;;;206    
;;;207    	return avphdr + hdrlen;
0000b8  1870              ADDS     r0,r6,r1
;;;208    }
0000ba  e8bd83f0          POP      {r4-r9,pc}
;;;209    
                          ENDP


                          AREA ||i.eap_ttls_check_auth_status||, CODE, READONLY, ALIGN=2

                  eap_ttls_check_auth_status PROC
;;;1759   
;;;1760   static void eap_ttls_check_auth_status(struct eap_sm *sm, 
000000  b570              PUSH     {r4-r6,lr}
;;;1761   				       struct eap_ttls_data *data,
;;;1762   				       struct eap_method_ret *ret)
;;;1763   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
000006  4614              MOV      r4,r2
;;;1764   	if (data->ttls_version == 0 && ret->methodState == METHOD_DONE) {
000008  6b28              LDR      r0,[r5,#0x30]
00000a  b988              CBNZ     r0,|L8.48|
00000c  7920              LDRB     r0,[r4,#4]
00000e  2804              CMP      r0,#4
000010  d10e              BNE      |L8.48|
;;;1765   		ret->allowNotifications = FALSE;
000012  2000              MOVS     r0,#0
000014  60a0              STR      r0,[r4,#8]
;;;1766   		if (ret->decision == DECISION_UNCOND_SUCC ||
000016  7960              LDRB     r0,[r4,#5]
000018  2802              CMP      r0,#2
00001a  d002              BEQ      |L8.34|
;;;1767   		    ret->decision == DECISION_COND_SUCC) {
00001c  7960              LDRB     r0,[r4,#5]
00001e  2801              CMP      r0,#1
000020  d117              BNE      |L8.82|
                  |L8.34|
;;;1768   			wpa_printf(MSG_DEBUG, "EAP-TTLS: Authentication "
000022  a10c              ADR      r1,|L8.84|
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       wpa_printf
;;;1769   				   "completed successfully");
;;;1770   			data->phase2_success = 1;
00002a  2001              MOVS     r0,#1
00002c  6428              STR      r0,[r5,#0x40]
00002e  e010              B        |L8.82|
                  |L8.48|
;;;1771   #ifdef EAP_TNC
;;;1772   			if (!data->ready_for_tnc && !data->tnc_started) {
;;;1773   				/*
;;;1774   				 * TNC may be required as the next
;;;1775   				 * authentication method within the tunnel.
;;;1776   				 */
;;;1777   				ret->methodState = METHOD_MAY_CONT;
;;;1778   				data->ready_for_tnc = 1;
;;;1779   			}
;;;1780   #endif /* EAP_TNC */
;;;1781   		}
;;;1782   	} else if (data->ttls_version == 0 &&
000030  6b28              LDR      r0,[r5,#0x30]
000032  b970              CBNZ     r0,|L8.82|
;;;1783   		   ret->methodState == METHOD_MAY_CONT &&
000034  7920              LDRB     r0,[r4,#4]
000036  2803              CMP      r0,#3
000038  d10b              BNE      |L8.82|
;;;1784   		   (ret->decision == DECISION_UNCOND_SUCC ||
00003a  7960              LDRB     r0,[r4,#5]
00003c  2802              CMP      r0,#2
00003e  d002              BEQ      |L8.70|
;;;1785   		    ret->decision == DECISION_COND_SUCC)) {
000040  7960              LDRB     r0,[r4,#5]
000042  2801              CMP      r0,#1
000044  d105              BNE      |L8.82|
                  |L8.70|
;;;1786   			wpa_printf(MSG_DEBUG, "EAP-TTLS: Authentication "
000046  a10f              ADR      r1,|L8.132|
000048  2000              MOVS     r0,#0
00004a  f7fffffe          BL       wpa_printf
;;;1787   				   "completed successfully (MAY_CONT)");
;;;1788   			data->phase2_success = 1;
00004e  2001              MOVS     r0,#1
000050  6428              STR      r0,[r5,#0x40]
                  |L8.82|
;;;1789   	}
;;;1790   }
000052  bd70              POP      {r4-r6,pc}
;;;1791   
                          ENDP

                  |L8.84|
000054  4541502d          DCB      "EAP-TTLS: Authentication completed successfully",0
000058  54544c53
00005c  3a204175
000060  7468656e
000064  74696361
000068  74696f6e
00006c  20636f6d
000070  706c6574
000074  65642073
000078  75636365
00007c  73736675
000080  6c6c7900
                  |L8.132|
000084  4541502d          DCB      "EAP-TTLS: Authentication completed successfully (MAY_CO"
000088  54544c53
00008c  3a204175
000090  7468656e
000094  74696361
000098  74696f6e
00009c  20636f6d
0000a0  706c6574
0000a4  65642073
0000a8  75636365
0000ac  73736675
0000b0  6c6c7920
0000b4  284d4159
0000b8  5f434f  
0000bb  4e542900          DCB      "NT)",0
0000bf  00                DCB      0

                          AREA ||i.eap_ttls_decrypt||, CODE, READONLY, ALIGN=2

                  eap_ttls_decrypt PROC
;;;1581   
;;;1582   static int eap_ttls_decrypt(struct eap_sm *sm, struct eap_ttls_data *data,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1583   			    struct eap_method_ret *ret, u8 identifier,
;;;1584   			    const struct wpabuf *in_data,
;;;1585   			    struct wpabuf **out_data)
;;;1586   {
000004  b089              SUB      sp,sp,#0x24
000006  4681              MOV      r9,r0
000008  460c              MOV      r4,r1
00000a  4616              MOV      r6,r2
00000c  4698              MOV      r8,r3
00000e  e9dd5a12          LDRD     r5,r10,[sp,#0x48]
;;;1587   	struct wpabuf *in_decrypted = NULL;
000012  2000              MOVS     r0,#0
000014  9008              STR      r0,[sp,#0x20]
;;;1588   	int retval = 0;
000016  2700              MOVS     r7,#0
;;;1589   	struct ttls_parse_avp parse;
;;;1590   
;;;1591   	os_memset(&parse, 0, sizeof(parse));
000018  2210              MOVS     r2,#0x10
00001a  2100              MOVS     r1,#0
00001c  a804              ADD      r0,sp,#0x10
00001e  f7fffffe          BL       os_memset
;;;1592   
;;;1593   	wpa_printf(MSG_DEBUG, "EAP-TTLS: received %lu bytes encrypted data for"
000022  b11d              CBZ      r5,|L9.44|
;;;1594   		   " Phase 2",
;;;1595   		   in_data ? (unsigned long) wpabuf_len(in_data) : 0);
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       wpabuf_len
00002a  e000              B        |L9.46|
                  |L9.44|
00002c  2000              MOVS     r0,#0
                  |L9.46|
00002e  4683              MOV      r11,r0
000030  4602              MOV      r2,r0
000032  a13b              ADR      r1,|L9.288|
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       wpa_printf
;;;1596   
;;;1597   	if (data->pending_phase2_req) {
00003a  f8d40094          LDR      r0,[r4,#0x94]
00003e  b1f8              CBZ      r0,|L9.128|
;;;1598   		wpa_printf(MSG_DEBUG, "EAP-TTLS: Pending Phase 2 request - "
000040  4945              LDR      r1,|L9.344|
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       wpa_printf
;;;1599   			   "skip decryption and use old data");
;;;1600   		/* Clear TLS reassembly state. */
;;;1601   		eap_peer_tls_reset_input(&data->ssl);
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       eap_peer_tls_reset_input
;;;1602   
;;;1603   		in_decrypted = data->pending_phase2_req;
00004e  f8d40094          LDR      r0,[r4,#0x94]
000052  9008              STR      r0,[sp,#0x20]
;;;1604   		data->pending_phase2_req = NULL;
000054  2000              MOVS     r0,#0
000056  f8c40094          STR      r0,[r4,#0x94]
;;;1605   		if (wpabuf_len(in_decrypted) == 0) {
00005a  9808              LDR      r0,[sp,#0x20]
00005c  f7fffffe          BL       wpabuf_len
000060  b968              CBNZ     r0,|L9.126|
;;;1606   			wpabuf_free(in_decrypted);
000062  9808              LDR      r0,[sp,#0x20]
000064  f7fffffe          BL       wpabuf_free
;;;1607   			return eap_ttls_implicit_identity_request(
000068  4643              MOV      r3,r8
00006a  4632              MOV      r2,r6
00006c  4621              MOV      r1,r4
00006e  4648              MOV      r0,r9
000070  f8cda000          STR      r10,[sp,#0]
000074  f7fffffe          BL       eap_ttls_implicit_identity_request
                  |L9.120|
;;;1608   				sm, data, ret, identifier, out_data);
;;;1609   		}
;;;1610   		goto continue_req;
;;;1611   	}
;;;1612   
;;;1613   	if ((in_data == NULL || wpabuf_len(in_data) == 0) &&
;;;1614   	    data->phase2_start) {
;;;1615   		return eap_ttls_phase2_start(sm, data, ret, identifier,
;;;1616   					     out_data);
;;;1617   	}
;;;1618   
;;;1619   	if (in_data == NULL || wpabuf_len(in_data) == 0) {
;;;1620   		/* Received TLS ACK - requesting more fragments */
;;;1621   		return eap_peer_tls_encrypt(sm, &data->ssl, EAP_TYPE_TTLS,
;;;1622   					    data->ttls_version,
;;;1623   					    identifier, NULL, out_data);
;;;1624   	}
;;;1625   
;;;1626   	retval = eap_peer_tls_decrypt(sm, &data->ssl, in_data, &in_decrypted);
;;;1627   	if (retval)
;;;1628   		goto done;
;;;1629   
;;;1630   #if EAP_TTLS_VERSION > 0
;;;1631   	if (data->ttls_version > 0 &&
;;;1632   	    (in_decrypted == NULL || wpabuf_len(in_decrypted) == 0) &&
;;;1633   	    tls_connection_ia_final_phase_finished(sm->ssl_ctx,
;;;1634   						   data->ssl.conn)) {
;;;1635   		eap_ttls_final_phase_finished(sm, data, ret, identifier,
;;;1636   					      out_data);
;;;1637   		goto done;
;;;1638   	}
;;;1639   #endif /* EAP_TTLS_VERSION */
;;;1640   
;;;1641   continue_req:
;;;1642   	data->phase2_start = 0;
;;;1643   
;;;1644   	if (eap_ttls_parse_avps(in_decrypted, &parse) < 0) {
;;;1645   		retval = -1;
;;;1646   		goto done;
;;;1647   	}
;;;1648   
;;;1649   	retval = eap_ttls_process_decrypted(sm, data, ret, identifier,
;;;1650   					    &parse, in_decrypted, out_data);
;;;1651   
;;;1652   done:
;;;1653   	wpabuf_free(in_decrypted);
;;;1654   	os_free(parse.eapdata);
;;;1655   
;;;1656   	if (retval < 0) {
;;;1657   		ret->methodState = METHOD_DONE;
;;;1658   		ret->decision = DECISION_FAIL;
;;;1659   	}
;;;1660   
;;;1661   	return retval;
;;;1662   }
000078  b009              ADD      sp,sp,#0x24
00007a  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.126|
00007e  e02a              B        |L9.214|
                  |L9.128|
000080  b11d              CBZ      r5,|L9.138|
000082  4628              MOV      r0,r5                 ;1613
000084  f7fffffe          BL       wpabuf_len
000088  b950              CBNZ     r0,|L9.160|
                  |L9.138|
00008a  6c60              LDR      r0,[r4,#0x44]         ;1614
00008c  b140              CBZ      r0,|L9.160|
00008e  4643              MOV      r3,r8                 ;1615
000090  4632              MOV      r2,r6                 ;1615
000092  4621              MOV      r1,r4                 ;1615
000094  4648              MOV      r0,r9                 ;1615
000096  f8cda000          STR      r10,[sp,#0]           ;1615
00009a  f7fffffe          BL       eap_ttls_phase2_start
00009e  e7eb              B        |L9.120|
                  |L9.160|
0000a0  b11d              CBZ      r5,|L9.170|
0000a2  4628              MOV      r0,r5                 ;1619
0000a4  f7fffffe          BL       wpabuf_len
0000a8  b958              CBNZ     r0,|L9.194|
                  |L9.170|
0000aa  2200              MOVS     r2,#0                 ;1621
0000ac  e9cd2a01          STRD     r2,r10,[sp,#4]        ;1621
0000b0  f8cd8000          STR      r8,[sp,#0]            ;1621
0000b4  2215              MOVS     r2,#0x15              ;1621
0000b6  4621              MOV      r1,r4                 ;1621
0000b8  4648              MOV      r0,r9                 ;1621
0000ba  6b23              LDR      r3,[r4,#0x30]         ;1621
0000bc  f7fffffe          BL       eap_peer_tls_encrypt
0000c0  e7da              B        |L9.120|
                  |L9.194|
0000c2  ab08              ADD      r3,sp,#0x20           ;1626
0000c4  462a              MOV      r2,r5                 ;1626
0000c6  4621              MOV      r1,r4                 ;1626
0000c8  4648              MOV      r0,r9                 ;1626
0000ca  f7fffffe          BL       eap_peer_tls_decrypt
0000ce  4607              MOV      r7,r0                 ;1626
0000d0  b107              CBZ      r7,|L9.212|
0000d2  e017              B        |L9.260|
                  |L9.212|
0000d4  bf00              NOP                            ;1641
                  |L9.214|
0000d6  2000              MOVS     r0,#0                 ;1642
0000d8  6460              STR      r0,[r4,#0x44]         ;1642
0000da  a904              ADD      r1,sp,#0x10           ;1644
0000dc  9808              LDR      r0,[sp,#0x20]         ;1644
0000de  f7fffffe          BL       eap_ttls_parse_avps
0000e2  2800              CMP      r0,#0                 ;1644
0000e4  da02              BGE      |L9.236|
0000e6  f04f37ff          MOV      r7,#0xffffffff        ;1645
0000ea  e00b              B        |L9.260|
                  |L9.236|
0000ec  a904              ADD      r1,sp,#0x10           ;1649
0000ee  9a08              LDR      r2,[sp,#0x20]         ;1649
0000f0  4643              MOV      r3,r8                 ;1649
0000f2  e88d0406          STM      sp,{r1,r2,r10}        ;1649
0000f6  4632              MOV      r2,r6                 ;1649
0000f8  4621              MOV      r1,r4                 ;1649
0000fa  4648              MOV      r0,r9                 ;1649
0000fc  f7fffffe          BL       eap_ttls_process_decrypted
000100  4607              MOV      r7,r0                 ;1649
000102  bf00              NOP                            ;1652
                  |L9.260|
000104  9808              LDR      r0,[sp,#0x20]         ;1653
000106  f7fffffe          BL       wpabuf_free
00010a  9805              LDR      r0,[sp,#0x14]         ;1654
00010c  f7fffffe          BL       os_free
000110  2f00              CMP      r7,#0                 ;1656
000112  da03              BGE      |L9.284|
000114  2004              MOVS     r0,#4                 ;1657
000116  7130              STRB     r0,[r6,#4]            ;1657
000118  2000              MOVS     r0,#0                 ;1658
00011a  7170              STRB     r0,[r6,#5]            ;1658
                  |L9.284|
00011c  4638              MOV      r0,r7                 ;1661
00011e  e7ab              B        |L9.120|
;;;1663   
                          ENDP

                  |L9.288|
000120  4541502d          DCB      "EAP-TTLS: received %lu bytes encrypted data for Phase 2"
000124  54544c53
000128  3a207265
00012c  63656976
000130  65642025
000134  6c752062
000138  79746573
00013c  20656e63
000140  72797074
000144  65642064
000148  61746120
00014c  666f7220
000150  50686173
000154  652032  
000157  00                DCB      0
                  |L9.344|
                          DCD      ||.constdata||+0x30c

                          AREA ||i.eap_ttls_deinit||, CODE, READONLY, ALIGN=1

                  eap_ttls_deinit PROC
;;;171    
;;;172    static void eap_ttls_deinit(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;173    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;174    	struct eap_ttls_data *data = priv;
000006  462c              MOV      r4,r5
;;;175    	if (data == NULL)
000008  b904              CBNZ     r4,|L10.12|
                  |L10.10|
;;;176    		return;
;;;177    	eap_ttls_phase2_eap_deinit(sm, data);
;;;178    	os_free(data->phase2_eap_types);
;;;179    	if (data->ssl_initialized)
;;;180    		eap_peer_tls_ssl_deinit(sm, &data->ssl);
;;;181    	os_free(data->key_data);
;;;182    	wpabuf_free(data->pending_phase2_req);
;;;183    	os_free(data);
;;;184    }
00000a  bd70              POP      {r4-r6,pc}
                  |L10.12|
00000c  4621              MOV      r1,r4                 ;177
00000e  4630              MOV      r0,r6                 ;177
000010  f7fffffe          BL       eap_ttls_phase2_eap_deinit
000014  6d60              LDR      r0,[r4,#0x54]         ;178
000016  f7fffffe          BL       os_free
00001a  6ae0              LDR      r0,[r4,#0x2c]         ;179
00001c  b118              CBZ      r0,|L10.38|
00001e  4621              MOV      r1,r4                 ;180
000020  4630              MOV      r0,r6                 ;180
000022  f7fffffe          BL       eap_peer_tls_ssl_deinit
                  |L10.38|
000026  f8d40090          LDR      r0,[r4,#0x90]         ;181
00002a  f7fffffe          BL       os_free
00002e  f8d40094          LDR      r0,[r4,#0x94]         ;182
000032  f7fffffe          BL       wpabuf_free
000036  4620              MOV      r0,r4                 ;183
000038  f7fffffe          BL       os_free
00003c  bf00              NOP      
00003e  e7e4              B        |L10.10|
;;;185    
                          ENDP


                          AREA ||i.eap_ttls_deinit_for_reauth||, CODE, READONLY, ALIGN=1

                  eap_ttls_deinit_for_reauth PROC
;;;1860   
;;;1861   static void eap_ttls_deinit_for_reauth(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;1862   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1863   	struct eap_ttls_data *data = priv;
000006  4625              MOV      r5,r4
;;;1864   	wpabuf_free(data->pending_phase2_req);
000008  f8d50094          LDR      r0,[r5,#0x94]
00000c  f7fffffe          BL       wpabuf_free
;;;1865   	data->pending_phase2_req = NULL;
000010  2000              MOVS     r0,#0
000012  f8c50094          STR      r0,[r5,#0x94]
;;;1866   #ifdef EAP_TNC
;;;1867   	data->ready_for_tnc = 0;
;;;1868   	data->tnc_started = 0;
;;;1869   #endif /* EAP_TNC */
;;;1870   }
000016  bd70              POP      {r4-r6,pc}
;;;1871   
                          ENDP


                          AREA ||i.eap_ttls_encrypt_response||, CODE, READONLY, ALIGN=2

                  eap_ttls_encrypt_response PROC
;;;1245   
;;;1246   static int eap_ttls_encrypt_response(struct eap_sm *sm,
000000  e92d43fe          PUSH     {r1-r9,lr}
;;;1247   				     struct eap_ttls_data *data,
;;;1248   				     struct wpabuf *resp, u8 identifier,
;;;1249   				     struct wpabuf **out_data)
;;;1250   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8028          LDR      r8,[sp,#0x28]
;;;1251   	if (resp == NULL)
000010  b914              CBNZ     r4,|L12.24|
;;;1252   		return 0;
000012  2000              MOVS     r0,#0
                  |L12.20|
;;;1253   
;;;1254   	wpa_hexdump_buf_key(MSG_DEBUG, "EAP-TTLS: Encrypting Phase 2 data",
;;;1255   			    resp);
;;;1256   	if (eap_peer_tls_encrypt(sm, &data->ssl, EAP_TYPE_TTLS,
;;;1257   				 data->ttls_version, identifier,
;;;1258   				 resp, out_data)) {
;;;1259   		wpa_printf(MSG_INFO, "EAP-TTLS: Failed to encrypt a Phase 2 "
;;;1260   			   "frame");
;;;1261   		return -1;
;;;1262   	}
;;;1263   	wpabuf_free(resp);
;;;1264   
;;;1265   	return 0;
;;;1266   }
000014  e8bd83fe          POP      {r1-r9,pc}
                  |L12.24|
000018  4622              MOV      r2,r4                 ;1254
00001a  a10d              ADR      r1,|L12.80|
00001c  2000              MOVS     r0,#0                 ;1254
00001e  f7fffffe          BL       wpa_hexdump_buf_key
000022  e9cd4801          STRD     r4,r8,[sp,#4]         ;1256
000026  9600              STR      r6,[sp,#0]            ;1256
000028  2215              MOVS     r2,#0x15              ;1256
00002a  4629              MOV      r1,r5                 ;1256
00002c  4638              MOV      r0,r7                 ;1256
00002e  6b2b              LDR      r3,[r5,#0x30]         ;1256
000030  f7fffffe          BL       eap_peer_tls_encrypt
000034  b130              CBZ      r0,|L12.68|
000036  a10f              ADR      r1,|L12.116|
000038  2000              MOVS     r0,#0                 ;1259
00003a  f7fffffe          BL       wpa_printf
00003e  f04f30ff          MOV      r0,#0xffffffff        ;1261
000042  e7e7              B        |L12.20|
                  |L12.68|
000044  4620              MOV      r0,r4                 ;1263
000046  f7fffffe          BL       wpabuf_free
00004a  2000              MOVS     r0,#0                 ;1265
00004c  e7e2              B        |L12.20|
;;;1267   
                          ENDP

00004e  0000              DCW      0x0000
                  |L12.80|
000050  4541502d          DCB      "EAP-TTLS: Encrypting Phase 2 data",0
000054  54544c53
000058  3a20456e
00005c  63727970
000060  74696e67
000064  20506861
000068  73652032
00006c  20646174
000070  6100    
000072  00                DCB      0
000073  00                DCB      0
                  |L12.116|
000074  4541502d          DCB      "EAP-TTLS: Failed to encrypt a Phase 2 frame",0
000078  54544c53
00007c  3a204661
000080  696c6564
000084  20746f20
000088  656e6372
00008c  79707420
000090  61205068
000094  61736520
000098  32206672
00009c  616d6500

                          AREA ||i.eap_ttls_fake_identity_request||, CODE, READONLY, ALIGN=2

                  eap_ttls_fake_identity_request PROC
;;;1221   
;;;1222   static u8 * eap_ttls_fake_identity_request(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1223   {
;;;1224   	struct eap_hdr *hdr;
;;;1225   	u8 *buf;
;;;1226   
;;;1227   	wpa_printf(MSG_DEBUG, "EAP-TTLS: empty data in beginning of "
000002  490e              LDR      r1,|L13.60|
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       wpa_printf
;;;1228   		   "Phase 2 - use fake EAP-Request Identity");
;;;1229   	buf = os_malloc(sizeof(*hdr) + 1);
00000a  2005              MOVS     r0,#5
00000c  f7fffffe          BL       os_malloc
000010  4604              MOV      r4,r0
;;;1230   	if (buf == NULL) {
000012  b934              CBNZ     r4,|L13.34|
;;;1231   		wpa_printf(MSG_WARNING, "EAP-TTLS: failed to allocate "
000014  4909              LDR      r1,|L13.60|
000016  3150              ADDS     r1,r1,#0x50
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       wpa_printf
;;;1232   			   "memory for fake EAP-Identity Request");
;;;1233   		return NULL;
00001e  2000              MOVS     r0,#0
                  |L13.32|
;;;1234   	}
;;;1235   
;;;1236   	hdr = (struct eap_hdr *) buf;
;;;1237   	hdr->code = EAP_CODE_REQUEST;
;;;1238   	hdr->identifier = 0;
;;;1239   	hdr->length = host_to_be16(sizeof(*hdr) + 1);
;;;1240   	buf[sizeof(*hdr)] = EAP_TYPE_IDENTITY;
;;;1241   
;;;1242   	return buf;
;;;1243   }
000020  bd70              POP      {r4-r6,pc}
                  |L13.34|
000022  4625              MOV      r5,r4                 ;1236
000024  2001              MOVS     r0,#1                 ;1237
000026  7028              STRB     r0,[r5,#0]            ;1237
000028  2000              MOVS     r0,#0                 ;1238
00002a  7068              STRB     r0,[r5,#1]            ;1238
00002c  f44f60a0          MOV      r0,#0x500             ;1239
000030  8068              STRH     r0,[r5,#2]            ;1239
000032  2001              MOVS     r0,#1                 ;1240
000034  7120              STRB     r0,[r4,#4]            ;1240
000036  4620              MOV      r0,r4                 ;1242
000038  e7f2              B        |L13.32|
;;;1244   
                          ENDP

00003a  0000              DCW      0x0000
                  |L13.60|
                          DCD      ||.constdata||+0x124

                          AREA ||i.eap_ttls_getKey||, CODE, READONLY, ALIGN=1

                  eap_ttls_getKey PROC
;;;1942   
;;;1943   static u8 * eap_ttls_getKey(struct eap_sm *sm, void *priv, size_t *len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1944   {
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;1945   	struct eap_ttls_data *data = priv;
00000a  4625              MOV      r5,r4
;;;1946   	u8 *key;
;;;1947   
;;;1948   	if (data->key_data == NULL || !data->phase2_success)
00000c  f8d50090          LDR      r0,[r5,#0x90]
000010  b108              CBZ      r0,|L14.22|
000012  6c28              LDR      r0,[r5,#0x40]
000014  b910              CBNZ     r0,|L14.28|
                  |L14.22|
;;;1949   		return NULL;
000016  2000              MOVS     r0,#0
                  |L14.24|
;;;1950   
;;;1951   	key = os_malloc(EAP_TLS_KEY_LEN);
;;;1952   	if (key == NULL)
;;;1953   		return NULL;
;;;1954   
;;;1955   	*len = EAP_TLS_KEY_LEN;
;;;1956   	os_memcpy(key, data->key_data, EAP_TLS_KEY_LEN);
;;;1957   
;;;1958   	return key;
;;;1959   }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L14.28|
00001c  2040              MOVS     r0,#0x40              ;1951
00001e  f7fffffe          BL       os_malloc
000022  4606              MOV      r6,r0                 ;1951
000024  b90e              CBNZ     r6,|L14.42|
000026  2000              MOVS     r0,#0                 ;1953
000028  e7f6              B        |L14.24|
                  |L14.42|
00002a  2040              MOVS     r0,#0x40              ;1955
00002c  6038              STR      r0,[r7,#0]            ;1955
00002e  2240              MOVS     r2,#0x40              ;1956
000030  4630              MOV      r0,r6                 ;1956
000032  f8d51090          LDR      r1,[r5,#0x90]         ;1956
000036  f7fffffe          BL       os_memcpy
00003a  4630              MOV      r0,r6                 ;1958
00003c  e7ec              B        |L14.24|
;;;1960   
                          ENDP


                          AREA ||i.eap_ttls_get_status||, CODE, READONLY, ALIGN=2

                  eap_ttls_get_status PROC
;;;1892   
;;;1893   static int eap_ttls_get_status(struct eap_sm *sm, void *priv, char *buf,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1894   			       size_t buflen, int verbose)
;;;1895   {
000004  4682              MOV      r10,r0
000006  4689              MOV      r9,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
00000c  f8ddb028          LDR      r11,[sp,#0x28]
;;;1896   	struct eap_ttls_data *data = priv;
000010  46c8              MOV      r8,r9
;;;1897   	int len, ret;
;;;1898   
;;;1899   	len = eap_peer_tls_status(sm, &data->ssl, buf, buflen, verbose);
000012  462b              MOV      r3,r5
000014  4632              MOV      r2,r6
000016  4641              MOV      r1,r8
000018  4650              MOV      r0,r10
00001a  f8cdb000          STR      r11,[sp,#0]
00001e  f7fffffe          BL       eap_peer_tls_status
000022  4604              MOV      r4,r0
;;;1900   	ret = os_snprintf(buf + len, buflen - len,
000024  1b29              SUBS     r1,r5,r4
000026  1930              ADDS     r0,r6,r4
000028  a228              ADR      r2,|L15.204|
00002a  f8d83030          LDR      r3,[r8,#0x30]
00002e  f7fffffe          BL       os_snprintf
000032  4607              MOV      r7,r0
;;;1901   			  "EAP-TTLSv%d Phase2 method=",
;;;1902   			  data->ttls_version);
;;;1903   	if (ret < 0 || (size_t) ret >= buflen - len)
000034  2f00              CMP      r7,#0
000036  db02              BLT      |L15.62|
000038  1b28              SUBS     r0,r5,r4
00003a  42b8              CMP      r0,r7
00003c  d802              BHI      |L15.68|
                  |L15.62|
;;;1904   		return len;
00003e  4620              MOV      r0,r4
                  |L15.64|
;;;1905   	len += ret;
;;;1906   	switch (data->phase2_type) {
;;;1907   	case EAP_TTLS_PHASE2_EAP:
;;;1908   		ret = os_snprintf(buf + len, buflen - len, "EAP-%s\n",
;;;1909   				  data->phase2_method ?
;;;1910   				  data->phase2_method->name : "?");
;;;1911   		break;
;;;1912   	case EAP_TTLS_PHASE2_MSCHAPV2:
;;;1913   		ret = os_snprintf(buf + len, buflen - len, "MSCHAPV2\n");
;;;1914   		break;
;;;1915   	case EAP_TTLS_PHASE2_MSCHAP:
;;;1916   		ret = os_snprintf(buf + len, buflen - len, "MSCHAP\n");
;;;1917   		break;
;;;1918   	case EAP_TTLS_PHASE2_PAP:
;;;1919   		ret = os_snprintf(buf + len, buflen - len, "PAP\n");
;;;1920   		break;
;;;1921   	case EAP_TTLS_PHASE2_CHAP:
;;;1922   		ret = os_snprintf(buf + len, buflen - len, "CHAP\n");
;;;1923   		break;
;;;1924   	default:
;;;1925   		ret = 0;
;;;1926   		break;
;;;1927   	}
;;;1928   	if (ret < 0 || (size_t) ret >= buflen - len)
;;;1929   		return len;
;;;1930   	len += ret;
;;;1931   
;;;1932   	return len;
;;;1933   }
000040  e8bd8ff8          POP      {r3-r11,pc}
                  |L15.68|
000044  443c              ADD      r4,r4,r7              ;1905
000046  f8980048          LDRB     r0,[r8,#0x48]         ;1906
00004a  2805              CMP      r0,#5                 ;1906
00004c  d230              BCS      |L15.176|
00004e  e8dff000          TBB      [pc,r0]               ;1906
000052  0313              DCB      0x03,0x13
000054  1a212800          DCB      0x1a,0x21,0x28,0x00
000058  f8d82038          LDR      r2,[r8,#0x38]         ;1908
00005c  b11a              CBZ      r2,|L15.102|
00005e  f8d82038          LDR      r2,[r8,#0x38]         ;1910
000062  6892              LDR      r2,[r2,#8]            ;1910
000064  e000              B        |L15.104|
                  |L15.102|
000066  a220              ADR      r2,|L15.232|
                  |L15.104|
000068  4613              MOV      r3,r2                 ;1910
00006a  1b29              SUBS     r1,r5,r4              ;1910
00006c  1930              ADDS     r0,r6,r4              ;1910
00006e  a21f              ADR      r2,|L15.236|
000070  f7fffffe          BL       os_snprintf
000074  4607              MOV      r7,r0                 ;1910
000076  e01d              B        |L15.180|
000078  1b29              SUBS     r1,r5,r4              ;1913
00007a  1930              ADDS     r0,r6,r4              ;1913
00007c  a21d              ADR      r2,|L15.244|
00007e  f7fffffe          BL       os_snprintf
000082  4607              MOV      r7,r0                 ;1913
000084  e016              B        |L15.180|
000086  1b29              SUBS     r1,r5,r4              ;1916
000088  1930              ADDS     r0,r6,r4              ;1916
00008a  a21d              ADR      r2,|L15.256|
00008c  f7fffffe          BL       os_snprintf
000090  4607              MOV      r7,r0                 ;1916
000092  e00f              B        |L15.180|
000094  1b29              SUBS     r1,r5,r4              ;1919
000096  1930              ADDS     r0,r6,r4              ;1919
000098  a21b              ADR      r2,|L15.264|
00009a  f7fffffe          BL       os_snprintf
00009e  4607              MOV      r7,r0                 ;1919
0000a0  e008              B        |L15.180|
0000a2  1b29              SUBS     r1,r5,r4              ;1922
0000a4  1930              ADDS     r0,r6,r4              ;1922
0000a6  a21a              ADR      r2,|L15.272|
0000a8  f7fffffe          BL       os_snprintf
0000ac  4607              MOV      r7,r0                 ;1922
0000ae  e001              B        |L15.180|
                  |L15.176|
0000b0  2700              MOVS     r7,#0                 ;1925
0000b2  bf00              NOP                            ;1926
                  |L15.180|
0000b4  bf00              NOP                            ;1911
0000b6  2f00              CMP      r7,#0                 ;1928
0000b8  db02              BLT      |L15.192|
0000ba  1b28              SUBS     r0,r5,r4              ;1928
0000bc  42b8              CMP      r0,r7                 ;1928
0000be  d801              BHI      |L15.196|
                  |L15.192|
0000c0  4620              MOV      r0,r4                 ;1929
0000c2  e7bd              B        |L15.64|
                  |L15.196|
0000c4  443c              ADD      r4,r4,r7              ;1930
0000c6  4620              MOV      r0,r4                 ;1932
0000c8  e7ba              B        |L15.64|
;;;1934   
                          ENDP

0000ca  0000              DCW      0x0000
                  |L15.204|
0000cc  4541502d          DCB      "EAP-TTLSv%d Phase2 method=",0
0000d0  54544c53
0000d4  76256420
0000d8  50686173
0000dc  6532206d
0000e0  6574686f
0000e4  643d00  
0000e7  00                DCB      0
                  |L15.232|
0000e8  3f00              DCB      "?",0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L15.236|
0000ec  4541502d          DCB      "EAP-%s\n",0
0000f0  25730a00
                  |L15.244|
0000f4  4d534348          DCB      "MSCHAPV2\n",0
0000f8  41505632
0000fc  0a00    
0000fe  00                DCB      0
0000ff  00                DCB      0
                  |L15.256|
000100  4d534348          DCB      "MSCHAP\n",0
000104  41500a00
                  |L15.264|
000108  5041500a          DCB      "PAP\n",0
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
                  |L15.272|
000110  43484150          DCB      "CHAP\n",0
000114  0a00    
000116  00                DCB      0
000117  00                DCB      0

                          AREA ||i.eap_ttls_has_reauth_data||, CODE, READONLY, ALIGN=1

                  eap_ttls_has_reauth_data PROC
;;;1852   
;;;1853   static Boolean eap_ttls_has_reauth_data(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;1854   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1855   	struct eap_ttls_data *data = priv;
000006  4626              MOV      r6,r4
;;;1856   	return tls_connection_established(sm->ssl_ctx, data->ssl.conn) &&
000008  6831              LDR      r1,[r6,#0]
00000a  f8d50098          LDR      r0,[r5,#0x98]
00000e  f7fffffe          BL       tls_connection_established
000012  b118              CBZ      r0,|L16.28|
;;;1857   		data->phase2_success;
000014  6c30              LDR      r0,[r6,#0x40]
000016  b108              CBZ      r0,|L16.28|
000018  2001              MOVS     r0,#1                 ;1856
                  |L16.26|
;;;1858   }
00001a  bd70              POP      {r4-r6,pc}
                  |L16.28|
00001c  2000              MOVS     r0,#0                 ;1856
00001e  e7fc              B        |L16.26|
;;;1859   
                          ENDP


                          AREA ||i.eap_ttls_implicit_challenge||, CODE, READONLY, ALIGN=2

                  eap_ttls_implicit_challenge PROC
;;;358    
;;;359    static u8 * eap_ttls_implicit_challenge(struct eap_sm *sm,
000000  b570              PUSH     {r4-r6,lr}
;;;360    					struct eap_ttls_data *data, size_t len)
;;;361    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;362    #if EAP_TTLS_VERSION > 0
;;;363    	struct tls_keys keys;
;;;364    	u8 *challenge, *rnd;
;;;365    #endif /* EAP_TTLS_VERSION */
;;;366    
;;;367    	if (data->ttls_version == 0) {
000008  6b20              LDR      r0,[r4,#0x30]
00000a  b930              CBNZ     r0,|L17.26|
;;;368    		return eap_peer_tls_derive_key(sm, &data->ssl,
00000c  462b              MOV      r3,r5
00000e  a204              ADR      r2,|L17.32|
000010  4621              MOV      r1,r4
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       eap_peer_tls_derive_key
                  |L17.24|
;;;369    					       "ttls challenge", len);
;;;370    	}
;;;371    
;;;372    #if EAP_TTLS_VERSION > 0
;;;373    
;;;374    	os_memset(&keys, 0, sizeof(keys));
;;;375    	if (tls_connection_get_keys(sm->ssl_ctx, data->ssl.conn, &keys) ||
;;;376    	    keys.client_random == NULL || keys.server_random == NULL ||
;;;377    	    keys.inner_secret == NULL) {
;;;378    		wpa_printf(MSG_INFO, "EAP-TTLS: Could not get inner secret, "
;;;379    			   "client random, or server random to derive "
;;;380    			   "implicit challenge");
;;;381    		return NULL;
;;;382    	}
;;;383    
;;;384    	rnd = os_malloc(keys.client_random_len + keys.server_random_len);
;;;385    	challenge = os_malloc(len);
;;;386    	if (rnd == NULL || challenge == NULL) {
;;;387    		wpa_printf(MSG_INFO, "EAP-TTLS: No memory for implicit "
;;;388    			   "challenge derivation");
;;;389    		os_free(rnd);
;;;390    		os_free(challenge);
;;;391    		return NULL;
;;;392    	}
;;;393    	os_memcpy(rnd, keys.server_random, keys.server_random_len);
;;;394    	os_memcpy(rnd + keys.server_random_len, keys.client_random,
;;;395    		  keys.client_random_len);
;;;396    
;;;397    	if (tls_prf(keys.inner_secret, keys.inner_secret_len,
;;;398    		    "inner application challenge", rnd,
;;;399    		    keys.client_random_len + keys.server_random_len,
;;;400    		    challenge, len)) {
;;;401    		wpa_printf(MSG_DEBUG, "EAP-TTLS: Failed to derive implicit "
;;;402    			   "challenge");
;;;403    		os_free(rnd);
;;;404    		os_free(challenge);
;;;405    		return NULL;
;;;406    	}
;;;407    
;;;408    	os_free(rnd);
;;;409    
;;;410    	wpa_hexdump_key(MSG_DEBUG, "EAP-TTLS: Derived implicit challenge",
;;;411    			challenge, len);
;;;412    
;;;413    	return challenge;
;;;414    
;;;415    #else /* EAP_TTLS_VERSION */
;;;416    
;;;417    	return NULL;
;;;418    
;;;419    #endif /* EAP_TTLS_VERSION */
;;;420    }
000018  bd70              POP      {r4-r6,pc}
                  |L17.26|
00001a  2000              MOVS     r0,#0                 ;417
00001c  e7fc              B        |L17.24|
;;;421    
                          ENDP

00001e  0000              DCW      0x0000
                  |L17.32|
000020  74746c73          DCB      "ttls challenge",0
000024  20636861
000028  6c6c656e
00002c  676500  
00002f  00                DCB      0

                          AREA ||i.eap_ttls_implicit_identity_request||, CODE, READONLY, ALIGN=2

                  eap_ttls_implicit_identity_request PROC
;;;1513   
;;;1514   static int eap_ttls_implicit_identity_request(struct eap_sm *sm,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;1515   					      struct eap_ttls_data *data,
;;;1516   					      struct eap_method_ret *ret,
;;;1517   					      u8 identifier,
;;;1518   					      struct wpabuf **out_data)
;;;1519   {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  4699              MOV      r9,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;1520   	int retval = 0;
000010  2600              MOVS     r6,#0
;;;1521   	struct eap_hdr *hdr;
;;;1522   	struct wpabuf *resp;
;;;1523   
;;;1524   	hdr = (struct eap_hdr *) eap_ttls_fake_identity_request();
000012  f7fffffe          BL       eap_ttls_fake_identity_request
000016  4605              MOV      r5,r0
;;;1525   	if (hdr == NULL) {
000018  b935              CBNZ     r5,|L18.40|
;;;1526   		ret->methodState = METHOD_DONE;
00001a  2004              MOVS     r0,#4
00001c  7120              STRB     r0,[r4,#4]
;;;1527   		ret->decision = DECISION_FAIL;
00001e  2000              MOVS     r0,#0
000020  7160              STRB     r0,[r4,#5]
;;;1528   		return -1;
000022  1e40              SUBS     r0,r0,#1
                  |L18.36|
;;;1529   	}
;;;1530   
;;;1531   	resp = NULL;
;;;1532   	if (eap_ttls_phase2_request(sm, data, ret, hdr, &resp)) {
;;;1533   		wpa_printf(MSG_INFO, "EAP-TTLS: Phase2 Request "
;;;1534   			   "processing failed");
;;;1535   		retval = -1;
;;;1536   	} else {
;;;1537   		retval = eap_ttls_encrypt_response(sm, data, resp, identifier,
;;;1538   						   out_data);
;;;1539   	}
;;;1540   
;;;1541   	os_free(hdr);
;;;1542   
;;;1543   	if (retval < 0) {
;;;1544   		ret->methodState = METHOD_DONE;
;;;1545   		ret->decision = DECISION_FAIL;
;;;1546   	}
;;;1547   
;;;1548   	return retval;
;;;1549   }
000024  e8bd87fc          POP      {r2-r10,pc}
                  |L18.40|
000028  2000              MOVS     r0,#0                 ;1531
00002a  9001              STR      r0,[sp,#4]            ;1531
00002c  ab01              ADD      r3,sp,#4              ;1532
00002e  9300              STR      r3,[sp,#0]            ;1532
000030  462b              MOV      r3,r5                 ;1532
000032  4622              MOV      r2,r4                 ;1532
000034  4641              MOV      r1,r8                 ;1532
000036  4638              MOV      r0,r7                 ;1532
000038  f7fffffe          BL       eap_ttls_phase2_request
00003c  b130              CBZ      r0,|L18.76|
00003e  a10d              ADR      r1,|L18.116|
000040  2000              MOVS     r0,#0                 ;1533
000042  f7fffffe          BL       wpa_printf
000046  f04f36ff          MOV      r6,#0xffffffff        ;1535
00004a  e008              B        |L18.94|
                  |L18.76|
00004c  464b              MOV      r3,r9                 ;1537
00004e  f8cda000          STR      r10,[sp,#0]           ;1537
000052  4641              MOV      r1,r8                 ;1537
000054  4638              MOV      r0,r7                 ;1537
000056  9a01              LDR      r2,[sp,#4]            ;1537
000058  f7fffffe          BL       eap_ttls_encrypt_response
00005c  4606              MOV      r6,r0                 ;1537
                  |L18.94|
00005e  4628              MOV      r0,r5                 ;1541
000060  f7fffffe          BL       os_free
000064  2e00              CMP      r6,#0                 ;1543
000066  da03              BGE      |L18.112|
000068  2004              MOVS     r0,#4                 ;1544
00006a  7120              STRB     r0,[r4,#4]            ;1544
00006c  2000              MOVS     r0,#0                 ;1545
00006e  7160              STRB     r0,[r4,#5]            ;1545
                  |L18.112|
000070  4630              MOV      r0,r6                 ;1548
000072  e7d7              B        |L18.36|
;;;1550   
                          ENDP

                  |L18.116|
000074  4541502d          DCB      "EAP-TTLS: Phase2 Request processing failed",0
000078  54544c53
00007c  3a205068
000080  61736532
000084  20526571
000088  75657374
00008c  2070726f
000090  63657373
000094  696e6720
000098  6661696c
00009c  656400  
00009f  00                DCB      0

                          AREA ||i.eap_ttls_init||, CODE, READONLY, ALIGN=2

                  eap_ttls_init PROC
;;;83     
;;;84     static void * eap_ttls_init(struct eap_sm *sm)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;85     {
000004  4607              MOV      r7,r0
;;;86     	struct eap_ttls_data *data;
;;;87     	struct eap_peer_config *config = eap_get_config(sm);
000006  4638              MOV      r0,r7
000008  f7fffffe          BL       eap_get_config
00000c  4605              MOV      r5,r0
;;;88     	char *selected;
;;;89     
;;;90     	data = os_zalloc(sizeof(*data));
00000e  2098              MOVS     r0,#0x98
000010  f7fffffe          BL       os_zalloc
000014  4604              MOV      r4,r0
;;;91     	if (data == NULL)
000016  b914              CBNZ     r4,|L19.30|
;;;92     		return NULL;
000018  2000              MOVS     r0,#0
                  |L19.26|
;;;93     	data->ttls_version = EAP_TTLS_VERSION;
;;;94     	data->force_ttls_version = -1;
;;;95     	selected = "EAP";
;;;96     	data->phase2_type = EAP_TTLS_PHASE2_EAP;
;;;97     
;;;98     #if EAP_TTLS_VERSION > 0
;;;99     	if (config && config->phase1) {
;;;100    		const char *pos = os_strstr(config->phase1, "ttlsver=");
;;;101    		if (pos) {
;;;102    			data->force_ttls_version = atoi(pos + 8);
;;;103    			data->ttls_version = data->force_ttls_version;
;;;104    			wpa_printf(MSG_DEBUG, "EAP-TTLS: Forced TTLS version "
;;;105    				   "%d", data->force_ttls_version);
;;;106    		}
;;;107    	}
;;;108    #endif /* EAP_TTLS_VERSION */
;;;109    
;;;110    	if (config && config->phase2) {
;;;111    		if (os_strstr(config->phase2, "autheap=")) {
;;;112    			selected = "EAP";
;;;113    			data->phase2_type = EAP_TTLS_PHASE2_EAP;
;;;114    		} else if (os_strstr(config->phase2, "auth=MSCHAPV2")) {
;;;115    			selected = "MSCHAPV2";
;;;116    			data->phase2_type = EAP_TTLS_PHASE2_MSCHAPV2;
;;;117    		} else if (os_strstr(config->phase2, "auth=MSCHAP")) {
;;;118    			selected = "MSCHAP";
;;;119    			data->phase2_type = EAP_TTLS_PHASE2_MSCHAP;
;;;120    		} else if (os_strstr(config->phase2, "auth=PAP")) {
;;;121    			selected = "PAP";
;;;122    			data->phase2_type = EAP_TTLS_PHASE2_PAP;
;;;123    		} else if (os_strstr(config->phase2, "auth=CHAP")) {
;;;124    			selected = "CHAP";
;;;125    			data->phase2_type = EAP_TTLS_PHASE2_CHAP;
;;;126    		}
;;;127    	}
;;;128    	wpa_printf(MSG_DEBUG, "EAP-TTLS: Phase2 type: %s", selected);
;;;129    
;;;130    	if (data->phase2_type == EAP_TTLS_PHASE2_EAP) {
;;;131    		if (eap_peer_select_phase2_methods(config, "autheap=",
;;;132    						   &data->phase2_eap_types,
;;;133    						   &data->num_phase2_eap_types)
;;;134    		    < 0) {
;;;135    			eap_ttls_deinit(sm, data);
;;;136    			return NULL;
;;;137    		}
;;;138    
;;;139    		data->phase2_eap_type.vendor = EAP_VENDOR_IETF;
;;;140    		data->phase2_eap_type.method = EAP_TYPE_NONE;
;;;141    	}
;;;142    
;;;143    #if EAP_TTLS_VERSION > 0
;;;144    	if (!(tls_capabilities(sm->ssl_ctx) & TLS_CAPABILITY_IA) &&
;;;145    	    data->ttls_version > 0) {
;;;146    		if (data->force_ttls_version > 0) {
;;;147    			wpa_printf(MSG_INFO, "EAP-TTLS: Forced TTLSv%d and "
;;;148    				   "TLS library does not support TLS/IA.",
;;;149    				   data->force_ttls_version);
;;;150    			eap_ttls_deinit(sm, data);
;;;151    			return NULL;
;;;152    		}
;;;153    		data->ttls_version = 0;
;;;154    	}
;;;155    #endif /* EAP_TTLS_VERSION */
;;;156    
;;;157    	return data;
;;;158    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L19.30|
00001e  2000              MOVS     r0,#0                 ;93
000020  6320              STR      r0,[r4,#0x30]         ;93
000022  1e40              SUBS     r0,r0,#1              ;94
000024  6360              STR      r0,[r4,#0x34]         ;94
000026  a62a              ADR      r6,|L19.208|
000028  2000              MOVS     r0,#0                 ;96
00002a  f8840048          STRB     r0,[r4,#0x48]         ;96
00002e  b345              CBZ      r5,|L19.130|
000030  6e28              LDR      r0,[r5,#0x60]         ;110
000032  b330              CBZ      r0,|L19.130|
000034  a127              ADR      r1,|L19.212|
000036  6e28              LDR      r0,[r5,#0x60]         ;111
000038  f7fffffe          BL       os_strstr
00003c  b120              CBZ      r0,|L19.72|
00003e  a624              ADR      r6,|L19.208|
000040  2000              MOVS     r0,#0                 ;113
000042  f8840048          STRB     r0,[r4,#0x48]         ;113
000046  e026              B        |L19.150|
                  |L19.72|
000048  a125              ADR      r1,|L19.224|
00004a  6e28              LDR      r0,[r5,#0x60]         ;114
00004c  f7fffffe          BL       os_strstr
000050  b120              CBZ      r0,|L19.92|
000052  a627              ADR      r6,|L19.240|
000054  2001              MOVS     r0,#1                 ;116
000056  f8840048          STRB     r0,[r4,#0x48]         ;116
00005a  e01c              B        |L19.150|
                  |L19.92|
00005c  a127              ADR      r1,|L19.252|
00005e  6e28              LDR      r0,[r5,#0x60]         ;117
000060  f7fffffe          BL       os_strstr
000064  b120              CBZ      r0,|L19.112|
000066  a628              ADR      r6,|L19.264|
000068  2002              MOVS     r0,#2                 ;119
00006a  f8840048          STRB     r0,[r4,#0x48]         ;119
00006e  e012              B        |L19.150|
                  |L19.112|
000070  a127              ADR      r1,|L19.272|
000072  6e28              LDR      r0,[r5,#0x60]         ;120
000074  f7fffffe          BL       os_strstr
000078  b120              CBZ      r0,|L19.132|
00007a  a628              ADR      r6,|L19.284|
00007c  2003              MOVS     r0,#3                 ;122
00007e  f8840048          STRB     r0,[r4,#0x48]         ;122
                  |L19.130|
000082  e008              B        |L19.150|
                  |L19.132|
000084  a126              ADR      r1,|L19.288|
000086  6e28              LDR      r0,[r5,#0x60]         ;123
000088  f7fffffe          BL       os_strstr
00008c  b118              CBZ      r0,|L19.150|
00008e  a627              ADR      r6,|L19.300|
000090  2004              MOVS     r0,#4                 ;125
000092  f8840048          STRB     r0,[r4,#0x48]         ;125
                  |L19.150|
000096  4632              MOV      r2,r6                 ;128
000098  a126              ADR      r1,|L19.308|
00009a  2000              MOVS     r0,#0                 ;128
00009c  f7fffffe          BL       wpa_printf
0000a0  f8940048          LDRB     r0,[r4,#0x48]         ;130
0000a4  b990              CBNZ     r0,|L19.204|
0000a6  f1040358          ADD      r3,r4,#0x58           ;131
0000aa  1f1a              SUBS     r2,r3,#4              ;131
0000ac  a109              ADR      r1,|L19.212|
0000ae  4628              MOV      r0,r5                 ;131
0000b0  f7fffffe          BL       eap_peer_select_phase2_methods
0000b4  2800              CMP      r0,#0                 ;131
0000b6  da05              BGE      |L19.196|
0000b8  4621              MOV      r1,r4                 ;135
0000ba  4638              MOV      r0,r7                 ;135
0000bc  f7fffffe          BL       eap_ttls_deinit
0000c0  2000              MOVS     r0,#0                 ;136
0000c2  e7aa              B        |L19.26|
                  |L19.196|
0000c4  2000              MOVS     r0,#0                 ;139
0000c6  64e0              STR      r0,[r4,#0x4c]         ;139
0000c8  2100              MOVS     r1,#0                 ;140
0000ca  6521              STR      r1,[r4,#0x50]         ;140
                  |L19.204|
0000cc  4620              MOV      r0,r4                 ;157
0000ce  e7a4              B        |L19.26|
;;;159    
                          ENDP

                  |L19.208|
0000d0  45415000          DCB      "EAP",0
                  |L19.212|
0000d4  61757468          DCB      "autheap=",0
0000d8  6561703d
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L19.224|
0000e0  61757468          DCB      "auth=MSCHAPV2",0
0000e4  3d4d5343
0000e8  48415056
0000ec  3200    
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L19.240|
0000f0  4d534348          DCB      "MSCHAPV2",0
0000f4  41505632
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L19.252|
0000fc  61757468          DCB      "auth=MSCHAP",0
000100  3d4d5343
000104  48415000
                  |L19.264|
000108  4d534348          DCB      "MSCHAP",0
00010c  415000  
00010f  00                DCB      0
                  |L19.272|
000110  61757468          DCB      "auth=PAP",0
000114  3d504150
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L19.284|
00011c  50415000          DCB      "PAP",0
                  |L19.288|
000120  61757468          DCB      "auth=CHAP",0
000124  3d434841
000128  5000    
00012a  00                DCB      0
00012b  00                DCB      0
                  |L19.300|
00012c  43484150          DCB      "CHAP",0
000130  00      
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
                  |L19.308|
000134  4541502d          DCB      "EAP-TTLS: Phase2 type: %s",0
000138  54544c53
00013c  3a205068
000140  61736532
000144  20747970
000148  653a2025
00014c  7300    
00014e  00                DCB      0
00014f  00                DCB      0

                          AREA ||i.eap_ttls_init_for_reauth||, CODE, READONLY, ALIGN=1

                  eap_ttls_init_for_reauth PROC
;;;1872   
;;;1873   static void * eap_ttls_init_for_reauth(struct eap_sm *sm, void *priv)
000000  b570              PUSH     {r4-r6,lr}
;;;1874   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;1875   	struct eap_ttls_data *data = priv;
000006  462c              MOV      r4,r5
;;;1876   	os_free(data->key_data);
000008  f8d40090          LDR      r0,[r4,#0x90]
00000c  f7fffffe          BL       os_free
;;;1877   	data->key_data = NULL;
000010  2000              MOVS     r0,#0
000012  f8c40090          STR      r0,[r4,#0x90]
;;;1878   	if (eap_peer_tls_reauth_init(sm, &data->ssl)) {
000016  4621              MOV      r1,r4
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       eap_peer_tls_reauth_init
00001e  b120              CBZ      r0,|L20.42|
;;;1879   		os_free(data);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       os_free
;;;1880   		return NULL;
000026  2000              MOVS     r0,#0
                  |L20.40|
;;;1881   	}
;;;1882   	if (data->phase2_priv && data->phase2_method &&
;;;1883   	    data->phase2_method->init_for_reauth)
;;;1884   		data->phase2_method->init_for_reauth(sm, data->phase2_priv);
;;;1885   	data->phase2_start = 0;
;;;1886   	data->phase2_success = 0;
;;;1887   	data->resuming = 1;
;;;1888   	data->reauth = 1;
;;;1889   	return priv;
;;;1890   }
000028  bd70              POP      {r4-r6,pc}
                  |L20.42|
00002a  6be0              LDR      r0,[r4,#0x3c]         ;1882
00002c  b148              CBZ      r0,|L20.66|
00002e  6ba0              LDR      r0,[r4,#0x38]         ;1882
000030  b138              CBZ      r0,|L20.66|
000032  6ba0              LDR      r0,[r4,#0x38]         ;1883
000034  6ac0              LDR      r0,[r0,#0x2c]         ;1883
000036  b120              CBZ      r0,|L20.66|
000038  e9d4010e          LDRD     r0,r1,[r4,#0x38]      ;1884
00003c  6ac2              LDR      r2,[r0,#0x2c]         ;1884
00003e  4630              MOV      r0,r6                 ;1884
000040  4790              BLX      r2                    ;1884
                  |L20.66|
000042  2000              MOVS     r0,#0                 ;1885
000044  6460              STR      r0,[r4,#0x44]         ;1885
000046  6420              STR      r0,[r4,#0x40]         ;1886
000048  2001              MOVS     r0,#1                 ;1887
00004a  f8c40088          STR      r0,[r4,#0x88]         ;1887
00004e  f8c4008c          STR      r0,[r4,#0x8c]         ;1888
000052  4628              MOV      r0,r5                 ;1889
000054  e7e8              B        |L20.40|
;;;1891   
                          ENDP


                          AREA ||i.eap_ttls_isKeyAvailable||, CODE, READONLY, ALIGN=1

                  eap_ttls_isKeyAvailable PROC
;;;1935   
;;;1936   static Boolean eap_ttls_isKeyAvailable(struct eap_sm *sm, void *priv)
000000  4603              MOV      r3,r0
;;;1937   {
;;;1938   	struct eap_ttls_data *data = priv;
000002  460a              MOV      r2,r1
;;;1939   	return data->key_data != NULL && data->phase2_success;
000004  f8d20090          LDR      r0,[r2,#0x90]
000008  b118              CBZ      r0,|L21.18|
00000a  6c10              LDR      r0,[r2,#0x40]
00000c  b108              CBZ      r0,|L21.18|
00000e  2001              MOVS     r0,#1
                  |L21.16|
;;;1940   }
000010  4770              BX       lr
                  |L21.18|
000012  2000              MOVS     r0,#0                 ;1939
000014  e7fc              B        |L21.16|
;;;1941   
                          ENDP


                          AREA ||i.eap_ttls_parse_attr_eap||, CODE, READONLY, ALIGN=2

                  eap_ttls_parse_attr_eap PROC
;;;1067   
;;;1068   static int eap_ttls_parse_attr_eap(const u8 *dpos, size_t dlen,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1069   				   struct ttls_parse_avp *parse)
;;;1070   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;1071   	wpa_printf(MSG_DEBUG, "EAP-TTLS: AVP - EAP Message");
00000a  a11b              ADR      r1,|L22.120|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       wpa_printf
;;;1072   	if (parse->eapdata == NULL) {
000012  6860              LDR      r0,[r4,#4]
000014  b9a0              CBNZ     r0,|L22.64|
;;;1073   		parse->eapdata = os_malloc(dlen);
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       os_malloc
00001c  6060              STR      r0,[r4,#4]
;;;1074   		if (parse->eapdata == NULL) {
00001e  6860              LDR      r0,[r4,#4]
000020  b938              CBNZ     r0,|L22.50|
;;;1075   			wpa_printf(MSG_WARNING, "EAP-TTLS: Failed to allocate "
000022  a11c              ADR      r1,|L22.148|
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       wpa_printf
;;;1076   				   "memory for Phase 2 EAP data");
;;;1077   			return -1;
00002a  f04f30ff          MOV      r0,#0xffffffff
                  |L22.46|
;;;1078   		}
;;;1079   		os_memcpy(parse->eapdata, dpos, dlen);
;;;1080   		parse->eap_len = dlen;
;;;1081   	} else {
;;;1082   		u8 *neweap = os_realloc(parse->eapdata, parse->eap_len + dlen);
;;;1083   		if (neweap == NULL) {
;;;1084   			wpa_printf(MSG_WARNING, "EAP-TTLS: Failed to allocate "
;;;1085   				   "memory for Phase 2 EAP data");
;;;1086   			return -1;
;;;1087   		}
;;;1088   		os_memcpy(neweap + parse->eap_len, dpos, dlen);
;;;1089   		parse->eapdata = neweap;
;;;1090   		parse->eap_len += dlen;
;;;1091   	}
;;;1092   
;;;1093   	return 0;
;;;1094   }
00002e  e8bd81f0          POP      {r4-r8,pc}
                  |L22.50|
000032  462a              MOV      r2,r5                 ;1079
000034  4639              MOV      r1,r7                 ;1079
000036  6860              LDR      r0,[r4,#4]            ;1079
000038  f7fffffe          BL       os_memcpy
00003c  60a5              STR      r5,[r4,#8]            ;1080
00003e  e018              B        |L22.114|
                  |L22.64|
000040  68a2              LDR      r2,[r4,#8]            ;1082
000042  1951              ADDS     r1,r2,r5              ;1082
000044  6860              LDR      r0,[r4,#4]            ;1082
000046  f7fffffe          BL       os_realloc
00004a  4606              MOV      r6,r0                 ;1082
00004c  b936              CBNZ     r6,|L22.92|
00004e  a111              ADR      r1,|L22.148|
000050  2000              MOVS     r0,#0                 ;1084
000052  f7fffffe          BL       wpa_printf
000056  f04f30ff          MOV      r0,#0xffffffff        ;1086
00005a  e7e8              B        |L22.46|
                  |L22.92|
00005c  68a1              LDR      r1,[r4,#8]            ;1088
00005e  1988              ADDS     r0,r1,r6              ;1088
000060  462a              MOV      r2,r5                 ;1088
000062  4639              MOV      r1,r7                 ;1088
000064  f7fffffe          BL       os_memcpy
000068  6066              STR      r6,[r4,#4]            ;1089
00006a  68a0              LDR      r0,[r4,#8]            ;1090
00006c  4428              ADD      r0,r0,r5              ;1090
00006e  60a0              STR      r0,[r4,#8]            ;1090
000070  bf00              NOP                            ;1091
                  |L22.114|
000072  2000              MOVS     r0,#0                 ;1093
000074  e7db              B        |L22.46|
;;;1095   
                          ENDP

000076  0000              DCW      0x0000
                  |L22.120|
000078  4541502d          DCB      "EAP-TTLS: AVP - EAP Message",0
00007c  54544c53
000080  3a204156
000084  50202d20
000088  45415020
00008c  4d657373
000090  61676500
                  |L22.148|
000094  4541502d          DCB      "EAP-TTLS: Failed to allocate memory for Phase 2 EAP dat"
000098  54544c53
00009c  3a204661
0000a0  696c6564
0000a4  20746f20
0000a8  616c6c6f
0000ac  63617465
0000b0  206d656d
0000b4  6f727920
0000b8  666f7220
0000bc  50686173
0000c0  65203220
0000c4  45415020
0000c8  646174  
0000cb  6100              DCB      "a",0
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0

                          AREA ||i.eap_ttls_parse_avp||, CODE, READONLY, ALIGN=2

                  eap_ttls_parse_avp PROC
;;;1096   
;;;1097   static int eap_ttls_parse_avp(u8 *pos, size_t left,
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1098   			      struct ttls_parse_avp *parse)
;;;1099   {
000004  b082              SUB      sp,sp,#8
000006  4604              MOV      r4,r0
000008  4693              MOV      r11,r2
;;;1100   	struct ttls_avp *avp;
;;;1101   	u32 avp_code, avp_length, vendor_id = 0;
00000a  f04f0900          MOV      r9,#0
;;;1102   	u8 avp_flags, *dpos;
;;;1103   	size_t dlen;
;;;1104   
;;;1105   	avp = (struct ttls_avp *) pos;
00000e  4625              MOV      r5,r4
;;;1106   	avp_code = be_to_host32(avp->avp_code);
000010  f04f417f          MOV      r1,#0xff000000
000014  6828              LDR      r0,[r5,#0]
000016  ea016000          AND      r0,r1,r0,LSL #24
00001a  f44f027f          MOV      r2,#0xff0000
00001e  6829              LDR      r1,[r5,#0]
000020  ea022101          AND      r1,r2,r1,LSL #8
000024  4308              ORRS     r0,r0,r1
000026  1212              ASRS     r2,r2,#8
000028  6829              LDR      r1,[r5,#0]
00002a  ea022111          AND      r1,r2,r1,LSR #8
00002e  4308              ORRS     r0,r0,r1
000030  6829              LDR      r1,[r5,#0]
000032  ea406a11          ORR      r10,r0,r1,LSR #24
;;;1107   	avp_length = be_to_host32(avp->avp_length);
000036  0411              LSLS     r1,r2,#16
000038  6868              LDR      r0,[r5,#4]
00003a  ea016000          AND      r0,r1,r0,LSL #24
00003e  0212              LSLS     r2,r2,#8
000040  6869              LDR      r1,[r5,#4]
000042  ea022101          AND      r1,r2,r1,LSL #8
000046  4308              ORRS     r0,r0,r1
000048  1212              ASRS     r2,r2,#8
00004a  6869              LDR      r1,[r5,#4]
00004c  ea022111          AND      r1,r2,r1,LSR #8
000050  4308              ORRS     r0,r0,r1
000052  6869              LDR      r1,[r5,#4]
000054  ea406711          ORR      r7,r0,r1,LSR #24
;;;1108   	avp_flags = (avp_length >> 24) & 0xff;
000058  0e38              LSRS     r0,r7,#24
00005a  9001              STR      r0,[sp,#4]
;;;1109   	avp_length &= 0xffffff;
00005c  f027477f          BIC      r7,r7,#0xff000000
;;;1110   	wpa_printf(MSG_DEBUG, "EAP-TTLS: AVP: code=%d flags=0x%02x "
000060  9700              STR      r7,[sp,#0]
000062  4652              MOV      r2,r10
000064  a152              ADR      r1,|L23.432|
000066  2000              MOVS     r0,#0
000068  9b01              LDR      r3,[sp,#4]
00006a  f7fffffe          BL       wpa_printf
;;;1111   		   "length=%d", (int) avp_code, avp_flags,
;;;1112   		   (int) avp_length);
;;;1113   
;;;1114   	if (avp_length > left) {
00006e  9803              LDR      r0,[sp,#0xc]
000070  4287              CMP      r7,r0
000072  d90a              BLS      |L23.138|
;;;1115   		wpa_printf(MSG_WARNING, "EAP-TTLS: AVP overflow "
000074  463a              MOV      r2,r7
000076  a15a              ADR      r1,|L23.480|
000078  2000              MOVS     r0,#0
00007a  9b03              LDR      r3,[sp,#0xc]
00007c  f7fffffe          BL       wpa_printf
;;;1116   			   "(len=%d, left=%lu) - dropped",
;;;1117   			   (int) avp_length, (unsigned long) left);
;;;1118   		return -1;
000080  f04f30ff          MOV      r0,#0xffffffff
                  |L23.132|
;;;1119   	}
;;;1120   
;;;1121   	if (avp_length < sizeof(*avp)) {
;;;1122   		wpa_printf(MSG_WARNING, "EAP-TTLS: Invalid AVP length %d",
;;;1123   			   avp_length);
;;;1124   		return -1;
;;;1125   	}
;;;1126   
;;;1127   	dpos = (u8 *) (avp + 1);
;;;1128   	dlen = avp_length - sizeof(*avp);
;;;1129   	if (avp_flags & AVP_FLAGS_VENDOR) {
;;;1130   		if (dlen < 4) {
;;;1131   			wpa_printf(MSG_WARNING, "EAP-TTLS: Vendor AVP "
;;;1132   				   "underflow");
;;;1133   			return -1;
;;;1134   		}
;;;1135   		vendor_id = WPA_GET_BE32(dpos);
;;;1136   		wpa_printf(MSG_DEBUG, "EAP-TTLS: AVP vendor_id %d",
;;;1137   			   (int) vendor_id);
;;;1138   		dpos += 4;
;;;1139   		dlen -= 4;
;;;1140   	}
;;;1141   
;;;1142   	wpa_hexdump(MSG_DEBUG, "EAP-TTLS: AVP data", dpos, dlen);
;;;1143   
;;;1144   	if (vendor_id == 0 && avp_code == RADIUS_ATTR_EAP_MESSAGE) {
;;;1145   		if (eap_ttls_parse_attr_eap(dpos, dlen, parse) < 0)
;;;1146   			return -1;
;;;1147   	} else if (vendor_id == 0 && avp_code == RADIUS_ATTR_REPLY_MESSAGE) {
;;;1148   		/* This is an optional message that can be displayed to
;;;1149   		 * the user. */
;;;1150   		wpa_hexdump_ascii(MSG_DEBUG, "EAP-TTLS: AVP - Reply-Message",
;;;1151   				  dpos, dlen);
;;;1152   	} else if (vendor_id == RADIUS_VENDOR_ID_MICROSOFT &&
;;;1153   		   avp_code == RADIUS_ATTR_MS_CHAP2_SUCCESS) {
;;;1154   		wpa_hexdump_ascii(MSG_DEBUG, "EAP-TTLS: MS-CHAP2-Success",
;;;1155   				  dpos, dlen);
;;;1156   		if (dlen != 43) {
;;;1157   			wpa_printf(MSG_WARNING, "EAP-TTLS: Unexpected "
;;;1158   				   "MS-CHAP2-Success length "
;;;1159   				   "(len=%lu, expected 43)",
;;;1160   				   (unsigned long) dlen);
;;;1161   			return -1;
;;;1162   		}
;;;1163   		parse->mschapv2 = dpos;
;;;1164   	} else if (vendor_id == RADIUS_VENDOR_ID_MICROSOFT &&
;;;1165   		   avp_code == RADIUS_ATTR_MS_CHAP_ERROR) {
;;;1166   		wpa_hexdump_ascii(MSG_DEBUG, "EAP-TTLS: MS-CHAP-Error",
;;;1167   				  dpos, dlen);
;;;1168   		parse->mschapv2_error = 1;
;;;1169   	} else if (avp_flags & AVP_FLAGS_MANDATORY) {
;;;1170   		wpa_printf(MSG_WARNING, "EAP-TTLS: Unsupported mandatory AVP "
;;;1171   			   "code %d vendor_id %d - dropped",
;;;1172   			   (int) avp_code, (int) vendor_id);
;;;1173   		return -1;
;;;1174   	} else {
;;;1175   		wpa_printf(MSG_DEBUG, "EAP-TTLS: Ignoring unsupported AVP "
;;;1176   			   "code %d vendor_id %d",
;;;1177   			   (int) avp_code, (int) vendor_id);
;;;1178   	}
;;;1179   
;;;1180   	return avp_length;
;;;1181   }
000084  b005              ADD      sp,sp,#0x14
000086  e8bd8ff0          POP      {r4-r11,pc}
                  |L23.138|
00008a  2f08              CMP      r7,#8                 ;1121
00008c  d207              BCS      |L23.158|
00008e  463a              MOV      r2,r7                 ;1122
000090  a160              ADR      r1,|L23.532|
000092  2000              MOVS     r0,#0                 ;1122
000094  f7fffffe          BL       wpa_printf
000098  f04f30ff          MOV      r0,#0xffffffff        ;1124
00009c  e7f2              B        |L23.132|
                  |L23.158|
00009e  f1050608          ADD      r6,r5,#8              ;1127
0000a2  f1a70808          SUB      r8,r7,#8              ;1128
0000a6  9801              LDR      r0,[sp,#4]            ;1129
0000a8  f0100f80          TST      r0,#0x80              ;1129
0000ac  d01c              BEQ      |L23.232|
0000ae  f1b80f04          CMP      r8,#4                 ;1130
0000b2  d206              BCS      |L23.194|
0000b4  a15f              ADR      r1,|L23.564|
0000b6  2000              MOVS     r0,#0                 ;1131
0000b8  f7fffffe          BL       wpa_printf
0000bc  f04f30ff          MOV      r0,#0xffffffff        ;1133
0000c0  e7e0              B        |L23.132|
                  |L23.194|
0000c2  7830              LDRB     r0,[r6,#0]            ;1135
0000c4  0600              LSLS     r0,r0,#24             ;1135
0000c6  7871              LDRB     r1,[r6,#1]            ;1135
0000c8  ea404001          ORR      r0,r0,r1,LSL #16      ;1135
0000cc  78b1              LDRB     r1,[r6,#2]            ;1135
0000ce  ea402001          ORR      r0,r0,r1,LSL #8       ;1135
0000d2  78f1              LDRB     r1,[r6,#3]            ;1135
0000d4  ea400901          ORR      r9,r0,r1              ;1135
0000d8  464a              MOV      r2,r9                 ;1136
0000da  a15e              ADR      r1,|L23.596|
0000dc  2000              MOVS     r0,#0                 ;1136
0000de  f7fffffe          BL       wpa_printf
0000e2  1d36              ADDS     r6,r6,#4              ;1138
0000e4  f1a80804          SUB      r8,r8,#4              ;1139
                  |L23.232|
0000e8  4643              MOV      r3,r8                 ;1142
0000ea  4632              MOV      r2,r6                 ;1142
0000ec  a160              ADR      r1,|L23.624|
0000ee  2000              MOVS     r0,#0                 ;1142
0000f0  f7fffffe          BL       wpa_hexdump
0000f4  f1b90f00          CMP      r9,#0                 ;1144
0000f8  d10c              BNE      |L23.276|
0000fa  f1ba0f4f          CMP      r10,#0x4f             ;1144
0000fe  d109              BNE      |L23.276|
000100  465a              MOV      r2,r11                ;1145
000102  4641              MOV      r1,r8                 ;1145
000104  4630              MOV      r0,r6                 ;1145
000106  f7fffffe          BL       eap_ttls_parse_attr_eap
00010a  2800              CMP      r0,#0                 ;1145
00010c  da4d              BGE      |L23.426|
00010e  f04f30ff          MOV      r0,#0xffffffff        ;1146
000112  e7b7              B        |L23.132|
                  |L23.276|
000114  f1b90f00          CMP      r9,#0                 ;1147
000118  d109              BNE      |L23.302|
00011a  f1ba0f12          CMP      r10,#0x12             ;1147
00011e  d106              BNE      |L23.302|
000120  4643              MOV      r3,r8                 ;1150
000122  4632              MOV      r2,r6                 ;1150
000124  a157              ADR      r1,|L23.644|
000126  2000              MOVS     r0,#0                 ;1150
000128  f7fffffe          BL       wpa_hexdump_ascii
00012c  e03d              B        |L23.426|
                  |L23.302|
00012e  f5a97080          SUB      r0,r9,#0x100          ;1152
000132  3837              SUBS     r0,r0,#0x37           ;1152
000134  d115              BNE      |L23.354|
000136  f1ba0f1a          CMP      r10,#0x1a             ;1153
00013a  d112              BNE      |L23.354|
00013c  4643              MOV      r3,r8                 ;1154
00013e  4632              MOV      r2,r6                 ;1154
000140  a158              ADR      r1,|L23.676|
000142  f7fffffe          BL       wpa_hexdump_ascii
000146  f1b80f2b          CMP      r8,#0x2b              ;1156
00014a  d007              BEQ      |L23.348|
00014c  4642              MOV      r2,r8                 ;1157
00014e  495c              LDR      r1,|L23.704|
000150  2000              MOVS     r0,#0                 ;1157
000152  f7fffffe          BL       wpa_printf
000156  f04f30ff          MOV      r0,#0xffffffff        ;1161
00015a  e793              B        |L23.132|
                  |L23.348|
00015c  f8cb6000          STR      r6,[r11,#0]           ;1163
000160  e023              B        |L23.426|
                  |L23.354|
000162  f5a97080          SUB      r0,r9,#0x100          ;1164
000166  3837              SUBS     r0,r0,#0x37           ;1164
000168  d10b              BNE      |L23.386|
00016a  f1ba0f02          CMP      r10,#2                ;1165
00016e  d108              BNE      |L23.386|
000170  4643              MOV      r3,r8                 ;1166
000172  4632              MOV      r2,r6                 ;1166
000174  a153              ADR      r1,|L23.708|
000176  f7fffffe          BL       wpa_hexdump_ascii
00017a  2001              MOVS     r0,#1                 ;1168
00017c  f8cb000c          STR      r0,[r11,#0xc]         ;1168
000180  e013              B        |L23.426|
                  |L23.386|
000182  9801              LDR      r0,[sp,#4]            ;1169
000184  f0100f40          TST      r0,#0x40              ;1169
000188  d009              BEQ      |L23.414|
00018a  464b              MOV      r3,r9                 ;1170
00018c  4652              MOV      r2,r10                ;1170
00018e  494c              LDR      r1,|L23.704|
000190  3144              ADDS     r1,r1,#0x44           ;1170
000192  2000              MOVS     r0,#0                 ;1170
000194  f7fffffe          BL       wpa_printf
000198  f04f30ff          MOV      r0,#0xffffffff        ;1173
00019c  e772              B        |L23.132|
                  |L23.414|
00019e  464b              MOV      r3,r9                 ;1175
0001a0  4652              MOV      r2,r10                ;1175
0001a2  a14e              ADR      r1,|L23.732|
0001a4  2000              MOVS     r0,#0                 ;1175
0001a6  f7fffffe          BL       wpa_printf
                  |L23.426|
0001aa  4638              MOV      r0,r7                 ;1180
0001ac  e76a              B        |L23.132|
;;;1182   
                          ENDP

0001ae  0000              DCW      0x0000
                  |L23.432|
0001b0  4541502d          DCB      "EAP-TTLS: AVP: code=%d flags=0x%02x length=%d",0
0001b4  54544c53
0001b8  3a204156
0001bc  503a2063
0001c0  6f64653d
0001c4  25642066
0001c8  6c616773
0001cc  3d307825
0001d0  30327820
0001d4  6c656e67
0001d8  74683d25
0001dc  6400    
0001de  00                DCB      0
0001df  00                DCB      0
                  |L23.480|
0001e0  4541502d          DCB      "EAP-TTLS: AVP overflow (len=%d, left=%lu) - dropped",0
0001e4  54544c53
0001e8  3a204156
0001ec  50206f76
0001f0  6572666c
0001f4  6f772028
0001f8  6c656e3d
0001fc  25642c20
000200  6c656674
000204  3d256c75
000208  29202d20
00020c  64726f70
000210  70656400
                  |L23.532|
000214  4541502d          DCB      "EAP-TTLS: Invalid AVP length %d",0
000218  54544c53
00021c  3a20496e
000220  76616c69
000224  64204156
000228  50206c65
00022c  6e677468
000230  20256400
                  |L23.564|
000234  4541502d          DCB      "EAP-TTLS: Vendor AVP underflow",0
000238  54544c53
00023c  3a205665
000240  6e646f72
000244  20415650
000248  20756e64
00024c  6572666c
000250  6f7700  
000253  00                DCB      0
                  |L23.596|
000254  4541502d          DCB      "EAP-TTLS: AVP vendor_id %d",0
000258  54544c53
00025c  3a204156
000260  50207665
000264  6e646f72
000268  5f696420
00026c  256400  
00026f  00                DCB      0
                  |L23.624|
000270  4541502d          DCB      "EAP-TTLS: AVP data",0
000274  54544c53
000278  3a204156
00027c  50206461
000280  746100  
000283  00                DCB      0
                  |L23.644|
000284  4541502d          DCB      "EAP-TTLS: AVP - Reply-Message",0
000288  54544c53
00028c  3a204156
000290  50202d20
000294  5265706c
000298  792d4d65
00029c  73736167
0002a0  6500    
0002a2  00                DCB      0
0002a3  00                DCB      0
                  |L23.676|
0002a4  4541502d          DCB      "EAP-TTLS: MS-CHAP2-Success",0
0002a8  54544c53
0002ac  3a204d53
0002b0  2d434841
0002b4  50322d53
0002b8  75636365
0002bc  737300  
0002bf  00                DCB      0
                  |L23.704|
                          DCD      ||.constdata||+0x4c
                  |L23.708|
0002c4  4541502d          DCB      "EAP-TTLS: MS-CHAP-Error",0
0002c8  54544c53
0002cc  3a204d53
0002d0  2d434841
0002d4  502d4572
0002d8  726f7200
                  |L23.732|
0002dc  4541502d          DCB      "EAP-TTLS: Ignoring unsupported AVP code %d vendor_id %d"
0002e0  54544c53
0002e4  3a204967
0002e8  6e6f7269
0002ec  6e672075
0002f0  6e737570
0002f4  706f7274
0002f8  65642041
0002fc  56502063
000300  6f646520
000304  25642076
000308  656e646f
00030c  725f6964
000310  202564  
000313  00                DCB      0

                          AREA ||i.eap_ttls_parse_avps||, CODE, READONLY, ALIGN=2

                  eap_ttls_parse_avps PROC
;;;1183   
;;;1184   static int eap_ttls_parse_avps(struct wpabuf *in_decrypted,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1185   			       struct ttls_parse_avp *parse)
;;;1186   {
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
;;;1187   	u8 *pos;
;;;1188   	size_t left, pad;
;;;1189   	int avp_length;
;;;1190   
;;;1191   	pos = wpabuf_mhead(in_decrypted);
000008  4648              MOV      r0,r9
00000a  f7fffffe          BL       wpabuf_mhead
00000e  4680              MOV      r8,r0
;;;1192   	left = wpabuf_len(in_decrypted);
000010  4648              MOV      r0,r9
000012  f7fffffe          BL       wpabuf_len
000016  4604              MOV      r4,r0
;;;1193   	wpa_hexdump(MSG_DEBUG, "EAP-TTLS: Decrypted Phase 2 AVPs", pos, left);
000018  4623              MOV      r3,r4
00001a  4642              MOV      r2,r8
00001c  a118              ADR      r1,|L24.128|
00001e  2000              MOVS     r0,#0
000020  f7fffffe          BL       wpa_hexdump
;;;1194   	if (left < sizeof(struct ttls_avp)) {
000024  2c08              CMP      r4,#8
000026  d209              BCS      |L24.60|
;;;1195   		wpa_printf(MSG_WARNING, "EAP-TTLS: Too short Phase 2 AVP frame"
000028  2308              MOVS     r3,#8
00002a  4622              MOV      r2,r4
00002c  491d              LDR      r1,|L24.164|
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       wpa_printf
;;;1196   			   " len=%lu expected %lu or more - dropped",
;;;1197   			   (unsigned long) left,
;;;1198   			   (unsigned long) sizeof(struct ttls_avp));
;;;1199   		return -1;
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L24.56|
;;;1200   	}
;;;1201   
;;;1202   	/* Parse AVPs */
;;;1203   	os_memset(parse, 0, sizeof(*parse));
;;;1204   
;;;1205   	while (left > 0) {
;;;1206   		avp_length = eap_ttls_parse_avp(pos, left, parse);
;;;1207   		if (avp_length < 0)
;;;1208   			return -1;
;;;1209   
;;;1210   		pad = (4 - (avp_length & 3)) & 3;
;;;1211   		pos += avp_length + pad;
;;;1212   		if (left < avp_length + pad)
;;;1213   			left = 0;
;;;1214   		else
;;;1215   			left -= avp_length + pad;
;;;1216   	}
;;;1217   
;;;1218   	return 0;
;;;1219   }
000038  e8bd87f0          POP      {r4-r10,pc}
                  |L24.60|
00003c  2210              MOVS     r2,#0x10              ;1203
00003e  2100              MOVS     r1,#0                 ;1203
000040  4638              MOV      r0,r7                 ;1203
000042  f7fffffe          BL       os_memset
000046  e016              B        |L24.118|
                  |L24.72|
000048  463a              MOV      r2,r7                 ;1206
00004a  4621              MOV      r1,r4                 ;1206
00004c  4640              MOV      r0,r8                 ;1206
00004e  f7fffffe          BL       eap_ttls_parse_avp
000052  4605              MOV      r5,r0                 ;1206
000054  2d00              CMP      r5,#0                 ;1207
000056  da02              BGE      |L24.94|
000058  f04f30ff          MOV      r0,#0xffffffff        ;1208
00005c  e7ec              B        |L24.56|
                  |L24.94|
00005e  4268              RSBS     r0,r5,#0              ;1210
000060  f0000603          AND      r6,r0,#3              ;1210
000064  19a8              ADDS     r0,r5,r6              ;1211
000066  4480              ADD      r8,r8,r0              ;1211
000068  19a8              ADDS     r0,r5,r6              ;1212
00006a  42a0              CMP      r0,r4                 ;1212
00006c  d901              BLS      |L24.114|
00006e  2400              MOVS     r4,#0                 ;1213
000070  e001              B        |L24.118|
                  |L24.114|
000072  19a8              ADDS     r0,r5,r6              ;1215
000074  1a24              SUBS     r4,r4,r0              ;1215
                  |L24.118|
000076  2c00              CMP      r4,#0                 ;1205
000078  d1e6              BNE      |L24.72|
00007a  2000              MOVS     r0,#0                 ;1218
00007c  e7dc              B        |L24.56|
;;;1220   
                          ENDP

00007e  0000              DCW      0x0000
                  |L24.128|
000080  4541502d          DCB      "EAP-TTLS: Decrypted Phase 2 AVPs",0
000084  54544c53
000088  3a204465
00008c  63727970
000090  74656420
000094  50686173
000098  65203220
00009c  41565073
0000a0  00      
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L24.164|
                          DCD      ||.constdata||+0xd4

                          AREA ||i.eap_ttls_phase2_eap_deinit||, CODE, READONLY, ALIGN=1

                  eap_ttls_phase2_eap_deinit PROC
;;;160    
;;;161    static void eap_ttls_phase2_eap_deinit(struct eap_sm *sm,
000000  b570              PUSH     {r4-r6,lr}
;;;162    				       struct eap_ttls_data *data)
;;;163    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;164    	if (data->phase2_priv && data->phase2_method) {
000006  6be0              LDR      r0,[r4,#0x3c]
000008  b148              CBZ      r0,|L25.30|
00000a  6ba0              LDR      r0,[r4,#0x38]
00000c  b138              CBZ      r0,|L25.30|
;;;165    		data->phase2_method->deinit(sm, data->phase2_priv);
00000e  e9d4010e          LDRD     r0,r1,[r4,#0x38]
000012  6902              LDR      r2,[r0,#0x10]
000014  4628              MOV      r0,r5
000016  4790              BLX      r2
;;;166    		data->phase2_method = NULL;
000018  2000              MOVS     r0,#0
00001a  63a0              STR      r0,[r4,#0x38]
;;;167    		data->phase2_priv = NULL;
00001c  63e0              STR      r0,[r4,#0x3c]
                  |L25.30|
;;;168    	}
;;;169    }
00001e  bd70              POP      {r4-r6,pc}
;;;170    
                          ENDP


                          AREA ||i.eap_ttls_phase2_eap_process||, CODE, READONLY, ALIGN=1

                  eap_ttls_phase2_eap_process PROC
;;;475    
;;;476    static int eap_ttls_phase2_eap_process(struct eap_sm *sm,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;477    				       struct eap_ttls_data *data,
;;;478    				       struct eap_method_ret *ret,
;;;479    				       struct eap_hdr *hdr, size_t len,
;;;480    				       struct wpabuf **resp)
;;;481    {
000004  b087              SUB      sp,sp,#0x1c
000006  4607              MOV      r7,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
00000c  461e              MOV      r6,r3
00000e  e9dd890e          LDRD     r8,r9,[sp,#0x38]
;;;482    	struct wpabuf msg;
;;;483    	struct eap_method_ret iret;
;;;484    
;;;485    	os_memset(&iret, 0, sizeof(iret));
000012  220c              MOVS     r2,#0xc
000014  2100              MOVS     r1,#0
000016  a801              ADD      r0,sp,#4
000018  f7fffffe          BL       os_memset
;;;486    	wpabuf_set(&msg, hdr, len);
00001c  4642              MOV      r2,r8
00001e  4631              MOV      r1,r6
000020  a804              ADD      r0,sp,#0x10
000022  f7fffffe          BL       wpabuf_set
;;;487    	*resp = data->phase2_method->process(sm, data->phase2_priv, &iret,
000026  e9d4010e          LDRD     r0,r1,[r4,#0x38]
00002a  ab04              ADD      r3,sp,#0x10
00002c  aa01              ADD      r2,sp,#4
00002e  f8d0c014          LDR      r12,[r0,#0x14]
000032  4638              MOV      r0,r7
000034  47e0              BLX      r12
000036  f8c90000          STR      r0,[r9,#0]
;;;488    					     &msg);
;;;489    	if ((iret.methodState == METHOD_DONE ||
00003a  f89d0008          LDRB     r0,[sp,#8]
00003e  2804              CMP      r0,#4
000040  d003              BEQ      |L26.74|
;;;490    	     iret.methodState == METHOD_MAY_CONT) &&
000042  f89d0008          LDRB     r0,[sp,#8]
000046  2803              CMP      r0,#3
000048  d110              BNE      |L26.108|
                  |L26.74|
;;;491    	    (iret.decision == DECISION_UNCOND_SUCC ||
00004a  f89d0009          LDRB     r0,[sp,#9]
00004e  2802              CMP      r0,#2
000050  d006              BEQ      |L26.96|
;;;492    	     iret.decision == DECISION_COND_SUCC ||
000052  f89d0009          LDRB     r0,[sp,#9]
000056  2801              CMP      r0,#1
000058  d002              BEQ      |L26.96|
;;;493    	     iret.decision == DECISION_FAIL)) {
00005a  f89d0009          LDRB     r0,[sp,#9]
00005e  b928              CBNZ     r0,|L26.108|
                  |L26.96|
;;;494    		ret->methodState = iret.methodState;
000060  f89d0008          LDRB     r0,[sp,#8]
000064  7128              STRB     r0,[r5,#4]
;;;495    		ret->decision = iret.decision;
000066  f89d0009          LDRB     r0,[sp,#9]
00006a  7168              STRB     r0,[r5,#5]
                  |L26.108|
;;;496    	}
;;;497    	eap_ttlsv1_phase2_eap_finish(sm, data, ret);
00006c  462a              MOV      r2,r5
00006e  4621              MOV      r1,r4
000070  4638              MOV      r0,r7
000072  f7fffffe          BL       eap_ttlsv1_phase2_eap_finish
;;;498    
;;;499    	return 0;
000076  2000              MOVS     r0,#0
;;;500    }
000078  b007              ADD      sp,sp,#0x1c
00007a  e8bd83f0          POP      {r4-r9,pc}
;;;501    
                          ENDP


                          AREA ||i.eap_ttls_phase2_request||, CODE, READONLY, ALIGN=2

                  eap_ttls_phase2_request PROC
;;;960    
;;;961    static int eap_ttls_phase2_request(struct eap_sm *sm,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;962    				   struct eap_ttls_data *data,
;;;963    				   struct eap_method_ret *ret,
;;;964    				   struct eap_hdr *hdr,
;;;965    				   struct wpabuf **resp)
;;;966    {
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
00000a  4699              MOV      r9,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;967    	int res = 0;
000010  2700              MOVS     r7,#0
;;;968    	size_t len;
;;;969    	enum phase2_types phase2_type = data->phase2_type;
000012  f8964048          LDRB     r4,[r6,#0x48]
;;;970    
;;;971    #ifdef EAP_TNC
;;;972    	if (data->tnc_started) {
;;;973    		wpa_printf(MSG_DEBUG, "EAP-TTLS: Processing TNC");
;;;974    		phase2_type = EAP_TTLS_PHASE2_EAP;
;;;975    	}
;;;976    #endif /* EAP_TNC */
;;;977    
;;;978    	if (phase2_type == EAP_TTLS_PHASE2_MSCHAPV2 ||
000016  2c01              CMP      r4,#1
000018  d005              BEQ      |L27.38|
;;;979    	    phase2_type == EAP_TTLS_PHASE2_MSCHAP ||
00001a  2c02              CMP      r4,#2
00001c  d003              BEQ      |L27.38|
;;;980    	    phase2_type == EAP_TTLS_PHASE2_PAP ||
00001e  2c03              CMP      r4,#3
000020  d001              BEQ      |L27.38|
;;;981    	    phase2_type == EAP_TTLS_PHASE2_CHAP) {
000022  2c04              CMP      r4,#4
000024  d124              BNE      |L27.112|
                  |L27.38|
;;;982    		if (eap_get_config_identity(sm, &len) == NULL) {
000026  a901              ADD      r1,sp,#4
000028  4640              MOV      r0,r8
00002a  f7fffffe          BL       eap_get_config_identity
00002e  b988              CBNZ     r0,|L27.84|
;;;983    			wpa_printf(MSG_INFO,
000030  a130              ADR      r1,|L27.244|
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       wpa_printf
;;;984    				   "EAP-TTLS: Identity not configured");
;;;985    			eap_sm_request_identity(sm);
000038  4640              MOV      r0,r8
00003a  f7fffffe          BL       eap_sm_request_identity
;;;986    			if (eap_get_config_password(sm, &len) == NULL)
00003e  a901              ADD      r1,sp,#4
000040  4640              MOV      r0,r8
000042  f7fffffe          BL       eap_get_config_password
000046  b910              CBNZ     r0,|L27.78|
;;;987    				eap_sm_request_password(sm);
000048  4640              MOV      r0,r8
00004a  f7fffffe          BL       eap_sm_request_password
                  |L27.78|
;;;988    			return 0;
00004e  2000              MOVS     r0,#0
                  |L27.80|
;;;989    		}
;;;990    
;;;991    		if (eap_get_config_password(sm, &len) == NULL) {
;;;992    			wpa_printf(MSG_INFO,
;;;993    				   "EAP-TTLS: Password not configured");
;;;994    			eap_sm_request_password(sm);
;;;995    			return 0;
;;;996    		}
;;;997    	}
;;;998    
;;;999    	switch (phase2_type) {
;;;1000   	case EAP_TTLS_PHASE2_EAP:
;;;1001   		res = eap_ttls_phase2_request_eap(sm, data, ret, hdr, resp);
;;;1002   		break;
;;;1003   	case EAP_TTLS_PHASE2_MSCHAPV2:
;;;1004   		res = eap_ttls_phase2_request_mschapv2(sm, data, ret, resp);
;;;1005   		break;
;;;1006   	case EAP_TTLS_PHASE2_MSCHAP:
;;;1007   		res = eap_ttls_phase2_request_mschap(sm, data, ret, resp);
;;;1008   		break;
;;;1009   	case EAP_TTLS_PHASE2_PAP:
;;;1010   		res = eap_ttls_phase2_request_pap(sm, data, ret, resp);
;;;1011   		break;
;;;1012   	case EAP_TTLS_PHASE2_CHAP:
;;;1013   		res = eap_ttls_phase2_request_chap(sm, data, ret, resp);
;;;1014   		break;
;;;1015   	default:
;;;1016   		wpa_printf(MSG_ERROR, "EAP-TTLS: Phase 2 - Unknown");
;;;1017   		res = -1;
;;;1018   		break;
;;;1019   	}
;;;1020   
;;;1021   	if (res < 0) {
;;;1022   		ret->methodState = METHOD_DONE;
;;;1023   		ret->decision = DECISION_FAIL;
;;;1024   	}
;;;1025   
;;;1026   	return res;
;;;1027   }
000050  e8bd87fc          POP      {r2-r10,pc}
                  |L27.84|
000054  a901              ADD      r1,sp,#4              ;991
000056  4640              MOV      r0,r8                 ;991
000058  f7fffffe          BL       eap_get_config_password
00005c  b940              CBNZ     r0,|L27.112|
00005e  a12e              ADR      r1,|L27.280|
000060  2000              MOVS     r0,#0                 ;992
000062  f7fffffe          BL       wpa_printf
000066  4640              MOV      r0,r8                 ;994
000068  f7fffffe          BL       eap_sm_request_password
00006c  2000              MOVS     r0,#0                 ;995
00006e  e7ef              B        |L27.80|
                  |L27.112|
000070  2c05              CMP      r4,#5                 ;999
000072  d22e              BCS      |L27.210|
000074  e8dff004          TBB      [pc,r4]               ;999
000078  030d151d          DCB      0x03,0x0d,0x15,0x1d
00007c  2500              DCB      0x25,0x00
00007e  464b              MOV      r3,r9                 ;1001
000080  462a              MOV      r2,r5                 ;1001
000082  4631              MOV      r1,r6                 ;1001
000084  4640              MOV      r0,r8                 ;1001
000086  f8cda000          STR      r10,[sp,#0]           ;1001
00008a  f7fffffe          BL       eap_ttls_phase2_request_eap
00008e  4607              MOV      r7,r0                 ;1001
000090  e026              B        |L27.224|
000092  4653              MOV      r3,r10                ;1004
000094  462a              MOV      r2,r5                 ;1004
000096  4631              MOV      r1,r6                 ;1004
000098  4640              MOV      r0,r8                 ;1004
00009a  f7fffffe          BL       eap_ttls_phase2_request_mschapv2
00009e  4607              MOV      r7,r0                 ;1004
0000a0  e01e              B        |L27.224|
0000a2  4653              MOV      r3,r10                ;1007
0000a4  462a              MOV      r2,r5                 ;1007
0000a6  4631              MOV      r1,r6                 ;1007
0000a8  4640              MOV      r0,r8                 ;1007
0000aa  f7fffffe          BL       eap_ttls_phase2_request_mschap
0000ae  4607              MOV      r7,r0                 ;1007
0000b0  e016              B        |L27.224|
0000b2  4653              MOV      r3,r10                ;1010
0000b4  462a              MOV      r2,r5                 ;1010
0000b6  4631              MOV      r1,r6                 ;1010
0000b8  4640              MOV      r0,r8                 ;1010
0000ba  f7fffffe          BL       eap_ttls_phase2_request_pap
0000be  4607              MOV      r7,r0                 ;1010
0000c0  e00e              B        |L27.224|
0000c2  4653              MOV      r3,r10                ;1013
0000c4  462a              MOV      r2,r5                 ;1013
0000c6  4631              MOV      r1,r6                 ;1013
0000c8  4640              MOV      r0,r8                 ;1013
0000ca  f7fffffe          BL       eap_ttls_phase2_request_chap
0000ce  4607              MOV      r7,r0                 ;1013
0000d0  e006              B        |L27.224|
                  |L27.210|
0000d2  a11a              ADR      r1,|L27.316|
0000d4  2000              MOVS     r0,#0                 ;1016
0000d6  f7fffffe          BL       wpa_printf
0000da  f04f37ff          MOV      r7,#0xffffffff        ;1017
0000de  bf00              NOP                            ;1018
                  |L27.224|
0000e0  bf00              NOP                            ;1002
0000e2  2f00              CMP      r7,#0                 ;1021
0000e4  da03              BGE      |L27.238|
0000e6  2004              MOVS     r0,#4                 ;1022
0000e8  7128              STRB     r0,[r5,#4]            ;1022
0000ea  2000              MOVS     r0,#0                 ;1023
0000ec  7168              STRB     r0,[r5,#5]            ;1023
                  |L27.238|
0000ee  4638              MOV      r0,r7                 ;1026
0000f0  e7ae              B        |L27.80|
;;;1028   
                          ENDP

0000f2  0000              DCW      0x0000
                  |L27.244|
0000f4  4541502d          DCB      "EAP-TTLS: Identity not configured",0
0000f8  54544c53
0000fc  3a204964
000100  656e7469
000104  7479206e
000108  6f742063
00010c  6f6e6669
000110  67757265
000114  6400    
000116  00                DCB      0
000117  00                DCB      0
                  |L27.280|
000118  4541502d          DCB      "EAP-TTLS: Password not configured",0
00011c  54544c53
000120  3a205061
000124  7373776f
000128  7264206e
00012c  6f742063
000130  6f6e6669
000134  67757265
000138  6400    
00013a  00                DCB      0
00013b  00                DCB      0
                  |L27.316|
00013c  4541502d          DCB      "EAP-TTLS: Phase 2 - Unknown",0
000140  54544c53
000144  3a205068
000148  61736520
00014c  32202d20
000150  556e6b6e
000154  6f776e00

                          AREA ||i.eap_ttls_phase2_request_chap||, CODE, READONLY, ALIGN=2

                  eap_ttls_phase2_request_chap PROC
;;;877    
;;;878    static int eap_ttls_phase2_request_chap(struct eap_sm *sm,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;879    					struct eap_ttls_data *data,
;;;880    					struct eap_method_ret *ret,
;;;881    					struct wpabuf **resp)
;;;882    {
000004  b087              SUB      sp,sp,#0x1c
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  469b              MOV      r11,r3
;;;883    	struct wpabuf *msg;
;;;884    	u8 *buf, *pos, *challenge;
;;;885    	const u8 *identity, *password;
;;;886    	size_t identity_len, password_len;
;;;887    
;;;888    	wpa_printf(MSG_DEBUG, "EAP-TTLS: Phase 2 CHAP Request");
00000c  a157              ADR      r1,|L28.364|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;889    
;;;890    	identity = eap_get_config_identity(sm, &identity_len);
000014  a905              ADD      r1,sp,#0x14
000016  9807              LDR      r0,[sp,#0x1c]
000018  f7fffffe          BL       eap_get_config_identity
00001c  9006              STR      r0,[sp,#0x18]
;;;891    	password = eap_get_config_password(sm, &password_len);
00001e  a904              ADD      r1,sp,#0x10
000020  9807              LDR      r0,[sp,#0x1c]
000022  f7fffffe          BL       eap_get_config_password
000026  4682              MOV      r10,r0
;;;892    	if (identity == NULL || password == NULL)
000028  9806              LDR      r0,[sp,#0x18]
00002a  b110              CBZ      r0,|L28.50|
00002c  f1ba0f00          CMP      r10,#0
000030  d104              BNE      |L28.60|
                  |L28.50|
;;;893    		return -1;
000032  f04f30ff          MOV      r0,#0xffffffff
                  |L28.54|
;;;894    
;;;895    	msg = wpabuf_alloc(identity_len + 1000);
;;;896    	if (msg == NULL) {
;;;897    		wpa_printf(MSG_ERROR,
;;;898    			   "EAP-TTLS/CHAP: Failed to allocate memory");
;;;899    		return -1;
;;;900    	}
;;;901    	pos = buf = wpabuf_mhead(msg);
;;;902    
;;;903    	/* User-Name */
;;;904    	pos = eap_ttls_avp_add(buf, pos, RADIUS_ATTR_USER_NAME, 0, 1,
;;;905    			       identity, identity_len);
;;;906    
;;;907    	/* CHAP-Challenge */
;;;908    	challenge = eap_ttls_implicit_challenge(
;;;909    		sm, data, EAP_TTLS_CHAP_CHALLENGE_LEN + 1);
;;;910    	if (challenge == NULL) {
;;;911    		wpabuf_free(msg);
;;;912    		wpa_printf(MSG_ERROR, "EAP-TTLS/CHAP: Failed to derive "
;;;913    			   "implicit challenge");
;;;914    		return -1;
;;;915    	}
;;;916    
;;;917    	pos = eap_ttls_avp_add(buf, pos, RADIUS_ATTR_CHAP_CHALLENGE, 0, 1,
;;;918    			       challenge, EAP_TTLS_CHAP_CHALLENGE_LEN);
;;;919    
;;;920    	/* CHAP-Password */
;;;921    	pos = eap_ttls_avp_hdr(pos, RADIUS_ATTR_CHAP_PASSWORD, 0, 1,
;;;922    			       1 + EAP_TTLS_CHAP_PASSWORD_LEN);
;;;923    	data->ident = challenge[EAP_TTLS_CHAP_CHALLENGE_LEN];
;;;924    	*pos++ = data->ident;
;;;925    
;;;926    	/* MD5(Ident + Password + Challenge) */
;;;927    	chap_md5(data->ident, password, password_len, challenge,
;;;928    		 EAP_TTLS_CHAP_CHALLENGE_LEN, pos);
;;;929    
;;;930    	wpa_hexdump_ascii(MSG_DEBUG, "EAP-TTLS: CHAP username",
;;;931    			  identity, identity_len);
;;;932    	wpa_hexdump_ascii_key(MSG_DEBUG, "EAP-TTLS: CHAP password",
;;;933    			      password, password_len);
;;;934    	wpa_hexdump(MSG_DEBUG, "EAP-TTLS: CHAP implicit challenge",
;;;935    		    challenge, EAP_TTLS_CHAP_CHALLENGE_LEN);
;;;936    	wpa_hexdump(MSG_DEBUG, "EAP-TTLS: CHAP password",
;;;937    		    pos, EAP_TTLS_CHAP_PASSWORD_LEN);
;;;938    	pos += EAP_TTLS_CHAP_PASSWORD_LEN;
;;;939    	os_free(challenge);
;;;940    	AVP_PAD(buf, pos);
;;;941    
;;;942    	wpabuf_put(msg, pos - buf);
;;;943    	*resp = msg;
;;;944    
;;;945    	if (data->ttls_version > 0) {
;;;946    		/* EAP-TTLSv1 uses TLS/IA FinalPhaseFinished to report success,
;;;947    		 * so do not allow connection to be terminated yet. */
;;;948    		ret->methodState = METHOD_CONT;
;;;949    		ret->decision = DECISION_COND_SUCC;
;;;950    	} else {
;;;951    		/* EAP-TTLS/CHAP does not provide tunneled success
;;;952    		 * notification, so assume that Phase2 succeeds. */
;;;953    		ret->methodState = METHOD_DONE;
;;;954    		ret->decision = DECISION_COND_SUCC;
;;;955    	}
;;;956    
;;;957    	return 0;
;;;958    }
000036  b00b              ADD      sp,sp,#0x2c
000038  e8bd8ff0          POP      {r4-r11,pc}
                  |L28.60|
00003c  9805              LDR      r0,[sp,#0x14]         ;895
00003e  f500707a          ADD      r0,r0,#0x3e8          ;895
000042  f7fffffe          BL       wpabuf_alloc
000046  4680              MOV      r8,r0                 ;895
000048  f1b80f00          CMP      r8,#0                 ;896
00004c  d106              BNE      |L28.92|
00004e  a14f              ADR      r1,|L28.396|
000050  2000              MOVS     r0,#0                 ;897
000052  f7fffffe          BL       wpa_printf
000056  f04f30ff          MOV      r0,#0xffffffff        ;899
00005a  e7ec              B        |L28.54|
                  |L28.92|
00005c  4640              MOV      r0,r8                 ;901
00005e  f7fffffe          BL       wpabuf_mhead
000062  4681              MOV      r9,r0                 ;901
000064  4604              MOV      r4,r0                 ;901
000066  2101              MOVS     r1,#1                 ;904
000068  e9dd3205          LDRD     r3,r2,[sp,#0x14]      ;904
00006c  e88d000e          STM      sp,{r1-r3}            ;904
000070  2300              MOVS     r3,#0                 ;904
000072  460a              MOV      r2,r1                 ;904
000074  4621              MOV      r1,r4                 ;904
000076  4648              MOV      r0,r9                 ;904
000078  f7fffffe          BL       eap_ttls_avp_add
00007c  4604              MOV      r4,r0                 ;904
00007e  2211              MOVS     r2,#0x11              ;908
000080  4631              MOV      r1,r6                 ;908
000082  9807              LDR      r0,[sp,#0x1c]         ;908
000084  f7fffffe          BL       eap_ttls_implicit_challenge
000088  4605              MOV      r5,r0                 ;908
00008a  b94d              CBNZ     r5,|L28.160|
00008c  4640              MOV      r0,r8                 ;911
00008e  f7fffffe          BL       wpabuf_free
000092  a149              ADR      r1,|L28.440|
000094  2000              MOVS     r0,#0                 ;912
000096  f7fffffe          BL       wpa_printf
00009a  f04f30ff          MOV      r0,#0xffffffff        ;914
00009e  e7ca              B        |L28.54|
                  |L28.160|
0000a0  2310              MOVS     r3,#0x10              ;917
0000a2  2101              MOVS     r1,#1                 ;917
0000a4  e9cd5301          STRD     r5,r3,[sp,#4]         ;917
0000a8  9100              STR      r1,[sp,#0]            ;917
0000aa  2300              MOVS     r3,#0                 ;917
0000ac  223c              MOVS     r2,#0x3c              ;917
0000ae  4621              MOV      r1,r4                 ;917
0000b0  4648              MOV      r0,r9                 ;917
0000b2  f7fffffe          BL       eap_ttls_avp_add
0000b6  4604              MOV      r4,r0                 ;917
0000b8  2311              MOVS     r3,#0x11              ;921
0000ba  9300              STR      r3,[sp,#0]            ;921
0000bc  2301              MOVS     r3,#1                 ;921
0000be  2200              MOVS     r2,#0                 ;921
0000c0  2103              MOVS     r1,#3                 ;921
0000c2  4620              MOV      r0,r4                 ;921
0000c4  f7fffffe          BL       eap_ttls_avp_hdr
0000c8  4604              MOV      r4,r0                 ;921
0000ca  7c28              LDRB     r0,[r5,#0x10]         ;923
0000cc  f8060f84          STRB     r0,[r6,#0x84]!        ;923
0000d0  7830              LDRB     r0,[r6,#0]            ;924
0000d2  f8040b01          STRB     r0,[r4],#1            ;924
0000d6  2210              MOVS     r2,#0x10              ;927
0000d8  e9cd2400          STRD     r2,r4,[sp,#0]         ;927
0000dc  f8160984          LDRB     r0,[r6],#-0x84        ;927
0000e0  462b              MOV      r3,r5                 ;927
0000e2  4651              MOV      r1,r10                ;927
0000e4  9a04              LDR      r2,[sp,#0x10]         ;927
0000e6  f7fffffe          BL       chap_md5
0000ea  a140              ADR      r1,|L28.492|
0000ec  2000              MOVS     r0,#0                 ;930
0000ee  e9dd3205          LDRD     r3,r2,[sp,#0x14]      ;930
0000f2  f7fffffe          BL       wpa_hexdump_ascii
0000f6  4652              MOV      r2,r10                ;932
0000f8  a142              ADR      r1,|L28.516|
0000fa  2000              MOVS     r0,#0                 ;932
0000fc  9b04              LDR      r3,[sp,#0x10]         ;932
0000fe  f7fffffe          BL       wpa_hexdump_ascii_key
000102  2310              MOVS     r3,#0x10              ;934
000104  462a              MOV      r2,r5                 ;934
000106  a145              ADR      r1,|L28.540|
000108  2000              MOVS     r0,#0                 ;934
00010a  f7fffffe          BL       wpa_hexdump
00010e  2310              MOVS     r3,#0x10              ;936
000110  4622              MOV      r2,r4                 ;936
000112  a13c              ADR      r1,|L28.516|
000114  2000              MOVS     r0,#0                 ;936
000116  f7fffffe          BL       wpa_hexdump
00011a  3410              ADDS     r4,r4,#0x10           ;938
00011c  4628              MOV      r0,r5                 ;939
00011e  f7fffffe          BL       os_free
000122  bf00              NOP                            ;940
000124  eba40009          SUB      r0,r4,r9              ;940
000128  4240              RSBS     r0,r0,#0              ;940
00012a  f0000003          AND      r0,r0,#3              ;940
00012e  9003              STR      r0,[sp,#0xc]          ;940
000130  2100              MOVS     r1,#0                 ;940
000132  4620              MOV      r0,r4                 ;940
000134  9a03              LDR      r2,[sp,#0xc]          ;940
000136  f7fffffe          BL       os_memset
00013a  9803              LDR      r0,[sp,#0xc]          ;940
00013c  4404              ADD      r4,r4,r0              ;940
00013e  bf00              NOP                            ;940
000140  eba40109          SUB      r1,r4,r9              ;942
000144  4640              MOV      r0,r8                 ;942
000146  f7fffffe          BL       wpabuf_put
00014a  f8cb8000          STR      r8,[r11,#0]           ;943
00014e  6b30              LDR      r0,[r6,#0x30]         ;945
000150  2800              CMP      r0,#0                 ;945
000152  dd04              BLE      |L28.350|
000154  2002              MOVS     r0,#2                 ;948
000156  7138              STRB     r0,[r7,#4]            ;948
000158  2001              MOVS     r0,#1                 ;949
00015a  7178              STRB     r0,[r7,#5]            ;949
00015c  e003              B        |L28.358|
                  |L28.350|
00015e  2004              MOVS     r0,#4                 ;953
000160  7138              STRB     r0,[r7,#4]            ;953
000162  2001              MOVS     r0,#1                 ;954
000164  7178              STRB     r0,[r7,#5]            ;954
                  |L28.358|
000166  2000              MOVS     r0,#0                 ;957
000168  e765              B        |L28.54|
;;;959    
                          ENDP

00016a  0000              DCW      0x0000
                  |L28.364|
00016c  4541502d          DCB      "EAP-TTLS: Phase 2 CHAP Request",0
000170  54544c53
000174  3a205068
000178  61736520
00017c  32204348
000180  41502052
000184  65717565
000188  737400  
00018b  00                DCB      0
                  |L28.396|
00018c  4541502d          DCB      "EAP-TTLS/CHAP: Failed to allocate memory",0
000190  54544c53
000194  2f434841
000198  503a2046
00019c  61696c65
0001a0  6420746f
0001a4  20616c6c
0001a8  6f636174
0001ac  65206d65
0001b0  6d6f7279
0001b4  00      
0001b5  00                DCB      0
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L28.440|
0001b8  4541502d          DCB      "EAP-TTLS/CHAP: Failed to derive implicit challenge",0
0001bc  54544c53
0001c0  2f434841
0001c4  503a2046
0001c8  61696c65
0001cc  6420746f
0001d0  20646572
0001d4  69766520
0001d8  696d706c
0001dc  69636974
0001e0  20636861
0001e4  6c6c656e
0001e8  676500  
0001eb  00                DCB      0
                  |L28.492|
0001ec  4541502d          DCB      "EAP-TTLS: CHAP username",0
0001f0  54544c53
0001f4  3a204348
0001f8  41502075
0001fc  7365726e
000200  616d6500
                  |L28.516|
000204  4541502d          DCB      "EAP-TTLS: CHAP password",0
000208  54544c53
00020c  3a204348
000210  41502070
000214  61737377
000218  6f726400
                  |L28.540|
00021c  4541502d          DCB      "EAP-TTLS: CHAP implicit challenge",0
000220  54544c53
000224  3a204348
000228  41502069
00022c  6d706c69
000230  63697420
000234  6368616c
000238  6c656e67
00023c  6500    
00023e  00                DCB      0
00023f  00                DCB      0

                          AREA ||i.eap_ttls_phase2_request_eap||, CODE, READONLY, ALIGN=2

                  eap_ttls_phase2_request_eap PROC
;;;574    
;;;575    static int eap_ttls_phase2_request_eap(struct eap_sm *sm,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;576    				       struct eap_ttls_data *data,
;;;577    				       struct eap_method_ret *ret,
;;;578    				       struct eap_hdr *hdr,
;;;579    				       struct wpabuf **resp)
;;;580    {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4693              MOV      r11,r2
00000a  461d              MOV      r5,r3
00000c  9c0c              LDR      r4,[sp,#0x30]
;;;581    	size_t len = be_to_host16(hdr->length);
00000e  8868              LDRH     r0,[r5,#2]
000010  f44f417f          MOV      r1,#0xff00
000014  ea012000          AND      r0,r1,r0,LSL #8
000018  8869              LDRH     r1,[r5,#2]
00001a  ea402711          ORR      r7,r0,r1,LSR #8
;;;582    	u8 *pos;
;;;583    	struct eap_peer_config *config = eap_get_config(sm);
00001e  4648              MOV      r0,r9
000020  f7fffffe          BL       eap_get_config
000024  4680              MOV      r8,r0
;;;584    
;;;585    	if (len <= sizeof(struct eap_hdr)) {
000026  2f04              CMP      r7,#4
000028  d808              BHI      |L29.60|
;;;586    		wpa_printf(MSG_INFO, "EAP-TTLS: too short "
00002a  463a              MOV      r2,r7
00002c  a122              ADR      r1,|L29.184|
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       wpa_printf
;;;587    			   "Phase 2 request (len=%lu)", (unsigned long) len);
;;;588    		return -1;
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L29.56|
;;;589    	}
;;;590    	pos = (u8 *) (hdr + 1);
;;;591    	wpa_printf(MSG_DEBUG, "EAP-TTLS: Phase 2 EAP Request: type=%d", *pos);
;;;592    	switch (*pos) {
;;;593    	case EAP_TYPE_IDENTITY:
;;;594    		*resp = eap_sm_buildIdentity(sm, hdr->identifier, 1);
;;;595    		break;
;;;596    	default:
;;;597    		if (eap_ttls_phase2_request_eap_method(sm, data, ret, hdr, len,
;;;598    						       *pos, resp) < 0)
;;;599    			return -1;
;;;600    		break;
;;;601    	}
;;;602    
;;;603    	if (*resp == NULL &&
;;;604    	    (config->pending_req_identity || config->pending_req_password ||
;;;605    	     config->pending_req_otp)) {
;;;606    		return 0;
;;;607    	}
;;;608    
;;;609    	if (*resp == NULL)
;;;610    		return -1;
;;;611    
;;;612    	wpa_hexdump_buf(MSG_DEBUG, "EAP-TTLS: AVP encapsulate EAP Response",
;;;613    			*resp);
;;;614    	return eap_ttls_avp_encapsulate(resp, RADIUS_ATTR_EAP_MESSAGE, 1);
;;;615    }
000038  e8bd8ffe          POP      {r1-r11,pc}
                  |L29.60|
00003c  1d2e              ADDS     r6,r5,#4              ;590
00003e  7832              LDRB     r2,[r6,#0]            ;591
000040  a129              ADR      r1,|L29.232|
000042  2000              MOVS     r0,#0                 ;591
000044  f7fffffe          BL       wpa_printf
000048  7830              LDRB     r0,[r6,#0]            ;592
00004a  2801              CMP      r0,#1                 ;592
00004c  d106              BNE      |L29.92|
00004e  7869              LDRB     r1,[r5,#1]            ;594
000050  2201              MOVS     r2,#1                 ;594
000052  4648              MOV      r0,r9                 ;594
000054  f7fffffe          BL       eap_sm_buildIdentity
000058  6020              STR      r0,[r4,#0]            ;594
00005a  e00f              B        |L29.124|
                  |L29.92|
00005c  7832              LDRB     r2,[r6,#0]            ;597
00005e  462b              MOV      r3,r5                 ;597
000060  e9cd7200          STRD     r7,r2,[sp,#0]         ;597
000064  9402              STR      r4,[sp,#8]            ;597
000066  465a              MOV      r2,r11                ;597
000068  4651              MOV      r1,r10                ;597
00006a  4648              MOV      r0,r9                 ;597
00006c  f7fffffe          BL       eap_ttls_phase2_request_eap_method
000070  2800              CMP      r0,#0                 ;597
000072  da02              BGE      |L29.122|
000074  f04f30ff          MOV      r0,#0xffffffff        ;599
000078  e7de              B        |L29.56|
                  |L29.122|
00007a  bf00              NOP                            ;600
                  |L29.124|
00007c  bf00              NOP                            ;595
00007e  6820              LDR      r0,[r4,#0]            ;603
000080  b950              CBNZ     r0,|L29.152|
000082  f8d800a0          LDR      r0,[r8,#0xa0]         ;604
000086  b928              CBNZ     r0,|L29.148|
000088  f8d800a4          LDR      r0,[r8,#0xa4]         ;604
00008c  b910              CBNZ     r0,|L29.148|
00008e  f8d800b4          LDR      r0,[r8,#0xb4]         ;605
000092  b108              CBZ      r0,|L29.152|
                  |L29.148|
000094  2000              MOVS     r0,#0                 ;606
000096  e7cf              B        |L29.56|
                  |L29.152|
000098  6820              LDR      r0,[r4,#0]            ;609
00009a  b910              CBNZ     r0,|L29.162|
00009c  f04f30ff          MOV      r0,#0xffffffff        ;610
0000a0  e7ca              B        |L29.56|
                  |L29.162|
0000a2  a11b              ADR      r1,|L29.272|
0000a4  2000              MOVS     r0,#0                 ;612
0000a6  6822              LDR      r2,[r4,#0]            ;612
0000a8  f7fffffe          BL       wpa_hexdump_buf
0000ac  2201              MOVS     r2,#1                 ;614
0000ae  214f              MOVS     r1,#0x4f              ;614
0000b0  4620              MOV      r0,r4                 ;614
0000b2  f7fffffe          BL       eap_ttls_avp_encapsulate
0000b6  e7bf              B        |L29.56|
;;;616    
                          ENDP

                  |L29.184|
0000b8  4541502d          DCB      "EAP-TTLS: too short Phase 2 request (len=%lu)",0
0000bc  54544c53
0000c0  3a20746f
0000c4  6f207368
0000c8  6f727420
0000cc  50686173
0000d0  65203220
0000d4  72657175
0000d8  65737420
0000dc  286c656e
0000e0  3d256c75
0000e4  2900    
0000e6  00                DCB      0
0000e7  00                DCB      0
                  |L29.232|
0000e8  4541502d          DCB      "EAP-TTLS: Phase 2 EAP Request: type=%d",0
0000ec  54544c53
0000f0  3a205068
0000f4  61736520
0000f8  32204541
0000fc  50205265
000100  71756573
000104  743a2074
000108  7970653d
00010c  256400  
00010f  00                DCB      0
                  |L29.272|
000110  4541502d          DCB      "EAP-TTLS: AVP encapsulate EAP Response",0
000114  54544c53
000118  3a204156
00011c  5020656e
000120  63617073
000124  756c6174
000128  65204541
00012c  50205265
000130  73706f6e
000134  736500  
000137  00                DCB      0

                          AREA ||i.eap_ttls_phase2_request_eap_method||, CODE, READONLY, ALIGN=2

                  eap_ttls_phase2_request_eap_method PROC
;;;502    
;;;503    static int eap_ttls_phase2_request_eap_method(struct eap_sm *sm,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;504    					      struct eap_ttls_data *data,
;;;505    					      struct eap_method_ret *ret,
;;;506    					      struct eap_hdr *hdr, size_t len,
;;;507    					      u8 method, struct wpabuf **resp)
;;;508    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4690              MOV      r8,r2
00000a  461f              MOV      r7,r3
00000c  e9dd5a0b          LDRD     r5,r10,[sp,#0x2c]
000010  f8dd9028          LDR      r9,[sp,#0x28]
;;;509    #ifdef EAP_TNC
;;;510    	if (data->tnc_started && data->phase2_method &&
;;;511    	    data->phase2_priv && method == EAP_TYPE_TNC &&
;;;512    	    data->phase2_eap_type.method == EAP_TYPE_TNC)
;;;513    		return eap_ttls_phase2_eap_process(sm, data, ret, hdr, len,
;;;514    						   resp);
;;;515    
;;;516    	if (data->ready_for_tnc && !data->tnc_started &&
;;;517    	    method == EAP_TYPE_TNC) {
;;;518    		wpa_printf(MSG_DEBUG, "EAP-TTLS: Start TNC after completed "
;;;519    			   "EAP method");
;;;520    		data->tnc_started = 1;
;;;521    	}
;;;522    
;;;523    	if (data->tnc_started) {
;;;524    		if (data->phase2_eap_type.vendor != EAP_VENDOR_IETF ||
;;;525    		    data->phase2_eap_type.method == EAP_TYPE_TNC) {
;;;526    			wpa_printf(MSG_DEBUG, "EAP-TTLS: Unexpected EAP "
;;;527    				   "type %d for TNC", method);
;;;528    			return -1;
;;;529    		}
;;;530    
;;;531    		data->phase2_eap_type.vendor = EAP_VENDOR_IETF;
;;;532    		data->phase2_eap_type.method = method;
;;;533    		wpa_printf(MSG_DEBUG, "EAP-TTLS: Selected "
;;;534    			   "Phase 2 EAP vendor %d method %d (TNC)",
;;;535    			   data->phase2_eap_type.vendor,
;;;536    			   data->phase2_eap_type.method);
;;;537    
;;;538    		if (data->phase2_type == EAP_TTLS_PHASE2_EAP)
;;;539    			eap_ttls_phase2_eap_deinit(sm, data);
;;;540    	}
;;;541    #endif /* EAP_TNC */
;;;542    
;;;543    	if (data->phase2_eap_type.vendor == EAP_VENDOR_IETF &&
000014  6ce0              LDR      r0,[r4,#0x4c]
000016  b928              CBNZ     r0,|L30.36|
;;;544    	    data->phase2_eap_type.method == EAP_TYPE_NONE)
000018  6d20              LDR      r0,[r4,#0x50]
00001a  b918              CBNZ     r0,|L30.36|
;;;545    		eap_ttls_phase2_select_eap_method(data, method);
00001c  4629              MOV      r1,r5
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       eap_ttls_phase2_select_eap_method
                  |L30.36|
;;;546    
;;;547    	if (method != data->phase2_eap_type.method || method == EAP_TYPE_NONE)
000024  6d20              LDR      r0,[r4,#0x50]
000026  42a8              CMP      r0,r5
000028  d100              BNE      |L30.44|
00002a  b965              CBNZ     r5,|L30.70|
                  |L30.44|
;;;548    	{
;;;549    		if (eap_peer_tls_phase2_nak(data->phase2_eap_types,
00002c  4653              MOV      r3,r10
00002e  463a              MOV      r2,r7
000030  e9d40115          LDRD     r0,r1,[r4,#0x54]
000034  f7fffffe          BL       eap_peer_tls_phase2_nak
000038  b118              CBZ      r0,|L30.66|
;;;550    					    data->num_phase2_eap_types,
;;;551    					    hdr, resp))
;;;552    			return -1;
00003a  f04f30ff          MOV      r0,#0xffffffff
                  |L30.62|
;;;553    		return 0;
;;;554    	}
;;;555    
;;;556    	if (data->phase2_priv == NULL) {
;;;557    		data->phase2_method = eap_peer_get_eap_method(
;;;558    			EAP_VENDOR_IETF, method);
;;;559    		if (data->phase2_method) {
;;;560    			sm->init_phase2 = 1;
;;;561    			data->phase2_priv = data->phase2_method->init(sm);
;;;562    			sm->init_phase2 = 0;
;;;563    		}
;;;564    	}
;;;565    	if (data->phase2_priv == NULL || data->phase2_method == NULL) {
;;;566    		wpa_printf(MSG_INFO, "EAP-TTLS: failed to initialize "
;;;567    			   "Phase 2 EAP method %d", method);
;;;568    		return -1;
;;;569    	}
;;;570    
;;;571    	return eap_ttls_phase2_eap_process(sm, data, ret, hdr, len, resp);
;;;572    }
00003e  e8bd87fc          POP      {r2-r10,pc}
                  |L30.66|
000042  2000              MOVS     r0,#0                 ;553
000044  e7fb              B        |L30.62|
                  |L30.70|
000046  6be0              LDR      r0,[r4,#0x3c]         ;556
000048  b978              CBNZ     r0,|L30.106|
00004a  4629              MOV      r1,r5                 ;557
00004c  2000              MOVS     r0,#0                 ;557
00004e  f7fffffe          BL       eap_peer_get_eap_method
000052  63a0              STR      r0,[r4,#0x38]         ;557
000054  6ba0              LDR      r0,[r4,#0x38]         ;559
000056  b140              CBZ      r0,|L30.106|
000058  2001              MOVS     r0,#1                 ;560
00005a  65f0              STR      r0,[r6,#0x5c]         ;560
00005c  6ba0              LDR      r0,[r4,#0x38]         ;561
00005e  68c1              LDR      r1,[r0,#0xc]          ;561
000060  4630              MOV      r0,r6                 ;561
000062  4788              BLX      r1                    ;561
000064  63e0              STR      r0,[r4,#0x3c]         ;561
000066  2000              MOVS     r0,#0                 ;562
000068  65f0              STR      r0,[r6,#0x5c]         ;562
                  |L30.106|
00006a  6be0              LDR      r0,[r4,#0x3c]         ;565
00006c  b108              CBZ      r0,|L30.114|
00006e  6ba0              LDR      r0,[r4,#0x38]         ;565
000070  b938              CBNZ     r0,|L30.130|
                  |L30.114|
000072  462a              MOV      r2,r5                 ;566
000074  a107              ADR      r1,|L30.148|
000076  2000              MOVS     r0,#0                 ;566
000078  f7fffffe          BL       wpa_printf
00007c  f04f30ff          MOV      r0,#0xffffffff        ;568
000080  e7dd              B        |L30.62|
                  |L30.130|
000082  463b              MOV      r3,r7                 ;571
000084  4642              MOV      r2,r8                 ;571
000086  4621              MOV      r1,r4                 ;571
000088  4630              MOV      r0,r6                 ;571
00008a  e9cd9a00          STRD     r9,r10,[sp,#0]        ;571
00008e  f7fffffe          BL       eap_ttls_phase2_eap_process
000092  e7d4              B        |L30.62|
;;;573    
                          ENDP

                  |L30.148|
000094  4541502d          DCB      "EAP-TTLS: failed to initialize Phase 2 EAP method %d",0
000098  54544c53
00009c  3a206661
0000a0  696c6564
0000a4  20746f20
0000a8  696e6974
0000ac  69616c69
0000b0  7a652050
0000b4  68617365
0000b8  20322045
0000bc  4150206d
0000c0  6574686f
0000c4  64202564
0000c8  00      
0000c9  00                DCB      0
0000ca  00                DCB      0
0000cb  00                DCB      0

                          AREA ||i.eap_ttls_phase2_request_mschap||, CODE, READONLY, ALIGN=2

                  eap_ttls_phase2_request_mschap PROC
;;;727    
;;;728    static int eap_ttls_phase2_request_mschap(struct eap_sm *sm,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;729    					  struct eap_ttls_data *data,
;;;730    					  struct eap_method_ret *ret,
;;;731    					  struct wpabuf **resp)
;;;732    {
000004  b087              SUB      sp,sp,#0x1c
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  469b              MOV      r11,r3
;;;733    	struct wpabuf *msg;
;;;734    	u8 *buf, *pos, *challenge;
;;;735    	const u8 *identity, *password;
;;;736    	size_t identity_len, password_len;
;;;737    	int pwhash;
;;;738    
;;;739    	wpa_printf(MSG_DEBUG, "EAP-TTLS: Phase 2 MSCHAP Request");
00000c  a15f              ADR      r1,|L31.396|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;740    
;;;741    	identity = eap_get_config_identity(sm, &identity_len);
000014  a905              ADD      r1,sp,#0x14
000016  9807              LDR      r0,[sp,#0x1c]
000018  f7fffffe          BL       eap_get_config_identity
00001c  9006              STR      r0,[sp,#0x18]
;;;742    	password = eap_get_config_password2(sm, &password_len, &pwhash);
00001e  aa03              ADD      r2,sp,#0xc
000020  a904              ADD      r1,sp,#0x10
000022  9807              LDR      r0,[sp,#0x1c]
000024  f7fffffe          BL       eap_get_config_password2
000028  4682              MOV      r10,r0
;;;743    	if (identity == NULL || password == NULL)
00002a  9806              LDR      r0,[sp,#0x18]
00002c  b110              CBZ      r0,|L31.52|
00002e  f1ba0f00          CMP      r10,#0
000032  d104              BNE      |L31.62|
                  |L31.52|
;;;744    		return -1;
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L31.56|
;;;745    
;;;746    	msg = wpabuf_alloc(identity_len + 1000);
;;;747    	if (msg == NULL) {
;;;748    		wpa_printf(MSG_ERROR,
;;;749    			   "EAP-TTLS/MSCHAP: Failed to allocate memory");
;;;750    		return -1;
;;;751    	}
;;;752    	pos = buf = wpabuf_mhead(msg);
;;;753    
;;;754    	/* User-Name */
;;;755    	pos = eap_ttls_avp_add(buf, pos, RADIUS_ATTR_USER_NAME, 0, 1,
;;;756    			       identity, identity_len);
;;;757    
;;;758    	/* MS-CHAP-Challenge */
;;;759    	challenge = eap_ttls_implicit_challenge(
;;;760    		sm, data, EAP_TTLS_MSCHAP_CHALLENGE_LEN + 1);
;;;761    	if (challenge == NULL) {
;;;762    		wpabuf_free(msg);
;;;763    		wpa_printf(MSG_ERROR, "EAP-TTLS/MSCHAP: Failed to derive "
;;;764    			   "implicit challenge");
;;;765    		return -1;
;;;766    	}
;;;767    
;;;768    	pos = eap_ttls_avp_add(buf, pos, RADIUS_ATTR_MS_CHAP_CHALLENGE,
;;;769    			       RADIUS_VENDOR_ID_MICROSOFT, 1,
;;;770    			       challenge, EAP_TTLS_MSCHAP_CHALLENGE_LEN);
;;;771    
;;;772    	/* MS-CHAP-Response */
;;;773    	pos = eap_ttls_avp_hdr(pos, RADIUS_ATTR_MS_CHAP_RESPONSE,
;;;774    			       RADIUS_VENDOR_ID_MICROSOFT, 1,
;;;775    			       EAP_TTLS_MSCHAP_RESPONSE_LEN);
;;;776    	data->ident = challenge[EAP_TTLS_MSCHAP_CHALLENGE_LEN];
;;;777    	*pos++ = data->ident;
;;;778    	*pos++ = 1; /* Flags: Use NT style passwords */
;;;779    	os_memset(pos, 0, 24); /* LM-Response */
;;;780    	pos += 24;
;;;781    	if (pwhash) {
;;;782    		challenge_response(challenge, password, pos); /* NT-Response */
;;;783    		wpa_hexdump_key(MSG_DEBUG, "EAP-TTLS: MSCHAP password hash",
;;;784    				password, 16);
;;;785    	} else {
;;;786    		nt_challenge_response(challenge, password, password_len,
;;;787    				      pos); /* NT-Response */
;;;788    		wpa_hexdump_ascii_key(MSG_DEBUG, "EAP-TTLS: MSCHAP password",
;;;789    				      password, password_len);
;;;790    	}
;;;791    	wpa_hexdump(MSG_DEBUG, "EAP-TTLS: MSCHAP implicit challenge",
;;;792    		    challenge, EAP_TTLS_MSCHAP_CHALLENGE_LEN);
;;;793    	wpa_hexdump(MSG_DEBUG, "EAP-TTLS: MSCHAP response", pos, 24);
;;;794    	pos += 24;
;;;795    	os_free(challenge);
;;;796    	AVP_PAD(buf, pos);
;;;797    
;;;798    	wpabuf_put(msg, pos - buf);
;;;799    	*resp = msg;
;;;800    
;;;801    	if (data->ttls_version > 0) {
;;;802    		/* EAP-TTLSv1 uses TLS/IA FinalPhaseFinished to report success,
;;;803    		 * so do not allow connection to be terminated yet. */
;;;804    		ret->methodState = METHOD_CONT;
;;;805    		ret->decision = DECISION_COND_SUCC;
;;;806    	} else {
;;;807    		/* EAP-TTLS/MSCHAP does not provide tunneled success
;;;808    		 * notification, so assume that Phase2 succeeds. */
;;;809    		ret->methodState = METHOD_DONE;
;;;810    		ret->decision = DECISION_COND_SUCC;
;;;811    	}
;;;812    
;;;813    	return 0;
;;;814    }
000038  b00b              ADD      sp,sp,#0x2c
00003a  e8bd8ff0          POP      {r4-r11,pc}
                  |L31.62|
00003e  9805              LDR      r0,[sp,#0x14]         ;746
000040  f500707a          ADD      r0,r0,#0x3e8          ;746
000044  f7fffffe          BL       wpabuf_alloc
000048  4680              MOV      r8,r0                 ;746
00004a  f1b80f00          CMP      r8,#0                 ;747
00004e  d106              BNE      |L31.94|
000050  a157              ADR      r1,|L31.432|
000052  2000              MOVS     r0,#0                 ;748
000054  f7fffffe          BL       wpa_printf
000058  f04f30ff          MOV      r0,#0xffffffff        ;750
00005c  e7ec              B        |L31.56|
                  |L31.94|
00005e  4640              MOV      r0,r8                 ;752
000060  f7fffffe          BL       wpabuf_mhead
000064  4681              MOV      r9,r0                 ;752
000066  4604              MOV      r4,r0                 ;752
000068  2101              MOVS     r1,#1                 ;755
00006a  e9dd3205          LDRD     r3,r2,[sp,#0x14]      ;755
00006e  e88d000e          STM      sp,{r1-r3}            ;755
000072  2300              MOVS     r3,#0                 ;755
000074  460a              MOV      r2,r1                 ;755
000076  4621              MOV      r1,r4                 ;755
000078  4648              MOV      r0,r9                 ;755
00007a  f7fffffe          BL       eap_ttls_avp_add
00007e  4604              MOV      r4,r0                 ;755
000080  2209              MOVS     r2,#9                 ;759
000082  4639              MOV      r1,r7                 ;759
000084  9807              LDR      r0,[sp,#0x1c]         ;759
000086  f7fffffe          BL       eap_ttls_implicit_challenge
00008a  4606              MOV      r6,r0                 ;759
00008c  b94e              CBNZ     r6,|L31.162|
00008e  4640              MOV      r0,r8                 ;762
000090  f7fffffe          BL       wpabuf_free
000094  a151              ADR      r1,|L31.476|
000096  2000              MOVS     r0,#0                 ;763
000098  f7fffffe          BL       wpa_printf
00009c  f04f30ff          MOV      r0,#0xffffffff        ;765
0000a0  e7ca              B        |L31.56|
                  |L31.162|
0000a2  2308              MOVS     r3,#8                 ;768
0000a4  2101              MOVS     r1,#1                 ;768
0000a6  e9cd6301          STRD     r6,r3,[sp,#4]         ;768
0000aa  9100              STR      r1,[sp,#0]            ;768
0000ac  f2401337          MOV      r3,#0x137             ;768
0000b0  220b              MOVS     r2,#0xb               ;768
0000b2  4621              MOV      r1,r4                 ;768
0000b4  4648              MOV      r0,r9                 ;768
0000b6  f7fffffe          BL       eap_ttls_avp_add
0000ba  4604              MOV      r4,r0                 ;768
0000bc  2332              MOVS     r3,#0x32              ;773
0000be  9300              STR      r3,[sp,#0]            ;773
0000c0  2301              MOVS     r3,#1                 ;773
0000c2  f2401237          MOV      r2,#0x137             ;773
0000c6  4619              MOV      r1,r3                 ;773
0000c8  4620              MOV      r0,r4                 ;773
0000ca  f7fffffe          BL       eap_ttls_avp_hdr
0000ce  4604              MOV      r4,r0                 ;773
0000d0  7a30              LDRB     r0,[r6,#8]            ;776
0000d2  f8870084          STRB     r0,[r7,#0x84]         ;776
0000d6  f8970084          LDRB     r0,[r7,#0x84]         ;777
0000da  f8040b01          STRB     r0,[r4],#1            ;777
0000de  2001              MOVS     r0,#1                 ;778
0000e0  f8040b01          STRB     r0,[r4],#1            ;778
0000e4  2218              MOVS     r2,#0x18              ;779
0000e6  2100              MOVS     r1,#0                 ;779
0000e8  4620              MOV      r0,r4                 ;779
0000ea  f7fffffe          BL       os_memset
0000ee  3418              ADDS     r4,r4,#0x18           ;780
0000f0  9803              LDR      r0,[sp,#0xc]          ;781
0000f2  b158              CBZ      r0,|L31.268|
0000f4  4622              MOV      r2,r4                 ;782
0000f6  4651              MOV      r1,r10                ;782
0000f8  4630              MOV      r0,r6                 ;782
0000fa  f7fffffe          BL       challenge_response
0000fe  2310              MOVS     r3,#0x10              ;783
000100  4652              MOV      r2,r10                ;783
000102  a144              ADR      r1,|L31.532|
000104  2000              MOVS     r0,#0                 ;783
000106  f7fffffe          BL       wpa_hexdump_key
00010a  e00b              B        |L31.292|
                  |L31.268|
00010c  4623              MOV      r3,r4                 ;786
00010e  4651              MOV      r1,r10                ;786
000110  4630              MOV      r0,r6                 ;786
000112  9a04              LDR      r2,[sp,#0x10]         ;786
000114  f7fffffe          BL       nt_challenge_response
000118  4652              MOV      r2,r10                ;788
00011a  a146              ADR      r1,|L31.564|
00011c  2000              MOVS     r0,#0                 ;788
00011e  9b04              LDR      r3,[sp,#0x10]         ;788
000120  f7fffffe          BL       wpa_hexdump_ascii_key
                  |L31.292|
000124  2308              MOVS     r3,#8                 ;791
000126  4632              MOV      r2,r6                 ;791
000128  a149              ADR      r1,|L31.592|
00012a  2000              MOVS     r0,#0                 ;791
00012c  f7fffffe          BL       wpa_hexdump
000130  2318              MOVS     r3,#0x18              ;793
000132  4622              MOV      r2,r4                 ;793
000134  a14f              ADR      r1,|L31.628|
000136  2000              MOVS     r0,#0                 ;793
000138  f7fffffe          BL       wpa_hexdump
00013c  3418              ADDS     r4,r4,#0x18           ;794
00013e  4630              MOV      r0,r6                 ;795
000140  f7fffffe          BL       os_free
000144  bf00              NOP                            ;796
000146  eba40009          SUB      r0,r4,r9              ;796
00014a  4240              RSBS     r0,r0,#0              ;796
00014c  f0000003          AND      r0,r0,#3              ;796
000150  9002              STR      r0,[sp,#8]            ;796
000152  2100              MOVS     r1,#0                 ;796
000154  4620              MOV      r0,r4                 ;796
000156  9a02              LDR      r2,[sp,#8]            ;796
000158  f7fffffe          BL       os_memset
00015c  9802              LDR      r0,[sp,#8]            ;796
00015e  4404              ADD      r4,r4,r0              ;796
000160  bf00              NOP                            ;796
000162  eba40109          SUB      r1,r4,r9              ;798
000166  4640              MOV      r0,r8                 ;798
000168  f7fffffe          BL       wpabuf_put
00016c  f8cb8000          STR      r8,[r11,#0]           ;799
000170  6b38              LDR      r0,[r7,#0x30]         ;801
000172  2800              CMP      r0,#0                 ;801
000174  dd04              BLE      |L31.384|
000176  2002              MOVS     r0,#2                 ;804
000178  7128              STRB     r0,[r5,#4]            ;804
00017a  2001              MOVS     r0,#1                 ;805
00017c  7168              STRB     r0,[r5,#5]            ;805
00017e  e003              B        |L31.392|
                  |L31.384|
000180  2004              MOVS     r0,#4                 ;809
000182  7128              STRB     r0,[r5,#4]            ;809
000184  2001              MOVS     r0,#1                 ;810
000186  7168              STRB     r0,[r5,#5]            ;810
                  |L31.392|
000188  2000              MOVS     r0,#0                 ;813
00018a  e755              B        |L31.56|
;;;815    
                          ENDP

                  |L31.396|
00018c  4541502d          DCB      "EAP-TTLS: Phase 2 MSCHAP Request",0
000190  54544c53
000194  3a205068
000198  61736520
00019c  32204d53
0001a0  43484150
0001a4  20526571
0001a8  75657374
0001ac  00      
0001ad  00                DCB      0
0001ae  00                DCB      0
0001af  00                DCB      0
                  |L31.432|
0001b0  4541502d          DCB      "EAP-TTLS/MSCHAP: Failed to allocate memory",0
0001b4  54544c53
0001b8  2f4d5343
0001bc  4841503a
0001c0  20466169
0001c4  6c656420
0001c8  746f2061
0001cc  6c6c6f63
0001d0  61746520
0001d4  6d656d6f
0001d8  727900  
0001db  00                DCB      0
                  |L31.476|
0001dc  4541502d          DCB      "EAP-TTLS/MSCHAP: Failed to derive implicit challenge",0
0001e0  54544c53
0001e4  2f4d5343
0001e8  4841503a
0001ec  20466169
0001f0  6c656420
0001f4  746f2064
0001f8  65726976
0001fc  6520696d
000200  706c6963
000204  69742063
000208  68616c6c
00020c  656e6765
000210  00      
000211  00                DCB      0
000212  00                DCB      0
000213  00                DCB      0
                  |L31.532|
000214  4541502d          DCB      "EAP-TTLS: MSCHAP password hash",0
000218  54544c53
00021c  3a204d53
000220  43484150
000224  20706173
000228  73776f72
00022c  64206861
000230  736800  
000233  00                DCB      0
                  |L31.564|
000234  4541502d          DCB      "EAP-TTLS: MSCHAP password",0
000238  54544c53
00023c  3a204d53
000240  43484150
000244  20706173
000248  73776f72
00024c  6400    
00024e  00                DCB      0
00024f  00                DCB      0
                  |L31.592|
000250  4541502d          DCB      "EAP-TTLS: MSCHAP implicit challenge",0
000254  54544c53
000258  3a204d53
00025c  43484150
000260  20696d70
000264  6c696369
000268  74206368
00026c  616c6c65
000270  6e676500
                  |L31.628|
000274  4541502d          DCB      "EAP-TTLS: MSCHAP response",0
000278  54544c53
00027c  3a204d53
000280  43484150
000284  20726573
000288  706f6e73
00028c  6500    
00028e  00                DCB      0
00028f  00                DCB      0

                          AREA ||i.eap_ttls_phase2_request_mschapv2||, CODE, READONLY, ALIGN=2

                  eap_ttls_phase2_request_mschapv2 PROC
;;;637    
;;;638    static int eap_ttls_phase2_request_mschapv2(struct eap_sm *sm,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;639    					    struct eap_ttls_data *data,
;;;640    					    struct eap_method_ret *ret,
;;;641    					    struct wpabuf **resp)
;;;642    {
000004  b08b              SUB      sp,sp,#0x2c
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
;;;643    	struct wpabuf *msg;
;;;644    	u8 *buf, *pos, *challenge, *peer_challenge;
;;;645    	const u8 *identity, *password;
;;;646    	size_t identity_len, password_len;
;;;647    	int pwhash;
;;;648    
;;;649    	wpa_printf(MSG_DEBUG, "EAP-TTLS: Phase 2 MSCHAPV2 Request");
00000a  a163              ADR      r1,|L32.408|
00000c  2000              MOVS     r0,#0
00000e  f7fffffe          BL       wpa_printf
;;;650    
;;;651    	identity = eap_get_config_identity(sm, &identity_len);
000012  a909              ADD      r1,sp,#0x24
000014  980b              LDR      r0,[sp,#0x2c]
000016  f7fffffe          BL       eap_get_config_identity
00001a  4683              MOV      r11,r0
;;;652    	password = eap_get_config_password2(sm, &password_len, &pwhash);
00001c  aa07              ADD      r2,sp,#0x1c
00001e  a908              ADD      r1,sp,#0x20
000020  980b              LDR      r0,[sp,#0x2c]
000022  f7fffffe          BL       eap_get_config_password2
000026  900a              STR      r0,[sp,#0x28]
;;;653    	if (identity == NULL || password == NULL)
000028  f1bb0f00          CMP      r11,#0
00002c  d001              BEQ      |L32.50|
00002e  980a              LDR      r0,[sp,#0x28]
000030  b920              CBNZ     r0,|L32.60|
                  |L32.50|
;;;654    		return -1;
000032  f04f30ff          MOV      r0,#0xffffffff
                  |L32.54|
;;;655    
;;;656    	msg = wpabuf_alloc(identity_len + 1000);
;;;657    	if (msg == NULL) {
;;;658    		wpa_printf(MSG_ERROR,
;;;659    			   "EAP-TTLS/MSCHAPV2: Failed to allocate memory");
;;;660    		return -1;
;;;661    	}
;;;662    	pos = buf = wpabuf_mhead(msg);
;;;663    
;;;664    	/* User-Name */
;;;665    	pos = eap_ttls_avp_add(buf, pos, RADIUS_ATTR_USER_NAME, 0, 1,
;;;666    			       identity, identity_len);
;;;667    
;;;668    	/* MS-CHAP-Challenge */
;;;669    	challenge = eap_ttls_implicit_challenge(
;;;670    		sm, data, EAP_TTLS_MSCHAPV2_CHALLENGE_LEN + 1);
;;;671    	if (challenge == NULL) {
;;;672    		wpabuf_free(msg);
;;;673    		wpa_printf(MSG_ERROR, "EAP-TTLS/MSCHAPV2: Failed to derive "
;;;674    			   "implicit challenge");
;;;675    		return -1;
;;;676    	}
;;;677    	peer_challenge = challenge + 1 + EAP_TTLS_MSCHAPV2_CHALLENGE_LEN;
;;;678    
;;;679    	pos = eap_ttls_avp_add(buf, pos, RADIUS_ATTR_MS_CHAP_CHALLENGE,
;;;680    			       RADIUS_VENDOR_ID_MICROSOFT, 1,
;;;681    			       challenge, EAP_TTLS_MSCHAPV2_CHALLENGE_LEN);
;;;682    
;;;683    	/* MS-CHAP2-Response */
;;;684    	pos = eap_ttls_avp_hdr(pos, RADIUS_ATTR_MS_CHAP2_RESPONSE,
;;;685    			       RADIUS_VENDOR_ID_MICROSOFT, 1,
;;;686    			       EAP_TTLS_MSCHAPV2_RESPONSE_LEN);
;;;687    	data->ident = challenge[EAP_TTLS_MSCHAPV2_CHALLENGE_LEN];
;;;688    	*pos++ = data->ident;
;;;689    	*pos++ = 0; /* Flags */
;;;690    	os_memcpy(pos, peer_challenge, EAP_TTLS_MSCHAPV2_CHALLENGE_LEN);
;;;691    	pos += EAP_TTLS_MSCHAPV2_CHALLENGE_LEN;
;;;692    	os_memset(pos, 0, 8); /* Reserved, must be zero */
;;;693    	pos += 8;
;;;694    	if (mschapv2_derive_response(identity, identity_len, password,
;;;695    				     password_len, pwhash, challenge,
;;;696    				     peer_challenge, pos, data->auth_response,
;;;697    				     data->master_key)) {
;;;698    		wpabuf_free(msg);
;;;699    		wpa_printf(MSG_ERROR, "EAP-TTLS/MSCHAPV2: Failed to derive "
;;;700    			   "response");
;;;701    		return -1;
;;;702    	}
;;;703    	data->auth_response_valid = 1;
;;;704    
;;;705    	eap_ttlsv1_permute_inner(sm, data);
;;;706    
;;;707    	pos += 24;
;;;708    	os_free(challenge);
;;;709    	AVP_PAD(buf, pos);
;;;710    
;;;711    	wpabuf_put(msg, pos - buf);
;;;712    	*resp = msg;
;;;713    
;;;714    	if (sm->workaround && data->ttls_version == 0) {
;;;715    		/* At least FreeRADIUS seems to be terminating
;;;716    		 * EAP-TTLS/MSHCAPV2 without the expected MS-CHAP-v2 Success
;;;717    		 * packet. */
;;;718    		wpa_printf(MSG_DEBUG, "EAP-TTLS/MSCHAPV2: EAP workaround - "
;;;719    			   "allow success without tunneled response");
;;;720    		ret->methodState = METHOD_MAY_CONT;
;;;721    		ret->decision = DECISION_COND_SUCC;
;;;722    	}
;;;723    
;;;724    	return 0;
;;;725    }
000036  b00f              ADD      sp,sp,#0x3c
000038  e8bd8ff0          POP      {r4-r11,pc}
                  |L32.60|
00003c  9809              LDR      r0,[sp,#0x24]         ;656
00003e  f500707a          ADD      r0,r0,#0x3e8          ;656
000042  f7fffffe          BL       wpabuf_alloc
000046  4607              MOV      r7,r0                 ;656
000048  b937              CBNZ     r7,|L32.88|
00004a  a15c              ADR      r1,|L32.444|
00004c  2000              MOVS     r0,#0                 ;658
00004e  f7fffffe          BL       wpa_printf
000052  f04f30ff          MOV      r0,#0xffffffff        ;660
000056  e7ee              B        |L32.54|
                  |L32.88|
000058  4638              MOV      r0,r7                 ;662
00005a  f7fffffe          BL       wpabuf_mhead
00005e  4680              MOV      r8,r0                 ;662
000060  4604              MOV      r4,r0                 ;662
000062  2101              MOVS     r1,#1                 ;665
000064  9b09              LDR      r3,[sp,#0x24]         ;665
000066  e9cdb301          STRD     r11,r3,[sp,#4]        ;665
00006a  9100              STR      r1,[sp,#0]            ;665
00006c  2300              MOVS     r3,#0                 ;665
00006e  460a              MOV      r2,r1                 ;665
000070  4621              MOV      r1,r4                 ;665
000072  4640              MOV      r0,r8                 ;665
000074  f7fffffe          BL       eap_ttls_avp_add
000078  4604              MOV      r4,r0                 ;665
00007a  2211              MOVS     r2,#0x11              ;669
00007c  4629              MOV      r1,r5                 ;669
00007e  980b              LDR      r0,[sp,#0x2c]         ;669
000080  f7fffffe          BL       eap_ttls_implicit_challenge
000084  4606              MOV      r6,r0                 ;669
000086  b94e              CBNZ     r6,|L32.156|
000088  4638              MOV      r0,r7                 ;672
00008a  f7fffffe          BL       wpabuf_free
00008e  a157              ADR      r1,|L32.492|
000090  2000              MOVS     r0,#0                 ;673
000092  f7fffffe          BL       wpa_printf
000096  f04f30ff          MOV      r0,#0xffffffff        ;675
00009a  e7cc              B        |L32.54|
                  |L32.156|
00009c  f1060a11          ADD      r10,r6,#0x11          ;677
0000a0  2310              MOVS     r3,#0x10              ;679
0000a2  2101              MOVS     r1,#1                 ;679
0000a4  e9cd6301          STRD     r6,r3,[sp,#4]         ;679
0000a8  9100              STR      r1,[sp,#0]            ;679
0000aa  f2401337          MOV      r3,#0x137             ;679
0000ae  220b              MOVS     r2,#0xb               ;679
0000b0  4621              MOV      r1,r4                 ;679
0000b2  4640              MOV      r0,r8                 ;679
0000b4  f7fffffe          BL       eap_ttls_avp_add
0000b8  4604              MOV      r4,r0                 ;679
0000ba  2332              MOVS     r3,#0x32              ;684
0000bc  9300              STR      r3,[sp,#0]            ;684
0000be  2301              MOVS     r3,#1                 ;684
0000c0  f2401237          MOV      r2,#0x137             ;684
0000c4  2119              MOVS     r1,#0x19              ;684
0000c6  4620              MOV      r0,r4                 ;684
0000c8  f7fffffe          BL       eap_ttls_avp_hdr
0000cc  4604              MOV      r4,r0                 ;684
0000ce  7c30              LDRB     r0,[r6,#0x10]         ;687
0000d0  f8850084          STRB     r0,[r5,#0x84]         ;687
0000d4  f8950084          LDRB     r0,[r5,#0x84]         ;688
0000d8  f8040b01          STRB     r0,[r4],#1            ;688
0000dc  2000              MOVS     r0,#0                 ;689
0000de  f8040b01          STRB     r0,[r4],#1            ;689
0000e2  2210              MOVS     r2,#0x10              ;690
0000e4  4651              MOV      r1,r10                ;690
0000e6  4620              MOV      r0,r4                 ;690
0000e8  f7fffffe          BL       os_memcpy
0000ec  3410              ADDS     r4,r4,#0x10           ;691
0000ee  2208              MOVS     r2,#8                 ;692
0000f0  2100              MOVS     r1,#0                 ;692
0000f2  4620              MOV      r0,r4                 ;692
0000f4  f7fffffe          BL       os_memset
0000f8  3408              ADDS     r4,r4,#8              ;693
0000fa  f1050374          ADD      r3,r5,#0x74           ;694
0000fe  f105025c          ADD      r2,r5,#0x5c           ;694
000102  e9cda402          STRD     r10,r4,[sp,#8]        ;694
000106  e9cd2304          STRD     r2,r3,[sp,#0x10]      ;694
00010a  9a07              LDR      r2,[sp,#0x1c]         ;694
00010c  e9cd2600          STRD     r2,r6,[sp,#0]         ;694
000110  4658              MOV      r0,r11                ;694
000112  e9dd3108          LDRD     r3,r1,[sp,#0x20]      ;694
000116  9a0a              LDR      r2,[sp,#0x28]         ;694
000118  f7fffffe          BL       mschapv2_derive_response
00011c  b148              CBZ      r0,|L32.306|
00011e  4638              MOV      r0,r7                 ;698
000120  f7fffffe          BL       wpabuf_free
000124  a13f              ADR      r1,|L32.548|
000126  2000              MOVS     r0,#0                 ;699
000128  f7fffffe          BL       wpa_printf
00012c  f04f30ff          MOV      r0,#0xffffffff        ;701
000130  e781              B        |L32.54|
                  |L32.306|
000132  2001              MOVS     r0,#1                 ;703
000134  6728              STR      r0,[r5,#0x70]         ;703
000136  4629              MOV      r1,r5                 ;705
000138  980b              LDR      r0,[sp,#0x2c]         ;705
00013a  f7fffffe          BL       eap_ttlsv1_permute_inner
00013e  3418              ADDS     r4,r4,#0x18           ;707
000140  4630              MOV      r0,r6                 ;708
000142  f7fffffe          BL       os_free
000146  bf00              NOP                            ;709
000148  eba40008          SUB      r0,r4,r8              ;709
00014c  4240              RSBS     r0,r0,#0              ;709
00014e  f0000003          AND      r0,r0,#3              ;709
000152  9006              STR      r0,[sp,#0x18]         ;709
000154  2100              MOVS     r1,#0                 ;709
000156  4620              MOV      r0,r4                 ;709
000158  9a06              LDR      r2,[sp,#0x18]         ;709
00015a  f7fffffe          BL       os_memset
00015e  9806              LDR      r0,[sp,#0x18]         ;709
000160  4404              ADD      r4,r4,r0              ;709
000162  bf00              NOP                            ;709
000164  eba40108          SUB      r1,r4,r8              ;711
000168  4638              MOV      r0,r7                 ;711
00016a  f7fffffe          BL       wpabuf_put
00016e  980e              LDR      r0,[sp,#0x38]         ;712
000170  6007              STR      r7,[r0,#0]            ;712
000172  980b              LDR      r0,[sp,#0x2c]         ;714
000174  f8d0009c          LDR      r0,[r0,#0x9c]         ;714
000178  b158              CBZ      r0,|L32.402|
00017a  6b28              LDR      r0,[r5,#0x30]         ;714
00017c  b948              CBNZ     r0,|L32.402|
00017e  4935              LDR      r1,|L32.596|
000180  2000              MOVS     r0,#0                 ;718
000182  f7fffffe          BL       wpa_printf
000186  2003              MOVS     r0,#3                 ;720
000188  f8890004          STRB     r0,[r9,#4]            ;720
00018c  2001              MOVS     r0,#1                 ;721
00018e  f8890005          STRB     r0,[r9,#5]            ;721
                  |L32.402|
000192  2000              MOVS     r0,#0                 ;724
000194  e74f              B        |L32.54|
;;;726    
                          ENDP

000196  0000              DCW      0x0000
                  |L32.408|
000198  4541502d          DCB      "EAP-TTLS: Phase 2 MSCHAPV2 Request",0
00019c  54544c53
0001a0  3a205068
0001a4  61736520
0001a8  32204d53
0001ac  43484150
0001b0  56322052
0001b4  65717565
0001b8  737400  
0001bb  00                DCB      0
                  |L32.444|
0001bc  4541502d          DCB      "EAP-TTLS/MSCHAPV2: Failed to allocate memory",0
0001c0  54544c53
0001c4  2f4d5343
0001c8  48415056
0001cc  323a2046
0001d0  61696c65
0001d4  6420746f
0001d8  20616c6c
0001dc  6f636174
0001e0  65206d65
0001e4  6d6f7279
0001e8  00      
0001e9  00                DCB      0
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L32.492|
0001ec  4541502d          DCB      "EAP-TTLS/MSCHAPV2: Failed to derive implicit challenge",0
0001f0  54544c53
0001f4  2f4d5343
0001f8  48415056
0001fc  323a2046
000200  61696c65
000204  6420746f
000208  20646572
00020c  69766520
000210  696d706c
000214  69636974
000218  20636861
00021c  6c6c656e
000220  676500  
000223  00                DCB      0
                  |L32.548|
000224  4541502d          DCB      "EAP-TTLS/MSCHAPV2: Failed to derive response",0
000228  54544c53
00022c  2f4d5343
000230  48415056
000234  323a2046
000238  61696c65
00023c  6420746f
000240  20646572
000244  69766520
000248  72657370
00024c  6f6e7365
000250  00      
000251  00                DCB      0
000252  00                DCB      0
000253  00                DCB      0
                  |L32.596|
                          DCD      ||.constdata||

                          AREA ||i.eap_ttls_phase2_request_pap||, CODE, READONLY, ALIGN=2

                  eap_ttls_phase2_request_pap PROC
;;;816    
;;;817    static int eap_ttls_phase2_request_pap(struct eap_sm *sm,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;818    				       struct eap_ttls_data *data,
;;;819    				       struct eap_method_ret *ret,
;;;820    				       struct wpabuf **resp)
;;;821    {
000004  b087              SUB      sp,sp,#0x1c
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
;;;822    	struct wpabuf *msg;
;;;823    	u8 *buf, *pos;
;;;824    	size_t pad;
;;;825    	const u8 *identity, *password;
;;;826    	size_t identity_len, password_len;
;;;827    
;;;828    	wpa_printf(MSG_DEBUG, "EAP-TTLS: Phase 2 PAP Request");
00000c  a13e              ADR      r1,|L33.264|
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       wpa_printf
;;;829    
;;;830    	identity = eap_get_config_identity(sm, &identity_len);
000014  a905              ADD      r1,sp,#0x14
000016  9807              LDR      r0,[sp,#0x1c]
000018  f7fffffe          BL       eap_get_config_identity
00001c  4683              MOV      r11,r0
;;;831    	password = eap_get_config_password(sm, &password_len);
00001e  a904              ADD      r1,sp,#0x10
000020  9807              LDR      r0,[sp,#0x1c]
000022  f7fffffe          BL       eap_get_config_password
000026  9006              STR      r0,[sp,#0x18]
;;;832    	if (identity == NULL || password == NULL)
000028  f1bb0f00          CMP      r11,#0
00002c  d001              BEQ      |L33.50|
00002e  9806              LDR      r0,[sp,#0x18]
000030  b920              CBNZ     r0,|L33.60|
                  |L33.50|
;;;833    		return -1;
000032  f04f30ff          MOV      r0,#0xffffffff
                  |L33.54|
;;;834    
;;;835    	msg = wpabuf_alloc(identity_len + password_len + 100);
;;;836    	if (msg == NULL) {
;;;837    		wpa_printf(MSG_ERROR,
;;;838    			   "EAP-TTLS/PAP: Failed to allocate memory");
;;;839    		return -1;
;;;840    	}
;;;841    	pos = buf = wpabuf_mhead(msg);
;;;842    
;;;843    	/* User-Name */
;;;844    	pos = eap_ttls_avp_add(buf, pos, RADIUS_ATTR_USER_NAME, 0, 1,
;;;845    			       identity, identity_len);
;;;846    
;;;847    	/* User-Password; in RADIUS, this is encrypted, but EAP-TTLS encrypts
;;;848    	 * the data, so no separate encryption is used in the AVP itself.
;;;849    	 * However, the password is padded to obfuscate its length. */
;;;850    	pad = password_len == 0 ? 16 : (16 - (password_len & 15)) & 15;
;;;851    	pos = eap_ttls_avp_hdr(pos, RADIUS_ATTR_USER_PASSWORD, 0, 1,
;;;852    			       password_len + pad);
;;;853    	os_memcpy(pos, password, password_len);
;;;854    	pos += password_len;
;;;855    	os_memset(pos, 0, pad);
;;;856    	pos += pad;
;;;857    	AVP_PAD(buf, pos);
;;;858    
;;;859    	wpabuf_put(msg, pos - buf);
;;;860    	*resp = msg;
;;;861    
;;;862    	if (data->ttls_version > 0) {
;;;863    		/* EAP-TTLSv1 uses TLS/IA FinalPhaseFinished to report success,
;;;864    		 * so do not allow connection to be terminated yet. */
;;;865    		ret->methodState = METHOD_CONT;
;;;866    		ret->decision = DECISION_COND_SUCC;
;;;867    	} else {
;;;868    		/* EAP-TTLS/PAP does not provide tunneled success notification,
;;;869    		 * so assume that Phase2 succeeds. */
;;;870    		ret->methodState = METHOD_DONE;
;;;871    		ret->decision = DECISION_COND_SUCC;
;;;872    	}
;;;873    
;;;874    	return 0;
;;;875    }
000036  b00b              ADD      sp,sp,#0x2c
000038  e8bd8ff0          POP      {r4-r11,pc}
                  |L33.60|
00003c  e9dd2104          LDRD     r2,r1,[sp,#0x10]      ;835
000040  4411              ADD      r1,r1,r2              ;835
000042  f1010064          ADD      r0,r1,#0x64           ;835
000046  f7fffffe          BL       wpabuf_alloc
00004a  4606              MOV      r6,r0                 ;835
00004c  b936              CBNZ     r6,|L33.92|
00004e  a136              ADR      r1,|L33.296|
000050  2000              MOVS     r0,#0                 ;837
000052  f7fffffe          BL       wpa_printf
000056  f04f30ff          MOV      r0,#0xffffffff        ;839
00005a  e7ec              B        |L33.54|
                  |L33.92|
00005c  4630              MOV      r0,r6                 ;841
00005e  f7fffffe          BL       wpabuf_mhead
000062  4607              MOV      r7,r0                 ;841
000064  4604              MOV      r4,r0                 ;841
000066  2101              MOVS     r1,#1                 ;844
000068  9b05              LDR      r3,[sp,#0x14]         ;844
00006a  e9cdb301          STRD     r11,r3,[sp,#4]        ;844
00006e  9100              STR      r1,[sp,#0]            ;844
000070  2300              MOVS     r3,#0                 ;844
000072  460a              MOV      r2,r1                 ;844
000074  4621              MOV      r1,r4                 ;844
000076  4638              MOV      r0,r7                 ;844
000078  f7fffffe          BL       eap_ttls_avp_add
00007c  4604              MOV      r4,r0                 ;844
00007e  9804              LDR      r0,[sp,#0x10]         ;850
000080  b908              CBNZ     r0,|L33.134|
000082  2010              MOVS     r0,#0x10              ;850
000084  e003              B        |L33.142|
                  |L33.134|
000086  9804              LDR      r0,[sp,#0x10]         ;850
000088  4240              RSBS     r0,r0,#0              ;850
00008a  f000000f          AND      r0,r0,#0xf            ;850
                  |L33.142|
00008e  4680              MOV      r8,r0                 ;850
000090  9804              LDR      r0,[sp,#0x10]         ;851
000092  eb000308          ADD      r3,r0,r8              ;851
000096  9300              STR      r3,[sp,#0]            ;851
000098  2301              MOVS     r3,#1                 ;851
00009a  2200              MOVS     r2,#0                 ;851
00009c  2102              MOVS     r1,#2                 ;851
00009e  4620              MOV      r0,r4                 ;851
0000a0  f7fffffe          BL       eap_ttls_avp_hdr
0000a4  4604              MOV      r4,r0                 ;851
0000a6  4620              MOV      r0,r4                 ;853
0000a8  9a04              LDR      r2,[sp,#0x10]         ;853
0000aa  9906              LDR      r1,[sp,#0x18]         ;853
0000ac  f7fffffe          BL       os_memcpy
0000b0  9804              LDR      r0,[sp,#0x10]         ;854
0000b2  4404              ADD      r4,r4,r0              ;854
0000b4  4642              MOV      r2,r8                 ;855
0000b6  2100              MOVS     r1,#0                 ;855
0000b8  4620              MOV      r0,r4                 ;855
0000ba  f7fffffe          BL       os_memset
0000be  4444              ADD      r4,r4,r8              ;856
0000c0  bf00              NOP                            ;857
0000c2  1be0              SUBS     r0,r4,r7              ;857
0000c4  4240              RSBS     r0,r0,#0              ;857
0000c6  f0000003          AND      r0,r0,#3              ;857
0000ca  9003              STR      r0,[sp,#0xc]          ;857
0000cc  2100              MOVS     r1,#0                 ;857
0000ce  4620              MOV      r0,r4                 ;857
0000d0  9a03              LDR      r2,[sp,#0xc]          ;857
0000d2  f7fffffe          BL       os_memset
0000d6  9803              LDR      r0,[sp,#0xc]          ;857
0000d8  4404              ADD      r4,r4,r0              ;857
0000da  bf00              NOP                            ;857
0000dc  1be1              SUBS     r1,r4,r7              ;859
0000de  4630              MOV      r0,r6                 ;859
0000e0  f7fffffe          BL       wpabuf_put
0000e4  f8ca6000          STR      r6,[r10,#0]           ;860
0000e8  f8d90030          LDR      r0,[r9,#0x30]         ;862
0000ec  2800              CMP      r0,#0                 ;862
0000ee  dd04              BLE      |L33.250|
0000f0  2002              MOVS     r0,#2                 ;865
0000f2  7128              STRB     r0,[r5,#4]            ;865
0000f4  2001              MOVS     r0,#1                 ;866
0000f6  7168              STRB     r0,[r5,#5]            ;866
0000f8  e003              B        |L33.258|
                  |L33.250|
0000fa  2004              MOVS     r0,#4                 ;870
0000fc  7128              STRB     r0,[r5,#4]            ;870
0000fe  2001              MOVS     r0,#1                 ;871
000100  7168              STRB     r0,[r5,#5]            ;871
                  |L33.258|
000102  2000              MOVS     r0,#0                 ;874
000104  e797              B        |L33.54|
;;;876    
                          ENDP

000106  0000              DCW      0x0000
                  |L33.264|
000108  4541502d          DCB      "EAP-TTLS: Phase 2 PAP Request",0
00010c  54544c53
000110  3a205068
000114  61736520
000118  32205041
00011c  50205265
000120  71756573
000124  7400    
000126  00                DCB      0
000127  00                DCB      0
                  |L33.296|
000128  4541502d          DCB      "EAP-TTLS/PAP: Failed to allocate memory",0
00012c  54544c53
000130  2f504150
000134  3a204661
000138  696c6564
00013c  20746f20
000140  616c6c6f
000144  63617465
000148  206d656d
00014c  6f727900

                          AREA ||i.eap_ttls_phase2_select_eap_method||, CODE, READONLY, ALIGN=2

                  eap_ttls_phase2_select_eap_method PROC
;;;453    
;;;454    static void eap_ttls_phase2_select_eap_method(struct eap_ttls_data *data,
000000  b570              PUSH     {r4-r6,lr}
;;;455    					      u8 method)
;;;456    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;457    	size_t i;
;;;458    	for (i = 0; i < data->num_phase2_eap_types; i++) {
000006  2500              MOVS     r5,#0
000008  e01b              B        |L34.66|
                  |L34.10|
;;;459    		if (data->phase2_eap_types[i].vendor != EAP_VENDOR_IETF ||
00000a  6d60              LDR      r0,[r4,#0x54]
00000c  f8500035          LDR      r0,[r0,r5,LSL #3]
000010  b928              CBNZ     r0,|L34.30|
;;;460    		    data->phase2_eap_types[i].method != method)
000012  6d60              LDR      r0,[r4,#0x54]
000014  eb0000c5          ADD      r0,r0,r5,LSL #3
000018  6840              LDR      r0,[r0,#4]
00001a  42b0              CMP      r0,r6
00001c  d000              BEQ      |L34.32|
                  |L34.30|
;;;461    			continue;
00001e  e00f              B        |L34.64|
                  |L34.32|
;;;462    
;;;463    		data->phase2_eap_type.vendor =
000020  6d60              LDR      r0,[r4,#0x54]
000022  f8500035          LDR      r0,[r0,r5,LSL #3]
000026  64e0              STR      r0,[r4,#0x4c]
;;;464    			data->phase2_eap_types[i].vendor;
;;;465    		data->phase2_eap_type.method =
000028  6d60              LDR      r0,[r4,#0x54]
00002a  eb0000c5          ADD      r0,r0,r5,LSL #3
00002e  6841              LDR      r1,[r0,#4]
000030  6521              STR      r1,[r4,#0x50]
;;;466    			data->phase2_eap_types[i].method;
;;;467    		wpa_printf(MSG_DEBUG, "EAP-TTLS: Selected "
000032  a106              ADR      r1,|L34.76|
000034  2000              MOVS     r0,#0
000036  e9d42313          LDRD     r2,r3,[r4,#0x4c]
00003a  f7fffffe          BL       wpa_printf
;;;468    			   "Phase 2 EAP vendor %d method %d",
;;;469    			   data->phase2_eap_type.vendor,
;;;470    			   data->phase2_eap_type.method);
;;;471    		break;
00003e  e003              B        |L34.72|
                  |L34.64|
000040  1c6d              ADDS     r5,r5,#1              ;458
                  |L34.66|
000042  6da0              LDR      r0,[r4,#0x58]         ;458
000044  42a8              CMP      r0,r5                 ;458
000046  d8e0              BHI      |L34.10|
                  |L34.72|
000048  bf00              NOP      
;;;472    	}
;;;473    }
00004a  bd70              POP      {r4-r6,pc}
;;;474    
                          ENDP

                  |L34.76|
00004c  4541502d          DCB      "EAP-TTLS: Selected Phase 2 EAP vendor %d method %d",0
000050  54544c53
000054  3a205365
000058  6c656374
00005c  65642050
000060  68617365
000064  20322045
000068  41502076
00006c  656e646f
000070  72202564
000074  206d6574
000078  686f6420
00007c  256400  
00007f  00                DCB      0

                          AREA ||i.eap_ttls_phase2_start||, CODE, READONLY, ALIGN=2

                  eap_ttls_phase2_start PROC
;;;1551   
;;;1552   static int eap_ttls_phase2_start(struct eap_sm *sm, struct eap_ttls_data *data,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1553   				 struct eap_method_ret *ret, u8 identifier,
;;;1554   				 struct wpabuf **out_data)
;;;1555   {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;1556   	data->phase2_start = 0;
000010  2000              MOVS     r0,#0
000012  6460              STR      r0,[r4,#0x44]
;;;1557   
;;;1558   	/*
;;;1559   	 * EAP-TTLS does not use Phase2 on fast re-auth; this must be done only
;;;1560   	 * if TLS part was indeed resuming a previous session. Most
;;;1561   	 * Authentication Servers terminate EAP-TTLS before reaching this
;;;1562   	 * point, but some do not. Make wpa_supplicant stop phase 2 here, if
;;;1563   	 * needed.
;;;1564   	 */
;;;1565   	if (data->reauth &&
000014  f8d4008c          LDR      r0,[r4,#0x8c]
000018  b1c8              CBZ      r0,|L35.78|
;;;1566   	    tls_connection_resumed(sm->ssl_ctx, data->ssl.conn)) {
00001a  6821              LDR      r1,[r4,#0]
00001c  f8d60098          LDR      r0,[r6,#0x98]
000020  f7fffffe          BL       tls_connection_resumed
000024  b198              CBZ      r0,|L35.78|
;;;1567   		wpa_printf(MSG_DEBUG, "EAP-TTLS: Session resumption - "
000026  a10e              ADR      r1,|L35.96|
000028  2000              MOVS     r0,#0
00002a  f7fffffe          BL       wpa_printf
;;;1568   			   "skip phase 2");
;;;1569   		*out_data = eap_peer_tls_build_ack(identifier, EAP_TYPE_TTLS,
00002e  2115              MOVS     r1,#0x15
000030  4638              MOV      r0,r7
000032  6b22              LDR      r2,[r4,#0x30]
000034  f7fffffe          BL       eap_peer_tls_build_ack
000038  f8c80000          STR      r0,[r8,#0]
;;;1570   						   data->ttls_version);
;;;1571   		ret->methodState = METHOD_DONE;
00003c  2004              MOVS     r0,#4
00003e  7128              STRB     r0,[r5,#4]
;;;1572   		ret->decision = DECISION_UNCOND_SUCC;
000040  2002              MOVS     r0,#2
000042  7168              STRB     r0,[r5,#5]
;;;1573   		data->phase2_success = 1;
000044  2001              MOVS     r0,#1
000046  6420              STR      r0,[r4,#0x40]
;;;1574   		return 0;
000048  2000              MOVS     r0,#0
                  |L35.74|
;;;1575   	}
;;;1576   
;;;1577   	return eap_ttls_implicit_identity_request(sm, data, ret, identifier,
;;;1578   						  out_data);
;;;1579   }
00004a  e8bd83f8          POP      {r3-r9,pc}
                  |L35.78|
00004e  463b              MOV      r3,r7                 ;1577
000050  462a              MOV      r2,r5                 ;1577
000052  4621              MOV      r1,r4                 ;1577
000054  4630              MOV      r0,r6                 ;1577
000056  f8cd8000          STR      r8,[sp,#0]            ;1577
00005a  f7fffffe          BL       eap_ttls_implicit_identity_request
00005e  e7f4              B        |L35.74|
;;;1580   
                          ENDP

                  |L35.96|
000060  4541502d          DCB      "EAP-TTLS: Session resumption - skip phase 2",0
000064  54544c53
000068  3a205365
00006c  7373696f
000070  6e207265
000074  73756d70
000078  74696f6e
00007c  202d2073
000080  6b697020
000084  70686173
000088  65203200

                          AREA ||i.eap_ttls_process||, CODE, READONLY, ALIGN=2

                  eap_ttls_process PROC
;;;1792   
;;;1793   static struct wpabuf * eap_ttls_process(struct eap_sm *sm, void *priv,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1794   					struct eap_method_ret *ret,
;;;1795   					const struct wpabuf *reqData)
;;;1796   {
000004  b089              SUB      sp,sp,#0x24
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4614              MOV      r4,r2
00000c  461f              MOV      r7,r3
;;;1797   	size_t left;
;;;1798   	int res;
;;;1799   	u8 flags, id;
;;;1800   	struct wpabuf *resp;
;;;1801   	const u8 *pos;
;;;1802   	struct eap_ttls_data *data = priv;
00000e  464d              MOV      r5,r9
;;;1803   
;;;1804   	pos = eap_peer_tls_process_init(sm, &data->ssl, EAP_TYPE_TTLS, ret,
000010  ab07              ADD      r3,sp,#0x1c
000012  aa08              ADD      r2,sp,#0x20
000014  e9cd7200          STRD     r7,r2,[sp,#0]
000018  9302              STR      r3,[sp,#8]
00001a  4623              MOV      r3,r4
00001c  2215              MOVS     r2,#0x15
00001e  4629              MOV      r1,r5
000020  4640              MOV      r0,r8
000022  f7fffffe          BL       eap_peer_tls_process_init
000026  4682              MOV      r10,r0
;;;1805   					reqData, &left, &flags);
;;;1806   	if (pos == NULL)
000028  f1ba0f00          CMP      r10,#0
00002c  d103              BNE      |L36.54|
;;;1807   		return NULL;
00002e  2000              MOVS     r0,#0
                  |L36.48|
;;;1808   	id = eap_get_id(reqData);
;;;1809   
;;;1810   	if (flags & EAP_TLS_FLAGS_START) {
;;;1811   		if (eap_ttls_process_start(sm, data, flags, ret) < 0)
;;;1812   			return NULL;
;;;1813   
;;;1814   		/* RFC 5281, Ch. 9.2:
;;;1815   		 * "This packet MAY contain additional information in the form
;;;1816   		 * of AVPs, which may provide useful hints to the client"
;;;1817   		 * For now, ignore any potential extra data.
;;;1818   		 */
;;;1819   		left = 0;
;;;1820   	} else if (!data->ssl_initialized) {
;;;1821   		wpa_printf(MSG_DEBUG, "EAP-TTLS: First message did not "
;;;1822   			   "include Start flag");
;;;1823   		ret->methodState = METHOD_DONE;
;;;1824   		ret->decision = DECISION_FAIL;
;;;1825   		ret->allowNotifications = FALSE;
;;;1826   		return NULL;
;;;1827   	}
;;;1828   
;;;1829   	resp = NULL;
;;;1830   	if (tls_connection_established(sm->ssl_ctx, data->ssl.conn) &&
;;;1831   	    !data->resuming) {
;;;1832   		struct wpabuf msg;
;;;1833   		wpabuf_set(&msg, pos, left);
;;;1834   		res = eap_ttls_decrypt(sm, data, ret, id, &msg, &resp);
;;;1835   	} else {
;;;1836   		res = eap_ttls_process_handshake(sm, data, ret, id,
;;;1837   						 pos, left, &resp);
;;;1838   	}
;;;1839   
;;;1840   	eap_ttls_check_auth_status(sm, data, ret);
;;;1841   
;;;1842   	/* FIX: what about res == -1? Could just move all error processing into
;;;1843   	 * the other functions and get rid of this res==1 case here. */
;;;1844   	if (res == 1) {
;;;1845   		wpabuf_free(resp);
;;;1846   		return eap_peer_tls_build_ack(id, EAP_TYPE_TTLS,
;;;1847   					      data->ttls_version);
;;;1848   	}
;;;1849   	return resp;
;;;1850   }
000030  b009              ADD      sp,sp,#0x24
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L36.54|
000036  4638              MOV      r0,r7                 ;1808
000038  f7fffffe          BL       eap_get_id
00003c  4683              MOV      r11,r0                ;1808
00003e  f89d001c          LDRB     r0,[sp,#0x1c]         ;1810
000042  f0100f20          TST      r0,#0x20              ;1810
000046  d00d              BEQ      |L36.100|
000048  4623              MOV      r3,r4                 ;1811
00004a  f89d201c          LDRB     r2,[sp,#0x1c]         ;1811
00004e  4629              MOV      r1,r5                 ;1811
000050  4640              MOV      r0,r8                 ;1811
000052  f7fffffe          BL       eap_ttls_process_start
000056  2800              CMP      r0,#0                 ;1811
000058  da01              BGE      |L36.94|
00005a  2000              MOVS     r0,#0                 ;1812
00005c  e7e8              B        |L36.48|
                  |L36.94|
00005e  2000              MOVS     r0,#0                 ;1819
000060  9008              STR      r0,[sp,#0x20]         ;1819
000062  e00b              B        |L36.124|
                  |L36.100|
000064  6ae8              LDR      r0,[r5,#0x2c]         ;1820
000066  b948              CBNZ     r0,|L36.124|
000068  a121              ADR      r1,|L36.240|
00006a  2000              MOVS     r0,#0                 ;1821
00006c  f7fffffe          BL       wpa_printf
000070  2004              MOVS     r0,#4                 ;1823
000072  7120              STRB     r0,[r4,#4]            ;1823
000074  2000              MOVS     r0,#0                 ;1824
000076  7160              STRB     r0,[r4,#5]            ;1824
000078  60a0              STR      r0,[r4,#8]            ;1825
00007a  e7d9              B        |L36.48|
                  |L36.124|
00007c  2000              MOVS     r0,#0                 ;1829
00007e  9006              STR      r0,[sp,#0x18]         ;1829
000080  6829              LDR      r1,[r5,#0]            ;1830
000082  f8d80098          LDR      r0,[r8,#0x98]         ;1830
000086  f7fffffe          BL       tls_connection_established
00008a  b198              CBZ      r0,|L36.180|
00008c  f8d50088          LDR      r0,[r5,#0x88]         ;1831
000090  b980              CBNZ     r0,|L36.180|
000092  4651              MOV      r1,r10                ;1833
000094  a803              ADD      r0,sp,#0xc            ;1833
000096  9a08              LDR      r2,[sp,#0x20]         ;1833
000098  f7fffffe          BL       wpabuf_set
00009c  ab06              ADD      r3,sp,#0x18           ;1834
00009e  aa03              ADD      r2,sp,#0xc            ;1834
0000a0  e9cd2300          STRD     r2,r3,[sp,#0]         ;1834
0000a4  465b              MOV      r3,r11                ;1834
0000a6  4622              MOV      r2,r4                 ;1834
0000a8  4629              MOV      r1,r5                 ;1834
0000aa  4640              MOV      r0,r8                 ;1834
0000ac  f7fffffe          BL       eap_ttls_decrypt
0000b0  4606              MOV      r6,r0                 ;1834
0000b2  e00b              B        |L36.204|
                  |L36.180|
0000b4  ab06              ADD      r3,sp,#0x18           ;1836
0000b6  9a08              LDR      r2,[sp,#0x20]         ;1836
0000b8  e9cda200          STRD     r10,r2,[sp,#0]        ;1836
0000bc  9302              STR      r3,[sp,#8]            ;1836
0000be  465b              MOV      r3,r11                ;1836
0000c0  4622              MOV      r2,r4                 ;1836
0000c2  4629              MOV      r1,r5                 ;1836
0000c4  4640              MOV      r0,r8                 ;1836
0000c6  f7fffffe          BL       eap_ttls_process_handshake
0000ca  4606              MOV      r6,r0                 ;1836
                  |L36.204|
0000cc  4622              MOV      r2,r4                 ;1840
0000ce  4629              MOV      r1,r5                 ;1840
0000d0  4640              MOV      r0,r8                 ;1840
0000d2  f7fffffe          BL       eap_ttls_check_auth_status
0000d6  2e01              CMP      r6,#1                 ;1844
0000d8  d108              BNE      |L36.236|
0000da  9806              LDR      r0,[sp,#0x18]         ;1845
0000dc  f7fffffe          BL       wpabuf_free
0000e0  2115              MOVS     r1,#0x15              ;1846
0000e2  4658              MOV      r0,r11                ;1846
0000e4  6b2a              LDR      r2,[r5,#0x30]         ;1846
0000e6  f7fffffe          BL       eap_peer_tls_build_ack
0000ea  e7a1              B        |L36.48|
                  |L36.236|
0000ec  9806              LDR      r0,[sp,#0x18]         ;1849
0000ee  e79f              B        |L36.48|
;;;1851   
                          ENDP

                  |L36.240|
0000f0  4541502d          DCB      "EAP-TTLS: First message did not include Start flag",0
0000f4  54544c53
0000f8  3a204669
0000fc  72737420
000100  6d657373
000104  61676520
000108  64696420
00010c  6e6f7420
000110  696e636c
000114  75646520
000118  53746172
00011c  7420666c
000120  616700  
000123  00                DCB      0

                          AREA ||i.eap_ttls_process_decrypted||, CODE, READONLY, ALIGN=2

                  eap_ttls_process_decrypted PROC
;;;1422   
;;;1423   static int eap_ttls_process_decrypted(struct eap_sm *sm,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1424   				      struct eap_ttls_data *data,
;;;1425   				      struct eap_method_ret *ret,
;;;1426   				      u8 identifier,
;;;1427   				      struct ttls_parse_avp *parse,
;;;1428   				      struct wpabuf *in_decrypted,
;;;1429   				      struct wpabuf **out_data)
;;;1430   {
000004  b083              SUB      sp,sp,#0xc
000006  4607              MOV      r7,r0
000008  460c              MOV      r4,r1
00000a  4690              MOV      r8,r2
00000c  4699              MOV      r9,r3
00000e  e9ddab10          LDRD     r10,r11,[sp,#0x40]
;;;1431   	struct wpabuf *resp = NULL;
000012  2000              MOVS     r0,#0
000014  9002              STR      r0,[sp,#8]
;;;1432   	struct eap_peer_config *config = eap_get_config(sm);
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       eap_get_config
00001c  4605              MOV      r5,r0
;;;1433   	int res;
;;;1434   	enum phase2_types phase2_type = data->phase2_type;
00001e  f8946048          LDRB     r6,[r4,#0x48]
;;;1435   
;;;1436   #ifdef EAP_TNC
;;;1437   	if (data->tnc_started)
;;;1438   		phase2_type = EAP_TTLS_PHASE2_EAP;
;;;1439   #endif /* EAP_TNC */
;;;1440   
;;;1441   	switch (phase2_type) {
000022  2e05              CMP      r6,#5
000024  d226              BCS      |L37.116|
000026  e8dff006          TBB      [pc,r6]
00002a  0313              DCB      0x03,0x13
00002c  1c1d1e00          DCB      0x1c,0x1d,0x1e,0x00
;;;1442   	case EAP_TTLS_PHASE2_EAP:
;;;1443   		if (eap_ttls_process_phase2_eap(sm, data, ret, parse, &resp) <
000030  ab02              ADD      r3,sp,#8
000032  9300              STR      r3,[sp,#0]
000034  4653              MOV      r3,r10
000036  4642              MOV      r2,r8
000038  4621              MOV      r1,r4
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       eap_ttls_process_phase2_eap
000040  2800              CMP      r0,#0
000042  da04              BGE      |L37.78|
;;;1444   		    0)
;;;1445   			return -1;
000044  f04f30ff          MOV      r0,#0xffffffff
                  |L37.72|
;;;1446   		break;
;;;1447   	case EAP_TTLS_PHASE2_MSCHAPV2:
;;;1448   		res = eap_ttls_process_phase2_mschapv2(sm, data, ret, parse);
;;;1449   #ifdef EAP_TNC
;;;1450   		if (res == 1 && parse->eapdata && data->phase2_success) {
;;;1451   			/*
;;;1452   			 * TNC may be required as the next
;;;1453   			 * authentication method within the tunnel.
;;;1454   			 */
;;;1455   			ret->methodState = METHOD_MAY_CONT;
;;;1456   			data->ready_for_tnc = 1;
;;;1457   			if (eap_ttls_process_tnc_start(sm, data, ret, parse,
;;;1458   						       &resp) == 0)
;;;1459   				break;
;;;1460   		}
;;;1461   #endif /* EAP_TNC */
;;;1462   		return res;
;;;1463   	case EAP_TTLS_PHASE2_MSCHAP:
;;;1464   	case EAP_TTLS_PHASE2_PAP:
;;;1465   	case EAP_TTLS_PHASE2_CHAP:
;;;1466   #ifdef EAP_TNC
;;;1467   		if (eap_ttls_process_tnc_start(sm, data, ret, parse, &resp) <
;;;1468   		    0)
;;;1469   			return -1;
;;;1470   		break;
;;;1471   #else /* EAP_TNC */
;;;1472   		/* EAP-TTLS/{MSCHAP,PAP,CHAP} should not send any TLS tunneled
;;;1473   		 * requests to the supplicant */
;;;1474   		wpa_printf(MSG_INFO, "EAP-TTLS: Phase 2 received unexpected "
;;;1475   			   "tunneled data");
;;;1476   		return -1;
;;;1477   #endif /* EAP_TNC */
;;;1478   	}
;;;1479   
;;;1480   	if (resp) {
;;;1481   		if (eap_ttls_encrypt_response(sm, data, resp, identifier,
;;;1482   					      out_data) < 0)
;;;1483   			return -1;
;;;1484   	} else if (config->pending_req_identity ||
;;;1485   		   config->pending_req_password ||
;;;1486   		   config->pending_req_otp ||
;;;1487   		   config->pending_req_new_password) {
;;;1488   		wpabuf_free(data->pending_phase2_req);
;;;1489   		data->pending_phase2_req = wpabuf_dup(in_decrypted);
;;;1490   	}
;;;1491   
;;;1492   	return 0;
;;;1493   }
000048  b007              ADD      sp,sp,#0x1c
00004a  e8bd8ff0          POP      {r4-r11,pc}
                  |L37.78|
00004e  e011              B        |L37.116|
000050  4653              MOV      r3,r10                ;1448
000052  4642              MOV      r2,r8                 ;1448
000054  4621              MOV      r1,r4                 ;1448
000056  4638              MOV      r0,r7                 ;1448
000058  f7fffffe          BL       eap_ttls_process_phase2_mschapv2
00005c  9001              STR      r0,[sp,#4]            ;1448
00005e  9801              LDR      r0,[sp,#4]            ;1462
000060  e7f2              B        |L37.72|
000062  bf00              NOP                            ;1464
000064  bf00              NOP                            ;1465
000066  a117              ADR      r1,|L37.196|
000068  2000              MOVS     r0,#0                 ;1474
00006a  f7fffffe          BL       wpa_printf
00006e  f04f30ff          MOV      r0,#0xffffffff        ;1476
000072  e7e9              B        |L37.72|
                  |L37.116|
000074  bf00              NOP                            ;1446
000076  9802              LDR      r0,[sp,#8]            ;1480
000078  b160              CBZ      r0,|L37.148|
00007a  9b12              LDR      r3,[sp,#0x48]         ;1481
00007c  9300              STR      r3,[sp,#0]            ;1481
00007e  464b              MOV      r3,r9                 ;1481
000080  4621              MOV      r1,r4                 ;1481
000082  4638              MOV      r0,r7                 ;1481
000084  9a02              LDR      r2,[sp,#8]            ;1481
000086  f7fffffe          BL       eap_ttls_encrypt_response
00008a  2800              CMP      r0,#0                 ;1481
00008c  da17              BGE      |L37.190|
00008e  f04f30ff          MOV      r0,#0xffffffff        ;1483
000092  e7d9              B        |L37.72|
                  |L37.148|
000094  f8d500a0          LDR      r0,[r5,#0xa0]         ;1484
000098  b940              CBNZ     r0,|L37.172|
00009a  f8d500a4          LDR      r0,[r5,#0xa4]         ;1485
00009e  b928              CBNZ     r0,|L37.172|
0000a0  f8d500b4          LDR      r0,[r5,#0xb4]         ;1486
0000a4  b910              CBNZ     r0,|L37.172|
0000a6  f8d500ac          LDR      r0,[r5,#0xac]         ;1487
0000aa  b140              CBZ      r0,|L37.190|
                  |L37.172|
0000ac  f8d40094          LDR      r0,[r4,#0x94]         ;1488
0000b0  f7fffffe          BL       wpabuf_free
0000b4  4658              MOV      r0,r11                ;1489
0000b6  f7fffffe          BL       wpabuf_dup
0000ba  f8c40094          STR      r0,[r4,#0x94]         ;1489
                  |L37.190|
0000be  2000              MOVS     r0,#0                 ;1492
0000c0  e7c2              B        |L37.72|
;;;1494   
                          ENDP

0000c2  0000              DCW      0x0000
                  |L37.196|
0000c4  4541502d          DCB      "EAP-TTLS: Phase 2 received unexpected tunneled data",0
0000c8  54544c53
0000cc  3a205068
0000d0  61736520
0000d4  32207265
0000d8  63656976
0000dc  65642075
0000e0  6e657870
0000e4  65637465
0000e8  64207475
0000ec  6e6e656c
0000f0  65642064
0000f4  61746100

                          AREA ||i.eap_ttls_process_handshake||, CODE, READONLY, ALIGN=2

                  eap_ttls_process_handshake PROC
;;;1704   
;;;1705   static int eap_ttls_process_handshake(struct eap_sm *sm,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1706   				      struct eap_ttls_data *data,
;;;1707   				      struct eap_method_ret *ret,
;;;1708   				      u8 identifier,
;;;1709   				      const u8 *in_data, size_t in_len,
;;;1710   				      struct wpabuf **out_data)
;;;1711   {
000004  b085              SUB      sp,sp,#0x14
000006  4607              MOV      r7,r0
000008  460c              MOV      r4,r1
00000a  4616              MOV      r6,r2
00000c  4698              MOV      r8,r3
00000e  e9ddab0e          LDRD     r10,r11,[sp,#0x38]
000012  9d10              LDR      r5,[sp,#0x40]
;;;1712   	int res;
;;;1713   
;;;1714   	res = eap_peer_tls_process_helper(sm, &data->ssl, EAP_TYPE_TTLS,
000014  e88d0d00          STM      sp,{r8,r10,r11}
000018  9503              STR      r5,[sp,#0xc]
00001a  2215              MOVS     r2,#0x15
00001c  4621              MOV      r1,r4
00001e  4638              MOV      r0,r7
000020  6b23              LDR      r3,[r4,#0x30]
000022  f7fffffe          BL       eap_peer_tls_process_helper
000026  4681              MOV      r9,r0
;;;1715   					  data->ttls_version, identifier,
;;;1716   					  in_data, in_len, out_data);
;;;1717   
;;;1718   	if (tls_connection_established(sm->ssl_ctx, data->ssl.conn)) {
000028  6821              LDR      r1,[r4,#0]
00002a  f8d70098          LDR      r0,[r7,#0x98]
00002e  f7fffffe          BL       tls_connection_established
000032  b378              CBZ      r0,|L38.148|
;;;1719   		wpa_printf(MSG_DEBUG, "EAP-TTLS: TLS done, proceed to "
000034  a127              ADR      r1,|L38.212|
000036  2000              MOVS     r0,#0
000038  f7fffffe          BL       wpa_printf
;;;1720   			   "Phase 2");
;;;1721   		if (data->resuming) {
00003c  f8d40088          LDR      r0,[r4,#0x88]
000040  b138              CBZ      r0,|L38.82|
;;;1722   			wpa_printf(MSG_DEBUG, "EAP-TTLS: fast reauth - may "
000042  a12e              ADR      r1,|L38.252|
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       wpa_printf
;;;1723   				   "skip Phase 2");
;;;1724   			ret->decision = DECISION_COND_SUCC;
00004a  2001              MOVS     r0,#1
00004c  7170              STRB     r0,[r6,#5]
;;;1725   			ret->methodState = METHOD_MAY_CONT;
00004e  2003              MOVS     r0,#3
000050  7130              STRB     r0,[r6,#4]
                  |L38.82|
;;;1726   		}
;;;1727   		data->phase2_start = 1;
000052  2001              MOVS     r0,#1
000054  6460              STR      r0,[r4,#0x44]
;;;1728   		if (data->ttls_version == 0)
000056  6b20              LDR      r0,[r4,#0x30]
000058  b918              CBNZ     r0,|L38.98|
;;;1729   			eap_ttls_v0_derive_key(sm, data);
00005a  4621              MOV      r1,r4
00005c  4638              MOV      r0,r7
00005e  f7fffffe          BL       eap_ttls_v0_derive_key
                  |L38.98|
;;;1730   
;;;1731   		if (*out_data == NULL || wpabuf_len(*out_data) == 0) {
000062  6828              LDR      r0,[r5,#0]
000064  b118              CBZ      r0,|L38.110|
000066  6828              LDR      r0,[r5,#0]
000068  f7fffffe          BL       wpabuf_len
00006c  b978              CBNZ     r0,|L38.142|
                  |L38.110|
;;;1732   			if (eap_ttls_decrypt(sm, data, ret, identifier,
00006e  2200              MOVS     r2,#0
000070  4643              MOV      r3,r8
000072  e9cd2500          STRD     r2,r5,[sp,#0]
000076  4632              MOV      r2,r6
000078  4621              MOV      r1,r4
00007a  4638              MOV      r0,r7
00007c  f7fffffe          BL       eap_ttls_decrypt
000080  b118              CBZ      r0,|L38.138|
;;;1733   					     NULL, out_data)) {
;;;1734   				wpa_printf(MSG_WARNING, "EAP-TTLS: "
000082  a129              ADR      r1,|L38.296|
000084  2000              MOVS     r0,#0
000086  f7fffffe          BL       wpa_printf
                  |L38.138|
;;;1735   					   "failed to process early "
;;;1736   					   "start for Phase 2");
;;;1737   			}
;;;1738   			res = 0;
00008a  f04f0900          MOV      r9,#0
                  |L38.142|
;;;1739   		}
;;;1740   		data->resuming = 0;
00008e  2000              MOVS     r0,#0
000090  f8c40088          STR      r0,[r4,#0x88]
                  |L38.148|
;;;1741   	}
;;;1742   
;;;1743   	if (res == 2) {
000094  f1b90f02          CMP      r9,#2
000098  d118              BNE      |L38.204|
;;;1744   		struct wpabuf msg;
;;;1745   		/*
;;;1746   		 * Application data included in the handshake message.
;;;1747   		 */
;;;1748   		wpabuf_free(data->pending_phase2_req);
00009a  f8d40094          LDR      r0,[r4,#0x94]
00009e  f7fffffe          BL       wpabuf_free
;;;1749   		data->pending_phase2_req = *out_data;
0000a2  6828              LDR      r0,[r5,#0]
0000a4  f8c40094          STR      r0,[r4,#0x94]
;;;1750   		*out_data = NULL;
0000a8  2000              MOVS     r0,#0
0000aa  6028              STR      r0,[r5,#0]
;;;1751   		wpabuf_set(&msg, in_data, in_len);
0000ac  465a              MOV      r2,r11
0000ae  4651              MOV      r1,r10
0000b0  a802              ADD      r0,sp,#8
0000b2  f7fffffe          BL       wpabuf_set
;;;1752   		res = eap_ttls_decrypt(sm, data, ret, identifier, &msg,
0000b6  aa02              ADD      r2,sp,#8
0000b8  4643              MOV      r3,r8
0000ba  e9cd2500          STRD     r2,r5,[sp,#0]
0000be  4632              MOV      r2,r6
0000c0  4621              MOV      r1,r4
0000c2  4638              MOV      r0,r7
0000c4  f7fffffe          BL       eap_ttls_decrypt
0000c8  4681              MOV      r9,r0
;;;1753   				       out_data);
;;;1754   	}
0000ca  bf00              NOP      
                  |L38.204|
;;;1755   
;;;1756   	return res;
0000cc  4648              MOV      r0,r9
;;;1757   }
0000ce  b005              ADD      sp,sp,#0x14
0000d0  e8bd8ff0          POP      {r4-r11,pc}
;;;1758   
                          ENDP

                  |L38.212|
0000d4  4541502d          DCB      "EAP-TTLS: TLS done, proceed to Phase 2",0
0000d8  54544c53
0000dc  3a20544c
0000e0  5320646f
0000e4  6e652c20
0000e8  70726f63
0000ec  65656420
0000f0  746f2050
0000f4  68617365
0000f8  203200  
0000fb  00                DCB      0
                  |L38.252|
0000fc  4541502d          DCB      "EAP-TTLS: fast reauth - may skip Phase 2",0
000100  54544c53
000104  3a206661
000108  73742072
00010c  65617574
000110  68202d20
000114  6d617920
000118  736b6970
00011c  20506861
000120  73652032
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L38.296|
000128  4541502d          DCB      "EAP-TTLS: failed to process early start for Phase 2",0
00012c  54544c53
000130  3a206661
000134  696c6564
000138  20746f20
00013c  70726f63
000140  65737320
000144  6561726c
000148  79207374
00014c  61727420
000150  666f7220
000154  50686173
000158  65203200

                          AREA ||i.eap_ttls_process_phase2_eap||, CODE, READONLY, ALIGN=2

                  eap_ttls_process_phase2_eap PROC
;;;1268   
;;;1269   static int eap_ttls_process_phase2_eap(struct eap_sm *sm,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;1270   				       struct eap_ttls_data *data,
;;;1271   				       struct eap_method_ret *ret,
;;;1272   				       struct ttls_parse_avp *parse,
;;;1273   				       struct wpabuf **resp)
;;;1274   {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461c              MOV      r4,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;1275   	struct eap_hdr *hdr;
;;;1276   	size_t len;
;;;1277   
;;;1278   	if (parse->eapdata == NULL) {
000010  6860              LDR      r0,[r4,#4]
000012  b938              CBNZ     r0,|L39.36|
;;;1279   		wpa_printf(MSG_WARNING, "EAP-TTLS: No EAP Message in the "
000014  a12a              ADR      r1,|L39.192|
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       wpa_printf
;;;1280   			   "packet - dropped");
;;;1281   		return -1;
00001c  f04f30ff          MOV      r0,#0xffffffff
                  |L39.32|
;;;1282   	}
;;;1283   
;;;1284   	wpa_hexdump(MSG_DEBUG, "EAP-TTLS: Phase 2 EAP",
;;;1285   		    parse->eapdata, parse->eap_len);
;;;1286   	hdr = (struct eap_hdr *) parse->eapdata;
;;;1287   
;;;1288   	if (parse->eap_len < sizeof(*hdr)) {
;;;1289   		wpa_printf(MSG_WARNING, "EAP-TTLS: Too short Phase 2 EAP "
;;;1290   			   "frame (len=%lu, expected %lu or more) - dropped",
;;;1291   			   (unsigned long) parse->eap_len,
;;;1292   			   (unsigned long) sizeof(*hdr));
;;;1293   		return -1;
;;;1294   	}
;;;1295   	len = be_to_host16(hdr->length);
;;;1296   	if (len > parse->eap_len) {
;;;1297   		wpa_printf(MSG_INFO, "EAP-TTLS: Length mismatch in Phase 2 "
;;;1298   			   "EAP frame (EAP hdr len=%lu, EAP data len in "
;;;1299   			   "AVP=%lu)",
;;;1300   			   (unsigned long) len,
;;;1301   			   (unsigned long) parse->eap_len);
;;;1302   		return -1;
;;;1303   	}
;;;1304   	wpa_printf(MSG_DEBUG, "EAP-TTLS: received Phase 2: code=%d "
;;;1305   		   "identifier=%d length=%lu",
;;;1306   		   hdr->code, hdr->identifier, (unsigned long) len);
;;;1307   	switch (hdr->code) {
;;;1308   	case EAP_CODE_REQUEST:
;;;1309   		if (eap_ttls_phase2_request(sm, data, ret, hdr, resp)) {
;;;1310   			wpa_printf(MSG_INFO, "EAP-TTLS: Phase2 Request "
;;;1311   				   "processing failed");
;;;1312   			return -1;
;;;1313   		}
;;;1314   		break;
;;;1315   	default:
;;;1316   		wpa_printf(MSG_INFO, "EAP-TTLS: Unexpected code=%d in "
;;;1317   			   "Phase 2 EAP header", hdr->code);
;;;1318   		return -1;
;;;1319   	}
;;;1320   
;;;1321   	return 0;
;;;1322   }
000020  e8bd8ff8          POP      {r3-r11,pc}
                  |L39.36|
000024  a133              ADR      r1,|L39.244|
000026  2000              MOVS     r0,#0                 ;1284
000028  e9d42301          LDRD     r2,r3,[r4,#4]         ;1284
00002c  f7fffffe          BL       wpa_hexdump
000030  6865              LDR      r5,[r4,#4]            ;1286
000032  68a0              LDR      r0,[r4,#8]            ;1288
000034  2804              CMP      r0,#4                 ;1288
000036  d208              BCS      |L39.74|
000038  2304              MOVS     r3,#4                 ;1289
00003a  4934              LDR      r1,|L39.268|
00003c  2000              MOVS     r0,#0                 ;1289
00003e  68a2              LDR      r2,[r4,#8]            ;1289
000040  f7fffffe          BL       wpa_printf
000044  f04f30ff          MOV      r0,#0xffffffff        ;1293
000048  e7ea              B        |L39.32|
                  |L39.74|
00004a  8868              LDRH     r0,[r5,#2]            ;1295
00004c  f44f417f          MOV      r1,#0xff00            ;1295
000050  ea012000          AND      r0,r1,r0,LSL #8       ;1295
000054  8869              LDRH     r1,[r5,#2]            ;1295
000056  ea402611          ORR      r6,r0,r1,LSR #8       ;1295
00005a  68a0              LDR      r0,[r4,#8]            ;1296
00005c  42b0              CMP      r0,r6                 ;1296
00005e  d209              BCS      |L39.116|
000060  4632              MOV      r2,r6                 ;1297
000062  492a              LDR      r1,|L39.268|
000064  3150              ADDS     r1,r1,#0x50           ;1297
000066  2000              MOVS     r0,#0                 ;1297
000068  68a3              LDR      r3,[r4,#8]            ;1297
00006a  f7fffffe          BL       wpa_printf
00006e  f04f30ff          MOV      r0,#0xffffffff        ;1302
000072  e7d5              B        |L39.32|
                  |L39.116|
000074  9600              STR      r6,[sp,#0]            ;1304
000076  786b              LDRB     r3,[r5,#1]            ;1304
000078  782a              LDRB     r2,[r5,#0]            ;1304
00007a  a125              ADR      r1,|L39.272|
00007c  2000              MOVS     r0,#0                 ;1304
00007e  f7fffffe          BL       wpa_printf
000082  7828              LDRB     r0,[r5,#0]            ;1307
000084  2801              CMP      r0,#1                 ;1307
000086  d110              BNE      |L39.170|
000088  462b              MOV      r3,r5                 ;1309
00008a  464a              MOV      r2,r9                 ;1309
00008c  4641              MOV      r1,r8                 ;1309
00008e  4638              MOV      r0,r7                 ;1309
000090  f8cda000          STR      r10,[sp,#0]           ;1309
000094  f7fffffe          BL       eap_ttls_phase2_request
000098  b130              CBZ      r0,|L39.168|
00009a  a12d              ADR      r1,|L39.336|
00009c  2000              MOVS     r0,#0                 ;1310
00009e  f7fffffe          BL       wpa_printf
0000a2  f04f30ff          MOV      r0,#0xffffffff        ;1312
0000a6  e7bb              B        |L39.32|
                  |L39.168|
0000a8  e007              B        |L39.186|
                  |L39.170|
0000aa  782a              LDRB     r2,[r5,#0]            ;1316
0000ac  a133              ADR      r1,|L39.380|
0000ae  2000              MOVS     r0,#0                 ;1316
0000b0  f7fffffe          BL       wpa_printf
0000b4  f04f30ff          MOV      r0,#0xffffffff        ;1318
0000b8  e7b2              B        |L39.32|
                  |L39.186|
0000ba  bf00              NOP                            ;1314
0000bc  2000              MOVS     r0,#0                 ;1321
0000be  e7af              B        |L39.32|
;;;1323   
                          ENDP

                  |L39.192|
0000c0  4541502d          DCB      "EAP-TTLS: No EAP Message in the packet - dropped",0
0000c4  54544c53
0000c8  3a204e6f
0000cc  20454150
0000d0  204d6573
0000d4  73616765
0000d8  20696e20
0000dc  74686520
0000e0  7061636b
0000e4  6574202d
0000e8  2064726f
0000ec  70706564
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L39.244|
0000f4  4541502d          DCB      "EAP-TTLS: Phase 2 EAP",0
0000f8  54544c53
0000fc  3a205068
000100  61736520
000104  32204541
000108  5000    
00010a  00                DCB      0
00010b  00                DCB      0
                  |L39.268|
                          DCD      ||.constdata||+0x1b8
                  |L39.272|
000110  4541502d          DCB      "EAP-TTLS: received Phase 2: code=%d identifier=%d lengt"
000114  54544c53
000118  3a207265
00011c  63656976
000120  65642050
000124  68617365
000128  20323a20
00012c  636f6465
000130  3d256420
000134  6964656e
000138  74696669
00013c  65723d25
000140  64206c65
000144  6e6774  
000147  683d256c          DCB      "h=%lu",0
00014b  7500    
00014d  00                DCB      0
00014e  00                DCB      0
00014f  00                DCB      0
                  |L39.336|
000150  4541502d          DCB      "EAP-TTLS: Phase2 Request processing failed",0
000154  54544c53
000158  3a205068
00015c  61736532
000160  20526571
000164  75657374
000168  2070726f
00016c  63657373
000170  696e6720
000174  6661696c
000178  656400  
00017b  00                DCB      0
                  |L39.380|
00017c  4541502d          DCB      "EAP-TTLS: Unexpected code=%d in Phase 2 EAP header",0
000180  54544c53
000184  3a20556e
000188  65787065
00018c  63746564
000190  20636f64
000194  653d2564
000198  20696e20
00019c  50686173
0001a0  65203220
0001a4  45415020
0001a8  68656164
0001ac  657200  
0001af  00                DCB      0

                          AREA ||i.eap_ttls_process_phase2_mschapv2||, CODE, READONLY, ALIGN=2

                  eap_ttls_process_phase2_mschapv2 PROC
;;;1324   
;;;1325   static int eap_ttls_process_phase2_mschapv2(struct eap_sm *sm,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1326   					    struct eap_ttls_data *data,
;;;1327   					    struct eap_method_ret *ret,
;;;1328   					    struct ttls_parse_avp *parse)
;;;1329   {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;1330   	if (parse->mschapv2_error) {
00000c  68f0              LDR      r0,[r6,#0xc]
00000e  b150              CBZ      r0,|L40.38|
;;;1331   		wpa_printf(MSG_DEBUG, "EAP-TTLS/MSCHAPV2: Received "
000010  a125              ADR      r1,|L40.168|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       wpa_printf
;;;1332   			   "MS-CHAP-Error - failed");
;;;1333   		ret->methodState = METHOD_DONE;
000018  2004              MOVS     r0,#4
00001a  7128              STRB     r0,[r5,#4]
;;;1334   		ret->decision = DECISION_FAIL;
00001c  2000              MOVS     r0,#0
00001e  7168              STRB     r0,[r5,#5]
;;;1335   		/* Reply with empty data to ACK error */
;;;1336   		return 1;
000020  2001              MOVS     r0,#1
                  |L40.34|
;;;1337   	}
;;;1338   
;;;1339   	if (parse->mschapv2 == NULL) {
;;;1340   #ifdef EAP_TNC
;;;1341   		if (data->phase2_success && parse->eapdata) {
;;;1342   			/*
;;;1343   			 * Allow EAP-TNC to be started after successfully
;;;1344   			 * completed MSCHAPV2.
;;;1345   			 */
;;;1346   			return 1;
;;;1347   		}
;;;1348   #endif /* EAP_TNC */
;;;1349   		wpa_printf(MSG_WARNING, "EAP-TTLS: no MS-CHAP2-Success AVP "
;;;1350   			   "received for Phase2 MSCHAPV2");
;;;1351   		return -1;
;;;1352   	}
;;;1353   	if (parse->mschapv2[0] != data->ident) {
;;;1354   		wpa_printf(MSG_WARNING, "EAP-TTLS: Ident mismatch for Phase 2 "
;;;1355   			   "MSCHAPV2 (received Ident 0x%02x, expected 0x%02x)",
;;;1356   			   parse->mschapv2[0], data->ident);
;;;1357   		return -1;
;;;1358   	}
;;;1359   	if (!data->auth_response_valid ||
;;;1360   	    mschapv2_verify_auth_response(data->auth_response,
;;;1361   					  parse->mschapv2 + 1, 42)) {
;;;1362   		wpa_printf(MSG_WARNING, "EAP-TTLS: Invalid authenticator "
;;;1363   			   "response in Phase 2 MSCHAPV2 success request");
;;;1364   		return -1;
;;;1365   	}
;;;1366   
;;;1367   	wpa_printf(MSG_INFO, "EAP-TTLS: Phase 2 MSCHAPV2 "
;;;1368   		   "authentication succeeded");
;;;1369   	if (data->ttls_version > 0) {
;;;1370   		/*
;;;1371   		 * EAP-TTLSv1 uses TLS/IA FinalPhaseFinished to report
;;;1372   		 * success, so do not allow connection to be terminated
;;;1373   		 * yet.
;;;1374   		 */
;;;1375   		ret->methodState = METHOD_CONT;
;;;1376   		ret->decision = DECISION_COND_SUCC;
;;;1377   	} else {
;;;1378   		ret->methodState = METHOD_DONE;
;;;1379   		ret->decision = DECISION_UNCOND_SUCC;
;;;1380   		data->phase2_success = 1;
;;;1381   	}
;;;1382   
;;;1383   	/*
;;;1384   	 * Reply with empty data; authentication server will reply
;;;1385   	 * with EAP-Success after this.
;;;1386   	 */
;;;1387   	return 1;
;;;1388   }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L40.38|
000026  6830              LDR      r0,[r6,#0]            ;1339
000028  b930              CBNZ     r0,|L40.56|
00002a  a12c              ADR      r1,|L40.220|
00002c  2000              MOVS     r0,#0                 ;1349
00002e  f7fffffe          BL       wpa_printf
000032  f04f30ff          MOV      r0,#0xffffffff        ;1351
000036  e7f4              B        |L40.34|
                  |L40.56|
000038  6830              LDR      r0,[r6,#0]            ;1353
00003a  7800              LDRB     r0,[r0,#0]            ;1353
00003c  f8941084          LDRB     r1,[r4,#0x84]         ;1353
000040  4288              CMP      r0,r1                 ;1353
000042  d00a              BEQ      |L40.90|
000044  f8943084          LDRB     r3,[r4,#0x84]         ;1354
000048  6830              LDR      r0,[r6,#0]            ;1354
00004a  7802              LDRB     r2,[r0,#0]            ;1354
00004c  4933              LDR      r1,|L40.284|
00004e  2000              MOVS     r0,#0                 ;1354
000050  f7fffffe          BL       wpa_printf
000054  f04f30ff          MOV      r0,#0xffffffff        ;1357
000058  e7e3              B        |L40.34|
                  |L40.90|
00005a  6f20              LDR      r0,[r4,#0x70]         ;1359
00005c  b138              CBZ      r0,|L40.110|
00005e  6830              LDR      r0,[r6,#0]            ;1360
000060  1c41              ADDS     r1,r0,#1              ;1360
000062  222a              MOVS     r2,#0x2a              ;1360
000064  f104005c          ADD      r0,r4,#0x5c           ;1360
000068  f7fffffe          BL       mschapv2_verify_auth_response
00006c  b138              CBZ      r0,|L40.126|
                  |L40.110|
00006e  492b              LDR      r1,|L40.284|
000070  3158              ADDS     r1,r1,#0x58           ;1362
000072  2000              MOVS     r0,#0                 ;1362
000074  f7fffffe          BL       wpa_printf
000078  f04f30ff          MOV      r0,#0xffffffff        ;1364
00007c  e7d1              B        |L40.34|
                  |L40.126|
00007e  a128              ADR      r1,|L40.288|
000080  2000              MOVS     r0,#0                 ;1367
000082  f7fffffe          BL       wpa_printf
000086  6b20              LDR      r0,[r4,#0x30]         ;1369
000088  2800              CMP      r0,#0                 ;1369
00008a  dd04              BLE      |L40.150|
00008c  2002              MOVS     r0,#2                 ;1375
00008e  7128              STRB     r0,[r5,#4]            ;1375
000090  2001              MOVS     r0,#1                 ;1376
000092  7168              STRB     r0,[r5,#5]            ;1376
000094  e005              B        |L40.162|
                  |L40.150|
000096  2004              MOVS     r0,#4                 ;1378
000098  7128              STRB     r0,[r5,#4]            ;1378
00009a  2002              MOVS     r0,#2                 ;1379
00009c  7168              STRB     r0,[r5,#5]            ;1379
00009e  2001              MOVS     r0,#1                 ;1380
0000a0  6420              STR      r0,[r4,#0x40]         ;1380
                  |L40.162|
0000a2  2001              MOVS     r0,#1                 ;1387
0000a4  e7bd              B        |L40.34|
;;;1389   
                          ENDP

0000a6  0000              DCW      0x0000
                  |L40.168|
0000a8  4541502d          DCB      "EAP-TTLS/MSCHAPV2: Received MS-CHAP-Error - failed",0
0000ac  54544c53
0000b0  2f4d5343
0000b4  48415056
0000b8  323a2052
0000bc  65636569
0000c0  76656420
0000c4  4d532d43
0000c8  4841502d
0000cc  4572726f
0000d0  72202d20
0000d4  6661696c
0000d8  656400  
0000db  00                DCB      0
                  |L40.220|
0000dc  4541502d          DCB      "EAP-TTLS: no MS-CHAP2-Success AVP received for Phase2 M"
0000e0  54544c53
0000e4  3a206e6f
0000e8  204d532d
0000ec  43484150
0000f0  322d5375
0000f4  63636573
0000f8  73204156
0000fc  50207265
000100  63656976
000104  65642066
000108  6f722050
00010c  68617365
000110  32204d  
000113  53434841          DCB      "SCHAPV2",0
000117  50563200
00011b  00                DCB      0
                  |L40.284|
                          DCD      ||.constdata||+0x264
                  |L40.288|
000120  4541502d          DCB      "EAP-TTLS: Phase 2 MSCHAPV2 authentication succeeded",0
000124  54544c53
000128  3a205068
00012c  61736520
000130  32204d53
000134  43484150
000138  56322061
00013c  75746865
000140  6e746963
000144  6174696f
000148  6e207375
00014c  63636565
000150  64656400

                          AREA ||i.eap_ttls_process_start||, CODE, READONLY, ALIGN=2

                  eap_ttls_process_start PROC
;;;1664   
;;;1665   static int eap_ttls_process_start(struct eap_sm *sm,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1666   				  struct eap_ttls_data *data, u8 flags,
;;;1667   				  struct eap_method_ret *ret)
;;;1668   {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
;;;1669   	struct eap_peer_config *config = eap_get_config(sm);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       eap_get_config
000012  4607              MOV      r7,r0
;;;1670   
;;;1671   	wpa_printf(MSG_DEBUG, "EAP-TTLS: Start (server ver=%d, own ver=%d)",
000014  f0050207          AND      r2,r5,#7
000018  a10e              ADR      r1,|L41.84|
00001a  2000              MOVS     r0,#0
00001c  6b23              LDR      r3,[r4,#0x30]
00001e  f7fffffe          BL       wpa_printf
;;;1672   		   flags & EAP_TLS_VERSION_MASK, data->ttls_version);
;;;1673   #if EAP_TTLS_VERSION > 0
;;;1674   	if ((flags & EAP_TLS_VERSION_MASK) < data->ttls_version)
;;;1675   		data->ttls_version = flags & EAP_TLS_VERSION_MASK;
;;;1676   	if (data->force_ttls_version >= 0 &&
;;;1677   	    data->force_ttls_version != data->ttls_version) {
;;;1678   		wpa_printf(MSG_WARNING, "EAP-TTLS: Failed to select "
;;;1679   			   "forced TTLS version %d",
;;;1680   			   data->force_ttls_version);
;;;1681   		ret->methodState = METHOD_DONE;
;;;1682   		ret->decision = DECISION_FAIL;
;;;1683   		ret->allowNotifications = FALSE;
;;;1684   		return -1;
;;;1685   	}
;;;1686   	wpa_printf(MSG_DEBUG, "EAP-TTLS: Using TTLS version %d",
;;;1687   		   data->ttls_version);
;;;1688   
;;;1689   	if (data->ttls_version > 0)
;;;1690   		data->ssl.tls_ia = 1;
;;;1691   #endif /* EAP_TTLS_VERSION */
;;;1692   	if (!data->ssl_initialized &&
000022  6ae0              LDR      r0,[r4,#0x2c]
000024  b968              CBNZ     r0,|L41.66|
;;;1693   	    eap_peer_tls_ssl_init(sm, &data->ssl, config)) {
000026  463a              MOV      r2,r7
000028  4621              MOV      r1,r4
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       eap_peer_tls_ssl_init
000030  b138              CBZ      r0,|L41.66|
;;;1694   		wpa_printf(MSG_INFO, "EAP-TTLS: Failed to initialize SSL.");
000032  a113              ADR      r1,|L41.128|
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       wpa_printf
;;;1695   		return -1;
00003a  f04f30ff          MOV      r0,#0xffffffff
                  |L41.62|
;;;1696   	}
;;;1697   	data->ssl_initialized = 1;
;;;1698   
;;;1699   	wpa_printf(MSG_DEBUG, "EAP-TTLS: Start");
;;;1700   
;;;1701   	return 0;
;;;1702   }
00003e  e8bd81f0          POP      {r4-r8,pc}
                  |L41.66|
000042  2001              MOVS     r0,#1                 ;1697
000044  62e0              STR      r0,[r4,#0x2c]         ;1697
000046  a117              ADR      r1,|L41.164|
000048  2000              MOVS     r0,#0                 ;1699
00004a  f7fffffe          BL       wpa_printf
00004e  2000              MOVS     r0,#0                 ;1701
000050  e7f5              B        |L41.62|
;;;1703   
                          ENDP

000052  0000              DCW      0x0000
                  |L41.84|
000054  4541502d          DCB      "EAP-TTLS: Start (server ver=%d, own ver=%d)",0
000058  54544c53
00005c  3a205374
000060  61727420
000064  28736572
000068  76657220
00006c  7665723d
000070  25642c20
000074  6f776e20
000078  7665723d
00007c  25642900
                  |L41.128|
000080  4541502d          DCB      "EAP-TTLS: Failed to initialize SSL.",0
000084  54544c53
000088  3a204661
00008c  696c6564
000090  20746f20
000094  696e6974
000098  69616c69
00009c  7a652053
0000a0  534c2e00
                  |L41.164|
0000a4  4541502d          DCB      "EAP-TTLS: Start",0
0000a8  54544c53
0000ac  3a205374
0000b0  61727400

                          AREA ||i.eap_ttls_v0_derive_key||, CODE, READONLY, ALIGN=2

                  eap_ttls_v0_derive_key PROC
;;;281    
;;;282    static int eap_ttls_v0_derive_key(struct eap_sm *sm,
000000  b570              PUSH     {r4-r6,lr}
;;;283    				  struct eap_ttls_data *data)
;;;284    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;285    	os_free(data->key_data);
000006  f8d40090          LDR      r0,[r4,#0x90]
00000a  f7fffffe          BL       os_free
;;;286    	data->key_data = eap_peer_tls_derive_key(sm, &data->ssl,
00000e  2340              MOVS     r3,#0x40
000010  a20c              ADR      r2,|L42.68|
000012  4621              MOV      r1,r4
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       eap_peer_tls_derive_key
00001a  f8c40090          STR      r0,[r4,#0x90]
;;;287    						 "ttls keying material",
;;;288    						 EAP_TLS_KEY_LEN);
;;;289    	if (!data->key_data) {
00001e  f8d40090          LDR      r0,[r4,#0x90]
000022  b930              CBNZ     r0,|L42.50|
;;;290    		wpa_printf(MSG_INFO, "EAP-TTLS: Failed to derive key");
000024  a10d              ADR      r1,|L42.92|
000026  2000              MOVS     r0,#0
000028  f7fffffe          BL       wpa_printf
;;;291    		return -1;
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L42.48|
;;;292    	}
;;;293    
;;;294    	wpa_hexdump_key(MSG_DEBUG, "EAP-TTLS: Derived key",
;;;295    			data->key_data, EAP_TLS_KEY_LEN);
;;;296    
;;;297    	return 0;
;;;298    }
000030  bd70              POP      {r4-r6,pc}
                  |L42.50|
000032  2340              MOVS     r3,#0x40              ;294
000034  a111              ADR      r1,|L42.124|
000036  2000              MOVS     r0,#0                 ;294
000038  f8d42090          LDR      r2,[r4,#0x90]         ;294
00003c  f7fffffe          BL       wpa_hexdump_key
000040  2000              MOVS     r0,#0                 ;297
000042  e7f5              B        |L42.48|
;;;299    
                          ENDP

                  |L42.68|
000044  74746c73          DCB      "ttls keying material",0
000048  206b6579
00004c  696e6720
000050  6d617465
000054  7269616c
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0
                  |L42.92|
00005c  4541502d          DCB      "EAP-TTLS: Failed to derive key",0
000060  54544c53
000064  3a204661
000068  696c6564
00006c  20746f20
000070  64657269
000074  7665206b
000078  657900  
00007b  00                DCB      0
                  |L42.124|
00007c  4541502d          DCB      "EAP-TTLS: Derived key",0
000080  54544c53
000084  3a204465
000088  72697665
00008c  64206b65
000090  7900    
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.eap_ttlsv1_permute_inner||, CODE, READONLY, ALIGN=1

                  eap_ttlsv1_permute_inner PROC
;;;617    
;;;618    static void eap_ttlsv1_permute_inner(struct eap_sm *sm,
000000  4770              BX       lr
;;;619    				     struct eap_ttls_data *data)
;;;620    {
;;;621    #if EAP_TTLS_VERSION > 0
;;;622    	u8 session_key[2 * MSCHAPV2_KEY_LEN];
;;;623    
;;;624    	if (data->ttls_version == 0)
;;;625    		return;
;;;626    
;;;627    	get_asymetric_start_key(data->master_key, session_key,
;;;628    				MSCHAPV2_KEY_LEN, 0, 0);
;;;629    	get_asymetric_start_key(data->master_key,
;;;630    				session_key + MSCHAPV2_KEY_LEN,
;;;631    				MSCHAPV2_KEY_LEN, 1, 0);
;;;632    	eap_ttls_ia_permute_inner_secret(sm, data, session_key,
;;;633    					 sizeof(session_key));
;;;634    #endif /* EAP_TTLS_VERSION */
;;;635    }
;;;636    
                          ENDP


                          AREA ||i.eap_ttlsv1_phase2_eap_finish||, CODE, READONLY, ALIGN=1

                  eap_ttlsv1_phase2_eap_finish PROC
;;;422    
;;;423    static void eap_ttlsv1_phase2_eap_finish(struct eap_sm *sm,
000000  4770              BX       lr
;;;424    					 struct eap_ttls_data *data,
;;;425    					 struct eap_method_ret *ret)
;;;426    {
;;;427    #if EAP_TTLS_VERSION > 0
;;;428    	if (data->ttls_version > 0) {
;;;429    		const struct eap_method *m = data->phase2_method;
;;;430    		void *priv = data->phase2_priv;
;;;431    
;;;432    		/* TTLSv1 requires TLS/IA FinalPhaseFinished */
;;;433    		if (ret->decision == DECISION_UNCOND_SUCC)
;;;434    			ret->decision = DECISION_COND_SUCC;
;;;435    		ret->methodState = METHOD_CONT;
;;;436    
;;;437    		if (ret->decision == DECISION_COND_SUCC &&
;;;438    		    m->isKeyAvailable && m->getKey &&
;;;439    		    m->isKeyAvailable(sm, priv)) {
;;;440    			u8 *key;
;;;441    			size_t key_len;
;;;442    			key = m->getKey(sm, priv, &key_len);
;;;443    			if (key) {
;;;444    				eap_ttls_ia_permute_inner_secret(
;;;445    					sm, data, key, key_len);
;;;446    				os_free(key);
;;;447    			}
;;;448    		}
;;;449    	}
;;;450    #endif /* EAP_TTLS_VERSION */
;;;451    }
;;;452    
                          ENDP


                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L45.30|
00001a  2001              MOVS     r0,#1
                  |L45.28|
;;;495    }
00001c  4770              BX       lr
                  |L45.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L45.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpa_key_mgmt_ft||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_ft PROC
;;;65     
;;;66     static inline int wpa_key_mgmt_ft(int akm)
000000  4601              MOV      r1,r0
;;;67     {
;;;68     	return akm == WPA_KEY_MGMT_FT_PSK ||
000002  2940              CMP      r1,#0x40
000004  d001              BEQ      |L50.10|
;;;69     		akm == WPA_KEY_MGMT_FT_IEEE8021X;
000006  2920              CMP      r1,#0x20
000008  d101              BNE      |L50.14|
                  |L50.10|
00000a  2001              MOVS     r0,#1                 ;68
                  |L50.12|
;;;70     }
00000c  4770              BX       lr
                  |L50.14|
00000e  2000              MOVS     r0,#0                 ;68
000010  e7fc              B        |L50.12|
;;;71     
                          ENDP


                          AREA ||i.wpa_key_mgmt_sha256||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_sha256 PROC
;;;71     
;;;72     static inline int wpa_key_mgmt_sha256(int akm)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return akm == WPA_KEY_MGMT_PSK_SHA256 ||
000002  f5b17f80          CMP      r1,#0x100
000006  d001              BEQ      |L51.12|
;;;75     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
000008  2980              CMP      r1,#0x80
00000a  d101              BNE      |L51.16|
                  |L51.12|
00000c  2001              MOVS     r0,#1                 ;74
                  |L51.14|
;;;76     }
00000e  4770              BX       lr
                  |L51.16|
000010  2000              MOVS     r0,#0                 ;74
000012  e7fc              B        |L51.14|
;;;77     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_ieee8021x||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_ieee8021x PROC
;;;51     
;;;52     static inline int wpa_key_mgmt_wpa_ieee8021x(int akm)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return akm == WPA_KEY_MGMT_IEEE8021X ||
000002  2901              CMP      r1,#1
000004  d003              BEQ      |L52.14|
;;;55     		akm == WPA_KEY_MGMT_FT_IEEE8021X ||
000006  2920              CMP      r1,#0x20
000008  d001              BEQ      |L52.14|
;;;56     		akm == WPA_KEY_MGMT_IEEE8021X_SHA256;
00000a  2980              CMP      r1,#0x80
00000c  d101              BNE      |L52.18|
                  |L52.14|
00000e  2001              MOVS     r0,#1                 ;54
                  |L52.16|
;;;57     }
000010  4770              BX       lr
                  |L52.18|
000012  2000              MOVS     r0,#0                 ;54
000014  e7fc              B        |L52.16|
;;;58     
                          ENDP


                          AREA ||i.wpa_key_mgmt_wpa_psk||, CODE, READONLY, ALIGN=1

                  wpa_key_mgmt_wpa_psk PROC
;;;58     
;;;59     static inline int wpa_key_mgmt_wpa_psk(int akm)
000000  4601              MOV      r1,r0
;;;60     {
;;;61     	return akm == WPA_KEY_MGMT_PSK ||
000002  2902              CMP      r1,#2
000004  d004              BEQ      |L53.16|
;;;62     		akm == WPA_KEY_MGMT_FT_PSK ||
000006  2940              CMP      r1,#0x40
000008  d002              BEQ      |L53.16|
;;;63     		akm == WPA_KEY_MGMT_PSK_SHA256;
00000a  f5b17f80          CMP      r1,#0x100
00000e  d101              BNE      |L53.20|
                  |L53.16|
000010  2001              MOVS     r0,#1                 ;61
                  |L53.18|
;;;64     }
000012  4770              BX       lr
                  |L53.20|
000014  2000              MOVS     r0,#0                 ;61
000016  e7fc              B        |L53.18|
;;;65     
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L54.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L54.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L54.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L54.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L57.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L57.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L57.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L57.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L63.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L63.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  4541502d          DCB      0x45,0x41,0x50,0x2d
000004  54544c53          DCB      0x54,0x54,0x4c,0x53
000008  2f4d5343          DCB      0x2f,0x4d,0x53,0x43
00000c  48415056          DCB      0x48,0x41,0x50,0x56
000010  323a2045          DCB      0x32,0x3a,0x20,0x45
000014  41502077          DCB      0x41,0x50,0x20,0x77
000018  6f726b61          DCB      0x6f,0x72,0x6b,0x61
00001c  726f756e          DCB      0x72,0x6f,0x75,0x6e
000020  64202d20          DCB      0x64,0x20,0x2d,0x20
000024  616c6c6f          DCB      0x61,0x6c,0x6c,0x6f
000028  77207375          DCB      0x77,0x20,0x73,0x75
00002c  63636573          DCB      0x63,0x63,0x65,0x73
000030  73207769          DCB      0x73,0x20,0x77,0x69
000034  74686f75          DCB      0x74,0x68,0x6f,0x75
000038  74207475          DCB      0x74,0x20,0x74,0x75
00003c  6e6e656c          DCB      0x6e,0x6e,0x65,0x6c
000040  65642072          DCB      0x65,0x64,0x20,0x72
000044  6573706f          DCB      0x65,0x73,0x70,0x6f
000048  6e736500          DCB      0x6e,0x73,0x65,0x00
00004c  4541502d          DCB      0x45,0x41,0x50,0x2d
000050  54544c53          DCB      0x54,0x54,0x4c,0x53
000054  3a20556e          DCB      0x3a,0x20,0x55,0x6e
000058  65787065          DCB      0x65,0x78,0x70,0x65
00005c  63746564          DCB      0x63,0x74,0x65,0x64
000060  204d532d          DCB      0x20,0x4d,0x53,0x2d
000064  43484150          DCB      0x43,0x48,0x41,0x50
000068  322d5375          DCB      0x32,0x2d,0x53,0x75
00006c  63636573          DCB      0x63,0x63,0x65,0x73
000070  73206c65          DCB      0x73,0x20,0x6c,0x65
000074  6e677468          DCB      0x6e,0x67,0x74,0x68
000078  20286c65          DCB      0x20,0x28,0x6c,0x65
00007c  6e3d256c          DCB      0x6e,0x3d,0x25,0x6c
000080  752c2065          DCB      0x75,0x2c,0x20,0x65
000084  78706563          DCB      0x78,0x70,0x65,0x63
000088  74656420          DCB      0x74,0x65,0x64,0x20
00008c  34332900          DCB      0x34,0x33,0x29,0x00
000090  4541502d          DCB      0x45,0x41,0x50,0x2d
000094  54544c53          DCB      0x54,0x54,0x4c,0x53
000098  3a20556e          DCB      0x3a,0x20,0x55,0x6e
00009c  73757070          DCB      0x73,0x75,0x70,0x70
0000a0  6f727465          DCB      0x6f,0x72,0x74,0x65
0000a4  64206d61          DCB      0x64,0x20,0x6d,0x61
0000a8  6e646174          DCB      0x6e,0x64,0x61,0x74
0000ac  6f727920          DCB      0x6f,0x72,0x79,0x20
0000b0  41565020          DCB      0x41,0x56,0x50,0x20
0000b4  636f6465          DCB      0x63,0x6f,0x64,0x65
0000b8  20256420          DCB      0x20,0x25,0x64,0x20
0000bc  76656e64          DCB      0x76,0x65,0x6e,0x64
0000c0  6f725f69          DCB      0x6f,0x72,0x5f,0x69
0000c4  64202564          DCB      0x64,0x20,0x25,0x64
0000c8  202d2064          DCB      0x20,0x2d,0x20,0x64
0000cc  726f7070          DCB      0x72,0x6f,0x70,0x70
0000d0  65640000          DCB      0x65,0x64,0x00,0x00
0000d4  4541502d          DCB      0x45,0x41,0x50,0x2d
0000d8  54544c53          DCB      0x54,0x54,0x4c,0x53
0000dc  3a20546f          DCB      0x3a,0x20,0x54,0x6f
0000e0  6f207368          DCB      0x6f,0x20,0x73,0x68
0000e4  6f727420          DCB      0x6f,0x72,0x74,0x20
0000e8  50686173          DCB      0x50,0x68,0x61,0x73
0000ec  65203220          DCB      0x65,0x20,0x32,0x20
0000f0  41565020          DCB      0x41,0x56,0x50,0x20
0000f4  6672616d          DCB      0x66,0x72,0x61,0x6d
0000f8  65206c65          DCB      0x65,0x20,0x6c,0x65
0000fc  6e3d256c          DCB      0x6e,0x3d,0x25,0x6c
000100  75206578          DCB      0x75,0x20,0x65,0x78
000104  70656374          DCB      0x70,0x65,0x63,0x74
000108  65642025          DCB      0x65,0x64,0x20,0x25
00010c  6c75206f          DCB      0x6c,0x75,0x20,0x6f
000110  72206d6f          DCB      0x72,0x20,0x6d,0x6f
000114  7265202d          DCB      0x72,0x65,0x20,0x2d
000118  2064726f          DCB      0x20,0x64,0x72,0x6f
00011c  70706564          DCB      0x70,0x70,0x65,0x64
000120  00000000          DCB      0x00,0x00,0x00,0x00
000124  4541502d          DCB      0x45,0x41,0x50,0x2d
000128  54544c53          DCB      0x54,0x54,0x4c,0x53
00012c  3a20656d          DCB      0x3a,0x20,0x65,0x6d
000130  70747920          DCB      0x70,0x74,0x79,0x20
000134  64617461          DCB      0x64,0x61,0x74,0x61
000138  20696e20          DCB      0x20,0x69,0x6e,0x20
00013c  62656769          DCB      0x62,0x65,0x67,0x69
000140  6e6e696e          DCB      0x6e,0x6e,0x69,0x6e
000144  67206f66          DCB      0x67,0x20,0x6f,0x66
000148  20506861          DCB      0x20,0x50,0x68,0x61
00014c  73652032          DCB      0x73,0x65,0x20,0x32
000150  202d2075          DCB      0x20,0x2d,0x20,0x75
000154  73652066          DCB      0x73,0x65,0x20,0x66
000158  616b6520          DCB      0x61,0x6b,0x65,0x20
00015c  4541502d          DCB      0x45,0x41,0x50,0x2d
000160  52657175          DCB      0x52,0x65,0x71,0x75
000164  65737420          DCB      0x65,0x73,0x74,0x20
000168  4964656e          DCB      0x49,0x64,0x65,0x6e
00016c  74697479          DCB      0x74,0x69,0x74,0x79
000170  00000000          DCB      0x00,0x00,0x00,0x00
000174  4541502d          DCB      0x45,0x41,0x50,0x2d
000178  54544c53          DCB      0x54,0x54,0x4c,0x53
00017c  3a206661          DCB      0x3a,0x20,0x66,0x61
000180  696c6564          DCB      0x69,0x6c,0x65,0x64
000184  20746f20          DCB      0x20,0x74,0x6f,0x20
000188  616c6c6f          DCB      0x61,0x6c,0x6c,0x6f
00018c  63617465          DCB      0x63,0x61,0x74,0x65
000190  206d656d          DCB      0x20,0x6d,0x65,0x6d
000194  6f727920          DCB      0x6f,0x72,0x79,0x20
000198  666f7220          DCB      0x66,0x6f,0x72,0x20
00019c  66616b65          DCB      0x66,0x61,0x6b,0x65
0001a0  20454150          DCB      0x20,0x45,0x41,0x50
0001a4  2d496465          DCB      0x2d,0x49,0x64,0x65
0001a8  6e746974          DCB      0x6e,0x74,0x69,0x74
0001ac  79205265          DCB      0x79,0x20,0x52,0x65
0001b0  71756573          DCB      0x71,0x75,0x65,0x73
0001b4  74000000          DCB      0x74,0x00,0x00,0x00
0001b8  4541502d          DCB      0x45,0x41,0x50,0x2d
0001bc  54544c53          DCB      0x54,0x54,0x4c,0x53
0001c0  3a20546f          DCB      0x3a,0x20,0x54,0x6f
0001c4  6f207368          DCB      0x6f,0x20,0x73,0x68
0001c8  6f727420          DCB      0x6f,0x72,0x74,0x20
0001cc  50686173          DCB      0x50,0x68,0x61,0x73
0001d0  65203220          DCB      0x65,0x20,0x32,0x20
0001d4  45415020          DCB      0x45,0x41,0x50,0x20
0001d8  6672616d          DCB      0x66,0x72,0x61,0x6d
0001dc  6520286c          DCB      0x65,0x20,0x28,0x6c
0001e0  656e3d25          DCB      0x65,0x6e,0x3d,0x25
0001e4  6c752c20          DCB      0x6c,0x75,0x2c,0x20
0001e8  65787065          DCB      0x65,0x78,0x70,0x65
0001ec  63746564          DCB      0x63,0x74,0x65,0x64
0001f0  20256c75          DCB      0x20,0x25,0x6c,0x75
0001f4  206f7220          DCB      0x20,0x6f,0x72,0x20
0001f8  6d6f7265          DCB      0x6d,0x6f,0x72,0x65
0001fc  29202d20          DCB      0x29,0x20,0x2d,0x20
000200  64726f70          DCB      0x64,0x72,0x6f,0x70
000204  70656400          DCB      0x70,0x65,0x64,0x00
000208  4541502d          DCB      0x45,0x41,0x50,0x2d
00020c  54544c53          DCB      0x54,0x54,0x4c,0x53
000210  3a204c65          DCB      0x3a,0x20,0x4c,0x65
000214  6e677468          DCB      0x6e,0x67,0x74,0x68
000218  206d6973          DCB      0x20,0x6d,0x69,0x73
00021c  6d617463          DCB      0x6d,0x61,0x74,0x63
000220  6820696e          DCB      0x68,0x20,0x69,0x6e
000224  20506861          DCB      0x20,0x50,0x68,0x61
000228  73652032          DCB      0x73,0x65,0x20,0x32
00022c  20454150          DCB      0x20,0x45,0x41,0x50
000230  20667261          DCB      0x20,0x66,0x72,0x61
000234  6d652028          DCB      0x6d,0x65,0x20,0x28
000238  45415020          DCB      0x45,0x41,0x50,0x20
00023c  68647220          DCB      0x68,0x64,0x72,0x20
000240  6c656e3d          DCB      0x6c,0x65,0x6e,0x3d
000244  256c752c          DCB      0x25,0x6c,0x75,0x2c
000248  20454150          DCB      0x20,0x45,0x41,0x50
00024c  20646174          DCB      0x20,0x64,0x61,0x74
000250  61206c65          DCB      0x61,0x20,0x6c,0x65
000254  6e20696e          DCB      0x6e,0x20,0x69,0x6e
000258  20415650          DCB      0x20,0x41,0x56,0x50
00025c  3d256c75          DCB      0x3d,0x25,0x6c,0x75
000260  29000000          DCB      0x29,0x00,0x00,0x00
000264  4541502d          DCB      0x45,0x41,0x50,0x2d
000268  54544c53          DCB      0x54,0x54,0x4c,0x53
00026c  3a204964          DCB      0x3a,0x20,0x49,0x64
000270  656e7420          DCB      0x65,0x6e,0x74,0x20
000274  6d69736d          DCB      0x6d,0x69,0x73,0x6d
000278  61746368          DCB      0x61,0x74,0x63,0x68
00027c  20666f72          DCB      0x20,0x66,0x6f,0x72
000280  20506861          DCB      0x20,0x50,0x68,0x61
000284  73652032          DCB      0x73,0x65,0x20,0x32
000288  204d5343          DCB      0x20,0x4d,0x53,0x43
00028c  48415056          DCB      0x48,0x41,0x50,0x56
000290  32202872          DCB      0x32,0x20,0x28,0x72
000294  65636569          DCB      0x65,0x63,0x65,0x69
000298  76656420          DCB      0x76,0x65,0x64,0x20
00029c  4964656e          DCB      0x49,0x64,0x65,0x6e
0002a0  74203078          DCB      0x74,0x20,0x30,0x78
0002a4  25303278          DCB      0x25,0x30,0x32,0x78
0002a8  2c206578          DCB      0x2c,0x20,0x65,0x78
0002ac  70656374          DCB      0x70,0x65,0x63,0x74
0002b0  65642030          DCB      0x65,0x64,0x20,0x30
0002b4  78253032          DCB      0x78,0x25,0x30,0x32
0002b8  78290000          DCB      0x78,0x29,0x00,0x00
0002bc  4541502d          DCB      0x45,0x41,0x50,0x2d
0002c0  54544c53          DCB      0x54,0x54,0x4c,0x53
0002c4  3a20496e          DCB      0x3a,0x20,0x49,0x6e
0002c8  76616c69          DCB      0x76,0x61,0x6c,0x69
0002cc  64206175          DCB      0x64,0x20,0x61,0x75
0002d0  7468656e          DCB      0x74,0x68,0x65,0x6e
0002d4  74696361          DCB      0x74,0x69,0x63,0x61
0002d8  746f7220          DCB      0x74,0x6f,0x72,0x20
0002dc  72657370          DCB      0x72,0x65,0x73,0x70
0002e0  6f6e7365          DCB      0x6f,0x6e,0x73,0x65
0002e4  20696e20          DCB      0x20,0x69,0x6e,0x20
0002e8  50686173          DCB      0x50,0x68,0x61,0x73
0002ec  65203220          DCB      0x65,0x20,0x32,0x20
0002f0  4d534348          DCB      0x4d,0x53,0x43,0x48
0002f4  41505632          DCB      0x41,0x50,0x56,0x32
0002f8  20737563          DCB      0x20,0x73,0x75,0x63
0002fc  63657373          DCB      0x63,0x65,0x73,0x73
000300  20726571          DCB      0x20,0x72,0x65,0x71
000304  75657374          DCB      0x75,0x65,0x73,0x74
000308  00000000          DCB      0x00,0x00,0x00,0x00
00030c  4541502d          DCB      0x45,0x41,0x50,0x2d
000310  54544c53          DCB      0x54,0x54,0x4c,0x53
000314  3a205065          DCB      0x3a,0x20,0x50,0x65
000318  6e64696e          DCB      0x6e,0x64,0x69,0x6e
00031c  67205068          DCB      0x67,0x20,0x50,0x68
000320  61736520          DCB      0x61,0x73,0x65,0x20
000324  32207265          DCB      0x32,0x20,0x72,0x65
000328  71756573          DCB      0x71,0x75,0x65,0x73
00032c  74202d20          DCB      0x74,0x20,0x2d,0x20
000330  736b6970          DCB      0x73,0x6b,0x69,0x70
000334  20646563          DCB      0x20,0x64,0x65,0x63
000338  72797074          DCB      0x72,0x79,0x70,0x74
00033c  696f6e20          DCB      0x69,0x6f,0x6e,0x20
000340  616e6420          DCB      0x61,0x6e,0x64,0x20
000344  75736520          DCB      0x75,0x73,0x65,0x20
000348  6f6c6420          DCB      0x6f,0x6c,0x64,0x20
00034c  64617461          DCB      0x64,0x61,0x74,0x61
000350  00                DCB      0x00
