; generated by ARM C/C++ Compiler, 4.1 [Build 481]
; commandline ArmCC [--split_sections --debug -c --asm --interleave -o.\obj\eap_sake_common.o --depend=.\obj\eap_sake_common.d --feedback=.\obj\wifi.fed --cpu=Cortex-M3 --apcs=interwork -O0 -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\utils -I..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\wpa_supp_linux_plat -I..\lwIP\src\include -I..\lwIP\port\include -I..\lwIP\src\include\ipv4 -I..\target -I..\netapp -I..\marvel\driver\inc -I..\marvel\wpa\inc -I..\sdio\inc -I..\main -ID:\keilarm\ARM\INC -ID:\keilarm\ARM\INC\ST\STM32F10x -D__MICROLIB -DIEEE8021X_EAPOL -DOS_NO_C_LIB_DEFINES -DCONFIG_PEERKEY -DCONFIG_IEEE80211W -DCONFIG_IEEE80211R -DxCLOSE_WPA_LIMIT --omf_browse=.\obj\eap_sake_common.crf ..\wpa_supplicant-0.7.3\wpa_supplicant-0.7.3\src\eap_common\eap_sake_common.c]
                          THUMB

                          AREA ||i.dbug_buf||, CODE, READONLY, ALIGN=1

                  dbug_buf PROC
;;;22     #define WPA_RUN_TEST //wpa_printf(MSG_DEBUG,"WPA_RUN_TEST ### [%s:%d] FILE:%s .\r\n",__FUNCTION__,__LINE__,__FILE__);
;;;23     static void dbug_buf(const char * name , const unsigned char * buf , const int len)
000000  4770              BX       lr
;;;24     {
;;;25     	
;;;26     #if 0
;;;27     	int i = 0;
;;;28     	printf("dbug buf [%s]\n",name);
;;;29     	for(;i<len;i++)
;;;30     	{
;;;31     		printf("0x%02x,",buf[i]);
;;;32     	}
;;;33     	printf("\n");
;;;34     #endif
;;;35     }
;;;36     
                          ENDP


                          AREA ||i.eap_sake_add_attr||, CODE, READONLY, ALIGN=1

                  eap_sake_add_attr PROC
;;;383    
;;;384    void eap_sake_add_attr(struct wpabuf *buf, u8 type, const u8 *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;385    		       size_t len)
;;;386    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
;;;387    	wpabuf_put_u8(buf, type);
00000c  4639              MOV      r1,r7
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put_u8
;;;388    	wpabuf_put_u8(buf, 2 + len); /* Length; including attr header */
000014  1ca0              ADDS     r0,r4,#2
000016  b2c1              UXTB     r1,r0
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       wpabuf_put_u8
;;;389    	if (data)
00001e  b12d              CBZ      r5,|L2.44|
;;;390    		wpabuf_put_data(buf, data, len);
000020  4622              MOV      r2,r4
000022  4629              MOV      r1,r5
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       wpabuf_put_data
00002a  e008              B        |L2.62|
                  |L2.44|
;;;391    	else
;;;392    		os_memset(wpabuf_put(buf, len), 0, len);
00002c  4621              MOV      r1,r4
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       wpabuf_put
000034  4680              MOV      r8,r0
000036  4622              MOV      r2,r4
000038  2100              MOVS     r1,#0
00003a  f7fffffe          BL       os_memset
                  |L2.62|
;;;393    }
00003e  e8bd81f0          POP      {r4-r8,pc}
                          ENDP


                          AREA ||i.eap_sake_compute_mic||, CODE, READONLY, ALIGN=2

                  eap_sake_compute_mic PROC
;;;321     */
;;;322    int eap_sake_compute_mic(const u8 *tek_auth,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;323    			 const u8 *rand_s, const u8 *rand_p,
;;;324    			 const u8 *serverid, size_t serverid_len,
;;;325    			 const u8 *peerid, size_t peerid_len,
;;;326    			 int peer, const u8 *eap, size_t eap_len,
;;;327    			 const u8 *mic_pos, u8 *mic)
;;;328    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4692              MOV      r10,r2
000008  461d              MOV      r5,r3
00000a  e9dd7b1e          LDRD     r7,r11,[sp,#0x78]
00000e  e9dd681c          LDRD     r6,r8,[sp,#0x70]
;;;329    	u8 _rand[2 * EAP_SAKE_RAND_LEN];
;;;330    	u8 *tmp, *pos;
;;;331    	size_t tmplen;
;;;332    
;;;333    	tmplen = serverid_len + 1 + peerid_len + 1 + eap_len;
000012  1c70              ADDS     r0,r6,#1
000014  4438              ADD      r0,r0,r7
000016  1c40              ADDS     r0,r0,#1
000018  9921              LDR      r1,[sp,#0x84]
00001a  4408              ADD      r0,r0,r1
00001c  9006              STR      r0,[sp,#0x18]
;;;334    	tmp = os_malloc(tmplen);
00001e  9806              LDR      r0,[sp,#0x18]
000020  f7fffffe          BL       os_malloc
000024  4681              MOV      r9,r0
;;;335    	if (tmp == NULL)
000026  f1b90f00          CMP      r9,#0
00002a  d104              BNE      |L3.54|
;;;336    		return -1;
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L3.48|
;;;337    	pos = tmp;
;;;338    	if (peer) {
;;;339    		if (peerid) {
;;;340    			os_memcpy(pos, peerid, peerid_len);
;;;341    			pos += peerid_len;
;;;342    		}
;;;343    		*pos++ = 0x00;
;;;344    		if (serverid) {
;;;345    			os_memcpy(pos, serverid, serverid_len);
;;;346    			pos += serverid_len;
;;;347    		}
;;;348    		*pos++ = 0x00;
;;;349    
;;;350    		os_memcpy(_rand, rand_s, EAP_SAKE_RAND_LEN);
;;;351    		os_memcpy(_rand + EAP_SAKE_RAND_LEN, rand_p,
;;;352    			  EAP_SAKE_RAND_LEN);
;;;353    	} else {
;;;354    		if (serverid) {
;;;355    			os_memcpy(pos, serverid, serverid_len);
;;;356    			pos += serverid_len;
;;;357    		}
;;;358    		*pos++ = 0x00;
;;;359    		if (peerid) {
;;;360    			os_memcpy(pos, peerid, peerid_len);
;;;361    			pos += peerid_len;
;;;362    		}
;;;363    		*pos++ = 0x00;
;;;364    
;;;365    		os_memcpy(_rand, rand_p, EAP_SAKE_RAND_LEN);
;;;366    		os_memcpy(_rand + EAP_SAKE_RAND_LEN, rand_s,
;;;367    			  EAP_SAKE_RAND_LEN);
;;;368    	}
;;;369    
;;;370    	os_memcpy(pos, eap, eap_len);
;;;371    	os_memset(pos + (mic_pos - eap), 0, EAP_SAKE_MIC_LEN);
;;;372    
;;;373    	eap_sake_kdf(tek_auth, EAP_SAKE_TEK_AUTH_LEN,
;;;374    		     peer ? "Peer MIC" : "Server MIC",
;;;375    		     _rand, 2 * EAP_SAKE_RAND_LEN, tmp, tmplen,
;;;376    		     mic, EAP_SAKE_MIC_LEN);
;;;377    
;;;378    	os_free(tmp);
;;;379    
;;;380    	return 0;
;;;381    }
000030  b013              ADD      sp,sp,#0x4c
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.54|
000036  464c              MOV      r4,r9                 ;337
000038  f1bb0f00          CMP      r11,#0                ;338
00003c  d020              BEQ      |L3.128|
00003e  f1b80f00          CMP      r8,#0                 ;339
000042  d005              BEQ      |L3.80|
000044  463a              MOV      r2,r7                 ;340
000046  4641              MOV      r1,r8                 ;340
000048  4620              MOV      r0,r4                 ;340
00004a  f7fffffe          BL       os_memcpy
00004e  443c              ADD      r4,r4,r7              ;341
                  |L3.80|
000050  2000              MOVS     r0,#0                 ;343
000052  f8040b01          STRB     r0,[r4],#1            ;343
000056  b12d              CBZ      r5,|L3.100|
000058  4632              MOV      r2,r6                 ;345
00005a  4629              MOV      r1,r5                 ;345
00005c  4620              MOV      r0,r4                 ;345
00005e  f7fffffe          BL       os_memcpy
000062  4434              ADD      r4,r4,r6              ;346
                  |L3.100|
000064  2000              MOVS     r0,#0                 ;348
000066  f8040b01          STRB     r0,[r4],#1            ;348
00006a  2210              MOVS     r2,#0x10              ;350
00006c  a807              ADD      r0,sp,#0x1c           ;350
00006e  9910              LDR      r1,[sp,#0x40]         ;350
000070  f7fffffe          BL       os_memcpy
000074  2210              MOVS     r2,#0x10              ;351
000076  4651              MOV      r1,r10                ;351
000078  a80b              ADD      r0,sp,#0x2c           ;351
00007a  f7fffffe          BL       os_memcpy
00007e  e01f              B        |L3.192|
                  |L3.128|
000080  b12d              CBZ      r5,|L3.142|
000082  4632              MOV      r2,r6                 ;355
000084  4629              MOV      r1,r5                 ;355
000086  4620              MOV      r0,r4                 ;355
000088  f7fffffe          BL       os_memcpy
00008c  4434              ADD      r4,r4,r6              ;356
                  |L3.142|
00008e  2000              MOVS     r0,#0                 ;358
000090  f8040b01          STRB     r0,[r4],#1            ;358
000094  f1b80f00          CMP      r8,#0                 ;359
000098  d005              BEQ      |L3.166|
00009a  463a              MOV      r2,r7                 ;360
00009c  4641              MOV      r1,r8                 ;360
00009e  4620              MOV      r0,r4                 ;360
0000a0  f7fffffe          BL       os_memcpy
0000a4  443c              ADD      r4,r4,r7              ;361
                  |L3.166|
0000a6  2000              MOVS     r0,#0                 ;363
0000a8  f8040b01          STRB     r0,[r4],#1            ;363
0000ac  2210              MOVS     r2,#0x10              ;365
0000ae  4651              MOV      r1,r10                ;365
0000b0  a807              ADD      r0,sp,#0x1c           ;365
0000b2  f7fffffe          BL       os_memcpy
0000b6  2210              MOVS     r2,#0x10              ;366
0000b8  a80b              ADD      r0,sp,#0x2c           ;366
0000ba  9910              LDR      r1,[sp,#0x40]         ;366
0000bc  f7fffffe          BL       os_memcpy
                  |L3.192|
0000c0  4620              MOV      r0,r4                 ;370
0000c2  e9dd1220          LDRD     r1,r2,[sp,#0x80]      ;370
0000c6  f7fffffe          BL       os_memcpy
0000ca  9a20              LDR      r2,[sp,#0x80]         ;371
0000cc  9922              LDR      r1,[sp,#0x88]         ;371
0000ce  1a89              SUBS     r1,r1,r2              ;371
0000d0  1908              ADDS     r0,r1,r4              ;371
0000d2  2210              MOVS     r2,#0x10              ;371
0000d4  2100              MOVS     r1,#0                 ;371
0000d6  f7fffffe          BL       os_memset
0000da  2310              MOVS     r3,#0x10              ;373
0000dc  9a23              LDR      r2,[sp,#0x8c]         ;373
0000de  9906              LDR      r1,[sp,#0x18]         ;373
0000e0  e9cd9101          STRD     r9,r1,[sp,#4]         ;373
0000e4  e9cd2303          STRD     r2,r3,[sp,#0xc]       ;373
0000e8  2320              MOVS     r3,#0x20              ;373
0000ea  9300              STR      r3,[sp,#0]            ;373
0000ec  f1bb0f00          CMP      r11,#0                ;373
0000f0  d001              BEQ      |L3.246|
0000f2  a007              ADR      r0,|L3.272|
0000f4  e000              B        |L3.248|
                  |L3.246|
0000f6  a009              ADR      r0,|L3.284|
                  |L3.248|
0000f8  4602              MOV      r2,r0                 ;374
0000fa  ab07              ADD      r3,sp,#0x1c           ;374
0000fc  2110              MOVS     r1,#0x10              ;374
0000fe  980f              LDR      r0,[sp,#0x3c]         ;374
000100  f7fffffe          BL       eap_sake_kdf
000104  4648              MOV      r0,r9                 ;378
000106  f7fffffe          BL       os_free
00010a  2000              MOVS     r0,#0                 ;380
00010c  e790              B        |L3.48|
;;;382    
                          ENDP

00010e  0000              DCW      0x0000
                  |L3.272|
000110  50656572          DCB      "Peer MIC",0
000114  204d4943
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L3.284|
00011c  53657276          DCB      "Server MIC",0
000120  6572204d
000124  494300  
000127  00                DCB      0

                          AREA ||i.eap_sake_derive_keys||, CODE, READONLY, ALIGN=2

                  eap_sake_derive_keys PROC
;;;264     */
;;;265    void eap_sake_derive_keys(const u8 *root_secret_a, const u8 *root_secret_b,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;266    			  const u8 *rand_s, const u8 *rand_p, u8 *tek, u8 *msk,
;;;267    			  u8 *emsk)
;;;268    {
000004  b0ae              SUB      sp,sp,#0xb8
000006  4606              MOV      r6,r0
000008  460c              MOV      r4,r1
00000a  4615              MOV      r5,r2
00000c  461f              MOV      r7,r3
00000e  e9dda836          LDRD     r10,r8,[sp,#0xd8]
000012  f8dd90e0          LDR      r9,[sp,#0xe0]
;;;269    	u8 sms_a[EAP_SAKE_SMS_LEN];
;;;270    	u8 sms_b[EAP_SAKE_SMS_LEN];
;;;271    	u8 key_buf[EAP_MSK_LEN + EAP_EMSK_LEN];
;;;272    
;;;273    	wpa_printf(MSG_DEBUG, "EAP-SAKE: Deriving keys");
000016  a13a              ADR      r1,|L4.256|
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       wpa_printf
;;;274    
;;;275    	wpa_hexdump_key(MSG_DEBUG, "EAP-SAKE: Root-Secret-A",
00001e  2310              MOVS     r3,#0x10
000020  4632              MOV      r2,r6
000022  a13d              ADR      r1,|L4.280|
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       wpa_hexdump_key
;;;276    			root_secret_a, EAP_SAKE_ROOT_SECRET_LEN);
;;;277    	eap_sake_kdf(root_secret_a, EAP_SAKE_ROOT_SECRET_LEN,
00002a  2310              MOVS     r3,#0x10
00002c  aa2a              ADD      r2,sp,#0xa8
00002e  e9cd5301          STRD     r5,r3,[sp,#4]
000032  e9cd2303          STRD     r2,r3,[sp,#0xc]
000036  9300              STR      r3,[sp,#0]
000038  463b              MOV      r3,r7
00003a  a23d              ADR      r2,|L4.304|
00003c  2110              MOVS     r1,#0x10
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       eap_sake_kdf
;;;278    		     "SAKE Master Secret A",
;;;279    		     rand_p, EAP_SAKE_RAND_LEN, rand_s, EAP_SAKE_RAND_LEN,
;;;280    		     sms_a, EAP_SAKE_SMS_LEN);
;;;281    	wpa_hexdump_key(MSG_DEBUG, "EAP-SAKE: SMS-A", sms_a, EAP_SAKE_SMS_LEN);
000044  2310              MOVS     r3,#0x10
000046  aa2a              ADD      r2,sp,#0xa8
000048  a13f              ADR      r1,|L4.328|
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       wpa_hexdump_key
;;;282    	eap_sake_kdf(sms_a, EAP_SAKE_SMS_LEN, "Transient EAP Key",
000050  2320              MOVS     r3,#0x20
000052  2110              MOVS     r1,#0x10
000054  e9cd7101          STRD     r7,r1,[sp,#4]
000058  e9cda303          STRD     r10,r3,[sp,#0xc]
00005c  9100              STR      r1,[sp,#0]
00005e  462b              MOV      r3,r5
000060  a23d              ADR      r2,|L4.344|
000062  a82a              ADD      r0,sp,#0xa8
000064  f7fffffe          BL       eap_sake_kdf
;;;283    		     rand_s, EAP_SAKE_RAND_LEN, rand_p, EAP_SAKE_RAND_LEN,
;;;284    		     tek, EAP_SAKE_TEK_LEN);
;;;285    	wpa_hexdump_key(MSG_DEBUG, "EAP-SAKE: TEK-Auth",
000068  2310              MOVS     r3,#0x10
00006a  4652              MOV      r2,r10
00006c  a13f              ADR      r1,|L4.364|
00006e  2000              MOVS     r0,#0
000070  f7fffffe          BL       wpa_hexdump_key
;;;286    			tek, EAP_SAKE_TEK_AUTH_LEN);
;;;287    	wpa_hexdump_key(MSG_DEBUG, "EAP-SAKE: TEK-Cipher",
000074  2310              MOVS     r3,#0x10
000076  f10a0210          ADD      r2,r10,#0x10
00007a  a141              ADR      r1,|L4.384|
00007c  2000              MOVS     r0,#0
00007e  f7fffffe          BL       wpa_hexdump_key
;;;288    			tek + EAP_SAKE_TEK_AUTH_LEN, EAP_SAKE_TEK_CIPHER_LEN);
;;;289    
;;;290    	wpa_hexdump_key(MSG_DEBUG, "EAP-SAKE: Root-Secret-B",
000082  2310              MOVS     r3,#0x10
000084  4622              MOV      r2,r4
000086  a144              ADR      r1,|L4.408|
000088  2000              MOVS     r0,#0
00008a  f7fffffe          BL       wpa_hexdump_key
;;;291    			root_secret_b, EAP_SAKE_ROOT_SECRET_LEN);
;;;292    	eap_sake_kdf(root_secret_b, EAP_SAKE_ROOT_SECRET_LEN,
00008e  2310              MOVS     r3,#0x10
000090  aa26              ADD      r2,sp,#0x98
000092  e9cd5301          STRD     r5,r3,[sp,#4]
000096  e9cd2303          STRD     r2,r3,[sp,#0xc]
00009a  9300              STR      r3,[sp,#0]
00009c  463b              MOV      r3,r7
00009e  a244              ADR      r2,|L4.432|
0000a0  2110              MOVS     r1,#0x10
0000a2  4620              MOV      r0,r4
0000a4  f7fffffe          BL       eap_sake_kdf
;;;293    		     "SAKE Master Secret B",
;;;294    		     rand_p, EAP_SAKE_RAND_LEN, rand_s, EAP_SAKE_RAND_LEN,
;;;295    		     sms_b, EAP_SAKE_SMS_LEN);
;;;296    	wpa_hexdump_key(MSG_DEBUG, "EAP-SAKE: SMS-B", sms_b, EAP_SAKE_SMS_LEN);
0000a8  2310              MOVS     r3,#0x10
0000aa  aa26              ADD      r2,sp,#0x98
0000ac  a146              ADR      r1,|L4.456|
0000ae  2000              MOVS     r0,#0
0000b0  f7fffffe          BL       wpa_hexdump_key
;;;297    	eap_sake_kdf(sms_b, EAP_SAKE_SMS_LEN, "Master Session Key",
0000b4  2380              MOVS     r3,#0x80
0000b6  aa06              ADD      r2,sp,#0x18
0000b8  2110              MOVS     r1,#0x10
0000ba  a802              ADD      r0,sp,#8
0000bc  c00e              STM      r0!,{r1-r3}
0000be  462b              MOV      r3,r5
0000c0  a245              ADR      r2,|L4.472|
0000c2  a826              ADD      r0,sp,#0x98
0000c4  e9cd1700          STRD     r1,r7,[sp,#0]
0000c8  f7fffffe          BL       eap_sake_kdf
;;;298    		     rand_s, EAP_SAKE_RAND_LEN, rand_p, EAP_SAKE_RAND_LEN,
;;;299    		     key_buf, sizeof(key_buf));
;;;300    	os_memcpy(msk, key_buf, EAP_MSK_LEN);
0000cc  2240              MOVS     r2,#0x40
0000ce  a906              ADD      r1,sp,#0x18
0000d0  4640              MOV      r0,r8
0000d2  f7fffffe          BL       os_memcpy
;;;301    	os_memcpy(emsk, key_buf + EAP_MSK_LEN, EAP_EMSK_LEN);
0000d6  2240              MOVS     r2,#0x40
0000d8  a916              ADD      r1,sp,#0x58
0000da  4648              MOV      r0,r9
0000dc  f7fffffe          BL       os_memcpy
;;;302    	wpa_hexdump_key(MSG_DEBUG, "EAP-SAKE: MSK", msk, EAP_MSK_LEN);
0000e0  2340              MOVS     r3,#0x40
0000e2  4642              MOV      r2,r8
0000e4  a141              ADR      r1,|L4.492|
0000e6  2000              MOVS     r0,#0
0000e8  f7fffffe          BL       wpa_hexdump_key
;;;303    	wpa_hexdump_key(MSG_DEBUG, "EAP-SAKE: EMSK", emsk, EAP_EMSK_LEN);
0000ec  2340              MOVS     r3,#0x40
0000ee  464a              MOV      r2,r9
0000f0  a142              ADR      r1,|L4.508|
0000f2  2000              MOVS     r0,#0
0000f4  f7fffffe          BL       wpa_hexdump_key
;;;304    }
0000f8  b02e              ADD      sp,sp,#0xb8
0000fa  e8bd87f0          POP      {r4-r10,pc}
;;;305    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L4.256|
000100  4541502d          DCB      "EAP-SAKE: Deriving keys",0
000104  53414b45
000108  3a204465
00010c  72697669
000110  6e67206b
000114  65797300
                  |L4.280|
000118  4541502d          DCB      "EAP-SAKE: Root-Secret-A",0
00011c  53414b45
000120  3a20526f
000124  6f742d53
000128  65637265
00012c  742d4100
                  |L4.304|
000130  53414b45          DCB      "SAKE Master Secret A",0
000134  204d6173
000138  74657220
00013c  53656372
000140  65742041
000144  00      
000145  00                DCB      0
000146  00                DCB      0
000147  00                DCB      0
                  |L4.328|
000148  4541502d          DCB      "EAP-SAKE: SMS-A",0
00014c  53414b45
000150  3a20534d
000154  532d4100
                  |L4.344|
000158  5472616e          DCB      "Transient EAP Key",0
00015c  7369656e
000160  74204541
000164  50204b65
000168  7900    
00016a  00                DCB      0
00016b  00                DCB      0
                  |L4.364|
00016c  4541502d          DCB      "EAP-SAKE: TEK-Auth",0
000170  53414b45
000174  3a205445
000178  4b2d4175
00017c  746800  
00017f  00                DCB      0
                  |L4.384|
000180  4541502d          DCB      "EAP-SAKE: TEK-Cipher",0
000184  53414b45
000188  3a205445
00018c  4b2d4369
000190  70686572
000194  00      
000195  00                DCB      0
000196  00                DCB      0
000197  00                DCB      0
                  |L4.408|
000198  4541502d          DCB      "EAP-SAKE: Root-Secret-B",0
00019c  53414b45
0001a0  3a20526f
0001a4  6f742d53
0001a8  65637265
0001ac  742d4200
                  |L4.432|
0001b0  53414b45          DCB      "SAKE Master Secret B",0
0001b4  204d6173
0001b8  74657220
0001bc  53656372
0001c0  65742042
0001c4  00      
0001c5  00                DCB      0
0001c6  00                DCB      0
0001c7  00                DCB      0
                  |L4.456|
0001c8  4541502d          DCB      "EAP-SAKE: SMS-B",0
0001cc  53414b45
0001d0  3a20534d
0001d4  532d4200
                  |L4.472|
0001d8  4d617374          DCB      "Master Session Key",0
0001dc  65722053
0001e0  65737369
0001e4  6f6e204b
0001e8  657900  
0001eb  00                DCB      0
                  |L4.492|
0001ec  4541502d          DCB      "EAP-SAKE: MSK",0
0001f0  53414b45
0001f4  3a204d53
0001f8  4b00    
0001fa  00                DCB      0
0001fb  00                DCB      0
                  |L4.508|
0001fc  4541502d          DCB      "EAP-SAKE: EMSK",0
000200  53414b45
000204  3a20454d
000208  534b00  
00020b  00                DCB      0

                          AREA ||i.eap_sake_kdf||, CODE, READONLY, ALIGN=1

                  eap_sake_kdf PROC
;;;213     */
;;;214    static void eap_sake_kdf(const u8 *key, size_t key_len, const char *label,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;215    			 const u8 *data, size_t data_len,
;;;216    			 const u8 *data2, size_t data2_len,
;;;217    			 u8 *buf, size_t buf_len)
;;;218    {
000004  b091              SUB      sp,sp,#0x44
000006  4682              MOV      r10,r0
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
00000c  f8ddb078          LDR      r11,[sp,#0x78]
000010  e9dd8921          LDRD     r8,r9,[sp,#0x84]
;;;219    	u8 counter = 0;
000014  2000              MOVS     r0,#0
000016  9010              STR      r0,[sp,#0x40]
;;;220    	size_t pos, plen;
;;;221    	u8 hash[SHA1_MAC_LEN];
;;;222    	size_t label_len = os_strlen(label) + 1;
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       os_strlen
00001e  1c40              ADDS     r0,r0,#1
000020  900a              STR      r0,[sp,#0x28]
;;;223    	const unsigned char *addr[4];
;;;224    	size_t len[4];
;;;225    
;;;226    	addr[0] = (u8 *) label; /* Label | Y */
000022  9506              STR      r5,[sp,#0x18]
;;;227    	len[0] = label_len;
000024  980a              LDR      r0,[sp,#0x28]
000026  9002              STR      r0,[sp,#8]
;;;228    	addr[1] = data; /* Msg[start] */
000028  9707              STR      r7,[sp,#0x1c]
;;;229    	len[1] = data_len;
00002a  f8cdb00c          STR      r11,[sp,#0xc]
;;;230    	addr[2] = data2; /* Msg[end] */
00002e  981f              LDR      r0,[sp,#0x7c]
000030  9008              STR      r0,[sp,#0x20]
;;;231    	len[2] = data2_len;
000032  9820              LDR      r0,[sp,#0x80]
000034  9004              STR      r0,[sp,#0x10]
;;;232    	addr[3] = &counter; /* Length */
000036  a810              ADD      r0,sp,#0x40
000038  9009              STR      r0,[sp,#0x24]
;;;233    	len[3] = 1;
00003a  2001              MOVS     r0,#1
00003c  9005              STR      r0,[sp,#0x14]
;;;234    
;;;235    	pos = 0;
00003e  2400              MOVS     r4,#0
;;;236    	while (pos < buf_len) {
000040  e026              B        |L5.144|
                  |L5.66|
;;;237    		plen = buf_len - pos;
000042  eba90604          SUB      r6,r9,r4
;;;238    		if (plen >= SHA1_MAC_LEN) {
000046  2e14              CMP      r6,#0x14
000048  d30c              BCC      |L5.100|
;;;239    			hmac_sha1_vector(key, key_len, 4, addr, len,
00004a  eb080304          ADD      r3,r8,r4
00004e  aa02              ADD      r2,sp,#8
000050  e9cd2300          STRD     r2,r3,[sp,#0]
000054  ab06              ADD      r3,sp,#0x18
000056  2204              MOVS     r2,#4
000058  4650              MOV      r0,r10
00005a  9912              LDR      r1,[sp,#0x48]
00005c  f7fffffe          BL       hmac_sha1_vector
;;;240    					 &buf[pos]);
;;;241    			pos += SHA1_MAC_LEN;
000060  3414              ADDS     r4,r4,#0x14
000062  e010              B        |L5.134|
                  |L5.100|
;;;242    		} else {
;;;243    			hmac_sha1_vector(key, key_len, 4, addr, len,
000064  ab0b              ADD      r3,sp,#0x2c
000066  aa02              ADD      r2,sp,#8
000068  e9cd2300          STRD     r2,r3,[sp,#0]
00006c  ab06              ADD      r3,sp,#0x18
00006e  2204              MOVS     r2,#4
000070  4650              MOV      r0,r10
000072  9912              LDR      r1,[sp,#0x48]
000074  f7fffffe          BL       hmac_sha1_vector
;;;244    					 hash);
;;;245    			os_memcpy(&buf[pos], hash, plen);
000078  eb080004          ADD      r0,r8,r4
00007c  4632              MOV      r2,r6
00007e  a90b              ADD      r1,sp,#0x2c
000080  f7fffffe          BL       os_memcpy
;;;246    			break;
000084  e006              B        |L5.148|
                  |L5.134|
;;;247    		}
;;;248    		counter++;
000086  f89d0040          LDRB     r0,[sp,#0x40]
00008a  1c40              ADDS     r0,r0,#1
00008c  b2c0              UXTB     r0,r0
00008e  9010              STR      r0,[sp,#0x40]
                  |L5.144|
000090  454c              CMP      r4,r9                 ;236
000092  d3d6              BCC      |L5.66|
                  |L5.148|
000094  bf00              NOP                            ;246
;;;249    	}
;;;250    }
000096  b015              ADD      sp,sp,#0x54
000098  e8bd8ff0          POP      {r4-r11,pc}
;;;251    
                          ENDP


                          AREA ||i.eap_sake_parse_add_attr||, CODE, READONLY, ALIGN=2

                  eap_sake_parse_add_attr PROC
;;;23     
;;;24     static int eap_sake_parse_add_attr(struct eap_sake_parse_attr *attr,
000000  b570              PUSH     {r4-r6,lr}
;;;25     				   const u8 *pos)
;;;26     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;27     	size_t i;
;;;28     
;;;29     	switch (pos[0]) {
000006  7820              LDRB     r0,[r4,#0]
000008  2808              CMP      r0,#8
00000a  d074              BEQ      |L6.246|
00000c  dc06              BGT      |L6.28|
00000e  d273              BCS      |L6.248|
000010  e8dff000          TBB      [pc,r0]
000014  f4152739          DCB      0xf4,0x15,0x27,0x39
000018  4b5d6776          DCB      0x4b,0x5d,0x67,0x76
                  |L6.28|
00001c  2881              CMP      r0,#0x81
00001e  d06c              BEQ      |L6.250|
000020  dc06              BGT      |L6.48|
000022  2809              CMP      r0,#9
000024  d06a              BEQ      |L6.252|
000026  280a              CMP      r0,#0xa
000028  d069              BEQ      |L6.254|
00002a  2880              CMP      r0,#0x80
00002c  d164              BNE      |L6.248|
00002e  e0a1              B        |L6.372|
                  |L6.48|
000030  2882              CMP      r0,#0x82
000032  d06f              BEQ      |L6.276|
000034  2883              CMP      r0,#0x83
000036  d06e              BEQ      |L6.278|
000038  2884              CMP      r0,#0x84
00003a  d15d              BNE      |L6.248|
00003c  e0cc              B        |L6.472|
;;;30     	case EAP_SAKE_AT_RAND_S:
;;;31     		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_RAND_S");
00003e  a17f              ADR      r1,|L6.572|
000040  2000              MOVS     r0,#0
000042  f7fffffe          BL       wpa_printf
;;;32     		if (pos[1] != 2 + EAP_SAKE_RAND_LEN) {
000046  7860              LDRB     r0,[r4,#1]
000048  2812              CMP      r0,#0x12
00004a  d007              BEQ      |L6.92|
;;;33     			wpa_printf(MSG_DEBUG, "EAP-SAKE: AT_RAND_S with "
00004c  7862              LDRB     r2,[r4,#1]
00004e  a182              ADR      r1,|L6.600|
000050  2000              MOVS     r0,#0
000052  f7fffffe          BL       wpa_printf
;;;34     				   "invalid length %d", pos[1]);
;;;35     			return -1;
000056  f04f30ff          MOV      r0,#0xffffffff
                  |L6.90|
;;;36     		}
;;;37     		attr->rand_s = pos + 2;
;;;38     		break;
;;;39     	case EAP_SAKE_AT_RAND_P:
;;;40     		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_RAND_P");
;;;41     		if (pos[1] != 2 + EAP_SAKE_RAND_LEN) {
;;;42     			wpa_printf(MSG_DEBUG, "EAP-SAKE: AT_RAND_P with "
;;;43     				   "invalid length %d", pos[1]);
;;;44     			return -1;
;;;45     		}
;;;46     		attr->rand_p = pos + 2;
;;;47     		break;
;;;48     	case EAP_SAKE_AT_MIC_S:
;;;49     		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_MIC_S");
;;;50     		if (pos[1] != 2 + EAP_SAKE_MIC_LEN) {
;;;51     			wpa_printf(MSG_DEBUG, "EAP-SAKE: AT_MIC_S with "
;;;52     				   "invalid length %d", pos[1]);
;;;53     			return -1;
;;;54     		}
;;;55     		attr->mic_s = pos + 2;
;;;56     		break;
;;;57     	case EAP_SAKE_AT_MIC_P:
;;;58     		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_MIC_P");
;;;59     		if (pos[1] != 2 + EAP_SAKE_MIC_LEN) {
;;;60     			wpa_printf(MSG_DEBUG, "EAP-SAKE: AT_MIC_P with "
;;;61     				   "invalid length %d", pos[1]);
;;;62     			return -1;
;;;63     		}
;;;64     		attr->mic_p = pos + 2;
;;;65     		break;
;;;66     	case EAP_SAKE_AT_SERVERID:
;;;67     		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_SERVERID");
;;;68     		attr->serverid = pos + 2;
;;;69     		attr->serverid_len = pos[1] - 2;
;;;70     		break;
;;;71     	case EAP_SAKE_AT_PEERID:
;;;72     		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_PEERID");
;;;73     		attr->peerid = pos + 2;
;;;74     		attr->peerid_len = pos[1] - 2;
;;;75     		break;
;;;76     	case EAP_SAKE_AT_SPI_S:
;;;77     		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_SPI_S");
;;;78     		attr->spi_s = pos + 2;
;;;79     		attr->spi_s_len = pos[1] - 2;
;;;80     		break;
;;;81     	case EAP_SAKE_AT_SPI_P:
;;;82     		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_SPI_P");
;;;83     		attr->spi_p = pos + 2;
;;;84     		attr->spi_p_len = pos[1] - 2;
;;;85     		break;
;;;86     	case EAP_SAKE_AT_ANY_ID_REQ:
;;;87     		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_ANY_ID_REQ");
;;;88     		if (pos[1] != 4) {
;;;89     			wpa_printf(MSG_DEBUG, "EAP-SAKE: Invalid AT_ANY_ID_REQ"
;;;90     				   " length %d", pos[1]);
;;;91     			return -1;
;;;92     		}
;;;93     		attr->any_id_req = pos + 2;
;;;94     		break;
;;;95     	case EAP_SAKE_AT_PERM_ID_REQ:
;;;96     		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_PERM_ID_REQ");
;;;97     		if (pos[1] != 4) {
;;;98     			wpa_printf(MSG_DEBUG, "EAP-SAKE: Invalid "
;;;99     				   "AT_PERM_ID_REQ length %d", pos[1]);
;;;100    			return -1;
;;;101    		}
;;;102    		attr->perm_id_req = pos + 2;
;;;103    		break;
;;;104    	case EAP_SAKE_AT_ENCR_DATA:
;;;105    		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_ENCR_DATA");
;;;106    		attr->encr_data = pos + 2;
;;;107    		attr->encr_data_len = pos[1] - 2;
;;;108    		break;
;;;109    	case EAP_SAKE_AT_IV:
;;;110    		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_IV");
;;;111    		attr->iv = pos + 2;
;;;112    		attr->iv_len = pos[1] - 2;
;;;113    		break;
;;;114    	case EAP_SAKE_AT_PADDING:
;;;115    		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_PADDING");
;;;116    		for (i = 2; i < pos[1]; i++) {
;;;117    			if (pos[i]) {
;;;118    				wpa_printf(MSG_DEBUG, "EAP-SAKE: AT_PADDING "
;;;119    					   "with non-zero pad byte");
;;;120    				return -1;
;;;121    			}
;;;122    		}
;;;123    		break;
;;;124    	case EAP_SAKE_AT_NEXT_TMPID:
;;;125    		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_NEXT_TMPID");
;;;126    		attr->next_tmpid = pos + 2;
;;;127    		attr->next_tmpid_len = pos[1] - 2;
;;;128    		break;
;;;129    	case EAP_SAKE_AT_MSK_LIFE:
;;;130    		wpa_printf(MSG_DEBUG, "EAP-SAKE: Parse: AT_IV");
;;;131    		if (pos[1] != 6) {
;;;132    			wpa_printf(MSG_DEBUG, "EAP-SAKE: Invalid "
;;;133    				   "AT_MSK_LIFE length %d", pos[1]);
;;;134    			return -1;
;;;135    		}
;;;136    		attr->msk_life = pos + 2;
;;;137    		break;
;;;138    	default:
;;;139    		if (pos[0] < 128) {
;;;140    			wpa_printf(MSG_DEBUG, "EAP-SAKE: Unknown non-skippable"
;;;141    				   " attribute %d", pos[0]);
;;;142    			return -1;
;;;143    		}
;;;144    		wpa_printf(MSG_DEBUG, "EAP-SAKE: Ignoring unknown skippable "
;;;145    			   "attribute %d", pos[0]);
;;;146    		break;
;;;147    	}
;;;148    
;;;149    	if (attr->iv && !attr->encr_data) {
;;;150    		wpa_printf(MSG_DEBUG, "EAP-SAKE: AT_IV included without "
;;;151    			   "AT_ENCR_DATA");
;;;152    		return -1;
;;;153    	}
;;;154    
;;;155    	return 0;
;;;156    }
00005a  bd70              POP      {r4-r6,pc}
                  |L6.92|
00005c  1ca0              ADDS     r0,r4,#2              ;37
00005e  6028              STR      r0,[r5,#0]            ;37
000060  e0dd              B        |L6.542|
000062  a188              ADR      r1,|L6.644|
000064  2000              MOVS     r0,#0                 ;40
000066  f7fffffe          BL       wpa_printf
00006a  7860              LDRB     r0,[r4,#1]            ;41
00006c  2812              CMP      r0,#0x12              ;41
00006e  d007              BEQ      |L6.128|
000070  7862              LDRB     r2,[r4,#1]            ;42
000072  a18b              ADR      r1,|L6.672|
000074  2000              MOVS     r0,#0                 ;42
000076  f7fffffe          BL       wpa_printf
00007a  f04f30ff          MOV      r0,#0xffffffff        ;44
00007e  e7ec              B        |L6.90|
                  |L6.128|
000080  1ca0              ADDS     r0,r4,#2              ;46
000082  6068              STR      r0,[r5,#4]            ;46
000084  e0cb              B        |L6.542|
000086  a191              ADR      r1,|L6.716|
000088  2000              MOVS     r0,#0                 ;49
00008a  f7fffffe          BL       wpa_printf
00008e  7860              LDRB     r0,[r4,#1]            ;50
000090  2812              CMP      r0,#0x12              ;50
000092  d007              BEQ      |L6.164|
000094  7862              LDRB     r2,[r4,#1]            ;51
000096  a194              ADR      r1,|L6.744|
000098  2000              MOVS     r0,#0                 ;51
00009a  f7fffffe          BL       wpa_printf
00009e  f04f30ff          MOV      r0,#0xffffffff        ;53
0000a2  e7da              B        |L6.90|
                  |L6.164|
0000a4  1ca0              ADDS     r0,r4,#2              ;55
0000a6  60a8              STR      r0,[r5,#8]            ;55
0000a8  e0b9              B        |L6.542|
0000aa  a19a              ADR      r1,|L6.788|
0000ac  2000              MOVS     r0,#0                 ;58
0000ae  f7fffffe          BL       wpa_printf
0000b2  7860              LDRB     r0,[r4,#1]            ;59
0000b4  2812              CMP      r0,#0x12              ;59
0000b6  d007              BEQ      |L6.200|
0000b8  7862              LDRB     r2,[r4,#1]            ;60
0000ba  a19d              ADR      r1,|L6.816|
0000bc  2000              MOVS     r0,#0                 ;60
0000be  f7fffffe          BL       wpa_printf
0000c2  f04f30ff          MOV      r0,#0xffffffff        ;62
0000c6  e7c8              B        |L6.90|
                  |L6.200|
0000c8  1ca0              ADDS     r0,r4,#2              ;64
0000ca  60e8              STR      r0,[r5,#0xc]          ;64
0000cc  e0a7              B        |L6.542|
0000ce  a1a3              ADR      r1,|L6.860|
0000d0  2000              MOVS     r0,#0                 ;67
0000d2  f7fffffe          BL       wpa_printf
0000d6  1ca0              ADDS     r0,r4,#2              ;68
0000d8  6128              STR      r0,[r5,#0x10]         ;68
0000da  7860              LDRB     r0,[r4,#1]            ;69
0000dc  1e80              SUBS     r0,r0,#2              ;69
0000de  6168              STR      r0,[r5,#0x14]         ;69
0000e0  e09d              B        |L6.542|
0000e2  a1a6              ADR      r1,|L6.892|
0000e4  2000              MOVS     r0,#0                 ;72
0000e6  f7fffffe          BL       wpa_printf
0000ea  1ca0              ADDS     r0,r4,#2              ;73
0000ec  61a8              STR      r0,[r5,#0x18]         ;73
0000ee  7860              LDRB     r0,[r4,#1]            ;74
0000f0  1e80              SUBS     r0,r0,#2              ;74
0000f2  61e8              STR      r0,[r5,#0x1c]         ;74
0000f4  e093              B        |L6.542|
                  |L6.246|
0000f6  e00f              B        |L6.280|
                  |L6.248|
0000f8  e080              B        |L6.508|
                  |L6.250|
0000fa  e045              B        |L6.392|
                  |L6.252|
0000fc  e016              B        |L6.300|
                  |L6.254|
0000fe  e027              B        |L6.336|
000100  a1a5              ADR      r1,|L6.920|
000102  2000              MOVS     r0,#0                 ;77
000104  f7fffffe          BL       wpa_printf
000108  1ca0              ADDS     r0,r4,#2              ;78
00010a  6228              STR      r0,[r5,#0x20]         ;78
00010c  7860              LDRB     r0,[r4,#1]            ;79
00010e  1e80              SUBS     r0,r0,#2              ;79
000110  6268              STR      r0,[r5,#0x24]         ;79
000112  e084              B        |L6.542|
                  |L6.276|
000114  e042              B        |L6.412|
                  |L6.278|
000116  e055              B        |L6.452|
                  |L6.280|
000118  a1a6              ADR      r1,|L6.948|
00011a  2000              MOVS     r0,#0                 ;82
00011c  f7fffffe          BL       wpa_printf
000120  1ca0              ADDS     r0,r4,#2              ;83
000122  62a8              STR      r0,[r5,#0x28]         ;83
000124  7860              LDRB     r0,[r4,#1]            ;84
000126  1e80              SUBS     r0,r0,#2              ;84
000128  62e8              STR      r0,[r5,#0x2c]         ;84
00012a  e078              B        |L6.542|
                  |L6.300|
00012c  a1a8              ADR      r1,|L6.976|
00012e  2000              MOVS     r0,#0                 ;87
000130  f7fffffe          BL       wpa_printf
000134  7860              LDRB     r0,[r4,#1]            ;88
000136  2804              CMP      r0,#4                 ;88
000138  d007              BEQ      |L6.330|
00013a  7862              LDRB     r2,[r4,#1]            ;89
00013c  a1ac              ADR      r1,|L6.1008|
00013e  2000              MOVS     r0,#0                 ;89
000140  f7fffffe          BL       wpa_printf
000144  f04f30ff          MOV      r0,#0xffffffff        ;91
000148  e787              B        |L6.90|
                  |L6.330|
00014a  1ca0              ADDS     r0,r4,#2              ;93
00014c  6328              STR      r0,[r5,#0x30]         ;93
00014e  e066              B        |L6.542|
                  |L6.336|
000150  a1b2              ADR      r1,|L6.1052|
000152  2000              MOVS     r0,#0                 ;96
000154  f7fffffe          BL       wpa_printf
000158  7860              LDRB     r0,[r4,#1]            ;97
00015a  2804              CMP      r0,#4                 ;97
00015c  d007              BEQ      |L6.366|
00015e  7862              LDRB     r2,[r4,#1]            ;98
000160  a1b6              ADR      r1,|L6.1084|
000162  2000              MOVS     r0,#0                 ;98
000164  f7fffffe          BL       wpa_printf
000168  f04f30ff          MOV      r0,#0xffffffff        ;100
00016c  e775              B        |L6.90|
                  |L6.366|
00016e  1ca0              ADDS     r0,r4,#2              ;102
000170  6368              STR      r0,[r5,#0x34]         ;102
000172  e054              B        |L6.542|
                  |L6.372|
000174  a1bc              ADR      r1,|L6.1128|
000176  2000              MOVS     r0,#0                 ;105
000178  f7fffffe          BL       wpa_printf
00017c  1ca0              ADDS     r0,r4,#2              ;106
00017e  63a8              STR      r0,[r5,#0x38]         ;106
000180  7860              LDRB     r0,[r4,#1]            ;107
000182  1e80              SUBS     r0,r0,#2              ;107
000184  63e8              STR      r0,[r5,#0x3c]         ;107
000186  e04a              B        |L6.542|
                  |L6.392|
000188  a1bf              ADR      r1,|L6.1160|
00018a  2000              MOVS     r0,#0                 ;110
00018c  f7fffffe          BL       wpa_printf
000190  1ca0              ADDS     r0,r4,#2              ;111
000192  6428              STR      r0,[r5,#0x40]         ;111
000194  7860              LDRB     r0,[r4,#1]            ;112
000196  1e80              SUBS     r0,r0,#2              ;112
000198  6468              STR      r0,[r5,#0x44]         ;112
00019a  e040              B        |L6.542|
                  |L6.412|
00019c  a1c0              ADR      r1,|L6.1184|
00019e  2000              MOVS     r0,#0                 ;115
0001a0  f7fffffe          BL       wpa_printf
0001a4  2602              MOVS     r6,#2                 ;116
0001a6  e009              B        |L6.444|
                  |L6.424|
0001a8  5da0              LDRB     r0,[r4,r6]            ;117
0001aa  b130              CBZ      r0,|L6.442|
0001ac  a1c3              ADR      r1,|L6.1212|
0001ae  2000              MOVS     r0,#0                 ;118
0001b0  f7fffffe          BL       wpa_printf
0001b4  f04f30ff          MOV      r0,#0xffffffff        ;120
0001b8  e74f              B        |L6.90|
                  |L6.442|
0001ba  1c76              ADDS     r6,r6,#1              ;116
                  |L6.444|
0001bc  7860              LDRB     r0,[r4,#1]            ;116
0001be  42b0              CMP      r0,r6                 ;116
0001c0  d8f2              BHI      |L6.424|
0001c2  e02c              B        |L6.542|
                  |L6.452|
0001c4  a1c8              ADR      r1,|L6.1256|
0001c6  2000              MOVS     r0,#0                 ;125
0001c8  f7fffffe          BL       wpa_printf
0001cc  1ca0              ADDS     r0,r4,#2              ;126
0001ce  64a8              STR      r0,[r5,#0x48]         ;126
0001d0  7860              LDRB     r0,[r4,#1]            ;127
0001d2  1e80              SUBS     r0,r0,#2              ;127
0001d4  64e8              STR      r0,[r5,#0x4c]         ;127
0001d6  e022              B        |L6.542|
                  |L6.472|
0001d8  a1ab              ADR      r1,|L6.1160|
0001da  2000              MOVS     r0,#0                 ;130
0001dc  f7fffffe          BL       wpa_printf
0001e0  7860              LDRB     r0,[r4,#1]            ;131
0001e2  2806              CMP      r0,#6                 ;131
0001e4  d007              BEQ      |L6.502|
0001e6  7862              LDRB     r2,[r4,#1]            ;132
0001e8  a1c7              ADR      r1,|L6.1288|
0001ea  2000              MOVS     r0,#0                 ;132
0001ec  f7fffffe          BL       wpa_printf
0001f0  f04f30ff          MOV      r0,#0xffffffff        ;134
0001f4  e731              B        |L6.90|
                  |L6.502|
0001f6  1ca0              ADDS     r0,r4,#2              ;136
0001f8  6528              STR      r0,[r5,#0x50]         ;136
0001fa  e010              B        |L6.542|
                  |L6.508|
0001fc  7820              LDRB     r0,[r4,#0]            ;139
0001fe  2880              CMP      r0,#0x80              ;139
000200  da07              BGE      |L6.530|
000202  7822              LDRB     r2,[r4,#0]            ;140
000204  a1ca              ADR      r1,|L6.1328|
000206  2000              MOVS     r0,#0                 ;140
000208  f7fffffe          BL       wpa_printf
00020c  f04f30ff          MOV      r0,#0xffffffff        ;142
000210  e723              B        |L6.90|
                  |L6.530|
000212  7822              LDRB     r2,[r4,#0]            ;144
000214  a1d2              ADR      r1,|L6.1376|
000216  2000              MOVS     r0,#0                 ;144
000218  f7fffffe          BL       wpa_printf
00021c  bf00              NOP                            ;146
                  |L6.542|
00021e  bf00              NOP                            ;38
000220  6c28              LDR      r0,[r5,#0x40]         ;149
000222  b140              CBZ      r0,|L6.566|
000224  6ba8              LDR      r0,[r5,#0x38]         ;149
000226  b930              CBNZ     r0,|L6.566|
000228  a1da              ADR      r1,|L6.1428|
00022a  2000              MOVS     r0,#0                 ;150
00022c  f7fffffe          BL       wpa_printf
000230  f04f30ff          MOV      r0,#0xffffffff        ;152
000234  e711              B        |L6.90|
                  |L6.566|
000236  2000              MOVS     r0,#0                 ;155
000238  e70f              B        |L6.90|
;;;157    
                          ENDP

00023a  0000              DCW      0x0000
                  |L6.572|
00023c  4541502d          DCB      "EAP-SAKE: Parse: AT_RAND_S",0
000240  53414b45
000244  3a205061
000248  7273653a
00024c  2041545f
000250  52414e44
000254  5f5300  
000257  00                DCB      0
                  |L6.600|
000258  4541502d          DCB      "EAP-SAKE: AT_RAND_S with invalid length %d",0
00025c  53414b45
000260  3a204154
000264  5f52414e
000268  445f5320
00026c  77697468
000270  20696e76
000274  616c6964
000278  206c656e
00027c  67746820
000280  256400  
000283  00                DCB      0
                  |L6.644|
000284  4541502d          DCB      "EAP-SAKE: Parse: AT_RAND_P",0
000288  53414b45
00028c  3a205061
000290  7273653a
000294  2041545f
000298  52414e44
00029c  5f5000  
00029f  00                DCB      0
                  |L6.672|
0002a0  4541502d          DCB      "EAP-SAKE: AT_RAND_P with invalid length %d",0
0002a4  53414b45
0002a8  3a204154
0002ac  5f52414e
0002b0  445f5020
0002b4  77697468
0002b8  20696e76
0002bc  616c6964
0002c0  206c656e
0002c4  67746820
0002c8  256400  
0002cb  00                DCB      0
                  |L6.716|
0002cc  4541502d          DCB      "EAP-SAKE: Parse: AT_MIC_S",0
0002d0  53414b45
0002d4  3a205061
0002d8  7273653a
0002dc  2041545f
0002e0  4d49435f
0002e4  5300    
0002e6  00                DCB      0
0002e7  00                DCB      0
                  |L6.744|
0002e8  4541502d          DCB      "EAP-SAKE: AT_MIC_S with invalid length %d",0
0002ec  53414b45
0002f0  3a204154
0002f4  5f4d4943
0002f8  5f532077
0002fc  69746820
000300  696e7661
000304  6c696420
000308  6c656e67
00030c  74682025
000310  6400    
000312  00                DCB      0
000313  00                DCB      0
                  |L6.788|
000314  4541502d          DCB      "EAP-SAKE: Parse: AT_MIC_P",0
000318  53414b45
00031c  3a205061
000320  7273653a
000324  2041545f
000328  4d49435f
00032c  5000    
00032e  00                DCB      0
00032f  00                DCB      0
                  |L6.816|
000330  4541502d          DCB      "EAP-SAKE: AT_MIC_P with invalid length %d",0
000334  53414b45
000338  3a204154
00033c  5f4d4943
000340  5f502077
000344  69746820
000348  696e7661
00034c  6c696420
000350  6c656e67
000354  74682025
000358  6400    
00035a  00                DCB      0
00035b  00                DCB      0
                  |L6.860|
00035c  4541502d          DCB      "EAP-SAKE: Parse: AT_SERVERID",0
000360  53414b45
000364  3a205061
000368  7273653a
00036c  2041545f
000370  53455256
000374  45524944
000378  00      
000379  00                DCB      0
00037a  00                DCB      0
00037b  00                DCB      0
                  |L6.892|
00037c  4541502d          DCB      "EAP-SAKE: Parse: AT_PEERID",0
000380  53414b45
000384  3a205061
000388  7273653a
00038c  2041545f
000390  50454552
000394  494400  
000397  00                DCB      0
                  |L6.920|
000398  4541502d          DCB      "EAP-SAKE: Parse: AT_SPI_S",0
00039c  53414b45
0003a0  3a205061
0003a4  7273653a
0003a8  2041545f
0003ac  5350495f
0003b0  5300    
0003b2  00                DCB      0
0003b3  00                DCB      0
                  |L6.948|
0003b4  4541502d          DCB      "EAP-SAKE: Parse: AT_SPI_P",0
0003b8  53414b45
0003bc  3a205061
0003c0  7273653a
0003c4  2041545f
0003c8  5350495f
0003cc  5000    
0003ce  00                DCB      0
0003cf  00                DCB      0
                  |L6.976|
0003d0  4541502d          DCB      "EAP-SAKE: Parse: AT_ANY_ID_REQ",0
0003d4  53414b45
0003d8  3a205061
0003dc  7273653a
0003e0  2041545f
0003e4  414e595f
0003e8  49445f52
0003ec  455100  
0003ef  00                DCB      0
                  |L6.1008|
0003f0  4541502d          DCB      "EAP-SAKE: Invalid AT_ANY_ID_REQ length %d",0
0003f4  53414b45
0003f8  3a20496e
0003fc  76616c69
000400  64204154
000404  5f414e59
000408  5f49445f
00040c  52455120
000410  6c656e67
000414  74682025
000418  6400    
00041a  00                DCB      0
00041b  00                DCB      0
                  |L6.1052|
00041c  4541502d          DCB      "EAP-SAKE: Parse: AT_PERM_ID_REQ",0
000420  53414b45
000424  3a205061
000428  7273653a
00042c  2041545f
000430  5045524d
000434  5f49445f
000438  52455100
                  |L6.1084|
00043c  4541502d          DCB      "EAP-SAKE: Invalid AT_PERM_ID_REQ length %d",0
000440  53414b45
000444  3a20496e
000448  76616c69
00044c  64204154
000450  5f504552
000454  4d5f4944
000458  5f524551
00045c  206c656e
000460  67746820
000464  256400  
000467  00                DCB      0
                  |L6.1128|
000468  4541502d          DCB      "EAP-SAKE: Parse: AT_ENCR_DATA",0
00046c  53414b45
000470  3a205061
000474  7273653a
000478  2041545f
00047c  454e4352
000480  5f444154
000484  4100    
000486  00                DCB      0
000487  00                DCB      0
                  |L6.1160|
000488  4541502d          DCB      "EAP-SAKE: Parse: AT_IV",0
00048c  53414b45
000490  3a205061
000494  7273653a
000498  2041545f
00049c  495600  
00049f  00                DCB      0
                  |L6.1184|
0004a0  4541502d          DCB      "EAP-SAKE: Parse: AT_PADDING",0
0004a4  53414b45
0004a8  3a205061
0004ac  7273653a
0004b0  2041545f
0004b4  50414444
0004b8  494e4700
                  |L6.1212|
0004bc  4541502d          DCB      "EAP-SAKE: AT_PADDING with non-zero pad byte",0
0004c0  53414b45
0004c4  3a204154
0004c8  5f504144
0004cc  44494e47
0004d0  20776974
0004d4  68206e6f
0004d8  6e2d7a65
0004dc  726f2070
0004e0  61642062
0004e4  79746500
                  |L6.1256|
0004e8  4541502d          DCB      "EAP-SAKE: Parse: AT_NEXT_TMPID",0
0004ec  53414b45
0004f0  3a205061
0004f4  7273653a
0004f8  2041545f
0004fc  4e455854
000500  5f544d50
000504  494400  
000507  00                DCB      0
                  |L6.1288|
000508  4541502d          DCB      "EAP-SAKE: Invalid AT_MSK_LIFE length %d",0
00050c  53414b45
000510  3a20496e
000514  76616c69
000518  64204154
00051c  5f4d534b
000520  5f4c4946
000524  45206c65
000528  6e677468
00052c  20256400
                  |L6.1328|
000530  4541502d          DCB      "EAP-SAKE: Unknown non-skippable attribute %d",0
000534  53414b45
000538  3a20556e
00053c  6b6e6f77
000540  6e206e6f
000544  6e2d736b
000548  69707061
00054c  626c6520
000550  61747472
000554  69627574
000558  65202564
00055c  00      
00055d  00                DCB      0
00055e  00                DCB      0
00055f  00                DCB      0
                  |L6.1376|
000560  4541502d          DCB      "EAP-SAKE: Ignoring unknown skippable attribute %d",0
000564  53414b45
000568  3a204967
00056c  6e6f7269
000570  6e672075
000574  6e6b6e6f
000578  776e2073
00057c  6b697070
000580  61626c65
000584  20617474
000588  72696275
00058c  74652025
000590  6400    
000592  00                DCB      0
000593  00                DCB      0
                  |L6.1428|
000594  4541502d          DCB      "EAP-SAKE: AT_IV included without AT_ENCR_DATA",0
000598  53414b45
00059c  3a204154
0005a0  5f495620
0005a4  696e636c
0005a8  75646564
0005ac  20776974
0005b0  686f7574
0005b4  2041545f
0005b8  454e4352
0005bc  5f444154
0005c0  4100    
0005c2  00                DCB      0
0005c3  00                DCB      0

                          AREA ||i.eap_sake_parse_attributes||, CODE, READONLY, ALIGN=2

                  eap_sake_parse_attributes PROC
;;;165     */
;;;166    int eap_sake_parse_attributes(const u8 *buf, size_t len,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;167    			      struct eap_sake_parse_attr *attr)
;;;168    {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;169    	const u8 *pos = buf, *end = buf + len;
00000a  462c              MOV      r4,r5
00000c  19ee              ADDS     r6,r5,r7
;;;170    
;;;171    	os_memset(attr, 0, sizeof(*attr));
00000e  2254              MOVS     r2,#0x54
000010  2100              MOVS     r1,#0
000012  4640              MOV      r0,r8
000014  f7fffffe          BL       os_memset
;;;172    	while (pos < end) {
000018  e02a              B        |L7.112|
                  |L7.26|
;;;173    		if (end - pos < 2) {
00001a  1b30              SUBS     r0,r6,r4
00001c  2802              CMP      r0,#2
00001e  da07              BGE      |L7.48|
;;;174    			wpa_printf(MSG_DEBUG, "EAP-SAKE: Too short attribute");
000020  a115              ADR      r1,|L7.120|
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       wpa_printf
;;;175    			return -1;
000028  f04f30ff          MOV      r0,#0xffffffff
                  |L7.44|
;;;176    		}
;;;177    
;;;178    		if (pos[1] < 2) {
;;;179    			wpa_printf(MSG_DEBUG, "EAP-SAKE: Invalid attribute "
;;;180    				   "length (%d)", pos[1]);
;;;181    			return -1;
;;;182    		}
;;;183    
;;;184    		if (pos + pos[1] > end) {
;;;185    			wpa_printf(MSG_DEBUG, "EAP-SAKE: Attribute underflow");
;;;186    			return -1;
;;;187    		}
;;;188    
;;;189    		if (eap_sake_parse_add_attr(attr, pos))
;;;190    			return -1;
;;;191    
;;;192    		pos += pos[1];
;;;193    	}
;;;194    
;;;195    	return 0;
;;;196    }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L7.48|
000030  7860              LDRB     r0,[r4,#1]            ;178
000032  2802              CMP      r0,#2                 ;178
000034  da07              BGE      |L7.70|
000036  7862              LDRB     r2,[r4,#1]            ;179
000038  a117              ADR      r1,|L7.152|
00003a  2000              MOVS     r0,#0                 ;179
00003c  f7fffffe          BL       wpa_printf
000040  f04f30ff          MOV      r0,#0xffffffff        ;181
000044  e7f2              B        |L7.44|
                  |L7.70|
000046  7860              LDRB     r0,[r4,#1]            ;184
000048  4420              ADD      r0,r0,r4              ;184
00004a  42b0              CMP      r0,r6                 ;184
00004c  d906              BLS      |L7.92|
00004e  a11c              ADR      r1,|L7.192|
000050  2000              MOVS     r0,#0                 ;185
000052  f7fffffe          BL       wpa_printf
000056  f04f30ff          MOV      r0,#0xffffffff        ;186
00005a  e7e7              B        |L7.44|
                  |L7.92|
00005c  4621              MOV      r1,r4                 ;189
00005e  4640              MOV      r0,r8                 ;189
000060  f7fffffe          BL       eap_sake_parse_add_attr
000064  b110              CBZ      r0,|L7.108|
000066  f04f30ff          MOV      r0,#0xffffffff        ;190
00006a  e7df              B        |L7.44|
                  |L7.108|
00006c  7860              LDRB     r0,[r4,#1]            ;192
00006e  4404              ADD      r4,r4,r0              ;192
                  |L7.112|
000070  42b4              CMP      r4,r6                 ;172
000072  d3d2              BCC      |L7.26|
000074  2000              MOVS     r0,#0                 ;195
000076  e7d9              B        |L7.44|
;;;197    
                          ENDP

                  |L7.120|
000078  4541502d          DCB      "EAP-SAKE: Too short attribute",0
00007c  53414b45
000080  3a20546f
000084  6f207368
000088  6f727420
00008c  61747472
000090  69627574
000094  6500    
000096  00                DCB      0
000097  00                DCB      0
                  |L7.152|
000098  4541502d          DCB      "EAP-SAKE: Invalid attribute length (%d)",0
00009c  53414b45
0000a0  3a20496e
0000a4  76616c69
0000a8  64206174
0000ac  74726962
0000b0  75746520
0000b4  6c656e67
0000b8  74682028
0000bc  25642900
                  |L7.192|
0000c0  4541502d          DCB      "EAP-SAKE: Attribute underflow",0
0000c4  53414b45
0000c8  3a204174
0000cc  74726962
0000d0  75746520
0000d4  756e6465
0000d8  72666c6f
0000dc  7700    
0000de  00                DCB      0
0000df  00                DCB      0

                          AREA ||i.is_zero_ether_addr||, CODE, READONLY, ALIGN=1

                  is_zero_ether_addr PROC
;;;491    
;;;492    static int is_zero_ether_addr(const u8 *a)
000000  4601              MOV      r1,r0
;;;493    {
;;;494    	return !(a[0] | a[1] | a[2] | a[3] | a[4] | a[5]);
000002  7808              LDRB     r0,[r1,#0]
000004  784a              LDRB     r2,[r1,#1]
000006  4310              ORRS     r0,r0,r2
000008  788a              LDRB     r2,[r1,#2]
00000a  4310              ORRS     r0,r0,r2
00000c  78ca              LDRB     r2,[r1,#3]
00000e  4310              ORRS     r0,r0,r2
000010  790a              LDRB     r2,[r1,#4]
000012  4310              ORRS     r0,r0,r2
000014  794a              LDRB     r2,[r1,#5]
000016  4310              ORRS     r0,r0,r2
000018  d101              BNE      |L8.30|
00001a  2001              MOVS     r0,#1
                  |L8.28|
;;;495    }
00001c  4770              BX       lr
                  |L8.30|
00001e  2000              MOVS     r0,#0                 ;494
000020  e7fc              B        |L8.28|
;;;496    
                          ENDP


                          AREA ||i.wpa_debug_close_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_close_syslog PROC
;;;243    
;;;244    static inline void wpa_debug_close_syslog(void)
000000  4770              BX       lr
;;;245    {
;;;246    }
;;;247    
                          ENDP


                          AREA ||i.wpa_debug_open_syslog||, CODE, READONLY, ALIGN=1

                  wpa_debug_open_syslog PROC
;;;239    
;;;240    static inline void wpa_debug_open_syslog(void)
000000  4770              BX       lr
;;;241    {
;;;242    }
;;;243    
                          ENDP


                          AREA ||i.wpa_hexdump_buf||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf PROC
;;;87     
;;;88     static inline void wpa_hexdump_buf(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;89     				   const struct wpabuf *buf)
;;;90     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;91     	wpa_hexdump(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump
;;;92     }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;93     
                          ENDP


                          AREA ||i.wpa_hexdump_buf_key||, CODE, READONLY, ALIGN=1

                  wpa_hexdump_buf_key PROC
;;;108    
;;;109    static inline void wpa_hexdump_buf_key(int level, const char *title,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    				       const struct wpabuf *buf)
;;;111    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;112    	wpa_hexdump_key(level, title, wpabuf_head(buf), wpabuf_len(buf));
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       wpabuf_len
000010  4607              MOV      r7,r0
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       wpabuf_head
000018  4680              MOV      r8,r0
00001a  463b              MOV      r3,r7
00001c  4602              MOV      r2,r0
00001e  4631              MOV      r1,r6
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       wpa_hexdump_key
;;;113    }
000026  e8bd81f0          POP      {r4-r8,pc}
;;;114    
                          ENDP


                          AREA ||i.wpabuf_head||, CODE, READONLY, ALIGN=1

                  wpabuf_head PROC
;;;81      */
;;;82     static inline const void * wpabuf_head(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;83     {
;;;84     	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L13.10|
;;;85     		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L13.8|
;;;86     	return buf + 1;
;;;87     }
000008  4770              BX       lr
                  |L13.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;86
00000e  e7fb              B        |L13.8|
;;;88     
                          ENDP


                          AREA ||i.wpabuf_head_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_head_u8 PROC
;;;88     
;;;89     static inline const u8 * wpabuf_head_u8(const struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  4604              MOV      r4,r0
;;;91     	return wpabuf_head(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_head
;;;92     }
00000a  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.wpabuf_len||, CODE, READONLY, ALIGN=1

                  wpabuf_len PROC
;;;61      */
;;;62     static inline size_t wpabuf_len(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;63     {
;;;64     	return buf->used;
000002  6848              LDR      r0,[r1,#4]
;;;65     }
000004  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i.wpabuf_mhead||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead PROC
;;;98      */
;;;99     static inline void * wpabuf_mhead(struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;100    {
;;;101    	if (buf->ext_data)
000002  6888              LDR      r0,[r1,#8]
000004  b108              CBZ      r0,|L16.10|
;;;102    		return buf->ext_data;
000006  6888              LDR      r0,[r1,#8]
                  |L16.8|
;;;103    	return buf + 1;
;;;104    }
000008  4770              BX       lr
                  |L16.10|
00000a  f101000c          ADD      r0,r1,#0xc            ;103
00000e  e7fb              B        |L16.8|
;;;105    
                          ENDP


                          AREA ||i.wpabuf_mhead_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_mhead_u8 PROC
;;;105    
;;;106    static inline u8 * wpabuf_mhead_u8(struct wpabuf *buf)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108    	return wpabuf_mhead(buf);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       wpabuf_mhead
;;;109    }
00000a  bd10              POP      {r4,pc}
;;;110    
                          ENDP


                          AREA ||i.wpabuf_put_be16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be16 PROC
;;;122    
;;;123    static inline void wpabuf_put_be16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;125    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;126    	WPA_PUT_BE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7028              STRB     r0,[r5,#0]
000016  706c              STRB     r4,[r5,#1]
000018  bf00              NOP      
;;;127    }
00001a  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP


                          AREA ||i.wpabuf_put_be24||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be24 PROC
;;;128    
;;;129    static inline void wpabuf_put_be24(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;131    	u8 *pos = wpabuf_put(buf, 3);
000006  2103              MOVS     r1,#3
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;132    	WPA_PUT_BE24(pos, data);
000010  bf00              NOP      
000012  0c20              LSRS     r0,r4,#16
000014  7028              STRB     r0,[r5,#0]
000016  0a20              LSRS     r0,r4,#8
000018  7068              STRB     r0,[r5,#1]
00001a  70ac              STRB     r4,[r5,#2]
00001c  bf00              NOP      
;;;133    }
00001e  bd70              POP      {r4-r6,pc}
;;;134    
                          ENDP


                          AREA ||i.wpabuf_put_be32||, CODE, READONLY, ALIGN=1

                  wpabuf_put_be32 PROC
;;;134    
;;;135    static inline void wpabuf_put_be32(struct wpabuf *buf, u32 data)
000000  b570              PUSH     {r4-r6,lr}
;;;136    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;137    	u8 *pos = wpabuf_put(buf, 4);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;138    	WPA_PUT_BE32(pos, data);
000010  bf00              NOP      
000012  0e20              LSRS     r0,r4,#24
000014  7028              STRB     r0,[r5,#0]
000016  0c20              LSRS     r0,r4,#16
000018  7068              STRB     r0,[r5,#1]
00001a  0a20              LSRS     r0,r4,#8
00001c  70a8              STRB     r0,[r5,#2]
00001e  70ec              STRB     r4,[r5,#3]
000020  bf00              NOP      
;;;139    }
000022  bd70              POP      {r4-r6,pc}
;;;140    
                          ENDP


                          AREA ||i.wpabuf_put_buf||, CODE, READONLY, ALIGN=1

                  wpabuf_put_buf PROC
;;;147    
;;;148    static inline void wpabuf_put_buf(struct wpabuf *dst,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;149    				  const struct wpabuf *src)
;;;150    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;151    	wpabuf_put_data(dst, wpabuf_head(src), wpabuf_len(src));
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       wpabuf_len
00000e  4606              MOV      r6,r0
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       wpabuf_head
000016  4607              MOV      r7,r0
000018  4632              MOV      r2,r6
00001a  4601              MOV      r1,r0
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       wpabuf_put_data
;;;152    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;153    
                          ENDP


                          AREA ||i.wpabuf_put_data||, CODE, READONLY, ALIGN=1

                  wpabuf_put_data PROC
;;;140    
;;;141    static inline void wpabuf_put_data(struct wpabuf *buf, const void *data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;142    				   size_t len)
;;;143    {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;144    	if (data)
00000a  b144              CBZ      r4,|L22.30|
;;;145    		os_memcpy(wpabuf_put(buf, len), data, len);
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       wpabuf_put
000014  4607              MOV      r7,r0
000016  462a              MOV      r2,r5
000018  4621              MOV      r1,r4
00001a  f7fffffe          BL       os_memcpy
                  |L22.30|
;;;146    }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;147    
                          ENDP


                          AREA ||i.wpabuf_put_le16||, CODE, READONLY, ALIGN=1

                  wpabuf_put_le16 PROC
;;;116    
;;;117    static inline void wpabuf_put_le16(struct wpabuf *buf, u16 data)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;119    	u8 *pos = wpabuf_put(buf, 2);
000006  2102              MOVS     r1,#2
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       wpabuf_put
00000e  4605              MOV      r5,r0
;;;120    	WPA_PUT_LE16(pos, data);
000010  bf00              NOP      
000012  1220              ASRS     r0,r4,#8
000014  7068              STRB     r0,[r5,#1]
000016  702c              STRB     r4,[r5,#0]
000018  bf00              NOP      
;;;121    }
00001a  bd70              POP      {r4-r6,pc}
;;;122    
                          ENDP


                          AREA ||i.wpabuf_put_str||, CODE, READONLY, ALIGN=1

                  wpabuf_put_str PROC
;;;159    
;;;160    static inline void wpabuf_put_str(struct wpabuf *dst, const char *str)
000000  b570              PUSH     {r4-r6,lr}
;;;161    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;162    	wpabuf_put_data(dst, str, os_strlen(str));
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       os_strlen
00000c  4606              MOV      r6,r0
00000e  4602              MOV      r2,r0
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       wpabuf_put_data
;;;163    }
000018  bd70              POP      {r4-r6,pc}
;;;164    
                          ENDP


                          AREA ||i.wpabuf_put_u8||, CODE, READONLY, ALIGN=1

                  wpabuf_put_u8 PROC
;;;110    
;;;111    static inline void wpabuf_put_u8(struct wpabuf *buf, u8 data)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;113    	u8 *pos = wpabuf_put(buf, 1);
000006  2101              MOVS     r1,#1
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       wpabuf_put
00000e  4606              MOV      r6,r0
;;;114    	*pos = data;
000010  7034              STRB     r4,[r6,#0]
;;;115    }
000012  bd70              POP      {r4-r6,pc}
;;;116    
                          ENDP


                          AREA ||i.wpabuf_set||, CODE, READONLY, ALIGN=1

                  wpabuf_set PROC
;;;153    
;;;154    static inline void wpabuf_set(struct wpabuf *buf, const void *data, size_t len)
000000  6081              STR      r1,[r0,#8]
;;;155    {
;;;156    	buf->ext_data = (u8 *) data;
;;;157    	buf->size = buf->used = len;
000002  6042              STR      r2,[r0,#4]
000004  6002              STR      r2,[r0,#0]
;;;158    }
000006  4770              BX       lr
;;;159    
                          ENDP


                          AREA ||i.wpabuf_size||, CODE, READONLY, ALIGN=1

                  wpabuf_size PROC
;;;51      */
;;;52     static inline size_t wpabuf_size(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;53     {
;;;54     	return buf->size;
000002  6808              LDR      r0,[r1,#0]
;;;55     }
000004  4770              BX       lr
;;;56     
                          ENDP


                          AREA ||i.wpabuf_tailroom||, CODE, READONLY, ALIGN=1

                  wpabuf_tailroom PROC
;;;71      */
;;;72     static inline size_t wpabuf_tailroom(const struct wpabuf *buf)
000000  4601              MOV      r1,r0
;;;73     {
;;;74     	return buf->size - buf->used;
000002  e9d10200          LDRD     r0,r2,[r1,#0]
000006  1a80              SUBS     r0,r0,r2
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP

